
sss.elf:     file format elf32-littlenios2
sss.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00050c28 memsz 0x00050c28 flags r-x
    LOAD off    0x00051c48 vaddr 0x00050c48 paddr 0x00053080 align 2**12
         filesz 0x00002438 memsz 0x00002438 flags rw-
    LOAD off    0x000544b8 vaddr 0x000554b8 paddr 0x000554b8 align 2**12
         filesz 0x00000000 memsz 0x0000ab40 flags rw-
    LOAD off    0x00055000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00055000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0004acdc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005f4c  0004acfc  0004acfc  0004bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00002438  00050c48  00053080  00051c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000ab40  000554b8  000554b8  000544b8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00055020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00001c10  00000000  00000000  00055048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0006de8e  00000000  00000000  00056c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00015500  00000000  00000000  000c4ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001c4a8  00000000  00000000  000d9fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00006988  00000000  00000000  000f6490  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000bad7  00000000  00000000  000fce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00019650  00000000  00000000  001088ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000050  00000000  00000000  00121f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ab0  00000000  00000000  00121f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000006  00000000  00000000  0012da3c  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  0012da42  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0012da45  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0012da46  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0012da47  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0012da4b  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0012da4f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0012da53  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0012da5c  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0012da65  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0012da6e  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002e  00000000  00000000  0012da7a  2**0
                  CONTENTS, READONLY
 27 .jdi          00005066  00000000  00000000  0012daa8  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001a200d  00000000  00000000  00132b0e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
0004acfc l    d  .rodata	00000000 .rodata
00050c48 l    d  .rwdata	00000000 .rwdata
000554b8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sss_bsp//obj/HAL/src/crt0.o
00000098 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_error_handler.c
00000000 l    df *ABS*	00000000 iniche_init.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 network_utilities.c
00000000 l    df *ABS*	00000000 simple_socket_server.c
000554c4 l     O .bss	00000004 SSSCommand.4588
000556d4 l     O .bss	000005f0 conn.4608
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 ctype_.c
0004bf01 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00050d80 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000347c l     F .text	00000034 __sprint_r
0004c876 l     O .rodata	00000010 blanks.3515
0004c886 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005598 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006fd4 l     F .text	00000008 __fp_lock
00006fdc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0004c8b8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0004ca00 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00009ed4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000b35c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c09c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c810 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000c90c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000c9fc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000cae8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00052f50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
00052f54 l     O .rwdata	00000004 lockid
000554fc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00052f58 l     O .rwdata	00000004 lockid
00055504 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000eb08 l     F .text	00000044 OS_InitMisc
0000eb4c l     F .text	0000006c OS_InitRdyList
0000ecb0 l     F .text	000000e0 OS_InitTCBList
0000ea2c l     F .text	000000dc OS_InitEventList
0000ebb8 l     F .text	0000007c OS_InitTaskIdle
0000ec34 l     F .text	0000007c OS_InitTaskStat
0000ef48 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011408 l     F .text	0000010c OS_FlagTaskRdy
00011164 l     F .text	000001c0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016ad8 l     F .text	00000038 alt_dev_reg
00051594 l     O .rwdata	0000009c vic_0
00051630 l     O .rwdata	000000d8 ext_flash
00051708 l     O .rwdata	0000106c jtag_uart
00052774 l     O .rwdata	00000124 lcd
00052898 l     O .rwdata	00000030 sgdma_rx
000528c8 l     O .rwdata	00000030 sgdma_tx
000528f8 l     O .rwdata	000000d0 rs232
000529c8 l     O .rwdata	000000d0 uart_0
00052a98 l     O .rwdata	000000d0 uart_1
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
00016e20 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00017c58 l     F .text	00000080 alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00018d84 l     F .text	000002ac altera_avalon_jtag_uart_irq
00019030 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00052fd4 l     O .rwdata	00000004 colstart
00019884 l     F .text	000000b4 lcd_write_command
00019938 l     F .text	000000d0 lcd_write_data
00019a08 l     F .text	000000cc lcd_clear_screen
00019ad4 l     F .text	000001ec lcd_repaint_screen
00019cc0 l     F .text	000000cc lcd_scroll_up
00019d8c l     F .text	000002bc lcd_handle_escape
0001a564 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0001a7d0 l     F .text	00000050 alt_get_errno
0001b374 l     F .text	000000e4 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b4fc l     F .text	000000a0 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
0005555f l     O .bss	00000001 tse_system_count.4448
0005555e l     O .bss	00000001 is_init.4530
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002082c l     F .text	00000098 altera_avalon_uart_irq
000208c4 l     F .text	00000138 altera_avalon_uart_rxirq
000209fc l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00020bf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00020f30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
0004e8b4 l     O .rodata	00000020 VEC_SIZE_ARRAY.1688
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 ins_tse_mac.c
00000000 l    df *ABS*	00000000 alt_iniche_close.c
00000000 l    df *ABS*	00000000 alt_iniche_dev.c
00000000 l    df *ABS*	00000000 alt_iniche_read.c
00000000 l    df *ABS*	00000000 alt_iniche_write.c
00000000 l    df *ABS*	00000000 ipnet.c
00000000 l    df *ABS*	00000000 ipstart.c
00055cec l     O .bss	0000003c closers
00055578 l     O .bss	00000004 nclosers
00000000 l    df *ABS*	00000000 igmp_cmn.c
00000000 l    df *ABS*	00000000 bsdsock.c
00000000 l    df *ABS*	00000000 cksum.c
00052ff0 l     O .rwdata	00000004 cksum_select
00000000 l    df *ABS*	00000000 in_utils.c
00055d28 l     O .bss	00000018 tistring
00000000 l    df *ABS*	00000000 netmain.c
00000000 l    df *ABS*	00000000 tk_crnos.c
00000000 l    df *ABS*	00000000 dhcpclnt.c
000291f4 l     F .text	000000cc dh_getlong
00000000 l    df *ABS*	00000000 dhcputil.c
00000000 l    df *ABS*	00000000 pktalloc.c
00000000 l    df *ABS*	00000000 q.c
00000000 l    df *ABS*	00000000 udp_open.c
00000000 l    df *ABS*	00000000 asm_cksum.o
0002b178 l       .text	00000000 done
0002b008 l       .text	00000000 asm1
0002b134 l       .text	00000000 loop0
0002b030 l       .text	00000000 loop
0002b150 l       .text	00000000 fold
00000000 l    df *ABS*	00000000 brdutils.c
000555e4 l     O .bss	00000004 kbd_init.3828
000555e0 l     O .bss	00000004 cpu_statusreg
00000000 l    df *ABS*	00000000 osportco.c
00000000 l    df *ABS*	00000000 targnios.c
00000000 l    df *ABS*	00000000 nptcp.c
00055618 l     O .bss	00000004 in_tcptick
00000000 l    df *ABS*	00000000 rawsock.c
00000000 l    df *ABS*	00000000 sockcall.c
0002f550 l     F .text	0000008c sockargs
0002e8b0 l     F .text	000001d4 t_getname
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 socket2.c
00000000 l    df *ABS*	00000000 soselect.c
00000000 l    df *ABS*	00000000 tcp_in.c
00000000 l    df *ABS*	00000000 tcp_out.c
00037128 l     F .text	000000c8 bld_options
00000000 l    df *ABS*	00000000 tcp_subr.c
00000000 l    df *ABS*	00000000 tcp_timr.c
00000000 l    df *ABS*	00000000 tcp_usr.c
00000000 l    df *ABS*	00000000 tcpport.c
00000000 l    df *ABS*	00000000 udpsock.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000399a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00039b00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00039b2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00039d94 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00039ecc l     F .text	00000050 alt_get_errno
00039f1c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0003a13c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0003a684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0003b02c l     F .text	000000cc alt_write_word_amd
0003af10 l     F .text	0000011c alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0003b2e0 l     F .text	0000017c alt_unlock_block_intel
0003b45c l     F .text	000000d4 alt_write_word_intel
00000000 l    df *ABS*	00000000 allports.c
0005564c l     O .bss	00000004 inside_pktdemux
00000000 l    df *ABS*	00000000 timeouts.c
0003bafc l     F .text	00000198 check_interval_timers
00055658 l     O .bss	00000004 numtimers
00000000 l    df *ABS*	00000000 tk_misc.c
00000000 l    df *ABS*	00000000 alt_iniche_fcntl.c
00000000 l    df *ABS*	00000000 et_arp.c
0005565c l     O .bss	00000004 arp_timer
00055664 l     O .bss	00000004 cachetime
00000000 l    df *ABS*	00000000 iface.c
00000000 l    df *ABS*	00000000 ip.c
00053068 l     O .rwdata	00000004 uid
00000000 l    df *ABS*	00000000 ip_reasm.c
00000000 l    df *ABS*	00000000 ipdemux.c
00000000 l    df *ABS*	00000000 ipmc.c
00000000 l    df *ABS*	00000000 ipport.c
00000000 l    df *ABS*	00000000 ipraw.c
00000000 l    df *ABS*	00000000 iproute.c
00000000 l    df *ABS*	00000000 udp.c
000556a4 l     O .bss	00000002 usocket
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 igmp2.c
00000000 l    df *ABS*	00000000 ipopt.c
00000000 l    df *ABS*	00000000 u_mctest.c
00053070 l     O .rwdata	00000004 iCounter.4586
00000000 l    df *ABS*	00000000 dhcsetup.c
00000000 l    df *ABS*	00000000 memdev.c
00000000 l    df *ABS*	00000000 parseip.c
00055d40 l     O .bss	0000001e nearBuf.4213
00000000 l    df *ABS*	00000000 tcpcksum.c
00000000 l    df *ABS*	00000000 in_pcb.c
00000000 l    df *ABS*	00000000 vfsfiles.c
00000000 l    df *ABS*	00000000 vfsport.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00048c3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 icmp.c
00052f18 l     O .rwdata	00000018 dsts
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00002ac4 g     F .text	0000001c putchar
0005fa64 g     O .bss	00000014 soq
00009764 g     F .text	00000074 _mprec_log10
0001c88c g     F .text	000000d8 alt_tse_get_mac_info
00052fa6 g     O .rwdata	00000002 OSTaskNameSize
00009854 g     F .text	00000084 __any_on
0000a6cc g     F .text	00000064 _isatty_r
0004c8e8 g     O .rodata	00000028 __mprec_tinytens
0003d9e0 g     F .text	00000740 ip_write_internal
0000cc08 g     F .text	000000cc alt_main
0004a3ec g     F .text	00000094 strcpy
0000c714 g     F .text	00000044 __ashldi3
0002a908 g     F .text	000000b0 pk_free
00002ae0 g     F .text	00000084 _puts_r
00017730 g     F .text	00000040 alt_read_query_entry_32bit
00052db8 g     O .rwdata	00000009 rtp_priority
0000a730 g     F .text	0000006c _lseek_r
00049f3c g     F .text	0000033c icmp_timex
0002c25c g     F .text	00000040 m_freem
00048614 g     F .text	00000048 vgetc
0002b2e8 g     F .text	0000001c clock_c
00055630 g     O .bss	00000004 tcp_optionbuf
0003d504 g     F .text	0000007c if_getbynum
00011df8 g     F .text	000000d0 OS_MemInit
000555d0 g     O .bss	00000004 dsc_rlyerrs
000555c0 g     O .bss	00000004 dsc_releases
00016ee8 g     F .text	000002ac alt_flash_cfi_write
00026ef8 g     F .text	0000006c TK_OSTaskQuery
0002afe8 g       .text	00000000 asm_cksum
00053080 g       *ABS*	00000000 __flash_rwdata_start
00020464 g     F .text	000000f0 marvell_cfg_rgmii
00016a48 g     F .text	00000090 OSTimeSet
0004851c g     F .text	000000f8 vgetc_locked
0002bb98 g     F .text	00000020 post_task_setup
000410b8 g     F .text	0000037c ipr_stats
00038980 g     F .text	00000118 tcp_attach
00053000 g     O .rwdata	00000004 reqlist_len
0002d640 g     F .text	000000c8 tcp_tick
00026198 g     F .text	0000007c print_ipad
00026df4 g     F .text	00000104 tcp_wakeup
0000bbfc g     F .text	0000005c __eqdf2
000554bc g     O .bss	00000004 last_flash_sector_offset
0005557c g     O .bss	00000004 igmp_timers_are_running
00000d98 g     F .text	000000f0 led_bit_toggle
00035b14 g     F .text	0000012c tcp_pulloutofband
0001da74 g     F .text	00000210 alt_tse_phy_print_profile
0000d4a0 g     F .text	00000718 OSEventPendMulti
0005fff8 g       *ABS*	00000000 __alt_heap_start
0003ab84 g     F .text	00000020 OSTaskCreateHook
0002a148 g     F .text	00000068 dhc_ifacedone
00020204 g     F .text	00000098 marvell_phy_cfg
00041484 g     F .text	000003e0 ip_rcv
000482c0 g     F .text	0000014c vfseek
00031ccc g     F .text	00000108 soqremque
0004317c g     F .text	00000818 udpdemux
00022d9c g     F .text	00000104 tse_mac_close
000028d4 g     F .text	0000003c printf
00055678 g     O .bss	00000004 rt_mib
00052f7e g     O .rwdata	00000002 OSMboxEn
0002a06c g     F .text	00000054 dhc_state_init
0004a940 g     F .text	00000024 vsprintf
0001a944 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0000dc0c g     F .text	000000a8 OSIntEnter
05000000 g       *ABS*	00000000 __alt_mem_sram
0000a280 g     F .text	0000005c __sseek
00007064 g     F .text	0000010c __sinit
0004238c g     F .text	00000108 in_delmulti
000052cc g     F .text	0000013c __swbuf_r
00055690 g     O .bss	00000004 so_evtmap_create
00052f8e g     O .rwdata	00000002 OSQEn
0004699c g     F .text	00000088 in_pcballoc
0005301c g     O .rwdata	00000002 socket_defaults
00007e30 g     F .text	0000009c _setlocale_r
0003c300 g     F .text	00000458 send_arp
00006ff0 g     F .text	00000064 __sfmoreglue
000473dc g     F .text	00000338 vfopen_locked
000554c8 g     O .bss	00000004 SSSLEDCommandQ
0000d060 g     F .text	00000158 __malloc_unlock
0003abe0 g     F .text	0000001c OSTaskStatHook
0003b940 g     F .text	00000054 prep_modules
00025774 g     F .text	0000013c bsd_i_sockoptlen
0005550c g     O .bss	00000001 OSLockNesting
00052ff8 g     O .rwdata	00000004 xids
00002d84 g     F .text	00000664 strerror
0001cad0 g     F .text	00000a74 getPHYSpeed
00047920 g     F .text	00000040 vfclose
0005fb04 g     O .bss	0000002c tcb
00052fcc g     O .rwdata	00000002 OSDataSize
0003a2dc g     F .text	00000034 alt_remap_cached
0005550d g     O .bss	00000001 OSRunning
0003d248 g     F .text	000002bc grat_arp
00001154 g     F .text	0000005c get_ip_addr
00046434 g     F .text	00000094 inet_pton
0003d654 g     F .text	00000090 reg_type
0005f608 g     O .bss	000000f0 dhc_states
00024554 g     F .text	00000224 igmp_fasttimo
00047ad0 g     F .text	00000058 vunlink_flag_open_files
00029e30 g     F .text	00000080 dhc_halt
0001b030 g     F .text	00000344 alt_avalon_sgdma_construct_descriptor_burst
000555b4 g     O .bss	00000004 dsc_acks
0005fb30 g     O .bss	000000e0 tcpstat
00040968 g     F .text	0000034c ip_reasm_copy_queued_fragments_into_reassy_buffer
0002c7b0 g     F .text	0000009c dtom
0003702c g     F .text	000000fc tcp_setpersist
0002ec38 g     F .text	00000184 t_getsockopt
00002620 g     F .text	00000128 memmove
000555c4 g     O .bss	00000004 dsc_naks
0002cc00 g     F .text	000005c4 ip_output
0003ac24 g     F .text	0000001c OSInitHookBegin
0004a278 g     F .text	00000050 icmp_du
00052ff4 g     O .rwdata	00000004 num_net_tasks
000556b4 g     O .bss	00000004 vfiles
00052fc4 g     O .rwdata	00000002 OSTmrSize
00045ba8 g     F .text	00000114 dhc_main_ipset
00007054 g     F .text	00000010 _cleanup
0003fb3c g     F .text	000002b8 ip_reasm_process_first_fragment
00008930 g     F .text	000000a8 _Balloc
00001660 g     F .text	000001a8 get_board_mac_addr
00055510 g     O .bss	00000004 OSIdleCtr
000554cc g     O .bss	00000004 SSSLEDLightshowSem
0001f478 g     F .text	000001bc alt_tse_phy_set_adv_1000
00052fe0 g     O .rwdata	00000001 max_mac_system
00044a7c g     F .text	000005cc ip_setmoptions
0001bb44 g     F .text	000009fc alt_tse_system_add_sys
0000bcb4 g     F .text	00000064 __gtdf2
00045f50 g     F .text	0000002c md_fseek
0003a86c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000f2c0 g     F .text	0000035c OS_TCBInit
0003fdf4 g     F .text	00000088 ip_reassm
00029eb0 g     F .text	000001bc dhc_reclaim
000178bc g     F .text	0000004c alt_write_flash_command_32bit_device_16bit_mode
0005fdf0 g     O .bss	00000010 udp_mib
05000000 g     F .entry	0000001c __reset
0002f3c4 g     F .text	000000d0 t_shutdown
00001f5c g     F .text	000001ec sss_handle_receive
0002ee9c g     F .text	00000138 t_recvfrom
00052fca g     O .rwdata	00000002 OSTmrWheelTblSize
00045210 g     F .text	00000708 u_mctest_run
0001aba0 g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
000424f8 g     F .text	00000088 prep_ifaces
00000020 g       *ABS*	00000000 __flash_exceptions_start
00055598 g     O .bss	00000001 to_netmain
0002a5b0 g     F .text	000000cc pk_alloc
00052f6a g     O .rwdata	00000002 OSEventSize
000009a4 g     F .text	000002fc alt_SSSErrorHandler
00055514 g     O .bss	00000001 OSPrioHighRdy
0000a664 g     F .text	00000068 _fstat_r
00050c60 g     O .rwdata	00000120 tse_mac_device
00026b6c g     F .text	00000048 tk_nettick
0003aba4 g     F .text	00000020 OSTaskDelHook
000173dc g     F .text	000002d8 alt_flash_program_block
000554ec g     O .bss	00000004 errno
00002bc4 g     F .text	00000014 __srget
00032ecc g     F .text	000000c0 in_pcbnotify
0003a84c g       .text	00000000 OSStartHighRdy
0005f6f8 g     O .bss	00000014 lilfreeq
0000009c g     F .text	00000648 alt_uCOSIIErrorHandler
000425a8 g     F .text	00000028 evtmap_setup
00014b38 g     F .text	000002a4 OSTaskCreateExt
0005559c g     O .bss	00000004 tcp_sleep_timeout
00032680 g     F .text	000001b8 sbdrop
0005568c g     O .bss	00000004 net_system_exit
0005fe00 g     O .bss	00000068 icmp_mib
00037acc g     F .text	00000078 tcp_getseq
00042990 g     F .text	000000c0 ip_raw_alloc
0001fd4c g     F .text	000004b8 alt_tse_phy_set_common_speed
00010b9c g     F .text	00000094 OSFlagPendGetFlagsRdy
00052faa g     O .rwdata	00000002 OSTaskStatStkSize
0005f0dc g     O .bss	00000010 pmac_groups
00028290 g     F .text	00000afc dhc_request
00030554 g     F .text	00000740 soreceive
0000f7a8 g     F .text	000003e4 OSFlagAccept
00012630 g     F .text	000000e4 OSQFlush
00011ec8 g     F .text	0000016c OSQAccept
000554f4 g     O .bss	00000004 alt_argv
0005af30 g       *ABS*	00000000 _gp
00041434 g     F .text	00000050 ip_reasm_send_icmp_timex
0003a570 g     F .text	00000114 usleep
00047960 g     F .text	00000048 vfflush
0005fa0c g     O .bss	00000040 resid_semaphore
00026058 g     F .text	00000140 hexdump
0003fa04 g     F .text	000000a0 ip_reasm_incr_mem_useage
0002bbf0 g     F .text	00000034 calloc2
00024c7c g     F .text	0000007c igmp_leavegroup
000148cc g     F .text	0000026c OSTaskCreate
000142f4 g     F .text	000005d8 OSTaskChangePrio
00055508 g     O .bss	00000004 alt_heapsem
00037914 g     F .text	000000f0 tcp_close
0000f61c g     F .text	0000018c OSDebugInit
00014ddc g     F .text	0000048c OSTaskDel
00048a3c g     F .text	0000005c vferror
0003a518 g     F .text	00000058 alt_uncached_malloc
0001b650 g     F .text	00000060 tse_mac_initTransInfo2
00043df4 g     F .text	000000bc udp_alloc
00052c20 g     O .rwdata	00000180 alt_fd_list
0005bdd8 g     O .bss	00000370 OSFlagTbl
0005561c g     O .bss	00000008 mbstat
00002430 g     F .text	00000070 _getc_r
000024a0 g     F .text	00000088 getc
00002abc g     F .text	00000008 _putchar_r
0000e81c g     F .text	000000b0 OS_EventTaskRemove
00021210 g       .text	00000000 VIC_0_VECTOR_TABLE
000446ac g     F .text	00000148 igmpv2_chk_set_timer
00026bb4 g     F .text	0000002c TK_OSTimeDly
00039cd4 g     F .text	00000090 alt_find_dev
00002528 g     F .text	000000f8 memcpy
0001b8bc g     F .text	00000054 tse_mac_setMIImode
000555cc g     O .bss	00000004 dsc_rebind
0003bf10 g     F .text	00000088 task_stats
0002e07c g     F .text	0000004c DOMAIN_CHECK
0002d1c4 g     F .text	00000038 in_broadcast
00052f94 g     O .rwdata	00000002 OSRdyTblSize
0001d544 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
000556b0 g     O .bss	00000004 vfsystems
00043d24 g     F .text	000000d0 udp_socket
0005556c g     O .bss	00000004 MaxMtu
00032bac g     F .text	0000013c sock_selscan
00006fe4 g     F .text	0000000c _cleanup_r
0000bdd8 g     F .text	000000d4 __floatsidf
0003f7dc g     F .text	000000c4 ip_reasm_match_frag_with_ire
00031e28 g     F .text	00000054 socantrcvmore
0001b6b0 g     F .text	000000e0 tse_mac_sTxWrite
00001dac g     F .text	000001b0 sss_exec_command
00002894 g     F .text	00000014 perror
00039e54 g     F .text	00000078 alt_io_redirect
0000bd7c g     F .text	0000005c __ltdf2
000555f8 g     O .bss	00000004 netq_intmask
000463e8 g     F .text	0000004c hextoa
0004acfc g       *ABS*	00000000 __DTOR_END__
0002f1c0 g     F .text	00000204 t_send
000399f8 g     F .text	000000c8 alt_close
00055624 g     O .bss	00000002 select_wait
00002b64 g     F .text	00000014 puts
000266d4 g     F .text	00000044 std_out
0005f0fc g     O .bss	00000030 tse_iniche_dev_driver_data
0004865c g     F .text	00000124 vfslookup_locked
0002fe10 g     F .text	00000098 soaccept
0000d1b8 g     F .text	0000014c OSEventNameGet
00052f78 g     O .rwdata	00000002 OSFlagMax
0005fa78 g     O .bss	0000003c tcpmib
0002f5dc g     F .text	00000098 t_errno
000425d0 g     F .text	000000e0 ip_raw_open
000290ec g     F .text	00000108 dhc_decline
000096c0 g     F .text	000000a4 __ratio
0000dcb4 g     F .text	00000120 OSIntExit
0005306c g     O .rwdata	00000004 ipRoutes
00047a80 g     F .text	00000050 vfeof
00037dc8 g     F .text	0000005c tcp_canceltimers
00027ae4 g     F .text	000001e4 dhc_buildheader
00052fb2 g     O .rwdata	00000002 OSTCBSize
0001ac90 g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00055515 g     O .bss	00000001 OSPrioCur
00019298 g     F .text	000002f0 altera_avalon_jtag_uart_read
0004a348 g     F .text	00000014 malloc
000556ac g     O .bss	00000004 inpcb_cachemiss
000028a8 g     F .text	0000002c _printf_r
000465a4 g     F .text	000000c0 inet46_addr
000556a8 g     O .bss	00000004 inpcb_cachehits
0000c1bc g     F .text	00000008 __udivsi3
00052be0 g     O .rwdata	0000000b tcp_outflags
0005f12c g     O .bss	00000130 tse
0000c95c g     F .text	000000a0 isatty
0001c540 g     F .text	00000164 alt_tse_sys_enable_mdio_sharing
00052f98 g     O .rwdata	00000002 OSStkWidth
0004c938 g     O .rodata	000000c8 __mprec_tens
00047258 g     F .text	00000070 vf_alloc_and_link_vop
00052f8c g     O .rwdata	00000002 OSPtrSize
0005567c g     O .bss	00000004 ipr_curr_mem
000241c8 g     F .text	0000006c exit_hook
00055580 g     O .bss	00000004 igmp_cticks
0001c80c g     F .text	00000080 alt_tse_get_mac_info_index
0005560c g     O .bss	00000004 mheap_sem_ptr
00035ecc g     F .text	0000004c ip4_tcpmss
00007ecc g     F .text	0000000c __locale_charset
00052f6c g     O .rwdata	00000002 OSEventTblSize
0005fd74 g     O .bss	00000014 netlist
00030c94 g     F .text	00000098 soshutdown
0004ac34 g     F .text	00000084 __fixunsdfsi
0003a7c0 g       .text	00000000 OSCtxSw
0003b8cc g     F .text	00000050 packet_check
00028d8c g     F .text	0000027c dhc_setip
00048fb4 g     F .text	0000008c alt_icache_flush
0005fab4 g     O .bss	00000014 mbufq
0002fdc0 g     F .text	00000050 soabort
000554e8 g     O .bss	00000004 __malloc_top_pad
00055518 g     O .bss	00000004 OSTCBList
0002abf8 g     F .text	00000100 qdel
0003b6b8 g     F .text	0000017c station_state
00042ae8 g     F .text	00000174 rt_lookup
0005563c g     O .bss	00000004 alt_fd_list_lock
00052f3c g     O .rwdata	00000004 __mb_cur_max
00024cf8 g     F .text	00000314 igmp_validate
00007ed8 g     F .text	0000000c _localeconv_r
00023f24 g     F .text	000002a4 ip_startup
0002e374 g     F .text	0000024c t_accept
000318b0 g     F .text	00000094 soisdisconnecting
00008d30 g     F .text	0000003c __i2b
000077ec g     F .text	000004e4 __sfvwrite_r
0001adbc g     F .text	00000058 alt_avalon_sgdma_stop
00023930 g     F .text	000003ac pktdemux
0005c148 g     O .bss	00000c30 OSMemTbl
0005551c g     O .bss	00000001 OSTickStepState
0001d5e4 g     F .text	0000012c alt_tse_phy_wr_mdio_reg
0002b1ac g     F .text	0000009c kbhit
0002ea84 g     F .text	000001b4 t_setsockopt
0000a140 g     F .text	00000064 _sbrk_r
0003b0f8 g     F .text	00000080 alt_program_intel
00052da0 g     O .rwdata	00000018 icmpdu_types
0001dc84 g     F .text	0000069c alt_tse_mac_group_init
00047b28 g     F .text	00000200 vunlink
00021ab8 g     F .text	00000a84 tse_mac_init
00052f90 g     O .rwdata	00000002 OSQMax
00025eb4 g     F .text	000000a8 ccksum
000472c8 g     F .text	000000c8 vf_alloc_buffer
000556a0 g     O .bss	00000004 cachedRoute
00053004 g     O .rwdata	00000004 lilbufs
0005cd78 g     O .bss	00000800 OSTaskStatStk
00045f7c g     F .text	00000024 md_ftell
00025f5c g     F .text	00000054 cksum
0001191c g     F .text	00000124 OSMemNameGet
0002f954 g     F .text	00000120 sofree
00055574 g     O .bss	00000004 ifNumber
00052f70 g     O .rwdata	00000002 OSFlagEn
0000a79c g     F .text	0000006c _read_r
00052fb6 g     O .rwdata	00000002 OSTimeTickHookEn
00039ac0 g     F .text	00000024 alt_dcache_flush
00011514 g     F .text	000000a0 OS_FlagUnlink
00012c60 g     F .text	000001ec OSQPost
00051180 g     O .rwdata	0000000c __lc_ctype
00053044 g     O .rwdata	00000004 alt_max_fd
000176b4 g     F .text	0000003c alt_read_query_entry_8bit
0000ede4 g     F .text	0000006c OS_MemCopy
0005300c g     O .rwdata	00000004 bigbufs
00038a98 g     F .text	000000cc tcp_disconnect
0000ee50 g     F .text	000000f8 OS_Sched
0000c4fc g     F .text	00000104 __unpack_d
0000a514 g     F .text	0000013c _fclose_r
000117d4 g     F .text	00000148 OSMemGet
0001569c g     F .text	00000274 OSTaskNameSet
0003b178 g     F .text	00000168 alt_erase_block_intel
00006fa4 g     F .text	00000030 fflush
000554e4 g     O .bss	00000004 __malloc_max_sbrked_mem
00055520 g     O .bss	00000004 OSCtxSwCtr
0005f580 g     O .bss	00000064 igmpstats
0003abfc g     F .text	00000028 OSTimeTickHook
000281ac g     F .text	000000e4 dhc_rx_offer
000258b0 g     F .text	00000104 bsd_getsockopt
00052f7a g     O .rwdata	00000002 OSFlagNameSize
0005fdd8 g     O .bss	00000018 ire_stats
00000f0c g     F .text	000001f4 LEDManagementTask
00038cdc g     F .text	000001a0 udp_soinput
0002ab4c g     F .text	000000ac putq
0000e8cc g     F .text	000000f8 OS_EventTaskRemoveMulti
00055594 g     O .bss	00000004 iniche_net_ready
0000b6b0 g     F .text	00000054 __adddf3
0000e6d4 g     F .text	00000148 OS_EventTaskWaitMulti
000489f4 g     F .text	00000048 isvfile
00030e24 g     F .text	00000430 sosetopt
00026a04 g     F .text	000000e0 netmain
00035f18 g     F .text	000000f8 tcp_mss
00009434 g     F .text	00000148 __b2d
0004608c g     F .text	000002fc parse_ipad
00047238 g     F .text	00000020 get_vfopen_error
00052f92 g     O .rwdata	00000002 OSQSize
0000add0 g     F .text	0000058c __umoddi3
0000cb38 g     F .text	000000d0 lseek
0003b994 g     F .text	00000168 inet_timer
00013a34 g     F .text	000002f0 OSSemPend
0001d7dc g     F .text	00000298 alt_tse_phy_add_profile_default
0001eee0 g     F .text	00000598 alt_tse_phy_get_cap
00001b10 g     F .text	000001d8 sss_send_menu
00052f34 g     O .rwdata	00000004 _global_impure_ptr
00026394 g     F .text	00000158 print_eth
00047714 g     F .text	00000050 vfopen
0003a18c g     F .text	000000f0 alt_read
000098d8 g     F .text	000005fc _realloc_r
000006e4 g     F .text	000002c0 alt_NetworkErrorHandler
00052f7c g     O .rwdata	00000002 OSLowestPrio
0005fff8 g       *ABS*	00000000 __bss_end
0001a820 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0002c144 g     F .text	00000118 m_free
0003ac78 g     F .text	00000020 OSTCBInitHook
00022d5c g     F .text	00000040 tse_mac_stats
0002a67c g     F .text	0000028c pk_validate
00052fc2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0003a414 g     F .text	00000104 alt_tick
00046fbc g     F .text	00000254 in_pcblookup
0002a25c g     F .text	000000c0 find_opt
0000a808 g     F .text	000005c8 __udivdi3
0002bfbc g     F .text	00000188 m_getnbuf
0002a9d8 g     F .text	000000bc dump_buf_estats
0001ed80 g     F .text	00000160 alt_tse_phy_check_link
00055674 g     O .bss	00000004 arpRepsOut
00052f64 g     O .rwdata	00000002 OSEventEn
0004c910 g     O .rodata	00000028 __mprec_bigtens
00008b14 g     F .text	00000104 __s2b
00052fbe g     O .rwdata	00000002 OSTmrCfgNameSize
0000bf80 g     F .text	0000011c __floatunsidf
0003b530 g     F .text	000000f8 netmain_init
00020380 g     F .text	000000e4 marvell_cfg_sgmii
0001ebbc g     F .text	000001c4 alt_tse_phy_restart_an
000091d4 g     F .text	00000058 __mcmp
000206dc g     F .text	00000150 altera_avalon_uart_init
000555b0 g     O .bss	00000004 dsc_requests
00037350 g     F .text	0000040c tcp_respond
000390bc g     F .text	000002dc udp4_sockbind
00052f30 g     O .rwdata	00000004 __ctype_ptr
000555fc g     O .bss	00000004 old_mode
00024a20 g     F .text	0000025c igmp_joingroup
0002d2f0 g     F .text	00000350 so_icmpdu
0000727c g     F .text	00000018 __fp_lock_all
000556c0 g     O .bss	00000004 vfs_dir_stale
0005f0ec g     O .bss	00000010 pphy_profiles
00040cb4 g     F .text	00000120 ip_reasm_process_timer_tick
00048a98 g     F .text	00000058 vclearerr
00025de0 g     F .text	000000d4 bsd_setsockopt
0002c75c g     F .text	00000054 mbuf_len
00011324 g     F .text	000000e4 OS_FlagInit
0003a350 g     F .text	000000c4 alt_alarm_stop
000487c8 g     F .text	000001d4 strippath
00052ffc g     O .rwdata	00000004 reqlist
00026c50 g     F .text	000001a4 tcp_sleep
0004a898 g     F .text	00000024 strtol
00027330 g     F .text	000007b4 dhc_upcall
00038b64 g     F .text	000000d4 tcp_usrclosed
02001000 g       *ABS*	00000000 __alt_mem_descriptor_memory
000555e8 g     O .bss	00000004 cticks_factor
00052fa0 g     O .rwdata	00000002 OSTaskIdleStkSize
00046a78 g     F .text	00000210 in_pcbbind
0001350c g     F .text	000000dc OSSemAccept
00011bb4 g     F .text	00000130 OSMemPut
000115b4 g     F .text	00000220 OSMemCreate
00055524 g     O .bss	00000004 OSIdleCtrMax
00052bf8 g     O .rwdata	00000028 alt_dev_null
0005301e g     O .rwdata	00000001 tcprexmtthresh
00052fb4 g     O .rwdata	00000002 OSTicksPerSec
0003d6e4 g     F .text	00000090 if_killsocks
0003e120 g     F .text	00000218 ip_write
00041864 g     F .text	000005dc ip_rcv_phase2
0002e86c g     F .text	00000044 t_getsockname
0002e5c0 g     F .text	00000268 t_connect
00053018 g     O .rwdata	00000004 TCPTV_MSL
0005f70c g     O .bss	00000010 memestats
0001eaa4 g     F .text	00000118 alt_tse_phy_init
0002b248 g     F .text	00000064 getch
00017bbc g     F .text	0000009c alt_set_flash_algorithm_func
00052e98 g     O .rwdata	00000080 vfs_root_path
0002e828 g     F .text	00000044 t_getpeername
0001ae14 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
0003faa4 g     F .text	00000098 ip_reasm_decr_mem_useage
00031fb0 g     F .text	00000088 soreserve
0003a7c0 g       .text	00000000 OSIntCtxSw
0002bc24 g     F .text	000000ec npalloc
00039ae4 g     F .text	0000001c alt_dcache_flush_all
00008c18 g     F .text	00000068 __hi0bits
0005569c g     O .bss	00000004 ipraw_eps
0002a31c g     F .text	00000294 pk_init
00045d7c g     F .text	0000015c md_fread
0004a2f4 g     F .text	0000001c calloc
0002253c g     F .text	0000037c tse_mac_raw_send
0000beac g     F .text	000000d4 __fixdfsi
0005fc10 g     O .bss	00000064 intimers
00032088 g     F .text	00000048 sbrelease
00033008 g     F .text	000000f0 ifd_clr
00032934 g     F .text	0000008c sbdroprecord
000264ec g     F .text	0000007c uslash
0003a6d4 g     F .text	000000ec alt_write
00021410 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00017770 g     F .text	00000044 alt_write_flash_command_8bit_device_8bit_mode
00055670 g     O .bss	00000004 arpRepsIn
000271b4 g     F .text	00000088 dhc_get_srv_ipaddr
0003bc94 g     F .text	000001bc in_timerset
00055528 g     O .bss	00000004 OSTCBFreeList
00053080 g       *ABS*	00000000 __ram_rwdata_end
00013d24 g     F .text	000001cc OSSemPendAbort
00036010 g     F .text	0000101c tcp_output
00055648 g     O .bss	00000004 activehost
0005303c g     O .rwdata	00000008 alt_dev_list
000267f4 g     F .text	00000210 parse_args
00055600 g     O .bss	00000004 global_TCPwakeup_setIndx
000072ac g     F .text	00000044 _fputc_r
0002309c g     F .text	00000068 write
0001af50 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0002bd10 g     F .text	000000c0 npfree
00002910 g     F .text	000000bc _putc_r
0003ca14 g     F .text	000002c4 arpReply
00025fdc g     F .text	0000007c nextarg
00052fb8 g     O .rwdata	00000002 OSVersionNbr
000403e0 g     F .text	00000530 ip_reasm_process_subsequent_fragments
00053078 g     O .rwdata	00000004 pton_error
000555a4 g     O .bss	00000004 dsc_errors
00055d60 g     O .bss	00002000 SSSInitialTaskStk
0005f25c g     O .bss	00000014 rcvdq
00032f8c g     F .text	0000007c tcp_notify
00050c48 g       *ABS*	00000000 __ram_rodata_end
0000c860 g     F .text	000000ac fstat
0000232c g     F .text	00000024 fprintf
0002fea8 g     F .text	000000b8 soconnect
00042a90 g     F .text	00000058 ip_raw_maxalloc
0000c6d0 g     F .text	00000044 __lshrdi3
00020554 g     F .text	00000078 DP83848C_link_status_read
00027cc8 g     F .text	000004e4 dhc_discover
00018a10 g     F .text	000000d4 alt_check_primary_table
00001934 g     F .text	000000a0 SSSCreateOSDataStructs
00046f3c g     F .text	00000080 in_setpeeraddr
00052f60 g     O .rwdata	00000004 OSEndiannessTest
0002b2ac g     F .text	0000003c clock_init
000479a8 g     F .text	000000d8 vfgets
0003c080 g     F .text	0000018c et_send
00008f4c g     F .text	0000012c __pow5mult
000554dc g     O .bss	00000004 __nlocale_changed
0000c1c4 g     F .text	00000008 __umodsi3
00017220 g     F .text	00000064 alt_flash_cfi_read
00017954 g     F .text	00000038 alt_write_native_8bit
00046388 g     F .text	00000060 inet_addr
0003f970 g     F .text	00000094 ip_reasm_check_mem_useage
00030d2c g     F .text	000000f8 sorflush
0004a8bc g     F .text	00000020 vprintf
0005f820 g     O .bss	000000fc global_tcb_ext
0003e774 g     F .text	00000418 ip_fragment_lc
0005f270 g     O .bss	00000300 netstatic
0002e148 g     F .text	0000015c t_bind
0001ac14 g     F .text	0000007c alt_avalon_sgdma_construct_mem_to_stream_desc
00052f72 g     O .rwdata	00000002 OSFlagGrpSize
0002af10 g     F .text	000000d8 udp_close
0001ad18 g     F .text	00000050 alt_avalon_sgdma_register_callback
0002b928 g     F .text	000001fc alt_iniche_init
0005fff8 g       *ABS*	00000000 end
0002b540 g     F .text	00000084 UNLOCK_NET_RESOURCE
00021808 g     F .text	000002b0 prep_tse_mac
0002edbc g     F .text	000000e0 t_recv
000177b4 g     F .text	00000074 alt_write_flash_command_16bit_device_8bit_mode
0001a048 g     F .text	0000051c altera_avalon_lcd_16207_write
00047d28 g     F .text	0000018c vfread
0002384c g     F .text	000000e4 netclose
00002148 g     F .text	000001bc SSSSimpleSocketServerTask
0004a2e8 g     F .text	0000000c _atoi_r
00020f80 g     F .text	00000290 altera_avalon_uart_write
0001b960 g     F .text	000001e4 alt_tse_phy_add_profile
00017cd8 g     F .text	000005c8 alt_read_cfi_table
00053028 g     O .rwdata	00000004 tcp_keepintvl
00018c48 g     F .text	0000013c altera_avalon_jtag_uart_init
0000f110 g     F .text	000000e8 OS_TaskStat
000555a8 g     O .bss	00000004 dsc_discovers
00052fd0 g     O .rwdata	00000004 tse_mac_name
00052b98 g     O .rwdata	00000018 tcp_protosw
0004acfc g       *ABS*	00000000 __CTOR_LIST__
000556bc g     O .bss	00000004 vfopen_error
02000000 g       *ABS*	00000000 __alt_stack_pointer
00055634 g     O .bss	00000004 tcp_maxidle
000555d4 g     O .bss	00000004 firstudp
0001afd0 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
0001b59c g     F .text	00000088 alt_avalon_timer_sc_init
0002062c g     F .text	00000060 altera_avalon_uart_write_fd
0000c22c g     F .text	000000ac __clzsi2
0002068c g     F .text	00000050 altera_avalon_uart_close_fd
00019588 g     F .text	000002fc altera_avalon_jtag_uart_write
0001aa54 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
00016e58 g     F .text	00000090 alt_flash_cfi_init
0000726c g     F .text	00000004 __sfp_lock_acquire
00008838 g     F .text	000000f8 memchr
0000ed90 g     F .text	00000054 OS_MemClr
000034b0 g     F .text	00001df8 ___vfprintf_internal_r
0003a890 g     F .text	000002f4 OSTaskStkInit
00002bd8 g     F .text	00000058 _sprintf_r
0001ab44 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
0000751c g     F .text	000002d0 _free_r
000447f4 g     F .text	00000140 igmpv2_chk4_rtr_alert_opt
0002f494 g     F .text	000000bc t_socketclose
00057d60 g     O .bss	00002000 LED7SegLightshowTaskStk
0000e434 g     F .text	00000198 OS_EventTaskRdy
0004aa94 g     F .text	000001a0 __call_exitprocs
00002b78 g     F .text	0000004c __srget_r
000228b8 g     F .text	000000b0 tse_sgdmaRx_isr
0005552c g     O .bss	00000001 OSCPUUsage
0005f570 g     O .bss	00000010 nets
0002b47c g     F .text	000000c4 LOCK_NET_RESOURCE
00029008 g     F .text	000000e4 dhc_resetip
000554d8 g     O .bss	00000004 __mlocale_changed
00022b18 g     F .text	00000244 tse_mac_rcv
0002e0c8 g     F .text	00000080 t_socket
00052f40 g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	0000007c _start
0003c038 g     F .text	00000048 etainit
00055640 g     O .bss	00000004 _alt_tick_rate
0003b91c g     F .text	00000024 mcastlist
00012714 g     F .text	00000380 OSQPend
0005f71c g     O .bss	000000f0 pktlog
00044330 g     F .text	00000140 igmpv2_process_report
0003316c g     F .text	00000078 ifd_isset
00043048 g     F .text	00000134 del_route
0001ae78 g     F .text	00000050 alt_avalon_sgdma_open
00003474 g     F .text	00000008 _user_strerror
00016344 g     F .text	00000174 OSTimeDly
00001100 g     F .text	00000054 get_mac_addr
0002f884 g     F .text	000000d0 solisten
00009078 g     F .text	0000015c __lshift
00055644 g     O .bss	00000004 _alt_nticks
0001d710 g     F .text	000000cc alt_tse_phy_rd_mdio_reg
0002302c g     F .text	00000070 read
00016b50 g     F .text	000002d0 alt_sys_init
00037a04 g     F .text	00000048 tcp_quench
00026568 g     F .text	0000016c ns_printf
0003d580 g     F .text	000000d4 isbcast
0002b5c4 g     F .text	00000230 TK_NEWTASK
0004a964 g     F .text	00000130 __register_exitproc
0005552d g     O .bss	00000001 OSTaskCtr
0003f8a0 g     F .text	000000d0 ip_reasm_determine_type_of_frag
0005555c g     O .bss	00000001 phy_profile_count
0004a480 g     F .text	000000fc strncmp
0001c798 g     F .text	00000074 alt_tse_get_mac_group_index
000176f0 g     F .text	00000040 alt_read_query_entry_16bit
000164b8 g     F .text	00000238 OSTimeDlyHMSM
0003a310 g     F .text	00000040 alt_remap_uncached
000426b0 g     F .text	000000bc ip_raw_close
00008d6c g     F .text	000001e0 __multiply
00052de8 g     O .rwdata	000000b0 mdlist
0001913c g     F .text	00000068 altera_avalon_jtag_uart_close
00024474 g     F .text	000000e0 igmp_input
0003e6b0 g     F .text	000000c4 ip_raw_write
00050c48 g       *ABS*	00000000 __ram_rwdata_start
00047eb4 g     F .text	000003ac vfwrite_locked
0004a57c g     F .text	000000b8 strncpy
0004acfc g       *ABS*	00000000 __ram_rodata_start
000555ac g     O .bss	00000004 dsc_offers
00055cc4 g     O .bss	00000028 __malloc_current_mallinfo
00052f66 g     O .rwdata	00000002 OSEventMax
00046664 g     F .text	00000068 inet_setport
000179f8 g     F .text	000001c4 alt_set_flash_width_func
0000957c g     F .text	00000144 __d2b
00013ef0 g     F .text	00000194 OSSemPost
00035994 g     F .text	00000180 tcp_dooptions
000554d0 g     O .bss	00000004 SSSLEDEventFlag
000317b0 g     F .text	00000100 soisconnected
0000de88 g     F .text	00000188 OSSchedUnlock
00042580 g     F .text	00000028 netexit
000011b0 g     F .text	000001d0 get_serial_number
00055590 g     O .bss	00000004 nettick_wakes
0001d58c g     F .text	00000058 alt_tse_phy_wr_mdio_addr
00055628 g     O .bss	00000001 tcpprintfs
0003be50 g     F .text	0000009c in_timerkill
000441e8 g     F .text	00000148 igmpv2_input
000555bc g     O .bss	00000004 dsc_declines
00018ae4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025fb0 g     F .text	0000002c do_trap
00048eb8 g     F .text	000000fc alt_get_fd
000259b4 g     F .text	000000ec bsd_ioctl
00055530 g     O .bss	00000004 OSMemFreeList
0000e07c g     F .text	00000104 OSStatInit
0002ca3c g     F .text	000001c4 tcp_rcv
00026350 g     F .text	00000044 panic
000556c4 g     O .bss	00000004 vfs_open_files
00048b14 g     F .text	00000128 alt_busy_sleep
00023d94 g     F .text	00000190 ip2mac
00011074 g     F .text	000000f0 OSFlagQuery
0000c600 g     F .text	000000d0 __fpcmp_parts_d
00032ce8 g     F .text	000001e4 sock_select
00045918 g     F .text	00000290 dhc_setup
000371f0 g     F .text	00000058 tcp_init
00055604 g     O .bss	00000004 cticks
00055599 g     O .bss	00000001 to_nettick
00052f9c g     O .rwdata	00000002 OSTaskCreateExtEn
0000a4b0 g     F .text	00000064 _close_r
00023104 g     F .text	000005f0 Netinit
0002bbb8 g     F .text	00000038 prep_armintcp
00042240 g     F .text	0000014c in_addmulti
00037248 g     F .text	00000108 tcp_template
0001fa24 g     F .text	00000328 alt_tse_phy_get_common_speed
0002c84c g     F .text	00000070 remque
0003ad00 g     F .text	00000210 alt_erase_block_amd
0004a8dc g     F .text	00000014 _vprintf_r
00033248 g     F .text	0000040c tcp_reass
00046800 g     F .text	0000019c tcp_cksum
00039398 g     F .text	0000037c udp4_socksend
00047764 g     F .text	000001bc vfclose_locked
000330f8 g     F .text	00000074 ifd_set
0004a370 g     F .text	0000007c memcmp
0000e418 g     F .text	0000001c OS_Dummy
00018ba4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a1b0 g     F .text	000000ac dhc_set_state
00055570 g     O .bss	00000004 NDEBUG
0005fff8 g       *ABS*	00000000 __alt_stack_base
000554c0 g     O .bss	00000004 last_flash_sector
00018bf4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00032038 g     F .text	00000050 sbreserve
0005555d g     O .bss	00000001 mac_group_count
0004276c g     F .text	00000224 ip_raw_input
00002350 g     F .text	000000a0 _fwrite_r
00053008 g     O .rwdata	00000004 lilbufsiz
000331e4 g     F .text	00000064 ifd_get
00031f1c g     F .text	00000094 sbwakeup
00005424 g     F .text	00000174 __swsetup_r
000182a0 g     F .text	00000770 alt_read_cfi_width
000216c4 g     F .text	00000144 altera_eth_tse_init
0005d578 g     O .bss	000001e0 OSQTbl
00035c40 g     F .text	0000028c tcp_xmit_timer
00022968 g     F .text	000001b0 tse_sgdma_read_init
0000ba48 g     F .text	000001b4 __divdf3
00007170 g     F .text	000000fc __sfp
00001520 g     F .text	00000140 generate_mac_addr
0003d85c g     F .text	00000184 ip_bldhead
000097d8 g     F .text	0000007c __copybits
000320d0 g     F .text	000000a0 sbappend
0005118c g     O .rwdata	00000408 __malloc_av_
00007278 g     F .text	00000004 __sinit_lock_release
00055534 g     O .bss	00000004 OSTCBHighRdy
0000b764 g     F .text	000002e4 __muldf3
0003e338 g     F .text	00000378 ip_write2
0000a1a4 g     F .text	00000054 __sread
00053064 g     O .rwdata	00000004 arp_ageout
00055538 g     O .bss	00000004 OSQFreeList
0001e320 g     F .text	0000041c alt_tse_mac_get_phy
0003d774 g     F .text	000000e8 ip_init
00048da4 g     F .text	00000114 alt_find_file
00042a50 g     F .text	00000040 ip_raw_free
0003c914 g     F .text	00000100 make_arp_entry
00039b7c g     F .text	000000a0 alt_dev_llist_insert
0000cef4 g     F .text	0000016c __malloc_lock
00002304 g     F .text	00000028 _fprintf_r
0000ccd4 g     F .text	00000108 sbrk
00038c78 g     F .text	00000064 udp_lookup
0001ad68 g     F .text	00000054 alt_avalon_sgdma_start
0000d304 g     F .text	0000019c OSEventNameSet
00006dbc g     F .text	000001e8 _fflush_r
0001ca44 g     F .text	0000008c alt_tse_mac_set_duplex
0000a3f4 g     F .text	000000bc _calloc_r
0005553c g     O .bss	00000001 OSRdyGrp
00045d34 g     F .text	00000028 md_fopen
00052bb0 g     O .rwdata	00000018 udp_protosw
00052f48 g     O .rwdata	00000008 alt_flash_dev_list
00017874 g     F .text	00000048 alt_write_flash_command_16bit_device_16bit_mode
00046ebc g     F .text	00000080 in_setsockaddr
000554b8 g       *ABS*	00000000 __bss_start
00000e88 g     F .text	00000084 LED7SegLightshowTask
00032170 g     F .text	000000d8 sbappendrecord
0005fd88 g     O .bss	00000050 ip_mib
00002748 g     F .text	000000dc memset
0002ff60 g     F .text	00000098 sodisconnect
00000d18 g     F .text	00000080 main
000554f8 g     O .bss	00000004 alt_envp
000554e0 g     O .bss	00000004 __malloc_max_total_mem
00001aa0 g     F .text	00000070 sss_reset_connection
0002c58c g     F .text	000001d0 m_adj
00018b44 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005408 g     F .text	0000001c __swbuf
00045fa0 g     F .text	000000c8 md_fgetc
0004cb30 g     O .rodata	00000100 OSUnMapTbl
0003f1e4 g     F .text	000002a8 ip_dump
00026f90 g     F .text	00000224 tk_stats
00052fe4 g     O .rwdata	00000008 alt_iniche_dev_list
00059d60 g     O .bss	00000078 SSSLEDCommandQTbl
0001a610 g     F .text	00000160 altera_avalon_lcd_16207_init
00052fd8 g     O .rwdata	00000008 alt_sgdma_list
00052f96 g     O .rwdata	00000002 OSSemEn
000555ec g     O .bss	00000004 OS_TPS
0002d934 g     F .text	00000748 rawip_usrreq
00010c30 g     F .text	00000444 OSFlagPost
0000a2dc g     F .text	00000008 __sclose
00046548 g     F .text	0000005c print46_addr
02000000 g       *ABS*	00000000 __alt_heap_limit
0000a650 g     F .text	00000014 fclose
0000e5cc g     F .text	00000108 OS_EventTaskWait
0004a634 g     F .text	00000264 _strtol_r
00026214 g     F .text	0000013c print_uptime
0000f1f8 g     F .text	000000c8 OS_TaskStatStkChk
0005fe68 g     O .bss	00000190 _atexit0
00015268 g     F .text	00000208 OSTaskDelReq
000057a0 g     F .text	0000161c _dtoa_r
000080b4 g     F .text	00000784 _malloc_r
00046068 g     F .text	00000024 md_unlink
0001b834 g     F .text	00000088 tse_mac_SwReset
00046a24 g     F .text	00000054 in_pcbdetach
00053048 g     O .rwdata	00000004 alt_errno
00053074 g     O .rwdata	00000004 mdlist_size
0000e010 g     F .text	0000006c OSStart
00017908 g     F .text	0000004c alt_write_flash_command_32bit_device_32bit_mode
000451e0 g     F .text	00000030 u_mctest_init
0000ce94 g     F .text	00000060 __env_unlock
00007cd0 g     F .text	000000a8 _fwalk
00015910 g     F .text	000002fc OSTaskResume
00011ce4 g     F .text	00000114 OSMemQuery
000466cc g     F .text	00000134 convert_ip
0003c758 g     F .text	000001bc find_oldest_arp
00052fa8 g     O .rwdata	00000002 OSTaskStatEn
00055668 g     O .bss	00000004 arpReqsIn
00047390 g     F .text	0000004c vf_free_buffer
00017284 g     F .text	00000158 alt_write_value_to_flash
00048c8c g     F .text	00000118 alt_fcntl
00052f82 g     O .rwdata	00000002 OSMemMax
00012e4c g     F .text	000001f4 OSQPostFront
0001798c g     F .text	00000038 alt_write_native_16bit
0002b17c g     F .text	00000030 dtrap
00053014 g     O .rwdata	00000004 kb_last
000029cc g     F .text	000000f0 putc
0000c110 g     F .text	00000050 __divsi3
0001c6e4 g     F .text	00000048 alt_tse_mac_set_common_speed
0005553d g     O .bss	00000003 OSRdyTbl
00052f5c g     O .rwdata	00000002 OSDebugEn
0004ca0c g     O .rodata	00000014 __thenan_df
00024234 g     F .text	000000cc ip_exit
000073e0 g     F .text	0000013c _malloc_trim_r
0004acfc g       *ABS*	00000000 __CTOR_END__
00052f74 g     O .rwdata	00000002 OSFlagNodeSize
000555a0 g     O .bss	00000004 dhc_conn
0002b304 g     F .text	000000b0 cticks_hook
00055560 g     O .bss	00000004 alt_vic_dev_list
00052fbc g     O .rwdata	00000002 OSTmrCfgMax
0003b834 g     F .text	00000098 sysuptime
0000a2e4 g     F .text	000000a4 strcmp
00001380 g     F .text	000001a0 generate_and_store_mac_addr
00040dd4 g     F .text	000001b4 ip_reasm_delete_ire
00012034 g     F .text	0000027c OSQCreate
0002b3b4 g     F .text	0000005c irq_Mask
00015470 g     F .text	0000022c OSTaskNameGet
00055650 g     O .bss	00000004 nextppp
000555dc g     O .bss	00000004 irq_level
000236f4 g     F .text	00000158 fixup_subnet_mask
0004acfc g       *ABS*	00000000 __flash_rodata_start
00013040 g     F .text	00000290 OSQPostOpt
0000e180 g     F .text	00000278 OSTimeTick
0003f6ac g     F .text	00000130 ip_copypkt
0002a0c0 g     F .text	00000088 dhc_alldone
00052fa4 g     O .rwdata	00000002 OSTaskMax
0004acfc g       *ABS*	00000000 __DTOR_LIST__
000135e8 g     F .text	0000012c OSSemCreate
00055584 g     O .bss	00000004 igmp_all_hosts_group
00052fc8 g     O .rwdata	00000002 OSTmrWheelSize
00031e7c g     F .text	00000038 sbselqueue
0005558c g     O .bss	00000004 netmain_wakes
0003ccd8 g     F .text	0000026c arprcv
00026be0 g     F .text	00000070 TK_OSTaskResume
0002500c g     F .text	00000420 igmp_print_stats
0000bc58 g     F .text	0000005c __nedf2
0002be68 g     F .text	00000090 pffindtype
00052f9e g     O .rwdata	00000002 OSTaskDelEn
0005302c g     O .rwdata	00000004 tcp_sendspace
0004840c g     F .text	00000110 vftell
0005f5e4 g     O .bss	00000012 eth_prt_buf
00014084 g     F .text	00000144 OSSemQuery
000122b0 g     F .text	00000380 OSQDel
00012a94 g     F .text	000001cc OSQPendAbort
00016b10 g     F .text	00000040 alt_irq_init
0001c6a4 g     F .text	00000040 alt_tse_mac_get_common_speed
0005fa4c g     O .bss	00000018 app_semaphore
0003a27c g     F .text	00000060 alt_release_fd
0002b8b0 g     F .text	00000078 post_app_sem
00024384 g     F .text	000000f0 igmp_init
00002c30 g     F .text	0000006c sprintf
0004ca20 g     O .rodata	00000100 __clz_tab
000555c8 g     O .bss	00000004 dsc_renew
00045ed8 g     F .text	00000078 md_fwrite
000554d4 g     O .bss	00000004 _PathLocale
000555f0 g     O .bss	00000004 tcp_sleep_count
0002c8bc g     F .text	00000078 insque
0004a2c8 g     F .text	00000014 atexit
000556b8 g     O .bss	00000004 vfsfiles
0000a388 g     F .text	0000006c _write_r
0004a8f0 g     F .text	00000050 _vsprintf_r
00043994 g     F .text	000002a0 udp_send
0000ddd4 g     F .text	000000b4 OSSchedLock
00024778 g     F .text	000002a8 igmp_send
00007ee4 g     F .text	0000001c setlocale
0000fb8c g     F .text	00000180 OSFlagCreate
00059dd8 g     O .bss	00002000 LEDManagementTaskStk
0002b410 g     F .text	0000006c irq_Unmask
0002e2a4 g     F .text	000000d0 t_listen
00052f38 g     O .rwdata	00000004 _impure_ptr
00050c48 g     O .rwdata	00000018 ssstask
000554f0 g     O .bss	00000004 alt_argc
00038294 g     F .text	000006ec tcp_usrreq
00038e7c g     F .text	00000240 udp_usrreq
0002bdd0 g     F .text	00000050 ncpalloc
00039c78 g     F .text	0000005c _do_dtors
00052f6e g     O .rwdata	00000002 OSEventMultiEn
0005305c g     O .rwdata	00000004 pingdelay
0003c290 g     F .text	00000070 arp_send_pending
0005effc g     O .bss	000000e0 tse_mac_if
00043f1c g     F .text	000002cc igmpv1_input
00009ef0 g     F .text	000001ec __srefill_r
0002bb24 g     F .text	00000074 pre_task_setup
00055610 g     O .bss	00000004 rcvdq_sem_ptr
0002565c g     F .text	00000118 bsd_getsockname
00040f88 g     F .text	00000130 ip_reasm_mark_compact_rfq
00001808 g     F .text	0000012c FindLastFlashSectorOffset
0000fd0c g     F .text	00000320 OSFlagDel
00055540 g     O .bss	00000004 OSEventFreeList
000272ec g     F .text	00000044 dhc_set_callback
00055660 g     O .bss	00000004 arpcache
00049c28 g     F .text	00000314 icmp_destun
00042494 g     F .text	00000064 lookup_mcast
00048780 g     F .text	00000048 vfslookup
00041e40 g     F .text	00000400 ip_demux
00021430 g     F .text	0000013c alt_vic_irq_init
000093d4 g     F .text	00000060 __ulp
0000a0dc g     F .text	00000038 __isinfd
000555f4 g     O .bss	00000004 tcp_wakeup_count
0001038c g     F .text	00000810 OSFlagPend
00052fba g     O .rwdata	00000002 OSTmrEn
00007294 g     F .text	00000018 __fp_unlock_all
0002b7f4 g     F .text	000000bc wait_app_sem
0001a770 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
000072f0 g     F .text	00000060 fputc
00052fec g     O .rwdata	00000004 ipmcfail_str
00055608 g     O .bss	00000004 memtrapsize
0002c29c g     F .text	000002f0 m_copy
00053034 g     O .rwdata	00000008 alt_fs_list
0005fac8 g     O .bss	00000014 mfreeq
0000efb8 g     F .text	0000007c OS_StrCopy
0002f828 g     F .text	0000005c sobind
00045cbc g     F .text	00000078 init_memdev
000554b8 g     O .bss	00000001 to_ssstask
00017828 g     F .text	0000004c alt_write_flash_command_32bit_device_8bit_mode
0002c934 g     F .text	00000108 nptcp_init
00052f84 g     O .rwdata	00000002 OSMemNameSize
0005f91c g     O .bss	000000f0 global_TCPwakeup_set
0003ac40 g     F .text	0000001c OSInitHookEnd
00031944 g     F .text	000000c0 soisdisconnected
00000020 g       *ABS*	00000000 __ram_exceptions_start
0003c20c g     F .text	00000084 arp_free_pending
00052fb0 g     O .rwdata	00000002 OSTCBPrioTblMax
00007f00 g     F .text	0000000c localeconv
0002fa74 g     F .text	0000034c soclose
0005f80c g     O .bss	00000014 bigfreeq
0a000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00052fac g     O .rwdata	00000002 OSTaskStatStkChkEn
00053058 g     O .rwdata	00000004 prompt
00053024 g     O .rwdata	00000004 tcp_keepidle
0001f87c g     F .text	000001a8 alt_tse_phy_set_adv_10
0002d76c g     F .text	000001c8 rawip_soinput
0002156c g     F .text	00000158 alt_ic_isr_register
00048260 g     F .text	00000060 vfwrite
00052f80 g     O .rwdata	00000002 OSMemEn
00031c24 g     F .text	000000a8 soqinsque
00055694 g     O .bss	00000004 so_evtmap_delete
000023f0 g     F .text	00000040 fwrite
00052f8a g     O .rwdata	00000002 OSMutexEn
00055680 g     O .bss	00000004 h_ireq
00053080 g       *ABS*	00000000 _edata
0003eb8c g     F .text	000005b0 ip_fragment
000205cc g     F .text	00000060 altera_avalon_uart_read_fd
00022ee8 g     F .text	00000144 iniche_devices_init
0005fadc g     O .bss	00000028 tcp_saveti
00026718 g     F .text	000000dc con_page
0005fff8 g       *ABS*	00000000 _end
00031254 g     F .text	000004a8 sogetopt
0000c758 g     F .text	00000068 alt_flash_open_dev
00055544 g     O .bss	00000001 OSIntNesting
0001e73c g     F .text	00000240 alt_tse_mac_associate_phy
00052b68 g     O .rwdata	00000030 nettasks
0002a9b8 g     F .text	00000020 pk_get_max_intrsafe_buf_len
0003f48c g     F .text	00000220 iproute
0002d1fc g     F .text	000000f4 np_stripoptions
00055698 g     O .bss	00000001 so_evtmap
00000020 g       *ABS*	00000000 __ram_exceptions_end
000191a4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00007350 g     F .text	00000074 _fputs_r
000166f0 g     F .text	000002c8 OSTimeDlyResume
000019d4 g     F .text	000000cc SSSCreateTasks
00042c5c g     F .text	000003ec add_route
000101b4 g     F .text	000001d8 OSFlagNameSet
00023cdc g     F .text	000000b8 c_older
000325f8 g     F .text	00000088 sbflush
00045d5c g     F .text	00000020 md_fclose
00026f64 g     F .text	0000002c tk_yield
00001ce8 g     F .text	000000c4 sss_handle_accept
00015c0c g     F .text	00000284 OSTaskStkChk
0002fff8 g     F .text	0000055c sosend
00052f86 g     O .rwdata	00000002 OSMemSize
0003f13c g     F .text	000000a8 ip_mymach
0001aec8 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
0000a1f8 g     F .text	00000088 __swrite
000555d8 g     O .bss	00000004 cticks_initialized
00053060 g     O .rwdata	00000004 deflength
0002efd4 g     F .text	000001ec t_sendto
00052f44 g     O .rwdata	00000004 __malloc_trim_threshold
00002824 g     F .text	00000070 _perror_r
00055548 g     O .bss	00000004 OSTCBCur
0002f674 g     F .text	000001b4 socreate
0004a310 g     F .text	00000038 exit
0005fc74 g     O .bss	00000100 arp_table
000556d0 g     O .bss	00000004 icmpdu_hook
00052f88 g     O .rwdata	00000002 OSMemTblSize
00007d78 g     F .text	000000b8 _fwalk_reent
0003beec g     F .text	00000024 create_apptasks
00053020 g     O .rwdata	00000004 tcp_ttl
0000922c g     F .text	000001a8 __mdiff
0000c7c0 g     F .text	00000050 alt_flash_close_dev
0002be20 g     F .text	00000048 ncpfree
0000c160 g     F .text	0000005c __modsi3
00055568 g     O .bss	00000004 MaxLnh
0001b910 g     F .text	00000050 tse_mac_setGMIImode
000464c8 g     F .text	00000080 inet_ntop
00043eb0 g     F .text	0000002c udp_maxalloc
0002029c g     F .text	000000e4 marvell_cfg_gmii
02000000 g       *ABS*	00000000 __alt_data_end
00007270 g     F .text	00000004 __sfp_lock_release
0000dbb8 g     F .text	00000054 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
0001e97c g     F .text	00000128 alt_tse_phy_cfg_pcs
00016124 g     F .text	000001b0 OSTaskQuery
0003b628 g     F .text	00000090 icmp_port_du
00055638 g     O .bss	00000004 tcp_iss
00013460 g     F .text	000000ac OS_QInit
0004a2dc g     F .text	0000000c atoi
00053010 g     O .rwdata	00000004 bigbufsiz
0000f034 g     F .text	00000054 OS_StrLen
00037a4c g     F .text	00000080 tcp_putseq
00011a40 g     F .text	00000174 OSMemNameSet
0004be00 g     O .rodata	00000101 _ctype_
00032248 g     F .text	000001d8 sbappendaddr
04000000 g       *ABS*	00000000 __alt_mem_ext_flash
000556c8 g     O .bss	00000004 vfs_total_rw_space
00045048 g     F .text	00000114 ip_getmoptions
00052fa2 g     O .rwdata	00000002 OSTaskProfileEn
00043c34 g     F .text	000000f0 udpswap
0005554c g     O .bss	00000004 OSTime
00055614 g     O .bss	00000004 nextslow
00037b44 g     F .text	00000284 tcp_slowtimo
00020ba0 g     F .text	00000054 altera_avalon_uart_close
0003775c g     F .text	0000010c tcp_newtcpcb
0003cf44 g     F .text	000001ac send_via_arp
0002723c g     F .text	000000b0 dhc_init
00040910 g     F .text	00000058 ip_reasm_find_ire
0005d758 g     O .bss	00000800 OSTaskIdleStk
0004acb8 g     F .text	00000044 _exit
0004899c g     F .text	00000058 isvfile_locked
0000a114 g     F .text	0000002c __isnand
00025c10 g     F .text	000001d0 bsd_select
0003983c g     F .text	0000016c alt_alarm_start
0001002c g     F .text	00000188 OSFlagNameGet
00043edc g     F .text	00000040 udp_free
0002aa94 g     F .text	000000b8 getq
00048af0 g     F .text	00000024 prep_vfs
000169b8 g     F .text	00000090 OSTimeGet
00053054 g     O .rwdata	00000004 name
00032838 g     F .text	000000fc sbdropend
0000c1cc g     F .text	00000060 __muldi3
00007f0c g     F .text	000001a8 __smakebuf_r
000179c4 g     F .text	00000034 alt_write_native_32bit
0003d0f0 g     F .text	00000158 cb_arpent_tmo
000033e8 g     F .text	0000008c strlen
00044934 g     F .text	00000148 IPADDR_TO_NETP
00025aa0 g     F .text	00000034 bsd_inet_ntoa
0003abc4 g     F .text	0000001c OSTaskSwHook
00039fe8 g     F .text	00000154 open
0002acf8 g     F .text	00000218 udp_open
0005df58 g     O .bss	00000b40 OSEventTbl
00031dd4 g     F .text	00000054 socantsendmore
000556cc g     O .bss	00000004 vfs_total_dyna_files
0000bd18 g     F .text	00000064 __gedf2
0005ea98 g     O .bss	00000510 OSTCBTbl
0005566c g     O .bss	00000004 arpReqsOut
000141c8 g     F .text	0000012c OSSemSet
0005307c g     O .rwdata	00000004 http_root_path
000292c0 g     F .text	00000280 dhc_extract_opts
0003fe7c g     F .text	00000564 ip_reasm_compute_overlap
00017194 g     F .text	0000008c alt_flash_cfi_get_info
0001b790 g     F .text	000000a4 tse_mac_aRxRead
00039d64 g     F .text	00000030 alt_icache_flush_all
00002c9c g     F .text	000000e8 strchr
0005f5f6 g     O .bss	00000012 ipreturn
00055688 g     O .bss	00000004 port_prep
00052beb g     O .rwdata	0000000d tcp_backoff
00031744 g     F .text	0000006c soisconnecting
00000ca0 g     F .text	00000078 SSSInitialTask
000073c4 g     F .text	0000001c fputs
00044470 g     F .text	0000023c igmpv2_process_query
000329c0 g     F .text	000001ec t_select
00013714 g     F .text	00000320 OSSemDel
00039714 g     F .text	00000128 udp4_sockaddr
00055550 g     O .bss	00000004 OSFlagFreeList
00046c88 g     F .text	000001dc in_pcbconnect
0005562c g     O .bss	00000004 dropline
00055684 g     O .bss	00000004 ire_cticks
00052f68 g     O .rwdata	00000002 OSEventNameSize
000052a8 g     F .text	00000024 __vfprintf_internal
00026ae4 g     F .text	00000088 tk_netmain
00046e64 g     F .text	00000058 in_pcbdisconnect
00055554 g     O .bss	00000001 OSStatRdy
0005efa8 g     O .bss	00000054 OSTCBPrioTbl
00020c44 g     F .text	000002ec altera_avalon_uart_read
0000cddc g     F .text	000000b8 __env_lock
00052fae g     O .rwdata	00000002 OSTaskSwHookEn
00052dc4 g     O .rwdata	00000024 mdio
0001c964 g     F .text	000000e0 alt_tse_mac_set_speed
0001aac4 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0002542c g     F .text	00000118 bsd_accept
00053030 g     O .rwdata	00000004 tcp_recvspace
0000b704 g     F .text	00000060 __subdf3
00038c38 g     F .text	00000040 tcpinit
00055588 g     O .bss	00000004 igmp_all_rtrs_group
0002d708 g     F .text	00000064 rawip_lookup
0003bf98 g     F .text	000000a0 fcntl
00008c80 g     F .text	000000b0 __lo0bits
00032420 g     F .text	000001d8 sbcompress
0005304c g     O .rwdata	00000008 alt_alarm_list
00037868 g     F .text	000000ac tcp_drop
00052f76 g     O .rwdata	00000002 OSFlagWidth
00039c1c g     F .text	0000005c _do_ctors
0001f634 g     F .text	00000248 alt_tse_phy_set_adv_100
00037e24 g     F .text	00000470 tcp_timers
00024300 g     F .text	00000084 if_netnumber
0004515c g     F .text	00000084 ip_freemoptions
000316fc g     F .text	00000048 sohasoutofband
00033654 g     F .text	00002340 tcp_input
00025544 g     F .text	00000118 bsd_getpeername
00025ad4 g     F .text	0000013c bsd_recvfrom
00022ea0 g     F .text	00000048 close
000555b8 g     O .bss	00000004 dsc_bpreplys
0003ac98 g     F .text	00000068 alt_program_amd
00055500 g     O .bss	00000004 alt_envsem
00055558 g     O .bss	00000004 OSIdleCtrRun
0000e3f8 g     F .text	00000020 OSVersion
00052fc0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000ca68 g     F .text	00000080 alt_load
000162d4 g     F .text	00000070 OS_TaskStkClr
00047210 g     F .text	00000028 set_vfopen_error
0000c2d8 g     F .text	00000224 __pack_d
00052f9a g     O .rwdata	00000002 OSTaskCreateEn
0001c72c g     F .text	0000006c alt_tse_get_system_index
00052bc8 g     O .rwdata	00000018 rawip_protosw
00031eb4 g     F .text	00000068 sbwait
0000e9c4 g     F .text	00000068 OS_EventWaitListInit
00029540 g     F .text	000008f0 dhc_second
0001b458 g     F .text	000000a4 alt_avalon_sgdma_init
00055654 g     O .bss	00000004 port_1s_callout
0003ac5c g     F .text	0000001c OSTaskIdleHook
0004a35c g     F .text	00000014 free
00007274 g     F .text	00000004 __sinit_lock_acquire
00055564 g     O .bss	00000001 number_of_tse_mac
00008a00 g     F .text	00000114 __multadd
00015e90 g     F .text	00000294 OSTaskSuspend
000089d8 g     F .text	00000028 _Bfree
0001b624 g     F .text	0000002c no_printf
00031a04 g     F .text	00000220 sonewconn
00049040 g     F .text	00000be8 icmprcv
0002bef8 g     F .text	000000c4 pffindproto
0000f088 g     F .text	00000088 OS_TaskIdle
00052fc6 g     O .rwdata	00000002 OSTmrTblSize
000132d0 g     F .text	00000190 OSQQuery



Disassembly of section .entry:

05000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 500000c:	00bffd16 	blt	zero,r2,5000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 5000014:	08400814 	ori	at,at,32
    jmp r1
 5000018:	0800683a 	jmp	at
 500001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .text:

00000020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
      20:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
      24:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
      28:	10000426 	beq	r2,zero,3c <OSTCBPrio_OFFSET+0xa>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
      2c:	07800014 	movui	ba,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
      30:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
      34:	ef400f14 	ori	ea,ea,60
    eret
      38:	ef80083a 	eret

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      3c:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
      40:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
      44:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
      48:	d6abcc14 	ori	gp,gp,44848
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
      4c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
      50:	00c00054 	movui	r3,1
    movhi r4, 1     /* Constant to increment STATUS.PRS */
      54:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
      58:	1105883a 	add	r2,r2,r4
    wrctl status, r2
      5c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
      60:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
      64:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
      68:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
      6c:	183ffa1e 	bne	r3,zero,58 <OSCtxSw_SWITCH_PC+0x18>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      70:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
      74:	10952e14 	ori	r2,r2,21688

    movhi r3, %hi(__bss_end)
      78:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
      7c:	18fffe14 	ori	r3,r3,65528

    beq r2, r3, 1f
      80:	10c00326 	beq	r2,r3,90 <OSCtxSw_SWITCH_PC+0x50>

0:
    stw zero, (r2)
      84:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      88:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      8c:	10fffd36 	bltu	r2,r3,84 <OSCtxSw_SWITCH_PC+0x44>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      90:	000ca680 	call	ca68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      94:	000cc080 	call	cc08 <alt_main>

00000098 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      98:	003fff06 	br	98 <alt_after_alt_main>

0000009c <alt_uCOSIIErrorHandler>:
#include <errno.h>
#include "includes.h"
#include "alt_error_handler.h"
 
void alt_uCOSIIErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
      9c:	defffb04 	addi	sp,sp,-20
      a0:	dfc00415 	stw	ra,16(sp)
      a4:	df000315 	stw	fp,12(sp)
      a8:	df000304 	addi	fp,sp,12
      ac:	2005883a 	mov	r2,r4
      b0:	e17fff15 	stw	r5,-4(fp)
      b4:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
      b8:	e0bffe03 	ldbu	r2,-8(fp)
      bc:	10018326 	beq	r2,zero,6cc <alt_uCOSIIErrorHandler+0x630>
   {
      return;
   }
   
   fault_level = SYSTEM;  
      c0:	00800084 	movi	r2,2
      c4:	e0bffd15 	stw	r2,-12(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
      c8:	000ddd40 	call	ddd4 <OSSchedLock>
      
   switch (error_code)
      cc:	e0bffe03 	ldbu	r2,-8(fp)
      d0:	10c00a20 	cmpeqi	r3,r2,40
      d4:	1800261e 	bne	r3,zero,170 <alt_uCOSIIErrorHandler+0xd4>
      d8:	10c00a48 	cmpgei	r3,r2,41
      dc:	1800121e 	bne	r3,zero,128 <alt_uCOSIIErrorHandler+0x8c>
      e0:	10c00120 	cmpeqi	r3,r2,4
      e4:	18006e1e 	bne	r3,zero,2a0 <alt_uCOSIIErrorHandler+0x204>
      e8:	10c00148 	cmpgei	r3,r2,5
      ec:	1800071e 	bne	r3,zero,10c <alt_uCOSIIErrorHandler+0x70>
      f0:	10c000a0 	cmpeqi	r3,r2,2
      f4:	18008e1e 	bne	r3,zero,330 <alt_uCOSIIErrorHandler+0x294>
      f8:	10c000c8 	cmpgei	r3,r2,3
      fc:	1800731e 	bne	r3,zero,2cc <alt_uCOSIIErrorHandler+0x230>
     100:	10800060 	cmpeqi	r2,r2,1
     104:	1000591e 	bne	r2,zero,26c <alt_uCOSIIErrorHandler+0x1d0>
     108:	0000de06 	br	484 <alt_uCOSIIErrorHandler+0x3e8>
     10c:	10c00520 	cmpeqi	r3,r2,20
     110:	18004a1e 	bne	r3,zero,23c <alt_uCOSIIErrorHandler+0x1a0>
     114:	10c007a0 	cmpeqi	r3,r2,30
     118:	1800b21e 	bne	r3,zero,3e4 <alt_uCOSIIErrorHandler+0x348>
     11c:	108002a0 	cmpeqi	r2,r2,10
     120:	1000771e 	bne	r2,zero,300 <alt_uCOSIIErrorHandler+0x264>
     124:	0000d706 	br	484 <alt_uCOSIIErrorHandler+0x3e8>
     128:	10c01020 	cmpeqi	r3,r2,64
     12c:	1800a21e 	bne	r3,zero,3b8 <alt_uCOSIIErrorHandler+0x31c>
     130:	10c01048 	cmpgei	r3,r2,65
     134:	1800071e 	bne	r3,zero,154 <alt_uCOSIIErrorHandler+0xb8>
     138:	10c00f60 	cmpeqi	r3,r2,61
     13c:	1800921e 	bne	r3,zero,388 <alt_uCOSIIErrorHandler+0x2ec>
     140:	10c00fa0 	cmpeqi	r3,r2,62
     144:	1800851e 	bne	r3,zero,35c <alt_uCOSIIErrorHandler+0x2c0>
     148:	10800aa0 	cmpeqi	r2,r2,42
     14c:	1000131e 	bne	r2,zero,19c <alt_uCOSIIErrorHandler+0x100>
     150:	0000cc06 	br	484 <alt_uCOSIIErrorHandler+0x3e8>
     154:	10c01920 	cmpeqi	r3,r2,100
     158:	1800ae1e 	bne	r3,zero,414 <alt_uCOSIIErrorHandler+0x378>
     15c:	10c03fe0 	cmpeqi	r3,r2,255
     160:	1800b91e 	bne	r3,zero,448 <alt_uCOSIIErrorHandler+0x3ac>
     164:	108010a0 	cmpeqi	r2,r2,66
     168:	1000201e 	bne	r2,zero,1ec <alt_uCOSIIErrorHandler+0x150>
     16c:	0000c506 	br	484 <alt_uCOSIIErrorHandler+0x3e8>
   {  
      case OS_PRIO_EXIST:
         fprintf(stderr, "Attempted to assign task priority aready in use.\n");
     170:	00800174 	movhi	r2,5
     174:	108bce04 	addi	r2,r2,12088
     178:	10800017 	ldw	r2,0(r2)
     17c:	10800317 	ldw	r2,12(r2)
     180:	01000174 	movhi	r4,5
     184:	212b3f04 	addi	r4,r4,-21252
     188:	01400044 	movi	r5,1
     18c:	01800c44 	movi	r6,49
     190:	100f883a 	mov	r7,r2
     194:	00023f00 	call	23f0 <fwrite>
         break;
     198:	0000d506 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_PRIO_INVALID:
         fprintf(stderr, "Specified task priority higher than allowed max.\n");
     19c:	00800174 	movhi	r2,5
     1a0:	108bce04 	addi	r2,r2,12088
     1a4:	10800017 	ldw	r2,0(r2)
     1a8:	10800317 	ldw	r2,12(r2)
     1ac:	01000174 	movhi	r4,5
     1b0:	212b4c04 	addi	r4,r4,-21200
     1b4:	01400044 	movi	r5,1
     1b8:	01800c44 	movi	r6,49
     1bc:	100f883a 	mov	r7,r2
     1c0:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "Task can't be assigned a priority higher than %d\n",
     1c4:	00800174 	movhi	r2,5
     1c8:	108bce04 	addi	r2,r2,12088
     1cc:	10800017 	ldw	r2,0(r2)
     1d0:	10800317 	ldw	r2,12(r2)
     1d4:	1009883a 	mov	r4,r2
     1d8:	01400174 	movhi	r5,5
     1dc:	296b5904 	addi	r5,r5,-21148
     1e0:	01800504 	movi	r6,20
     1e4:	000232c0 	call	232c <fprintf>
            OS_LOWEST_PRIO);
         break;
     1e8:	0000c106 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_NO_MORE_TCB:
         fprintf(stderr, "Task Control Blocks have been exhausted\n");
     1ec:	00800174 	movhi	r2,5
     1f0:	108bce04 	addi	r2,r2,12088
     1f4:	10800017 	ldw	r2,0(r2)
     1f8:	10800317 	ldw	r2,12(r2)
     1fc:	01000174 	movhi	r4,5
     200:	212b6604 	addi	r4,r4,-21096
     204:	01400044 	movi	r5,1
     208:	01800a04 	movi	r6,40
     20c:	100f883a 	mov	r7,r2
     210:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "Current max number of tasks is %d\n",OS_MAX_TASKS);
     214:	00800174 	movhi	r2,5
     218:	108bce04 	addi	r2,r2,12088
     21c:	10800017 	ldw	r2,0(r2)
     220:	10800317 	ldw	r2,12(r2)
     224:	1009883a 	mov	r4,r2
     228:	01400174 	movhi	r5,5
     22c:	296b7104 	addi	r5,r5,-21052
     230:	01800284 	movi	r6,10
     234:	000232c0 	call	232c <fprintf>
         break;
     238:	0000ad06 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_MBOX_FULL:
         fault_level = NONE;
     23c:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Attempted Post to Mailbox already holding message\n");
     240:	00800174 	movhi	r2,5
     244:	108bce04 	addi	r2,r2,12088
     248:	10800017 	ldw	r2,0(r2)
     24c:	10800317 	ldw	r2,12(r2)
     250:	01000174 	movhi	r4,5
     254:	212b7a04 	addi	r4,r4,-21016
     258:	01400044 	movi	r5,1
     25c:	01800c84 	movi	r6,50
     260:	100f883a 	mov	r7,r2
     264:	00023f00 	call	23f0 <fwrite>
         break;
     268:	0000a106 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_ERR_EVENT_TYPE:
         fault_level = TASK;
     26c:	00800044 	movi	r2,1
     270:	e0bffd15 	stw	r2,-12(fp)
         fprintf(stderr, 
     274:	00800174 	movhi	r2,5
     278:	108bce04 	addi	r2,r2,12088
     27c:	10800017 	ldw	r2,0(r2)
     280:	10800317 	ldw	r2,12(r2)
     284:	01000174 	movhi	r4,5
     288:	212b8704 	addi	r4,r4,-20964
     28c:	01400044 	movi	r5,1
     290:	01801244 	movi	r6,73
     294:	100f883a 	mov	r7,r2
     298:	00023f00 	call	23f0 <fwrite>
"Attempted to access a resource with no match for the required data type.\n");
         break;
     29c:	00009406 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_ERR_PEVENT_NULL:
         fprintf(stderr, "Attempting to access a resource pointing to NULL\n");
     2a0:	00800174 	movhi	r2,5
     2a4:	108bce04 	addi	r2,r2,12088
     2a8:	10800017 	ldw	r2,0(r2)
     2ac:	10800317 	ldw	r2,12(r2)
     2b0:	01000174 	movhi	r4,5
     2b4:	212b9a04 	addi	r4,r4,-20888
     2b8:	01400044 	movi	r5,1
     2bc:	01800c44 	movi	r6,49
     2c0:	100f883a 	mov	r7,r2
     2c4:	00023f00 	call	23f0 <fwrite>
         break;
     2c8:	00008906 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_ERR_POST_NULL_PTR:
         fault_level = TASK;
     2cc:	00800044 	movi	r2,1
     2d0:	e0bffd15 	stw	r2,-12(fp)
         fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
     2d4:	00800174 	movhi	r2,5
     2d8:	108bce04 	addi	r2,r2,12088
     2dc:	10800017 	ldw	r2,0(r2)
     2e0:	10800317 	ldw	r2,12(r2)
     2e4:	01000174 	movhi	r4,5
     2e8:	212ba704 	addi	r4,r4,-20836
     2ec:	01400044 	movi	r5,1
     2f0:	01800a44 	movi	r6,41
     2f4:	100f883a 	mov	r7,r2
     2f8:	00023f00 	call	23f0 <fwrite>
         break;
     2fc:	00007c06 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_TIMEOUT:
         fault_level = NONE;
     300:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Resource not received in specified time\n");
     304:	00800174 	movhi	r2,5
     308:	108bce04 	addi	r2,r2,12088
     30c:	10800017 	ldw	r2,0(r2)
     310:	10800317 	ldw	r2,12(r2)
     314:	01000174 	movhi	r4,5
     318:	212bb204 	addi	r4,r4,-20792
     31c:	01400044 	movi	r5,1
     320:	01800a04 	movi	r6,40
     324:	100f883a 	mov	r7,r2
     328:	00023f00 	call	23f0 <fwrite>
         break;
     32c:	00007006 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_ERR_PEND_ISR:
         fprintf(stderr, "Attempting to pend for a resource in an ISR\n");
     330:	00800174 	movhi	r2,5
     334:	108bce04 	addi	r2,r2,12088
     338:	10800017 	ldw	r2,0(r2)
     33c:	10800317 	ldw	r2,12(r2)
     340:	01000174 	movhi	r4,5
     344:	212bbd04 	addi	r4,r4,-20748
     348:	01400044 	movi	r5,1
     34c:	01800b04 	movi	r6,44
     350:	100f883a 	mov	r7,r2
     354:	00023f00 	call	23f0 <fwrite>
         break;
     358:	00006506 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_TASK_DEL_IDLE:
         fprintf(stderr, "Attempted to delete the IDLE task\n");
     35c:	00800174 	movhi	r2,5
     360:	108bce04 	addi	r2,r2,12088
     364:	10800017 	ldw	r2,0(r2)
     368:	10800317 	ldw	r2,12(r2)
     36c:	01000174 	movhi	r4,5
     370:	212bc904 	addi	r4,r4,-20700
     374:	01400044 	movi	r5,1
     378:	01800884 	movi	r6,34
     37c:	100f883a 	mov	r7,r2
     380:	00023f00 	call	23f0 <fwrite>
         break;
     384:	00005a06 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_TASK_DEL_ERR:
         fault_level = NONE;
     388:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Attempted to delete a task that does not exist\n");
     38c:	00800174 	movhi	r2,5
     390:	108bce04 	addi	r2,r2,12088
     394:	10800017 	ldw	r2,0(r2)
     398:	10800317 	ldw	r2,12(r2)
     39c:	01000174 	movhi	r4,5
     3a0:	212bd204 	addi	r4,r4,-20664
     3a4:	01400044 	movi	r5,1
     3a8:	01800bc4 	movi	r6,47
     3ac:	100f883a 	mov	r7,r2
     3b0:	00023f00 	call	23f0 <fwrite>
         break;
     3b4:	00004e06 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_TASK_DEL_ISR:
         fprintf(stderr, "Attempted to delete a task from an ISR\n");
     3b8:	00800174 	movhi	r2,5
     3bc:	108bce04 	addi	r2,r2,12088
     3c0:	10800017 	ldw	r2,0(r2)
     3c4:	10800317 	ldw	r2,12(r2)
     3c8:	01000174 	movhi	r4,5
     3cc:	212bde04 	addi	r4,r4,-20616
     3d0:	01400044 	movi	r5,1
     3d4:	018009c4 	movi	r6,39
     3d8:	100f883a 	mov	r7,r2
     3dc:	00023f00 	call	23f0 <fwrite>
         break;
     3e0:	00004306 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_Q_FULL:
         fault_level = NONE;
     3e4:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr, "Attempted to post to a full message queue\n");
     3e8:	00800174 	movhi	r2,5
     3ec:	108bce04 	addi	r2,r2,12088
     3f0:	10800017 	ldw	r2,0(r2)
     3f4:	10800317 	ldw	r2,12(r2)
     3f8:	01000174 	movhi	r4,5
     3fc:	212be804 	addi	r4,r4,-20576
     400:	01400044 	movi	r5,1
     404:	01800a84 	movi	r6,42
     408:	100f883a 	mov	r7,r2
     40c:	00023f00 	call	23f0 <fwrite>
         break;
     410:	00003706 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case OS_ERR_NOT_MUTEX_OWNER:
         fault_level = TASK;
     414:	00800044 	movi	r2,1
     418:	e0bffd15 	stw	r2,-12(fp)
         fprintf(stderr, "Attempted to post a mutex not owned by the task\n");
     41c:	00800174 	movhi	r2,5
     420:	108bce04 	addi	r2,r2,12088
     424:	10800017 	ldw	r2,0(r2)
     428:	10800317 	ldw	r2,12(r2)
     42c:	01000174 	movhi	r4,5
     430:	212bf304 	addi	r4,r4,-20532
     434:	01400044 	movi	r5,1
     438:	01800c04 	movi	r6,48
     43c:	100f883a 	mov	r7,r2
     440:	00023f00 	call	23f0 <fwrite>
         break;
     444:	00002a06 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
     448:	00800084 	movi	r2,2
     44c:	e0bffd15 	stw	r2,-12(fp)
         printf(
     450:	01000174 	movhi	r4,5
     454:	212c0004 	addi	r4,r4,-20480
     458:	00028d40 	call	28d4 <printf>
"\n[MicroC/OS-II]: See STDERR for expanded diagnosis translation.");    
         fprintf(stderr, "\n[MicroC/OS-II]: Expanded Diagnosis: %s.", 
     45c:	00800174 	movhi	r2,5
     460:	108bce04 	addi	r2,r2,12088
     464:	10800017 	ldw	r2,0(r2)
     468:	10800317 	ldw	r2,12(r2)
     46c:	1009883a 	mov	r4,r2
     470:	01400174 	movhi	r5,5
     474:	296c1004 	addi	r5,r5,-20416
     478:	e1bfff17 	ldw	r6,-4(fp)
     47c:	000232c0 	call	232c <fprintf>
                 (char *)expanded_diagnosis_ptr);
         break;           
     480:	00001b06 	br	4f0 <alt_uCOSIIErrorHandler+0x454>
      default:
         printf("\n[MicroC/OS-II]: (Not a MicroC/OS-II error) See STDERR.\n");    
     484:	01000174 	movhi	r4,5
     488:	212c1b04 	addi	r4,r4,-20372
     48c:	0002b640 	call	2b64 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]:");
     490:	00800174 	movhi	r2,5
     494:	108bce04 	addi	r2,r2,12088
     498:	10800017 	ldw	r2,0(r2)
     49c:	10800317 	ldw	r2,12(r2)
     4a0:	01000174 	movhi	r4,5
     4a4:	212c2904 	addi	r4,r4,-20316
     4a8:	01400044 	movi	r5,1
     4ac:	01800404 	movi	r6,16
     4b0:	100f883a 	mov	r7,r2
     4b4:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\nError_code %d.\n", error_code);
     4b8:	00800174 	movhi	r2,5
     4bc:	108bce04 	addi	r2,r2,12088
     4c0:	10800017 	ldw	r2,0(r2)
     4c4:	10c00317 	ldw	r3,12(r2)
     4c8:	e0bffe03 	ldbu	r2,-8(fp)
     4cc:	1809883a 	mov	r4,r3
     4d0:	01400174 	movhi	r5,5
     4d4:	296c2e04 	addi	r5,r5,-20296
     4d8:	100d883a 	mov	r6,r2
     4dc:	000232c0 	call	232c <fprintf>
         perror("\n[MicroC/OS-II]: (Not a MicroC/OS-II error), ERRNO: ");
     4e0:	01000174 	movhi	r4,5
     4e4:	212c3304 	addi	r4,r4,-20276
     4e8:	00028940 	call	2894 <perror>
         break;
     4ec:	0001883a 	nop

   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */  
   switch (fault_level) {
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	10c00060 	cmpeqi	r3,r2,1
     4f8:	1800041e 	bne	r3,zero,50c <alt_uCOSIIErrorHandler+0x470>
     4fc:	0080442e 	bgeu	zero,r2,610 <alt_uCOSIIErrorHandler+0x574>
     500:	108000a0 	cmpeqi	r2,r2,2
     504:	1000201e 	bne	r2,zero,588 <alt_uCOSIIErrorHandler+0x4ec>
     508:	00006206 	br	694 <alt_uCOSIIErrorHandler+0x5f8>
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is TASK).");
     50c:	01000174 	movhi	r4,5
     510:	212c4104 	addi	r4,r4,-20220
     514:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is TASK");
     518:	00800174 	movhi	r2,5
     51c:	108bce04 	addi	r2,r2,12088
     520:	10800017 	ldw	r2,0(r2)
     524:	10800317 	ldw	r2,12(r2)
     528:	01000174 	movhi	r4,5
     52c:	212c4e04 	addi	r4,r4,-20168
     530:	01400044 	movi	r5,1
     534:	01800904 	movi	r6,36
     538:	100f883a 	mov	r7,r2
     53c:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Task is being deleted.\n");
     540:	00800174 	movhi	r2,5
     544:	108bce04 	addi	r2,r2,12088
     548:	10800017 	ldw	r2,0(r2)
     54c:	10800317 	ldw	r2,12(r2)
     550:	01000174 	movhi	r4,5
     554:	212c5804 	addi	r4,r4,-20128
     558:	01400044 	movi	r5,1
     55c:	01800a04 	movi	r6,40
     560:	100f883a 	mov	r7,r2
     564:	00023f00 	call	23f0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
     568:	000de880 	call	de88 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
     56c:	01003fc4 	movi	r4,255
     570:	0014ddc0 	call	14ddc <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
     574:	e0bffe03 	ldbu	r2,-8(fp)
     578:	1009883a 	mov	r4,r2
     57c:	000b883a 	mov	r5,zero
     580:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
         break;
     584:	00005006 	br	6c8 <alt_uCOSIIErrorHandler+0x62c>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is SYSTEM).");    
     588:	01000174 	movhi	r4,5
     58c:	212c6304 	addi	r4,r4,-20084
     590:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is SYSTEM");
     594:	00800174 	movhi	r2,5
     598:	108bce04 	addi	r2,r2,12088
     59c:	10800017 	ldw	r2,0(r2)
     5a0:	10800317 	ldw	r2,12(r2)
     5a4:	01000174 	movhi	r4,5
     5a8:	212c7104 	addi	r4,r4,-20028
     5ac:	01400044 	movi	r5,1
     5b0:	01800984 	movi	r6,38
     5b4:	100f883a 	mov	r7,r2
     5b8:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: FATAL Error, Restart required.");
     5bc:	00800174 	movhi	r2,5
     5c0:	108bce04 	addi	r2,r2,12088
     5c4:	10800017 	ldw	r2,0(r2)
     5c8:	10800317 	ldw	r2,12(r2)
     5cc:	01000174 	movhi	r4,5
     5d0:	212c7b04 	addi	r4,r4,-19988
     5d4:	01400044 	movi	r5,1
     5d8:	01800bc4 	movi	r6,47
     5dc:	100f883a 	mov	r7,r2
     5e0:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Locking scheduler - endless loop.\n");
     5e4:	00800174 	movhi	r2,5
     5e8:	108bce04 	addi	r2,r2,12088
     5ec:	10800017 	ldw	r2,0(r2)
     5f0:	10800317 	ldw	r2,12(r2)
     5f4:	01000174 	movhi	r4,5
     5f8:	212c8704 	addi	r4,r4,-19940
     5fc:	01400044 	movi	r5,1
     600:	01800cc4 	movi	r6,51
     604:	100f883a 	mov	r7,r2
     608:	00023f00 	call	23f0 <fwrite>
         while(1); /* Since scheduler is locked,loop halts all task activity.*/
     60c:	003fff06 	br	60c <alt_uCOSIIErrorHandler+0x570>
         break;
      case NONE:
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is NONE");
     610:	00800174 	movhi	r2,5
     614:	108bce04 	addi	r2,r2,12088
     618:	10800017 	ldw	r2,0(r2)
     61c:	10800317 	ldw	r2,12(r2)
     620:	01000174 	movhi	r4,5
     624:	212c9404 	addi	r4,r4,-19888
     628:	01400044 	movi	r5,1
     62c:	01800904 	movi	r6,36
     630:	100f883a 	mov	r7,r2
     634:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[MicroC/OS-II]: Informational error only, control"); 
     638:	00800174 	movhi	r2,5
     63c:	108bce04 	addi	r2,r2,12088
     640:	10800017 	ldw	r2,0(r2)
     644:	10800317 	ldw	r2,12(r2)
     648:	01000174 	movhi	r4,5
     64c:	212c9e04 	addi	r4,r4,-19848
     650:	01400044 	movi	r5,1
     654:	01800c84 	movi	r6,50
     658:	100f883a 	mov	r7,r2
     65c:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, 
     660:	00800174 	movhi	r2,5
     664:	108bce04 	addi	r2,r2,12088
     668:	10800017 	ldw	r2,0(r2)
     66c:	10800317 	ldw	r2,12(r2)
     670:	01000174 	movhi	r4,5
     674:	212cab04 	addi	r4,r4,-19796
     678:	01400044 	movi	r5,1
     67c:	01800f84 	movi	r6,62
     680:	100f883a 	mov	r7,r2
     684:	00023f00 	call	23f0 <fwrite>
            "returned to task to complete processing at application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */
     688:	000de880 	call	de88 <OSSchedUnlock>
         return;   
     68c:	0001883a 	nop
     690:	00000f06 	br	6d0 <alt_uCOSIIErrorHandler+0x634>
         break;      
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
     694:	01000174 	movhi	r4,5
     698:	212cbb04 	addi	r4,r4,-19732
     69c:	0002b640 	call	2b64 <puts>
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
     6a0:	00800174 	movhi	r2,5
     6a4:	108bce04 	addi	r2,r2,12088
     6a8:	10800017 	ldw	r2,0(r2)
     6ac:	10800317 	ldw	r2,12(r2)
     6b0:	01000174 	movhi	r4,5
     6b4:	212cc904 	addi	r4,r4,-19676
     6b8:	01400044 	movi	r5,1
     6bc:	01800ac4 	movi	r6,43
     6c0:	100f883a 	mov	r7,r2
     6c4:	00023f00 	call	23f0 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
     6c8:	003fff06 	br	6c8 <alt_uCOSIIErrorHandler+0x62c>
{
   FAULT_LEVEL fault_level;
   
   if(error_code == OS_NO_ERR)
   {
      return;
     6cc:	0001883a 	nop
      default:
         printf("\n[MicroC/OS-II]: See STDERR (FAULT_LEVEL is Unknown).\n");
         fprintf(stderr, "\n[MicroC/OS-II]: FAULT_LEVEL is unknown!?!\n");
   }
   while(1); /* Correct Program Flow never gets here. */
}
     6d0:	e037883a 	mov	sp,fp
     6d4:	dfc00117 	ldw	ra,4(sp)
     6d8:	df000017 	ldw	fp,0(sp)
     6dc:	dec00204 	addi	sp,sp,8
     6e0:	f800283a 	ret

000006e4 <alt_NetworkErrorHandler>:

void alt_NetworkErrorHandler(INT8U error_code, void *expanded_diagnosis_ptr)
{
     6e4:	defffb04 	addi	sp,sp,-20
     6e8:	dfc00415 	stw	ra,16(sp)
     6ec:	df000315 	stw	fp,12(sp)
     6f0:	df000304 	addi	fp,sp,12
     6f4:	2005883a 	mov	r2,r4
     6f8:	e17fff15 	stw	r5,-4(fp)
     6fc:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
     700:	e0bffe03 	ldbu	r2,-8(fp)
     704:	1000a126 	beq	r2,zero,98c <alt_NetworkErrorHandler+0x2a8>
   {
      return;
   }

   fault_level = SYSTEM;   
     708:	00800084 	movi	r2,2
     70c:	e0bffd15 	stw	r2,-12(fp)
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */  
     710:	000ddd40 	call	ddd4 <OSSchedLock>

   if (error_code == EXPANDED_DIAGNOSIS_CODE) 
     714:	e0bffe03 	ldbu	r2,-8(fp)
     718:	10803fd8 	cmpnei	r2,r2,255
     71c:	1000121e 	bne	r2,zero,768 <alt_NetworkErrorHandler+0x84>
   {
      fault_level = SYSTEM;
     720:	00800084 	movi	r2,2
     724:	e0bffd15 	stw	r2,-12(fp)
      printf("\n[Network]: See STDERR for expanded diagnosis translation.");    
     728:	01000174 	movhi	r4,5
     72c:	212cd404 	addi	r4,r4,-19632
     730:	00028d40 	call	28d4 <printf>
      fprintf(stderr, "\n[Network]: %s", (char *)expanded_diagnosis_ptr);
     734:	00800174 	movhi	r2,5
     738:	108bce04 	addi	r2,r2,12088
     73c:	10800017 	ldw	r2,0(r2)
     740:	10800317 	ldw	r2,12(r2)
     744:	1009883a 	mov	r4,r2
     748:	01400174 	movhi	r5,5
     74c:	296ce304 	addi	r5,r5,-19572
     750:	e1bfff17 	ldw	r6,-4(fp)
     754:	000232c0 	call	232c <fprintf>
      /* Check errno also in case it has been set. */
      perror("\n[Network]:  ERRNO: ");
     758:	01000174 	movhi	r4,5
     75c:	212ce704 	addi	r4,r4,-19556
     760:	00028940 	call	2894 <perror>
     764:	00001206 	br	7b0 <alt_NetworkErrorHandler+0xcc>
   }
   else 
   {
      fault_level = TASK;
     768:	00800044 	movi	r2,1
     76c:	e0bffd15 	stw	r2,-12(fp)
      printf("\n[Network]: See STDERR.\n");    
     770:	01000174 	movhi	r4,5
     774:	212ced04 	addi	r4,r4,-19532
     778:	0002b640 	call	2b64 <puts>
      fprintf(stderr, "\n[Network]: Error_code %d!\n", error_code);        
     77c:	00800174 	movhi	r2,5
     780:	108bce04 	addi	r2,r2,12088
     784:	10800017 	ldw	r2,0(r2)
     788:	10c00317 	ldw	r3,12(r2)
     78c:	e0bffe03 	ldbu	r2,-8(fp)
     790:	1809883a 	mov	r4,r3
     794:	01400174 	movhi	r5,5
     798:	296cf304 	addi	r5,r5,-19508
     79c:	100d883a 	mov	r6,r2
     7a0:	000232c0 	call	232c <fprintf>
      perror("\n[Network]:  ERRNO: ");
     7a4:	01000174 	movhi	r4,5
     7a8:	212ce704 	addi	r4,r4,-19556
     7ac:	00028940 	call	2894 <perror>
   }

   /* Process error based on fault level, reenable scheduler if appropriate. */     
   switch (fault_level) 
     7b0:	e0bffd17 	ldw	r2,-12(fp)
     7b4:	10c00060 	cmpeqi	r3,r2,1
     7b8:	1800041e 	bne	r3,zero,7cc <alt_NetworkErrorHandler+0xe8>
     7bc:	0080442e 	bgeu	zero,r2,8d0 <alt_NetworkErrorHandler+0x1ec>
     7c0:	108000a0 	cmpeqi	r2,r2,2
     7c4:	1000201e 	bne	r2,zero,848 <alt_NetworkErrorHandler+0x164>
     7c8:	00006206 	br	954 <alt_NetworkErrorHandler+0x270>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is TASK).");
     7cc:	01000174 	movhi	r4,5
     7d0:	212cfa04 	addi	r4,r4,-19480
     7d4:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is TASK");
     7d8:	00800174 	movhi	r2,5
     7dc:	108bce04 	addi	r2,r2,12088
     7e0:	10800017 	ldw	r2,0(r2)
     7e4:	10800317 	ldw	r2,12(r2)
     7e8:	01000174 	movhi	r4,5
     7ec:	212d0604 	addi	r4,r4,-19432
     7f0:	01400044 	movi	r5,1
     7f4:	018007c4 	movi	r6,31
     7f8:	100f883a 	mov	r7,r2
     7fc:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[Network]: Task is being deleted.\n");
     800:	00800174 	movhi	r2,5
     804:	108bce04 	addi	r2,r2,12088
     808:	10800017 	ldw	r2,0(r2)
     80c:	10800317 	ldw	r2,12(r2)
     810:	01000174 	movhi	r4,5
     814:	212d0e04 	addi	r4,r4,-19400
     818:	01400044 	movi	r5,1
     81c:	018008c4 	movi	r6,35
     820:	100f883a 	mov	r7,r2
     824:	00023f00 	call	23f0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
     828:	000de880 	call	de88 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
     82c:	01003fc4 	movi	r4,255
     830:	0014ddc0 	call	14ddc <OSTaskDel>
         /* Reinvoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
     834:	e0bffe03 	ldbu	r2,-8(fp)
     838:	1009883a 	mov	r4,r2
     83c:	000b883a 	mov	r5,zero
     840:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
         break;
     844:	00005006 	br	988 <alt_NetworkErrorHandler+0x2a4>
      case SYSTEM:
         /* Total System Failure, Restart Required */
         printf("\n[Network]: See STDERR (FAULT_LEVEL is SYSTEM).");    
     848:	01000174 	movhi	r4,5
     84c:	212d1704 	addi	r4,r4,-19364
     850:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is SYSTEM.");
     854:	00800174 	movhi	r2,5
     858:	108bce04 	addi	r2,r2,12088
     85c:	10800017 	ldw	r2,0(r2)
     860:	10800317 	ldw	r2,12(r2)
     864:	01000174 	movhi	r4,5
     868:	212d2304 	addi	r4,r4,-19316
     86c:	01400044 	movi	r5,1
     870:	01800884 	movi	r6,34
     874:	100f883a 	mov	r7,r2
     878:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[Network]: FATAL Error, Restart required.");
     87c:	00800174 	movhi	r2,5
     880:	108bce04 	addi	r2,r2,12088
     884:	10800017 	ldw	r2,0(r2)
     888:	10800317 	ldw	r2,12(r2)
     88c:	01000174 	movhi	r4,5
     890:	212d2c04 	addi	r4,r4,-19280
     894:	01400044 	movi	r5,1
     898:	01800a84 	movi	r6,42
     89c:	100f883a 	mov	r7,r2
     8a0:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[Network]: Locking scheduler - endless loop.\n");
     8a4:	00800174 	movhi	r2,5
     8a8:	108bce04 	addi	r2,r2,12088
     8ac:	10800017 	ldw	r2,0(r2)
     8b0:	10800317 	ldw	r2,12(r2)
     8b4:	01000174 	movhi	r4,5
     8b8:	212d3704 	addi	r4,r4,-19236
     8bc:	01400044 	movi	r5,1
     8c0:	01800b84 	movi	r6,46
     8c4:	100f883a 	mov	r7,r2
     8c8:	00023f00 	call	23f0 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
     8cc:	003fff06 	br	8cc <alt_NetworkErrorHandler+0x1e8>
         break;
      case NONE:
         fprintf(stderr, "\n[Network]: FAULT_LEVEL is NONE.");
     8d0:	00800174 	movhi	r2,5
     8d4:	108bce04 	addi	r2,r2,12088
     8d8:	10800017 	ldw	r2,0(r2)
     8dc:	10800317 	ldw	r2,12(r2)
     8e0:	01000174 	movhi	r4,5
     8e4:	212d4304 	addi	r4,r4,-19188
     8e8:	01400044 	movi	r5,1
     8ec:	01800804 	movi	r6,32
     8f0:	100f883a 	mov	r7,r2
     8f4:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[Network]: Informational "
     8f8:	00800174 	movhi	r2,5
     8fc:	108bce04 	addi	r2,r2,12088
     900:	10800017 	ldw	r2,0(r2)
     904:	10800317 	ldw	r2,12(r2)
     908:	01000174 	movhi	r4,5
     90c:	212d4c04 	addi	r4,r4,-19152
     910:	01400044 	movi	r5,1
     914:	01800d84 	movi	r6,54
     918:	100f883a 	mov	r7,r2
     91c:	00023f00 	call	23f0 <fwrite>
                         "error only, control returned");
         fprintf(stderr, 
     920:	00800174 	movhi	r2,5
     924:	108bce04 	addi	r2,r2,12088
     928:	10800017 	ldw	r2,0(r2)
     92c:	10800317 	ldw	r2,12(r2)
     930:	01000174 	movhi	r4,5
     934:	212d5a04 	addi	r4,r4,-19096
     938:	01400044 	movi	r5,1
     93c:	01800e44 	movi	r6,57
     940:	100f883a 	mov	r7,r2
     944:	00023f00 	call	23f0 <fwrite>
            "to task to complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
     948:	000de880 	call	de88 <OSSchedUnlock>
         return;
     94c:	0001883a 	nop
     950:	00000f06 	br	990 <alt_NetworkErrorHandler+0x2ac>
         break;         
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
     954:	01000174 	movhi	r4,5
     958:	212d6904 	addi	r4,r4,-19036
     95c:	0002b640 	call	2b64 <puts>
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
     960:	00800174 	movhi	r2,5
     964:	108bce04 	addi	r2,r2,12088
     968:	10800017 	ldw	r2,0(r2)
     96c:	10800317 	ldw	r2,12(r2)
     970:	01000174 	movhi	r4,5
     974:	212d7604 	addi	r4,r4,-18984
     978:	01400044 	movi	r5,1
     97c:	01800984 	movi	r6,38
     980:	100f883a 	mov	r7,r2
     984:	00023f00 	call	23f0 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
     988:	003fff06 	br	988 <alt_NetworkErrorHandler+0x2a4>
{
   FAULT_LEVEL fault_level;

   if(error_code == OS_NO_ERR)
   {
      return;
     98c:	0001883a 	nop
      default:
         printf("\n[Network]: See STDERR (FAULT_LEVEL is unknown).\n");    
         fprintf(stderr, "\n[Network] FAULT_LEVEL is unknown !?!\n");
   }
   while(1); /* Correct Program Flow never gets here. */
}
     990:	e037883a 	mov	sp,fp
     994:	dfc00117 	ldw	ra,4(sp)
     998:	df000017 	ldw	fp,0(sp)
     99c:	dec00204 	addi	sp,sp,8
     9a0:	f800283a 	ret

000009a4 <alt_SSSErrorHandler>:
   
   
void alt_SSSErrorHandler(INT8U error_code, 
                         void *expanded_diagnosis_ptr)
{
     9a4:	defffb04 	addi	sp,sp,-20
     9a8:	dfc00415 	stw	ra,16(sp)
     9ac:	df000315 	stw	fp,12(sp)
     9b0:	df000304 	addi	fp,sp,12
     9b4:	2005883a 	mov	r2,r4
     9b8:	e17fff15 	stw	r5,-4(fp)
     9bc:	e0bffe05 	stb	r2,-8(fp)
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
     9c0:	e0bffe03 	ldbu	r2,-8(fp)
     9c4:	1000b026 	beq	r2,zero,c88 <alt_SSSErrorHandler+0x2e4>
   {
      return;
   }

   fault_level = (error_code == OS_NO_ERR) ? NONE : SYSTEM;
     9c8:	e0bffe03 	ldbu	r2,-8(fp)
     9cc:	1000021e 	bne	r2,zero,9d8 <alt_SSSErrorHandler+0x34>
     9d0:	0005883a 	mov	r2,zero
     9d4:	00000106 	br	9dc <alt_SSSErrorHandler+0x38>
     9d8:	00800084 	movi	r2,2
     9dc:	e0bffd15 	stw	r2,-12(fp)
   
   OSSchedLock();  /* Disable Task Switching but still service other IRQs */
     9e0:	000ddd40 	call	ddd4 <OSSchedLock>
   switch (error_code)
     9e4:	e0bffe03 	ldbu	r2,-8(fp)
     9e8:	10c007a0 	cmpeqi	r3,r2,30
     9ec:	1800111e 	bne	r3,zero,a34 <alt_SSSErrorHandler+0x90>
     9f0:	10803fe0 	cmpeqi	r2,r2,255
     9f4:	10001b26 	beq	r2,zero,a64 <alt_SSSErrorHandler+0xc0>
   {
      case EXPANDED_DIAGNOSIS_CODE:      
         fault_level = SYSTEM;
     9f8:	00800084 	movi	r2,2
     9fc:	e0bffd15 	stw	r2,-12(fp)
         printf("\n[SSS]: See STDERR for expanded diagnosis translation.");    
     a00:	01000174 	movhi	r4,5
     a04:	212d8004 	addi	r4,r4,-18944
     a08:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[SSS]: %s", (char *)expanded_diagnosis_ptr);
     a0c:	00800174 	movhi	r2,5
     a10:	108bce04 	addi	r2,r2,12088
     a14:	10800017 	ldw	r2,0(r2)
     a18:	10800317 	ldw	r2,12(r2)
     a1c:	1009883a 	mov	r4,r2
     a20:	01400174 	movhi	r5,5
     a24:	296d8e04 	addi	r5,r5,-18888
     a28:	e1bfff17 	ldw	r6,-4(fp)
     a2c:	000232c0 	call	232c <fprintf>
         break;
     a30:	00001e06 	br	aac <alt_SSSErrorHandler+0x108>
         
      case OS_Q_FULL:
         fault_level = NONE;
     a34:	e03ffd15 	stw	zero,-12(fp)
         fprintf(stderr,"\n[SSS]: Attempted to post to a full message queue.");
     a38:	00800174 	movhi	r2,5
     a3c:	108bce04 	addi	r2,r2,12088
     a40:	10800017 	ldw	r2,0(r2)
     a44:	10800317 	ldw	r2,12(r2)
     a48:	01000174 	movhi	r4,5
     a4c:	212d9104 	addi	r4,r4,-18876
     a50:	01400044 	movi	r5,1
     a54:	01800c84 	movi	r6,50
     a58:	100f883a 	mov	r7,r2
     a5c:	00023f00 	call	23f0 <fwrite>
         break;
     a60:	00001206 	br	aac <alt_SSSErrorHandler+0x108>
      
      default:
         fault_level = SYSTEM;
     a64:	00800084 	movi	r2,2
     a68:	e0bffd15 	stw	r2,-12(fp)
         printf("\n[SSS]: See STDERR.\n");    
     a6c:	01000174 	movhi	r4,5
     a70:	212d9e04 	addi	r4,r4,-18824
     a74:	0002b640 	call	2b64 <puts>
         fprintf(stderr, "\n[SSS]: Error_code %d!", error_code);        
     a78:	00800174 	movhi	r2,5
     a7c:	108bce04 	addi	r2,r2,12088
     a80:	10800017 	ldw	r2,0(r2)
     a84:	10c00317 	ldw	r3,12(r2)
     a88:	e0bffe03 	ldbu	r2,-8(fp)
     a8c:	1809883a 	mov	r4,r3
     a90:	01400174 	movhi	r5,5
     a94:	296da304 	addi	r5,r5,-18804
     a98:	100d883a 	mov	r6,r2
     a9c:	000232c0 	call	232c <fprintf>
         perror("\n[SSS]:  ERRNO: ");
     aa0:	01000174 	movhi	r4,5
     aa4:	212da904 	addi	r4,r4,-18780
     aa8:	00028940 	call	2894 <perror>
   }

   /* Process the error based on the fault level, 
    * reenable scheduler if appropriate. */     
   switch (fault_level) 
     aac:	e0bffd17 	ldw	r2,-12(fp)
     ab0:	10c00060 	cmpeqi	r3,r2,1
     ab4:	1800041e 	bne	r3,zero,ac8 <alt_SSSErrorHandler+0x124>
     ab8:	0080442e 	bgeu	zero,r2,bcc <alt_SSSErrorHandler+0x228>
     abc:	108000a0 	cmpeqi	r2,r2,2
     ac0:	1000201e 	bne	r2,zero,b44 <alt_SSSErrorHandler+0x1a0>
     ac4:	00006206 	br	c50 <alt_SSSErrorHandler+0x2ac>
   {
      case TASK:
         /* Error can be isolated by killing the task */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is TASK).");
     ac8:	01000174 	movhi	r4,5
     acc:	212dae04 	addi	r4,r4,-18760
     ad0:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is TASK");
     ad4:	00800174 	movhi	r2,5
     ad8:	108bce04 	addi	r2,r2,12088
     adc:	10800017 	ldw	r2,0(r2)
     ae0:	10800317 	ldw	r2,12(r2)
     ae4:	01000174 	movhi	r4,5
     ae8:	212db904 	addi	r4,r4,-18716
     aec:	01400044 	movi	r5,1
     af0:	018006c4 	movi	r6,27
     af4:	100f883a 	mov	r7,r2
     af8:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[SSS]: Task is being deleted.\n");
     afc:	00800174 	movhi	r2,5
     b00:	108bce04 	addi	r2,r2,12088
     b04:	10800017 	ldw	r2,0(r2)
     b08:	10800317 	ldw	r2,12(r2)
     b0c:	01000174 	movhi	r4,5
     b10:	212dc004 	addi	r4,r4,-18688
     b14:	01400044 	movi	r5,1
     b18:	018007c4 	movi	r6,31
     b1c:	100f883a 	mov	r7,r2
     b20:	00023f00 	call	23f0 <fwrite>
         OSSchedUnlock(); /* Reenable Task Switching */
     b24:	000de880 	call	de88 <OSSchedUnlock>
         OSTaskDel(OS_PRIO_SELF);
     b28:	01003fc4 	movi	r4,255
     b2c:	0014ddc0 	call	14ddc <OSTaskDel>
         /* Invoke uCOSII error handler in case task deletion fails, in 
          * which case fault_level for this secondary error will be SYSTEM. */
         alt_uCOSIIErrorHandler(error_code, 0);         
     b30:	e0bffe03 	ldbu	r2,-8(fp)
     b34:	1009883a 	mov	r4,r2
     b38:	000b883a 	mov	r5,zero
     b3c:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
         break;
     b40:	00005006 	br	c84 <alt_SSSErrorHandler+0x2e0>
      case SYSTEM:
          /* Total System Failure, Restart Required */
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is SYSTEM).");    
     b44:	01000174 	movhi	r4,5
     b48:	212dc804 	addi	r4,r4,-18656
     b4c:	00028d40 	call	28d4 <printf>
         fprintf(stderr, "\n[SSS]: FAULT_LEVEL is SYSTEM.");
     b50:	00800174 	movhi	r2,5
     b54:	108bce04 	addi	r2,r2,12088
     b58:	10800017 	ldw	r2,0(r2)
     b5c:	10800317 	ldw	r2,12(r2)
     b60:	01000174 	movhi	r4,5
     b64:	212dd304 	addi	r4,r4,-18612
     b68:	01400044 	movi	r5,1
     b6c:	01800784 	movi	r6,30
     b70:	100f883a 	mov	r7,r2
     b74:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[SSS]: FATAL Error, Restart required.");
     b78:	00800174 	movhi	r2,5
     b7c:	108bce04 	addi	r2,r2,12088
     b80:	10800017 	ldw	r2,0(r2)
     b84:	10800317 	ldw	r2,12(r2)
     b88:	01000174 	movhi	r4,5
     b8c:	212ddb04 	addi	r4,r4,-18580
     b90:	01400044 	movi	r5,1
     b94:	01800984 	movi	r6,38
     b98:	100f883a 	mov	r7,r2
     b9c:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, "\n[SSS]: Locking scheduler - endless loop.\n");
     ba0:	00800174 	movhi	r2,5
     ba4:	108bce04 	addi	r2,r2,12088
     ba8:	10800017 	ldw	r2,0(r2)
     bac:	10800317 	ldw	r2,12(r2)
     bb0:	01000174 	movhi	r4,5
     bb4:	212de504 	addi	r4,r4,-18540
     bb8:	01400044 	movi	r5,1
     bbc:	01800a84 	movi	r6,42
     bc0:	100f883a 	mov	r7,r2
     bc4:	00023f00 	call	23f0 <fwrite>
         while(1); /* Since scheduler is locked, loop halts all task activity.*/
     bc8:	003fff06 	br	bc8 <alt_SSSErrorHandler+0x224>
         break;
      case NONE:
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is NONE.");
     bcc:	00800174 	movhi	r2,5
     bd0:	108bce04 	addi	r2,r2,12088
     bd4:	10800017 	ldw	r2,0(r2)
     bd8:	10800317 	ldw	r2,12(r2)
     bdc:	01000174 	movhi	r4,5
     be0:	212df004 	addi	r4,r4,-18496
     be4:	01400044 	movi	r5,1
     be8:	018006c4 	movi	r6,27
     bec:	100f883a 	mov	r7,r2
     bf0:	00023f00 	call	23f0 <fwrite>
         fprintf(stderr, 
     bf4:	00800174 	movhi	r2,5
     bf8:	108bce04 	addi	r2,r2,12088
     bfc:	10800017 	ldw	r2,0(r2)
     c00:	10800317 	ldw	r2,12(r2)
     c04:	01000174 	movhi	r4,5
     c08:	212df704 	addi	r4,r4,-18468
     c0c:	01400044 	movi	r5,1
     c10:	01800f44 	movi	r6,61
     c14:	100f883a 	mov	r7,r2
     c18:	00023f00 	call	23f0 <fwrite>
            "\n[SSS] Informational error only, control returned to task to ");
         fprintf(stderr,
     c1c:	00800174 	movhi	r2,5
     c20:	108bce04 	addi	r2,r2,12088
     c24:	10800017 	ldw	r2,0(r2)
     c28:	10800317 	ldw	r2,12(r2)
     c2c:	01000174 	movhi	r4,5
     c30:	212e0704 	addi	r4,r4,-18404
     c34:	01400044 	movi	r5,1
     c38:	01800b84 	movi	r6,46
     c3c:	100f883a 	mov	r7,r2
     c40:	00023f00 	call	23f0 <fwrite>
            "complete processing at the application level.\n");
         OSSchedUnlock(); /* Reenable Task Switching */ 
     c44:	000de880 	call	de88 <OSSchedUnlock>
         return;         
     c48:	0001883a 	nop
     c4c:	00000f06 	br	c8c <alt_SSSErrorHandler+0x2e8>
         break;
      default:
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is Unknown).\n");
     c50:	01000174 	movhi	r4,5
     c54:	212e1304 	addi	r4,r4,-18356
     c58:	0002b640 	call	2b64 <puts>
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is unknown!?!\n");
     c5c:	00800174 	movhi	r2,5
     c60:	108bce04 	addi	r2,r2,12088
     c64:	10800017 	ldw	r2,0(r2)
     c68:	10800317 	ldw	r2,12(r2)
     c6c:	01000174 	movhi	r4,5
     c70:	212e1f04 	addi	r4,r4,-18308
     c74:	01400044 	movi	r5,1
     c78:	01800844 	movi	r6,33
     c7c:	100f883a 	mov	r7,r2
     c80:	00023f00 	call	23f0 <fwrite>
   }
   while(1); /* Correct Program Flow never gets here. */
     c84:	003fff06 	br	c84 <alt_SSSErrorHandler+0x2e0>
{
   FAULT_LEVEL fault_level;
   
   if   (error_code == OS_NO_ERR)
   {
      return;
     c88:	0001883a 	nop
      default:
         printf("\n[SSS]: See STDERR (FAULT_LEVEL is Unknown).\n");
         fprintf(stderr, "\n[SSS] FAULT_LEVEL is unknown!?!\n");
   }
   while(1); /* Correct Program Flow never gets here. */
}
     c8c:	e037883a 	mov	sp,fp
     c90:	dfc00117 	ldw	ra,4(sp)
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00204 	addi	sp,sp,8
     c9c:	f800283a 	ret

00000ca0 <SSSInitialTask>:
/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
 * RTOS structures and tasks. 
 */
void SSSInitialTask(void *task_data)
{
     ca0:	defffc04 	addi	sp,sp,-16
     ca4:	dfc00315 	stw	ra,12(sp)
     ca8:	df000215 	stw	fp,8(sp)
     cac:	df000204 	addi	fp,sp,8
     cb0:	e13fff15 	stw	r4,-4(fp)
   * NicheStack is initialized from a task, so that RTOS will have started, and 
   * I/O drivers are available.  Two tasks are created:
   *    "Inet main"  task with priority 2
   *    "clock tick" task with priority 3
   */   
  alt_iniche_init();
     cb4:	002b9280 	call	2b928 <alt_iniche_init>
  netmain(); 
     cb8:	0026a040 	call	26a04 <netmain>

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
     cbc:	00000206 	br	cc8 <SSSInitialTask+0x28>
    TK_SLEEP(1);
     cc0:	01000084 	movi	r4,2
     cc4:	00163440 	call	16344 <OSTimeDly>
  netmain(); 

  /* Wait for the network stack to be ready before proceeding. 
   * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
   */
  while (!iniche_net_ready)
     cc8:	00800174 	movhi	r2,5
     ccc:	10956504 	addi	r2,r2,21908
     cd0:	10800017 	ldw	r2,0(r2)
     cd4:	103ffa26 	beq	r2,zero,cc0 <SSSInitialTask+0x20>

  /* Now that the stack is running, perform the application initialization steps */
  
  /* Application Specific Task Launching Code Block Begin */

  printf("\nSimple Socket Server starting up\n");
     cd8:	01000174 	movhi	r4,5
     cdc:	212e2e04 	addi	r4,r4,-18248
     ce0:	0002b640 	call	2b64 <puts>

  /* Create the main simple socket server task. */
  TK_NEWTASK(&ssstask);
     ce4:	01000174 	movhi	r4,5
     ce8:	21031204 	addi	r4,r4,3144
     cec:	002b5c40 	call	2b5c4 <TK_NEWTASK>
  
  /*create os data structures */
  SSSCreateOSDataStructs(); 
     cf0:	00019340 	call	1934 <SSSCreateOSDataStructs>

  /* create the other tasks */
  SSSCreateTasks();
     cf4:	00019d40 	call	19d4 <SSSCreateTasks>

  /* Application Specific Task Launching Code Block End */
  
  /*This task is deleted because there is no need for it to run again */
  error_code = OSTaskDel(OS_PRIO_SELF);
     cf8:	01003fc4 	movi	r4,255
     cfc:	0014ddc0 	call	14ddc <OSTaskDel>
     d00:	e0bffe05 	stb	r2,-8(fp)
  alt_uCOSIIErrorHandler(error_code, 0);
     d04:	e0bffe03 	ldbu	r2,-8(fp)
     d08:	1009883a 	mov	r4,r2
     d0c:	000b883a 	mov	r5,zero
     d10:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
  
  while (1); /* Correct Program Flow should never get here */
     d14:	003fff06 	br	d14 <SSSInitialTask+0x74>

00000d18 <main>:

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main (int argc, char* argv[], char* envp[])
{
     d18:	defff504 	addi	sp,sp,-44
     d1c:	dfc00a15 	stw	ra,40(sp)
     d20:	df000915 	stw	fp,36(sp)
     d24:	df000904 	addi	fp,sp,36
     d28:	e13ffd15 	stw	r4,-12(fp)
     d2c:	e17ffe15 	stw	r5,-8(fp)
     d30:	e1bfff15 	stw	r6,-4(fp)
  
  INT8U error_code;

  /* Clear the RTOS timer */
  OSTimeSet(0);
     d34:	0009883a 	mov	r4,zero
     d38:	0016a480 	call	16a48 <OSTimeSet>

  /* SSSInitialTask will initialize the NicheStack
   * TCP/IP Stack and then initialize the rest of the Simple Socket Server example 
   * RTOS structures and tasks. 
   */  
  error_code = OSTaskCreateExt(SSSInitialTask,
     d3c:	00800144 	movi	r2,5
     d40:	d8800015 	stw	r2,0(sp)
     d44:	00800174 	movhi	r2,5
     d48:	10975804 	addi	r2,r2,23904
     d4c:	d8800115 	stw	r2,4(sp)
     d50:	00820004 	movi	r2,2048
     d54:	d8800215 	stw	r2,8(sp)
     d58:	d8000315 	stw	zero,12(sp)
     d5c:	d8000415 	stw	zero,16(sp)
     d60:	01000034 	movhi	r4,0
     d64:	21032804 	addi	r4,r4,3232
     d68:	000b883a 	mov	r5,zero
     d6c:	01800174 	movhi	r6,5
     d70:	319f5804 	addi	r6,r6,32096
     d74:	01c00144 	movi	r7,5
     d78:	0014b380 	call	14b38 <OSTaskCreateExt>
     d7c:	e0bffc05 	stb	r2,-16(fp)
                             SSS_INITIAL_TASK_PRIORITY,
                             SSSInitialTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
  alt_uCOSIIErrorHandler(error_code, 0);
     d80:	e0bffc03 	ldbu	r2,-16(fp)
     d84:	1009883a 	mov	r4,r2
     d88:	000b883a 	mov	r5,zero
     d8c:	000009c0 	call	9c <alt_uCOSIIErrorHandler>

  /*
   * As with all MicroC/OS-II designs, once the initial thread(s) and 
   * associated RTOS resources are declared, we start the RTOS. That's it!
   */
  OSStart();
     d90:	000e0100 	call	e010 <OSStart>

  
  while(1); /* Correct Program Flow never gets here. */
     d94:	003fff06 	br	d94 <main+0x7c>

00000d98 <led_bit_toggle>:
 * Development Board which controls 8 LEDs, D0 - D7.
 * 
 */
 
void led_bit_toggle(OS_FLAGS bit)
{
     d98:	defffc04 	addi	sp,sp,-16
     d9c:	dfc00315 	stw	ra,12(sp)
     da0:	df000215 	stw	fp,8(sp)
     da4:	df000204 	addi	fp,sp,8
     da8:	2005883a 	mov	r2,r4
     dac:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS  led_8_val;
    INT8U error_code;
    
    led_8_val = OSFlagQuery(SSSLEDEventFlag, &error_code);
     db0:	00800174 	movhi	r2,5
     db4:	10953404 	addi	r2,r2,21712
     db8:	10c00017 	ldw	r3,0(r2)
     dbc:	e0bffe84 	addi	r2,fp,-6
     dc0:	1809883a 	mov	r4,r3
     dc4:	100b883a 	mov	r5,r2
     dc8:	00110740 	call	11074 <OSFlagQuery>
     dcc:	e0bffe0d 	sth	r2,-8(fp)
    alt_uCOSIIErrorHandler(error_code, 0);
     dd0:	e0bffe83 	ldbu	r2,-6(fp)
     dd4:	10803fcc 	andi	r2,r2,255
     dd8:	1009883a 	mov	r4,r2
     ddc:	000b883a 	mov	r5,zero
     de0:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
    if (bit & led_8_val)
     de4:	e0ffff0b 	ldhu	r3,-4(fp)
     de8:	e0bffe0b 	ldhu	r2,-8(fp)
     dec:	1884703a 	and	r2,r3,r2
     df0:	10bfffcc 	andi	r2,r2,65535
     df4:	10001026 	beq	r2,zero,e38 <led_bit_toggle+0xa0>
    {
       led_8_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_CLR, &error_code);
     df8:	00800174 	movhi	r2,5
     dfc:	10953404 	addi	r2,r2,21712
     e00:	11000017 	ldw	r4,0(r2)
     e04:	e0ffff0b 	ldhu	r3,-4(fp)
     e08:	e0bffe84 	addi	r2,fp,-6
     e0c:	180b883a 	mov	r5,r3
     e10:	000d883a 	mov	r6,zero
     e14:	100f883a 	mov	r7,r2
     e18:	0010c300 	call	10c30 <OSFlagPost>
     e1c:	e0bffe0d 	sth	r2,-8(fp)
       alt_uCOSIIErrorHandler(error_code, 0);
     e20:	e0bffe83 	ldbu	r2,-6(fp)
     e24:	10803fcc 	andi	r2,r2,255
     e28:	1009883a 	mov	r4,r2
     e2c:	000b883a 	mov	r5,zero
     e30:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
     e34:	00000f06 	br	e74 <led_bit_toggle+0xdc>
    }
    else
    {
       led_8_val = OSFlagPost(SSSLEDEventFlag, bit, OS_FLAG_SET, &error_code);
     e38:	00800174 	movhi	r2,5
     e3c:	10953404 	addi	r2,r2,21712
     e40:	11000017 	ldw	r4,0(r2)
     e44:	e0ffff0b 	ldhu	r3,-4(fp)
     e48:	e0bffe84 	addi	r2,fp,-6
     e4c:	180b883a 	mov	r5,r3
     e50:	01800044 	movi	r6,1
     e54:	100f883a 	mov	r7,r2
     e58:	0010c300 	call	10c30 <OSFlagPost>
     e5c:	e0bffe0d 	sth	r2,-8(fp)
       alt_uCOSIIErrorHandler(error_code, 0);
     e60:	e0bffe83 	ldbu	r2,-6(fp)
     e64:	10803fcc 	andi	r2,r2,255
     e68:	1009883a 	mov	r4,r2
     e6c:	000b883a 	mov	r5,zero
     e70:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
       IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, led_8_val);
       printf("Value for LED_PIO_BASE set to %d.\n", (INT8U)led_8_val);
    #endif
      
    return;
}
     e74:	e037883a 	mov	sp,fp
     e78:	dfc00117 	ldw	ra,4(sp)
     e7c:	df000017 	ldw	fp,0(sp)
     e80:	dec00204 	addi	sp,sp,8
     e84:	f800283a 	ret

00000e88 <LED7SegLightshowTask>:
 * SSSLEDLightshowSem semaphore controlled in LEDManagementTask.
 * 
 */ 
 
void LED7SegLightshowTask()
{
     e88:	defffd04 	addi	sp,sp,-12
     e8c:	dfc00215 	stw	ra,8(sp)
     e90:	df000115 	stw	fp,4(sp)
     e94:	df000104 	addi	fp,sp,4
   {
    
      /* Wait 50 milliseconds between pattern updates, to make the pattern slow
       * enough for the human eye, and more impotantly, to give up control so
       * MicroC/OS-II can schedule other lower priority tasks. */ 
      OSTimeDlyHMSM(0,0,0,50);
     e98:	0009883a 	mov	r4,zero
     e9c:	000b883a 	mov	r5,zero
     ea0:	000d883a 	mov	r6,zero
     ea4:	01c00c84 	movi	r7,50
     ea8:	00164b80 	call	164b8 <OSTimeDlyHMSM>
      
      /* Check that we still have the SSSLEDLightshowSem semaphore. If we don't,
       * then wait until the LEDManagement task gives it back to us. */
      OSSemPend(SSSLEDLightshowSem, 0, &error_code);
     eac:	00800174 	movhi	r2,5
     eb0:	10953304 	addi	r2,r2,21708
     eb4:	10800017 	ldw	r2,0(r2)
     eb8:	1009883a 	mov	r4,r2
     ebc:	000b883a 	mov	r5,zero
     ec0:	e1bfff04 	addi	r6,fp,-4
     ec4:	0013a340 	call	13a34 <OSSemPend>
      alt_uCOSIIErrorHandler(error_code, 0);
     ec8:	e0bfff03 	ldbu	r2,-4(fp)
     ecc:	10803fcc 	andi	r2,r2,255
     ed0:	1009883a 	mov	r4,r2
     ed4:	000b883a 	mov	r5,zero
     ed8:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
      #if SEVEN_SEG_PIO_BASE
         led_7_seg_val = rand();
         IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, led_7_seg_val);
      #endif
      
      error_code = OSSemPost(SSSLEDLightshowSem);
     edc:	00800174 	movhi	r2,5
     ee0:	10953304 	addi	r2,r2,21708
     ee4:	10800017 	ldw	r2,0(r2)
     ee8:	1009883a 	mov	r4,r2
     eec:	0013ef00 	call	13ef0 <OSSemPost>
     ef0:	e0bfff05 	stb	r2,-4(fp)
      alt_uCOSIIErrorHandler(error_code, 0);
     ef4:	e0bfff03 	ldbu	r2,-4(fp)
     ef8:	10803fcc 	andi	r2,r2,255
     efc:	1009883a 	mov	r4,r2
     f00:	000b883a 	mov	r5,zero
     f04:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
      
   }
     f08:	003fe306 	br	e98 <LED7SegLightshowTask+0x10>

00000f0c <LEDManagementTask>:
 * The task will read the SSSLedCommandQ for an 
 * in-coming message command from the SSSSimpleSocketServerTask. 
 */
 
void LEDManagementTask()
{
     f0c:	defffb04 	addi	sp,sp,-20
     f10:	dfc00415 	stw	ra,16(sp)
     f14:	df000315 	stw	fp,12(sp)
     f18:	df000304 	addi	fp,sp,12
  INT32U led_command; 
  INT16U led_7_seg_val;
  BOOLEAN SSSLEDLightshowActive;
  INT8U error_code;
  
  led_7_seg_val = 0;
     f1c:	e03ffd8d 	sth	zero,-10(fp)
  SSSLEDLightshowActive = OS_TRUE;
     f20:	00800044 	movi	r2,1
     f24:	e0bffd05 	stb	r2,-12(fp)
  
  while(1)
  {
    led_command = (INT32U)OSQPend(SSSLEDCommandQ, 0, &error_code);
     f28:	00800174 	movhi	r2,5
     f2c:	10953204 	addi	r2,r2,21704
     f30:	10c00017 	ldw	r3,0(r2)
     f34:	e0bfff04 	addi	r2,fp,-4
     f38:	1809883a 	mov	r4,r3
     f3c:	000b883a 	mov	r5,zero
     f40:	100d883a 	mov	r6,r2
     f44:	00127140 	call	12714 <OSQPend>
     f48:	e0bffe15 	stw	r2,-8(fp)
   
    alt_uCOSIIErrorHandler(error_code, 0);
     f4c:	e0bfff03 	ldbu	r2,-4(fp)
     f50:	10803fcc 	andi	r2,r2,255
     f54:	1009883a 	mov	r4,r2
     f58:	000b883a 	mov	r5,zero
     f5c:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
        
    switch (led_command) {
     f60:	e0bffe17 	ldw	r2,-8(fp)
     f64:	10bff404 	addi	r2,r2,-48
     f68:	10c00928 	cmpgeui	r3,r2,36
     f6c:	1800621e 	bne	r3,zero,10f8 <LEDManagementTask+0x1ec>
     f70:	1085883a 	add	r2,r2,r2
     f74:	1087883a 	add	r3,r2,r2
     f78:	00800034 	movhi	r2,0
     f7c:	1083e304 	addi	r2,r2,3980
     f80:	1885883a 	add	r2,r3,r2
     f84:	10800017 	ldw	r2,0(r2)
     f88:	1000683a 	jmp	r2
     f8c:	0000101c 	xori	zero,zero,64
     f90:	00001028 	cmpgeui	zero,zero,64
     f94:	00001034 	movhi	zero,64
     f98:	00001040 	call	104 <alt_uCOSIIErrorHandler+0x68>
     f9c:	0000104c 	andi	zero,zero,65
     fa0:	00001058 	cmpnei	zero,zero,65
     fa4:	00001064 	muli	zero,zero,65
     fa8:	00001070 	cmpltui	zero,zero,65
     fac:	000010f8 	rdprs	zero,zero,67
     fb0:	000010f8 	rdprs	zero,zero,67
     fb4:	000010f8 	rdprs	zero,zero,67
     fb8:	000010f8 	rdprs	zero,zero,67
     fbc:	000010f8 	rdprs	zero,zero,67
     fc0:	000010f8 	rdprs	zero,zero,67
     fc4:	000010f8 	rdprs	zero,zero,67
     fc8:	000010f8 	rdprs	zero,zero,67
     fcc:	000010f8 	rdprs	zero,zero,67
     fd0:	000010f8 	rdprs	zero,zero,67
     fd4:	000010f8 	rdprs	zero,zero,67
     fd8:	000010f8 	rdprs	zero,zero,67
     fdc:	000010f8 	rdprs	zero,zero,67
     fe0:	000010f8 	rdprs	zero,zero,67
     fe4:	000010f8 	rdprs	zero,zero,67
     fe8:	000010f8 	rdprs	zero,zero,67
     fec:	000010f8 	rdprs	zero,zero,67
     ff0:	000010f8 	rdprs	zero,zero,67
     ff4:	000010f8 	rdprs	zero,zero,67
     ff8:	000010f8 	rdprs	zero,zero,67
     ffc:	000010f8 	rdprs	zero,zero,67
    1000:	000010f8 	rdprs	zero,zero,67
    1004:	000010f8 	rdprs	zero,zero,67
    1008:	000010f8 	rdprs	zero,zero,67
    100c:	000010f8 	rdprs	zero,zero,67
    1010:	000010f8 	rdprs	zero,zero,67
    1014:	000010f8 	rdprs	zero,zero,67
    1018:	0000107c 	xorhi	zero,zero,65
      case CMD_LEDS_BIT_0_TOGGLE:
         led_bit_toggle(BIT_0);
    101c:	01000044 	movi	r4,1
    1020:	0000d980 	call	d98 <led_bit_toggle>
         break;
    1024:	00003506 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_1_TOGGLE:
         led_bit_toggle(BIT_1);
    1028:	01000084 	movi	r4,2
    102c:	0000d980 	call	d98 <led_bit_toggle>
         break;   
    1030:	00003206 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_2_TOGGLE:
         led_bit_toggle(BIT_2);
    1034:	01000104 	movi	r4,4
    1038:	0000d980 	call	d98 <led_bit_toggle>
         break;
    103c:	00002f06 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_3_TOGGLE:
         led_bit_toggle(BIT_3);
    1040:	01000204 	movi	r4,8
    1044:	0000d980 	call	d98 <led_bit_toggle>
         break;
    1048:	00002c06 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_4_TOGGLE:
         led_bit_toggle(BIT_4);
    104c:	01000404 	movi	r4,16
    1050:	0000d980 	call	d98 <led_bit_toggle>
         break;
    1054:	00002906 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_5_TOGGLE:
         led_bit_toggle(BIT_5);
    1058:	01000804 	movi	r4,32
    105c:	0000d980 	call	d98 <led_bit_toggle>
         break;
    1060:	00002606 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_6_TOGGLE:
         led_bit_toggle(BIT_6);
    1064:	01001004 	movi	r4,64
    1068:	0000d980 	call	d98 <led_bit_toggle>
         break;
    106c:	00002306 	br	10fc <LEDManagementTask+0x1f0>
      case CMD_LEDS_BIT_7_TOGGLE:
         led_bit_toggle(BIT_7);
    1070:	01002004 	movi	r4,128
    1074:	0000d980 	call	d98 <led_bit_toggle>
         break;
    1078:	00002006 	br	10fc <LEDManagementTask+0x1f0>
         /* The SSSLEDLightshowSem semaphore is checked by LED7SegLightshowTask 
          * each time it updates 7 segment LED displays, U8 and U9.  Grab the 
          * semaphore (pend) away from the lightshow task to toggle the lightshow off, 
          * and give up the semaphore (post) to turn the lightshow back on.  
          */
         if (SSSLEDLightshowActive == OS_FALSE)
    107c:	e0bffd03 	ldbu	r2,-12(fp)
    1080:	10000e1e 	bne	r2,zero,10bc <LEDManagementTask+0x1b0>
         {
             error_code = OSSemPost(SSSLEDLightshowSem);
    1084:	00800174 	movhi	r2,5
    1088:	10953304 	addi	r2,r2,21708
    108c:	10800017 	ldw	r2,0(r2)
    1090:	1009883a 	mov	r4,r2
    1094:	0013ef00 	call	13ef0 <OSSemPost>
    1098:	e0bfff05 	stb	r2,-4(fp)
             alt_uCOSIIErrorHandler(error_code, 0);
    109c:	e0bfff03 	ldbu	r2,-4(fp)
    10a0:	10803fcc 	andi	r2,r2,255
    10a4:	1009883a 	mov	r4,r2
    10a8:	000b883a 	mov	r5,zero
    10ac:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
             SSSLEDLightshowActive = OS_TRUE;
    10b0:	00800044 	movi	r2,1
    10b4:	e0bffd05 	stb	r2,-12(fp)
         {
             OSSemPend(SSSLEDLightshowSem, 0, &error_code);
             alt_uCOSIIErrorHandler(error_code, 0); 
             SSSLEDLightshowActive = OS_FALSE;
         }     
         break;
    10b8:	00001006 	br	10fc <LEDManagementTask+0x1f0>
             alt_uCOSIIErrorHandler(error_code, 0);
             SSSLEDLightshowActive = OS_TRUE;
         }
         else
         {
             OSSemPend(SSSLEDLightshowSem, 0, &error_code);
    10bc:	00800174 	movhi	r2,5
    10c0:	10953304 	addi	r2,r2,21708
    10c4:	10c00017 	ldw	r3,0(r2)
    10c8:	e0bfff04 	addi	r2,fp,-4
    10cc:	1809883a 	mov	r4,r3
    10d0:	000b883a 	mov	r5,zero
    10d4:	100d883a 	mov	r6,r2
    10d8:	0013a340 	call	13a34 <OSSemPend>
             alt_uCOSIIErrorHandler(error_code, 0); 
    10dc:	e0bfff03 	ldbu	r2,-4(fp)
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	1009883a 	mov	r4,r2
    10e8:	000b883a 	mov	r5,zero
    10ec:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
             SSSLEDLightshowActive = OS_FALSE;
    10f0:	e03ffd05 	stb	zero,-12(fp)
         }     
         break;
    10f4:	00000106 	br	10fc <LEDManagementTask+0x1f0>
      default:     
        /* Discard unknown LED commands. */
        break;
    10f8:	0001883a 	nop
    } /* switch led_command */
  } /* while(1) */
    10fc:	003f8a06 	br	f28 <LEDManagementTask+0x1c>

00001100 <get_mac_addr>:
* Read the MAC address in a board specific way. Prompt user to enter serial 
* number to generate MAC address if failed to read from flash.
*
*/
int get_mac_addr(NET net, unsigned char mac_addr[6])
{
    1100:	defffb04 	addi	sp,sp,-20
    1104:	dfc00415 	stw	ra,16(sp)
    1108:	df000315 	stw	fp,12(sp)
    110c:	df000304 	addi	fp,sp,12
    1110:	e13ffe15 	stw	r4,-8(fp)
    1114:	e17fff15 	stw	r5,-4(fp)
    error_t error = 0;
    1118:	e03ffd15 	stw	zero,-12(fp)
    
    error = get_board_mac_addr(mac_addr);
    111c:	e13fff17 	ldw	r4,-4(fp)
    1120:	00016600 	call	1660 <get_board_mac_addr>
    1124:	e0bffd15 	stw	r2,-12(fp)
    
    if(error)
    1128:	e0bffd17 	ldw	r2,-12(fp)
    112c:	10000326 	beq	r2,zero,113c <get_mac_addr+0x3c>
    {
        /* Failed read MAC address from flash, prompt user to enter serial 
           number to generate MAC address. */
        error = generate_mac_addr(mac_addr);
    1130:	e13fff17 	ldw	r4,-4(fp)
    1134:	00015200 	call	1520 <generate_mac_addr>
    1138:	e0bffd15 	stw	r2,-12(fp)
    }
    return error;
    113c:	e0bffd17 	ldw	r2,-12(fp)
}
    1140:	e037883a 	mov	sp,fp
    1144:	dfc00117 	ldw	ra,4(sp)
    1148:	df000017 	ldw	fp,0(sp)
    114c:	dec00204 	addi	sp,sp,8
    1150:	f800283a 	ret

00001154 <get_ip_addr>:
int get_ip_addr(alt_iniche_dev *p_dev,
                ip_addr* ipaddr,
                ip_addr* netmask,
                ip_addr* gw,
                int* use_dhcp)
{
    1154:	defffb04 	addi	sp,sp,-20
    1158:	df000415 	stw	fp,16(sp)
    115c:	df000404 	addi	fp,sp,16
    1160:	e13ffc15 	stw	r4,-16(fp)
    1164:	e17ffd15 	stw	r5,-12(fp)
    1168:	e1bffe15 	stw	r6,-8(fp)
    116c:	e1ffff15 	stw	r7,-4(fp)

    IP4_ADDR(*ipaddr, IPADDR0, IPADDR1, IPADDR2, IPADDR3);
    1170:	e0bffd17 	ldw	r2,-12(fp)
    1174:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*gw, GWADDR0, GWADDR1, GWADDR2, GWADDR3);
    1178:	e0bfff17 	ldw	r2,-4(fp)
    117c:	10000015 	stw	zero,0(r2)
    IP4_ADDR(*netmask, MSKADDR0, MSKADDR1, MSKADDR2, MSKADDR3);
    1180:	e0bffe17 	ldw	r2,-8(fp)
    1184:	00c04034 	movhi	r3,256
    1188:	18ffffc4 	addi	r3,r3,-1
    118c:	10c00015 	stw	r3,0(r2)

#ifdef DHCP_CLIENT
    *use_dhcp = 1;
    1190:	e0800117 	ldw	r2,4(fp)
    1194:	00c00044 	movi	r3,1
    1198:	10c00015 	stw	r3,0(r2)
        ip4_addr3(*ipaddr),
        ip4_addr4(*ipaddr));
#endif /* not DHCP_CLIENT */

    /* Non-standard API: return 1 for success */
    return 1;
    119c:	00800044 	movi	r2,1
}
    11a0:	e037883a 	mov	sp,fp
    11a4:	df000017 	ldw	fp,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <get_serial_number>:
*
* Prompt user to enter 9-digit serial number. 
*
*/
alt_u32 get_serial_number (void)
{
    11b0:	defff904 	addi	sp,sp,-28
    11b4:	dfc00615 	stw	ra,24(sp)
    11b8:	df000515 	stw	fp,20(sp)
    11bc:	df000504 	addi	fp,sp,20
    alt_u32 ser_num = 0;
    11c0:	e03ffb15 	stw	zero,-20(fp)
    char serial_number[9];
    int i = 0;
    11c4:	e03ffc15 	stw	zero,-16(fp)
    
    while(!ser_num)
    11c8:	00006506 	br	1360 <get_serial_number+0x1b0>
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
    11cc:	01000174 	movhi	r4,5
    11d0:	212e3704 	addi	r4,r4,-18212
    11d4:	0002b640 	call	2b64 <puts>
        printf("label under your Nios dev. board. The first 3 digits of the \n");
    11d8:	01000174 	movhi	r4,5
    11dc:	212e4704 	addi	r4,r4,-18148
    11e0:	0002b640 	call	2b64 <puts>
        printf("label are ASJ and the serial number follows this.\n -->");
    11e4:	01000174 	movhi	r4,5
    11e8:	212e5704 	addi	r4,r4,-18084
    11ec:	00028d40 	call	28d4 <printf>
        
        for(i=0; i<9; i++)
    11f0:	e03ffc15 	stw	zero,-16(fp)
    11f4:	00002a06 	br	12a0 <get_serial_number+0xf0>
        {
            serial_number[i] = getchar();
    11f8:	00800174 	movhi	r2,5
    11fc:	108bce04 	addi	r2,r2,12088
    1200:	10800017 	ldw	r2,0(r2)
    1204:	10800117 	ldw	r2,4(r2)
    1208:	1009883a 	mov	r4,r2
    120c:	00024a00 	call	24a0 <getc>
    1210:	1007883a 	mov	r3,r2
    1214:	e13ffd04 	addi	r4,fp,-12
    1218:	e0bffc17 	ldw	r2,-16(fp)
    121c:	2085883a 	add	r2,r4,r2
    1220:	10c00005 	stb	r3,0(r2)
            putchar(serial_number[i]);
    1224:	e0fffd04 	addi	r3,fp,-12
    1228:	e0bffc17 	ldw	r2,-16(fp)
    122c:	1885883a 	add	r2,r3,r2
    1230:	10800003 	ldbu	r2,0(r2)
    1234:	10c03fcc 	andi	r3,r2,255
    1238:	18c0201c 	xori	r3,r3,128
    123c:	18ffe004 	addi	r3,r3,-128
    1240:	00800174 	movhi	r2,5
    1244:	108bce04 	addi	r2,r2,12088
    1248:	10800017 	ldw	r2,0(r2)
    124c:	10800217 	ldw	r2,8(r2)
    1250:	1809883a 	mov	r4,r3
    1254:	100b883a 	mov	r5,r2
    1258:	00029cc0 	call	29cc <putc>
            
            /* Handle backspaces.  How civilized. */
            if ((serial_number[i] == 0x08) && (i >= 0)) 
    125c:	e0fffd04 	addi	r3,fp,-12
    1260:	e0bffc17 	ldw	r2,-16(fp)
    1264:	1885883a 	add	r2,r3,r2
    1268:	10800003 	ldbu	r2,0(r2)
    126c:	10803fcc 	andi	r2,r2,255
    1270:	1080201c 	xori	r2,r2,128
    1274:	10bfe004 	addi	r2,r2,-128
    1278:	10800218 	cmpnei	r2,r2,8
    127c:	1000051e 	bne	r2,zero,1294 <get_serial_number+0xe4>
    1280:	e0bffc17 	ldw	r2,-16(fp)
    1284:	10000316 	blt	r2,zero,1294 <get_serial_number+0xe4>
            {
                i--;
    1288:	e0bffc17 	ldw	r2,-16(fp)
    128c:	10bfffc4 	addi	r2,r2,-1
    1290:	e0bffc15 	stw	r2,-16(fp)
    {
        printf("Please enter your 9-digit serial number. This is printed on a \n");
        printf("label under your Nios dev. board. The first 3 digits of the \n");
        printf("label are ASJ and the serial number follows this.\n -->");
        
        for(i=0; i<9; i++)
    1294:	e0bffc17 	ldw	r2,-16(fp)
    1298:	10800044 	addi	r2,r2,1
    129c:	e0bffc15 	stw	r2,-16(fp)
    12a0:	e0bffc17 	ldw	r2,-16(fp)
    12a4:	10800250 	cmplti	r2,r2,9
    12a8:	103fd31e 	bne	r2,zero,11f8 <get_serial_number+0x48>
            if ((serial_number[i] == 0x08) && (i >= 0)) 
            {
                i--;
            }
        }
        printf("\n");
    12ac:	01000284 	movi	r4,10
    12b0:	0002ac40 	call	2ac4 <putchar>
                
        for(i=0; i<9; i++)
    12b4:	e03ffc15 	stw	zero,-16(fp)
    12b8:	00002606 	br	1354 <get_serial_number+0x1a4>
        {
            if (isdigit(serial_number[i]))
    12bc:	00800174 	movhi	r2,5
    12c0:	108bcc04 	addi	r2,r2,12080
    12c4:	10c00017 	ldw	r3,0(r2)
    12c8:	e13ffd04 	addi	r4,fp,-12
    12cc:	e0bffc17 	ldw	r2,-16(fp)
    12d0:	2085883a 	add	r2,r4,r2
    12d4:	10800003 	ldbu	r2,0(r2)
    12d8:	10803fcc 	andi	r2,r2,255
    12dc:	1080201c 	xori	r2,r2,128
    12e0:	10bfe004 	addi	r2,r2,-128
    12e4:	1885883a 	add	r2,r3,r2
    12e8:	10800003 	ldbu	r2,0(r2)
    12ec:	10803fcc 	andi	r2,r2,255
    12f0:	1080010c 	andi	r2,r2,4
    12f4:	10001226 	beq	r2,zero,1340 <get_serial_number+0x190>
            {
                ser_num *= 10;
    12f8:	e0bffb17 	ldw	r2,-20(fp)
    12fc:	108002a4 	muli	r2,r2,10
    1300:	e0bffb15 	stw	r2,-20(fp)
                ser_num += serial_number[i] - '0';
    1304:	e0fffd04 	addi	r3,fp,-12
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	1885883a 	add	r2,r3,r2
    1310:	10800003 	ldbu	r2,0(r2)
    1314:	10c03fcc 	andi	r3,r2,255
    1318:	18c0201c 	xori	r3,r3,128
    131c:	18ffe004 	addi	r3,r3,-128
    1320:	e0bffb17 	ldw	r2,-20(fp)
    1324:	1885883a 	add	r2,r3,r2
    1328:	10bff404 	addi	r2,r2,-48
    132c:	e0bffb15 	stw	r2,-20(fp)
                i--;
            }
        }
        printf("\n");
                
        for(i=0; i<9; i++)
    1330:	e0bffc17 	ldw	r2,-16(fp)
    1334:	10800044 	addi	r2,r2,1
    1338:	e0bffc15 	stw	r2,-16(fp)
    133c:	00000506 	br	1354 <get_serial_number+0x1a4>
                ser_num *= 10;
                ser_num += serial_number[i] - '0';
            }
            else
            {
                ser_num = 0;
    1340:	e03ffb15 	stw	zero,-20(fp)
                printf("Serial number only contains decimal digits and is non-zero\n");
    1344:	01000174 	movhi	r4,5
    1348:	212e6504 	addi	r4,r4,-18028
    134c:	0002b640 	call	2b64 <puts>
                break;
    1350:	00000306 	br	1360 <get_serial_number+0x1b0>
                i--;
            }
        }
        printf("\n");
                
        for(i=0; i<9; i++)
    1354:	e0bffc17 	ldw	r2,-16(fp)
    1358:	10800250 	cmplti	r2,r2,9
    135c:	103fd71e 	bne	r2,zero,12bc <get_serial_number+0x10c>
{
    alt_u32 ser_num = 0;
    char serial_number[9];
    int i = 0;
    
    while(!ser_num)
    1360:	e0bffb17 	ldw	r2,-20(fp)
    1364:	103f9926 	beq	r2,zero,11cc <get_serial_number+0x1c>
                break;
            }
        }
    }
    
    return ser_num;
    1368:	e0bffb17 	ldw	r2,-20(fp)
}
    136c:	e037883a 	mov	sp,fp
    1370:	dfc00117 	ldw	ra,4(sp)
    1374:	df000017 	ldw	fp,0(sp)
    1378:	dec00204 	addi	sp,sp,8
    137c:	f800283a 	ret

00001380 <generate_and_store_mac_addr>:
 * sections. These fail-safe static settings are compatible with previous
 * Nios Ethernet designs, and allow the "factory-safe" design to behave 
 * as expected if the last flash sector is erased.
 */
error_t generate_and_store_mac_addr()
{
    1380:	deffef04 	addi	sp,sp,-68
    1384:	dfc01015 	stw	ra,64(sp)
    1388:	df000f15 	stw	fp,60(sp)
    138c:	df000f04 	addi	fp,sp,60
    error_t error = -1;
    1390:	00bfffc4 	movi	r2,-1
    1394:	e0bff115 	stw	r2,-60(fp)
    alt_u32 ser_num = 0;
    1398:	e03ff215 	stw	zero,-56(fp)
    char flash_content[32];
    alt_flash_fd* flash_handle;
    
    printf("Can't read the MAC address from your board (this probably means\n");
    139c:	01000174 	movhi	r4,5
    13a0:	212e7404 	addi	r4,r4,-17968
    13a4:	0002b640 	call	2b64 <puts>
    printf("that your flash was erased). We will assign you a MAC address and\n");
    13a8:	01000174 	movhi	r4,5
    13ac:	212e8404 	addi	r4,r4,-17904
    13b0:	0002b640 	call	2b64 <puts>
    printf("static network settings\n\n");
    13b4:	01000174 	movhi	r4,5
    13b8:	212e9504 	addi	r4,r4,-17836
    13bc:	0002b640 	call	2b64 <puts>
    
    ser_num = get_serial_number();
    13c0:	00011b00 	call	11b0 <get_serial_number>
    13c4:	e0bff215 	stw	r2,-56(fp)
  
    if (ser_num)
    13c8:	e0bff217 	ldw	r2,-56(fp)
    13cc:	10004e26 	beq	r2,zero,1508 <generate_and_store_mac_addr+0x188>
    {
        /* This says the image is safe */
        flash_content[0] = 0xfe;
    13d0:	00bfff84 	movi	r2,-2
    13d4:	e0bff805 	stb	r2,-32(fp)
        flash_content[1] = 0x5a;
    13d8:	00801684 	movi	r2,90
    13dc:	e0bff845 	stb	r2,-31(fp)
        flash_content[2] = 0x0;
    13e0:	e03ff885 	stb	zero,-30(fp)
        flash_content[3] = 0x0;
    13e4:	e03ff8c5 	stb	zero,-29(fp)
        
        /* This is the Altera Vendor ID */
        flash_content[4] = 0x0;
    13e8:	e03ff905 	stb	zero,-28(fp)
        flash_content[5] = 0x7;
    13ec:	008001c4 	movi	r2,7
    13f0:	e0bff945 	stb	r2,-27(fp)
        flash_content[6] = 0xed;
    13f4:	00bffb44 	movi	r2,-19
    13f8:	e0bff985 	stb	r2,-26(fp)
        
        /* Reserverd Board identifier for erase boards */
        flash_content[7] = 0xFF;
    13fc:	00bfffc4 	movi	r2,-1
    1400:	e0bff9c5 	stb	r2,-25(fp)
        flash_content[8] = (ser_num & 0xff00) >> 8;
    1404:	e0bff217 	ldw	r2,-56(fp)
    1408:	10bfc00c 	andi	r2,r2,65280
    140c:	1004d23a 	srli	r2,r2,8
    1410:	e0bffa05 	stb	r2,-24(fp)
        flash_content[9] = ser_num & 0xff;
    1414:	e0bff217 	ldw	r2,-56(fp)
    1418:	e0bffa45 	stb	r2,-23(fp)
        
        /* Then comes a 16-bit "flags" field */
        flash_content[10] = 0xFF;
    141c:	00bfffc4 	movi	r2,-1
    1420:	e0bffa85 	stb	r2,-22(fp)
        flash_content[11] = 0xFF;
    1424:	00bfffc4 	movi	r2,-1
    1428:	e0bffac5 	stb	r2,-21(fp)
        
        /* Then comes the static IP address */
        flash_content[12] = IPADDR0;
    142c:	e03ffb05 	stb	zero,-20(fp)
        flash_content[13] = IPADDR1;
    1430:	e03ffb45 	stb	zero,-19(fp)
        flash_content[14] = IPADDR2;
    1434:	e03ffb85 	stb	zero,-18(fp)
        flash_content[15] = IPADDR3;
    1438:	e03ffbc5 	stb	zero,-17(fp)
        
        /* Then comes the static nameserver address */
        flash_content[16] = 0xFF;
    143c:	00bfffc4 	movi	r2,-1
    1440:	e0bffc05 	stb	r2,-16(fp)
        flash_content[17] = 0xFF;
    1444:	00bfffc4 	movi	r2,-1
    1448:	e0bffc45 	stb	r2,-15(fp)
        flash_content[18] = 0xFF;
    144c:	00bfffc4 	movi	r2,-1
    1450:	e0bffc85 	stb	r2,-14(fp)
        flash_content[19] = 0xFF;
    1454:	00bfffc4 	movi	r2,-1
    1458:	e0bffcc5 	stb	r2,-13(fp)
        
        /* Then comes the static subnet mask */
        flash_content[20] = MSKADDR0;
    145c:	00bfffc4 	movi	r2,-1
    1460:	e0bffd05 	stb	r2,-12(fp)
        flash_content[21] = MSKADDR1;
    1464:	00bfffc4 	movi	r2,-1
    1468:	e0bffd45 	stb	r2,-11(fp)
        flash_content[22] = MSKADDR2;
    146c:	00bfffc4 	movi	r2,-1
    1470:	e0bffd85 	stb	r2,-10(fp)
        flash_content[23] = MSKADDR3;
    1474:	e03ffdc5 	stb	zero,-9(fp)
        
        /* Then comes the static gateway address */
        flash_content[24] = GWADDR0;
    1478:	e03ffe05 	stb	zero,-8(fp)
        flash_content[25] = GWADDR1;
    147c:	e03ffe45 	stb	zero,-7(fp)
        flash_content[26] = GWADDR2;
    1480:	e03ffe85 	stb	zero,-6(fp)
        flash_content[27] = GWADDR3;
    1484:	e03ffec5 	stb	zero,-5(fp)
        
        /* And finally whether to use DHCP - set all bits to be safe */
        flash_content[28] = 0xFF;
    1488:	00bfffc4 	movi	r2,-1
    148c:	e0bfff05 	stb	r2,-4(fp)
        flash_content[29] = 0xFF;
    1490:	00bfffc4 	movi	r2,-1
    1494:	e0bfff45 	stb	r2,-3(fp)
        flash_content[30] = 0xFF;
    1498:	00bfffc4 	movi	r2,-1
    149c:	e0bfff85 	stb	r2,-2(fp)
        flash_content[31] = 0xFF;
    14a0:	00bfffc4 	movi	r2,-1
    14a4:	e0bfffc5 	stb	r2,-1(fp)
        
        /* Write the MAC address to flash */
        flash_handle = alt_flash_open_dev(EXT_FLASH_NAME);
    14a8:	01000174 	movhi	r4,5
    14ac:	212e9c04 	addi	r4,r4,-17808
    14b0:	000c7580 	call	c758 <alt_flash_open_dev>
    14b4:	e0bff315 	stw	r2,-52(fp)
        if (flash_handle)
    14b8:	e0bff317 	ldw	r2,-52(fp)
    14bc:	10001226 	beq	r2,zero,1508 <generate_and_store_mac_addr+0x188>
        {
            alt_write_flash(flash_handle,
    14c0:	d0a96317 	ldw	r2,-23156(gp)
    14c4:	e0fff317 	ldw	r3,-52(fp)
    14c8:	e0fff415 	stw	r3,-48(fp)
    14cc:	e0bff515 	stw	r2,-44(fp)
                            last_flash_sector_offset,
                            flash_content,
    14d0:	e0bff804 	addi	r2,fp,-32
    14d4:	e0bff615 	stw	r2,-40(fp)
    14d8:	00800804 	movi	r2,32
    14dc:	e0bff715 	stw	r2,-36(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
    14e0:	e0bff417 	ldw	r2,-48(fp)
    14e4:	10800517 	ldw	r2,20(r2)
    14e8:	e13ff417 	ldw	r4,-48(fp)
    14ec:	e17ff517 	ldw	r5,-44(fp)
    14f0:	e1bff617 	ldw	r6,-40(fp)
    14f4:	e1fff717 	ldw	r7,-36(fp)
    14f8:	103ee83a 	callr	r2
                            32);
            alt_flash_close_dev(flash_handle);
    14fc:	e13ff317 	ldw	r4,-52(fp)
    1500:	000c7c00 	call	c7c0 <alt_flash_close_dev>
            error = 0;
    1504:	e03ff115 	stw	zero,-60(fp)
        }
    }

    return error;    
    1508:	e0bff117 	ldw	r2,-60(fp)
}
    150c:	e037883a 	mov	sp,fp
    1510:	dfc00117 	ldw	ra,4(sp)
    1514:	df000017 	ldw	fp,0(sp)
    1518:	dec00204 	addi	sp,sp,8
    151c:	f800283a 	ret

00001520 <generate_mac_addr>:
 * Development Board serial number is 040800017, the corresponding ethernet 
 * number generated will be 00:07:ED:FF:8F:11.
 * 
 */
error_t generate_mac_addr(unsigned char mac_addr[6])
{
    1520:	defff804 	addi	sp,sp,-32
    1524:	dfc00715 	stw	ra,28(sp)
    1528:	df000615 	stw	fp,24(sp)
    152c:	df000604 	addi	fp,sp,24
    1530:	e13fff15 	stw	r4,-4(fp)
    error_t error = -1;
    1534:	00bfffc4 	movi	r2,-1
    1538:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 ser_num = 0;
    153c:	e03ffe15 	stw	zero,-8(fp)
    
    printf("\nCan't read the MAC address from your board. We will assign you\n");
    1540:	01000174 	movhi	r4,5
    1544:	212ea004 	addi	r4,r4,-17792
    1548:	0002b640 	call	2b64 <puts>
    printf("a MAC address.\n\n");
    154c:	01000174 	movhi	r4,5
    1550:	212eb004 	addi	r4,r4,-17728
    1554:	0002b640 	call	2b64 <puts>
    
    ser_num = get_serial_number();
    1558:	00011b00 	call	11b0 <get_serial_number>
    155c:	e0bffe15 	stw	r2,-8(fp)
  
    if (ser_num)
    1560:	e0bffe17 	ldw	r2,-8(fp)
    1564:	10003826 	beq	r2,zero,1648 <generate_mac_addr+0x128>
    {
        /* This is the Altera Vendor ID */
        mac_addr[0] = 0x0;
    1568:	e0bfff17 	ldw	r2,-4(fp)
    156c:	10000005 	stb	zero,0(r2)
        mac_addr[1] = 0x7;
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10800044 	addi	r2,r2,1
    1578:	00c001c4 	movi	r3,7
    157c:	10c00005 	stb	r3,0(r2)
        mac_addr[2] = 0xed;
    1580:	e0bfff17 	ldw	r2,-4(fp)
    1584:	10800084 	addi	r2,r2,2
    1588:	00fffb44 	movi	r3,-19
    158c:	10c00005 	stb	r3,0(r2)
        
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
    1590:	e0bfff17 	ldw	r2,-4(fp)
    1594:	108000c4 	addi	r2,r2,3
    1598:	00ffffc4 	movi	r3,-1
    159c:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = (ser_num & 0xff00) >> 8;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10800104 	addi	r2,r2,4
    15a8:	e0fffe17 	ldw	r3,-8(fp)
    15ac:	18ffc00c 	andi	r3,r3,65280
    15b0:	1806d23a 	srli	r3,r3,8
    15b4:	10c00005 	stb	r3,0(r2)
        mac_addr[5] = ser_num & 0xff;
    15b8:	e0bfff17 	ldw	r2,-4(fp)
    15bc:	10800144 	addi	r2,r2,5
    15c0:	e0fffe17 	ldw	r3,-8(fp)
    15c4:	10c00005 	stb	r3,0(r2)
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
            mac_addr[0],
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    15d0:	11403fcc 	andi	r5,r2,255
            mac_addr[0],
            mac_addr[1],
    15d4:	e0bfff17 	ldw	r2,-4(fp)
    15d8:	10800044 	addi	r2,r2,1
    15dc:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    15e0:	10c03fcc 	andi	r3,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
    15e4:	e0bfff17 	ldw	r2,-4(fp)
    15e8:	10800084 	addi	r2,r2,2
    15ec:	10800003 	ldbu	r2,0(r2)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    15f0:	10803fcc 	andi	r2,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
    15f4:	e13fff17 	ldw	r4,-4(fp)
    15f8:	210000c4 	addi	r4,r4,3
    15fc:	21000003 	ldbu	r4,0(r4)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    1600:	21c03fcc 	andi	r7,r4,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
    1604:	e13fff17 	ldw	r4,-4(fp)
    1608:	21000104 	addi	r4,r4,4
    160c:	21000003 	ldbu	r4,0(r4)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    1610:	21803fcc 	andi	r6,r4,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
    1614:	e13fff17 	ldw	r4,-4(fp)
    1618:	21000144 	addi	r4,r4,5
    161c:	21000003 	ldbu	r4,0(r4)
        /* Reserverd Board identifier */
        mac_addr[3] = 0xFF;
        mac_addr[4] = (ser_num & 0xff00) >> 8;
        mac_addr[5] = ser_num & 0xff;
        
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    1620:	21003fcc 	andi	r4,r4,255
    1624:	d9c00015 	stw	r7,0(sp)
    1628:	d9800115 	stw	r6,4(sp)
    162c:	d9000215 	stw	r4,8(sp)
    1630:	01000174 	movhi	r4,5
    1634:	212eb404 	addi	r4,r4,-17712
    1638:	180d883a 	mov	r6,r3
    163c:	100f883a 	mov	r7,r2
    1640:	00028d40 	call	28d4 <printf>
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
        
        error = 0;
    1644:	e03ffd15 	stw	zero,-12(fp)
    }
  
    return error;    
    1648:	e0bffd17 	ldw	r2,-12(fp)
}
    164c:	e037883a 	mov	sp,fp
    1650:	dfc00117 	ldw	ra,4(sp)
    1654:	df000017 	ldw	fp,0(sp)
    1658:	dec00204 	addi	sp,sp,8
    165c:	f800283a 	ret

00001660 <get_board_mac_addr>:
*
* Read the MAC address in a board specific way
*
*/
error_t get_board_mac_addr(unsigned char mac_addr[6])
{
    1660:	defff804 	addi	sp,sp,-32
    1664:	dfc00715 	stw	ra,28(sp)
    1668:	df000615 	stw	fp,24(sp)
    166c:	df000604 	addi	fp,sp,24
    1670:	e13fff15 	stw	r4,-4(fp)
    error_t error = 0;
    1674:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 signature;
    
    /* Get the flash sector with the MAC address. */
    error = FindLastFlashSectorOffset(&last_flash_sector_offset);
    1678:	d1296304 	addi	r4,gp,-23156
    167c:	00018080 	call	1808 <FindLastFlashSectorOffset>
    1680:	e0bffd15 	stw	r2,-12(fp)
    if (!error)
    1684:	e0bffd17 	ldw	r2,-12(fp)
    1688:	1000041e 	bne	r2,zero,169c <get_board_mac_addr+0x3c>
        last_flash_sector = EXT_FLASH_BASE + last_flash_sector_offset;
    168c:	d0e96317 	ldw	r3,-23156(gp)
    1690:	00810034 	movhi	r2,1024
    1694:	1885883a 	add	r2,r3,r2
    1698:	d0a96415 	stw	r2,-23152(gp)
     * valid network settings are present, indicated by a signature of 0x00005afe at 
     * the first address of the last flash sector.  This hex value is chosen as the 
     * signature since it looks like the english word "SAFE", meaning that it is 
     * safe to use these network address values.  
    */
    if (!error)
    169c:	e0bffd17 	ldw	r2,-12(fp)
    16a0:	1000081e 	bne	r2,zero,16c4 <get_board_mac_addr+0x64>
    {
        signature = IORD_32DIRECT(last_flash_sector, 0);
    16a4:	d0a96417 	ldw	r2,-23152(gp)
    16a8:	10800037 	ldwio	r2,0(r2)
    16ac:	e0bffe15 	stw	r2,-8(fp)
        if (signature != 0x00005afe)
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	1096bfa0 	cmpeqi	r2,r2,23294
    16b8:	1000021e 	bne	r2,zero,16c4 <get_board_mac_addr+0x64>
        {
          error = generate_and_store_mac_addr();
    16bc:	00013800 	call	1380 <generate_and_store_mac_addr>
    16c0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
  
    if (!error)
    16c4:	e0bffd17 	ldw	r2,-12(fp)
    16c8:	1000491e 	bne	r2,zero,17f0 <get_board_mac_addr+0x190>
    {
        mac_addr[0] = IORD_8DIRECT(last_flash_sector, 4);
    16cc:	d0a96417 	ldw	r2,-23152(gp)
    16d0:	10800104 	addi	r2,r2,4
    16d4:	10800023 	ldbuio	r2,0(r2)
    16d8:	10803fcc 	andi	r2,r2,255
    16dc:	1007883a 	mov	r3,r2
    16e0:	e0bfff17 	ldw	r2,-4(fp)
    16e4:	10c00005 	stb	r3,0(r2)
        mac_addr[1] = IORD_8DIRECT(last_flash_sector, 5);
    16e8:	e0bfff17 	ldw	r2,-4(fp)
    16ec:	10800044 	addi	r2,r2,1
    16f0:	d0e96417 	ldw	r3,-23152(gp)
    16f4:	18c00144 	addi	r3,r3,5
    16f8:	18c00023 	ldbuio	r3,0(r3)
    16fc:	18c03fcc 	andi	r3,r3,255
    1700:	10c00005 	stb	r3,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
    1704:	e0bfff17 	ldw	r2,-4(fp)
    1708:	10800084 	addi	r2,r2,2
    170c:	d0e96417 	ldw	r3,-23152(gp)
    1710:	18c00184 	addi	r3,r3,6
    1714:	18c00023 	ldbuio	r3,0(r3)
    1718:	18c03fcc 	andi	r3,r3,255
    171c:	10c00005 	stb	r3,0(r2)
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
    1720:	e0bfff17 	ldw	r2,-4(fp)
    1724:	108000c4 	addi	r2,r2,3
    1728:	d0e96417 	ldw	r3,-23152(gp)
    172c:	18c001c4 	addi	r3,r3,7
    1730:	18c00023 	ldbuio	r3,0(r3)
    1734:	18c03fcc 	andi	r3,r3,255
    1738:	10c00005 	stb	r3,0(r2)
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
    173c:	e0bfff17 	ldw	r2,-4(fp)
    1740:	10800104 	addi	r2,r2,4
    1744:	d0e96417 	ldw	r3,-23152(gp)
    1748:	18c00204 	addi	r3,r3,8
    174c:	18c00023 	ldbuio	r3,0(r3)
    1750:	18c03fcc 	andi	r3,r3,255
    1754:	10c00005 	stb	r3,0(r2)
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    1758:	e0bfff17 	ldw	r2,-4(fp)
    175c:	10800144 	addi	r2,r2,5
    1760:	d0e96417 	ldw	r3,-23152(gp)
    1764:	18c00244 	addi	r3,r3,9
    1768:	18c00023 	ldbuio	r3,0(r3)
    176c:	18c03fcc 	andi	r3,r3,255
    1770:	10c00005 	stb	r3,0(r2)
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
            mac_addr[0],
    1774:	e0bfff17 	ldw	r2,-4(fp)
    1778:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    177c:	11403fcc 	andi	r5,r2,255
            mac_addr[0],
            mac_addr[1],
    1780:	e0bfff17 	ldw	r2,-4(fp)
    1784:	10800044 	addi	r2,r2,1
    1788:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    178c:	10c03fcc 	andi	r3,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
    1790:	e0bfff17 	ldw	r2,-4(fp)
    1794:	10800084 	addi	r2,r2,2
    1798:	10800003 	ldbu	r2,0(r2)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    179c:	10803fcc 	andi	r2,r2,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
    17a0:	e13fff17 	ldw	r4,-4(fp)
    17a4:	210000c4 	addi	r4,r4,3
    17a8:	21000003 	ldbu	r4,0(r4)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    17ac:	21c03fcc 	andi	r7,r4,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
    17b0:	e13fff17 	ldw	r4,-4(fp)
    17b4:	21000104 	addi	r4,r4,4
    17b8:	21000003 	ldbu	r4,0(r4)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    17bc:	21803fcc 	andi	r6,r4,255
            mac_addr[0],
            mac_addr[1],
            mac_addr[2],
            mac_addr[3],
            mac_addr[4],
            mac_addr[5]);
    17c0:	e13fff17 	ldw	r4,-4(fp)
    17c4:	21000144 	addi	r4,r4,5
    17c8:	21000003 	ldbu	r4,0(r4)
        mac_addr[2] = IORD_8DIRECT(last_flash_sector, 6);
        mac_addr[3] = IORD_8DIRECT(last_flash_sector, 7);
        mac_addr[4] = IORD_8DIRECT(last_flash_sector, 8);
        mac_addr[5] = IORD_8DIRECT(last_flash_sector, 9);
    
        printf("Your Ethernet MAC address is %02x:%02x:%02x:%02x:%02x:%02x\n", 
    17cc:	21003fcc 	andi	r4,r4,255
    17d0:	d9c00015 	stw	r7,0(sp)
    17d4:	d9800115 	stw	r6,4(sp)
    17d8:	d9000215 	stw	r4,8(sp)
    17dc:	01000174 	movhi	r4,5
    17e0:	212eb404 	addi	r4,r4,-17712
    17e4:	180d883a 	mov	r6,r3
    17e8:	100f883a 	mov	r7,r2
    17ec:	00028d40 	call	28d4 <printf>
            mac_addr[4],
            mac_addr[5]);
    
    }
    
    return error;
    17f0:	e0bffd17 	ldw	r2,-12(fp)
}
    17f4:	e037883a 	mov	sp,fp
    17f8:	dfc00117 	ldw	ra,4(sp)
    17fc:	df000017 	ldw	fp,0(sp)
    1800:	dec00204 	addi	sp,sp,8
    1804:	f800283a 	ret

00001808 <FindLastFlashSectorOffset>:
 * in pLastFlashSectorOffset.
 */

int FindLastFlashSectorOffset(
    alt_u32                     *pLastFlashSectorOffset)
{
    1808:	defff304 	addi	sp,sp,-52
    180c:	dfc00c15 	stw	ra,48(sp)
    1810:	df000b15 	stw	fp,44(sp)
    1814:	df000b04 	addi	fp,sp,44
    1818:	e13fff15 	stw	r4,-4(fp)
    flash_region                *regions;
    int                         numRegions;
    flash_region                *pLastRegion;
    int                         lastFlashSectorOffset;
    int                         n;
    int                         error = 0;
    181c:	e03ff815 	stw	zero,-32(fp)

    /* Open the flash device. */
    fd = alt_flash_open_dev(EXT_FLASH_NAME);
    1820:	01000174 	movhi	r4,5
    1824:	212e9c04 	addi	r4,r4,-17808
    1828:	000c7580 	call	c758 <alt_flash_open_dev>
    182c:	e0bff915 	stw	r2,-28(fp)
    if (fd <= 0)
    1830:	e0bff917 	ldw	r2,-28(fp)
    1834:	1000021e 	bne	r2,zero,1840 <FindLastFlashSectorOffset+0x38>
        error = -1;
    1838:	00bfffc4 	movi	r2,-1
    183c:	e0bff815 	stw	r2,-32(fp)

    /* Get the flash info. */
    if (!error)
    1840:	e0bff817 	ldw	r2,-32(fp)
    1844:	10000d1e 	bne	r2,zero,187c <FindLastFlashSectorOffset+0x74>
    1848:	e0bff917 	ldw	r2,-28(fp)
    184c:	e0bffa15 	stw	r2,-24(fp)
        error = alt_get_flash_info(fd, &regions, &numRegions);
    1850:	e0bffd04 	addi	r2,fp,-12
    1854:	e0bffb15 	stw	r2,-20(fp)
    1858:	e0bffe04 	addi	r2,fp,-8
    185c:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
    1860:	e0bffa17 	ldw	r2,-24(fp)
    1864:	10800717 	ldw	r2,28(r2)
    1868:	e13ffa17 	ldw	r4,-24(fp)
    186c:	e17ffb17 	ldw	r5,-20(fp)
    1870:	e1bffc17 	ldw	r6,-16(fp)
    1874:	103ee83a 	callr	r2
    1878:	e0bff815 	stw	r2,-32(fp)

    /* Find the last flash sector. */
    if (!error)
    187c:	e0bff817 	ldw	r2,-32(fp)
    1880:	1000211e 	bne	r2,zero,1908 <FindLastFlashSectorOffset+0x100>
    {
        pLastRegion = &(regions[0]);
    1884:	e0bffd17 	ldw	r2,-12(fp)
    1888:	e0bff515 	stw	r2,-44(fp)
        for (n = 1; n < numRegions; n++)
    188c:	00800044 	movi	r2,1
    1890:	e0bff715 	stw	r2,-36(fp)
    1894:	00001006 	br	18d8 <FindLastFlashSectorOffset+0xd0>
        {
            if (regions[n].offset > pLastRegion->offset)
    1898:	e0fffd17 	ldw	r3,-12(fp)
    189c:	e0bff717 	ldw	r2,-36(fp)
    18a0:	1004913a 	slli	r2,r2,4
    18a4:	1885883a 	add	r2,r3,r2
    18a8:	10800017 	ldw	r2,0(r2)
    18ac:	e0fff517 	ldw	r3,-44(fp)
    18b0:	18c00017 	ldw	r3,0(r3)
    18b4:	1880050e 	bge	r3,r2,18cc <FindLastFlashSectorOffset+0xc4>
                pLastRegion = &(regions[n]);
    18b8:	e0fffd17 	ldw	r3,-12(fp)
    18bc:	e0bff717 	ldw	r2,-36(fp)
    18c0:	1004913a 	slli	r2,r2,4
    18c4:	1885883a 	add	r2,r3,r2
    18c8:	e0bff515 	stw	r2,-44(fp)

    /* Find the last flash sector. */
    if (!error)
    {
        pLastRegion = &(regions[0]);
        for (n = 1; n < numRegions; n++)
    18cc:	e0bff717 	ldw	r2,-36(fp)
    18d0:	10800044 	addi	r2,r2,1
    18d4:	e0bff715 	stw	r2,-36(fp)
    18d8:	e0bffe17 	ldw	r2,-8(fp)
    18dc:	e0fff717 	ldw	r3,-36(fp)
    18e0:	18bfed16 	blt	r3,r2,1898 <FindLastFlashSectorOffset+0x90>
        {
            if (regions[n].offset > pLastRegion->offset)
                pLastRegion = &(regions[n]);
        }
        lastFlashSectorOffset =   pLastRegion->offset
    18e4:	e0bff517 	ldw	r2,-44(fp)
    18e8:	10c00017 	ldw	r3,0(r2)
                                + pLastRegion->region_size
    18ec:	e0bff517 	ldw	r2,-44(fp)
    18f0:	10800117 	ldw	r2,4(r2)
    18f4:	1887883a 	add	r3,r3,r2
                                - pLastRegion->block_size;
    18f8:	e0bff517 	ldw	r2,-44(fp)
    18fc:	10800317 	ldw	r2,12(r2)
        for (n = 1; n < numRegions; n++)
        {
            if (regions[n].offset > pLastRegion->offset)
                pLastRegion = &(regions[n]);
        }
        lastFlashSectorOffset =   pLastRegion->offset
    1900:	1885c83a 	sub	r2,r3,r2
    1904:	e0bff615 	stw	r2,-40(fp)
                                + pLastRegion->region_size
                                - pLastRegion->block_size;
    }

    /* Return results. */
    if (!error)
    1908:	e0bff817 	ldw	r2,-32(fp)
    190c:	1000031e 	bne	r2,zero,191c <FindLastFlashSectorOffset+0x114>
        *pLastFlashSectorOffset = lastFlashSectorOffset;
    1910:	e0fff617 	ldw	r3,-40(fp)
    1914:	e0bfff17 	ldw	r2,-4(fp)
    1918:	10c00015 	stw	r3,0(r2)

    return (error);
    191c:	e0bff817 	ldw	r2,-32(fp)
}
    1920:	e037883a 	mov	sp,fp
    1924:	dfc00117 	ldw	ra,4(sp)
    1928:	df000017 	ldw	fp,0(sp)
    192c:	dec00204 	addi	sp,sp,8
    1930:	f800283a 	ret

00001934 <SSSCreateOSDataStructs>:
/*
 * Create our MicroC/OS-II resources. All of the resources beginning with 
 * "SSS" are declared in this file, and created in this function.
 */
void SSSCreateOSDataStructs(void)
{
    1934:	defffd04 	addi	sp,sp,-12
    1938:	dfc00215 	stw	ra,8(sp)
    193c:	df000115 	stw	fp,4(sp)
    1940:	df000104 	addi	fp,sp,4
  /*
  * Create the resource for our MicroC/OS-II Queue for sending commands 
  * received on the TCP/IP socket from the SSSSimpleSocketServerTask()
  * to the LEDManagementTask().
  */
  SSSLEDCommandQ = OSQCreate(&SSSLEDCommandQTbl[0], SSS_LED_COMMAND_Q_SIZE);
    1944:	010001b4 	movhi	r4,6
    1948:	21275804 	addi	r4,r4,-25248
    194c:	01400784 	movi	r5,30
    1950:	00120340 	call	12034 <OSQCreate>
    1954:	d0a96615 	stw	r2,-23144(gp)
  if (!SSSLEDCommandQ)
    1958:	d0a96617 	ldw	r2,-23144(gp)
    195c:	1000041e 	bne	r2,zero,1970 <SSSCreateOSDataStructs+0x3c>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
    1960:	01003fc4 	movi	r4,255
    1964:	01400174 	movhi	r5,5
    1968:	296ec304 	addi	r5,r5,-17652
    196c:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
  * toggle the lightshow off, and gives up the semaphore to turn the lightshow
  * back on.  The LEDTask does this in response to the CMD_LEDS_LIGHTSHOW
  * command sent from the SSSSimpleSocketServerTask when the user sends the 
  * toggle lightshow command over the TCPIP socket.
  */
  SSSLEDLightshowSem = OSSemCreate(1);
    1970:	01000044 	movi	r4,1
    1974:	00135e80 	call	135e8 <OSSemCreate>
    1978:	d0a96715 	stw	r2,-23140(gp)
  if (!SSSLEDLightshowSem)
    197c:	d0a96717 	ldw	r2,-23140(gp)
    1980:	1000041e 	bne	r2,zero,1994 <SSSCreateOSDataStructs+0x60>
  {
     alt_uCOSIIErrorHandler(EXPANDED_DIAGNOSIS_CODE, 
    1984:	01003fc4 	movi	r4,255
    1988:	01400174 	movhi	r5,5
    198c:	296ecc04 	addi	r5,r5,-17616
    1990:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
  
 /*
  * Create our MicroC/OS-II LED Event Flag.  Each flag corresponds to one of
  * the LEDs on the Nios Development board, D0 - D7. 
  */   
  SSSLEDEventFlag = OSFlagCreate(0, &error_code);
    1994:	0009883a 	mov	r4,zero
    1998:	e17fff04 	addi	r5,fp,-4
    199c:	000fb8c0 	call	fb8c <OSFlagCreate>
    19a0:	d0a96815 	stw	r2,-23136(gp)
  if (!SSSLEDEventFlag)
    19a4:	d0a96817 	ldw	r2,-23136(gp)
    19a8:	1000051e 	bne	r2,zero,19c0 <SSSCreateOSDataStructs+0x8c>
  {
     alt_uCOSIIErrorHandler(error_code, 0);
    19ac:	e0bfff03 	ldbu	r2,-4(fp)
    19b0:	10803fcc 	andi	r2,r2,255
    19b4:	1009883a 	mov	r4,r2
    19b8:	000b883a 	mov	r5,zero
    19bc:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
  }
}
    19c0:	e037883a 	mov	sp,fp
    19c4:	dfc00117 	ldw	ra,4(sp)
    19c8:	df000017 	ldw	fp,0(sp)
    19cc:	dec00204 	addi	sp,sp,8
    19d0:	f800283a 	ret

000019d4 <SSSCreateTasks>:
/* This function creates tasks used in this example which do not use sockets.
 * Tasks which use Interniche sockets must be created with TK_NEWTASK.
 */
 
void SSSCreateTasks(void)
{
    19d4:	defff804 	addi	sp,sp,-32
    19d8:	dfc00715 	stw	ra,28(sp)
    19dc:	df000615 	stw	fp,24(sp)
    19e0:	df000604 	addi	fp,sp,24
   INT8U error_code;
  
   error_code = OSTaskCreateExt(LED7SegLightshowTask,
    19e4:	00800484 	movi	r2,18
    19e8:	d8800015 	stw	r2,0(sp)
    19ec:	00800174 	movhi	r2,5
    19f0:	109f5804 	addi	r2,r2,32096
    19f4:	d8800115 	stw	r2,4(sp)
    19f8:	00820004 	movi	r2,2048
    19fc:	d8800215 	stw	r2,8(sp)
    1a00:	d8000315 	stw	zero,12(sp)
    1a04:	d8000415 	stw	zero,16(sp)
    1a08:	01000034 	movhi	r4,0
    1a0c:	2103a204 	addi	r4,r4,3720
    1a10:	000b883a 	mov	r5,zero
    1a14:	018001b4 	movhi	r6,6
    1a18:	31a75704 	addi	r6,r6,-25252
    1a1c:	01c00484 	movi	r7,18
    1a20:	0014b380 	call	14b38 <OSTaskCreateExt>
    1a24:	e0bfff05 	stb	r2,-4(fp)
                             LED7SegLightshowTaskStk,
                             TASK_STACKSIZE,
                             NULL,
                             0);
   
   alt_uCOSIIErrorHandler(error_code, 0);
    1a28:	e0bfff03 	ldbu	r2,-4(fp)
    1a2c:	1009883a 	mov	r4,r2
    1a30:	000b883a 	mov	r5,zero
    1a34:	000009c0 	call	9c <alt_uCOSIIErrorHandler>
  
   error_code = OSTaskCreateExt(LEDManagementTask,
    1a38:	008001c4 	movi	r2,7
    1a3c:	d8800015 	stw	r2,0(sp)
    1a40:	008001b4 	movhi	r2,6
    1a44:	10a77604 	addi	r2,r2,-25128
    1a48:	d8800115 	stw	r2,4(sp)
    1a4c:	00820004 	movi	r2,2048
    1a50:	d8800215 	stw	r2,8(sp)
    1a54:	d8000315 	stw	zero,12(sp)
    1a58:	d8000415 	stw	zero,16(sp)
    1a5c:	01000034 	movhi	r4,0
    1a60:	2103c304 	addi	r4,r4,3852
    1a64:	000b883a 	mov	r5,zero
    1a68:	018001b4 	movhi	r6,6
    1a6c:	31af7504 	addi	r6,r6,-16940
    1a70:	01c001c4 	movi	r7,7
    1a74:	0014b380 	call	14b38 <OSTaskCreateExt>
    1a78:	e0bfff05 	stb	r2,-4(fp)
                              LEDManagementTaskStk,
                              TASK_STACKSIZE,
                              NULL,
                              0);

   alt_uCOSIIErrorHandler(error_code, 0);
    1a7c:	e0bfff03 	ldbu	r2,-4(fp)
    1a80:	1009883a 	mov	r4,r2
    1a84:	000b883a 	mov	r5,zero
    1a88:	000009c0 	call	9c <alt_uCOSIIErrorHandler>

}
    1a8c:	e037883a 	mov	sp,fp
    1a90:	dfc00117 	ldw	ra,4(sp)
    1a94:	df000017 	ldw	fp,0(sp)
    1a98:	dec00204 	addi	sp,sp,8
    1a9c:	f800283a 	ret

00001aa0 <sss_reset_connection>:
 * to a reliable initial state. Note that we set our socket (FD) number to
 * -1 to easily determine whether the connection is in a "reset, ready to go" 
 * state.
 */
void sss_reset_connection(SSSConn* conn)
{
    1aa0:	defffd04 	addi	sp,sp,-12
    1aa4:	dfc00215 	stw	ra,8(sp)
    1aa8:	df000115 	stw	fp,4(sp)
    1aac:	df000104 	addi	fp,sp,4
    1ab0:	e13fff15 	stw	r4,-4(fp)
  memset(conn, 0, sizeof(SSSConn));
    1ab4:	e13fff17 	ldw	r4,-4(fp)
    1ab8:	000b883a 	mov	r5,zero
    1abc:	01817c04 	movi	r6,1520
    1ac0:	00027480 	call	2748 <memset>

  conn->fd = -1;
    1ac4:	e0bfff17 	ldw	r2,-4(fp)
    1ac8:	00ffffc4 	movi	r3,-1
    1acc:	10c00115 	stw	r3,4(r2)
  conn->state = READY;
    1ad0:	e0bfff17 	ldw	r2,-4(fp)
    1ad4:	10000015 	stw	zero,0(r2)
  conn->rx_wr_pos = conn->rx_buffer;
    1ad8:	e0bfff17 	ldw	r2,-4(fp)
    1adc:	10c00304 	addi	r3,r2,12
    1ae0:	e0bfff17 	ldw	r2,-4(fp)
    1ae4:	10c17b15 	stw	r3,1516(r2)
  conn->rx_rd_pos = conn->rx_buffer;
    1ae8:	e0bfff17 	ldw	r2,-4(fp)
    1aec:	10c00304 	addi	r3,r2,12
    1af0:	e0bfff17 	ldw	r2,-4(fp)
    1af4:	10c17a15 	stw	r3,1512(r2)
  return;
    1af8:	0001883a 	nop
}
    1afc:	e037883a 	mov	sp,fp
    1b00:	dfc00117 	ldw	ra,4(sp)
    1b04:	df000017 	ldw	fp,0(sp)
    1b08:	dec00204 	addi	sp,sp,8
    1b0c:	f800283a 	ret

00001b10 <sss_send_menu>:
 * sss_send_menu()
 * 
 * This routine will transmit the menu out to the telent client.
 */
void sss_send_menu(SSSConn* conn)
{
    1b10:	defe8504 	addi	sp,sp,-1516
    1b14:	dfc17a15 	stw	ra,1512(sp)
    1b18:	df017915 	stw	fp,1508(sp)
    1b1c:	df017904 	addi	fp,sp,1508
    1b20:	e13fff15 	stw	r4,-4(fp)
  alt_u8  tx_buf[SSS_TX_BUF_SIZE];
  alt_u8 *tx_wr_pos = tx_buf;
    1b24:	e0be8804 	addi	r2,fp,-1504
    1b28:	e0be8715 	stw	r2,-1508(fp)

  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
    1b2c:	e0fe8717 	ldw	r3,-1508(fp)
    1b30:	00800174 	movhi	r2,5
    1b34:	10aed604 	addi	r2,r2,-17576
    1b38:	1809883a 	mov	r4,r3
    1b3c:	1007883a 	mov	r3,r2
    1b40:	00800904 	movi	r2,36
    1b44:	180b883a 	mov	r5,r3
    1b48:	100d883a 	mov	r6,r2
    1b4c:	00025280 	call	2528 <memcpy>
    1b50:	e0be8717 	ldw	r2,-1508(fp)
    1b54:	108008c4 	addi	r2,r2,35
    1b58:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Nios II Simple Socket Server Menu\n\r");
    1b5c:	e0fe8717 	ldw	r3,-1508(fp)
    1b60:	00800174 	movhi	r2,5
    1b64:	10aedf04 	addi	r2,r2,-17540
    1b68:	1809883a 	mov	r4,r3
    1b6c:	1007883a 	mov	r3,r2
    1b70:	00800904 	movi	r2,36
    1b74:	180b883a 	mov	r5,r3
    1b78:	100d883a 	mov	r6,r2
    1b7c:	00025280 	call	2528 <memcpy>
    1b80:	e0be8717 	ldw	r2,-1508(fp)
    1b84:	108008c4 	addi	r2,r2,35
    1b88:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
    1b8c:	e0fe8717 	ldw	r3,-1508(fp)
    1b90:	00800174 	movhi	r2,5
    1b94:	10aed604 	addi	r2,r2,-17576
    1b98:	1809883a 	mov	r4,r3
    1b9c:	1007883a 	mov	r3,r2
    1ba0:	00800904 	movi	r2,36
    1ba4:	180b883a 	mov	r5,r3
    1ba8:	100d883a 	mov	r6,r2
    1bac:	00025280 	call	2528 <memcpy>
    1bb0:	e0be8717 	ldw	r2,-1508(fp)
    1bb4:	108008c4 	addi	r2,r2,35
    1bb8:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"0-7: Toggle board LEDs D0 - D7\n\r");
    1bbc:	e0fe8717 	ldw	r3,-1508(fp)
    1bc0:	00800174 	movhi	r2,5
    1bc4:	10aee804 	addi	r2,r2,-17504
    1bc8:	1809883a 	mov	r4,r3
    1bcc:	1007883a 	mov	r3,r2
    1bd0:	00800844 	movi	r2,33
    1bd4:	180b883a 	mov	r5,r3
    1bd8:	100d883a 	mov	r6,r2
    1bdc:	00025280 	call	2528 <memcpy>
    1be0:	e0be8717 	ldw	r2,-1508(fp)
    1be4:	10800804 	addi	r2,r2,32
    1be8:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"S: 7-Segment LED Light Show\n\r");
    1bec:	e0fe8717 	ldw	r3,-1508(fp)
    1bf0:	00800174 	movhi	r2,5
    1bf4:	10aef104 	addi	r2,r2,-17468
    1bf8:	1809883a 	mov	r4,r3
    1bfc:	1007883a 	mov	r3,r2
    1c00:	00800784 	movi	r2,30
    1c04:	180b883a 	mov	r5,r3
    1c08:	100d883a 	mov	r6,r2
    1c0c:	00025280 	call	2528 <memcpy>
    1c10:	e0be8717 	ldw	r2,-1508(fp)
    1c14:	10800744 	addi	r2,r2,29
    1c18:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Q: Terminate session\n\r");
    1c1c:	e0fe8717 	ldw	r3,-1508(fp)
    1c20:	00800174 	movhi	r2,5
    1c24:	10aef904 	addi	r2,r2,-17436
    1c28:	1809883a 	mov	r4,r3
    1c2c:	1007883a 	mov	r3,r2
    1c30:	008005c4 	movi	r2,23
    1c34:	180b883a 	mov	r5,r3
    1c38:	100d883a 	mov	r6,r2
    1c3c:	00025280 	call	2528 <memcpy>
    1c40:	e0be8717 	ldw	r2,-1508(fp)
    1c44:	10800584 	addi	r2,r2,22
    1c48:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"=================================\n\r");
    1c4c:	e0fe8717 	ldw	r3,-1508(fp)
    1c50:	00800174 	movhi	r2,5
    1c54:	10aed604 	addi	r2,r2,-17576
    1c58:	1809883a 	mov	r4,r3
    1c5c:	1007883a 	mov	r3,r2
    1c60:	00800904 	movi	r2,36
    1c64:	180b883a 	mov	r5,r3
    1c68:	100d883a 	mov	r6,r2
    1c6c:	00025280 	call	2528 <memcpy>
    1c70:	e0be8717 	ldw	r2,-1508(fp)
    1c74:	108008c4 	addi	r2,r2,35
    1c78:	e0be8715 	stw	r2,-1508(fp)
  tx_wr_pos += sprintf(tx_wr_pos,"Enter your choice & press return:\n\r");
    1c7c:	e0fe8717 	ldw	r3,-1508(fp)
    1c80:	00800174 	movhi	r2,5
    1c84:	10aeff04 	addi	r2,r2,-17412
    1c88:	1809883a 	mov	r4,r3
    1c8c:	1007883a 	mov	r3,r2
    1c90:	00800904 	movi	r2,36
    1c94:	180b883a 	mov	r5,r3
    1c98:	100d883a 	mov	r6,r2
    1c9c:	00025280 	call	2528 <memcpy>
    1ca0:	e0be8717 	ldw	r2,-1508(fp)
    1ca4:	108008c4 	addi	r2,r2,35
    1ca8:	e0be8715 	stw	r2,-1508(fp)

  send(conn->fd, tx_buf, tx_wr_pos - tx_buf, 0);
    1cac:	e0bfff17 	ldw	r2,-4(fp)
    1cb0:	11000117 	ldw	r4,4(r2)
    1cb4:	e0fe8717 	ldw	r3,-1508(fp)
    1cb8:	e0be8804 	addi	r2,fp,-1504
    1cbc:	1885c83a 	sub	r2,r3,r2
    1cc0:	e0fe8804 	addi	r3,fp,-1504
    1cc4:	180b883a 	mov	r5,r3
    1cc8:	100d883a 	mov	r6,r2
    1ccc:	000f883a 	mov	r7,zero
    1cd0:	002f1c00 	call	2f1c0 <t_send>
  
  return;
}
    1cd4:	e037883a 	mov	sp,fp
    1cd8:	dfc00117 	ldw	ra,4(sp)
    1cdc:	df000017 	ldw	fp,0(sp)
    1ce0:	dec00204 	addi	sp,sp,8
    1ce4:	f800283a 	ret

00001ce8 <sss_handle_accept>:
 * reject the incoming request by immediately closing the new socket.
 * 
 * We'll also print out the client's IP address.
 */
void sss_handle_accept(int listen_socket, SSSConn* conn)
{
    1ce8:	defff604 	addi	sp,sp,-40
    1cec:	dfc00915 	stw	ra,36(sp)
    1cf0:	df000815 	stw	fp,32(sp)
    1cf4:	df000804 	addi	fp,sp,32
    1cf8:	e13ffe15 	stw	r4,-8(fp)
    1cfc:	e17fff15 	stw	r5,-4(fp)
  int                 socket, len;
  struct sockaddr_in  incoming_addr;

  len = sizeof(incoming_addr);
    1d00:	00800404 	movi	r2,16
    1d04:	e0bff915 	stw	r2,-28(fp)

  if ((conn)->fd == -1)
    1d08:	e0bfff17 	ldw	r2,-4(fp)
    1d0c:	10800117 	ldw	r2,4(r2)
    1d10:	10bfffd8 	cmpnei	r2,r2,-1
    1d14:	10001a1e 	bne	r2,zero,1d80 <sss_handle_accept+0x98>
  {
     if((socket=accept(listen_socket,(struct sockaddr*)&incoming_addr,&len))<0)
    1d18:	e0fffa04 	addi	r3,fp,-24
    1d1c:	e0bff904 	addi	r2,fp,-28
    1d20:	e13ffe17 	ldw	r4,-8(fp)
    1d24:	180b883a 	mov	r5,r3
    1d28:	100d883a 	mov	r6,r2
    1d2c:	002542c0 	call	2542c <bsd_accept>
    1d30:	e0bff815 	stw	r2,-32(fp)
    1d34:	e0bff817 	ldw	r2,-32(fp)
    1d38:	1000050e 	bge	r2,zero,1d50 <sss_handle_accept+0x68>
     {
         alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,
    1d3c:	01003fc4 	movi	r4,255
    1d40:	01400174 	movhi	r5,5
    1d44:	296f0804 	addi	r5,r5,-17376
    1d48:	00006e40 	call	6e4 <alt_NetworkErrorHandler>
    1d4c:	00001206 	br	1d98 <sss_handle_accept+0xb0>
                                 "[sss_handle_accept] accept failed");
     }
     else
     {
        (conn)->fd = socket;
    1d50:	e0bfff17 	ldw	r2,-4(fp)
    1d54:	e0fff817 	ldw	r3,-32(fp)
    1d58:	10c00115 	stw	r3,4(r2)
        sss_send_menu(conn);
    1d5c:	e13fff17 	ldw	r4,-4(fp)
    1d60:	0001b100 	call	1b10 <sss_send_menu>
        printf("[sss_handle_accept] accepted connection request from %s\n",
    1d64:	e13ffb17 	ldw	r4,-20(fp)
    1d68:	0025aa00 	call	25aa0 <bsd_inet_ntoa>
    1d6c:	01000174 	movhi	r4,5
    1d70:	212f1104 	addi	r4,r4,-17340
    1d74:	100b883a 	mov	r5,r2
    1d78:	00028d40 	call	28d4 <printf>
    1d7c:	00000606 	br	1d98 <sss_handle_accept+0xb0>
               inet_ntoa(incoming_addr.sin_addr));
     }
  }
  else
  {
    printf("[sss_handle_accept] rejected connection request from %s\n",
    1d80:	e13ffb17 	ldw	r4,-20(fp)
    1d84:	0025aa00 	call	25aa0 <bsd_inet_ntoa>
    1d88:	01000174 	movhi	r4,5
    1d8c:	212f2004 	addi	r4,r4,-17280
    1d90:	100b883a 	mov	r5,r2
    1d94:	00028d40 	call	28d4 <printf>
           inet_ntoa(incoming_addr.sin_addr));
  }

  return;
}
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <sss_exec_command>:
 * If the user wishes to quit, we set the "close" member of our SSSConn
 * struct, which will be looked at back in sss_handle_receive() when it 
 * comes time to see whether to close the connection or not.
 */
void sss_exec_command(SSSConn* conn)
{
    1dac:	defe8204 	addi	sp,sp,-1528
    1db0:	dfc17d15 	stw	ra,1524(sp)
    1db4:	df017c15 	stw	fp,1520(sp)
    1db8:	df017c04 	addi	fp,sp,1520
    1dbc:	e13fff15 	stw	r4,-4(fp)
   int bytes_to_process = conn->rx_wr_pos - conn->rx_rd_pos;
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	10817b17 	ldw	r2,1516(r2)
    1dc8:	1007883a 	mov	r3,r2
    1dcc:	e0bfff17 	ldw	r2,-4(fp)
    1dd0:	10817a17 	ldw	r2,1512(r2)
    1dd4:	1885c83a 	sub	r2,r3,r2
    1dd8:	e0be8415 	stw	r2,-1520(fp)
   INT8U tx_buf[SSS_TX_BUF_SIZE];
   INT8U *tx_wr_pos = tx_buf;
    1ddc:	e0be8744 	addi	r2,fp,-1507
    1de0:	e0be8515 	stw	r2,-1516(fp)
    * SSSSimpleSocketServerTask, since the LEDManagementTask does not 
    * have access to the stack of the SSSSimpleSocketServerTask.
    */
   static INT32U SSSCommand;
   
   SSSCommand = CMD_LEDS_BIT_0_TOGGLE;
    1de4:	00800c04 	movi	r2,48
    1de8:	d0a96515 	stw	r2,-23148(gp)

   while(bytes_to_process--)
    1dec:	00004506 	br	1f04 <sss_exec_command+0x158>
   {
      SSSCommand = toupper(*(conn->rx_rd_pos++));
    1df0:	e0bfff17 	ldw	r2,-4(fp)
    1df4:	10817a17 	ldw	r2,1512(r2)
    1df8:	10c00003 	ldbu	r3,0(r2)
    1dfc:	18c03fcc 	andi	r3,r3,255
    1e00:	e0fe8615 	stw	r3,-1512(fp)
    1e04:	10c00044 	addi	r3,r2,1
    1e08:	e0bfff17 	ldw	r2,-4(fp)
    1e0c:	10c17a15 	stw	r3,1512(r2)
    1e10:	00800174 	movhi	r2,5
    1e14:	108bcc04 	addi	r2,r2,12080
    1e18:	10c00017 	ldw	r3,0(r2)
    1e1c:	e0be8617 	ldw	r2,-1512(fp)
    1e20:	1885883a 	add	r2,r3,r2
    1e24:	10800003 	ldbu	r2,0(r2)
    1e28:	10803fcc 	andi	r2,r2,255
    1e2c:	1080008c 	andi	r2,r2,2
    1e30:	10000326 	beq	r2,zero,1e40 <sss_exec_command+0x94>
    1e34:	e0be8617 	ldw	r2,-1512(fp)
    1e38:	10bff804 	addi	r2,r2,-32
    1e3c:	00000106 	br	1e44 <sss_exec_command+0x98>
    1e40:	e0be8617 	ldw	r2,-1512(fp)
    1e44:	d0a96515 	stw	r2,-23148(gp)
    
      if(SSSCommand >= ' ' && SSSCommand <= '~')
    1e48:	d0a96517 	ldw	r2,-23148(gp)
    1e4c:	10800830 	cmpltui	r2,r2,32
    1e50:	10002c1e 	bne	r2,zero,1f04 <sss_exec_command+0x158>
    1e54:	d0a96517 	ldw	r2,-23148(gp)
    1e58:	10801fe8 	cmpgeui	r2,r2,127
    1e5c:	1000291e 	bne	r2,zero,1f04 <sss_exec_command+0x158>
      {
         tx_wr_pos += sprintf(tx_wr_pos,
                              "--> Simple Socket Server Command %c.\n",
                              (char)SSSCommand);
    1e60:	d0a96517 	ldw	r2,-23148(gp)
   {
      SSSCommand = toupper(*(conn->rx_rd_pos++));
    
      if(SSSCommand >= ' ' && SSSCommand <= '~')
      {
         tx_wr_pos += sprintf(tx_wr_pos,
    1e64:	10803fcc 	andi	r2,r2,255
    1e68:	1080201c 	xori	r2,r2,128
    1e6c:	10bfe004 	addi	r2,r2,-128
    1e70:	e13e8517 	ldw	r4,-1516(fp)
    1e74:	01400174 	movhi	r5,5
    1e78:	296f2f04 	addi	r5,r5,-17220
    1e7c:	100d883a 	mov	r6,r2
    1e80:	0002c300 	call	2c30 <sprintf>
    1e84:	e0fe8517 	ldw	r3,-1516(fp)
    1e88:	1885883a 	add	r2,r3,r2
    1e8c:	e0be8515 	stw	r2,-1516(fp)
                              "--> Simple Socket Server Command %c.\n",
                              (char)SSSCommand);
         if (SSSCommand == CMD_QUIT)
    1e90:	d0a96517 	ldw	r2,-23148(gp)
    1e94:	10801458 	cmpnei	r2,r2,81
    1e98:	1000101e 	bne	r2,zero,1edc <sss_exec_command+0x130>
         {
            tx_wr_pos += sprintf(tx_wr_pos,"Terminating connection.\n\n\r");
    1e9c:	e0fe8517 	ldw	r3,-1516(fp)
    1ea0:	00800174 	movhi	r2,5
    1ea4:	10af3904 	addi	r2,r2,-17180
    1ea8:	1809883a 	mov	r4,r3
    1eac:	1007883a 	mov	r3,r2
    1eb0:	008006c4 	movi	r2,27
    1eb4:	180b883a 	mov	r5,r3
    1eb8:	100d883a 	mov	r6,r2
    1ebc:	00025280 	call	2528 <memcpy>
    1ec0:	e0be8517 	ldw	r2,-1516(fp)
    1ec4:	10800684 	addi	r2,r2,26
    1ec8:	e0be8515 	stw	r2,-1516(fp)
            conn->close = 1;
    1ecc:	e0bfff17 	ldw	r2,-4(fp)
    1ed0:	00c00044 	movi	r3,1
    1ed4:	10c00215 	stw	r3,8(r2)
    1ed8:	00000a06 	br	1f04 <sss_exec_command+0x158>
         }
         else
         {
            error_code = OSQPost(SSSLEDCommandQ, (void *)SSSCommand);    
    1edc:	d0e96617 	ldw	r3,-23144(gp)
    1ee0:	d0a96517 	ldw	r2,-23148(gp)
    1ee4:	1809883a 	mov	r4,r3
    1ee8:	100b883a 	mov	r5,r2
    1eec:	0012c600 	call	12c60 <OSQPost>
    1ef0:	e0be8705 	stb	r2,-1508(fp)

            alt_SSSErrorHandler(error_code, 0);
    1ef4:	e0be8703 	ldbu	r2,-1508(fp)
    1ef8:	1009883a 	mov	r4,r2
    1efc:	000b883a 	mov	r5,zero
    1f00:	00009a40 	call	9a4 <alt_SSSErrorHandler>
    */
   static INT32U SSSCommand;
   
   SSSCommand = CMD_LEDS_BIT_0_TOGGLE;

   while(bytes_to_process--)
    1f04:	e0be8417 	ldw	r2,-1520(fp)
    1f08:	1004c03a 	cmpne	r2,r2,zero
    1f0c:	e0fe8417 	ldw	r3,-1520(fp)
    1f10:	18ffffc4 	addi	r3,r3,-1
    1f14:	e0fe8415 	stw	r3,-1520(fp)
    1f18:	10803fcc 	andi	r2,r2,255
    1f1c:	103fb41e 	bne	r2,zero,1df0 <sss_exec_command+0x44>
            alt_SSSErrorHandler(error_code, 0);
         }
      }
   }             

  send(conn->fd, tx_buf, tx_wr_pos - tx_buf, 0);  
    1f20:	e0bfff17 	ldw	r2,-4(fp)
    1f24:	11000117 	ldw	r4,4(r2)
    1f28:	e0fe8517 	ldw	r3,-1516(fp)
    1f2c:	e0be8744 	addi	r2,fp,-1507
    1f30:	1885c83a 	sub	r2,r3,r2
    1f34:	e0fe8744 	addi	r3,fp,-1507
    1f38:	180b883a 	mov	r5,r3
    1f3c:	100d883a 	mov	r6,r2
    1f40:	000f883a 	mov	r7,zero
    1f44:	002f1c00 	call	2f1c0 <t_send>
  
  return;
}
    1f48:	e037883a 	mov	sp,fp
    1f4c:	dfc00117 	ldw	ra,4(sp)
    1f50:	df000017 	ldw	fp,0(sp)
    1f54:	dec00204 	addi	sp,sp,8
    1f58:	f800283a 	ret

00001f5c <sss_handle_receive>:
 * sss_exec_command() routine. Aside from these, we must move incoming
 * (un-processed) data to buffer start as appropriate and keep track of 
 * associated pointers.
 */
void sss_handle_receive(SSSConn* conn)
{
    1f5c:	defffa04 	addi	sp,sp,-24
    1f60:	dfc00515 	stw	ra,20(sp)
    1f64:	df000415 	stw	fp,16(sp)
    1f68:	df000404 	addi	fp,sp,16
    1f6c:	e13fff15 	stw	r4,-4(fp)
  int data_used = 0, rx_code = 0;
    1f70:	e03ffc15 	stw	zero,-16(fp)
    1f74:	e03ffd15 	stw	zero,-12(fp)
  INT8U *lf_addr; 
  
  conn->rx_rd_pos = conn->rx_buffer;
    1f78:	e0bfff17 	ldw	r2,-4(fp)
    1f7c:	10c00304 	addi	r3,r2,12
    1f80:	e0bfff17 	ldw	r2,-4(fp)
    1f84:	10c17a15 	stw	r3,1512(r2)
  conn->rx_wr_pos = conn->rx_buffer;
    1f88:	e0bfff17 	ldw	r2,-4(fp)
    1f8c:	10c00304 	addi	r3,r2,12
    1f90:	e0bfff17 	ldw	r2,-4(fp)
    1f94:	10c17b15 	stw	r3,1516(r2)
  
  printf("[sss_handle_receive] processing RX data\n");
    1f98:	01000174 	movhi	r4,5
    1f9c:	212f4004 	addi	r4,r4,-17152
    1fa0:	0002b640 	call	2b64 <puts>
  
  while(conn->state != CLOSE)
    1fa4:	00005506 	br	20fc <sss_handle_receive+0x1a0>
  {
    /* Find the Carriage return which marks the end of the header */
    lf_addr = strchr(conn->rx_buffer, '\n');
    1fa8:	e0bfff17 	ldw	r2,-4(fp)
    1fac:	10800304 	addi	r2,r2,12
    1fb0:	1009883a 	mov	r4,r2
    1fb4:	01400284 	movi	r5,10
    1fb8:	0002c9c0 	call	2c9c <strchr>
    1fbc:	e0bffe15 	stw	r2,-8(fp)
      
    if(lf_addr)
    1fc0:	e0bffe17 	ldw	r2,-8(fp)
    1fc4:	10000326 	beq	r2,zero,1fd4 <sss_handle_receive+0x78>
    {
      /* go off and do whatever the user wanted us to do */
      sss_exec_command(conn);
    1fc8:	e13fff17 	ldw	r4,-4(fp)
    1fcc:	0001dac0 	call	1dac <sss_exec_command>
    1fd0:	00001c06 	br	2044 <sss_handle_receive+0xe8>
    }
    /* No newline received? Then ask the socket for data */
    else
    {
      rx_code = recv(conn->fd, conn->rx_wr_pos, 
    1fd4:	e0bfff17 	ldw	r2,-4(fp)
    1fd8:	11000117 	ldw	r4,4(r2)
    1fdc:	e0bfff17 	ldw	r2,-4(fp)
    1fe0:	10c17b17 	ldw	r3,1516(r2)
    1fe4:	e0bfff17 	ldw	r2,-4(fp)
    1fe8:	10800304 	addi	r2,r2,12
    1fec:	100b883a 	mov	r5,r2
    1ff0:	e0bfff17 	ldw	r2,-4(fp)
    1ff4:	10817b17 	ldw	r2,1516(r2)
    1ff8:	2885c83a 	sub	r2,r5,r2
    1ffc:	108176c4 	addi	r2,r2,1499
    2000:	180b883a 	mov	r5,r3
    2004:	100d883a 	mov	r6,r2
    2008:	000f883a 	mov	r7,zero
    200c:	002edbc0 	call	2edbc <t_recv>
    2010:	e0bffd15 	stw	r2,-12(fp)
        SSS_RX_BUF_SIZE - (conn->rx_wr_pos - conn->rx_buffer) -1, 0);
          
     if(rx_code > 0)
    2014:	e0bffd17 	ldw	r2,-12(fp)
    2018:	00800a0e 	bge	zero,r2,2044 <sss_handle_receive+0xe8>
      {
        conn->rx_wr_pos += rx_code;
    201c:	e0bfff17 	ldw	r2,-4(fp)
    2020:	10c17b17 	ldw	r3,1516(r2)
    2024:	e0bffd17 	ldw	r2,-12(fp)
    2028:	1887883a 	add	r3,r3,r2
    202c:	e0bfff17 	ldw	r2,-4(fp)
    2030:	10c17b15 	stw	r3,1516(r2)
        
        /* Zero terminate so we can use string functions */
        *(conn->rx_wr_pos+1) = 0;
    2034:	e0bfff17 	ldw	r2,-4(fp)
    2038:	10817b17 	ldw	r2,1516(r2)
    203c:	10800044 	addi	r2,r2,1
    2040:	10000005 	stb	zero,0(r2)

    /* 
     * When the quit command is received, update our connection state so that
     * we can exit the while() loop and close the connection
     */
    conn->state = conn->close ? CLOSE : READY;
    2044:	e0bfff17 	ldw	r2,-4(fp)
    2048:	10800217 	ldw	r2,8(r2)
    204c:	10000226 	beq	r2,zero,2058 <sss_handle_receive+0xfc>
    2050:	00800084 	movi	r2,2
    2054:	00000106 	br	205c <sss_handle_receive+0x100>
    2058:	0005883a 	mov	r2,zero
    205c:	e0ffff17 	ldw	r3,-4(fp)
    2060:	18800015 	stw	r2,0(r3)

    /* Manage buffer */
    data_used = conn->rx_rd_pos - conn->rx_buffer;
    2064:	e0bfff17 	ldw	r2,-4(fp)
    2068:	10817a17 	ldw	r2,1512(r2)
    206c:	1007883a 	mov	r3,r2
    2070:	e0bfff17 	ldw	r2,-4(fp)
    2074:	10800304 	addi	r2,r2,12
    2078:	1885c83a 	sub	r2,r3,r2
    207c:	e0bffc15 	stw	r2,-16(fp)
    memmove(conn->rx_buffer, conn->rx_rd_pos, 
    2080:	e0bfff17 	ldw	r2,-4(fp)
    2084:	11000304 	addi	r4,r2,12
    2088:	e0bfff17 	ldw	r2,-4(fp)
    208c:	10c17a17 	ldw	r3,1512(r2)
       conn->rx_wr_pos - conn->rx_rd_pos);
    2090:	e0bfff17 	ldw	r2,-4(fp)
    2094:	10817b17 	ldw	r2,1516(r2)
    2098:	100b883a 	mov	r5,r2
    209c:	e0bfff17 	ldw	r2,-4(fp)
    20a0:	10817a17 	ldw	r2,1512(r2)
    20a4:	2885c83a 	sub	r2,r5,r2
     */
    conn->state = conn->close ? CLOSE : READY;

    /* Manage buffer */
    data_used = conn->rx_rd_pos - conn->rx_buffer;
    memmove(conn->rx_buffer, conn->rx_rd_pos, 
    20a8:	180b883a 	mov	r5,r3
    20ac:	100d883a 	mov	r6,r2
    20b0:	00026200 	call	2620 <memmove>
       conn->rx_wr_pos - conn->rx_rd_pos);
    conn->rx_rd_pos = conn->rx_buffer;
    20b4:	e0bfff17 	ldw	r2,-4(fp)
    20b8:	10c00304 	addi	r3,r2,12
    20bc:	e0bfff17 	ldw	r2,-4(fp)
    20c0:	10c17a15 	stw	r3,1512(r2)
    conn->rx_wr_pos -= data_used;
    20c4:	e0bfff17 	ldw	r2,-4(fp)
    20c8:	10c17b17 	ldw	r3,1516(r2)
    20cc:	e0bffc17 	ldw	r2,-16(fp)
    20d0:	0085c83a 	sub	r2,zero,r2
    20d4:	1887883a 	add	r3,r3,r2
    20d8:	e0bfff17 	ldw	r2,-4(fp)
    20dc:	10c17b15 	stw	r3,1516(r2)
    memset(conn->rx_wr_pos, 0, data_used);
    20e0:	e0bfff17 	ldw	r2,-4(fp)
    20e4:	10c17b17 	ldw	r3,1516(r2)
    20e8:	e0bffc17 	ldw	r2,-16(fp)
    20ec:	1809883a 	mov	r4,r3
    20f0:	000b883a 	mov	r5,zero
    20f4:	100d883a 	mov	r6,r2
    20f8:	00027480 	call	2748 <memset>
  conn->rx_rd_pos = conn->rx_buffer;
  conn->rx_wr_pos = conn->rx_buffer;
  
  printf("[sss_handle_receive] processing RX data\n");
  
  while(conn->state != CLOSE)
    20fc:	e0bfff17 	ldw	r2,-4(fp)
    2100:	10800017 	ldw	r2,0(r2)
    2104:	10800098 	cmpnei	r2,r2,2
    2108:	103fa71e 	bne	r2,zero,1fa8 <sss_handle_receive+0x4c>
    conn->rx_rd_pos = conn->rx_buffer;
    conn->rx_wr_pos -= data_used;
    memset(conn->rx_wr_pos, 0, data_used);
  }

  printf("[sss_handle_receive] closing connection\n");
    210c:	01000174 	movhi	r4,5
    2110:	212f4a04 	addi	r4,r4,-17112
    2114:	0002b640 	call	2b64 <puts>
  close(conn->fd);
    2118:	e0bfff17 	ldw	r2,-4(fp)
    211c:	10800117 	ldw	r2,4(r2)
    2120:	1009883a 	mov	r4,r2
    2124:	0022ea00 	call	22ea0 <close>
  sss_reset_connection(conn);
    2128:	e13fff17 	ldw	r4,-4(fp)
    212c:	0001aa00 	call	1aa0 <sss_reset_connection>
  
  return;
    2130:	0001883a 	nop
}
    2134:	e037883a 	mov	sp,fp
    2138:	dfc00117 	ldw	ra,4(sp)
    213c:	df000017 	ldw	fp,0(sp)
    2140:	dec00204 	addi	sp,sp,8
    2144:	f800283a 	ret

00002148 <SSSSimpleSocketServerTask>:
 * (if a connection is active), the sss data socket. When data arrives, 
 * the approrpriate routine is called to either accept/reject a connection 
 * request, or process incoming data.
 */
void SSSSimpleSocketServerTask()
{
    2148:	deffb604 	addi	sp,sp,-296
    214c:	dfc04915 	stw	ra,292(sp)
    2150:	df004815 	stw	fp,288(sp)
    2154:	df004804 	addi	fp,sp,288
   * protocol and address families respectively. However, there is usually only
   * 1 address per protocol family. Thus PF_INET and AF_INET can be interchanged.
   * In the case of NicheStack, only the use of AF_INET is supported.
   * PF_INET is not supported in NicheStack.
   */ 
  if ((fd_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
    2158:	01000084 	movi	r4,2
    215c:	01400044 	movi	r5,1
    2160:	000d883a 	mov	r6,zero
    2164:	002e0c80 	call	2e0c8 <t_socket>
    2168:	e0bfba15 	stw	r2,-280(fp)
    216c:	e0bfba17 	ldw	r2,-280(fp)
    2170:	1000040e 	bge	r2,zero,2184 <SSSSimpleSocketServerTask+0x3c>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Socket creation failed");
    2174:	01003fc4 	movi	r4,255
    2178:	01400174 	movhi	r5,5
    217c:	296f5404 	addi	r5,r5,-17072
    2180:	00006e40 	call	6e4 <alt_NetworkErrorHandler>
   * port and incoming address. In this case we're binding to SSS_PORT and to
   * INADDR_ANY address (allowing anyone to connect to us. Bind may fail for 
   * various reasons, but the most common is that some other socket is bound to
   * the port we're requesting. 
   */ 
  addr.sin_family = AF_INET;
    2184:	00800084 	movi	r2,2
    2188:	e0bfbb0d 	sth	r2,-276(fp)
  addr.sin_port = htons(SSS_PORT);
    218c:	00878004 	movi	r2,7680
    2190:	e0bfbb8d 	sth	r2,-274(fp)
  addr.sin_addr.s_addr = INADDR_ANY;
    2194:	e03fbc15 	stw	zero,-272(fp)
  
  if ((bind(fd_listen,(struct sockaddr *)&addr,sizeof(addr))) < 0)
    2198:	e0bfbb04 	addi	r2,fp,-276
    219c:	e13fba17 	ldw	r4,-280(fp)
    21a0:	100b883a 	mov	r5,r2
    21a4:	01800404 	movi	r6,16
    21a8:	002e1480 	call	2e148 <t_bind>
    21ac:	1000040e 	bge	r2,zero,21c0 <SSSSimpleSocketServerTask+0x78>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Bind failed");
    21b0:	01003fc4 	movi	r4,255
    21b4:	01400174 	movhi	r5,5
    21b8:	296f5d04 	addi	r5,r5,-17036
    21bc:	00006e40 	call	6e4 <alt_NetworkErrorHandler>
   * Sockets primer, continued...
   * The listen socket is a socket which is waiting for incoming connections.
   * This call to listen will block (i.e. not return) until someone tries to 
   * connect to this port.
   */ 
  if ((listen(fd_listen,1)) < 0)
    21c0:	e13fba17 	ldw	r4,-280(fp)
    21c4:	01400044 	movi	r5,1
    21c8:	002e2a40 	call	2e2a4 <t_listen>
    21cc:	1000040e 	bge	r2,zero,21e0 <SSSSimpleSocketServerTask+0x98>
  {
    alt_NetworkErrorHandler(EXPANDED_DIAGNOSIS_CODE,"[sss_task] Listen failed");
    21d0:	01003fc4 	movi	r4,255
    21d4:	01400174 	movhi	r5,5
    21d8:	296f6304 	addi	r5,r5,-17012
    21dc:	00006e40 	call	6e4 <alt_NetworkErrorHandler>
  }

  /* At this point we have successfully created a socket which is listening
   * on SSS_PORT for connection requests from any remote address.
   */
  sss_reset_connection(&conn);
    21e0:	01000174 	movhi	r4,5
    21e4:	2115b504 	addi	r4,r4,22228
    21e8:	0001aa00 	call	1aa0 <sss_reset_connection>
  printf("[sss_task] Simple Socket Server listening on port %d\n", SSS_PORT);
    21ec:	01000174 	movhi	r4,5
    21f0:	212f6a04 	addi	r4,r4,-16984
    21f4:	01400784 	movi	r5,30
    21f8:	00028d40 	call	28d4 <printf>
    21fc:	00000106 	br	2204 <SSSSimpleSocketServerTask+0xbc>
      if ((conn.fd != -1) && FD_ISSET(conn.fd, &readfds))
      {
        sss_handle_receive(&conn);
      }
    }
  } /* while(1) */
    2200:	0001883a 	nop
     * 
     *   FD_ZERO  - Zero's out the sockets we're interested in
     *   FD_SET   - Adds a socket to those we're interested in
     *   FD_ISSET - Tests whether the chosen socket is set 
     */
    FD_ZERO(&readfds);
    2204:	e03fbf15 	stw	zero,-260(fp)
    FD_SET(fd_listen, &readfds);
    2208:	e0bfbf04 	addi	r2,fp,-260
    220c:	e13fba17 	ldw	r4,-280(fp)
    2210:	100b883a 	mov	r5,r2
    2214:	00330f80 	call	330f8 <ifd_set>
    max_socket = fd_listen+1;
    2218:	e0bfba17 	ldw	r2,-280(fp)
    221c:	10800044 	addi	r2,r2,1
    2220:	e0bfb915 	stw	r2,-284(fp)

    if (conn.fd != -1)
    2224:	00800174 	movhi	r2,5
    2228:	1095b504 	addi	r2,r2,22228
    222c:	10800117 	ldw	r2,4(r2)
    2230:	10bfffe0 	cmpeqi	r2,r2,-1
    2234:	1000111e 	bne	r2,zero,227c <SSSSimpleSocketServerTask+0x134>
    {
      FD_SET(conn.fd, &readfds);
    2238:	00800174 	movhi	r2,5
    223c:	1095b504 	addi	r2,r2,22228
    2240:	10c00117 	ldw	r3,4(r2)
    2244:	e0bfbf04 	addi	r2,fp,-260
    2248:	1809883a 	mov	r4,r3
    224c:	100b883a 	mov	r5,r2
    2250:	00330f80 	call	330f8 <ifd_set>
      if (max_socket <= conn.fd)
    2254:	00800174 	movhi	r2,5
    2258:	1095b504 	addi	r2,r2,22228
    225c:	10c00117 	ldw	r3,4(r2)
    2260:	e0bfb917 	ldw	r2,-284(fp)
    2264:	18800516 	blt	r3,r2,227c <SSSSimpleSocketServerTask+0x134>
      {
        max_socket = conn.fd+1;
    2268:	00800174 	movhi	r2,5
    226c:	1095b504 	addi	r2,r2,22228
    2270:	10800117 	ldw	r2,4(r2)
    2274:	10800044 	addi	r2,r2,1
    2278:	e0bfb915 	stw	r2,-284(fp)
      }
    }

    select(max_socket, &readfds, NULL, NULL, NULL);
    227c:	e0bfbf04 	addi	r2,fp,-260
    2280:	d8000015 	stw	zero,0(sp)
    2284:	e13fb917 	ldw	r4,-284(fp)
    2288:	100b883a 	mov	r5,r2
    228c:	000d883a 	mov	r6,zero
    2290:	000f883a 	mov	r7,zero
    2294:	0025c100 	call	25c10 <bsd_select>
     * is "set" in readfs, then we have an incoming connection request. We'll
     * call a routine to explicitly accept or deny the incoming connection 
     * request (in this example, we accept a single connection and reject any
     * others that come in while the connection is open).
     */
    if (FD_ISSET(fd_listen, &readfds))
    2298:	e0bfbf04 	addi	r2,fp,-260
    229c:	e13fba17 	ldw	r4,-280(fp)
    22a0:	100b883a 	mov	r5,r2
    22a4:	003316c0 	call	3316c <ifd_isset>
    22a8:	10000526 	beq	r2,zero,22c0 <SSSSimpleSocketServerTask+0x178>
    {
      sss_handle_accept(fd_listen, &conn);
    22ac:	e13fba17 	ldw	r4,-280(fp)
    22b0:	01400174 	movhi	r5,5
    22b4:	2955b504 	addi	r5,r5,22228
    22b8:	0001ce80 	call	1ce8 <sss_handle_accept>
      if ((conn.fd != -1) && FD_ISSET(conn.fd, &readfds))
      {
        sss_handle_receive(&conn);
      }
    }
  } /* while(1) */
    22bc:	003fd006 	br	2200 <SSSSimpleSocketServerTask+0xb8>
     * incoming data for our sss server, and we call our receiver routine
     * to process it.
     */
    else
    {
      if ((conn.fd != -1) && FD_ISSET(conn.fd, &readfds))
    22c0:	00800174 	movhi	r2,5
    22c4:	1095b504 	addi	r2,r2,22228
    22c8:	10800117 	ldw	r2,4(r2)
    22cc:	10bfffe0 	cmpeqi	r2,r2,-1
    22d0:	103fcb1e 	bne	r2,zero,2200 <SSSSimpleSocketServerTask+0xb8>
    22d4:	00800174 	movhi	r2,5
    22d8:	1095b504 	addi	r2,r2,22228
    22dc:	10c00117 	ldw	r3,4(r2)
    22e0:	e0bfbf04 	addi	r2,fp,-260
    22e4:	1809883a 	mov	r4,r3
    22e8:	100b883a 	mov	r5,r2
    22ec:	003316c0 	call	3316c <ifd_isset>
    22f0:	103fc326 	beq	r2,zero,2200 <SSSSimpleSocketServerTask+0xb8>
      {
        sss_handle_receive(&conn);
    22f4:	01000174 	movhi	r4,5
    22f8:	2115b504 	addi	r4,r4,22228
    22fc:	0001f5c0 	call	1f5c <sss_handle_receive>
      }
    }
  } /* while(1) */
    2300:	003fbf06 	br	2200 <SSSSimpleSocketServerTask+0xb8>

00002304 <_fprintf_r>:
    2304:	defffe04 	addi	sp,sp,-8
    2308:	2809883a 	mov	r4,r5
    230c:	dfc00015 	stw	ra,0(sp)
    2310:	d9c00115 	stw	r7,4(sp)
    2314:	300b883a 	mov	r5,r6
    2318:	d9800104 	addi	r6,sp,4
    231c:	00052a80 	call	52a8 <__vfprintf_internal>
    2320:	dfc00017 	ldw	ra,0(sp)
    2324:	dec00204 	addi	sp,sp,8
    2328:	f800283a 	ret

0000232c <fprintf>:
    232c:	defffd04 	addi	sp,sp,-12
    2330:	dfc00015 	stw	ra,0(sp)
    2334:	d9800115 	stw	r6,4(sp)
    2338:	d9c00215 	stw	r7,8(sp)
    233c:	d9800104 	addi	r6,sp,4
    2340:	00052a80 	call	52a8 <__vfprintf_internal>
    2344:	dfc00017 	ldw	ra,0(sp)
    2348:	dec00304 	addi	sp,sp,12
    234c:	f800283a 	ret

00002350 <_fwrite_r>:
    2350:	defff604 	addi	sp,sp,-40
    2354:	dc800715 	stw	r18,28(sp)
    2358:	39a5383a 	mul	r18,r7,r6
    235c:	d8800304 	addi	r2,sp,12
    2360:	d8800015 	stw	r2,0(sp)
    2364:	00800044 	movi	r2,1
    2368:	dcc00815 	stw	r19,32(sp)
    236c:	dc400615 	stw	r17,24(sp)
    2370:	dc000515 	stw	r16,20(sp)
    2374:	dfc00915 	stw	ra,36(sp)
    2378:	d9400315 	stw	r5,12(sp)
    237c:	dc800415 	stw	r18,16(sp)
    2380:	dc800215 	stw	r18,8(sp)
    2384:	d8800115 	stw	r2,4(sp)
    2388:	3027883a 	mov	r19,r6
    238c:	3823883a 	mov	r17,r7
    2390:	2021883a 	mov	r16,r4
    2394:	20000226 	beq	r4,zero,23a0 <_fwrite_r+0x50>
    2398:	20800e17 	ldw	r2,56(r4)
    239c:	10001226 	beq	r2,zero,23e8 <_fwrite_r+0x98>
    23a0:	d9400a17 	ldw	r5,40(sp)
    23a4:	8009883a 	mov	r4,r16
    23a8:	d80d883a 	mov	r6,sp
    23ac:	00077ec0 	call	77ec <__sfvwrite_r>
    23b0:	10000526 	beq	r2,zero,23c8 <_fwrite_r+0x78>
    23b4:	d9000217 	ldw	r4,8(sp)
    23b8:	980b883a 	mov	r5,r19
    23bc:	9109c83a 	sub	r4,r18,r4
    23c0:	000c1bc0 	call	c1bc <__udivsi3>
    23c4:	1023883a 	mov	r17,r2
    23c8:	8805883a 	mov	r2,r17
    23cc:	dfc00917 	ldw	ra,36(sp)
    23d0:	dcc00817 	ldw	r19,32(sp)
    23d4:	dc800717 	ldw	r18,28(sp)
    23d8:	dc400617 	ldw	r17,24(sp)
    23dc:	dc000517 	ldw	r16,20(sp)
    23e0:	dec00a04 	addi	sp,sp,40
    23e4:	f800283a 	ret
    23e8:	00070640 	call	7064 <__sinit>
    23ec:	003fec06 	br	23a0 <_fwrite_r+0x50>

000023f0 <fwrite>:
    23f0:	00800174 	movhi	r2,5
    23f4:	108bce04 	addi	r2,r2,12088
    23f8:	2011883a 	mov	r8,r4
    23fc:	11000017 	ldw	r4,0(r2)
    2400:	defffe04 	addi	sp,sp,-8
    2404:	2807883a 	mov	r3,r5
    2408:	3005883a 	mov	r2,r6
    240c:	d9c00015 	stw	r7,0(sp)
    2410:	400b883a 	mov	r5,r8
    2414:	180d883a 	mov	r6,r3
    2418:	100f883a 	mov	r7,r2
    241c:	dfc00115 	stw	ra,4(sp)
    2420:	00023500 	call	2350 <_fwrite_r>
    2424:	dfc00117 	ldw	ra,4(sp)
    2428:	dec00204 	addi	sp,sp,8
    242c:	f800283a 	ret

00002430 <_getc_r>:
    2430:	defffd04 	addi	sp,sp,-12
    2434:	dc000115 	stw	r16,4(sp)
    2438:	dfc00215 	stw	ra,8(sp)
    243c:	2021883a 	mov	r16,r4
    2440:	20000226 	beq	r4,zero,244c <_getc_r+0x1c>
    2444:	20800e17 	ldw	r2,56(r4)
    2448:	10000c26 	beq	r2,zero,247c <_getc_r+0x4c>
    244c:	28800117 	ldw	r2,4(r5)
    2450:	10bfffc4 	addi	r2,r2,-1
    2454:	28800115 	stw	r2,4(r5)
    2458:	10000c16 	blt	r2,zero,248c <_getc_r+0x5c>
    245c:	28c00017 	ldw	r3,0(r5)
    2460:	18800003 	ldbu	r2,0(r3)
    2464:	18c00044 	addi	r3,r3,1
    2468:	28c00015 	stw	r3,0(r5)
    246c:	dfc00217 	ldw	ra,8(sp)
    2470:	dc000117 	ldw	r16,4(sp)
    2474:	dec00304 	addi	sp,sp,12
    2478:	f800283a 	ret
    247c:	d9400015 	stw	r5,0(sp)
    2480:	00070640 	call	7064 <__sinit>
    2484:	d9400017 	ldw	r5,0(sp)
    2488:	003ff006 	br	244c <_getc_r+0x1c>
    248c:	8009883a 	mov	r4,r16
    2490:	dfc00217 	ldw	ra,8(sp)
    2494:	dc000117 	ldw	r16,4(sp)
    2498:	dec00304 	addi	sp,sp,12
    249c:	0002b781 	jmpi	2b78 <__srget_r>

000024a0 <getc>:
    24a0:	defffd04 	addi	sp,sp,-12
    24a4:	dc400115 	stw	r17,4(sp)
    24a8:	04400174 	movhi	r17,5
    24ac:	8c4bce04 	addi	r17,r17,12088
    24b0:	88800017 	ldw	r2,0(r17)
    24b4:	dc000015 	stw	r16,0(sp)
    24b8:	dfc00215 	stw	ra,8(sp)
    24bc:	2021883a 	mov	r16,r4
    24c0:	10000226 	beq	r2,zero,24cc <getc+0x2c>
    24c4:	10c00e17 	ldw	r3,56(r2)
    24c8:	18000d26 	beq	r3,zero,2500 <getc+0x60>
    24cc:	80800117 	ldw	r2,4(r16)
    24d0:	10bfffc4 	addi	r2,r2,-1
    24d4:	80800115 	stw	r2,4(r16)
    24d8:	10000c16 	blt	r2,zero,250c <getc+0x6c>
    24dc:	80c00017 	ldw	r3,0(r16)
    24e0:	18800003 	ldbu	r2,0(r3)
    24e4:	18c00044 	addi	r3,r3,1
    24e8:	80c00015 	stw	r3,0(r16)
    24ec:	dfc00217 	ldw	ra,8(sp)
    24f0:	dc400117 	ldw	r17,4(sp)
    24f4:	dc000017 	ldw	r16,0(sp)
    24f8:	dec00304 	addi	sp,sp,12
    24fc:	f800283a 	ret
    2500:	1009883a 	mov	r4,r2
    2504:	00070640 	call	7064 <__sinit>
    2508:	003ff006 	br	24cc <getc+0x2c>
    250c:	89000017 	ldw	r4,0(r17)
    2510:	800b883a 	mov	r5,r16
    2514:	dfc00217 	ldw	ra,8(sp)
    2518:	dc400117 	ldw	r17,4(sp)
    251c:	dc000017 	ldw	r16,0(sp)
    2520:	dec00304 	addi	sp,sp,12
    2524:	0002b781 	jmpi	2b78 <__srget_r>

00002528 <memcpy>:
    2528:	00c003c4 	movi	r3,15
    252c:	2005883a 	mov	r2,r4
    2530:	3009883a 	mov	r4,r6
    2534:	1980032e 	bgeu	r3,r6,2544 <memcpy+0x1c>
    2538:	2886b03a 	or	r3,r5,r2
    253c:	18c000cc 	andi	r3,r3,3
    2540:	18000926 	beq	r3,zero,2568 <memcpy+0x40>
    2544:	1007883a 	mov	r3,r2
    2548:	290f883a 	add	r7,r5,r4
    254c:	20000526 	beq	r4,zero,2564 <memcpy+0x3c>
    2550:	29800003 	ldbu	r6,0(r5)
    2554:	18c00044 	addi	r3,r3,1
    2558:	29400044 	addi	r5,r5,1
    255c:	19bfffc5 	stb	r6,-1(r3)
    2560:	29fffb1e 	bne	r5,r7,2550 <memcpy+0x28>
    2564:	f800283a 	ret
    2568:	327ffc04 	addi	r9,r6,-16
    256c:	4812d13a 	srli	r9,r9,4
    2570:	11000404 	addi	r4,r2,16
    2574:	1007883a 	mov	r3,r2
    2578:	4810913a 	slli	r8,r9,4
    257c:	280f883a 	mov	r7,r5
    2580:	2209883a 	add	r4,r4,r8
    2584:	3a000017 	ldw	r8,0(r7)
    2588:	18c00404 	addi	r3,r3,16
    258c:	39c00404 	addi	r7,r7,16
    2590:	1a3ffc15 	stw	r8,-16(r3)
    2594:	3a3ffd17 	ldw	r8,-12(r7)
    2598:	1a3ffd15 	stw	r8,-12(r3)
    259c:	3a3ffe17 	ldw	r8,-8(r7)
    25a0:	1a3ffe15 	stw	r8,-8(r3)
    25a4:	3a3fff17 	ldw	r8,-4(r7)
    25a8:	1a3fff15 	stw	r8,-4(r3)
    25ac:	193ff51e 	bne	r3,r4,2584 <memcpy+0x5c>
    25b0:	49c00044 	addi	r7,r9,1
    25b4:	380e913a 	slli	r7,r7,4
    25b8:	310003cc 	andi	r4,r6,15
    25bc:	018000c4 	movi	r6,3
    25c0:	11c7883a 	add	r3,r2,r7
    25c4:	29cb883a 	add	r5,r5,r7
    25c8:	313fdf2e 	bgeu	r6,r4,2548 <memcpy+0x20>
    25cc:	213fff04 	addi	r4,r4,-4
    25d0:	2014d0ba 	srli	r10,r4,2
    25d4:	1a400104 	addi	r9,r3,4
    25d8:	180d883a 	mov	r6,r3
    25dc:	528f883a 	add	r7,r10,r10
    25e0:	39cf883a 	add	r7,r7,r7
    25e4:	49d3883a 	add	r9,r9,r7
    25e8:	280f883a 	mov	r7,r5
    25ec:	3a000017 	ldw	r8,0(r7)
    25f0:	31800104 	addi	r6,r6,4
    25f4:	39c00104 	addi	r7,r7,4
    25f8:	323fff15 	stw	r8,-4(r6)
    25fc:	327ffb1e 	bne	r6,r9,25ec <memcpy+0xc4>
    2600:	51800044 	addi	r6,r10,1
    2604:	52bfff24 	muli	r10,r10,-4
    2608:	318d883a 	add	r6,r6,r6
    260c:	318d883a 	add	r6,r6,r6
    2610:	5109883a 	add	r4,r10,r4
    2614:	298b883a 	add	r5,r5,r6
    2618:	1987883a 	add	r3,r3,r6
    261c:	003fca06 	br	2548 <memcpy+0x20>

00002620 <memmove>:
    2620:	2005883a 	mov	r2,r4
    2624:	300f883a 	mov	r7,r6
    2628:	29000b2e 	bgeu	r5,r4,2658 <memmove+0x38>
    262c:	2987883a 	add	r3,r5,r6
    2630:	20c0092e 	bgeu	r4,r3,2658 <memmove+0x38>
    2634:	218b883a 	add	r5,r4,r6
    2638:	198fc83a 	sub	r7,r3,r6
    263c:	30003f26 	beq	r6,zero,273c <memmove+0x11c>
    2640:	18ffffc4 	addi	r3,r3,-1
    2644:	19000003 	ldbu	r4,0(r3)
    2648:	297fffc4 	addi	r5,r5,-1
    264c:	29000005 	stb	r4,0(r5)
    2650:	19fffb1e 	bne	r3,r7,2640 <memmove+0x20>
    2654:	f800283a 	ret
    2658:	00c003c4 	movi	r3,15
    265c:	1980382e 	bgeu	r3,r6,2740 <memmove+0x120>
    2660:	2886b03a 	or	r3,r5,r2
    2664:	18c000cc 	andi	r3,r3,3
    2668:	1800351e 	bne	r3,zero,2740 <memmove+0x120>
    266c:	327ffc04 	addi	r9,r6,-16
    2670:	4812d13a 	srli	r9,r9,4
    2674:	12000404 	addi	r8,r2,16
    2678:	1007883a 	mov	r3,r2
    267c:	4808913a 	slli	r4,r9,4
    2680:	280f883a 	mov	r7,r5
    2684:	4111883a 	add	r8,r8,r4
    2688:	39000017 	ldw	r4,0(r7)
    268c:	18c00404 	addi	r3,r3,16
    2690:	39c00404 	addi	r7,r7,16
    2694:	193ffc15 	stw	r4,-16(r3)
    2698:	393ffd17 	ldw	r4,-12(r7)
    269c:	193ffd15 	stw	r4,-12(r3)
    26a0:	393ffe17 	ldw	r4,-8(r7)
    26a4:	193ffe15 	stw	r4,-8(r3)
    26a8:	393fff17 	ldw	r4,-4(r7)
    26ac:	193fff15 	stw	r4,-4(r3)
    26b0:	1a3ff51e 	bne	r3,r8,2688 <memmove+0x68>
    26b4:	49000044 	addi	r4,r9,1
    26b8:	2008913a 	slli	r4,r4,4
    26bc:	31c003cc 	andi	r7,r6,15
    26c0:	1107883a 	add	r3,r2,r4
    26c4:	290b883a 	add	r5,r5,r4
    26c8:	010000c4 	movi	r4,3
    26cc:	21c0142e 	bgeu	r4,r7,2720 <memmove+0x100>
    26d0:	39ffff04 	addi	r7,r7,-4
    26d4:	3814d0ba 	srli	r10,r7,2
    26d8:	1a400104 	addi	r9,r3,4
    26dc:	180d883a 	mov	r6,r3
    26e0:	5289883a 	add	r4,r10,r10
    26e4:	2109883a 	add	r4,r4,r4
    26e8:	4913883a 	add	r9,r9,r4
    26ec:	2809883a 	mov	r4,r5
    26f0:	22000017 	ldw	r8,0(r4)
    26f4:	31800104 	addi	r6,r6,4
    26f8:	21000104 	addi	r4,r4,4
    26fc:	323fff15 	stw	r8,-4(r6)
    2700:	327ffb1e 	bne	r6,r9,26f0 <memmove+0xd0>
    2704:	51000044 	addi	r4,r10,1
    2708:	52bfff24 	muli	r10,r10,-4
    270c:	2109883a 	add	r4,r4,r4
    2710:	2109883a 	add	r4,r4,r4
    2714:	51cf883a 	add	r7,r10,r7
    2718:	290b883a 	add	r5,r5,r4
    271c:	1907883a 	add	r3,r3,r4
    2720:	38000626 	beq	r7,zero,273c <memmove+0x11c>
    2724:	19cf883a 	add	r7,r3,r7
    2728:	29800003 	ldbu	r6,0(r5)
    272c:	18c00044 	addi	r3,r3,1
    2730:	29400044 	addi	r5,r5,1
    2734:	19bfffc5 	stb	r6,-1(r3)
    2738:	19fffb1e 	bne	r3,r7,2728 <memmove+0x108>
    273c:	f800283a 	ret
    2740:	1007883a 	mov	r3,r2
    2744:	003ff606 	br	2720 <memmove+0x100>

00002748 <memset>:
    2748:	00c000c4 	movi	r3,3
    274c:	2005883a 	mov	r2,r4
    2750:	29403fcc 	andi	r5,r5,255
    2754:	19802d2e 	bgeu	r3,r6,280c <memset+0xc4>
    2758:	20c6703a 	and	r3,r4,r3
    275c:	18002e1e 	bne	r3,zero,2818 <memset+0xd0>
    2760:	2806923a 	slli	r3,r5,8
    2764:	010003c4 	movi	r4,15
    2768:	3011883a 	mov	r8,r6
    276c:	1946b03a 	or	r3,r3,r5
    2770:	180e943a 	slli	r7,r3,16
    2774:	38ceb03a 	or	r7,r7,r3
    2778:	1007883a 	mov	r3,r2
    277c:	21800f2e 	bgeu	r4,r6,27bc <memset+0x74>
    2780:	19c00015 	stw	r7,0(r3)
    2784:	19c00115 	stw	r7,4(r3)
    2788:	19c00215 	stw	r7,8(r3)
    278c:	19c00315 	stw	r7,12(r3)
    2790:	423ffc04 	addi	r8,r8,-16
    2794:	18c00404 	addi	r3,r3,16
    2798:	223ff936 	bltu	r4,r8,2780 <memset+0x38>
    279c:	30fffc04 	addi	r3,r6,-16
    27a0:	1806d13a 	srli	r3,r3,4
    27a4:	318003cc 	andi	r6,r6,15
    27a8:	010000c4 	movi	r4,3
    27ac:	18c00044 	addi	r3,r3,1
    27b0:	1806913a 	slli	r3,r3,4
    27b4:	10c7883a 	add	r3,r2,r3
    27b8:	21800e2e 	bgeu	r4,r6,27f4 <memset+0xac>
    27bc:	1813883a 	mov	r9,r3
    27c0:	3011883a 	mov	r8,r6
    27c4:	010000c4 	movi	r4,3
    27c8:	49c00015 	stw	r7,0(r9)
    27cc:	423fff04 	addi	r8,r8,-4
    27d0:	4a400104 	addi	r9,r9,4
    27d4:	223ffc36 	bltu	r4,r8,27c8 <memset+0x80>
    27d8:	313fff04 	addi	r4,r6,-4
    27dc:	2008d0ba 	srli	r4,r4,2
    27e0:	318000cc 	andi	r6,r6,3
    27e4:	21000044 	addi	r4,r4,1
    27e8:	2109883a 	add	r4,r4,r4
    27ec:	2109883a 	add	r4,r4,r4
    27f0:	1907883a 	add	r3,r3,r4
    27f4:	30000a26 	beq	r6,zero,2820 <memset+0xd8>
    27f8:	198d883a 	add	r6,r3,r6
    27fc:	19400005 	stb	r5,0(r3)
    2800:	18c00044 	addi	r3,r3,1
    2804:	19bffd1e 	bne	r3,r6,27fc <memset+0xb4>
    2808:	f800283a 	ret
    280c:	2007883a 	mov	r3,r4
    2810:	303ff91e 	bne	r6,zero,27f8 <memset+0xb0>
    2814:	00000206 	br	2820 <memset+0xd8>
    2818:	2007883a 	mov	r3,r4
    281c:	003ff606 	br	27f8 <memset+0xb0>
    2820:	f800283a 	ret

00002824 <_perror_r>:
    2824:	defffe04 	addi	sp,sp,-8
    2828:	dc000015 	stw	r16,0(sp)
    282c:	dfc00115 	stw	ra,4(sp)
    2830:	2805883a 	mov	r2,r5
    2834:	2021883a 	mov	r16,r4
    2838:	28000226 	beq	r5,zero,2844 <_perror_r+0x20>
    283c:	28c00007 	ldb	r3,0(r5)
    2840:	18000c1e 	bne	r3,zero,2874 <_perror_r+0x50>
    2844:	81000017 	ldw	r4,0(r16)
    2848:	0002d840 	call	2d84 <strerror>
    284c:	10000326 	beq	r2,zero,285c <_perror_r+0x38>
    2850:	81400317 	ldw	r5,12(r16)
    2854:	1009883a 	mov	r4,r2
    2858:	00073c40 	call	73c4 <fputs>
    285c:	81400317 	ldw	r5,12(r16)
    2860:	01000284 	movi	r4,10
    2864:	dfc00117 	ldw	ra,4(sp)
    2868:	dc000017 	ldw	r16,0(sp)
    286c:	dec00204 	addi	sp,sp,8
    2870:	00072f01 	jmpi	72f0 <fputc>
    2874:	21400317 	ldw	r5,12(r4)
    2878:	1009883a 	mov	r4,r2
    287c:	00073c40 	call	73c4 <fputs>
    2880:	81400317 	ldw	r5,12(r16)
    2884:	01000174 	movhi	r4,5
    2888:	21302204 	addi	r4,r4,-16248
    288c:	00073c40 	call	73c4 <fputs>
    2890:	003fec06 	br	2844 <_perror_r+0x20>

00002894 <perror>:
    2894:	00800174 	movhi	r2,5
    2898:	108bce04 	addi	r2,r2,12088
    289c:	200b883a 	mov	r5,r4
    28a0:	11000017 	ldw	r4,0(r2)
    28a4:	00028241 	jmpi	2824 <_perror_r>

000028a8 <_printf_r>:
    28a8:	defffd04 	addi	sp,sp,-12
    28ac:	dfc00015 	stw	ra,0(sp)
    28b0:	d9800115 	stw	r6,4(sp)
    28b4:	d9c00215 	stw	r7,8(sp)
    28b8:	280d883a 	mov	r6,r5
    28bc:	21400217 	ldw	r5,8(r4)
    28c0:	d9c00104 	addi	r7,sp,4
    28c4:	00034b00 	call	34b0 <___vfprintf_internal_r>
    28c8:	dfc00017 	ldw	ra,0(sp)
    28cc:	dec00304 	addi	sp,sp,12
    28d0:	f800283a 	ret

000028d4 <printf>:
    28d4:	defffc04 	addi	sp,sp,-16
    28d8:	dfc00015 	stw	ra,0(sp)
    28dc:	d9400115 	stw	r5,4(sp)
    28e0:	d9800215 	stw	r6,8(sp)
    28e4:	d9c00315 	stw	r7,12(sp)
    28e8:	00800174 	movhi	r2,5
    28ec:	108bce04 	addi	r2,r2,12088
    28f0:	10800017 	ldw	r2,0(r2)
    28f4:	200b883a 	mov	r5,r4
    28f8:	d9800104 	addi	r6,sp,4
    28fc:	11000217 	ldw	r4,8(r2)
    2900:	00052a80 	call	52a8 <__vfprintf_internal>
    2904:	dfc00017 	ldw	ra,0(sp)
    2908:	dec00404 	addi	sp,sp,16
    290c:	f800283a 	ret

00002910 <_putc_r>:
    2910:	defffc04 	addi	sp,sp,-16
    2914:	dc000215 	stw	r16,8(sp)
    2918:	dfc00315 	stw	ra,12(sp)
    291c:	2021883a 	mov	r16,r4
    2920:	20000226 	beq	r4,zero,292c <_putc_r+0x1c>
    2924:	20800e17 	ldw	r2,56(r4)
    2928:	10001d26 	beq	r2,zero,29a0 <_putc_r+0x90>
    292c:	30800217 	ldw	r2,8(r6)
    2930:	10bfffc4 	addi	r2,r2,-1
    2934:	30800215 	stw	r2,8(r6)
    2938:	10000a16 	blt	r2,zero,2964 <_putc_r+0x54>
    293c:	30800017 	ldw	r2,0(r6)
    2940:	11400005 	stb	r5,0(r2)
    2944:	30800017 	ldw	r2,0(r6)
    2948:	10c00044 	addi	r3,r2,1
    294c:	10800003 	ldbu	r2,0(r2)
    2950:	30c00015 	stw	r3,0(r6)
    2954:	dfc00317 	ldw	ra,12(sp)
    2958:	dc000217 	ldw	r16,8(sp)
    295c:	dec00404 	addi	sp,sp,16
    2960:	f800283a 	ret
    2964:	30c00617 	ldw	r3,24(r6)
    2968:	10c01316 	blt	r2,r3,29b8 <_putc_r+0xa8>
    296c:	30800017 	ldw	r2,0(r6)
    2970:	01000284 	movi	r4,10
    2974:	11400005 	stb	r5,0(r2)
    2978:	30c00017 	ldw	r3,0(r6)
    297c:	19400003 	ldbu	r5,0(r3)
    2980:	29000d26 	beq	r5,r4,29b8 <_putc_r+0xa8>
    2984:	18c00044 	addi	r3,r3,1
    2988:	2805883a 	mov	r2,r5
    298c:	30c00015 	stw	r3,0(r6)
    2990:	dfc00317 	ldw	ra,12(sp)
    2994:	dc000217 	ldw	r16,8(sp)
    2998:	dec00404 	addi	sp,sp,16
    299c:	f800283a 	ret
    29a0:	d9400015 	stw	r5,0(sp)
    29a4:	d9800115 	stw	r6,4(sp)
    29a8:	00070640 	call	7064 <__sinit>
    29ac:	d9800117 	ldw	r6,4(sp)
    29b0:	d9400017 	ldw	r5,0(sp)
    29b4:	003fdd06 	br	292c <_putc_r+0x1c>
    29b8:	8009883a 	mov	r4,r16
    29bc:	dfc00317 	ldw	ra,12(sp)
    29c0:	dc000217 	ldw	r16,8(sp)
    29c4:	dec00404 	addi	sp,sp,16
    29c8:	00052cc1 	jmpi	52cc <__swbuf_r>

000029cc <putc>:
    29cc:	defffc04 	addi	sp,sp,-16
    29d0:	dc400115 	stw	r17,4(sp)
    29d4:	04400174 	movhi	r17,5
    29d8:	8c4bce04 	addi	r17,r17,12088
    29dc:	88800017 	ldw	r2,0(r17)
    29e0:	dc800215 	stw	r18,8(sp)
    29e4:	dc000015 	stw	r16,0(sp)
    29e8:	dfc00315 	stw	ra,12(sp)
    29ec:	2025883a 	mov	r18,r4
    29f0:	2821883a 	mov	r16,r5
    29f4:	10000226 	beq	r2,zero,2a00 <putc+0x34>
    29f8:	10c00e17 	ldw	r3,56(r2)
    29fc:	18002126 	beq	r3,zero,2a84 <putc+0xb8>
    2a00:	80800217 	ldw	r2,8(r16)
    2a04:	10bfffc4 	addi	r2,r2,-1
    2a08:	80800215 	stw	r2,8(r16)
    2a0c:	10000c16 	blt	r2,zero,2a40 <putc+0x74>
    2a10:	80800017 	ldw	r2,0(r16)
    2a14:	14800005 	stb	r18,0(r2)
    2a18:	80800017 	ldw	r2,0(r16)
    2a1c:	10c00044 	addi	r3,r2,1
    2a20:	10800003 	ldbu	r2,0(r2)
    2a24:	80c00015 	stw	r3,0(r16)
    2a28:	dfc00317 	ldw	ra,12(sp)
    2a2c:	dc800217 	ldw	r18,8(sp)
    2a30:	dc400117 	ldw	r17,4(sp)
    2a34:	dc000017 	ldw	r16,0(sp)
    2a38:	dec00404 	addi	sp,sp,16
    2a3c:	f800283a 	ret
    2a40:	80c00617 	ldw	r3,24(r16)
    2a44:	10c01216 	blt	r2,r3,2a90 <putc+0xc4>
    2a48:	80800017 	ldw	r2,0(r16)
    2a4c:	01000284 	movi	r4,10
    2a50:	14800005 	stb	r18,0(r2)
    2a54:	80c00017 	ldw	r3,0(r16)
    2a58:	19400003 	ldbu	r5,0(r3)
    2a5c:	29001526 	beq	r5,r4,2ab4 <putc+0xe8>
    2a60:	18c00044 	addi	r3,r3,1
    2a64:	2805883a 	mov	r2,r5
    2a68:	80c00015 	stw	r3,0(r16)
    2a6c:	dfc00317 	ldw	ra,12(sp)
    2a70:	dc800217 	ldw	r18,8(sp)
    2a74:	dc400117 	ldw	r17,4(sp)
    2a78:	dc000017 	ldw	r16,0(sp)
    2a7c:	dec00404 	addi	sp,sp,16
    2a80:	f800283a 	ret
    2a84:	1009883a 	mov	r4,r2
    2a88:	00070640 	call	7064 <__sinit>
    2a8c:	003fdc06 	br	2a00 <putc+0x34>
    2a90:	89000017 	ldw	r4,0(r17)
    2a94:	900b883a 	mov	r5,r18
    2a98:	800d883a 	mov	r6,r16
    2a9c:	dfc00317 	ldw	ra,12(sp)
    2aa0:	dc800217 	ldw	r18,8(sp)
    2aa4:	dc400117 	ldw	r17,4(sp)
    2aa8:	dc000017 	ldw	r16,0(sp)
    2aac:	dec00404 	addi	sp,sp,16
    2ab0:	00052cc1 	jmpi	52cc <__swbuf_r>
    2ab4:	89000017 	ldw	r4,0(r17)
    2ab8:	003ff706 	br	2a98 <putc+0xcc>

00002abc <_putchar_r>:
    2abc:	21800217 	ldw	r6,8(r4)
    2ac0:	00029101 	jmpi	2910 <_putc_r>

00002ac4 <putchar>:
    2ac4:	00800174 	movhi	r2,5
    2ac8:	108bce04 	addi	r2,r2,12088
    2acc:	10800017 	ldw	r2,0(r2)
    2ad0:	200b883a 	mov	r5,r4
    2ad4:	11800217 	ldw	r6,8(r2)
    2ad8:	1009883a 	mov	r4,r2
    2adc:	00029101 	jmpi	2910 <_putc_r>

00002ae0 <_puts_r>:
    2ae0:	defff604 	addi	sp,sp,-40
    2ae4:	dc400815 	stw	r17,32(sp)
    2ae8:	2023883a 	mov	r17,r4
    2aec:	2809883a 	mov	r4,r5
    2af0:	dc000715 	stw	r16,28(sp)
    2af4:	dfc00915 	stw	ra,36(sp)
    2af8:	2821883a 	mov	r16,r5
    2afc:	00033e80 	call	33e8 <strlen>
    2b00:	10c00044 	addi	r3,r2,1
    2b04:	d8800115 	stw	r2,4(sp)
    2b08:	89400217 	ldw	r5,8(r17)
    2b0c:	00800174 	movhi	r2,5
    2b10:	10b02304 	addi	r2,r2,-16244
    2b14:	d8800215 	stw	r2,8(sp)
    2b18:	00800044 	movi	r2,1
    2b1c:	d8800315 	stw	r2,12(sp)
    2b20:	8809883a 	mov	r4,r17
    2b24:	00800084 	movi	r2,2
    2b28:	d9800404 	addi	r6,sp,16
    2b2c:	dc000015 	stw	r16,0(sp)
    2b30:	d8c00615 	stw	r3,24(sp)
    2b34:	dec00415 	stw	sp,16(sp)
    2b38:	d8800515 	stw	r2,20(sp)
    2b3c:	00077ec0 	call	77ec <__sfvwrite_r>
    2b40:	1000061e 	bne	r2,zero,2b5c <_puts_r+0x7c>
    2b44:	00800284 	movi	r2,10
    2b48:	dfc00917 	ldw	ra,36(sp)
    2b4c:	dc400817 	ldw	r17,32(sp)
    2b50:	dc000717 	ldw	r16,28(sp)
    2b54:	dec00a04 	addi	sp,sp,40
    2b58:	f800283a 	ret
    2b5c:	00bfffc4 	movi	r2,-1
    2b60:	003ff906 	br	2b48 <_puts_r+0x68>

00002b64 <puts>:
    2b64:	00800174 	movhi	r2,5
    2b68:	108bce04 	addi	r2,r2,12088
    2b6c:	200b883a 	mov	r5,r4
    2b70:	11000017 	ldw	r4,0(r2)
    2b74:	0002ae01 	jmpi	2ae0 <_puts_r>

00002b78 <__srget_r>:
    2b78:	defffe04 	addi	sp,sp,-8
    2b7c:	dc000015 	stw	r16,0(sp)
    2b80:	dfc00115 	stw	ra,4(sp)
    2b84:	2821883a 	mov	r16,r5
    2b88:	0009ef00 	call	9ef0 <__srefill_r>
    2b8c:	10000b1e 	bne	r2,zero,2bbc <__srget_r+0x44>
    2b90:	80c00117 	ldw	r3,4(r16)
    2b94:	80800017 	ldw	r2,0(r16)
    2b98:	18ffffc4 	addi	r3,r3,-1
    2b9c:	80c00115 	stw	r3,4(r16)
    2ba0:	10c00044 	addi	r3,r2,1
    2ba4:	10800003 	ldbu	r2,0(r2)
    2ba8:	80c00015 	stw	r3,0(r16)
    2bac:	dfc00117 	ldw	ra,4(sp)
    2bb0:	dc000017 	ldw	r16,0(sp)
    2bb4:	dec00204 	addi	sp,sp,8
    2bb8:	f800283a 	ret
    2bbc:	00bfffc4 	movi	r2,-1
    2bc0:	003ffa06 	br	2bac <__srget_r+0x34>

00002bc4 <__srget>:
    2bc4:	00800174 	movhi	r2,5
    2bc8:	108bce04 	addi	r2,r2,12088
    2bcc:	200b883a 	mov	r5,r4
    2bd0:	11000017 	ldw	r4,0(r2)
    2bd4:	0002b781 	jmpi	2b78 <__srget_r>

00002bd8 <_sprintf_r>:
    2bd8:	deffe704 	addi	sp,sp,-100
    2bdc:	2807883a 	mov	r3,r5
    2be0:	dfc01715 	stw	ra,92(sp)
    2be4:	d9c01815 	stw	r7,96(sp)
    2be8:	00a00034 	movhi	r2,32768
    2bec:	10bfffc4 	addi	r2,r2,-1
    2bf0:	02008204 	movi	r8,520
    2bf4:	d8800215 	stw	r2,8(sp)
    2bf8:	d8800515 	stw	r2,20(sp)
    2bfc:	d80b883a 	mov	r5,sp
    2c00:	d9c01804 	addi	r7,sp,96
    2c04:	00bfffc4 	movi	r2,-1
    2c08:	d8c00015 	stw	r3,0(sp)
    2c0c:	d8c00415 	stw	r3,16(sp)
    2c10:	da00030d 	sth	r8,12(sp)
    2c14:	d880038d 	sth	r2,14(sp)
    2c18:	00034b00 	call	34b0 <___vfprintf_internal_r>
    2c1c:	d8c00017 	ldw	r3,0(sp)
    2c20:	18000005 	stb	zero,0(r3)
    2c24:	dfc01717 	ldw	ra,92(sp)
    2c28:	dec01904 	addi	sp,sp,100
    2c2c:	f800283a 	ret

00002c30 <sprintf>:
    2c30:	deffe604 	addi	sp,sp,-104
    2c34:	2007883a 	mov	r3,r4
    2c38:	dfc01715 	stw	ra,92(sp)
    2c3c:	d9801815 	stw	r6,96(sp)
    2c40:	d9c01915 	stw	r7,100(sp)
    2c44:	00800174 	movhi	r2,5
    2c48:	108bce04 	addi	r2,r2,12088
    2c4c:	11000017 	ldw	r4,0(r2)
    2c50:	00a00034 	movhi	r2,32768
    2c54:	10bfffc4 	addi	r2,r2,-1
    2c58:	280d883a 	mov	r6,r5
    2c5c:	02008204 	movi	r8,520
    2c60:	d8800215 	stw	r2,8(sp)
    2c64:	d8800515 	stw	r2,20(sp)
    2c68:	d80b883a 	mov	r5,sp
    2c6c:	d9c01804 	addi	r7,sp,96
    2c70:	00bfffc4 	movi	r2,-1
    2c74:	d8c00015 	stw	r3,0(sp)
    2c78:	d8c00415 	stw	r3,16(sp)
    2c7c:	da00030d 	sth	r8,12(sp)
    2c80:	d880038d 	sth	r2,14(sp)
    2c84:	00034b00 	call	34b0 <___vfprintf_internal_r>
    2c88:	d8c00017 	ldw	r3,0(sp)
    2c8c:	18000005 	stb	zero,0(r3)
    2c90:	dfc01717 	ldw	ra,92(sp)
    2c94:	dec01a04 	addi	sp,sp,104
    2c98:	f800283a 	ret

00002c9c <strchr>:
    2c9c:	208000cc 	andi	r2,r4,3
    2ca0:	2815883a 	mov	r10,r5
    2ca4:	10000c26 	beq	r2,zero,2cd8 <strchr+0x3c>
    2ca8:	2005883a 	mov	r2,r4
    2cac:	10c00003 	ldbu	r3,0(r2)
    2cb0:	51003fcc 	andi	r4,r10,255
    2cb4:	18000626 	beq	r3,zero,2cd0 <strchr+0x34>
    2cb8:	20c0021e 	bne	r4,r3,2cc4 <strchr+0x28>
    2cbc:	00003006 	br	2d80 <strchr+0xe4>
    2cc0:	20c02e26 	beq	r4,r3,2d7c <strchr+0xe0>
    2cc4:	10800044 	addi	r2,r2,1
    2cc8:	10c00003 	ldbu	r3,0(r2)
    2ccc:	183ffc1e 	bne	r3,zero,2cc0 <strchr+0x24>
    2cd0:	2000281e 	bne	r4,zero,2d74 <strchr+0xd8>
    2cd4:	f800283a 	ret
    2cd8:	29403fcc 	andi	r5,r5,255
    2cdc:	2810923a 	slli	r8,r5,8
    2ce0:	20800017 	ldw	r2,0(r4)
    2ce4:	01ffbff4 	movhi	r7,65279
    2ce8:	39ffbfc4 	addi	r7,r7,-257
    2cec:	4150b03a 	or	r8,r8,r5
    2cf0:	4010923a 	slli	r8,r8,8
    2cf4:	11cd883a 	add	r6,r2,r7
    2cf8:	0086303a 	nor	r3,zero,r2
    2cfc:	4150b03a 	or	r8,r8,r5
    2d00:	4010923a 	slli	r8,r8,8
    2d04:	30c6703a 	and	r3,r6,r3
    2d08:	01a02074 	movhi	r6,32897
    2d0c:	31a02004 	addi	r6,r6,-32640
    2d10:	1986703a 	and	r3,r3,r6
    2d14:	414ab03a 	or	r5,r8,r5
    2d18:	183fe31e 	bne	r3,zero,2ca8 <strchr+0xc>
    2d1c:	2884f03a 	xor	r2,r5,r2
    2d20:	11c7883a 	add	r3,r2,r7
    2d24:	0084303a 	nor	r2,zero,r2
    2d28:	1884703a 	and	r2,r3,r2
    2d2c:	1184703a 	and	r2,r2,r6
    2d30:	103fdd1e 	bne	r2,zero,2ca8 <strchr+0xc>
    2d34:	2005883a 	mov	r2,r4
    2d38:	00000106 	br	2d40 <strchr+0xa4>
    2d3c:	203fdb1e 	bne	r4,zero,2cac <strchr+0x10>
    2d40:	10800104 	addi	r2,r2,4
    2d44:	10c00017 	ldw	r3,0(r2)
    2d48:	28c8f03a 	xor	r4,r5,r3
    2d4c:	19d3883a 	add	r9,r3,r7
    2d50:	00c6303a 	nor	r3,zero,r3
    2d54:	21d1883a 	add	r8,r4,r7
    2d58:	48c6703a 	and	r3,r9,r3
    2d5c:	0108303a 	nor	r4,zero,r4
    2d60:	4108703a 	and	r4,r8,r4
    2d64:	1986703a 	and	r3,r3,r6
    2d68:	2188703a 	and	r4,r4,r6
    2d6c:	183ff326 	beq	r3,zero,2d3c <strchr+0xa0>
    2d70:	003fce06 	br	2cac <strchr+0x10>
    2d74:	0005883a 	mov	r2,zero
    2d78:	f800283a 	ret
    2d7c:	f800283a 	ret
    2d80:	f800283a 	ret

00002d84 <strerror>:
    2d84:	deffff04 	addi	sp,sp,-4
    2d88:	dfc00015 	stw	ra,0(sp)
    2d8c:	00802184 	movi	r2,134
    2d90:	1100052e 	bgeu	r2,r4,2da8 <strerror+0x24>
    2d94:	00034740 	call	3474 <_user_strerror>
    2d98:	10019026 	beq	r2,zero,33dc <strerror+0x658>
    2d9c:	dfc00017 	ldw	ra,0(sp)
    2da0:	dec00104 	addi	sp,sp,4
    2da4:	f800283a 	ret
    2da8:	2105883a 	add	r2,r4,r4
    2dac:	1085883a 	add	r2,r2,r2
    2db0:	00c00034 	movhi	r3,0
    2db4:	18cb7104 	addi	r3,r3,11716
    2db8:	10c5883a 	add	r2,r2,r3
    2dbc:	10800017 	ldw	r2,0(r2)
    2dc0:	1000683a 	jmp	r2
    2dc4:	00002d94 	movui	zero,182
    2dc8:	000033d0 	cmplti	zero,zero,207
    2dcc:	000033c4 	movi	zero,207
    2dd0:	000033b8 	rdprs	zero,zero,206
    2dd4:	000033ac 	andhi	zero,zero,206
    2dd8:	000033a0 	cmpeqi	zero,zero,206
    2ddc:	00003394 	movui	zero,206
    2de0:	00003388 	cmpgei	zero,zero,206
    2de4:	0000337c 	xorhi	zero,zero,205
    2de8:	00003370 	cmpltui	zero,zero,205
    2dec:	00003364 	muli	zero,zero,205
    2df0:	00003358 	cmpnei	zero,zero,205
    2df4:	0000334c 	andi	zero,zero,205
    2df8:	00003340 	call	334 <alt_uCOSIIErrorHandler+0x298>
    2dfc:	00003334 	movhi	zero,204
    2e00:	00003328 	cmpgeui	zero,zero,204
    2e04:	0000331c 	xori	zero,zero,204
    2e08:	00003310 	cmplti	zero,zero,204
    2e0c:	00003304 	movi	zero,204
    2e10:	000032f8 	rdprs	zero,zero,203
    2e14:	000032ec 	andhi	zero,zero,203
    2e18:	000032e0 	cmpeqi	zero,zero,203
    2e1c:	000032d4 	movui	zero,203
    2e20:	000032c8 	cmpgei	zero,zero,203
    2e24:	000032bc 	xorhi	zero,zero,202
    2e28:	000032b0 	cmpltui	zero,zero,202
    2e2c:	000032a4 	muli	zero,zero,202
    2e30:	00003298 	cmpnei	zero,zero,202
    2e34:	0000328c 	andi	zero,zero,202
    2e38:	00003280 	call	328 <alt_uCOSIIErrorHandler+0x28c>
    2e3c:	00003274 	movhi	zero,201
    2e40:	00003268 	cmpgeui	zero,zero,201
    2e44:	0000325c 	xori	zero,zero,201
    2e48:	00003250 	cmplti	zero,zero,201
    2e4c:	00003244 	movi	zero,201
    2e50:	00003238 	rdprs	zero,zero,200
    2e54:	0000322c 	andhi	zero,zero,200
    2e58:	00002d94 	movui	zero,182
    2e5c:	00002d94 	movui	zero,182
    2e60:	00002d94 	movui	zero,182
    2e64:	00002d94 	movui	zero,182
    2e68:	00002d94 	movui	zero,182
    2e6c:	00002d94 	movui	zero,182
    2e70:	00002d94 	movui	zero,182
    2e74:	00002d94 	movui	zero,182
    2e78:	00003220 	cmpeqi	zero,zero,200
    2e7c:	00003214 	movui	zero,200
    2e80:	00002d94 	movui	zero,182
    2e84:	00002d94 	movui	zero,182
    2e88:	00002d94 	movui	zero,182
    2e8c:	00002d94 	movui	zero,182
    2e90:	00002d94 	movui	zero,182
    2e94:	00002d94 	movui	zero,182
    2e98:	00002d94 	movui	zero,182
    2e9c:	00002d94 	movui	zero,182
    2ea0:	00002d94 	movui	zero,182
    2ea4:	00002d94 	movui	zero,182
    2ea8:	00002d94 	movui	zero,182
    2eac:	00002d94 	movui	zero,182
    2eb0:	00002d94 	movui	zero,182
    2eb4:	00003208 	cmpgei	zero,zero,200
    2eb8:	00002d94 	movui	zero,182
    2ebc:	000031fc 	xorhi	zero,zero,199
    2ec0:	000031f0 	cmpltui	zero,zero,199
    2ec4:	000031e4 	muli	zero,zero,199
    2ec8:	000031d8 	cmpnei	zero,zero,199
    2ecc:	000031cc 	andi	zero,zero,199
    2ed0:	000031c0 	call	31c <alt_uCOSIIErrorHandler+0x280>
    2ed4:	000031b4 	movhi	zero,198
    2ed8:	000031a8 	cmpgeui	zero,zero,198
    2edc:	0000319c 	xori	zero,zero,198
    2ee0:	00003190 	cmplti	zero,zero,198
    2ee4:	00002d94 	movui	zero,182
    2ee8:	00002d94 	movui	zero,182
    2eec:	00003184 	movi	zero,198
    2ef0:	00002d94 	movui	zero,182
    2ef4:	00002d94 	movui	zero,182
    2ef8:	00003178 	rdprs	zero,zero,197
    2efc:	00002d94 	movui	zero,182
    2f00:	00002d94 	movui	zero,182
    2f04:	00002d94 	movui	zero,182
    2f08:	00002d94 	movui	zero,182
    2f0c:	00002d94 	movui	zero,182
    2f10:	0000316c 	andhi	zero,zero,197
    2f14:	00003160 	cmpeqi	zero,zero,197
    2f18:	00003154 	movui	zero,197
    2f1c:	00003148 	cmpgei	zero,zero,197
    2f20:	0000313c 	xorhi	zero,zero,196
    2f24:	00003130 	cmpltui	zero,zero,196
    2f28:	00003124 	muli	zero,zero,196
    2f2c:	00003118 	cmpnei	zero,zero,196
    2f30:	0000310c 	andi	zero,zero,196
    2f34:	00003100 	call	310 <alt_uCOSIIErrorHandler+0x274>
    2f38:	00002d94 	movui	zero,182
    2f3c:	00002d94 	movui	zero,182
    2f40:	000030f4 	movhi	zero,195
    2f44:	00002d94 	movui	zero,182
    2f48:	00002d94 	movui	zero,182
    2f4c:	00002d94 	movui	zero,182
    2f50:	00002d94 	movui	zero,182
    2f54:	00002d94 	movui	zero,182
    2f58:	00002d94 	movui	zero,182
    2f5c:	00002d94 	movui	zero,182
    2f60:	00002d94 	movui	zero,182
    2f64:	00002d94 	movui	zero,182
    2f68:	000030e8 	cmpgeui	zero,zero,195
    2f6c:	000030dc 	xori	zero,zero,195
    2f70:	000030d0 	cmplti	zero,zero,195
    2f74:	000030c4 	movi	zero,195
    2f78:	000030b8 	rdprs	zero,zero,194
    2f7c:	000030ac 	andhi	zero,zero,194
    2f80:	000030a0 	cmpeqi	zero,zero,194
    2f84:	00003094 	movui	zero,194
    2f88:	00003088 	cmpgei	zero,zero,194
    2f8c:	0000307c 	xorhi	zero,zero,193
    2f90:	00003070 	cmpltui	zero,zero,193
    2f94:	00003064 	muli	zero,zero,193
    2f98:	00003058 	cmpnei	zero,zero,193
    2f9c:	0000304c 	andi	zero,zero,193
    2fa0:	00003040 	call	304 <alt_uCOSIIErrorHandler+0x268>
    2fa4:	00003034 	movhi	zero,192
    2fa8:	00003028 	cmpgeui	zero,zero,192
    2fac:	0000301c 	xori	zero,zero,192
    2fb0:	00003010 	cmplti	zero,zero,192
    2fb4:	00003004 	movi	zero,192
    2fb8:	00002d94 	movui	zero,182
    2fbc:	00002d94 	movui	zero,182
    2fc0:	00002ff8 	rdprs	zero,zero,191
    2fc4:	00002fec 	andhi	zero,zero,191
    2fc8:	00002d94 	movui	zero,182
    2fcc:	00002d94 	movui	zero,182
    2fd0:	00002d94 	movui	zero,182
    2fd4:	00002d94 	movui	zero,182
    2fd8:	00002d94 	movui	zero,182
    2fdc:	00002fe0 	cmpeqi	zero,zero,191
    2fe0:	00800174 	movhi	r2,5
    2fe4:	10b0d404 	addi	r2,r2,-15536
    2fe8:	003f6c06 	br	2d9c <strerror+0x18>
    2fec:	00800174 	movhi	r2,5
    2ff0:	10b1e504 	addi	r2,r2,-14444
    2ff4:	003f6906 	br	2d9c <strerror+0x18>
    2ff8:	00800174 	movhi	r2,5
    2ffc:	10b1f204 	addi	r2,r2,-14392
    3000:	003f6606 	br	2d9c <strerror+0x18>
    3004:	00800174 	movhi	r2,5
    3008:	10b1eb04 	addi	r2,r2,-14420
    300c:	003f6306 	br	2d9c <strerror+0x18>
    3010:	00800174 	movhi	r2,5
    3014:	10b13f04 	addi	r2,r2,-15108
    3018:	003f6006 	br	2d9c <strerror+0x18>
    301c:	00800174 	movhi	r2,5
    3020:	10b20204 	addi	r2,r2,-14328
    3024:	003f5d06 	br	2d9c <strerror+0x18>
    3028:	00800174 	movhi	r2,5
    302c:	10b05a04 	addi	r2,r2,-16024
    3030:	003f5a06 	br	2d9c <strerror+0x18>
    3034:	00800174 	movhi	r2,5
    3038:	10b04c04 	addi	r2,r2,-16080
    303c:	003f5706 	br	2d9c <strerror+0x18>
    3040:	00800174 	movhi	r2,5
    3044:	10b09404 	addi	r2,r2,-15792
    3048:	003f5406 	br	2d9c <strerror+0x18>
    304c:	00800174 	movhi	r2,5
    3050:	10b0c904 	addi	r2,r2,-15580
    3054:	003f5106 	br	2d9c <strerror+0x18>
    3058:	00800174 	movhi	r2,5
    305c:	10b09004 	addi	r2,r2,-15808
    3060:	003f4e06 	br	2d9c <strerror+0x18>
    3064:	00800174 	movhi	r2,5
    3068:	10b20704 	addi	r2,r2,-14308
    306c:	003f4b06 	br	2d9c <strerror+0x18>
    3070:	00800174 	movhi	r2,5
    3074:	10b0a504 	addi	r2,r2,-15724
    3078:	003f4806 	br	2d9c <strerror+0x18>
    307c:	00800174 	movhi	r2,5
    3080:	10b10104 	addi	r2,r2,-15356
    3084:	003f4506 	br	2d9c <strerror+0x18>
    3088:	00800174 	movhi	r2,5
    308c:	10b1dc04 	addi	r2,r2,-14480
    3090:	003f4206 	br	2d9c <strerror+0x18>
    3094:	00800174 	movhi	r2,5
    3098:	10b1d604 	addi	r2,r2,-14504
    309c:	003f3f06 	br	2d9c <strerror+0x18>
    30a0:	00800174 	movhi	r2,5
    30a4:	10b1d104 	addi	r2,r2,-14524
    30a8:	003f3c06 	br	2d9c <strerror+0x18>
    30ac:	00800174 	movhi	r2,5
    30b0:	10b1c804 	addi	r2,r2,-14560
    30b4:	003f3906 	br	2d9c <strerror+0x18>
    30b8:	00800174 	movhi	r2,5
    30bc:	10b1c204 	addi	r2,r2,-14584
    30c0:	003f3606 	br	2d9c <strerror+0x18>
    30c4:	00800174 	movhi	r2,5
    30c8:	10b1ba04 	addi	r2,r2,-14616
    30cc:	003f3306 	br	2d9c <strerror+0x18>
    30d0:	00800174 	movhi	r2,5
    30d4:	10b1b204 	addi	r2,r2,-14648
    30d8:	003f3006 	br	2d9c <strerror+0x18>
    30dc:	00800174 	movhi	r2,5
    30e0:	10b1a604 	addi	r2,r2,-14696
    30e4:	003f2d06 	br	2d9c <strerror+0x18>
    30e8:	00800174 	movhi	r2,5
    30ec:	10b19f04 	addi	r2,r2,-14724
    30f0:	003f2a06 	br	2d9c <strerror+0x18>
    30f4:	00800174 	movhi	r2,5
    30f8:	10b1f904 	addi	r2,r2,-14364
    30fc:	003f2706 	br	2d9c <strerror+0x18>
    3100:	00800174 	movhi	r2,5
    3104:	10b19904 	addi	r2,r2,-14748
    3108:	003f2406 	br	2d9c <strerror+0x18>
    310c:	00800174 	movhi	r2,5
    3110:	10b19204 	addi	r2,r2,-14776
    3114:	003f2106 	br	2d9c <strerror+0x18>
    3118:	00800174 	movhi	r2,5
    311c:	10b18d04 	addi	r2,r2,-14796
    3120:	003f1e06 	br	2d9c <strerror+0x18>
    3124:	00800174 	movhi	r2,5
    3128:	10b18904 	addi	r2,r2,-14812
    312c:	003f1b06 	br	2d9c <strerror+0x18>
    3130:	00800174 	movhi	r2,5
    3134:	10b18204 	addi	r2,r2,-14840
    3138:	003f1806 	br	2d9c <strerror+0x18>
    313c:	00800174 	movhi	r2,5
    3140:	10b17804 	addi	r2,r2,-14880
    3144:	003f1506 	br	2d9c <strerror+0x18>
    3148:	00800174 	movhi	r2,5
    314c:	10b16804 	addi	r2,r2,-14944
    3150:	003f1206 	br	2d9c <strerror+0x18>
    3154:	00800174 	movhi	r2,5
    3158:	10b16004 	addi	r2,r2,-14976
    315c:	003f0f06 	br	2d9c <strerror+0x18>
    3160:	00800174 	movhi	r2,5
    3164:	10b15604 	addi	r2,r2,-15016
    3168:	003f0c06 	br	2d9c <strerror+0x18>
    316c:	00800174 	movhi	r2,5
    3170:	10b14c04 	addi	r2,r2,-15056
    3174:	003f0906 	br	2d9c <strerror+0x18>
    3178:	00800174 	movhi	r2,5
    317c:	10b14904 	addi	r2,r2,-15068
    3180:	003f0606 	br	2d9c <strerror+0x18>
    3184:	00800174 	movhi	r2,5
    3188:	10b14404 	addi	r2,r2,-15088
    318c:	003f0306 	br	2d9c <strerror+0x18>
    3190:	00800174 	movhi	r2,5
    3194:	10b13b04 	addi	r2,r2,-15124
    3198:	003f0006 	br	2d9c <strerror+0x18>
    319c:	00800174 	movhi	r2,5
    31a0:	10b13604 	addi	r2,r2,-15144
    31a4:	003efd06 	br	2d9c <strerror+0x18>
    31a8:	00800174 	movhi	r2,5
    31ac:	10b13204 	addi	r2,r2,-15160
    31b0:	003efa06 	br	2d9c <strerror+0x18>
    31b4:	00800174 	movhi	r2,5
    31b8:	10b12e04 	addi	r2,r2,-15176
    31bc:	003ef706 	br	2d9c <strerror+0x18>
    31c0:	00800174 	movhi	r2,5
    31c4:	10b12804 	addi	r2,r2,-15200
    31c8:	003ef406 	br	2d9c <strerror+0x18>
    31cc:	00800174 	movhi	r2,5
    31d0:	10b12304 	addi	r2,r2,-15220
    31d4:	003ef106 	br	2d9c <strerror+0x18>
    31d8:	00800174 	movhi	r2,5
    31dc:	10b12004 	addi	r2,r2,-15232
    31e0:	003eee06 	br	2d9c <strerror+0x18>
    31e4:	00800174 	movhi	r2,5
    31e8:	10b11804 	addi	r2,r2,-15264
    31ec:	003eeb06 	br	2d9c <strerror+0x18>
    31f0:	00800174 	movhi	r2,5
    31f4:	10b11304 	addi	r2,r2,-15284
    31f8:	003ee806 	br	2d9c <strerror+0x18>
    31fc:	00800174 	movhi	r2,5
    3200:	10b10d04 	addi	r2,r2,-15308
    3204:	003ee506 	br	2d9c <strerror+0x18>
    3208:	00800174 	movhi	r2,5
    320c:	10b10904 	addi	r2,r2,-15324
    3210:	003ee206 	br	2d9c <strerror+0x18>
    3214:	00800174 	movhi	r2,5
    3218:	10b10704 	addi	r2,r2,-15332
    321c:	003edf06 	br	2d9c <strerror+0x18>
    3220:	00800174 	movhi	r2,5
    3224:	10b0fe04 	addi	r2,r2,-15368
    3228:	003edc06 	br	2d9c <strerror+0x18>
    322c:	00800174 	movhi	r2,5
    3230:	10b0f904 	addi	r2,r2,-15388
    3234:	003ed906 	br	2d9c <strerror+0x18>
    3238:	00800174 	movhi	r2,5
    323c:	10b0f204 	addi	r2,r2,-15416
    3240:	003ed606 	br	2d9c <strerror+0x18>
    3244:	00800174 	movhi	r2,5
    3248:	10b0ed04 	addi	r2,r2,-15436
    324c:	003ed306 	br	2d9c <strerror+0x18>
    3250:	00800174 	movhi	r2,5
    3254:	10b0e904 	addi	r2,r2,-15452
    3258:	003ed006 	br	2d9c <strerror+0x18>
    325c:	00800174 	movhi	r2,5
    3260:	10b0e604 	addi	r2,r2,-15464
    3264:	003ecd06 	br	2d9c <strerror+0x18>
    3268:	00800174 	movhi	r2,5
    326c:	10b0e204 	addi	r2,r2,-15480
    3270:	003eca06 	br	2d9c <strerror+0x18>
    3274:	00800174 	movhi	r2,5
    3278:	10b0dc04 	addi	r2,r2,-15504
    327c:	003ec706 	br	2d9c <strerror+0x18>
    3280:	00800174 	movhi	r2,5
    3284:	10b0d804 	addi	r2,r2,-15520
    3288:	003ec406 	br	2d9c <strerror+0x18>
    328c:	00800174 	movhi	r2,5
    3290:	10b0ce04 	addi	r2,r2,-15560
    3294:	003ec106 	br	2d9c <strerror+0x18>
    3298:	00800174 	movhi	r2,5
    329c:	10b0c504 	addi	r2,r2,-15596
    32a0:	003ebe06 	br	2d9c <strerror+0x18>
    32a4:	00800174 	movhi	r2,5
    32a8:	10b0c104 	addi	r2,r2,-15612
    32ac:	003ebb06 	br	2d9c <strerror+0x18>
    32b0:	00800174 	movhi	r2,5
    32b4:	10b0bb04 	addi	r2,r2,-15636
    32b8:	003eb806 	br	2d9c <strerror+0x18>
    32bc:	00800174 	movhi	r2,5
    32c0:	10b0b604 	addi	r2,r2,-15656
    32c4:	003eb506 	br	2d9c <strerror+0x18>
    32c8:	00800174 	movhi	r2,5
    32cc:	10b0ae04 	addi	r2,r2,-15688
    32d0:	003eb206 	br	2d9c <strerror+0x18>
    32d4:	00800174 	movhi	r2,5
    32d8:	10b0a004 	addi	r2,r2,-15744
    32dc:	003eaf06 	br	2d9c <strerror+0x18>
    32e0:	00800174 	movhi	r2,5
    32e4:	10b09c04 	addi	r2,r2,-15760
    32e8:	003eac06 	br	2d9c <strerror+0x18>
    32ec:	00800174 	movhi	r2,5
    32f0:	10b08c04 	addi	r2,r2,-15824
    32f4:	003ea906 	br	2d9c <strerror+0x18>
    32f8:	00800174 	movhi	r2,5
    32fc:	10b08804 	addi	r2,r2,-15840
    3300:	003ea606 	br	2d9c <strerror+0x18>
    3304:	00800174 	movhi	r2,5
    3308:	10b08304 	addi	r2,r2,-15860
    330c:	003ea306 	br	2d9c <strerror+0x18>
    3310:	00800174 	movhi	r2,5
    3314:	10b08004 	addi	r2,r2,-15872
    3318:	003ea006 	br	2d9c <strerror+0x18>
    331c:	00800174 	movhi	r2,5
    3320:	10b07a04 	addi	r2,r2,-15896
    3324:	003e9d06 	br	2d9c <strerror+0x18>
    3328:	00800174 	movhi	r2,5
    332c:	10b07404 	addi	r2,r2,-15920
    3330:	003e9a06 	br	2d9c <strerror+0x18>
    3334:	00800174 	movhi	r2,5
    3338:	10b07104 	addi	r2,r2,-15932
    333c:	003e9706 	br	2d9c <strerror+0x18>
    3340:	00800174 	movhi	r2,5
    3344:	10b06c04 	addi	r2,r2,-15952
    3348:	003e9406 	br	2d9c <strerror+0x18>
    334c:	00800174 	movhi	r2,5
    3350:	10b06704 	addi	r2,r2,-15972
    3354:	003e9106 	br	2d9c <strerror+0x18>
    3358:	00800174 	movhi	r2,5
    335c:	10b06204 	addi	r2,r2,-15992
    3360:	003e8e06 	br	2d9c <strerror+0x18>
    3364:	00800174 	movhi	r2,5
    3368:	10b05704 	addi	r2,r2,-16036
    336c:	003e8b06 	br	2d9c <strerror+0x18>
    3370:	00800174 	movhi	r2,5
    3374:	10b05304 	addi	r2,r2,-16052
    3378:	003e8806 	br	2d9c <strerror+0x18>
    337c:	00800174 	movhi	r2,5
    3380:	10b04704 	addi	r2,r2,-16100
    3384:	003e8506 	br	2d9c <strerror+0x18>
    3388:	00800174 	movhi	r2,5
    338c:	10b04204 	addi	r2,r2,-16120
    3390:	003e8206 	br	2d9c <strerror+0x18>
    3394:	00800174 	movhi	r2,5
    3398:	10b03b04 	addi	r2,r2,-16148
    339c:	003e7f06 	br	2d9c <strerror+0x18>
    33a0:	00800174 	movhi	r2,5
    33a4:	10b03804 	addi	r2,r2,-16160
    33a8:	003e7c06 	br	2d9c <strerror+0x18>
    33ac:	00800174 	movhi	r2,5
    33b0:	10b03204 	addi	r2,r2,-16184
    33b4:	003e7906 	br	2d9c <strerror+0x18>
    33b8:	00800174 	movhi	r2,5
    33bc:	10b02e04 	addi	r2,r2,-16200
    33c0:	003e7606 	br	2d9c <strerror+0x18>
    33c4:	00800174 	movhi	r2,5
    33c8:	10b02704 	addi	r2,r2,-16228
    33cc:	003e7306 	br	2d9c <strerror+0x18>
    33d0:	00800174 	movhi	r2,5
    33d4:	10b02404 	addi	r2,r2,-16240
    33d8:	003e7006 	br	2d9c <strerror+0x18>
    33dc:	00800174 	movhi	r2,5
    33e0:	10b21504 	addi	r2,r2,-14252
    33e4:	003e6d06 	br	2d9c <strerror+0x18>

000033e8 <strlen>:
    33e8:	208000cc 	andi	r2,r4,3
    33ec:	10001f1e 	bne	r2,zero,346c <strlen+0x84>
    33f0:	20800017 	ldw	r2,0(r4)
    33f4:	01ffbff4 	movhi	r7,65279
    33f8:	39ffbfc4 	addi	r7,r7,-257
    33fc:	01a02074 	movhi	r6,32897
    3400:	31a02004 	addi	r6,r6,-32640
    3404:	11c7883a 	add	r3,r2,r7
    3408:	0084303a 	nor	r2,zero,r2
    340c:	1886703a 	and	r3,r3,r2
    3410:	1986703a 	and	r3,r3,r6
    3414:	2005883a 	mov	r2,r4
    3418:	1800101e 	bne	r3,zero,345c <strlen+0x74>
    341c:	10800104 	addi	r2,r2,4
    3420:	10c00017 	ldw	r3,0(r2)
    3424:	19cb883a 	add	r5,r3,r7
    3428:	00c6303a 	nor	r3,zero,r3
    342c:	28c6703a 	and	r3,r5,r3
    3430:	1986703a 	and	r3,r3,r6
    3434:	1800091e 	bne	r3,zero,345c <strlen+0x74>
    3438:	10800104 	addi	r2,r2,4
    343c:	10c00017 	ldw	r3,0(r2)
    3440:	19cb883a 	add	r5,r3,r7
    3444:	00c6303a 	nor	r3,zero,r3
    3448:	28c6703a 	and	r3,r5,r3
    344c:	1986703a 	and	r3,r3,r6
    3450:	183ff226 	beq	r3,zero,341c <strlen+0x34>
    3454:	00000106 	br	345c <strlen+0x74>
    3458:	10800044 	addi	r2,r2,1
    345c:	10c00007 	ldb	r3,0(r2)
    3460:	183ffd1e 	bne	r3,zero,3458 <strlen+0x70>
    3464:	1105c83a 	sub	r2,r2,r4
    3468:	f800283a 	ret
    346c:	2005883a 	mov	r2,r4
    3470:	003ffa06 	br	345c <strlen+0x74>

00003474 <_user_strerror>:
    3474:	0005883a 	mov	r2,zero
    3478:	f800283a 	ret

0000347c <__sprint_r>:
    347c:	30800217 	ldw	r2,8(r6)
    3480:	defffe04 	addi	sp,sp,-8
    3484:	dc000015 	stw	r16,0(sp)
    3488:	dfc00115 	stw	ra,4(sp)
    348c:	3021883a 	mov	r16,r6
    3490:	10000226 	beq	r2,zero,349c <__sprint_r+0x20>
    3494:	00077ec0 	call	77ec <__sfvwrite_r>
    3498:	80000215 	stw	zero,8(r16)
    349c:	80000115 	stw	zero,4(r16)
    34a0:	dfc00117 	ldw	ra,4(sp)
    34a4:	dc000017 	ldw	r16,0(sp)
    34a8:	dec00204 	addi	sp,sp,8
    34ac:	f800283a 	ret

000034b0 <___vfprintf_internal_r>:
    34b0:	defeb904 	addi	sp,sp,-1308
    34b4:	dc013d15 	stw	r16,1268(sp)
    34b8:	d9013015 	stw	r4,1216(sp)
    34bc:	dfc14615 	stw	ra,1304(sp)
    34c0:	df014515 	stw	fp,1300(sp)
    34c4:	ddc14415 	stw	r23,1296(sp)
    34c8:	dd814315 	stw	r22,1292(sp)
    34cc:	dd414215 	stw	r21,1288(sp)
    34d0:	dd014115 	stw	r20,1284(sp)
    34d4:	dcc14015 	stw	r19,1280(sp)
    34d8:	dc813f15 	stw	r18,1276(sp)
    34dc:	dc413e15 	stw	r17,1272(sp)
    34e0:	d9412915 	stw	r5,1188(sp)
    34e4:	3021883a 	mov	r16,r6
    34e8:	d9c12d15 	stw	r7,1204(sp)
    34ec:	0007ed80 	call	7ed8 <_localeconv_r>
    34f0:	10800017 	ldw	r2,0(r2)
    34f4:	d9013017 	ldw	r4,1216(sp)
    34f8:	d8013315 	stw	zero,1228(sp)
    34fc:	d8813715 	stw	r2,1244(sp)
    3500:	d8013415 	stw	zero,1232(sp)
    3504:	20000226 	beq	r4,zero,3510 <___vfprintf_internal_r+0x60>
    3508:	20800e17 	ldw	r2,56(r4)
    350c:	10019826 	beq	r2,zero,3b70 <___vfprintf_internal_r+0x6c0>
    3510:	da012917 	ldw	r8,1188(sp)
    3514:	4080030b 	ldhu	r2,12(r8)
    3518:	10c0020c 	andi	r3,r2,8
    351c:	18ffffcc 	andi	r3,r3,65535
    3520:	18e0001c 	xori	r3,r3,32768
    3524:	18e00004 	addi	r3,r3,-32768
    3528:	18013a26 	beq	r3,zero,3a14 <___vfprintf_internal_r+0x564>
    352c:	40c00417 	ldw	r3,16(r8)
    3530:	18013826 	beq	r3,zero,3a14 <___vfprintf_internal_r+0x564>
    3534:	1100068c 	andi	r4,r2,26
    3538:	00c00284 	movi	r3,10
    353c:	20c13e26 	beq	r4,r3,3a38 <___vfprintf_internal_r+0x588>
    3540:	da010dc4 	addi	r8,sp,1079
    3544:	d8800404 	addi	r2,sp,16
    3548:	da012615 	stw	r8,1176(sp)
    354c:	d8811b15 	stw	r2,1132(sp)
    3550:	1013883a 	mov	r9,r2
    3554:	d8812617 	ldw	r2,1176(sp)
    3558:	da010e04 	addi	r8,sp,1080
    355c:	dc413017 	ldw	r17,1216(sp)
    3560:	da012715 	stw	r8,1180(sp)
    3564:	4091c83a 	sub	r8,r8,r2
    3568:	d8011d15 	stw	zero,1140(sp)
    356c:	d8011c15 	stw	zero,1136(sp)
    3570:	802b883a 	mov	r21,r16
    3574:	d8013215 	stw	zero,1224(sp)
    3578:	d8013615 	stw	zero,1240(sp)
    357c:	d8013515 	stw	zero,1236(sp)
    3580:	d8012c15 	stw	zero,1200(sp)
    3584:	da013915 	stw	r8,1252(sp)
    3588:	a8800007 	ldb	r2,0(r21)
    358c:	1002ec26 	beq	r2,zero,4140 <___vfprintf_internal_r+0xc90>
    3590:	00c00944 	movi	r3,37
    3594:	a825883a 	mov	r18,r21
    3598:	10c0021e 	bne	r2,r3,35a4 <___vfprintf_internal_r+0xf4>
    359c:	00001406 	br	35f0 <___vfprintf_internal_r+0x140>
    35a0:	10c00326 	beq	r2,r3,35b0 <___vfprintf_internal_r+0x100>
    35a4:	94800044 	addi	r18,r18,1
    35a8:	90800007 	ldb	r2,0(r18)
    35ac:	103ffc1e 	bne	r2,zero,35a0 <___vfprintf_internal_r+0xf0>
    35b0:	9561c83a 	sub	r16,r18,r21
    35b4:	80000e26 	beq	r16,zero,35f0 <___vfprintf_internal_r+0x140>
    35b8:	da011d17 	ldw	r8,1140(sp)
    35bc:	d8c11c17 	ldw	r3,1136(sp)
    35c0:	4d400015 	stw	r21,0(r9)
    35c4:	4c000115 	stw	r16,4(r9)
    35c8:	4411883a 	add	r8,r8,r16
    35cc:	18c00044 	addi	r3,r3,1
    35d0:	da011d15 	stw	r8,1140(sp)
    35d4:	d8c11c15 	stw	r3,1136(sp)
    35d8:	008001c4 	movi	r2,7
    35dc:	10c15d16 	blt	r2,r3,3b54 <___vfprintf_internal_r+0x6a4>
    35e0:	4a400204 	addi	r9,r9,8
    35e4:	d8812c17 	ldw	r2,1200(sp)
    35e8:	1405883a 	add	r2,r2,r16
    35ec:	d8812c15 	stw	r2,1200(sp)
    35f0:	90800007 	ldb	r2,0(r18)
    35f4:	10013b26 	beq	r2,zero,3ae4 <___vfprintf_internal_r+0x634>
    35f8:	95400044 	addi	r21,r18,1
    35fc:	94800047 	ldb	r18,1(r18)
    3600:	d8012585 	stb	zero,1174(sp)
    3604:	073fffc4 	movi	fp,-1
    3608:	d8012e15 	stw	zero,1208(sp)
    360c:	0021883a 	mov	r16,zero
    3610:	00c01604 	movi	r3,88
    3614:	01400244 	movi	r5,9
    3618:	02800a84 	movi	r10,42
    361c:	01c01b04 	movi	r7,108
    3620:	01800ac4 	movi	r6,43
    3624:	02c00804 	movi	r11,32
    3628:	ad400044 	addi	r21,r21,1
    362c:	90bff804 	addi	r2,r18,-32
    3630:	1880092e 	bgeu	r3,r2,3658 <___vfprintf_internal_r+0x1a8>
    3634:	90012b26 	beq	r18,zero,3ae4 <___vfprintf_internal_r+0x634>
    3638:	00c00044 	movi	r3,1
    363c:	d8c12815 	stw	r3,1184(sp)
    3640:	dc810405 	stb	r18,1040(sp)
    3644:	d8012585 	stb	zero,1174(sp)
    3648:	d8c12b15 	stw	r3,1196(sp)
    364c:	dcc10404 	addi	r19,sp,1040
    3650:	d8013115 	stw	zero,1220(sp)
    3654:	00008806 	br	3878 <___vfprintf_internal_r+0x3c8>
    3658:	1085883a 	add	r2,r2,r2
    365c:	1085883a 	add	r2,r2,r2
    3660:	01000034 	movhi	r4,0
    3664:	210d9d04 	addi	r4,r4,13940
    3668:	1105883a 	add	r2,r2,r4
    366c:	10800017 	ldw	r2,0(r2)
    3670:	1000683a 	jmp	r2
    3674:	00003c28 	cmpgeui	zero,zero,240
    3678:	00003634 	movhi	zero,216
    367c:	00003634 	movhi	zero,216
    3680:	00003c3c 	xorhi	zero,zero,240
    3684:	00003634 	movhi	zero,216
    3688:	00003634 	movhi	zero,216
    368c:	00003634 	movhi	zero,216
    3690:	00003634 	movhi	zero,216
    3694:	00003634 	movhi	zero,216
    3698:	00003634 	movhi	zero,216
    369c:	00003d24 	muli	zero,zero,244
    36a0:	00003be0 	cmpeqi	zero,zero,239
    36a4:	00003634 	movhi	zero,216
    36a8:	00003a08 	cmpgei	zero,zero,232
    36ac:	00003bec 	andhi	zero,zero,239
    36b0:	00003634 	movhi	zero,216
    36b4:	00003c48 	cmpgei	zero,zero,241
    36b8:	00003d48 	cmpgei	zero,zero,245
    36bc:	00003d48 	cmpgei	zero,zero,245
    36c0:	00003d48 	cmpgei	zero,zero,245
    36c4:	00003d48 	cmpgei	zero,zero,245
    36c8:	00003d48 	cmpgei	zero,zero,245
    36cc:	00003d48 	cmpgei	zero,zero,245
    36d0:	00003d48 	cmpgei	zero,zero,245
    36d4:	00003d48 	cmpgei	zero,zero,245
    36d8:	00003d48 	cmpgei	zero,zero,245
    36dc:	00003634 	movhi	zero,216
    36e0:	00003634 	movhi	zero,216
    36e4:	00003634 	movhi	zero,216
    36e8:	00003634 	movhi	zero,216
    36ec:	00003634 	movhi	zero,216
    36f0:	00003634 	movhi	zero,216
    36f4:	00003634 	movhi	zero,216
    36f8:	00003634 	movhi	zero,216
    36fc:	00003634 	movhi	zero,216
    3700:	00003634 	movhi	zero,216
    3704:	000039a4 	muli	zero,zero,230
    3708:	00003d70 	cmpltui	zero,zero,245
    370c:	00003634 	movhi	zero,216
    3710:	00003d70 	cmpltui	zero,zero,245
    3714:	00003634 	movhi	zero,216
    3718:	00003634 	movhi	zero,216
    371c:	00003634 	movhi	zero,216
    3720:	00003634 	movhi	zero,216
    3724:	00003ee0 	cmpeqi	zero,zero,251
    3728:	00003634 	movhi	zero,216
    372c:	00003634 	movhi	zero,216
    3730:	0000396c 	andhi	zero,zero,229
    3734:	00003634 	movhi	zero,216
    3738:	00003634 	movhi	zero,216
    373c:	00003634 	movhi	zero,216
    3740:	00003634 	movhi	zero,216
    3744:	00003634 	movhi	zero,216
    3748:	000037d8 	cmpnei	zero,zero,223
    374c:	00003634 	movhi	zero,216
    3750:	00003634 	movhi	zero,216
    3754:	00003c54 	movui	zero,241
    3758:	00003634 	movhi	zero,216
    375c:	00003634 	movhi	zero,216
    3760:	00003634 	movhi	zero,216
    3764:	00003634 	movhi	zero,216
    3768:	00003634 	movhi	zero,216
    376c:	00003634 	movhi	zero,216
    3770:	00003634 	movhi	zero,216
    3774:	00003634 	movhi	zero,216
    3778:	00003634 	movhi	zero,216
    377c:	00003634 	movhi	zero,216
    3780:	00003cc8 	cmpgei	zero,zero,243
    3784:	000039a8 	cmpgeui	zero,zero,230
    3788:	00003d70 	cmpltui	zero,zero,245
    378c:	00003d70 	cmpltui	zero,zero,245
    3790:	00003d70 	cmpltui	zero,zero,245
    3794:	00003ca8 	cmpgeui	zero,zero,242
    3798:	000039a8 	cmpgeui	zero,zero,230
    379c:	00003634 	movhi	zero,216
    37a0:	00003634 	movhi	zero,216
    37a4:	00003cb4 	movhi	zero,242
    37a8:	00003634 	movhi	zero,216
    37ac:	00003cf8 	rdprs	zero,zero,243
    37b0:	00003970 	cmpltui	zero,zero,229
    37b4:	00003df8 	rdprs	zero,zero,247
    37b8:	00003e44 	movi	zero,249
    37bc:	00003634 	movhi	zero,216
    37c0:	00003e50 	cmplti	zero,zero,249
    37c4:	00003634 	movhi	zero,216
    37c8:	000037dc 	xori	zero,zero,223
    37