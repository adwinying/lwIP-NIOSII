
lwIP_NIOS_II_Example.elf:     file format elf32-littlenios2
lwIP_NIOS_II_Example.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00032ae4 memsz 0x00032ae4 flags r-x
    LOAD off    0x00033b04 vaddr 0x00032b04 paddr 0x00034d20 align 2**12
         filesz 0x0000221c memsz 0x0000221c flags rw-
    LOAD off    0x00035f3c vaddr 0x00036f3c paddr 0x00036f3c align 2**12
         filesz 0x00000000 memsz 0x0000e074 flags rw-
    LOAD off    0x00036000 vaddr 0x05000000 paddr 0x05000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05000000  05000000  00036000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0002da60  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005084  0002da80  0002da80  0002ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       0000221c  00032b04  00034d20  00033b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000e074  00036f3c  00036f3c  00035f3c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000015f8  00000000  00000000  00036048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0003e7b4  00000000  00000000  00037640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d8ce  00000000  00000000  00075df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00012549  00000000  00000000  000836c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004058  00000000  00000000  00095c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00008200  00000000  00000000  00099c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00014644  00000000  00000000  000a1e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000050  00000000  00000000  000b64a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a98  00000000  00000000  000b64f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  000bdfcd  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  000bdfd0  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  000bdfd3  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000bdfd4  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  000bdfd5  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  000bdfd9  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  000bdfdd  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  000bdfe1  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  000bdfea  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  000bdff3  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  000bdffc  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002e  00000000  00000000  000be008  2**0
                  CONTENTS, READONLY
 27 .jdi          00005066  00000000  00000000  000be036  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001a200d  00000000  00000000  000c309c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
0002da80 l    d  .rodata	00000000 .rodata
00032b04 l    d  .rwdata	00000000 .rwdata
00036f3c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lwIP_NIOS_II_Example_bsp/obj/HAL/src/crt0.o
00000098 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alteraTseEthernetif.c
0000009c l     F .text	00000064 low_level_init
00000100 l     F .text	00000234 low_level_input
00000000 l    df *ABS*	00000000 fs.c
0002db34 l     O .rodata	00000345 data_img_sics_gif
0002de79 l     O .rodata	00000298 data_404_html
0002e111 l     O .rodata	00000671 data_index_html
00000000 l    df *ABS*	00000000 fsdata.c
00000000 l    df *ABS*	00000000 httpd.c
00000624 l     F .text	00000040 conn_err
00000664 l     F .text	00000060 close_conn
000006c4 l     F .text	000000f4 send_data
000007b8 l     F .text	000000c4 http_poll
0000087c l     F .text	00000070 http_sent
000008ec l     F .text	0000024c http_recv
00000b38 l     F .text	00000100 http_accept
00000000 l    df *ABS*	00000000 lwip_tse_mac.c
00000000 l    df *ABS*	00000000 tse_my_system.c
00000000 l    df *ABS*	00000000 api_lib.c
00000000 l    df *ABS*	00000000 api_msg.c
00000000 l    df *ABS*	00000000 err.c
00000000 l    df *ABS*	00000000 netbuf.c
00000000 l    df *ABS*	00000000 netdb.c
00000000 l    df *ABS*	00000000 netifapi.c
00000000 l    df *ABS*	00000000 sockets.c
00000000 l    df *ABS*	00000000 tcpip.c
00000000 l    df *ABS*	00000000 def.c
00000000 l    df *ABS*	00000000 dhcp.c
0000196c l     F .text	00000080 dhcp_handle_nak
0000366c l     F .text	00000058 dhcp_set_state
00002b7c l     F .text	000001a0 dhcp_discover
000019ec l     F .text	00000098 dhcp_check
00001a84 l     F .text	000000d0 dhcp_handle_offer
00001b54 l     F .text	00000254 dhcp_select
00004698 l     F .text	000004d4 dhcp_create_msg
000036c4 l     F .text	000000e4 dhcp_option
00003844 l     F .text	000000d8 dhcp_option_short
0000391c l     F .text	0000014c dhcp_option_long
000037a8 l     F .text	0000009c dhcp_option_byte
00004c4c l     F .text	00000160 dhcp_option_trailer
00004b6c l     F .text	000000e0 dhcp_delete_msg
00002124 l     F .text	00000078 dhcp_t2_timeout
000020ac l     F .text	00000078 dhcp_t1_timeout
00001f18 l     F .text	00000194 dhcp_timeout
00002d1c l     F .text	00000280 dhcp_bind
000030ec l     F .text	00000150 dhcp_rebind
0000323c l     F .text	000001a4 dhcp_reboot
0000219c l     F .text	000001fc dhcp_handle_ack
00004374 l     F .text	00000324 dhcp_recv
00002a18 l     F .text	00000164 dhcp_decline
00003a68 l     F .text	0000090c dhcp_parse_reply
00034ca0 l     O .rwdata	00000004 xid.3565
00000000 l    df *ABS*	00000000 dns.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 autoip.c
00000000 l    df *ABS*	00000000 icmp.c
000053dc l     F .text	0000017c icmp_send_response
00000000 l    df *ABS*	00000000 igmp.c
00000000 l    df *ABS*	00000000 inet.c
00000000 l    df *ABS*	00000000 inet_chksum.c
00005558 l     F .text	0000014c lwip_standard_chksum
00000000 l    df *ABS*	00000000 ip.c
00036f3c l     O .bss	00000002 ip_id
00000000 l    df *ABS*	00000000 ip_addr.c
00037008 l     O .bss	00000010 str.3022
00000000 l    df *ABS*	00000000 ip_frag.c
00036f50 l     O .bss	00000004 reassdatagrams
00036f54 l     O .bss	00000002 ip_reass_pbufcount
00007014 l     F .text	00000264 ip_reass_free_complete_datagram
000074a8 l     F .text	00000090 ip_reass_dequeue_datagram
00007278 l     F .text	00000154 ip_reass_remove_oldest_datagram
000073cc l     F .text	000000dc ip_reass_enqueue_new_datagram
00007538 l     F .text	0000055c ip_reass_chain_frag_into_datagram_and_validate
00037018 l     O .bss	000005e0 buf
00000000 l    df *ABS*	00000000 mem.c
00036f58 l     O .bss	00000004 ram
00036f5c l     O .bss	00000004 ram_end
00036f60 l     O .bss	00000004 lfree
00008250 l     F .text	000001f8 plug_holes
00000000 l    df *ABS*	00000000 memp.c
000375f8 l     O .bss	00000024 memp_tab
0002f454 l     O .rodata	00000012 memp_sizes
0002f466 l     O .rodata	00000012 memp_num
0003761c l     O .bss	0000cdcf memp_memory
00000000 l    df *ABS*	00000000 netif.c
00036f64 l     O .bss	00000001 netif_num
00000000 l    df *ABS*	00000000 pbuf.c
00009a3c l     F .text	00000024 pbuf_pool_is_empty
00000000 l    df *ABS*	00000000 raw.c
00036f74 l     O .bss	00000004 raw_pcbs
00000000 l    df *ABS*	00000000 asn1_dec.c
00000000 l    df *ABS*	00000000 asn1_enc.c
00000000 l    df *ABS*	00000000 mib2.c
00000000 l    df *ABS*	00000000 mib_structs.c
00000000 l    df *ABS*	00000000 msg_in.c
00000000 l    df *ABS*	00000000 msg_out.c
00000000 l    df *ABS*	00000000 stats.c
00000000 l    df *ABS*	00000000 sys.c
00000000 l    df *ABS*	00000000 tcp.c
00034cac l     O .rwdata	00000002 tcp_port
00036f78 l     O .bss	00000001 tcp_timer
00036f79 l     O .bss	00000001 tcp_timer_ctr
0000b8a8 l     F .text	00000390 tcp_close_shutdown
0000c51c l     F .text	000000e8 tcp_new_port
0000c0d4 l     F .text	00000030 tcp_accept_null
0000d564 l     F .text	000000d4 tcp_kill_prio
0000d638 l     F .text	00000090 tcp_kill_timewait
00034cb8 l     O .rwdata	00000004 iss.3697
00000000 l    df *ABS*	00000000 tcp_in.c
000443ec l     O .bss	00000010 inseg
00036f94 l     O .bss	00000004 tcphdr
00036f98 l     O .bss	00000004 iphdr
00036f9c l     O .bss	00000004 seqno
00036fa0 l     O .bss	00000004 ackno
00036fa4 l     O .bss	00000001 flags
00036fa6 l     O .bss	00000002 tcplen
00036fa8 l     O .bss	00000001 recv_flags
00036fac l     O .bss	00000004 recv_data
0000ee20 l     F .text	00000138 tcp_timewait_input
0000eb90 l     F .text	00000290 tcp_listen_input
0000ef58 l     F .text	00000be8 tcp_process
00011b40 l     F .text	000001f8 tcp_parseopt
0000fd14 l     F .text	00001e2c tcp_receive
0000fb40 l     F .text	000001d4 tcp_oos_insert_segment
00000000 l    df *ABS*	00000000 tcp_out.c
00011d38 l     F .text	00000254 tcp_output_alloc_header
0001206c l     F .text	00000264 tcp_create_segment
000122d0 l     F .text	00000154 tcp_pbuf_prealloc
00012424 l     F .text	000001b8 tcp_write_checks
00013c84 l     F .text	000003d0 tcp_output_segment
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 udp.c
00034cbc l     O .rwdata	00000002 udp_port
000149fc l     F .text	000000ac udp_new_port
00000000 l    df *ABS*	00000000 etharp.c
000443fc l     O .bss	000000c8 arp_table
00036fb8 l     O .bss	00000001 etharp_cached_entry
00015848 l     F .text	000000ec free_etharp_q
00015934 l     F .text	00000098 etharp_free_entry
00015b40 l     F .text	00000438 etharp_find_entry
00015f78 l     F .text	000000c8 etharp_send_ip
00016040 l     F .text	00000224 etharp_update_arp_entry
000163f8 l     F .text	000000c8 etharp_ip_input
000164c0 l     F .text	000003a4 etharp_arp_input
00016864 l     F .text	00000158 etharp_output_to_arp_index
00017188 l     F .text	00000270 etharp_raw
00000000 l    df *ABS*	00000000 ethernetif.c
00000000 l    df *ABS*	00000000 auth.c
00000000 l    df *ABS*	00000000 chap.c
00000000 l    df *ABS*	00000000 chpms.c
00000000 l    df *ABS*	00000000 fsm.c
00000000 l    df *ABS*	00000000 ipcp.c
00000000 l    df *ABS*	00000000 lcp.c
00000000 l    df *ABS*	00000000 magic.c
00000000 l    df *ABS*	00000000 md5.c
00000000 l    df *ABS*	00000000 pap.c
00000000 l    df *ABS*	00000000 ppp.c
00000000 l    df *ABS*	00000000 ppp_oe.c
00000000 l    df *ABS*	00000000 randm.c
00000000 l    df *ABS*	00000000 vj.c
00000000 l    df *ABS*	00000000 slipif.c
00000000 l    df *ABS*	00000000 main.c
000444c4 l     O .bss	00000018 lwipAlarm
00036fbc l     O .bss	00000004 lwipProcessTimerFlag
00036fc0 l     O .bss	00000004 lwipTicksPer250mS
00036fc4 l     O .bss	00000004 lwip250mStimer
00036fc8 l     O .bss	00000004 ip_zero.3911
00000000 l    df *ABS*	00000000 impure.c
00032d44 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000180f0 l     F .text	00000034 __sprint_r
00030942 l     O .rodata	00000010 blanks.3515
00030952 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0001a20c l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0001bc48 l     F .text	00000008 __fp_lock
0001bc50 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00030984 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00030acc l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0001fd18 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00020a58 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021280 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00021398 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000213c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000214c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000215b0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002169c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00021874 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00034cf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00021dac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00021ee8 l     F .text	00000038 alt_dev_reg
00033700 l     O .rwdata	0000009c vic_0
0003379c l     O .rwdata	000000d8 ext_flash
00033874 l     O .rwdata	00001060 jtag_uart
000348d4 l     O .rwdata	00000120 lcd
000349f4 l     O .rwdata	00000030 sgdma_rx
00034a24 l     O .rwdata	00000030 sgdma_tx
00034a54 l     O .rwdata	000000c4 rs232
00034b18 l     O .rwdata	000000c4 uart_0
00034bdc l     O .rwdata	000000c4 uart_1
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
00022070 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
00022ea8 l     F .text	00000080 alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023f58 l     F .text	00000204 altera_avalon_jtag_uart_irq
0002415c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00034d04 l     O .rwdata	00000004 colstart
000247f0 l     F .text	000000b4 lcd_write_command
000248a4 l     F .text	000000d0 lcd_write_data
00024974 l     F .text	000000cc lcd_clear_screen
00024a40 l     F .text	000001ec lcd_repaint_screen
00024c2c l     F .text	000000cc lcd_scroll_up
00024cf8 l     F .text	000002bc lcd_handle_escape
00025498 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
000256dc l     F .text	00000050 alt_get_errno
00026298 l     F .text	000000e4 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00026420 l     F .text	000000a0 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
00037003 l     O .bss	00000001 tse_system_count.3776
00037002 l     O .bss	00000001 is_init.3858
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0002b6a8 l     F .text	00000098 altera_avalon_uart_irq
0002b740 l     F .text	000000d8 altera_avalon_uart_rxirq
0002b818 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0002b9a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0002bc54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
00032860 l     O .rodata	00000020 VEC_SIZE_ARRAY.1688
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002c4b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002c7d8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0002c910 l     F .text	00000050 alt_get_errno
0002c960 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
0002cf14 l     F .text	000000cc alt_write_word_amd
0002cdf8 l     F .text	0000011c alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
0002d1c8 l     F .text	0000017c alt_unlock_block_intel
0002d344 l     F .text	000000d4 alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00032981 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00036f40 g     O .bss	00000004 current_iphdr_src
00005afc g     F .text	00000044 inet_chksum
0000b470 g     F .text	00000048 raw_bind
0001e3cc g     F .text	00000074 _mprec_log10
00007a94 g     F .text	000004b8 ip_reass
000277b0 g     F .text	000000d8 alt_tse_get_mac_info
00009fa4 g     F .text	00000284 pbuf_realloc
0001e4bc g     F .text	00000084 __any_on
0001f088 g     F .text	00000064 _isatty_r
000309b4 g     O .rodata	00000028 __mprec_tinytens
000217bc g     F .text	00000078 alt_main
0002d6e0 g     F .text	00000094 strcpy
0000dd88 g     F .text	00000030 tcp_next_iss
000210d0 g     F .text	00000044 __ashldi3
00017e2c g     F .text	00000084 _puts_r
00022980 g     F .text	00000040 alt_read_query_entry_32bit
000099c4 g     F .text	00000078 pbuf_free_ooseq
0000c2dc g     F .text	00000128 tcp_update_rcv_ann_wnd
0001f0ec g     F .text	0000006c _lseek_r
00036f68 g     O .bss	00000004 netif_list
00022138 g     F .text	000002ac alt_flash_cfi_write
00002468 g     F .text	00000078 dhcp_cleanup
0002e7a4 g     O .rodata	00000010 file_index_html
00034d20 g       *ABS*	00000000 __flash_rwdata_start
0002b388 g     F .text	000000f0 marvell_cfg_rgmii
000205b8 g     F .text	0000005c __eqdf2
00014054 g     F .text	00000250 tcp_rst
0000b1cc g     F .text	000000c8 pbuf_memfind
00028998 g     F .text	00000210 alt_tse_phy_print_profile
00044fb0 g       *ABS*	00000000 __alt_heap_start
0002b128 g     F .text	00000098 marvell_phy_cfg
000173f8 g     F .text	00000074 etharp_request
00017c44 g     F .text	0000003c printf
000024e0 g     F .text	00000248 dhcp_start
00025850 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0000d9e8 g     F .text	0000006c tcp_err
00034ca4 g     O .rwdata	00000004 ip_addr_any
000056a4 g     F .text	000001f8 inet_chksum_pseudo
000028d4 g     F .text	000000a8 dhcp_network_changed
05000000 g       *ABS*	00000000 __alt_mem_sram
0001ece0 g     F .text	0000005c __sseek
0001bcd8 g     F .text	0000010c __sinit
00015754 g     F .text	0000009c udp_remove
00019f40 g     F .text	0000013c __swbuf_r
00006240 g     F .text	00000468 ip_output_if
0001c970 g     F .text	0000009c _setlocale_r
0001bc64 g     F .text	00000064 __sfmoreglue
000091c0 g     F .text	000000f8 memp_free
00021854 g     F .text	00000020 __malloc_unlock
0000a420 g     F .text	000001cc pbuf_free
0000d910 g     F .text	0000006c tcp_recv
000279f4 g     F .text	00000a74 getPHYSpeed
0000a678 g     F .text	00000140 pbuf_cat
00044dac g     O .bss	00000034 alteraTseNetif
00025f54 g     F .text	00000344 alt_avalon_sgdma_construct_descriptor_burst
0001d470 g     F .text	00000128 memmove
000066a8 g     F .text	000000ec ip_output
00016264 g     F .text	000000a0 etharp_cleanup_netif
000150e0 g     F .text	00000094 udp_sendto
0001bcc8 g     F .text	00000010 _cleanup
0001d598 g     F .text	000000a8 _Balloc
00006924 g     F .text	00000044 ipaddr_addr
00014664 g     F .text	00000144 tcp_keepalive
000159cc g     F .text	00000174 etharp_tmr
0002a39c g     F .text	000001bc alt_tse_phy_set_adv_1000
00034d10 g     O .rwdata	00000001 max_mac_system
0000d6c8 g     F .text	000001ec tcp_alloc
00026a68 g     F .text	000009fc alt_tse_system_add_sys
00020670 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00015174 g     F .text	000002ec udp_sendto_if
00022b0c g     F .text	0000004c alt_write_flash_command_32bit_device_16bit_mode
05000000 g     F .entry	0000001c __reset
0000d8e0 g     F .text	00000030 tcp_arg
00036f7a g     O .bss	00000001 tcp_active_pcbs_changed
00036f7c g     O .bss	00000004 tcp_active_pcbs
00025aac g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001f020 g     F .text	00000068 _fstat_r
00036fb4 g     O .bss	00000004 udp_pcbs
00032b04 g     O .rwdata	00000240 tse_mac_device
0002262c g     F .text	000002d8 alt_flash_program_block
00036fe8 g     O .bss	00000004 errno
0001746c g     F .text	00000268 ethernet_input
0000bc94 g     F .text	000000f0 tcp_shutdown
0002ac70 g     F .text	000004b8 alt_tse_phy_set_common_speed
0000a638 g     F .text	00000040 pbuf_ref
00044de0 g     O .bss	00000020 pmac_groups
00009760 g     F .text	00000044 netif_set_netmask
00036ff0 g     O .bss	00000004 alt_argv
0003cca0 g       *ABS*	00000000 _gp
0000d4e8 g     F .text	0000007c tcp_recv_null
00021d7c g     F .text	00000030 usleep
00036f44 g     O .bss	00000004 current_netif
00012efc g     F .text	0000041c tcp_enqueue_flags
0000bc38 g     F .text	0000005c tcp_close
0000c404 g     F .text	00000118 tcp_recved
00021d24 g     F .text	00000058 alt_uncached_malloc
0000db04 g     F .text	000000dc tcp_pcb_purge
00026574 g     F .text	00000060 tse_mac_initTransInfo2
00033580 g     O .rwdata	00000180 alt_fd_list
00006d8c g     F .text	0000003c ipaddr_ntoa
00034cae g     O .rwdata	00000007 tcp_persist_backoff
0002bea4 g       .text	00000000 VIC_0_VECTOR_TABLE
0002c660 g     F .text	00000090 alt_find_dev
00017a44 g     F .text	000000f8 memcpy
000084e8 g     F .text	00000180 mem_free
000267e0 g     F .text	00000054 tse_mac_setMIImode
00036f80 g     O .bss	00000004 tcp_ticks
00036f84 g     O .bss	00000004 tcp_listen_pcbs
00028468 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
000142a4 g     F .text	000000b4 tcp_rexmit_rto
0001bc58 g     F .text	0000000c _cleanup_r
00020794 g     F .text	000000d4 __floatsidf
000265d4 g     F .text	000000e0 tse_mac_sTxWrite
0002c898 g     F .text	00000078 alt_io_redirect
0000d8b4 g     F .text	0000002c tcp_new
00020738 g     F .text	0000005c __ltdf2
000156c8 g     F .text	0000004c udp_disconnect
0000abf0 g     F .text	0000019c pbuf_copy_partial
0002da80 g       *ABS*	00000000 __DTOR_END__
00017eb0 g     F .text	00000014 puts
000033e0 g     F .text	000001a8 dhcp_release
0001e328 g     F .text	000000a4 __ratio
0002fac8 g     O .rodata	0000002c tcp_state_str
0000b6c8 g     F .text	00000044 raw_send
00005b40 g     F .text	0000010c inet_chksum_pbuf
0000ad8c g     F .text	000001b8 pbuf_take
00025b9c g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0002435c g     F .text	00000244 altera_avalon_jtag_uart_read
0002d6b8 g     F .text	00000014 malloc
00017c18 g     F .text	0000002c _printf_r
00036f48 g     O .bss	00000004 current_iphdr_dest
00020b78 g     F .text	00000008 __udivsi3
00044504 g     O .bss	00000100 tse
00021510 g     F .text	000000a0 isatty
00027464 g     F .text	00000164 alt_tse_sys_enable_mdio_sharing
00004de8 g     F .text	0000056c icmp_input
00030a04 g     O .rodata	000000c8 __mprec_tens
00027730 g     F .text	00000080 alt_tse_get_mac_info_index
000092d4 g     F .text	00000104 netif_add
0001ca0c g     F .text	0000000c __locale_charset
0000d3a4 g     F .text	00000050 tcp_segs_free
0002d5e0 g     F .text	0000008c alt_icache_flush
00036fe4 g     O .bss	00000004 __malloc_top_pad
00000590 g     F .text	00000094 fs_open
00034cd4 g     O .rwdata	00000004 __mb_cur_max
0001ca18 g     F .text	0000000c _localeconv_r
000095e8 g     F .text	00000134 netif_set_ipaddr
0001d998 g     F .text	0000003c __i2b
0001c32c g     F .text	000004e4 __sfvwrite_r
00025cc8 g     F .text	00000058 alt_avalon_sgdma_stop
00028508 g     F .text	0000012c alt_tse_phy_wr_mdio_reg
0001eba0 g     F .text	00000064 _sbrk_r
0002cfe0 g     F .text	00000080 alt_program_intel
00028ba8 g     F .text	0000069c alt_tse_mac_group_init
000125dc g     F .text	00000920 tcp_write
00000ca4 g     F .text	00000868 tse_mac_init
00016304 g     F .text	000000f4 etharp_find_addr
0001f158 g     F .text	0000006c _read_r
0002c478 g     F .text	00000024 alt_dcache_flush
00033144 g     O .rwdata	0000000c __lc_ctype
00034cf0 g     O .rwdata	00000004 alt_max_fd
00022904 g     F .text	0000003c alt_read_query_entry_8bit
00020eb8 g     F .text	00000104 __unpack_d
0001eed0 g     F .text	0000013c _fclose_r
0002d060 g     F .text	00000168 alt_erase_block_intel
0000bf48 g     F .text	0000018c tcp_bind
0001bc18 g     F .text	00000030 fflush
00036fe0 g     O .bss	00000004 __malloc_max_sbrked_mem
00005398 g     F .text	00000044 icmp_time_exceeded
0000bf14 g     F .text	00000034 tcp_abort
00007f4c g     F .text	00000304 ip_frag
0002006c g     F .text	00000054 __adddf3
0002e784 g     O .rodata	00000010 file_img_sics_gif
0001e09c g     F .text	00000148 __b2d
0001f78c g     F .text	0000058c __umoddi3
000216ec g     F .text	000000d0 lseek
0000b540 g     F .text	00000188 raw_sendto
00028700 g     F .text	00000298 alt_tse_phy_add_profile_default
00029e04 g     F .text	00000598 alt_tse_phy_get_cap
00034ccc g     O .rwdata	00000004 _global_impure_ptr
0001e540 g     F .text	000005fc _realloc_r
00044fb0 g       *ABS*	00000000 __bss_end
0002572c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00021c20 g     F .text	00000104 alt_tick
0001f1c4 g     F .text	000005c8 __udivdi3
00003588 g     F .text	000000e4 dhcp_stop
00029ca4 g     F .text	00000160 alt_tse_phy_check_link
000309dc g     O .rodata	00000028 __mprec_bigtens
0001d77c g     F .text	00000104 __s2b
0002093c g     F .text	0000011c __floatunsidf
0002b2a4 g     F .text	000000e4 marvell_cfg_sgmii
0000a924 g     F .text	000002cc pbuf_copy
00029ae0 g     F .text	000001c4 alt_tse_phy_restart_an
0001de3c g     F .text	00000058 __mcmp
00014358 g     F .text	000001e8 tcp_rexmit
0002b600 g     F .text	000000a8 altera_avalon_uart_init
00034d1c g     O .rwdata	00000004 __ctype_ptr
0001bef0 g     F .text	00000018 __fp_lock_all
00044e00 g     O .bss	00000020 pphy_profiles
000097cc g     F .text	00000090 netif_set_up
00021b5c g     F .text	000000c4 alt_alarm_stop
02001000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0002fb04 g     O .rodata	00000010 tcp_pcb_lists
00033558 g     O .rwdata	00000028 alt_dev_null
00006860 g     F .text	000000c4 ip4_addr_netmask_valid
00036f88 g     O .bss	00000004 tcp_tmp_pcb
000299c8 g     F .text	00000118 alt_tse_phy_init
000176d4 g     F .text	0000002c lwipAlarmCallback
00022e0c g     F .text	0000009c alt_set_flash_algorithm_func
00025d20 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
0002c49c g     F .text	0000001c alt_dcache_flush_all
0001d880 g     F .text	00000068 __hi0bits
00020868 g     F .text	000000d4 __fixdfsi
00001658 g     F .text	00000170 tse_mac_raw_send
00008448 g     F .text	000000a0 mem_init
0002c0a4 g       .text	00000000 alt_shadow_non_preemptive_interrupt
000229c0 g     F .text	00000044 alt_write_flash_command_8bit_device_8bit_mode
00011f8c g     F .text	000000e0 tcp_send_fin
00034d20 g       *ABS*	00000000 __ram_rwdata_end
00013460 g     F .text	00000824 tcp_output
00034ce8 g     O .rwdata	00000008 alt_dev_list
00021dfc g     F .text	000000ec write
00008668 g     F .text	00000350 mem_trim
00025e74 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00017c80 g     F .text	000000bc _putc_r
00032b04 g       *ABS*	00000000 __ram_rodata_end
00021414 g     F .text	000000ac fstat
0002108c g     F .text	00000044 __lshrdi3
00036fb0 g     O .bss	00000004 tcp_input_pcb
0000b338 g     F .text	00000138 raw_input
0002b478 g     F .text	00000078 DP83848C_link_status_read
00013318 g     F .text	00000148 tcp_send_empty_ack
00023c60 g     F .text	000000d4 alt_check_primary_table
00014540 g     F .text	00000124 tcp_rexmit_fast
0001dbb4 g     F .text	0000012c __pow5mult
00036fd8 g     O .bss	00000004 __nlocale_changed
00020b80 g     F .text	00000008 __umodsi3
00022470 g     F .text	00000064 alt_flash_cfi_read
00022ba4 g     F .text	00000038 alt_write_native_8bit
00006968 g     F .text	00000424 ipaddr_aton
00006794 g     F .text	000000cc ip4_addr_isbroadcast
000097a4 g     F .text	00000028 netif_set_default
00015714 g     F .text	00000040 udp_recv
00025b20 g     F .text	0000007c alt_avalon_sgdma_construct_mem_to_stream_desc
00025c24 g     F .text	00000050 alt_avalon_sgdma_register_callback
00044fb0 g       *ABS*	00000000 end
00022a04 g     F .text	00000074 alt_write_flash_command_16bit_device_8bit_mode
00024fb4 g     F .text	000004e4 altera_avalon_lcd_16207_write
00000c38 g     F .text	0000006c httpd_init
0000985c g     F .text	00000074 netif_set_down
00009a60 g     F .text	00000544 pbuf_alloc
000098d0 g     F .text	000000a4 netif_set_link_up
0002bca4 g     F .text	00000200 altera_avalon_uart_write
00026884 g     F .text	000001e4 alt_tse_phy_add_profile
00022f28 g     F .text	000005c8 alt_read_cfi_table
00023e98 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002da80 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00025ef4 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
000264c0 g     F .text	00000088 alt_avalon_timer_sc_init
0002b550 g     F .text	00000060 altera_avalon_uart_write_fd
00020be8 g     F .text	000000ac __clzsi2
0002b5b0 g     F .text	00000050 altera_avalon_uart_close_fd
000245a0 g     F .text	00000250 altera_avalon_jtag_uart_write
00025960 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
000220a8 g     F .text	00000090 alt_flash_cfi_init
0001bee0 g     F .text	00000004 __sfp_lock_acquire
0001d378 g     F .text	000000f8 memchr
00034ca8 g     O .rwdata	00000004 ip_addr_broadcast
00018124 g     F .text	00001df8 ___vfprintf_internal_r
00006f78 g     F .text	0000009c ip_reass_tmr
00025a50 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
0002e794 g     O .rodata	00000010 file_404_html
0001c05c g     F .text	000002d0 _free_r
000155c0 g     F .text	00000108 udp_connect
0002d8a4 g     F .text	000001a0 __call_exitprocs
00036f4c g     O .bss	00000004 current_header
000015c4 g     F .text	00000094 tse_sgdmaRx_isr
00017904 g     F .text	000000c4 lwipProcessTimers
00036fd4 g     O .bss	00000004 __mlocale_changed
000017c8 g     F .text	000001a4 tse_mac_rcv
000093d8 g     F .text	00000058 netif_set_addr
0000297c g     F .text	0000009c dhcp_arp_reply
00034cd8 g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	0000007c _start
00036ff8 g     O .bss	00000004 _alt_tick_rate
0000b294 g     F .text	000000a4 pbuf_strstr
00025d84 g     F .text	00000068 alt_avalon_sgdma_open
00008fe4 g     F .text	000001dc memp_malloc
0001dce0 g     F .text	0000015c __lshift
000147a8 g     F .text	0000021c tcp_zero_window_probe
00036ffc g     O .bss	00000004 _alt_nticks
00028634 g     F .text	000000cc alt_tse_phy_rd_mdio_reg
000218c4 g     F .text	000000f0 read
00021f60 g     F .text	00000110 alt_sys_init
00001e5c g     F .text	000000bc dhcp_fine_tmr
00044604 g     O .bss	0000000a dhcp_rx_options_given
0002d774 g     F .text	00000130 __register_exitproc
00037000 g     O .bss	00000001 phy_profile_count
00017ff4 g     F .text	000000fc strncmp
000276bc g     F .text	00000074 alt_tse_get_mac_group_index
00022940 g     F .text	00000040 alt_read_query_entry_16bit
00021a14 g     F .text	00000040 alt_remap_uncached
00006dc8 g     F .text	000001b0 ipaddr_ntoa_r
0001d9d4 g     F .text	000001e0 __multiply
00024200 g     F .text	00000068 altera_avalon_jtag_uart_close
00032b04 g       *ABS*	00000000 __ram_rwdata_start
0002da80 g       *ABS*	00000000 __ram_rodata_start
000444dc g     O .bss	00000028 __malloc_current_mallinfo
00036f8c g     O .bss	00000004 tcp_bound_pcbs
00022c48 g     F .text	000001c4 alt_set_flash_width_func
0001e1e4 g     F .text	00000144 __d2b
0000d3f4 g     F .text	00000058 tcp_seg_free
0000b0ac g     F .text	00000120 pbuf_memcmp
000284b0 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
00023d34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002d52c g     F .text	000000b4 alt_get_fd
0002c350 g     F .text	00000128 alt_busy_sleep
00020fbc g     F .text	000000d0 __fpcmp_parts_d
0000b844 g     F .text	0000001c tcp_init
0000c604 g     F .text	000002ac tcp_connect
0000589c g     F .text	00000260 inet_chksum_pseudo_partial
0001ee6c g     F .text	00000064 _close_r
000089b8 g     F .text	000003f8 mem_malloc
0002a948 g     F .text	00000328 alt_tse_phy_get_common_speed
0002cbe8 g     F .text	00000210 alt_erase_block_amd
000179c8 g     F .text	0000007c memcmp
00023df4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00044fb0 g       *ABS*	00000000 __alt_stack_base
00023e44 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00037001 g     O .bss	00000001 mac_group_count
00009974 g     F .text	00000050 netif_set_link_down
00002f9c g     F .text	00000150 dhcp_renew
0001a098 g     F .text	00000174 __swsetup_r
000234f0 g     F .text	00000770 alt_read_cfi_width
0000150c g     F .text	000000b8 tse_sgdma_read_init
00020404 g     F .text	000001b4 __divdf3
0001bde4 g     F .text	000000fc __sfp
0001e440 g     F .text	0000007c __copybits
0000ddb8 g     F .text	00000084 tcp_eff_send_mss
00033150 g     O .rwdata	00000408 __malloc_av_
0001beec g     F .text	00000004 __sinit_lock_release
00020120 g     F .text	000002e4 __muldf3
0001ec04 g     F .text	00000054 __sread
00029244 g     F .text	0000041c alt_tse_mac_get_phy
0002d418 g     F .text	00000114 alt_find_file
0002c508 g     F .text	000000a0 alt_dev_llist_insert
00021834 g     F .text	00000020 __malloc_lock
00021a54 g     F .text	00000108 sbrk
00025c74 g     F .text	00000054 alt_avalon_sgdma_start
00002728 g     F .text	000001ac dhcp_inform
0001ba30 g     F .text	000001e8 _fflush_r
00027968 g     F .text	0000008c alt_tse_mac_set_duplex
0001edb0 g     F .text	000000bc _calloc_r
0000b4b8 g     F .text	00000048 raw_connect
00034d14 g     O .rwdata	00000008 alt_flash_dev_list
00022ac4 g     F .text	00000048 alt_write_flash_command_16bit_device_16bit_mode
00036f3c g       *ABS*	00000000 __bss_start
00017b3c g     F .text	000000dc memset
00017700 g     F .text	00000204 main
00036ff4 g     O .bss	00000004 alt_envp
00036fdc g     O .bss	00000004 __malloc_max_total_mem
00023d94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001a07c g     F .text	0000001c __swbuf
00005354 g     F .text	00000044 icmp_dest_unreach
00025544 g     F .text	00000138 altera_avalon_lcd_16207_init
00034d08 g     O .rwdata	00000008 alt_sgdma_list
0000d97c g     F .text	0000006c tcp_sent
0001ed3c g     F .text	00000008 __sclose
0000affc g     F .text	000000b0 pbuf_get_at
02000000 g       *ABS*	00000000 __alt_heap_limit
0001f00c g     F .text	00000014 fclose
00044e20 g     O .bss	00000190 _atexit0
0001a414 g     F .text	0000161c _dtoa_r
0001cbf4 g     F .text	00000784 _malloc_r
0000b7a8 g     F .text	00000080 raw_new
00026758 g     F .text	00000088 tse_mac_SwReset
00000334 g     F .text	000000e4 ethernetif_input
00034cf4 g     O .rwdata	00000004 alt_errno
00022b58 g     F .text	0000004c alt_write_flash_command_32bit_device_32bit_mode
0001c810 g     F .text	000000a8 _fwalk
000224d4 g     F .text	00000158 alt_write_value_to_flash
00022bdc g     F .text	00000038 alt_write_native_16bit
00017d3c g     F .text	000000f0 putc
00020acc g     F .text	00000050 __divsi3
00027608 g     F .text	00000048 alt_tse_mac_set_common_speed
0000b70c g     F .text	0000009c raw_remove
00030ad8 g     O .rodata	00000014 __thenan_df
0001bf20 g     F .text	0000013c _malloc_trim_r
0002da80 g       *ABS*	00000000 __CTOR_END__
00036f70 g     O .bss	00000001 pbuf_free_ooseq_pending
00015460 g     F .text	00000160 udp_bind
00037004 g     O .bss	00000004 alt_vic_dev_list
0000b860 g     F .text	00000048 tcp_tmr
00016cfc g     F .text	0000048c etharp_query
00017ec4 g     F .text	000000a4 strcmp
00004dac g     F .text	0000003c lwip_init
0002da80 g       *ABS*	00000000 __flash_rodata_start
0002da80 g       *ABS*	00000000 __DTOR_LIST__
000169bc g     F .text	00000340 etharp_output
00020614 g     F .text	0000005c __nedf2
00021f20 g     F .text	00000040 alt_irq_init
000275c8 g     F .text	00000040 alt_tse_mac_get_common_speed
000219b4 g     F .text	00000060 alt_release_fd
0000971c g     F .text	00000044 netif_set_gw
00030aec g     O .rodata	00000100 __clz_tab
0000a5ec g     F .text	0000004c pbuf_clen
00036fd0 g     O .bss	00000004 _PathLocale
0002d66c g     F .text	00000014 atexit
0001ed44 g     F .text	0000006c _write_r
0000d44c g     F .text	00000034 tcp_setprio
0001508c g     F .text	00000054 udp_send
0001ca24 g     F .text	0000001c setlocale
0000af44 g     F .text	000000b8 pbuf_coalesce
0000b500 g     F .text	00000040 raw_recv
00009430 g     F .text	000000d8 netif_remove
00034cd0 g     O .rwdata	00000004 _impure_ptr
00036fec g     O .bss	00000004 alt_argc
0000c8b0 g     F .text	000008ac tcp_slowtmr
0002c604 g     F .text	0000005c _do_dtors
0002c0bc g     F .text	0000013c alt_vic_irq_init
0001e03c g     F .text	00000060 __ulp
0001eb3c g     F .text	00000038 __isinfd
0000da54 g     F .text	00000030 tcp_accept
0001bf08 g     F .text	00000018 __fp_unlock_all
0002567c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00000418 g     F .text	00000178 ethernetif_init
00034ce0 g     O .rwdata	00000008 alt_fs_list
00022a78 g     F .text	0000004c alt_write_flash_command_32bit_device_8bit_mode
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001ca40 g     F .text	0000000c localeconv
0a000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00036f90 g     O .bss	00000004 tcp_tw_pcbs
0002a7a0 g     F .text	000001a8 alt_tse_phy_set_adv_10
0002c1f8 g     F .text	00000158 alt_ic_isr_register
00014aa8 g     F .text	000005e4 udp_input
00034d20 g       *ABS*	00000000 _edata
0002b4f0 g     F .text	00000060 altera_avalon_uart_read_fd
00044fb0 g       *ABS*	00000000 _end
0002c6f0 g     F .text	00000068 alt_flash_open_dev
00029660 g     F .text	00000240 alt_tse_mac_associate_phy
000092b8 g     F .text	0000001c netif_init
00000020 g       *ABS*	00000000 __ram_exceptions_end
00024268 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00005c4c g     F .text	000000e8 ip_route
0000c104 g     F .text	000001d8 tcp_listen_with_backlog
00044c8c g     O .bss	0000011e lwip_stats
0000a228 g     F .text	000001f8 pbuf_header
00036f6c g     O .bss	00000004 netif_default
0000dbe0 g     F .text	000001a8 tcp_pcb_remove
00036fcc g     O .bss	00000004 lwipStaticIp
00025dec g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
0001ec58 g     F .text	00000088 __swrite
00034cdc g     O .rwdata	00000004 __malloc_trim_threshold
0000a7b8 g     F .text	00000040 pbuf_chain
0002d680 g     F .text	00000038 exit
0000bd84 g     F .text	00000190 tcp_abandon
0000de3c g     F .text	0000003c tcp_debug_state_str
000149c4 g     F .text	0000001c tcp_timer_needed
0001c8b8 g     F .text	000000b8 _fwalk_reent
00008e28 g     F .text	000001bc memp_init
00002398 g     F .text	000000d0 dhcp_set_struct
0001de94 g     F .text	000001a8 __mdiff
00008db0 g     F .text	00000078 mem_calloc
0000d15c g     F .text	000000f8 tcp_fasttmr
0002c758 g     F .text	00000050 alt_flash_close_dev
00020b1c g     F .text	0000005c __modsi3
0000d254 g     F .text	00000150 tcp_process_refused_data
00026834 g     F .text	00000050 tse_mac_setGMIImode
0002b1c0 g     F .text	000000e4 marvell_cfg_gmii
02000000 g       *ABS*	00000000 __alt_data_end
0001bee4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000298a0 g     F .text	00000128 alt_tse_phy_cfg_pcs
00044610 g     O .bss	00000028 dhcp_rx_options_val
00032880 g     O .rodata	00000101 _ctype_
04000000 g       *ABS*	00000000 __alt_mem_ext_flash
0002b954 g     F .text	00000054 altera_avalon_uart_close
0002da44 g     F .text	0000003c _exit
0001eb74 g     F .text	0000002c __isnand
00001da8 g     F .text	000000b4 dhcp_coarse_tmr
00021114 g     F .text	0000016c alt_alarm_start
0000d480 g     F .text	00000068 tcp_seg_copy
00020b88 g     F .text	00000060 __muldi3
0001ca4c g     F .text	000001a8 __smakebuf_r
00022c14 g     F .text	00000034 alt_write_native_32bit
0000da84 g     F .text	00000080 tcp_poll
00017f68 g     F .text	0000008c strlen
0002ca2c g     F .text	00000154 open
000149e0 g     F .text	0000001c udp_init
00044638 g     O .bss	00000654 ram_heap
000206d4 g     F .text	00000064 __gedf2
000157f0 g     F .text	00000058 udp_new
000223e4 g     F .text	0000008c alt_flash_cfi_get_info
0002c7a8 g     F .text	00000030 alt_icache_flush_all
000266b4 g     F .text	000000a4 tse_mac_aRxRead
00034cbe g     O .rwdata	00000006 ethbroadcast
0002faf4 g     O .rodata	0000000d tcp_backoff
00019f1c g     F .text	00000024 __vfprintf_internal
0002b9f8 g     F .text	0000025c altera_avalon_uart_read
00027888 g     F .text	000000e0 alt_tse_mac_set_speed
000259d0 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
000200c0 g     F .text	00000060 __subdf3
0001d8e8 g     F .text	000000b0 __lo0bits
00034cfc g     O .rwdata	00000008 alt_alarm_list
0002c5a8 g     F .text	0000005c _do_ctors
0002a558 g     F .text	00000248 alt_tse_phy_set_adv_100
0000de78 g     F .text	00000d18 tcp_input
000212d0 g     F .text	000000c8 close
0002cb80 g     F .text	00000068 alt_program_amd
00005d34 g     F .text	0000050c ip_input
0002161c g     F .text	00000080 alt_load
00034cc4 g     O .rwdata	00000006 ethzero
00020c94 g     F .text	00000224 __pack_d
0000b828 g     F .text	0000001c stats_init
00027650 g     F .text	0000006c alt_tse_get_system_index
0002637c g     F .text	000000a4 alt_avalon_sgdma_init
0002d6cc g     F .text	00000014 free
00009508 g     F .text	000000e0 netif_find
0001bee8 g     F .text	00000004 __sinit_lock_acquire
0001d668 g     F .text	00000114 __multadd
0001d640 g     F .text	00000028 _Bfree
00026548 g     F .text	0000002c no_printf
0000a7f8 g     F .text	0000012c pbuf_dechain



Disassembly of section .entry:

05000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 500000c:	00bffd16 	blt	zero,r2,5000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 5000014:	08400814 	ori	at,at,32
    jmp r1
 5000018:	0800683a 	jmp	at
 500001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .text:

00000020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
      20:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
      24:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
      28:	10000426 	beq	r2,zero,3c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
      2c:	07800014 	movui	ba,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
      30:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
      34:	ef400f14 	ori	ea,ea,60
    eret
      38:	ef80083a 	eret

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      3c:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
      40:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
      44:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
      48:	d6b32814 	ori	gp,gp,52384
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
      4c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
      50:	00c00054 	movui	r3,1
    movhi r4, 1     /* Constant to increment STATUS.PRS */
      54:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
      58:	1105883a 	add	r2,r2,r4
    wrctl status, r2
      5c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
      60:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
      64:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
      68:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
      6c:	183ffa1e 	bne	r3,zero,58 <_start+0x38>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      70:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
      74:	109bcf14 	ori	r2,r2,28476

    movhi r3, %hi(__bss_end)
      78:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
      7c:	18d3ec14 	ori	r3,r3,20400

    beq r2, r3, 1f
      80:	10c00326 	beq	r2,r3,90 <_start+0x70>

0:
    stw zero, (r2)
      84:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      88:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      8c:	10fffd36 	bltu	r2,r3,84 <_start+0x64>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      90:	002161c0 	call	2161c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      94:	00217bc0 	call	217bc <alt_main>

00000098 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      98:	003fff06 	br	98 <alt_after_alt_main>

0000009c <low_level_init>:
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void
low_level_init(struct netif *netif)
{
      9c:	defffc04 	addi	sp,sp,-16
      a0:	dfc00315 	stw	ra,12(sp)
      a4:	df000215 	stw	fp,8(sp)
      a8:	df000204 	addi	fp,sp,8
      ac:	e13fff15 	stw	r4,-4(fp)
  struct ethernetif *ethernetif = netif->state;
      b0:	e0bfff17 	ldw	r2,-4(fp)
      b4:	10800717 	ldw	r2,28(r2)
      b8:	e0bffe15 	stw	r2,-8(fp)
  
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
      bc:	e0bfff17 	ldw	r2,-4(fp)
      c0:	00c00184 	movi	r3,6
      c4:	10c00985 	stb	r3,38(r2)

  /* maximum transfer unit */
  netif->mtu = 1500;
      c8:	e0bfff17 	ldw	r2,-4(fp)
      cc:	00c17704 	movi	r3,1500
      d0:	10c0090d 	sth	r3,36(r2)
  
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
      d4:	e0bfff17 	ldw	r2,-4(fp)
      d8:	00c00c84 	movi	r3,50
      dc:	10c00b45 	stb	r3,45(r2)
  
  tse_mac_init(0, ethernetif) != 0;
      e0:	0009883a 	mov	r4,zero
      e4:	e17ffe17 	ldw	r5,-8(fp)
      e8:	0000ca40 	call	ca4 <tse_mac_init>
}
      ec:	e037883a 	mov	sp,fp
      f0:	dfc00117 	ldw	ra,4(sp)
      f4:	df000017 	ldw	fp,0(sp)
      f8:	dec00204 	addi	sp,sp,8
      fc:	f800283a 	ret

00000100 <low_level_input>:
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *
low_level_input(struct netif *netif)
{
     100:	defff604 	addi	sp,sp,-40
     104:	dfc00915 	stw	ra,36(sp)
     108:	df000815 	stw	fp,32(sp)
     10c:	df000804 	addi	fp,sp,32
     110:	e13fff15 	stw	r4,-4(fp)
  struct ethernetif *ethernetif = netif->state;
     114:	e0bfff17 	ldw	r2,-4(fp)
     118:	10800717 	ldw	r2,28(r2)
     11c:	e0bff915 	stw	r2,-28(fp)
  struct pbuf *p, *nextPkt;
  u32_t cpu_sr;

    if(ethernetif->lwipRxCount == 0)
     120:	e0bff917 	ldw	r2,-28(fp)
     124:	10801517 	ldw	r2,84(r2)
     128:	1000021e 	bne	r2,zero,134 <low_level_input+0x34>
        return NULL;
     12c:	0005883a 	mov	r2,zero
     130:	00007b06 	br	320 <low_level_input+0x220>
    //  Dump current packet if there is no memory for the next packet.
    //  The lwipRxPbuf must contain pointers to pbufs at all times.
    nextPkt = pbuf_alloc(PBUF_RAW,  PBUF_POOL_BUFSIZE, PBUF_POOL);
     134:	010000c4 	movi	r4,3
     138:	01417b04 	movi	r5,1516
     13c:	018000c4 	movi	r6,3
     140:	0009a600 	call	9a60 <pbuf_alloc>
     144:	e0bffa15 	stw	r2,-24(fp)
    if(nextPkt == NULL)
     148:	e0bffa17 	ldw	r2,-24(fp)
     14c:	1000121e 	bne	r2,zero,198 <low_level_input+0x98>
        {
        LINK_STATS_INC(link.memerr);
     150:	00800134 	movhi	r2,4
     154:	10932304 	addi	r2,r2,19596
     158:	1080030b 	ldhu	r2,12(r2)
     15c:	10800044 	addi	r2,r2,1
     160:	1007883a 	mov	r3,r2
     164:	00800134 	movhi	r2,4
     168:	10932304 	addi	r2,r2,19596
     16c:	10c0030d 	sth	r3,12(r2)
        LINK_STATS_INC(link.drop);
     170:	00800134 	movhi	r2,4
     174:	10932304 	addi	r2,r2,19596
     178:	1080018b 	ldhu	r2,6(r2)
     17c:	10800044 	addi	r2,r2,1
     180:	1007883a 	mov	r3,r2
     184:	00800134 	movhi	r2,4
     188:	10932304 	addi	r2,r2,19596
     18c:	10c0018d 	sth	r3,6(r2)
        return NULL;
     190:	0005883a 	mov	r2,zero
     194:	00006206 	br	320 <low_level_input+0x220>
        }
    nextPkt = (void *) alt_remap_uncached(nextPkt,sizeof *nextPkt);
     198:	e13ffa17 	ldw	r4,-24(fp)
     19c:	01400404 	movi	r5,16
     1a0:	0021a140 	call	21a14 <alt_remap_uncached>
     1a4:	e0bffa15 	stw	r2,-24(fp)
    nextPkt->payload = (void *) alt_remap_uncached(nextPkt->payload, PBUF_POOL_BUFSIZE);
     1a8:	e0bffa17 	ldw	r2,-24(fp)
     1ac:	10800117 	ldw	r2,4(r2)
     1b0:	1009883a 	mov	r4,r2
     1b4:	01417b04 	movi	r5,1516
     1b8:	0021a140 	call	21a14 <alt_remap_uncached>
     1bc:	e0fffa17 	ldw	r3,-24(fp)
     1c0:	18800115 	stw	r2,4(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     1c4:	0005303a 	rdctl	r2,status
     1c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     1cc:	e0fffc17 	ldw	r3,-16(fp)
     1d0:	00bfff84 	movi	r2,-2
     1d4:	1884703a 	and	r2,r3,r2
     1d8:	1001703a 	wrctl	status,r2
  
  return context;
     1dc:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
     1e0:	e0bffb15 	stw	r2,-20(fp)
    --ethernetif->lwipRxCount;
     1e4:	e0bff917 	ldw	r2,-28(fp)
     1e8:	10801517 	ldw	r2,84(r2)
     1ec:	10ffffc4 	addi	r3,r2,-1
     1f0:	e0bff917 	ldw	r2,-28(fp)
     1f4:	10c01515 	stw	r3,84(r2)
    alt_irq_enable_all(cpu_sr);
     1f8:	e0bffb17 	ldw	r2,-20(fp)
     1fc:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
     200:	0005303a 	rdctl	r2,status
     204:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
     208:	e0fffe17 	ldw	r3,-8(fp)
     20c:	00bfff84 	movi	r2,-2
     210:	1884703a 	and	r2,r3,r2
     214:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
     218:	e0bffd17 	ldw	r2,-12(fp)
     21c:	1080004c 	andi	r2,r2,1
     220:	e0fffe17 	ldw	r3,-8(fp)
     224:	1884b03a 	or	r2,r3,r2
     228:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
     22c:	e0bffe17 	ldw	r2,-8(fp)
     230:	1001703a 	wrctl	status,r2
    p = ethernetif->lwipRxPbuf[ ethernetif->lwipRxIndex ];
     234:	e0bff917 	ldw	r2,-28(fp)
     238:	10801417 	ldw	r2,80(r2)
     23c:	e0fff917 	ldw	r3,-28(fp)
     240:	108001c4 	addi	r2,r2,7
     244:	1085883a 	add	r2,r2,r2
     248:	1085883a 	add	r2,r2,r2
     24c:	1885883a 	add	r2,r3,r2
     250:	10800017 	ldw	r2,0(r2)
     254:	e0bff815 	stw	r2,-32(fp)
    ethernetif->lwipRxPbuf[ ethernetif->lwipRxIndex ] = nextPkt;
     258:	e0bff917 	ldw	r2,-28(fp)
     25c:	10801417 	ldw	r2,80(r2)
     260:	e0fff917 	ldw	r3,-28(fp)
     264:	108001c4 	addi	r2,r2,7
     268:	1085883a 	add	r2,r2,r2
     26c:	1085883a 	add	r2,r2,r2
     270:	1885883a 	add	r2,r3,r2
     274:	e0fffa17 	ldw	r3,-24(fp)
     278:	10c00015 	stw	r3,0(r2)
    if(++ethernetif->lwipRxIndex >= LWIP_RX_ETH_BUFFER)
     27c:	e0bff917 	ldw	r2,-28(fp)
     280:	10801417 	ldw	r2,80(r2)
     284:	10c00044 	addi	r3,r2,1
     288:	e0bff917 	ldw	r2,-28(fp)
     28c:	10c01415 	stw	r3,80(r2)
     290:	e0bff917 	ldw	r2,-28(fp)
     294:	10801417 	ldw	r2,80(r2)
     298:	10800310 	cmplti	r2,r2,12
     29c:	1000021e 	bne	r2,zero,2a8 <low_level_input+0x1a8>
        ethernetif->lwipRxIndex = 0;
     2a0:	e0bff917 	ldw	r2,-28(fp)
     2a4:	10001415 	stw	zero,80(r2)
    LWIP_ASSERT("low_level_input: pbuf in rx buffer is NULL", p != NULL );
     2a8:	e0bff817 	ldw	r2,-32(fp)
     2ac:	1000091e 	bne	r2,zero,2d4 <low_level_input+0x1d4>
     2b0:	010000f4 	movhi	r4,3
     2b4:	2136a004 	addi	r4,r4,-9600
     2b8:	014000f4 	movhi	r5,3
     2bc:	2976aa04 	addi	r5,r5,-9560
     2c0:	01801e44 	movi	r6,121
     2c4:	01c000f4 	movhi	r7,3
     2c8:	39f6b504 	addi	r7,r7,-9516
     2cc:	0017c440 	call	17c44 <printf>
     2d0:	003fff06 	br	2d0 <low_level_input+0x1d0>
    LWIP_ASSERT("low_level_input: pbuf->len in rx buffer is 0", p->len != 0 );
     2d4:	e0bff817 	ldw	r2,-32(fp)
     2d8:	1080028b 	ldhu	r2,10(r2)
     2dc:	10bfffcc 	andi	r2,r2,65535
     2e0:	1000091e 	bne	r2,zero,308 <low_level_input+0x208>
     2e4:	010000f4 	movhi	r4,3
     2e8:	2136a004 	addi	r4,r4,-9600
     2ec:	014000f4 	movhi	r5,3
     2f0:	2976bd04 	addi	r5,r5,-9484
     2f4:	01801e84 	movi	r6,122
     2f8:	01c000f4 	movhi	r7,3
     2fc:	39f6b504 	addi	r7,r7,-9516
     300:	0017c440 	call	17c44 <printf>
     304:	003fff06 	br	304 <low_level_input+0x204>
    if( p->len == 0 )
     308:	e0bff817 	ldw	r2,-32(fp)
     30c:	1080028b 	ldhu	r2,10(r2)
     310:	10bfffcc 	andi	r2,r2,65535
     314:	1000011e 	bne	r2,zero,31c <low_level_input+0x21c>
        p = NULL;
     318:	e03ff815 	stw	zero,-32(fp)
    return p;  
     31c:	e0bff817 	ldw	r2,-32(fp)
}
     320:	e037883a 	mov	sp,fp
     324:	dfc00117 	ldw	ra,4(sp)
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00204 	addi	sp,sp,8
     330:	f800283a 	ret

00000334 <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void
ethernetif_input(struct netif *netif)
{
     334:	defffa04 	addi	sp,sp,-24
     338:	dfc00515 	stw	ra,20(sp)
     33c:	df000415 	stw	fp,16(sp)
     340:	df000404 	addi	fp,sp,16
     344:	e13fff15 	stw	r4,-4(fp)
  struct ethernetif *ethernetif;
  struct eth_hdr *ethhdr;
  struct pbuf *p;

  ethernetif = netif->state;
     348:	e0bfff17 	ldw	r2,-4(fp)
     34c:	10800717 	ldw	r2,28(r2)
     350:	e0bffc15 	stw	r2,-16(fp)

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
     354:	e13fff17 	ldw	r4,-4(fp)
     358:	00001000 	call	100 <low_level_input>
     35c:	e0bffd15 	stw	r2,-12(fp)
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
     360:	e0bffd17 	ldw	r2,-12(fp)
     364:	10002426 	beq	r2,zero,3f8 <ethernetif_input+0xc4>
  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = p->payload;
     368:	e0bffd17 	ldw	r2,-12(fp)
     36c:	10800117 	ldw	r2,4(r2)
     370:	e0bffe15 	stw	r2,-8(fp)

  switch (htons(ethhdr->type)) {
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	1080038b 	ldhu	r2,14(r2)
     37c:	10bfffcc 	andi	r2,r2,65535
     380:	1004d23a 	srli	r2,r2,8
     384:	10ffffcc 	andi	r3,r2,65535
     388:	e0bffe17 	ldw	r2,-8(fp)
     38c:	1080038b 	ldhu	r2,14(r2)
     390:	10bfffcc 	andi	r2,r2,65535
     394:	1004923a 	slli	r2,r2,8
     398:	10bfffcc 	andi	r2,r2,65535
     39c:	1884b03a 	or	r2,r3,r2
     3a0:	10c20020 	cmpeqi	r3,r2,2048
     3a4:	1800021e 	bne	r3,zero,3b0 <ethernetif_input+0x7c>
     3a8:	108201a0 	cmpeqi	r2,r2,2054
     3ac:	10000d26 	beq	r2,zero,3e4 <ethernetif_input+0xb0>
  /* PPPoE packet? */
  case ETHTYPE_PPPOEDISC:
  case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
    /* full packet send to tcpip_thread to process */
    if (netif->input(p, netif)!=ERR_OK)
     3b0:	e0bfff17 	ldw	r2,-4(fp)
     3b4:	10800417 	ldw	r2,16(r2)
     3b8:	e13ffd17 	ldw	r4,-12(fp)
     3bc:	e17fff17 	ldw	r5,-4(fp)
     3c0:	103ee83a 	callr	r2
     3c4:	10803fcc 	andi	r2,r2,255
     3c8:	1080201c 	xori	r2,r2,128
     3cc:	10bfe004 	addi	r2,r2,-128
     3d0:	10000b26 	beq	r2,zero,400 <ethernetif_input+0xcc>
     { LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
       pbuf_free(p);
     3d4:	e13ffd17 	ldw	r4,-12(fp)
     3d8:	000a4200 	call	a420 <pbuf_free>
       p = NULL;
     3dc:	e03ffd15 	stw	zero,-12(fp)
     }
    break;
     3e0:	00000706 	br	400 <ethernetif_input+0xcc>

  default:
    pbuf_free(p);
     3e4:	e13ffd17 	ldw	r4,-12(fp)
     3e8:	000a4200 	call	a420 <pbuf_free>
    p = NULL;
     3ec:	e03ffd15 	stw	zero,-12(fp)
    break;
     3f0:	0001883a 	nop
     3f4:	00000306 	br	404 <ethernetif_input+0xd0>
  ethernetif = netif->state;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
     3f8:	0001883a 	nop
     3fc:	00000106 	br	404 <ethernetif_input+0xd0>
    if (netif->input(p, netif)!=ERR_OK)
     { LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
       pbuf_free(p);
       p = NULL;
     }
    break;
     400:	0001883a 	nop
  default:
    pbuf_free(p);
    p = NULL;
    break;
  }
}
     404:	e037883a 	mov	sp,fp
     408:	dfc00117 	ldw	ra,4(sp)
     40c:	df000017 	ldw	fp,0(sp)
     410:	dec00204 	addi	sp,sp,8
     414:	f800283a 	ret

00000418 <ethernetif_init>:
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t
ethernetif_init(struct netif *netif)
{
     418:	defffa04 	addi	sp,sp,-24
     41c:	dfc00515 	stw	ra,20(sp)
     420:	df000415 	stw	fp,16(sp)
     424:	df000404 	addi	fp,sp,16
     428:	e13fff15 	stw	r4,-4(fp)
  int idx;
  struct pbuf *p;
  struct ethernetif *ethernetif;
  err_t tse_mac_raw_send(struct netif *netif, struct pbuf *p);  

  LWIP_ASSERT("netif != NULL", (netif != NULL));
     42c:	e0bfff17 	ldw	r2,-4(fp)
     430:	1000091e 	bne	r2,zero,458 <ethernetif_init+0x40>
     434:	010000f4 	movhi	r4,3
     438:	2136a004 	addi	r4,r4,-9600
     43c:	014000f4 	movhi	r5,3
     440:	2976c904 	addi	r5,r5,-9436
     444:	01803144 	movi	r6,197
     448:	01c000f4 	movhi	r7,3
     44c:	39f6b504 	addi	r7,r7,-9516
     450:	0017c440 	call	17c44 <printf>
     454:	003fff06 	br	454 <ethernetif_init+0x3c>
    
  ethernetif = mem_malloc(sizeof(struct ethernetif));
     458:	01001704 	movi	r4,92
     45c:	00089b80 	call	89b8 <mem_malloc>
     460:	e0bffd15 	stw	r2,-12(fp)
  if (ethernetif == NULL) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	1000021e 	bne	r2,zero,474 <ethernetif_init+0x5c>
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_init: out of memory\n"));
    return ERR_MEM;
     46c:	00bfffc4 	movi	r2,-1
     470:	00004206 	br	57c <ethernetif_init+0x164>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->state = ethernetif;
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	e0fffd17 	ldw	r3,-12(fp)
     47c:	10c00715 	stw	r3,28(r2)
  netif->name[0] = IFNAME0;
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	00c01944 	movi	r3,101
     488:	10c00b85 	stb	r3,46(r2)
  netif->name[1] = IFNAME1;
     48c:	e0bfff17 	ldw	r2,-4(fp)
     490:	00c01b84 	movi	r3,110
     494:	10c00bc5 	stb	r3,47(r2)
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
     498:	e0bfff17 	ldw	r2,-4(fp)
     49c:	00c00074 	movhi	r3,1
     4a0:	18da6f04 	addi	r3,r3,27068
     4a4:	10c00515 	stw	r3,20(r2)
  netif->linkoutput = tse_mac_raw_send;
     4a8:	e0bfff17 	ldw	r2,-4(fp)
     4ac:	00c00034 	movhi	r3,0
     4b0:	18c59604 	addi	r3,r3,5720
     4b4:	10c00615 	stw	r3,24(r2)
  
  ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
     4b8:	e0bfff17 	ldw	r2,-4(fp)
     4bc:	10c009c4 	addi	r3,r2,39
     4c0:	e0bffd17 	ldw	r2,-12(fp)
     4c4:	10c00015 	stw	r3,0(r2)
  
  /* initialize the rx buffer for access by the TSE ISR */
  for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
     4c8:	e03ffc15 	stw	zero,-16(fp)
     4cc:	00001f06 	br	54c <ethernetif_init+0x134>
    {
    p = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_POOL);
     4d0:	010000c4 	movi	r4,3
     4d4:	01417b04 	movi	r5,1516
     4d8:	018000c4 	movi	r6,3
     4dc:	0009a600 	call	9a60 <pbuf_alloc>
     4e0:	e0bffe15 	stw	r2,-8(fp)
    if (p == NULL)
     4e4:	e0bffe17 	ldw	r2,-8(fp)
     4e8:	1000021e 	bne	r2,zero,4f4 <ethernetif_init+0xdc>
      return ERR_MEM;
     4ec:	00bfffc4 	movi	r2,-1
     4f0:	00002206 	br	57c <ethernetif_init+0x164>
    p = (void *) alt_remap_uncached(p,sizeof *p);
     4f4:	e13ffe17 	ldw	r4,-8(fp)
     4f8:	01400404 	movi	r5,16
     4fc:	0021a140 	call	21a14 <alt_remap_uncached>
     500:	e0bffe15 	stw	r2,-8(fp)
    p->payload = (void *) alt_remap_uncached(p->payload,PBUF_POOL_BUFSIZE);
     504:	e0bffe17 	ldw	r2,-8(fp)
     508:	10800117 	ldw	r2,4(r2)
     50c:	1009883a 	mov	r4,r2
     510:	01417b04 	movi	r5,1516
     514:	0021a140 	call	21a14 <alt_remap_uncached>
     518:	e0fffe17 	ldw	r3,-8(fp)
     51c:	18800115 	stw	r2,4(r3)
    ethernetif->lwipRxPbuf[idx] = p;
     520:	e0fffd17 	ldw	r3,-12(fp)
     524:	e0bffc17 	ldw	r2,-16(fp)
     528:	108001c4 	addi	r2,r2,7
     52c:	1085883a 	add	r2,r2,r2
     530:	1085883a 	add	r2,r2,r2
     534:	1885883a 	add	r2,r3,r2
     538:	e0fffe17 	ldw	r3,-8(fp)
     53c:	10c00015 	stw	r3,0(r2)
  netif->linkoutput = tse_mac_raw_send;
  
  ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
  
  /* initialize the rx buffer for access by the TSE ISR */
  for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
     540:	e0bffc17 	ldw	r2,-16(fp)
     544:	10800044 	addi	r2,r2,1
     548:	e0bffc15 	stw	r2,-16(fp)
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	10800310 	cmplti	r2,r2,12
     554:	103fde1e 	bne	r2,zero,4d0 <ethernetif_init+0xb8>
      return ERR_MEM;
    p = (void *) alt_remap_uncached(p,sizeof *p);
    p->payload = (void *) alt_remap_uncached(p->payload,PBUF_POOL_BUFSIZE);
    ethernetif->lwipRxPbuf[idx] = p;
    }
  ethernetif->lwipRxCount = 0;
     558:	e0bffd17 	ldw	r2,-12(fp)
     55c:	10001515 	stw	zero,84(r2)
  ethernetif->lwipRxIndex = 0;
     560:	e0bffd17 	ldw	r2,-12(fp)
     564:	10001415 	stw	zero,80(r2)
  ethernetif->lwipRxIndexIsr = 0;
     568:	e0bffd17 	ldw	r2,-12(fp)
     56c:	10001315 	stw	zero,76(r2)
                  
  /* initialize the low level hardware */
  low_level_init(netif);
     570:	e13fff17 	ldw	r4,-4(fp)
     574:	000009c0 	call	9c <low_level_init>
  return ERR_OK;
     578:	0005883a 	mov	r2,zero
}
     57c:	e037883a 	mov	sp,fp
     580:	dfc00117 	ldw	ra,4(sp)
     584:	df000017 	ldw	fp,0(sp)
     588:	dec00204 	addi	sp,sp,8
     58c:	f800283a 	ret

00000590 <fs_open>:


/*-----------------------------------------------------------------------------------*/
int
fs_open(const char *name, struct fs_file *file)
{
     590:	defffb04 	addi	sp,sp,-20
     594:	dfc00415 	stw	ra,16(sp)
     598:	df000315 	stw	fp,12(sp)
     59c:	df000304 	addi	fp,sp,12
     5a0:	e13ffe15 	stw	r4,-8(fp)
     5a4:	e17fff15 	stw	r5,-4(fp)
  const struct fsdata_file *f;

  for(f = FS_ROOT;
     5a8:	008000f4 	movhi	r2,3
     5ac:	10b9e904 	addi	r2,r2,-6236
     5b0:	e0bffd15 	stw	r2,-12(fp)
     5b4:	00001306 	br	604 <fs_open+0x74>
      f != NULL;
      f = f->next) {
    if (!strcmp(name, (const char*)f->name)) {
     5b8:	e0bffd17 	ldw	r2,-12(fp)
     5bc:	10800117 	ldw	r2,4(r2)
     5c0:	e13ffe17 	ldw	r4,-8(fp)
     5c4:	100b883a 	mov	r5,r2
     5c8:	0017ec40 	call	17ec4 <strcmp>
     5cc:	10000a1e 	bne	r2,zero,5f8 <fs_open+0x68>
      file->data = f->data;
     5d0:	e0bffd17 	ldw	r2,-12(fp)
     5d4:	10c00217 	ldw	r3,8(r2)
     5d8:	e0bfff17 	ldw	r2,-4(fp)
     5dc:	10c00015 	stw	r3,0(r2)
      file->len = f->len;
     5e0:	e0bffd17 	ldw	r2,-12(fp)
     5e4:	10c00317 	ldw	r3,12(r2)
     5e8:	e0bfff17 	ldw	r2,-4(fp)
     5ec:	10c00115 	stw	r3,4(r2)
      return 1;
     5f0:	00800044 	movi	r2,1
     5f4:	00000606 	br	610 <fs_open+0x80>
{
  const struct fsdata_file *f;

  for(f = FS_ROOT;
      f != NULL;
      f = f->next) {
     5f8:	e0bffd17 	ldw	r2,-12(fp)
     5fc:	10800017 	ldw	r2,0(r2)
     600:	e0bffd15 	stw	r2,-12(fp)
int
fs_open(const char *name, struct fs_file *file)
{
  const struct fsdata_file *f;

  for(f = FS_ROOT;
     604:	e0bffd17 	ldw	r2,-12(fp)
     608:	103feb1e 	bne	r2,zero,5b8 <fs_open+0x28>
      file->data = f->data;
      file->len = f->len;
      return 1;
    }
  }
  return 0;
     60c:	0005883a 	mov	r2,zero
}
     610:	e037883a 	mov	sp,fp
     614:	dfc00117 	ldw	ra,4(sp)
     618:	df000017 	ldw	fp,0(sp)
     61c:	dec00204 	addi	sp,sp,8
     620:	f800283a 	ret

00000624 <conn_err>:
};

/*-----------------------------------------------------------------------------------*/
static void
conn_err(void *arg, err_t err)
{
     624:	defffb04 	addi	sp,sp,-20
     628:	dfc00415 	stw	ra,16(sp)
     62c:	df000315 	stw	fp,12(sp)
     630:	df000304 	addi	fp,sp,12
     634:	e13ffe15 	stw	r4,-8(fp)
     638:	2805883a 	mov	r2,r5
     63c:	e0bfff05 	stb	r2,-4(fp)
  struct http_state *hs;

  LWIP_UNUSED_ARG(err);

  hs = arg;
     640:	e0bffe17 	ldw	r2,-8(fp)
     644:	e0bffd15 	stw	r2,-12(fp)
  mem_free(hs);
     648:	e13ffd17 	ldw	r4,-12(fp)
     64c:	00084e80 	call	84e8 <mem_free>
}
     650:	e037883a 	mov	sp,fp
     654:	dfc00117 	ldw	ra,4(sp)
     658:	df000017 	ldw	fp,0(sp)
     65c:	dec00204 	addi	sp,sp,8
     660:	f800283a 	ret

00000664 <close_conn>:
/*-----------------------------------------------------------------------------------*/
static void
close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
     664:	defffc04 	addi	sp,sp,-16
     668:	dfc00315 	stw	ra,12(sp)
     66c:	df000215 	stw	fp,8(sp)
     670:	df000204 	addi	fp,sp,8
     674:	e13ffe15 	stw	r4,-8(fp)
     678:	e17fff15 	stw	r5,-4(fp)
  tcp_arg(pcb, NULL);
     67c:	e13ffe17 	ldw	r4,-8(fp)
     680:	000b883a 	mov	r5,zero
     684:	000d8e00 	call	d8e0 <tcp_arg>
  tcp_sent(pcb, NULL);
     688:	e13ffe17 	ldw	r4,-8(fp)
     68c:	000b883a 	mov	r5,zero
     690:	000d97c0 	call	d97c <tcp_sent>
  tcp_recv(pcb, NULL);
     694:	e13ffe17 	ldw	r4,-8(fp)
     698:	000b883a 	mov	r5,zero
     69c:	000d9100 	call	d910 <tcp_recv>
  mem_free(hs);
     6a0:	e13fff17 	ldw	r4,-4(fp)
     6a4:	00084e80 	call	84e8 <mem_free>
  tcp_close(pcb);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000bc380 	call	bc38 <tcp_close>
}
     6b0:	e037883a 	mov	sp,fp
     6b4:	dfc00117 	ldw	ra,4(sp)
     6b8:	df000017 	ldw	fp,0(sp)
     6bc:	dec00204 	addi	sp,sp,8
     6c0:	f800283a 	ret

000006c4 <send_data>:
/*-----------------------------------------------------------------------------------*/
static void
send_data(struct tcp_pcb *pcb, struct http_state *hs)
{
     6c4:	defffa04 	addi	sp,sp,-24
     6c8:	dfc00515 	stw	ra,20(sp)
     6cc:	df000415 	stw	fp,16(sp)
     6d0:	df000404 	addi	fp,sp,16
     6d4:	e13ffe15 	stw	r4,-8(fp)
     6d8:	e17fff15 	stw	r5,-4(fp)
  err_t err;
  u32_t len;

  /* We cannot send more data than space available in the send
     buffer. */     
  if (tcp_sndbuf(pcb) < hs->left) {
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	10801a8b 	ldhu	r2,106(r2)
     6e4:	10ffffcc 	andi	r3,r2,65535
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800017 	ldw	r2,0(r2)
     6f0:	1880052e 	bgeu	r3,r2,708 <send_data+0x44>
    len = tcp_sndbuf(pcb);
     6f4:	e0bffe17 	ldw	r2,-8(fp)
     6f8:	10801a8b 	ldhu	r2,106(r2)
     6fc:	10bfffcc 	andi	r2,r2,65535
     700:	e0bffc15 	stw	r2,-16(fp)
     704:	00000306 	br	714 <send_data+0x50>
  } else {
    len = hs->left;
     708:	e0bfff17 	ldw	r2,-4(fp)
     70c:	10800017 	ldw	r2,0(r2)
     710:	e0bffc15 	stw	r2,-16(fp)
    LWIP_ASSERT((len == hs->left), "hs->left did not fit into u16_t!");
  }

  do {
    err = tcp_write(pcb, hs->file, len, 0);
     714:	e0bfff17 	ldw	r2,-4(fp)
     718:	10c00117 	ldw	r3,4(r2)
     71c:	e0bffc17 	ldw	r2,-16(fp)
     720:	10bfffcc 	andi	r2,r2,65535
     724:	e13ffe17 	ldw	r4,-8(fp)
     728:	180b883a 	mov	r5,r3
     72c:	100d883a 	mov	r6,r2
     730:	000f883a 	mov	r7,zero
     734:	00125dc0 	call	125dc <tcp_write>
     738:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_MEM) {
     73c:	e0bffd07 	ldb	r2,-12(fp)
     740:	10bfffd8 	cmpnei	r2,r2,-1
     744:	1000031e 	bne	r2,zero,754 <send_data+0x90>
      len /= 2;
     748:	e0bffc17 	ldw	r2,-16(fp)
     74c:	1004d07a 	srli	r2,r2,1
     750:	e0bffc15 	stw	r2,-16(fp)
    }
  } while (err == ERR_MEM && len > 1);  
     754:	e0bffd07 	ldb	r2,-12(fp)
     758:	10bfffd8 	cmpnei	r2,r2,-1
     75c:	1000031e 	bne	r2,zero,76c <send_data+0xa8>
     760:	e0bffc17 	ldw	r2,-16(fp)
     764:	108000a8 	cmpgeui	r2,r2,2
     768:	103fea1e 	bne	r2,zero,714 <send_data+0x50>
  
  if (err == ERR_OK) {
     76c:	e0bffd07 	ldb	r2,-12(fp)
     770:	10000c1e 	bne	r2,zero,7a4 <send_data+0xe0>
    hs->file += len;
     774:	e0bfff17 	ldw	r2,-4(fp)
     778:	10c00117 	ldw	r3,4(r2)
     77c:	e0bffc17 	ldw	r2,-16(fp)
     780:	1887883a 	add	r3,r3,r2
     784:	e0bfff17 	ldw	r2,-4(fp)
     788:	10c00115 	stw	r3,4(r2)
    hs->left -= len;
     78c:	e0bfff17 	ldw	r2,-4(fp)
     790:	10c00017 	ldw	r3,0(r2)
     794:	e0bffc17 	ldw	r2,-16(fp)
     798:	1887c83a 	sub	r3,r3,r2
     79c:	e0bfff17 	ldw	r2,-4(fp)
     7a0:	10c00015 	stw	r3,0(r2)
    /*  } else {
    printf("send_data: error %s len %d %d\n", lwip_strerr(err), len, tcp_sndbuf(pcb));*/
  }
}
     7a4:	e037883a 	mov	sp,fp
     7a8:	dfc00117 	ldw	ra,4(sp)
     7ac:	df000017 	ldw	fp,0(sp)
     7b0:	dec00204 	addi	sp,sp,8
     7b4:	f800283a 	ret

000007b8 <http_poll>:
/*-----------------------------------------------------------------------------------*/
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
     7b8:	defffb04 	addi	sp,sp,-20
     7bc:	dfc00415 	stw	ra,16(sp)
     7c0:	df000315 	stw	fp,12(sp)
     7c4:	df000304 	addi	fp,sp,12
     7c8:	e13ffe15 	stw	r4,-8(fp)
     7cc:	e17fff15 	stw	r5,-4(fp)
  struct http_state *hs;

  hs = arg;
     7d0:	e0bffe17 	ldw	r2,-8(fp)
     7d4:	e0bffd15 	stw	r2,-12(fp)
  
  /*  printf("Polll\n");*/
  if ((hs == NULL) && (pcb->state == ESTABLISHED)) {
     7d8:	e0bffd17 	ldw	r2,-12(fp)
     7dc:	1000081e 	bne	r2,zero,800 <http_poll+0x48>
     7e0:	e0bfff17 	ldw	r2,-4(fp)
     7e4:	10800617 	ldw	r2,24(r2)
     7e8:	10800118 	cmpnei	r2,r2,4
     7ec:	1000041e 	bne	r2,zero,800 <http_poll+0x48>
    /*    printf("Null, close\n");*/
    tcp_abort(pcb);
     7f0:	e13fff17 	ldw	r4,-4(fp)
     7f4:	000bf140 	call	bf14 <tcp_abort>
    return ERR_ABRT;
     7f8:	00bffd84 	movi	r2,-10
     7fc:	00001a06 	br	868 <http_poll+0xb0>
  } else if (hs != NULL) {
     800:	e0bffd17 	ldw	r2,-12(fp)
     804:	10001726 	beq	r2,zero,864 <http_poll+0xac>
    ++hs->retries;
     808:	e0bffd17 	ldw	r2,-12(fp)
     80c:	10800203 	ldbu	r2,8(r2)
     810:	10800044 	addi	r2,r2,1
     814:	1007883a 	mov	r3,r2
     818:	e0bffd17 	ldw	r2,-12(fp)
     81c:	10c00205 	stb	r3,8(r2)
    if (hs->retries == 4) {
     820:	e0bffd17 	ldw	r2,-12(fp)
     824:	10800203 	ldbu	r2,8(r2)
     828:	10803fcc 	andi	r2,r2,255
     82c:	10800118 	cmpnei	r2,r2,4
     830:	1000091e 	bne	r2,zero,858 <http_poll+0xa0>
      tcp_arg(pcb, NULL);
     834:	e13fff17 	ldw	r4,-4(fp)
     838:	000b883a 	mov	r5,zero
     83c:	000d8e00 	call	d8e0 <tcp_arg>
      mem_free(hs);
     840:	e13ffd17 	ldw	r4,-12(fp)
     844:	00084e80 	call	84e8 <mem_free>
      tcp_abort(pcb);
     848:	e13fff17 	ldw	r4,-4(fp)
     84c:	000bf140 	call	bf14 <tcp_abort>
      return ERR_ABRT;
     850:	00bffd84 	movi	r2,-10
     854:	00000406 	br	868 <http_poll+0xb0>
    }
    send_data(pcb, hs);
     858:	e13fff17 	ldw	r4,-4(fp)
     85c:	e17ffd17 	ldw	r5,-12(fp)
     860:	00006c40 	call	6c4 <send_data>
  }

  return ERR_OK;
     864:	0005883a 	mov	r2,zero
}
     868:	e037883a 	mov	sp,fp
     86c:	dfc00117 	ldw	ra,4(sp)
     870:	df000017 	ldw	fp,0(sp)
     874:	dec00204 	addi	sp,sp,8
     878:	f800283a 	ret

0000087c <http_sent>:
/*-----------------------------------------------------------------------------------*/
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
     87c:	defffa04 	addi	sp,sp,-24
     880:	dfc00515 	stw	ra,20(sp)
     884:	df000415 	stw	fp,16(sp)
     888:	df000404 	addi	fp,sp,16
     88c:	e13ffd15 	stw	r4,-12(fp)
     890:	e17ffe15 	stw	r5,-8(fp)
     894:	3005883a 	mov	r2,r6
     898:	e0bfff0d 	sth	r2,-4(fp)
  struct http_state *hs;

  LWIP_UNUSED_ARG(len);

  hs = arg;
     89c:	e0bffd17 	ldw	r2,-12(fp)
     8a0:	e0bffc15 	stw	r2,-16(fp)

  hs->retries = 0;
     8a4:	e0bffc17 	ldw	r2,-16(fp)
     8a8:	10000205 	stb	zero,8(r2)
  
  if (hs->left > 0) {    
     8ac:	e0bffc17 	ldw	r2,-16(fp)
     8b0:	10800017 	ldw	r2,0(r2)
     8b4:	10000426 	beq	r2,zero,8c8 <http_sent+0x4c>
    send_data(pcb, hs);
     8b8:	e13ffe17 	ldw	r4,-8(fp)
     8bc:	e17ffc17 	ldw	r5,-16(fp)
     8c0:	00006c40 	call	6c4 <send_data>
     8c4:	00000306 	br	8d4 <http_sent+0x58>
  } else {
    close_conn(pcb, hs);
     8c8:	e13ffe17 	ldw	r4,-8(fp)
     8cc:	e17ffc17 	ldw	r5,-16(fp)
     8d0:	00006640 	call	664 <close_conn>
  }

  return ERR_OK;
     8d4:	0005883a 	mov	r2,zero
}
     8d8:	e037883a 	mov	sp,fp
     8dc:	dfc00117 	ldw	ra,4(sp)
     8e0:	df000017 	ldw	fp,0(sp)
     8e4:	dec00204 	addi	sp,sp,8
     8e8:	f800283a 	ret

000008ec <http_recv>:
/*-----------------------------------------------------------------------------------*/
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
     8ec:	defff504 	addi	sp,sp,-44
     8f0:	dfc00a15 	stw	ra,40(sp)
     8f4:	df000915 	stw	fp,36(sp)
     8f8:	df000904 	addi	fp,sp,36
     8fc:	e13ffc15 	stw	r4,-16(fp)
     900:	e17ffd15 	stw	r5,-12(fp)
     904:	e1bffe15 	stw	r6,-8(fp)
     908:	3805883a 	mov	r2,r7
     90c:	e0bfff05 	stb	r2,-4(fp)
  int i;
  char *data;
  struct fs_file file;
  struct http_state *hs;

  hs = arg;
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	e0bff815 	stw	r2,-32(fp)

  if (err == ERR_OK && p != NULL) {
     918:	e0bfff07 	ldb	r2,-4(fp)
     91c:	1000791e 	bne	r2,zero,b04 <http_recv+0x218>
     920:	e0bffe17 	ldw	r2,-8(fp)
     924:	10007726 	beq	r2,zero,b04 <http_recv+0x218>

    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
     928:	e0bffe17 	ldw	r2,-8(fp)
     92c:	1080020b 	ldhu	r2,8(r2)
     930:	10bfffcc 	andi	r2,r2,65535
     934:	e13ffd17 	ldw	r4,-12(fp)
     938:	100b883a 	mov	r5,r2
     93c:	000c4040 	call	c404 <tcp_recved>
    
    if (hs->file == NULL) {
     940:	e0bff817 	ldw	r2,-32(fp)
     944:	10800117 	ldw	r2,4(r2)
     948:	10006c1e 	bne	r2,zero,afc <http_recv+0x210>
      data = p->payload;
     94c:	e0bffe17 	ldw	r2,-8(fp)
     950:	10800117 	ldw	r2,4(r2)
     954:	e0bff915 	stw	r2,-28(fp)
      
      if (strncmp(data, "GET ", 4) == 0) {
     958:	e13ff917 	ldw	r4,-28(fp)
     95c:	014000f4 	movhi	r5,3
     960:	2979ed04 	addi	r5,r5,-6220
     964:	01800104 	movi	r6,4
     968:	0017ff40 	call	17ff4 <strncmp>
     96c:	10005d1e 	bne	r2,zero,ae4 <http_recv+0x1f8>
        for(i = 0; i < 40; i++) {
     970:	e03ff715 	stw	zero,-36(fp)
     974:	00002606 	br	a10 <http_recv+0x124>
          if (((char *)data + 4)[i] == ' ' ||
     978:	e0bff717 	ldw	r2,-36(fp)
     97c:	10800104 	addi	r2,r2,4
     980:	e0fff917 	ldw	r3,-28(fp)
     984:	1885883a 	add	r2,r3,r2
     988:	10800003 	ldbu	r2,0(r2)
     98c:	10803fcc 	andi	r2,r2,255
     990:	1080201c 	xori	r2,r2,128
     994:	10bfe004 	addi	r2,r2,-128
     998:	10800820 	cmpeqi	r2,r2,32
     99c:	1000141e 	bne	r2,zero,9f0 <http_recv+0x104>
             ((char *)data + 4)[i] == '\r' ||
     9a0:	e0bff717 	ldw	r2,-36(fp)
     9a4:	10800104 	addi	r2,r2,4
     9a8:	e0fff917 	ldw	r3,-28(fp)
     9ac:	1885883a 	add	r2,r3,r2
     9b0:	10800003 	ldbu	r2,0(r2)
    if (hs->file == NULL) {
      data = p->payload;
      
      if (strncmp(data, "GET ", 4) == 0) {
        for(i = 0; i < 40; i++) {
          if (((char *)data + 4)[i] == ' ' ||
     9b4:	10803fcc 	andi	r2,r2,255
     9b8:	1080201c 	xori	r2,r2,128
     9bc:	10bfe004 	addi	r2,r2,-128
     9c0:	10800360 	cmpeqi	r2,r2,13
     9c4:	10000a1e 	bne	r2,zero,9f0 <http_recv+0x104>
             ((char *)data + 4)[i] == '\r' ||
             ((char *)data + 4)[i] == '\n') {
     9c8:	e0bff717 	ldw	r2,-36(fp)
     9cc:	10800104 	addi	r2,r2,4
     9d0:	e0fff917 	ldw	r3,-28(fp)
     9d4:	1885883a 	add	r2,r3,r2
     9d8:	10800003 	ldbu	r2,0(r2)
      data = p->payload;
      
      if (strncmp(data, "GET ", 4) == 0) {
        for(i = 0; i < 40; i++) {
          if (((char *)data + 4)[i] == ' ' ||
             ((char *)data + 4)[i] == '\r' ||
     9dc:	10803fcc 	andi	r2,r2,255
     9e0:	1080201c 	xori	r2,r2,128
     9e4:	10bfe004 	addi	r2,r2,-128
     9e8:	10800298 	cmpnei	r2,r2,10
     9ec:	1000051e 	bne	r2,zero,a04 <http_recv+0x118>
             ((char *)data + 4)[i] == '\n') {
            ((char *)data + 4)[i] = 0;
     9f0:	e0bff717 	ldw	r2,-36(fp)
     9f4:	10800104 	addi	r2,r2,4
     9f8:	e0fff917 	ldw	r3,-28(fp)
     9fc:	1885883a 	add	r2,r3,r2
     a00:	10000005 	stb	zero,0(r2)
    
    if (hs->file == NULL) {
      data = p->payload;
      
      if (strncmp(data, "GET ", 4) == 0) {
        for(i = 0; i < 40; i++) {
     a04:	e0bff717 	ldw	r2,-36(fp)
     a08:	10800044 	addi	r2,r2,1
     a0c:	e0bff715 	stw	r2,-36(fp)
     a10:	e0bff717 	ldw	r2,-36(fp)
     a14:	10800a10 	cmplti	r2,r2,40
     a18:	103fd71e 	bne	r2,zero,978 <http_recv+0x8c>
             ((char *)data + 4)[i] == '\n') {
            ((char *)data + 4)[i] = 0;
          }
        }

        if (*(char *)(data + 4) == '/' &&
     a1c:	e0bff917 	ldw	r2,-28(fp)
     a20:	10800104 	addi	r2,r2,4
     a24:	10800003 	ldbu	r2,0(r2)
     a28:	10803fcc 	andi	r2,r2,255
     a2c:	1080201c 	xori	r2,r2,128
     a30:	10bfe004 	addi	r2,r2,-128
     a34:	10800bd8 	cmpnei	r2,r2,47
     a38:	10000d1e 	bne	r2,zero,a70 <http_recv+0x184>
           *(char *)(data + 5) == 0) {
     a3c:	e0bff917 	ldw	r2,-28(fp)
     a40:	10800144 	addi	r2,r2,5
     a44:	10800003 	ldbu	r2,0(r2)
             ((char *)data + 4)[i] == '\n') {
            ((char *)data + 4)[i] = 0;
          }
        }

        if (*(char *)(data + 4) == '/' &&
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	1080201c 	xori	r2,r2,128
     a50:	10bfe004 	addi	r2,r2,-128
     a54:	1000061e 	bne	r2,zero,a70 <http_recv+0x184>
           *(char *)(data + 5) == 0) {
          fs_open("/index.html", &file);
     a58:	e0bffa04 	addi	r2,fp,-24
     a5c:	010000f4 	movhi	r4,3
     a60:	2139ef04 	addi	r4,r4,-6212
     a64:	100b883a 	mov	r5,r2
     a68:	00005900 	call	590 <fs_open>
     a6c:	00000c06 	br	aa0 <http_recv+0x1b4>
        } else if (!fs_open((char *)data + 4, &file)) {
     a70:	e0bff917 	ldw	r2,-28(fp)
     a74:	10c00104 	addi	r3,r2,4
     a78:	e0bffa04 	addi	r2,fp,-24
     a7c:	1809883a 	mov	r4,r3
     a80:	100b883a 	mov	r5,r2
     a84:	00005900 	call	590 <fs_open>
     a88:	1000051e 	bne	r2,zero,aa0 <http_recv+0x1b4>
          fs_open("/404.html", &file);
     a8c:	e0bffa04 	addi	r2,fp,-24
     a90:	010000f4 	movhi	r4,3
     a94:	2139f204 	addi	r4,r4,-6200
     a98:	100b883a 	mov	r5,r2
     a9c:	00005900 	call	590 <fs_open>
        }

        hs->file = file.data;
     aa0:	e0fffa17 	ldw	r3,-24(fp)
     aa4:	e0bff817 	ldw	r2,-32(fp)
     aa8:	10c00115 	stw	r3,4(r2)
        LWIP_ASSERT((file.len >= 0), "File length must be positive!");
        hs->left = file.len;
     aac:	e0bffb17 	ldw	r2,-20(fp)
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bff817 	ldw	r2,-32(fp)
     ab8:	10c00015 	stw	r3,0(r2)
        /* printf("data %p len %ld\n", hs->file, hs->left);*/

        pbuf_free(p);
     abc:	e13ffe17 	ldw	r4,-8(fp)
     ac0:	000a4200 	call	a420 <pbuf_free>
        send_data(pcb, hs);
     ac4:	e13ffd17 	ldw	r4,-12(fp)
     ac8:	e17ff817 	ldw	r5,-32(fp)
     acc:	00006c40 	call	6c4 <send_data>

        /* Tell TCP that we wish be to informed of data that has been
           successfully sent by a call to the http_sent() function. */
        tcp_sent(pcb, http_sent);
     ad0:	e13ffd17 	ldw	r4,-12(fp)
     ad4:	01400034 	movhi	r5,0
     ad8:	29421f04 	addi	r5,r5,2172
     adc:	000d97c0 	call	d97c <tcp_sent>
     ae0:	00000806 	br	b04 <http_recv+0x218>
      } else {
        pbuf_free(p);
     ae4:	e13ffe17 	ldw	r4,-8(fp)
     ae8:	000a4200 	call	a420 <pbuf_free>
        close_conn(pcb, hs);
     aec:	e13ffd17 	ldw	r4,-12(fp)
     af0:	e17ff817 	ldw	r5,-32(fp)
     af4:	00006640 	call	664 <close_conn>
     af8:	00000206 	br	b04 <http_recv+0x218>
      }
    } else {
      pbuf_free(p);
     afc:	e13ffe17 	ldw	r4,-8(fp)
     b00:	000a4200 	call	a420 <pbuf_free>
    }
  }

  if (err == ERR_OK && p == NULL) {
     b04:	e0bfff07 	ldb	r2,-4(fp)
     b08:	1000051e 	bne	r2,zero,b20 <http_recv+0x234>
     b0c:	e0bffe17 	ldw	r2,-8(fp)
     b10:	1000031e 	bne	r2,zero,b20 <http_recv+0x234>
    close_conn(pcb, hs);
     b14:	e13ffd17 	ldw	r4,-12(fp)
     b18:	e17ff817 	ldw	r5,-32(fp)
     b1c:	00006640 	call	664 <close_conn>
  }
  return ERR_OK;
     b20:	0005883a 	mov	r2,zero
}
     b24:	e037883a 	mov	sp,fp
     b28:	dfc00117 	ldw	ra,4(sp)
     b2c:	df000017 	ldw	fp,0(sp)
     b30:	dec00204 	addi	sp,sp,8
     b34:	f800283a 	ret

00000b38 <http_accept>:
/*-----------------------------------------------------------------------------------*/
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
     b38:	defff904 	addi	sp,sp,-28
     b3c:	dfc00615 	stw	ra,24(sp)
     b40:	df000515 	stw	fp,20(sp)
     b44:	df000504 	addi	fp,sp,20
     b48:	e13ffd15 	stw	r4,-12(fp)
     b4c:	e17ffe15 	stw	r5,-8(fp)
     b50:	3005883a 	mov	r2,r6
     b54:	e0bfff05 	stb	r2,-4(fp)
  struct http_state *hs;
  struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)arg;
     b58:	e0bffd17 	ldw	r2,-12(fp)
     b5c:	e0bffb15 	stw	r2,-20(fp)

  LWIP_UNUSED_ARG(err);

  /* Decrease the listen backlog counter */
  tcp_accepted(lpcb);
     b60:	e0bffb17 	ldw	r2,-20(fp)
     b64:	10800617 	ldw	r2,24(r2)
     b68:	10800060 	cmpeqi	r2,r2,1
     b6c:	1000091e 	bne	r2,zero,b94 <http_accept+0x5c>
     b70:	010000f4 	movhi	r4,3
     b74:	2139f504 	addi	r4,r4,-6188
     b78:	014000f4 	movhi	r5,3
     b7c:	2979ff04 	addi	r5,r5,-6148
     b80:	01803584 	movi	r6,214
     b84:	01c000f4 	movhi	r7,3
     b88:	39fa0b04 	addi	r7,r7,-6100
     b8c:	0017c440 	call	17c44 <printf>
     b90:	003fff06 	br	b90 <http_accept+0x58>

  tcp_setprio(pcb, TCP_PRIO_MIN);
     b94:	e13ffe17 	ldw	r4,-8(fp)
     b98:	01400044 	movi	r5,1
     b9c:	000d44c0 	call	d44c <tcp_setprio>
  
  /* Allocate memory for the structure that holds the state of the
     connection. */
  hs = (struct http_state *)mem_malloc(sizeof(struct http_state));
     ba0:	01000304 	movi	r4,12
     ba4:	00089b80 	call	89b8 <mem_malloc>
     ba8:	e0bffc15 	stw	r2,-16(fp)

  if (hs == NULL) {
     bac:	e0bffc17 	ldw	r2,-16(fp)
     bb0:	1000051e 	bne	r2,zero,bc8 <http_accept+0x90>
    printf("http_accept: Out of memory\n");
     bb4:	010000f4 	movhi	r4,3
     bb8:	213a0f04 	addi	r4,r4,-6084
     bbc:	0017eb00 	call	17eb0 <puts>
    return ERR_MEM;
     bc0:	00bfffc4 	movi	r2,-1
     bc4:	00001706 	br	c24 <http_accept+0xec>
  }
  
  /* Initialize the structure. */
  hs->file = NULL;
     bc8:	e0bffc17 	ldw	r2,-16(fp)
     bcc:	10000115 	stw	zero,4(r2)
  hs->left = 0;
     bd0:	e0bffc17 	ldw	r2,-16(fp)
     bd4:	10000015 	stw	zero,0(r2)
  hs->retries = 0;
     bd8:	e0bffc17 	ldw	r2,-16(fp)
     bdc:	10000205 	stb	zero,8(r2)
  
  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
     be0:	e13ffe17 	ldw	r4,-8(fp)
     be4:	e17ffc17 	ldw	r5,-16(fp)
     be8:	000d8e00 	call	d8e0 <tcp_arg>

  /* Tell TCP that we wish to be informed of incoming data by a call
     to the http_recv() function. */
  tcp_recv(pcb, http_recv);
     bec:	e13ffe17 	ldw	r4,-8(fp)
     bf0:	01400034 	movhi	r5,0
     bf4:	29423b04 	addi	r5,r5,2284
     bf8:	000d9100 	call	d910 <tcp_recv>

  tcp_err(pcb, conn_err);
     bfc:	e13ffe17 	ldw	r4,-8(fp)
     c00:	01400034 	movhi	r5,0
     c04:	29418904 	addi	r5,r5,1572
     c08:	000d9e80 	call	d9e8 <tcp_err>
  
  tcp_poll(pcb, http_poll, 4);
     c0c:	e13ffe17 	ldw	r4,-8(fp)
     c10:	01400034 	movhi	r5,0
     c14:	2941ee04 	addi	r5,r5,1976
     c18:	01800104 	movi	r6,4
     c1c:	000da840 	call	da84 <tcp_poll>

  return ERR_OK;
     c20:	0005883a 	mov	r2,zero
}
     c24:	e037883a 	mov	sp,fp
     c28:	dfc00117 	ldw	ra,4(sp)
     c2c:	df000017 	ldw	fp,0(sp)
     c30:	dec00204 	addi	sp,sp,8
     c34:	f800283a 	ret

00000c38 <httpd_init>:
/*-----------------------------------------------------------------------------------*/
void
httpd_init(void)
{
     c38:	defffd04 	addi	sp,sp,-12
     c3c:	dfc00215 	stw	ra,8(sp)
     c40:	df000115 	stw	fp,4(sp)
     c44:	df000104 	addi	fp,sp,4
  struct tcp_pcb *pcb;

  pcb = tcp_new();
     c48:	000d8b40 	call	d8b4 <tcp_new>
     c4c:	e0bfff15 	stw	r2,-4(fp)
  tcp_bind(pcb, IP_ADDR_ANY, 80);
     c50:	e13fff17 	ldw	r4,-4(fp)
     c54:	014000f4 	movhi	r5,3
     c58:	29532904 	addi	r5,r5,19620
     c5c:	01801404 	movi	r6,80
     c60:	000bf480 	call	bf48 <tcp_bind>
  pcb = tcp_listen(pcb);
     c64:	e13fff17 	ldw	r4,-4(fp)
     c68:	01403fc4 	movi	r5,255
     c6c:	000c1040 	call	c104 <tcp_listen_with_backlog>
     c70:	e0bfff15 	stw	r2,-4(fp)
  tcp_arg(pcb, pcb);
     c74:	e13fff17 	ldw	r4,-4(fp)
     c78:	e17fff17 	ldw	r5,-4(fp)
     c7c:	000d8e00 	call	d8e0 <tcp_arg>
  tcp_accept(pcb, http_accept);
     c80:	e13fff17 	ldw	r4,-4(fp)
     c84:	01400034 	movhi	r5,0
     c88:	2942ce04 	addi	r5,r5,2872
     c8c:	000da540 	call	da54 <tcp_accept>
}
     c90:	e037883a 	mov	sp,fp
     c94:	dfc00117 	ldw	ra,4(sp)
     c98:	df000017 	ldw	fp,0(sp)
     c9c:	dec00204 	addi	sp,sp,8
     ca0:	f800283a 	ret

00000ca4 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface, struct ethernetif *ethernetif)
{
     ca4:	defff004 	addi	sp,sp,-64
     ca8:	dfc00f15 	stw	ra,60(sp)
     cac:	df000e15 	stw	fp,56(sp)
     cb0:	df000e04 	addi	fp,sp,56
     cb4:	e13ffe15 	stw	r4,-8(fp)
     cb8:	e17fff15 	stw	r5,-4(fp)
   int speed, duplex, result;
   int x;
   
   alt_sgdma_dev *sgdma_tx_dev;
   alt_sgdma_dev *sgdma_rx_dev;
   alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
     cbc:	00c00134 	movhi	r3,4
     cc0:	18d14104 	addi	r3,r3,17668
     cc4:	e0bffe17 	ldw	r2,-8(fp)
     cc8:	1004917a 	slli	r2,r2,5
     ccc:	1885883a 	add	r2,r3,r2
     cd0:	10800704 	addi	r2,r2,28
     cd4:	10800017 	ldw	r2,0(r2)
     cd8:	e0bff715 	stw	r2,-36(fp)
   np_tse_mac *mi_base;
   alt_tse_mac_info *pmac_info;
   
   dprintf(("[tse_mac_init]\n"));
     cdc:	010000f4 	movhi	r4,3
     ce0:	213a1604 	addi	r4,r4,-6056
     ce4:	0017eb00 	call	17eb0 <puts>
#ifdef PRINTIF
   dprintf(("tse_mac_init %d\n", iface));
#endif    
   // These lines were done in prep_tse_mac 
   tse_hw = &tse_mac_device[iface];	
     ce8:	e0bffe17 	ldw	r2,-8(fp)
     cec:	10c01224 	muli	r3,r2,72
     cf0:	008000f4 	movhi	r2,3
     cf4:	108ac104 	addi	r2,r2,11012
     cf8:	1885883a 	add	r2,r3,r2
     cfc:	e0bff715 	stw	r2,-36(fp)
   tse[iface].tse = tse_hw;
     d00:	00c00134 	movhi	r3,4
     d04:	18d14104 	addi	r3,r3,17668
     d08:	e0bffe17 	ldw	r2,-8(fp)
     d0c:	1004917a 	slli	r2,r2,5
     d10:	1885883a 	add	r2,r3,r2
     d14:	10800704 	addi	r2,r2,28
     d18:	e0fff717 	ldw	r3,-36(fp)
     d1c:	10c00015 	stw	r3,0(r2)
	
   // Store ethernetif for access, and the tse in ethernetif for access in tse_mac_raw_send/tse_mac_rcv
   tse[iface].ethernetif = ethernetif;
     d20:	00c00134 	movhi	r3,4
     d24:	18d14104 	addi	r3,r3,17668
     d28:	e0bffe17 	ldw	r2,-8(fp)
     d2c:	1004917a 	slli	r2,r2,5
     d30:	1885883a 	add	r2,r3,r2
     d34:	10800604 	addi	r2,r2,24
     d38:	e0ffff17 	ldw	r3,-4(fp)
     d3c:	10c00015 	stw	r3,0(r2)
   ethernetif->iface = iface;
     d40:	e0bfff17 	ldw	r2,-4(fp)
     d44:	e0fffe17 	ldw	r3,-8(fp)
     d48:	10c00115 	stw	r3,4(r2)
   ethernetif->tse_info = &tse[iface];
     d4c:	e0bffe17 	ldw	r2,-8(fp)
     d50:	1006917a 	slli	r3,r2,5
     d54:	00800134 	movhi	r2,4
     d58:	10914104 	addi	r2,r2,17668
     d5c:	1887883a 	add	r3,r3,r2
     d60:	e0bfff17 	ldw	r2,-4(fp)
     d64:	10c01615 	stw	r3,88(r2)

   if (tse_hw->ext_desc_mem == 1)
     d68:	e0bff717 	ldw	r2,-36(fp)
     d6c:	10800783 	ldbu	r2,30(r2)
     d70:	10803fcc 	andi	r2,r2,255
     d74:	10800058 	cmpnei	r2,r2,1
     d78:	10000b1e 	bne	r2,zero,da8 <tse_mac_init+0x104>
      tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
     d7c:	e0bff717 	ldw	r2,-36(fp)
     d80:	10800817 	ldw	r2,32(r2)
     d84:	1007883a 	mov	r3,r2
     d88:	01000134 	movhi	r4,4
     d8c:	21114104 	addi	r4,r4,17668
     d90:	e0bffe17 	ldw	r2,-8(fp)
     d94:	1004917a 	slli	r2,r2,5
     d98:	2085883a 	add	r2,r4,r2
     d9c:	10800504 	addi	r2,r2,20
     da0:	10c00015 	stw	r3,0(r2)
     da4:	00001206 	br	df0 <tse_mac_init+0x14c>
   else
      {
      unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
     da8:	01002804 	movi	r4,160
     dac:	0021d240 	call	21d24 <alt_uncached_malloc>
     db0:	e0bff615 	stw	r2,-40(fp)
    
      while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
     db4:	00000306 	br	dc4 <tse_mac_init+0x120>
         temp_desc++;
     db8:	e0bff617 	ldw	r2,-40(fp)
     dbc:	10800044 	addi	r2,r2,1
     dc0:	e0bff615 	stw	r2,-40(fp)
      tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
   else
      {
      unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
    
      while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
     dc4:	e0bff617 	ldw	r2,-40(fp)
     dc8:	108007cc 	andi	r2,r2,31
     dcc:	103ffa1e 	bne	r2,zero,db8 <tse_mac_init+0x114>
         temp_desc++;
      tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
     dd0:	00c00134 	movhi	r3,4
     dd4:	18d14104 	addi	r3,r3,17668
     dd8:	e0bffe17 	ldw	r2,-8(fp)
     ddc:	1004917a 	slli	r2,r2,5
     de0:	1885883a 	add	r2,r3,r2
     de4:	10800504 	addi	r2,r2,20
     de8:	e0fff617 	ldw	r3,-40(fp)
     dec:	10c00015 	stw	r3,0(r2)
      }

   
   /* Get the Rx and Tx SGDMA addresses */
   sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
     df0:	e0bff717 	ldw	r2,-36(fp)
     df4:	10800517 	ldw	r2,20(r2)
     df8:	1009883a 	mov	r4,r2
     dfc:	0025d840 	call	25d84 <alt_avalon_sgdma_open>
     e00:	e0bff815 	stw	r2,-32(fp)
   if(!sgdma_tx_dev) 
     e04:	e0bff817 	ldw	r2,-32(fp)
     e08:	1000051e 	bne	r2,zero,e20 <tse_mac_init+0x17c>
      {
      dprintf(("[triple_speed_ethernet_init] Error opening TX SGDMA\n"));
     e0c:	010000f4 	movhi	r4,3
     e10:	213a1a04 	addi	r4,r4,-6040
     e14:	0017eb00 	call	17eb0 <puts>
      return ENP_RESOURCE;
     e18:	00bffa84 	movi	r2,-22
     e1c:	0001b606 	br	14f8 <tse_mac_init+0x854>
      }
  
   sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
     e20:	e0bff717 	ldw	r2,-36(fp)
     e24:	10800617 	ldw	r2,24(r2)
     e28:	1009883a 	mov	r4,r2
     e2c:	0025d840 	call	25d84 <alt_avalon_sgdma_open>
     e30:	e0bff915 	stw	r2,-28(fp)
   if(!sgdma_rx_dev) 
     e34:	e0bff917 	ldw	r2,-28(fp)
     e38:	1000051e 	bne	r2,zero,e50 <tse_mac_init+0x1ac>
      {
      dprintf(("[triple_speed_ethernet_init] Error opening RX SGDMA\n"));
     e3c:	010000f4 	movhi	r4,3
     e40:	213a2704 	addi	r4,r4,-5988
     e44:	0017eb00 	call	17eb0 <puts>
      return ENP_RESOURCE;
     e48:	00bffa84 	movi	r2,-22
     e4c:	0001aa06 	br	14f8 <tse_mac_init+0x854>
      }


   /* Initialize mtip_mac_trans_info structure with values from <system.h>*/

   tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
     e50:	e0bffe17 	ldw	r2,-8(fp)
     e54:	1006917a 	slli	r3,r2,5
     e58:	00800134 	movhi	r2,4
     e5c:	10914104 	addi	r2,r2,17668
     e60:	1889883a 	add	r4,r3,r2
     e64:	e0bff717 	ldw	r2,-36(fp)
     e68:	11400017 	ldw	r5,0(r2)
     e6c:	e0fff817 	ldw	r3,-32(fp)
     e70:	e0bff917 	ldw	r2,-28(fp)
     e74:	d8000015 	stw	zero,0(sp)
     e78:	180d883a 	mov	r6,r3
     e7c:	100f883a 	mov	r7,r2
     e80:	00265740 	call	26574 <tse_mac_initTransInfo2>
                                   (unsigned int)sgdma_tx_dev,            
                                   (unsigned int)sgdma_rx_dev,
                                   0);
   mi_base = tse[iface].mi.base;
     e84:	00c00134 	movhi	r3,4
     e88:	18d14104 	addi	r3,r3,17668
     e8c:	e0bffe17 	ldw	r2,-8(fp)
     e90:	1004917a 	slli	r2,r2,5
     e94:	1885883a 	add	r2,r3,r2
     e98:	10800017 	ldw	r2,0(r2)
     e9c:	e0bffa15 	stw	r2,-24(fp)

   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
     ea0:	00c00134 	movhi	r3,4
     ea4:	18d14104 	addi	r3,r3,17668
     ea8:	e0bffe17 	ldw	r2,-8(fp)
     eac:	1004917a 	slli	r2,r2,5
     eb0:	1885883a 	add	r2,r3,r2
     eb4:	10800204 	addi	r2,r2,8
     eb8:	10800017 	ldw	r2,0(r2)
     ebc:	10800317 	ldw	r2,12(r2)
     ec0:	10800404 	addi	r2,r2,16
     ec4:	00c00074 	movhi	r3,1
     ec8:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
     ecc:	00c00134 	movhi	r3,4
     ed0:	18d14104 	addi	r3,r3,17668
     ed4:	e0bffe17 	ldw	r2,-8(fp)
     ed8:	1004917a 	slli	r2,r2,5
     edc:	1885883a 	add	r2,r3,r2
     ee0:	10800204 	addi	r2,r2,8
     ee4:	10800017 	ldw	r2,0(r2)
     ee8:	10800317 	ldw	r2,12(r2)
     eec:	10800404 	addi	r2,r2,16
     ef0:	0007883a 	mov	r3,zero
     ef4:	10c00035 	stwio	r3,0(r2)
   
   /* reset the PHY if necessary */
   result = getPHYSpeed(tse[iface].mi.base);
     ef8:	00c00134 	movhi	r3,4
     efc:	18d14104 	addi	r3,r3,17668
     f00:	e0bffe17 	ldw	r2,-8(fp)
     f04:	1004917a 	slli	r2,r2,5
     f08:	1885883a 	add	r2,r3,r2
     f0c:	10800017 	ldw	r2,0(r2)
     f10:	1009883a 	mov	r4,r2
     f14:	00279f40 	call	279f4 <getPHYSpeed>
     f18:	e0bffb15 	stw	r2,-20(fp)
   speed  = (result >> 1) & 0x07;
     f1c:	e0bffb17 	ldw	r2,-20(fp)
     f20:	1005d07a 	srai	r2,r2,1
     f24:	108001cc 	andi	r2,r2,7
     f28:	e0bffc15 	stw	r2,-16(fp)
   duplex = result & 0x01;
     f2c:	e0bffb17 	ldw	r2,-20(fp)
     f30:	1080004c 	andi	r2,r2,1
     f34:	e0bff415 	stw	r2,-48(fp)

   /* reset the mac */ 
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
     f38:	00c00134 	movhi	r3,4
     f3c:	18d14104 	addi	r3,r3,17668
     f40:	e0bffe17 	ldw	r2,-8(fp)
     f44:	1004917a 	slli	r2,r2,5
     f48:	1885883a 	add	r2,r3,r2
     f4c:	10800017 	ldw	r2,0(r2)
     f50:	10800204 	addi	r2,r2,8
     f54:	00c800c4 	movi	r3,8195
     f58:	10c00035 	stwio	r3,0(r2)
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
     f5c:	e03ff515 	stw	zero,-44(fp)
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
     f60:	00000706 	br	f80 <tse_mac_init+0x2dc>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) 
      {
      if( x++ > 10000 ) 
     f64:	e0bff517 	ldw	r2,-44(fp)
     f68:	1089c448 	cmpgei	r2,r2,10001
     f6c:	e0fff517 	ldw	r3,-44(fp)
     f70:	18c00044 	addi	r3,r3,1
     f74:	e0fff515 	stw	r3,-44(fp)
     f78:	10803fcc 	andi	r2,r2,255
     f7c:	10000b1e 	bne	r2,zero,fac <tse_mac_init+0x308>
                             mmac_cc_SW_RESET_mask | 
                             mmac_cc_TX_ENA_mask | 
                             mmac_cc_RX_ENA_mask);
  
   x=0;
   while(IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) & 
     f80:	00c00134 	movhi	r3,4
     f84:	18d14104 	addi	r3,r3,17668
     f88:	e0bffe17 	ldw	r2,-8(fp)
     f8c:	1004917a 	slli	r2,r2,5
     f90:	1885883a 	add	r2,r3,r2
     f94:	10800017 	ldw	r2,0(r2)
     f98:	10800204 	addi	r2,r2,8
     f9c:	10800037 	ldwio	r2,0(r2)
     fa0:	1088000c 	andi	r2,r2,8192
     fa4:	103fef1e 	bne	r2,zero,f64 <tse_mac_init+0x2c0>
     fa8:	00000106 	br	fb0 <tse_mac_init+0x30c>
         ALTERA_TSEMAC_CMD_SW_RESET_MSK) 
      {
      if( x++ > 10000 ) 
         break;
     fac:	0001883a 	nop
      }
  
   if(x >= 10000)
     fb0:	e0bff517 	ldw	r2,-44(fp)
     fb4:	1089c410 	cmplti	r2,r2,10000
     fb8:	1000031e 	bne	r2,zero,fc8 <tse_mac_init+0x324>
      dprintf(("TSEMAC SW reset bit never cleared!\n"));
     fbc:	010000f4 	movhi	r4,3
     fc0:	213a3404 	addi	r4,r4,-5936
     fc4:	0017eb00 	call	17eb0 <puts>

   dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
     fc8:	00c00134 	movhi	r3,4
     fcc:	18d14104 	addi	r3,r3,17668
     fd0:	e0bffe17 	ldw	r2,-8(fp)
     fd4:	1004917a 	slli	r2,r2,5
     fd8:	1885883a 	add	r2,r3,r2
     fdc:	10800017 	ldw	r2,0(r2)
     fe0:	10800204 	addi	r2,r2,8
     fe4:	10800037 	ldwio	r2,0(r2)
     fe8:	e0bff315 	stw	r2,-52(fp)
   if( (dat & 0x03) != 0 ) 
     fec:	e0bff317 	ldw	r2,-52(fp)
     ff0:	108000cc 	andi	r2,r2,3
     ff4:	10000526 	beq	r2,zero,100c <tse_mac_init+0x368>
      printf("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat);
     ff8:	010000f4 	movhi	r4,3
     ffc:	213a3d04 	addi	r4,r4,-5900
    1000:	e17ff317 	ldw	r5,-52(fp)
    1004:	0017c440 	call	17c44 <printf>
    1008:	00000506 	br	1020 <tse_mac_init+0x37c>
   else
      printf("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat);
    100c:	010000f4 	movhi	r4,3
    1010:	213a5104 	addi	r4,r4,-5820
    1014:	e17ff517 	ldw	r5,-44(fp)
    1018:	e1bff317 	ldw	r6,-52(fp)
    101c:	0017c440 	call	17c44 <printf>
  
   /* Initialize MAC registers */
   IOWR_ALTERA_TSEMAC_FRM_LENGTH(mi_base, PBUF_POOL_BUFSIZE+ETH_PAD_SIZE); 
    1020:	e0bffa17 	ldw	r2,-24(fp)
    1024:	10800504 	addi	r2,r2,20
    1028:	00c17b84 	movi	r3,1518
    102c:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(mi_base, 8);
    1030:	e0bffa17 	ldw	r2,-24(fp)
    1034:	10800b04 	addi	r2,r2,44
    1038:	00c00204 	movi	r3,8
    103c:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(mi_base, 8);
    1040:	e0bffa17 	ldw	r2,-24(fp)
    1044:	10800c04 	addi	r2,r2,48
    1048:	00c00204 	movi	r3,8
    104c:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(mi_base, 8);
    1050:	e0bffa17 	ldw	r2,-24(fp)
    1054:	10800d04 	addi	r2,r2,52
    1058:	00c00204 	movi	r3,8
    105c:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(mi_base,  3);
    1060:	e0bffa17 	ldw	r2,-24(fp)
    1064:	10800e04 	addi	r2,r2,56
    1068:	00c000c4 	movi	r3,3
    106c:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(mi_base, tse_hw->tse_tx_depth - 16); //1024/4;  
    1070:	e0bffa17 	ldw	r2,-24(fp)
    1074:	10800904 	addi	r2,r2,36
    1078:	e0fff717 	ldw	r3,-36(fp)
    107c:	18c0010b 	ldhu	r3,4(r3)
    1080:	18ffffcc 	andi	r3,r3,65535
    1084:	18fffc04 	addi	r3,r3,-16
    1088:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(mi_base,  0); //32/4; // start transmit when there are 48 bytes
    108c:	e0bffa17 	ldw	r2,-24(fp)
    1090:	10800a04 	addi	r2,r2,40
    1094:	0007883a 	mov	r3,zero
    1098:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(mi_base, tse_hw->tse_rx_depth - 16); //4000/4);
    109c:	e0bffa17 	ldw	r2,-24(fp)
    10a0:	10800704 	addi	r2,r2,28
    10a4:	e0fff717 	ldw	r3,-36(fp)
    10a8:	18c0018b 	ldhu	r3,6(r3)
    10ac:	18ffffcc 	andi	r3,r3,65535
    10b0:	18fffc04 	addi	r3,r3,-16
    10b4:	10c00035 	stwio	r3,0(r2)
   IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(mi_base,  0);
    10b8:	e0bffa17 	ldw	r2,-24(fp)
    10bc:	10800804 	addi	r2,r2,32
    10c0:	0007883a 	mov	r3,zero
    10c4:	10c00035 	stwio	r3,0(r2)
   
   /* Enable TX shift 16 for removing two bytes from the start of all transmitted frames */
   IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
    10c8:	00c00134 	movhi	r3,4
    10cc:	18d14104 	addi	r3,r3,17668
    10d0:	e0bffe17 	ldw	r2,-8(fp)
    10d4:	1004917a 	slli	r2,r2,5
    10d8:	1885883a 	add	r2,r3,r2
    10dc:	10800017 	ldw	r2,0(r2)
    10e0:	10803a04 	addi	r2,r2,232
    10e4:	00c00134 	movhi	r3,4
    10e8:	10c00035 	stwio	r3,0(r2)
 
   /*
    * check if the MAC supports the 16-bit shift option allowing us
    * to send BIASed frames without copying. Used by the send function later.
    */
   if((IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) == 0)
    10ec:	00c00134 	movhi	r3,4
    10f0:	18d14104 	addi	r3,r3,17668
    10f4:	e0bffe17 	ldw	r2,-8(fp)
    10f8:	1004917a 	slli	r2,r2,5
    10fc:	1885883a 	add	r2,r3,r2
    1100:	10800017 	ldw	r2,0(r2)
    1104:	10803a04 	addi	r2,r2,232
    1108:	10800037 	ldwio	r2,0(r2)
    110c:	1080012c 	andhi	r2,r2,4
    1110:	1000041e 	bne	r2,zero,1124 <tse_mac_init+0x480>
      {
      dprintf(("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETH_PAD_SIZE));
    1114:	01000084 	movi	r4,2
    1118:	0017c440 	call	17c44 <printf>
      return ERR_IF;
    111c:	00bffc44 	movi	r2,-15
    1120:	0000f506 	br	14f8 <tse_mac_init+0x854>
      }
  
   /* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
   IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
    1124:	00c00134 	movhi	r3,4
    1128:	18d14104 	addi	r3,r3,17668
    112c:	e0bffe17 	ldw	r2,-8(fp)
    1130:	1004917a 	slli	r2,r2,5
    1134:	1885883a 	add	r2,r3,r2
    1138:	10800017 	ldw	r2,0(r2)
    113c:	10803b04 	addi	r2,r2,236
    1140:	00c08034 	movhi	r3,512
    1144:	10c00035 	stwio	r3,0(r2)
 
   /* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */ 
   if((IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK) == 0)
    1148:	00c00134 	movhi	r3,4
    114c:	18d14104 	addi	r3,r3,17668
    1150:	e0bffe17 	ldw	r2,-8(fp)
    1154:	1004917a 	slli	r2,r2,5
    1158:	1885883a 	add	r2,r3,r2
    115c:	10800017 	ldw	r2,0(r2)
    1160:	10803b04 	addi	r2,r2,236
    1164:	10800037 	ldwio	r2,0(r2)
    1168:	1080802c 	andhi	r2,r2,512
    116c:	1000041e 	bne	r2,zero,1180 <tse_mac_init+0x4dc>
      {
      dprintf(("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETH_PAD_SIZE));
    1170:	01000084 	movi	r4,2
    1174:	0017c440 	call	17c44 <printf>
      return ERR_IF;
    1178:	00bffc44 	movi	r2,-15
    117c:	0000de06 	br	14f8 <tse_mac_init+0x854>
      }
   
   /* enable MAC */
   dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
    1180:	00810034 	movhi	r2,1024
    1184:	108080c4 	addi	r2,r2,515
    1188:	e0bff315 	stw	r2,-52(fp)
         ALTERA_TSEMAC_CMD_LOOPBACK_MSK     |     // promiscuous mode
#endif
         ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
         ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */
    
   if((result & ALT_TSE_E_AN_NOT_COMPLETE) == 0) 
    118c:	e0bffb17 	ldw	r2,-20(fp)
    1190:	1080022c 	andhi	r2,r2,8
    1194:	1000461e 	bne	r2,zero,12b0 <tse_mac_init+0x60c>
      {
	  speed = (result >> 1) & 0x07;
    1198:	e0bffb17 	ldw	r2,-20(fp)
    119c:	1005d07a 	srai	r2,r2,1
    11a0:	108001cc 	andi	r2,r2,7
    11a4:	e0bffc15 	stw	r2,-16(fp)
	  duplex = result & 0x01;
    11a8:	e0bffb17 	ldw	r2,-20(fp)
    11ac:	1080004c 	andi	r2,r2,1
    11b0:	e0bff415 	stw	r2,-48(fp)
  
      /* 1000 Mbps */
      if(speed == 0x01)
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	10800058 	cmpnei	r2,r2,1
    11bc:	1000121e 	bne	r2,zero,1208 <tse_mac_init+0x564>
         {
         dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    11c0:	e0bff317 	ldw	r2,-52(fp)
    11c4:	10800214 	ori	r2,r2,8
    11c8:	e0bff315 	stw	r2,-52(fp)
         dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
    11cc:	e0fff317 	ldw	r3,-52(fp)
    11d0:	00bf8034 	movhi	r2,65024
    11d4:	10bfffc4 	addi	r2,r2,-1
    11d8:	1884703a 	and	r2,r3,r2
    11dc:	e0bff315 	stw	r2,-52(fp)
         tse[iface].ethernetif->link_speed = 1000;
    11e0:	00c00134 	movhi	r3,4
    11e4:	18d14104 	addi	r3,r3,17668
    11e8:	e0bffe17 	ldw	r2,-8(fp)
    11ec:	1004917a 	slli	r2,r2,5
    11f0:	1885883a 	add	r2,r3,r2
    11f4:	10800604 	addi	r2,r2,24
    11f8:	10800017 	ldw	r2,0(r2)
    11fc:	00c0fa04 	movi	r3,1000
    1200:	10c00315 	stw	r3,12(r2)
    1204:	00003306 	br	12d4 <tse_mac_init+0x630>
         }
      /* 100 Mbps */
      else if(speed == 0x02)
    1208:	e0bffc17 	ldw	r2,-16(fp)
    120c:	10800098 	cmpnei	r2,r2,2
    1210:	1000131e 	bne	r2,zero,1260 <tse_mac_init+0x5bc>
         {
         dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    1214:	e0fff317 	ldw	r3,-52(fp)
    1218:	00bffdc4 	movi	r2,-9
    121c:	1884703a 	and	r2,r3,r2
    1220:	e0bff315 	stw	r2,-52(fp)
         dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
    1224:	e0fff317 	ldw	r3,-52(fp)
    1228:	00bf8034 	movhi	r2,65024
    122c:	10bfffc4 	addi	r2,r2,-1
    1230:	1884703a 	and	r2,r3,r2
    1234:	e0bff315 	stw	r2,-52(fp)
         tse[iface].ethernetif->link_speed = 100;
    1238:	00c00134 	movhi	r3,4
    123c:	18d14104 	addi	r3,r3,17668
    1240:	e0bffe17 	ldw	r2,-8(fp)
    1244:	1004917a 	slli	r2,r2,5
    1248:	1885883a 	add	r2,r3,r2
    124c:	10800604 	addi	r2,r2,24
    1250:	10800017 	ldw	r2,0(r2)
    1254:	00c01904 	movi	r3,100
    1258:	10c00315 	stw	r3,12(r2)
    125c:	00001d06 	br	12d4 <tse_mac_init+0x630>
         }
      /* 10 Mbps */
      else if(speed == 0x04)
    1260:	e0bffc17 	ldw	r2,-16(fp)
    1264:	10800118 	cmpnei	r2,r2,4
    1268:	10001a1e 	bne	r2,zero,12d4 <tse_mac_init+0x630>
         {
         dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    126c:	e0fff317 	ldw	r3,-52(fp)
    1270:	00bffdc4 	movi	r2,-9
    1274:	1884703a 	and	r2,r3,r2
    1278:	e0bff315 	stw	r2,-52(fp)
         dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
    127c:	e0bff317 	ldw	r2,-52(fp)
    1280:	10808034 	orhi	r2,r2,512
    1284:	e0bff315 	stw	r2,-52(fp)
         tse[iface].ethernetif->link_speed = 10;
    1288:	00c00134 	movhi	r3,4
    128c:	18d14104 	addi	r3,r3,17668
    1290:	e0bffe17 	ldw	r2,-8(fp)
    1294:	1004917a 	slli	r2,r2,5
    1298:	1885883a 	add	r2,r3,r2
    129c:	10800604 	addi	r2,r2,24
    12a0:	10800017 	ldw	r2,0(r2)
    12a4:	00c00284 	movi	r3,10
    12a8:	10c00315 	stw	r3,12(r2)
    12ac:	00000906 	br	12d4 <tse_mac_init+0x630>
         }
      }
   /* default to 100 Mbps if returned invalid speed */
   else
      {
      dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
    12b0:	e0fff317 	ldw	r3,-52(fp)
    12b4:	00bffdc4 	movi	r2,-9
    12b8:	1884703a 	and	r2,r3,r2
    12bc:	e0bff315 	stw	r2,-52(fp)
      dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
    12c0:	e0fff317 	ldw	r3,-52(fp)
    12c4:	00bf8034 	movhi	r2,65024
    12c8:	10bfffc4 	addi	r2,r2,-1
    12cc:	1884703a 	and	r2,r3,r2
    12d0:	e0bff315 	stw	r2,-52(fp)
      }
  
   /* Half Duplex */
   if(duplex == TSE_PHY_DUPLEX_HALF)
    12d4:	e0bff417 	ldw	r2,-48(fp)
    12d8:	10000c1e 	bne	r2,zero,130c <tse_mac_init+0x668>
      {
      dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
    12dc:	e0bff317 	ldw	r2,-52(fp)
    12e0:	10810014 	ori	r2,r2,1024
    12e4:	e0bff315 	stw	r2,-52(fp)
      tse[iface].ethernetif->full_duplex = 0;
    12e8:	00c00134 	movhi	r3,4
    12ec:	18d14104 	addi	r3,r3,17668
    12f0:	e0bffe17 	ldw	r2,-8(fp)
    12f4:	1004917a 	slli	r2,r2,5
    12f8:	1885883a 	add	r2,r3,r2
    12fc:	10800604 	addi	r2,r2,24
    1300:	10800017 	ldw	r2,0(r2)
    1304:	10000415 	stw	zero,16(r2)
    1308:	00000d06 	br	1340 <tse_mac_init+0x69c>
      }
   /* Full Duplex */
   else
      {
      dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
    130c:	e0fff317 	ldw	r3,-52(fp)
    1310:	00beffc4 	movi	r2,-1025
    1314:	1884703a 	and	r2,r3,r2
    1318:	e0bff315 	stw	r2,-52(fp)
      tse[iface].ethernetif->full_duplex = 1;
    131c:	00c00134 	movhi	r3,4
    1320:	18d14104 	addi	r3,r3,17668
    1324:	e0bffe17 	ldw	r2,-8(fp)
    1328:	1004917a 	slli	r2,r2,5
    132c:	1885883a 	add	r2,r3,r2
    1330:	10800604 	addi	r2,r2,24
    1334:	10800017 	ldw	r2,0(r2)
    1338:	00c00044 	movi	r3,1
    133c:	10c00415 	stw	r3,16(r2)
      }
          
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
    1340:	00c00134 	movhi	r3,4
    1344:	18d14104 	addi	r3,r3,17668
    1348:	e0bffe17 	ldw	r2,-8(fp)
    134c:	1004917a 	slli	r2,r2,5
    1350:	1885883a 	add	r2,r3,r2
    1354:	10800017 	ldw	r2,0(r2)
    1358:	10800204 	addi	r2,r2,8
    135c:	e0fff317 	ldw	r3,-52(fp)
    1360:	10c00035 	stwio	r3,0(r2)
   printf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
    IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
    1364:	00c00134 	movhi	r3,4
    1368:	18d14104 	addi	r3,r3,17668
    136c:	e0bffe17 	ldw	r2,-8(fp)
    1370:	1004917a 	slli	r2,r2,5
    1374:	1885883a 	add	r2,r3,r2
    1378:	10800017 	ldw	r2,0(r2)
      dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
      tse[iface].ethernetif->full_duplex = 1;
      }
          
   IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
   printf("\nMAC post-initialization: CMD_CONFIG=0x%08x\n", 
    137c:	10800204 	addi	r2,r2,8
    1380:	10800037 	ldwio	r2,0(r2)
    1384:	010000f4 	movhi	r4,3
    1388:	213a5904 	addi	r4,r4,-5788
    138c:	100b883a 	mov	r5,r2
    1390:	0017c440 	call	17c44 <printf>
    IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base));
  
   /* Set the MAC address */
     IOWR_ALTERA_TSEMAC_MAC_0(mi_base,
    1394:	e0bffa17 	ldw	r2,-24(fp)
    1398:	10800304 	addi	r2,r2,12
    139c:	e0ffff17 	ldw	r3,-4(fp)
    13a0:	18c00017 	ldw	r3,0(r3)
    13a4:	18c00003 	ldbu	r3,0(r3)
    13a8:	19003fcc 	andi	r4,r3,255
    13ac:	e0ffff17 	ldw	r3,-4(fp)
    13b0:	18c00017 	ldw	r3,0(r3)
    13b4:	18c00043 	ldbu	r3,1(r3)
    13b8:	18c03fcc 	andi	r3,r3,255
    13bc:	1806923a 	slli	r3,r3,8
    13c0:	20c8b03a 	or	r4,r4,r3
    13c4:	e0ffff17 	ldw	r3,-4(fp)
    13c8:	18c00017 	ldw	r3,0(r3)
    13cc:	18c00083 	ldbu	r3,2(r3)
    13d0:	18c03fcc 	andi	r3,r3,255
    13d4:	1806943a 	slli	r3,r3,16
    13d8:	20c8b03a 	or	r4,r4,r3
    13dc:	e0ffff17 	ldw	r3,-4(fp)
    13e0:	18c00017 	ldw	r3,0(r3)
    13e4:	18c000c3 	ldbu	r3,3(r3)
    13e8:	18c03fcc 	andi	r3,r3,255
    13ec:	1806963a 	slli	r3,r3,24
    13f0:	20c6b03a 	or	r3,r4,r3
    13f4:	10c00035 	stwio	r3,0(r2)
                             ((int)((unsigned char) ethernetif->ethaddr->addr[0]) |
                              (int)((unsigned char) ethernetif->ethaddr->addr[1] <<  8) |
                              (int)((unsigned char) ethernetif->ethaddr->addr[2] << 16) |
                              (int)((unsigned char) ethernetif->ethaddr->addr[3] << 24)));

     IOWR_ALTERA_TSEMAC_MAC_1(mi_base,
    13f8:	e0bffa17 	ldw	r2,-24(fp)
    13fc:	10800404 	addi	r2,r2,16
    1400:	e0ffff17 	ldw	r3,-4(fp)
    1404:	18c00017 	ldw	r3,0(r3)
    1408:	18c00103 	ldbu	r3,4(r3)
    140c:	19003fcc 	andi	r4,r3,255
    1410:	e0ffff17 	ldw	r3,-4(fp)
    1414:	18c00017 	ldw	r3,0(r3)
    1418:	18c00143 	ldbu	r3,5(r3)
    141c:	18c03fcc 	andi	r3,r3,255
    1420:	1806923a 	slli	r3,r3,8
    1424:	20c6b03a 	or	r3,r4,r3
    1428:	18ffffcc 	andi	r3,r3,65535
    142c:	10c00035 	stwio	r3,0(r2)
                             (((int)((unsigned char) ethernetif->ethaddr->addr[4]) |
                               (int)((unsigned char) ethernetif->ethaddr->addr[5] <<  8)) & 0xFFFF));
                                
   alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
    1430:	00c00134 	movhi	r3,4
    1434:	18d14104 	addi	r3,r3,17668
    1438:	e0bffe17 	ldw	r2,-8(fp)
    143c:	1004917a 	slli	r2,r2,5
    1440:	1885883a 	add	r2,r3,r2
    1444:	10800204 	addi	r2,r2,8
    1448:	10c00017 	ldw	r3,0(r2)
#ifndef ALTERA_TSE_IRQ_R
        (alt_avalon_sgdma_callback)&tse_sgdmaRx_isr,
#else
        (alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));
    144c:	e0bffe17 	ldw	r2,-8(fp)
    1450:	1008917a 	slli	r4,r2,5
    1454:	00800134 	movhi	r2,4
    1458:	10914104 	addi	r2,r2,17668
    145c:	2085883a 	add	r2,r4,r2

     IOWR_ALTERA_TSEMAC_MAC_1(mi_base,
                             (((int)((unsigned char) ethernetif->ethaddr->addr[4]) |
                               (int)((unsigned char) ethernetif->ethaddr->addr[5] <<  8)) & 0xFFFF));
                                
   alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
    1460:	1809883a 	mov	r4,r3
    1464:	01400034 	movhi	r5,0
    1468:	29457104 	addi	r5,r5,5572
    146c:	01800604 	movi	r6,24
    1470:	100f883a 	mov	r7,r2
    1474:	0025c240 	call	25c24 <alt_avalon_sgdma_register_callback>
#else
        (alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
        (alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));
    
   tse_sgdma_read_init(&tse[iface]);
    1478:	e0bffe17 	ldw	r2,-8(fp)
    147c:	1006917a 	slli	r3,r2,5
    1480:	00800134 	movhi	r2,4
    1484:	10914104 	addi	r2,r2,17668
    1488:	1885883a 	add	r2,r3,r2
    148c:	1009883a 	mov	r4,r2
    1490:	000150c0 	call	150c <tse_sgdma_read_init>
   //tse_sgdma_write_init(&tse[iface]);
   

   pmac_info = alt_tse_get_mac_info(mi_base);
    1494:	e13ffa17 	ldw	r4,-24(fp)
    1498:	00277b00 	call	277b0 <alt_tse_get_mac_info>
    149c:	e0bffd15 	stw	r2,-12(fp)
   alt_tse_phy_wr_mdio_addr(pmac_info->pphy_info, pmac_info->pphy_info->mdio_address);
    14a0:	e0bffd17 	ldw	r2,-12(fp)
    14a4:	10c00117 	ldw	r3,4(r2)
    14a8:	e0bffd17 	ldw	r2,-12(fp)
    14ac:	10800117 	ldw	r2,4(r2)
    14b0:	10800003 	ldbu	r2,0(r2)
    14b4:	10803fcc 	andi	r2,r2,255
    14b8:	1809883a 	mov	r4,r3
    14bc:	100b883a 	mov	r5,r2
    14c0:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
   ethernetif->link_alive = alt_tse_phy_rd_mdio_reg(pmac_info->pphy_info, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) != 0;
    14c4:	e0bffd17 	ldw	r2,-12(fp)
    14c8:	10800117 	ldw	r2,4(r2)
    14cc:	1009883a 	mov	r4,r2
    14d0:	01400044 	movi	r5,1
    14d4:	01800144 	movi	r6,5
    14d8:	01c00044 	movi	r7,1
    14dc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
    14e0:	1004c03a 	cmpne	r2,r2,zero
    14e4:	10c03fcc 	andi	r3,r2,255
    14e8:	e0bfff17 	ldw	r2,-4(fp)
    14ec:	10c00215 	stw	r3,8(r2)
   //IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base,ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
   //IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
   //IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma, 0xff);
   

   return ethernetif->link_alive;
    14f0:	e0bfff17 	ldw	r2,-4(fp)
    14f4:	10800217 	ldw	r2,8(r2)
}
    14f8:	e037883a 	mov	sp,fp
    14fc:	dfc00117 	ldw	ra,4(sp)
    1500:	df000017 	ldw	fp,0(sp)
    1504:	dec00204 	addi	sp,sp,8
    1508:	f800283a 	ret

0000150c <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(lwip_tse_info* tse_ptr)
{     
    150c:	defffb04 	addi	sp,sp,-20
    1510:	dfc00415 	stw	ra,16(sp)
    1514:	df000315 	stw	fp,12(sp)
    1518:	df000304 	addi	fp,sp,12
    151c:	e13fff15 	stw	r4,-4(fp)
   struct ethernetif *ethernetif;
  
   ethernetif = tse_ptr->ethernetif;
    1520:	e0bfff17 	ldw	r2,-4(fp)
    1524:	10800617 	ldw	r2,24(r2)
    1528:	e0bffe15 	stw	r2,-8(fp)
  
   alt_avalon_sgdma_construct_stream_to_mem_desc(
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
    152c:	e0bfff17 	ldw	r2,-4(fp)
    1530:	10800517 	ldw	r2,20(r2)
{     
   struct ethernetif *ethernetif;
  
   ethernetif = tse_ptr->ethernetif;
  
   alt_avalon_sgdma_construct_stream_to_mem_desc(
    1534:	11001004 	addi	r4,r2,64
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
    1538:	e0bfff17 	ldw	r2,-4(fp)
    153c:	10800517 	ldw	r2,20(r2)
{     
   struct ethernetif *ethernetif;
  
   ethernetif = tse_ptr->ethernetif;
  
   alt_avalon_sgdma_construct_stream_to_mem_desc(
    1540:	10c01804 	addi	r3,r2,96
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
         (alt_u32 *) ethernetif->lwipRxPbuf[tse_ptr->ethernetif->lwipRxIndexIsr]->payload,          // starting write_address
    1544:	e0bfff17 	ldw	r2,-4(fp)
    1548:	10800617 	ldw	r2,24(r2)
    154c:	10801317 	ldw	r2,76(r2)
    1550:	e17ffe17 	ldw	r5,-8(fp)
    1554:	108001c4 	addi	r2,r2,7
    1558:	1085883a 	add	r2,r2,r2
    155c:	1085883a 	add	r2,r2,r2
    1560:	2885883a 	add	r2,r5,r2
    1564:	10800017 	ldw	r2,0(r2)
    1568:	10800117 	ldw	r2,4(r2)
{     
   struct ethernetif *ethernetif;
  
   ethernetif = tse_ptr->ethernetif;
  
   alt_avalon_sgdma_construct_stream_to_mem_desc(
    156c:	d8000015 	stw	zero,0(sp)
    1570:	180b883a 	mov	r5,r3
    1574:	100d883a 	mov	r6,r2
    1578:	000f883a 	mov	r7,zero
    157c:	0025a500 	call	25a50 <alt_avalon_sgdma_construct_stream_to_mem_desc>
         (alt_u32 *) ethernetif->lwipRxPbuf[tse_ptr->ethernetif->lwipRxIndexIsr]->payload,          // starting write_address
         0,                                  // read until EOP
         0);          // don't write to constant address


   printf("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n",0); 
    1580:	010000f4 	movhi	r4,3
    1584:	213a6504 	addi	r4,r4,-5740
    1588:	000b883a 	mov	r5,zero
    158c:	0017c440 	call	17c44 <printf>
   
   tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
    1590:	e0ffff17 	ldw	r3,-4(fp)
    1594:	e0bfff17 	ldw	r2,-4(fp)
    1598:	10800517 	ldw	r2,20(r2)
    159c:	10801004 	addi	r2,r2,64
    15a0:	1809883a 	mov	r4,r3
    15a4:	100b883a 	mov	r5,r2
    15a8:	00266b40 	call	266b4 <tse_mac_aRxRead>
  
   return SUCCESS;
    15ac:	0005883a 	mov	r2,zero
}
    15b0:	e037883a 	mov	sp,fp
    15b4:	dfc00117 	ldw	ra,4(sp)
    15b8:	df000017 	ldw	fp,0(sp)
    15bc:	dec00204 	addi	sp,sp,8
    15c0:	f800283a 	ret

000015c4 <tse_sgdmaRx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
int tse_sgdmaRx_isr(void * context, u_long intnum)
{
    15c4:	defffb04 	addi	sp,sp,-20
    15c8:	dfc00415 	stw	ra,16(sp)
    15cc:	df000315 	stw	fp,12(sp)
    15d0:	df000304 	addi	fp,sp,12
    15d4:	e13ffe15 	stw	r4,-8(fp)
    15d8:	e17fff15 	stw	r5,-4(fp)
   lwip_tse_info* tse_ptr = (lwip_tse_info *) context;
    15dc:	e0bffe17 	ldw	r2,-8(fp)
    15e0:	e0bffd15 	stw	r2,-12(fp)

   IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base,ALTERA_AVALON_SGDMA_CONTROL_CLEAR_INTERRUPT_MSK);
    15e4:	e0bffd17 	ldw	r2,-12(fp)
    15e8:	10800217 	ldw	r2,8(r2)
    15ec:	10800304 	addi	r2,r2,12
    15f0:	10800404 	addi	r2,r2,16
    15f4:	00e00034 	movhi	r3,32768
    15f8:	10c00035 	stwio	r3,0(r2)
   tse_mac_rcv(tse_ptr->ethernetif);    
    15fc:	e0bffd17 	ldw	r2,-12(fp)
    1600:	10800617 	ldw	r2,24(r2)
    1604:	1009883a 	mov	r4,r2
    1608:	00017c80 	call	17c8 <tse_mac_rcv>
   tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
    160c:	e0fffd17 	ldw	r3,-12(fp)
    1610:	e0bffd17 	ldw	r2,-12(fp)
    1614:	10800517 	ldw	r2,20(r2)
    1618:	10801004 	addi	r2,r2,64
    161c:	1809883a 	mov	r4,r3
    1620:	100b883a 	mov	r5,r2
    1624:	00266b40 	call	266b4 <tse_mac_aRxRead>
   IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base, ALTERA_TSE_SGDMA_INTR_MASK);
    1628:	e0bffd17 	ldw	r2,-12(fp)
    162c:	10800217 	ldw	r2,8(r2)
    1630:	10800304 	addi	r2,r2,12
    1634:	10800404 	addi	r2,r2,16
    1638:	00c00604 	movi	r3,24
    163c:	10c00035 	stwio	r3,0(r2)
  
   return SUCCESS;
    1640:	0005883a 	mov	r2,zero
}
    1644:	e037883a 	mov	sp,fp
    1648:	dfc00117 	ldw	ra,4(sp)
    164c:	df000017 	ldw	fp,0(sp)
    1650:	dec00204 	addi	sp,sp,8
    1654:	f800283a 	ret

00001658 <tse_mac_raw_send>:
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */

err_t tse_mac_raw_send(struct netif *netif, struct pbuf *pkt)
{
    1658:	defe6a04 	addi	sp,sp,-1624
    165c:	dfc19515 	stw	ra,1620(sp)
    1660:	df019415 	stw	fp,1616(sp)
    1664:	df019404 	addi	fp,sp,1616
    1668:	e13ffe15 	stw	r4,-8(fp)
    166c:	e17fff15 	stw	r5,-4(fp)
   unsigned int       *ActualData;

   /* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
   char buf2[1560];

   ethernetif = netif->state;
    1670:	e0bffe17 	ldw	r2,-8(fp)
    1674:	10800717 	ldw	r2,28(r2)
    1678:	e0be7215 	stw	r2,-1592(fp)
   tse_ptr = ethernetif->tse_info;
    167c:	e0be7217 	ldw	r2,-1592(fp)
    1680:	10801617 	ldw	r2,88(r2)
    1684:	e0be7315 	stw	r2,-1588(fp)
   mi = &tse_ptr->mi;
    1688:	e0be7317 	ldw	r2,-1588(fp)
    168c:	e0be7415 	stw	r2,-1584(fp)
  
   for(p = pkt; p != NULL; p = p->next)
    1690:	e0bfff17 	ldw	r2,-4(fp)
    1694:	e0be7015 	stw	r2,-1600(fp)
    1698:	00003b06 	br	1788 <tse_mac_raw_send+0x130>
      {
      data = p->payload;
    169c:	e0be7017 	ldw	r2,-1600(fp)
    16a0:	10800117 	ldw	r2,4(r2)
    16a4:	e0be7115 	stw	r2,-1596(fp)
      len = p->len;
    16a8:	e0be7017 	ldw	r2,-1600(fp)
    16ac:	1080028b 	ldhu	r2,10(r2)
    16b0:	10bfffcc 	andi	r2,r2,65535
    16b4:	e0be7515 	stw	r2,-1580(fp)
       
      if(((unsigned long)data & 0x03) != 0) 
    16b8:	e0be7117 	ldw	r2,-1596(fp)
    16bc:	108000cc 	andi	r2,r2,3
    16c0:	10000726 	beq	r2,zero,16e0 <tse_mac_raw_send+0x88>
         /* 
          * Copy data to temporary buffer <buf2>. This is done because of allignment 
          * issues. The SGDMA cannot copy the data directly from (data + ETH_PAD_SIZE)
          * because it needs a 32-bit alligned address space. 
          */
         memcpy(buf2,data,len);
    16c4:	e0be7804 	addi	r2,fp,-1568
    16c8:	1009883a 	mov	r4,r2
    16cc:	e17e7117 	ldw	r5,-1596(fp)
    16d0:	e1be7517 	ldw	r6,-1580(fp)
    16d4:	0017a440 	call	17a44 <memcpy>
         data = (alt_u32 *)buf2;
    16d8:	e0be7804 	addi	r2,fp,-1568
    16dc:	e0be7115 	stw	r2,-1596(fp)
         }  
       
      ActualData = (void *)alt_remap_uncached (data, len);
    16e0:	e13e7117 	ldw	r4,-1596(fp)
    16e4:	e17e7517 	ldw	r5,-1580(fp)
    16e8:	0021a140 	call	21a14 <alt_remap_uncached>
    16ec:	e0be7615 	stw	r2,-1576(fp)
      /* Write data to Tx FIFO using the DMA */
      alt_avalon_sgdma_construct_mem_to_stream_desc(
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
    16f0:	e0be7317 	ldw	r2,-1588(fp)
         data = (alt_u32 *)buf2;
         }  
       
      ActualData = (void *)alt_remap_uncached (data, len);
      /* Write data to Tx FIFO using the DMA */
      alt_avalon_sgdma_construct_mem_to_stream_desc(
    16f4:	11000517 	ldw	r4,20(r2)
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
    16f8:	e0be7317 	ldw	r2,-1588(fp)
    16fc:	10800517 	ldw	r2,20(r2)
         data = (alt_u32 *)buf2;
         }  
       
      ActualData = (void *)alt_remap_uncached (data, len);
      /* Write data to Tx FIFO using the DMA */
      alt_avalon_sgdma_construct_mem_to_stream_desc(
    1700:	10c00804 	addi	r3,r2,32
    1704:	e0be7517 	ldw	r2,-1580(fp)
    1708:	10bfffcc 	andi	r2,r2,65535
    170c:	e1be7017 	ldw	r6,-1600(fp)
    1710:	e17fff17 	ldw	r5,-4(fp)
    1714:	314b003a 	cmpeq	r5,r6,r5
    1718:	29803fcc 	andi	r6,r5,255
           (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
           (alt_u32*)ActualData,                    // starting read address
           (len),                                   // # bytes
           0,                                       // don't read from constant address
           p == pkt,                                // generate sop
           p->next == NULL,                         // generate endofpacket signal
    171c:	e17e7017 	ldw	r5,-1600(fp)
    1720:	29400017 	ldw	r5,0(r5)
         data = (alt_u32 *)buf2;
         }  
       
      ActualData = (void *)alt_remap_uncached (data, len);
      /* Write data to Tx FIFO using the DMA */
      alt_avalon_sgdma_construct_mem_to_stream_desc(
    1724:	280b003a 	cmpeq	r5,r5,zero
    1728:	29403fcc 	andi	r5,r5,255
    172c:	d8000015 	stw	zero,0(sp)
    1730:	d9800115 	stw	r6,4(sp)
    1734:	d9400215 	stw	r5,8(sp)
    1738:	d8000315 	stw	zero,12(sp)
    173c:	180b883a 	mov	r5,r3
    1740:	e1be7617 	ldw	r6,-1576(fp)
    1744:	100f883a 	mov	r7,r2
    1748:	0025b200 	call	25b20 <alt_avalon_sgdma_construct_mem_to_stream_desc>
           0,                                       // don't read from constant address
           p == pkt,                                // generate sop
           p->next == NULL,                         // generate endofpacket signal
           0);                                      // atlantic channel (don't know/don't care: set to 0)
                  
      tx_length = tse_mac_sTxWrite(mi,&tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST]);
    174c:	e0be7317 	ldw	r2,-1588(fp)
    1750:	10800517 	ldw	r2,20(r2)
    1754:	e13e7417 	ldw	r4,-1584(fp)
    1758:	100b883a 	mov	r5,r2
    175c:	00265d40 	call	265d4 <tse_mac_sTxWrite>
    1760:	e0be7715 	stw	r2,-1572(fp)
      ethernetif->bytes_sent += tx_length;
    1764:	e0be7217 	ldw	r2,-1592(fp)
    1768:	10c00517 	ldw	r3,20(r2)
    176c:	e0be7717 	ldw	r2,-1572(fp)
    1770:	1887883a 	add	r3,r3,r2
    1774:	e0be7217 	ldw	r2,-1592(fp)
    1778:	10c00515 	stw	r3,20(r2)

   ethernetif = netif->state;
   tse_ptr = ethernetif->tse_info;
   mi = &tse_ptr->mi;
  
   for(p = pkt; p != NULL; p = p->next)
    177c:	e0be7017 	ldw	r2,-1600(fp)
    1780:	10800017 	ldw	r2,0(r2)
    1784:	e0be7015 	stw	r2,-1600(fp)
    1788:	e0be7017 	ldw	r2,-1600(fp)
    178c:	103fc31e 	bne	r2,zero,169c <tse_mac_raw_send+0x44>
           0);                                      // atlantic channel (don't know/don't care: set to 0)
                  
      tx_length = tse_mac_sTxWrite(mi,&tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST]);
      ethernetif->bytes_sent += tx_length;
      }
   LINK_STATS_INC(link.xmit);
    1790:	00800134 	movhi	r2,4
    1794:	10932304 	addi	r2,r2,19596
    1798:	1080000b 	ldhu	r2,0(r2)
    179c:	10800044 	addi	r2,r2,1
    17a0:	1007883a 	mov	r3,r2
    17a4:	00800134 	movhi	r2,4
    17a8:	10932304 	addi	r2,r2,19596
    17ac:	10c0000d 	sth	r3,0(r2)
   return ERR_OK;
    17b0:	0005883a 	mov	r2,zero
}
    17b4:	e037883a 	mov	sp,fp
    17b8:	dfc00117 	ldw	ra,4(sp)
    17bc:	df000017 	ldw	fp,0(sp)
    17c0:	dec00204 	addi	sp,sp,8
    17c4:	f800283a 	ret

000017c8 <tse_mac_rcv>:
 * 
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */
int tse_mac_rcv(struct ethernetif *ethernetif)
{     
    17c8:	defff804 	addi	sp,sp,-32
    17cc:	dfc00715 	stw	ra,28(sp)
    17d0:	df000615 	stw	fp,24(sp)
    17d4:	df000604 	addi	fp,sp,24
    17d8:	e13fff15 	stw	r4,-4(fp)
   int pklen;
   lwip_tse_info* tse_ptr;
   alt_u32 *uncached_packet_payload;
   struct pbuf *p;
  
   tse_ptr = ethernetif->tse_info;
    17dc:	e0bfff17 	ldw	r2,-4(fp)
    17e0:	10801617 	ldw	r2,88(r2)
    17e4:	e0bffb15 	stw	r2,-20(fp)
   pklen = IORD_16DIRECT(&(tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST].actual_bytes_transferred),0);
    17e8:	e0bffb17 	ldw	r2,-20(fp)
    17ec:	10800517 	ldw	r2,20(r2)
    17f0:	10801004 	addi	r2,r2,64
    17f4:	10800704 	addi	r2,r2,28
    17f8:	1080002b 	ldhuio	r2,0(r2)
    17fc:	10bfffcc 	andi	r2,r2,65535
    1800:	e0bffc15 	stw	r2,-16(fp)
   p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr];
    1804:	e0bfff17 	ldw	r2,-4(fp)
    1808:	10801317 	ldw	r2,76(r2)
    180c:	e0ffff17 	ldw	r3,-4(fp)
    1810:	108001c4 	addi	r2,r2,7
    1814:	1085883a 	add	r2,r2,r2
    1818:	1085883a 	add	r2,r2,r2
    181c:	1885883a 	add	r2,r3,r2
    1820:	10800017 	ldw	r2,0(r2)
    1824:	e0bffd15 	stw	r2,-12(fp)
   p->tot_len = pklen;
    1828:	e0bffc17 	ldw	r2,-16(fp)
    182c:	1007883a 	mov	r3,r2
    1830:	e0bffd17 	ldw	r2,-12(fp)
    1834:	10c0020d 	sth	r3,8(r2)
   p->len = pklen;
    1838:	e0bffc17 	ldw	r2,-16(fp)
    183c:	1007883a 	mov	r3,r2
    1840:	e0bffd17 	ldw	r2,-12(fp)
    1844:	10c0028d 	sth	r3,10(r2)
   if ((IORD_ALTERA_TSE_SGDMA_DESC_STATUS(&tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]) & ( ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_CRC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_PARITY_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK )) == 0)
    1848:	e0bffb17 	ldw	r2,-20(fp)
    184c:	10800517 	ldw	r2,20(r2)
    1850:	10801704 	addi	r2,r2,92
    1854:	10800037 	ldwio	r2,0(r2)
    1858:	1005d43a 	srai	r2,r2,16
    185c:	10801fcc 	andi	r2,r2,127
    1860:	1000261e 	bne	r2,zero,18fc <tse_mac_rcv+0x134>
      {
      if( ethernetif->lwipRxCount > LWIP_RX_ETH_BUFFER )
    1864:	e0bfff17 	ldw	r2,-4(fp)
    1868:	10801517 	ldw	r2,84(r2)
    186c:	10800350 	cmplti	r2,r2,13
    1870:	10000c1e 	bne	r2,zero,18a4 <tse_mac_rcv+0xdc>
         {    
         LINK_STATS_INC(link.drop);
    1874:	00800134 	movhi	r2,4
    1878:	10932304 	addi	r2,r2,19596
    187c:	1080018b 	ldhu	r2,6(r2)
    1880:	10800044 	addi	r2,r2,1
    1884:	1007883a 	mov	r3,r2
    1888:	00800134 	movhi	r2,4
    188c:	10932304 	addi	r2,r2,19596
    1890:	10c0018d 	sth	r3,6(r2)
         dprintf(("No free buffers for rx\n"));
    1894:	010000f4 	movhi	r4,3
    1898:	213a7604 	addi	r4,r4,-5672
    189c:	0017eb00 	call	17eb0 <puts>
    18a0:	00001606 	br	18fc <tse_mac_rcv+0x134>
         }
      else 
         {
         ethernetif->bytes_recv += pklen;
    18a4:	e0bfff17 	ldw	r2,-4(fp)
    18a8:	10c00617 	ldw	r3,24(r2)
    18ac:	e0bffc17 	ldw	r2,-16(fp)
    18b0:	1887883a 	add	r3,r3,r2
    18b4:	e0bfff17 	ldw	r2,-4(fp)
    18b8:	10c00615 	stw	r3,24(r2)
         //  Set up DMA for the next pbuf in the buffer
         ++ethernetif->lwipRxCount;
    18bc:	e0bfff17 	ldw	r2,-4(fp)
    18c0:	10801517 	ldw	r2,84(r2)
    18c4:	10c00044 	addi	r3,r2,1
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	10c01515 	stw	r3,84(r2)
         if( ++ethernetif->lwipRxIndexIsr >= LWIP_RX_ETH_BUFFER )
    18d0:	e0bfff17 	ldw	r2,-4(fp)
    18d4:	10801317 	ldw	r2,76(r2)
    18d8:	10c00044 	addi	r3,r2,1
    18dc:	e0bfff17 	ldw	r2,-4(fp)
    18e0:	10c01315 	stw	r3,76(r2)
    18e4:	e0bfff17 	ldw	r2,-4(fp)
    18e8:	10801317 	ldw	r2,76(r2)
    18ec:	10800310 	cmplti	r2,r2,12
    18f0:	1000021e 	bne	r2,zero,18fc <tse_mac_rcv+0x134>
            ethernetif->lwipRxIndexIsr = 0;
    18f4:	e0bfff17 	ldw	r2,-4(fp)
    18f8:	10001315 	stw	zero,76(r2)
         }
      }      

   uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
    18fc:	e0bfff17 	ldw	r2,-4(fp)
    1900:	10801317 	ldw	r2,76(r2)
    1904:	e0ffff17 	ldw	r3,-4(fp)
    1908:	108001c4 	addi	r2,r2,7
    190c:	1085883a 	add	r2,r2,r2
    1910:	1085883a 	add	r2,r2,r2
    1914:	1885883a 	add	r2,r3,r2
    1918:	10800017 	ldw	r2,0(r2)
    191c:	10800117 	ldw	r2,4(r2)
    1920:	e0bffe15 	stw	r2,-8(fp)
   alt_avalon_sgdma_construct_stream_to_mem_desc(
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
    1924:	e0bffb17 	ldw	r2,-20(fp)
    1928:	10800517 	ldw	r2,20(r2)
            ethernetif->lwipRxIndexIsr = 0;
         }
      }      

   uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
   alt_avalon_sgdma_construct_stream_to_mem_desc(
    192c:	10c01004 	addi	r3,r2,64
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
    1930:	e0bffb17 	ldw	r2,-20(fp)
    1934:	10800517 	ldw	r2,20(r2)
            ethernetif->lwipRxIndexIsr = 0;
         }
      }      

   uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
   alt_avalon_sgdma_construct_stream_to_mem_desc(
    1938:	10801804 	addi	r2,r2,96
    193c:	d8000015 	stw	zero,0(sp)
    1940:	1809883a 	mov	r4,r3
    1944:	100b883a 	mov	r5,r2
    1948:	e1bffe17 	ldw	r6,-8(fp)
    194c:	000f883a 	mov	r7,zero
    1950:	0025a500 	call	25a50 <alt_avalon_sgdma_construct_stream_to_mem_desc>
         (alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
         uncached_packet_payload,            // starting write_address
         0,                                  // read until EOP
         0);          // don't write to constant address

   return ERR_OK;
    1954:	0005883a 	mov	r2,zero
}
    1958:	e037883a 	mov	sp,fp
    195c:	dfc00117 	ldw	ra,4(sp)
    1960:	df000017 	ldw	fp,0(sp)
    1964:	dec00204 	addi	sp,sp,8
    1968:	f800283a 	ret

0000196c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
    196c:	defffc04 	addi	sp,sp,-16
    1970:	dfc00315 	stw	ra,12(sp)
    1974:	df000215 	stw	fp,8(sp)
    1978:	df000204 	addi	fp,sp,8
    197c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    1980:	e0bfff17 	ldw	r2,-4(fp)
    1984:	10800817 	ldw	r2,32(r2)
    1988:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  netif_set_down(netif);
    198c:	e13fff17 	ldw	r4,-4(fp)
    1990:	000985c0 	call	985c <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
    1994:	e13fff17 	ldw	r4,-4(fp)
    1998:	014000f4 	movhi	r5,3
    199c:	29532904 	addi	r5,r5,19620
    19a0:	00095e80 	call	95e8 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
    19a4:	e13fff17 	ldw	r4,-4(fp)
    19a8:	014000f4 	movhi	r5,3
    19ac:	29532904 	addi	r5,r5,19620
    19b0:	000971c0 	call	971c <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY); 
    19b4:	e13fff17 	ldw	r4,-4(fp)
    19b8:	014000f4 	movhi	r5,3
    19bc:	29532904 	addi	r5,r5,19620
    19c0:	00097600 	call	9760 <netif_set_netmask>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
    19c4:	e13ffe17 	ldw	r4,-8(fp)
    19c8:	01400304 	movi	r5,12
    19cc:	000366c0 	call	366c <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
    19d0:	e13fff17 	ldw	r4,-4(fp)
    19d4:	0002b7c0 	call	2b7c <dhcp_discover>
}
    19d8:	e037883a 	mov	sp,fp
    19dc:	dfc00117 	ldw	ra,4(sp)
    19e0:	df000017 	ldw	fp,0(sp)
    19e4:	dec00204 	addi	sp,sp,8
    19e8:	f800283a 	ret

000019ec <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
    19ec:	defffb04 	addi	sp,sp,-20
    19f0:	dfc00415 	stw	ra,16(sp)
    19f4:	df000315 	stw	fp,12(sp)
    19f8:	df000304 	addi	fp,sp,12
    19fc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    1a00:	e0bfff17 	ldw	r2,-4(fp)
    1a04:	10800817 	ldw	r2,32(r2)
    1a08:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
    1a0c:	e13ffd17 	ldw	r4,-12(fp)
    1a10:	01400204 	movi	r5,8
    1a14:	000366c0 	call	366c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
    1a18:	e0bffd17 	ldw	r2,-12(fp)
    1a1c:	10800904 	addi	r2,r2,36
    1a20:	e13fff17 	ldw	r4,-4(fp)
    1a24:	100b883a 	mov	r5,r2
    1a28:	000d883a 	mov	r6,zero
    1a2c:	0016cfc0 	call	16cfc <etharp_query>
    1a30:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
    1a34:	e0bffd17 	ldw	r2,-12(fp)
    1a38:	10800343 	ldbu	r2,13(r2)
    1a3c:	10800044 	addi	r2,r2,1
    1a40:	1007883a 	mov	r3,r2
    1a44:	e0bffd17 	ldw	r2,-12(fp)
    1a48:	10c00345 	stb	r3,13(r2)
  msecs = 500;
    1a4c:	00807d04 	movi	r2,500
    1a50:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    1a54:	e0bffe8b 	ldhu	r2,-6(fp)
    1a58:	10c07cc4 	addi	r3,r2,499
    1a5c:	00807d04 	movi	r2,500
    1a60:	1885283a 	div	r2,r3,r2
    1a64:	1007883a 	mov	r3,r2
    1a68:	e0bffd17 	ldw	r2,-12(fp)
    1a6c:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
    1a70:	e037883a 	mov	sp,fp
    1a74:	dfc00117 	ldw	ra,4(sp)
    1a78:	df000017 	ldw	fp,0(sp)
    1a7c:	dec00204 	addi	sp,sp,8
    1a80:	f800283a 	ret

00001a84 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
    1a84:	defffc04 	addi	sp,sp,-16
    1a88:	dfc00315 	stw	ra,12(sp)
    1a8c:	df000215 	stw	fp,8(sp)
    1a90:	df000204 	addi	fp,sp,8
    1a94:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    1a98:	e0bfff17 	ldw	r2,-4(fp)
    1a9c:	10800817 	ldw	r2,32(r2)
    1aa0:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    1aa4:	00800134 	movhi	r2,4
    1aa8:	10918104 	addi	r2,r2,17924
    1aac:	10800083 	ldbu	r2,2(r2)
    1ab0:	10803fcc 	andi	r2,r2,255
    1ab4:	10002226 	beq	r2,zero,1b40 <dhcp_handle_offer+0xbc>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
    1ab8:	00800134 	movhi	r2,4
    1abc:	10918404 	addi	r2,r2,17936
    1ac0:	10800217 	ldw	r2,8(r2)
    1ac4:	1006d63a 	srli	r3,r2,24
    1ac8:	00800134 	movhi	r2,4
    1acc:	10918404 	addi	r2,r2,17936
    1ad0:	10800217 	ldw	r2,8(r2)
    1ad4:	1004d23a 	srli	r2,r2,8
    1ad8:	10bfc00c 	andi	r2,r2,65280
    1adc:	1886b03a 	or	r3,r3,r2
    1ae0:	00800134 	movhi	r2,4
    1ae4:	10918404 	addi	r2,r2,17936
    1ae8:	10800217 	ldw	r2,8(r2)
    1aec:	10bfc00c 	andi	r2,r2,65280
    1af0:	1004923a 	slli	r2,r2,8
    1af4:	1886b03a 	or	r3,r3,r2
    1af8:	00800134 	movhi	r2,4
    1afc:	10918404 	addi	r2,r2,17936
    1b00:	10800217 	ldw	r2,8(r2)
    1b04:	1004963a 	slli	r2,r2,24
    1b08:	1886b03a 	or	r3,r3,r2
    1b0c:	e0bffe17 	ldw	r2,-8(fp)
    1b10:	10c00815 	stw	r3,32(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
    1b14:	e0bffe17 	ldw	r2,-8(fp)
    1b18:	10800217 	ldw	r2,8(r2)
    1b1c:	10c0040b 	ldhu	r3,16(r2)
    1b20:	1080048b 	ldhu	r2,18(r2)
    1b24:	1004943a 	slli	r2,r2,16
    1b28:	10c4b03a 	or	r2,r2,r3
    1b2c:	1007883a 	mov	r3,r2
    1b30:	e0bffe17 	ldw	r2,-8(fp)
    1b34:	10c00915 	stw	r3,36(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
    1b38:	e13fff17 	ldw	r4,-4(fp)
    1b3c:	0001b540 	call	1b54 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
    1b40:	e037883a 	mov	sp,fp
    1b44:	dfc00117 	ldw	ra,4(sp)
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00204 	addi	sp,sp,8
    1b50:	f800283a 	ret

00001b54 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
    1b54:	defffa04 	addi	sp,sp,-24
    1b58:	dfc00515 	stw	ra,20(sp)
    1b5c:	df000415 	stw	fp,16(sp)
    1b60:	df000404 	addi	fp,sp,16
    1b64:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    1b68:	e0bfff17 	ldw	r2,-4(fp)
    1b6c:	10800817 	ldw	r2,32(r2)
    1b70:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
    1b74:	e13ffd17 	ldw	r4,-12(fp)
    1b78:	01400044 	movi	r5,1
    1b7c:	000366c0 	call	366c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    1b80:	e13fff17 	ldw	r4,-4(fp)
    1b84:	e17ffd17 	ldw	r5,-12(fp)
    1b88:	018000c4 	movi	r6,3
    1b8c:	00046980 	call	4698 <dhcp_create_msg>
    1b90:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    1b94:	e0bffe07 	ldb	r2,-8(fp)
    1b98:	1000631e 	bne	r2,zero,1d28 <dhcp_select+0x1d4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    1b9c:	e13ffd17 	ldw	r4,-12(fp)
    1ba0:	01400e44 	movi	r5,57
    1ba4:	01800084 	movi	r6,2
    1ba8:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    1bac:	e0bfff17 	ldw	r2,-4(fp)
    1bb0:	1080090b 	ldhu	r2,36(r2)
    1bb4:	10bfffcc 	andi	r2,r2,65535
    1bb8:	e13ffd17 	ldw	r4,-12(fp)
    1bbc:	100b883a 	mov	r5,r2
    1bc0:	00038440 	call	3844 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
    1bc4:	e13ffd17 	ldw	r4,-12(fp)
    1bc8:	01400c84 	movi	r5,50
    1bcc:	01800104 	movi	r6,4
    1bd0:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
    1bd4:	e0bffd17 	ldw	r2,-12(fp)
    1bd8:	10800917 	ldw	r2,36(r2)
    1bdc:	1006d63a 	srli	r3,r2,24
    1be0:	e0bffd17 	ldw	r2,-12(fp)
    1be4:	10800917 	ldw	r2,36(r2)
    1be8:	1004d23a 	srli	r2,r2,8
    1bec:	10bfc00c 	andi	r2,r2,65280
    1bf0:	1886b03a 	or	r3,r3,r2
    1bf4:	e0bffd17 	ldw	r2,-12(fp)
    1bf8:	10800917 	ldw	r2,36(r2)
    1bfc:	10bfc00c 	andi	r2,r2,65280
    1c00:	1004923a 	slli	r2,r2,8
    1c04:	1886b03a 	or	r3,r3,r2
    1c08:	e0bffd17 	ldw	r2,-12(fp)
    1c0c:	10800917 	ldw	r2,36(r2)
    1c10:	1004963a 	slli	r2,r2,24
    1c14:	1884b03a 	or	r2,r3,r2
    1c18:	e13ffd17 	ldw	r4,-12(fp)
    1c1c:	100b883a 	mov	r5,r2
    1c20:	000391c0 	call	391c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    1c24:	e13ffd17 	ldw	r4,-12(fp)
    1c28:	01400d84 	movi	r5,54
    1c2c:	01800104 	movi	r6,4
    1c30:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
    1c34:	e0bffd17 	ldw	r2,-12(fp)
    1c38:	10800817 	ldw	r2,32(r2)
    1c3c:	1006d63a 	srli	r3,r2,24
    1c40:	e0bffd17 	ldw	r2,-12(fp)
    1c44:	10800817 	ldw	r2,32(r2)
    1c48:	1004d23a 	srli	r2,r2,8
    1c4c:	10bfc00c 	andi	r2,r2,65280
    1c50:	1886b03a 	or	r3,r3,r2
    1c54:	e0bffd17 	ldw	r2,-12(fp)
    1c58:	10800817 	ldw	r2,32(r2)
    1c5c:	10bfc00c 	andi	r2,r2,65280
    1c60:	1004923a 	slli	r2,r2,8
    1c64:	1886b03a 	or	r3,r3,r2
    1c68:	e0bffd17 	ldw	r2,-12(fp)
    1c6c:	10800817 	ldw	r2,32(r2)
    1c70:	1004963a 	slli	r2,r2,24
    1c74:	1884b03a 	or	r2,r3,r2
    1c78:	e13ffd17 	ldw	r4,-12(fp)
    1c7c:	100b883a 	mov	r5,r2
    1c80:	000391c0 	call	391c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
    1c84:	e13ffd17 	ldw	r4,-12(fp)
    1c88:	01400dc4 	movi	r5,55
    1c8c:	01800104 	movi	r6,4
    1c90:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
    1c94:	e13ffd17 	ldw	r4,-12(fp)
    1c98:	01400044 	movi	r5,1
    1c9c:	00037a80 	call	37a8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
    1ca0:	e13ffd17 	ldw	r4,-12(fp)
    1ca4:	014000c4 	movi	r5,3
    1ca8:	00037a80 	call	37a8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
    1cac:	e13ffd17 	ldw	r4,-12(fp)
    1cb0:	01400704 	movi	r5,28
    1cb4:	00037a80 	call	37a8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
    1cb8:	e13ffd17 	ldw	r4,-12(fp)
    1cbc:	01400184 	movi	r5,6
    1cc0:	00037a80 	call	37a8 <dhcp_option_byte>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
    1cc4:	e13ffd17 	ldw	r4,-12(fp)
    1cc8:	0004c4c0 	call	4c4c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    1ccc:	e0bffd17 	ldw	r2,-12(fp)
    1cd0:	10c00417 	ldw	r3,16(r2)
    1cd4:	e0bffd17 	ldw	r2,-12(fp)
    1cd8:	1080060b 	ldhu	r2,24(r2)
    1cdc:	10803c04 	addi	r2,r2,240
    1ce0:	10bfffcc 	andi	r2,r2,65535
    1ce4:	1809883a 	mov	r4,r3
    1ce8:	100b883a 	mov	r5,r2
    1cec:	0009fa40 	call	9fa4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    1cf0:	e0bffd17 	ldw	r2,-12(fp)
    1cf4:	10c00117 	ldw	r3,4(r2)
    1cf8:	e0bffd17 	ldw	r2,-12(fp)
    1cfc:	10800417 	ldw	r2,16(r2)
    1d00:	e13fff17 	ldw	r4,-4(fp)
    1d04:	d9000015 	stw	r4,0(sp)
    1d08:	1809883a 	mov	r4,r3
    1d0c:	100b883a 	mov	r5,r2
    1d10:	018000f4 	movhi	r6,3
    1d14:	31932a04 	addi	r6,r6,19624
    1d18:	01c010c4 	movi	r7,67
    1d1c:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
    1d20:	e13ffd17 	ldw	r4,-12(fp)
    1d24:	0004b6c0 	call	4b6c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    1d28:	e0bffd17 	ldw	r2,-12(fp)
    1d2c:	10800343 	ldbu	r2,13(r2)
    1d30:	10800044 	addi	r2,r2,1
    1d34:	1007883a 	mov	r3,r2
    1d38:	e0bffd17 	ldw	r2,-12(fp)
    1d3c:	10c00345 	stb	r3,13(r2)
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
    1d40:	e0bffd17 	ldw	r2,-12(fp)
    1d44:	10800343 	ldbu	r2,13(r2)
    1d48:	10803fcc 	andi	r2,r2,255
    1d4c:	108001a8 	cmpgeui	r2,r2,6
    1d50:	1000061e 	bne	r2,zero,1d6c <dhcp_select+0x218>
    1d54:	e0bffd17 	ldw	r2,-12(fp)
    1d58:	10800343 	ldbu	r2,13(r2)
    1d5c:	10803fcc 	andi	r2,r2,255
    1d60:	00c0fa04 	movi	r3,1000
    1d64:	1884983a 	sll	r2,r3,r2
    1d68:	00000106 	br	1d70 <dhcp_select+0x21c>
    1d6c:	00ba9804 	movi	r2,-5536
    1d70:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    1d74:	e0bffe8b 	ldhu	r2,-6(fp)
    1d78:	10c07cc4 	addi	r3,r2,499
    1d7c:	00807d04 	movi	r2,500
    1d80:	1885283a 	div	r2,r3,r2
    1d84:	1007883a 	mov	r3,r2
    1d88:	e0bffd17 	ldw	r2,-12(fp)
    1d8c:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
    1d90:	e0bffe03 	ldbu	r2,-8(fp)
}
    1d94:	e037883a 	mov	sp,fp
    1d98:	dfc00117 	ldw	ra,4(sp)
    1d9c:	df000017 	ldw	fp,0(sp)
    1da0:	dec00204 	addi	sp,sp,8
    1da4:	f800283a 	ret

00001da8 <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
    1da8:	defffd04 	addi	sp,sp,-12
    1dac:	dfc00215 	stw	ra,8(sp)
    1db0:	df000115 	stw	fp,4(sp)
    1db4:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
    1db8:	008000f4 	movhi	r2,3
    1dbc:	109bda04 	addi	r2,r2,28520
    1dc0:	10800017 	ldw	r2,0(r2)
    1dc4:	e0bfff15 	stw	r2,-4(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
    1dc8:	00001d06 	br	1e40 <dhcp_coarse_tmr+0x98>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
    1dcc:	e0bfff17 	ldw	r2,-4(fp)
    1dd0:	10800817 	ldw	r2,32(r2)
    1dd4:	10001726 	beq	r2,zero,1e34 <dhcp_coarse_tmr+0x8c>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
    1dd8:	e0bfff17 	ldw	r2,-4(fp)
    1ddc:	10800817 	ldw	r2,32(r2)
    1de0:	10c0078b 	ldhu	r3,30(r2)
    1de4:	193fffcc 	andi	r4,r3,65535
    1de8:	21000060 	cmpeqi	r4,r4,1
    1dec:	18ffffc4 	addi	r3,r3,-1
    1df0:	10c0078d 	sth	r3,30(r2)
    1df4:	20803fcc 	andi	r2,r4,255
    1df8:	10000326 	beq	r2,zero,1e08 <dhcp_coarse_tmr+0x60>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
    1dfc:	e13fff17 	ldw	r4,-4(fp)
    1e00:	00021240 	call	2124 <dhcp_t2_timeout>
    1e04:	00000b06 	br	1e34 <dhcp_coarse_tmr+0x8c>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
    1e08:	e0bfff17 	ldw	r2,-4(fp)
    1e0c:	10800817 	ldw	r2,32(r2)
    1e10:	10c0070b 	ldhu	r3,28(r2)
    1e14:	193fffcc 	andi	r4,r3,65535
    1e18:	21000060 	cmpeqi	r4,r4,1
    1e1c:	18ffffc4 	addi	r3,r3,-1
    1e20:	10c0070d 	sth	r3,28(r2)
    1e24:	20803fcc 	andi	r2,r4,255
    1e28:	10000226 	beq	r2,zero,1e34 <dhcp_coarse_tmr+0x8c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
    1e2c:	e13fff17 	ldw	r4,-4(fp)
    1e30:	00020ac0 	call	20ac <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
    1e34:	e0bfff17 	ldw	r2,-4(fp)
    1e38:	10800017 	ldw	r2,0(r2)
    1e3c:	e0bfff15 	stw	r2,-4(fp)
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
    1e40:	e0bfff17 	ldw	r2,-4(fp)
    1e44:	103fe11e 	bne	r2,zero,1dcc <dhcp_coarse_tmr+0x24>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  }
}
    1e48:	e037883a 	mov	sp,fp
    1e4c:	dfc00117 	ldw	ra,4(sp)
    1e50:	df000017 	ldw	fp,0(sp)
    1e54:	dec00204 	addi	sp,sp,8
    1e58:	f800283a 	ret

00001e5c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
    1e5c:	defffd04 	addi	sp,sp,-12
    1e60:	dfc00215 	stw	ra,8(sp)
    1e64:	df000115 	stw	fp,4(sp)
    1e68:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
    1e6c:	008000f4 	movhi	r2,3
    1e70:	109bda04 	addi	r2,r2,28520
    1e74:	10800017 	ldw	r2,0(r2)
    1e78:	e0bfff15 	stw	r2,-4(fp)
  /* loop through netif's */
  while (netif != NULL) {
    1e7c:	00001f06 	br	1efc <dhcp_fine_tmr+0xa0>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
    1e80:	e0bfff17 	ldw	r2,-4(fp)
    1e84:	10800817 	ldw	r2,32(r2)
    1e88:	10001926 	beq	r2,zero,1ef0 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
    1e8c:	e0bfff17 	ldw	r2,-4(fp)
    1e90:	10800817 	ldw	r2,32(r2)
    1e94:	1080068b 	ldhu	r2,26(r2)
    1e98:	10bfffcc 	andi	r2,r2,65535
    1e9c:	108000b0 	cmpltui	r2,r2,2
    1ea0:	1000061e 	bne	r2,zero,1ebc <dhcp_fine_tmr+0x60>
        netif->dhcp->request_timeout--;
    1ea4:	e0bfff17 	ldw	r2,-4(fp)
    1ea8:	10800817 	ldw	r2,32(r2)
    1eac:	10c0068b 	ldhu	r3,26(r2)
    1eb0:	18ffffc4 	addi	r3,r3,-1
    1eb4:	10c0068d 	sth	r3,26(r2)
    1eb8:	00000d06 	br	1ef0 <dhcp_fine_tmr+0x94>
      }
      else if (netif->dhcp->request_timeout == 1) {
    1ebc:	e0bfff17 	ldw	r2,-4(fp)
    1ec0:	10800817 	ldw	r2,32(r2)
    1ec4:	1080068b 	ldhu	r2,26(r2)
    1ec8:	10bfffcc 	andi	r2,r2,65535
    1ecc:	10800058 	cmpnei	r2,r2,1
    1ed0:	1000071e 	bne	r2,zero,1ef0 <dhcp_fine_tmr+0x94>
        netif->dhcp->request_timeout--;
    1ed4:	e0bfff17 	ldw	r2,-4(fp)
    1ed8:	10800817 	ldw	r2,32(r2)
    1edc:	10c0068b 	ldhu	r3,26(r2)
    1ee0:	18ffffc4 	addi	r3,r3,-1
    1ee4:	10c0068d 	sth	r3,26(r2)
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
    1ee8:	e13fff17 	ldw	r4,-4(fp)
    1eec:	0001f180 	call	1f18 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
    1ef0:	e0bfff17 	ldw	r2,-4(fp)
    1ef4:	10800017 	ldw	r2,0(r2)
    1ef8:	e0bfff15 	stw	r2,-4(fp)
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
    1efc:	e0bfff17 	ldw	r2,-4(fp)
    1f00:	103fdf1e 	bne	r2,zero,1e80 <dhcp_fine_tmr+0x24>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  }
}
    1f04:	e037883a 	mov	sp,fp
    1f08:	dfc00117 	ldw	ra,4(sp)
    1f0c:	df000017 	ldw	fp,0(sp)
    1f10:	dec00204 	addi	sp,sp,8
    1f14:	f800283a 	ret

00001f18 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
    1f18:	defffc04 	addi	sp,sp,-16
    1f1c:	dfc00315 	stw	ra,12(sp)
    1f20:	df000215 	stw	fp,8(sp)
    1f24:	df000204 	addi	fp,sp,8
    1f28:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    1f2c:	e0bfff17 	ldw	r2,-4(fp)
    1f30:	10800817 	ldw	r2,32(r2)
    1f34:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    1f38:	e0bffe17 	ldw	r2,-8(fp)
    1f3c:	10800303 	ldbu	r2,12(r2)
    1f40:	10803fcc 	andi	r2,r2,255
    1f44:	10800320 	cmpeqi	r2,r2,12
    1f48:	1000051e 	bne	r2,zero,1f60 <dhcp_timeout+0x48>
    1f4c:	e0bffe17 	ldw	r2,-8(fp)
    1f50:	10800303 	ldbu	r2,12(r2)
    1f54:	10803fcc 	andi	r2,r2,255
    1f58:	10800198 	cmpnei	r2,r2,6
    1f5c:	1000031e 	bne	r2,zero,1f6c <dhcp_timeout+0x54>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
    1f60:	e13fff17 	ldw	r4,-4(fp)
    1f64:	0002b7c0 	call	2b7c <dhcp_discover>
    1f68:	00004b06 	br	2098 <dhcp_timeout+0x180>
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	10800303 	ldbu	r2,12(r2)
    1f74:	10803fcc 	andi	r2,r2,255
    1f78:	10800058 	cmpnei	r2,r2,1
    1f7c:	10000d1e 	bne	r2,zero,1fb4 <dhcp_timeout+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
    1f80:	e0bffe17 	ldw	r2,-8(fp)
    1f84:	10800343 	ldbu	r2,13(r2)
    1f88:	10803fcc 	andi	r2,r2,255
    1f8c:	108001a8 	cmpgeui	r2,r2,6
    1f90:	1000031e 	bne	r2,zero,1fa0 <dhcp_timeout+0x88>
      dhcp_select(netif);
    1f94:	e13fff17 	ldw	r4,-4(fp)
    1f98:	0001b540 	call	1b54 <dhcp_select>
    1f9c:	00003e06 	br	2098 <dhcp_timeout+0x180>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
    1fa0:	e13fff17 	ldw	r4,-4(fp)
    1fa4:	00033e00 	call	33e0 <dhcp_release>
      dhcp_discover(netif);
    1fa8:	e13fff17 	ldw	r4,-4(fp)
    1fac:	0002b7c0 	call	2b7c <dhcp_discover>
    1fb0:	00003906 	br	2098 <dhcp_timeout+0x180>
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
    1fb4:	e0bffe17 	ldw	r2,-8(fp)
    1fb8:	10800303 	ldbu	r2,12(r2)
    1fbc:	10803fcc 	andi	r2,r2,255
    1fc0:	10800218 	cmpnei	r2,r2,8
    1fc4:	10000b1e 	bne	r2,zero,1ff4 <dhcp_timeout+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
    1fc8:	e0bffe17 	ldw	r2,-8(fp)
    1fcc:	10800343 	ldbu	r2,13(r2)
    1fd0:	10803fcc 	andi	r2,r2,255
    1fd4:	108000a8 	cmpgeui	r2,r2,2
    1fd8:	1000031e 	bne	r2,zero,1fe8 <dhcp_timeout+0xd0>
      dhcp_check(netif);
    1fdc:	e13fff17 	ldw	r4,-4(fp)
    1fe0:	00019ec0 	call	19ec <dhcp_check>
    1fe4:	00002c06 	br	2098 <dhcp_timeout+0x180>
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
    1fe8:	e13fff17 	ldw	r4,-4(fp)
    1fec:	0002d1c0 	call	2d1c <dhcp_bind>
    1ff0:	00002906 	br	2098 <dhcp_timeout+0x180>
    }
#endif /* DHCP_DOES_ARP_CHECK */
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
    1ff4:	e0bffe17 	ldw	r2,-8(fp)
    1ff8:	10800303 	ldbu	r2,12(r2)
    1ffc:	10803fcc 	andi	r2,r2,255
    2000:	10800158 	cmpnei	r2,r2,5
    2004:	1000031e 	bne	r2,zero,2014 <dhcp_timeout+0xfc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
    2008:	e13fff17 	ldw	r4,-4(fp)
    200c:	0002f9c0 	call	2f9c <dhcp_renew>
    2010:	00002106 	br	2098 <dhcp_timeout+0x180>
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
    2014:	e0bffe17 	ldw	r2,-8(fp)
    2018:	10800303 	ldbu	r2,12(r2)
    201c:	10803fcc 	andi	r2,r2,255
    2020:	10800118 	cmpnei	r2,r2,4
    2024:	10000d1e 	bne	r2,zero,205c <dhcp_timeout+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
    2028:	e0bffe17 	ldw	r2,-8(fp)
    202c:	10800343 	ldbu	r2,13(r2)
    2030:	10803fcc 	andi	r2,r2,255
    2034:	10800268 	cmpgeui	r2,r2,9
    2038:	1000031e 	bne	r2,zero,2048 <dhcp_timeout+0x130>
      dhcp_rebind(netif);
    203c:	e13fff17 	ldw	r4,-4(fp)
    2040:	00030ec0 	call	30ec <dhcp_rebind>
    2044:	00001406 	br	2098 <dhcp_timeout+0x180>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
    2048:	e13fff17 	ldw	r4,-4(fp)
    204c:	00033e00 	call	33e0 <dhcp_release>
      dhcp_discover(netif);
    2050:	e13fff17 	ldw	r4,-4(fp)
    2054:	0002b7c0 	call	2b7c <dhcp_discover>
    2058:	00000f06 	br	2098 <dhcp_timeout+0x180>
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
    205c:	e0bffe17 	ldw	r2,-8(fp)
    2060:	10800303 	ldbu	r2,12(r2)
    2064:	10803fcc 	andi	r2,r2,255
    2068:	108000d8 	cmpnei	r2,r2,3
    206c:	10000a1e 	bne	r2,zero,2098 <dhcp_timeout+0x180>
    if (dhcp->tries < REBOOT_TRIES) {
    2070:	e0bffe17 	ldw	r2,-8(fp)
    2074:	10800343 	ldbu	r2,13(r2)
    2078:	10803fcc 	andi	r2,r2,255
    207c:	108000a8 	cmpgeui	r2,r2,2
    2080:	1000031e 	bne	r2,zero,2090 <dhcp_timeout+0x178>
      dhcp_reboot(netif);
    2084:	e13fff17 	ldw	r4,-4(fp)
    2088:	000323c0 	call	323c <dhcp_reboot>
    208c:	00000206 	br	2098 <dhcp_timeout+0x180>
    } else {
      dhcp_discover(netif);
    2090:	e13fff17 	ldw	r4,-4(fp)
    2094:	0002b7c0 	call	2b7c <dhcp_discover>
    }
  }
}
    2098:	e037883a 	mov	sp,fp
    209c:	dfc00117 	ldw	ra,4(sp)
    20a0:	df000017 	ldw	fp,0(sp)
    20a4:	dec00204 	addi	sp,sp,8
    20a8:	f800283a 	ret

000020ac <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
    20ac:	defffc04 	addi	sp,sp,-16
    20b0:	dfc00315 	stw	ra,12(sp)
    20b4:	df000215 	stw	fp,8(sp)
    20b8:	df000204 	addi	fp,sp,8
    20bc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    20c0:	e0bfff17 	ldw	r2,-4(fp)
    20c4:	10800817 	ldw	r2,32(r2)
    20c8:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
    20cc:	e0bffe17 	ldw	r2,-8(fp)
    20d0:	10800303 	ldbu	r2,12(r2)
    20d4:	10803fcc 	andi	r2,r2,255
    20d8:	10800060 	cmpeqi	r2,r2,1
    20dc:	10000a1e 	bne	r2,zero,2108 <dhcp_t1_timeout+0x5c>
    20e0:	e0bffe17 	ldw	r2,-8(fp)
    20e4:	10800303 	ldbu	r2,12(r2)
    20e8:	10803fcc 	andi	r2,r2,255
    20ec:	108002a0 	cmpeqi	r2,r2,10
    20f0:	1000051e 	bne	r2,zero,2108 <dhcp_t1_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
    20f4:	e0bffe17 	ldw	r2,-8(fp)
    20f8:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
    20fc:	10803fcc 	andi	r2,r2,255
    2100:	10800158 	cmpnei	r2,r2,5
    2104:	1000021e 	bne	r2,zero,2110 <dhcp_t1_timeout+0x64>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
    2108:	e13fff17 	ldw	r4,-4(fp)
    210c:	0002f9c0 	call	2f9c <dhcp_renew>
  }
}
    2110:	e037883a 	mov	sp,fp
    2114:	dfc00117 	ldw	ra,4(sp)
    2118:	df000017 	ldw	fp,0(sp)
    211c:	dec00204 	addi	sp,sp,8
    2120:	f800283a 	ret

00002124 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
    2124:	defffc04 	addi	sp,sp,-16
    2128:	dfc00315 	stw	ra,12(sp)
    212c:	df000215 	stw	fp,8(sp)
    2130:	df000204 	addi	fp,sp,8
    2134:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    2138:	e0bfff17 	ldw	r2,-4(fp)
    213c:	10800817 	ldw	r2,32(r2)
    2140:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
    2144:	e0bffe17 	ldw	r2,-8(fp)
    2148:	10800303 	ldbu	r2,12(r2)
    214c:	10803fcc 	andi	r2,r2,255
    2150:	10800060 	cmpeqi	r2,r2,1
    2154:	10000a1e 	bne	r2,zero,2180 <dhcp_t2_timeout+0x5c>
    2158:	e0bffe17 	ldw	r2,-8(fp)
    215c:	10800303 	ldbu	r2,12(r2)
    2160:	10803fcc 	andi	r2,r2,255
    2164:	108002a0 	cmpeqi	r2,r2,10
    2168:	1000051e 	bne	r2,zero,2180 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
    216c:	e0bffe17 	ldw	r2,-8(fp)
    2170:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
    2174:	10803fcc 	andi	r2,r2,255
    2178:	10800158 	cmpnei	r2,r2,5
    217c:	1000021e 	bne	r2,zero,2188 <dhcp_t2_timeout+0x64>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
    2180:	e13fff17 	ldw	r4,-4(fp)
    2184:	00030ec0 	call	30ec <dhcp_rebind>
  }
}
    2188:	e037883a 	mov	sp,fp
    218c:	dfc00117 	ldw	ra,4(sp)
    2190:	df000017 	ldw	fp,0(sp)
    2194:	dec00204 	addi	sp,sp,8
    2198:	f800283a 	ret

0000219c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
    219c:	defffd04 	addi	sp,sp,-12
    21a0:	df000215 	stw	fp,8(sp)
    21a4:	df000204 	addi	fp,sp,8
    21a8:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    21ac:	e0bfff17 	ldw	r2,-4(fp)
    21b0:	10800817 	ldw	r2,32(r2)
    21b4:	e0bffe15 	stw	r2,-8(fp)
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
    21b8:	e0bffe17 	ldw	r2,-8(fp)
    21bc:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
    21c0:	e0bffe17 	ldw	r2,-8(fp)
    21c4:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
    21c8:	00800134 	movhi	r2,4
    21cc:	10918104 	addi	r2,r2,17924
    21d0:	108000c3 	ldbu	r2,3(r2)
    21d4:	10803fcc 	andi	r2,r2,255
    21d8:	10000526 	beq	r2,zero,21f0 <dhcp_handle_ack+0x54>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
    21dc:	00800134 	movhi	r2,4
    21e0:	10918404 	addi	r2,r2,17936
    21e4:	10c00317 	ldw	r3,12(r2)
    21e8:	e0bffe17 	ldw	r2,-8(fp)
    21ec:	10c00c15 	stw	r3,48(r2)
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
    21f0:	00800134 	movhi	r2,4
    21f4:	10918104 	addi	r2,r2,17924
    21f8:	10800103 	ldbu	r2,4(r2)
    21fc:	10803fcc 	andi	r2,r2,255
    2200:	10000626 	beq	r2,zero,221c <dhcp_handle_ack+0x80>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
    2204:	00800134 	movhi	r2,4
    2208:	10918404 	addi	r2,r2,17936
    220c:	10c00417 	ldw	r3,16(r2)
    2210:	e0bffe17 	ldw	r2,-8(fp)
    2214:	10c00d15 	stw	r3,52(r2)
    2218:	00000506 	br	2230 <dhcp_handle_ack+0x94>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
    221c:	e0bffe17 	ldw	r2,-8(fp)
    2220:	10800c17 	ldw	r2,48(r2)
    2224:	1006d07a 	srli	r3,r2,1
    2228:	e0bffe17 	ldw	r2,-8(fp)
    222c:	10c00d15 	stw	r3,52(r2)
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
    2230:	00800134 	movhi	r2,4
    2234:	10918104 	addi	r2,r2,17924
    2238:	10800143 	ldbu	r2,5(r2)
    223c:	10803fcc 	andi	r2,r2,255
    2240:	10000626 	beq	r2,zero,225c <dhcp_handle_ack+0xc0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
    2244:	00800134 	movhi	r2,4
    2248:	10918404 	addi	r2,r2,17936
    224c:	10c00517 	ldw	r3,20(r2)
    2250:	e0bffe17 	ldw	r2,-8(fp)
    2254:	10c00e15 	stw	r3,56(r2)
    2258:	00000406 	br	226c <dhcp_handle_ack+0xd0>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
    225c:	e0bffe17 	ldw	r2,-8(fp)
    2260:	10c00c17 	ldw	r3,48(r2)
    2264:	e0bffe17 	ldw	r2,-8(fp)
    2268:	10c00e15 	stw	r3,56(r2)
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
    226c:	e0bffe17 	ldw	r2,-8(fp)
    2270:	10800217 	ldw	r2,8(r2)
    2274:	10c0040b 	ldhu	r3,16(r2)
    2278:	1080048b 	ldhu	r2,18(r2)
    227c:	1004943a 	slli	r2,r2,16
    2280:	10c4b03a 	or	r2,r2,r3
    2284:	1007883a 	mov	r3,r2
    2288:	e0bffe17 	ldw	r2,-8(fp)
    228c:	10c00915 	stw	r3,36(r2)
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
    2290:	00800134 	movhi	r2,4
    2294:	10918104 	addi	r2,r2,17924
    2298:	10800183 	ldbu	r2,6(r2)
    229c:	10803fcc 	andi	r2,r2,255
    22a0:	10001b26 	beq	r2,zero,2310 <dhcp_handle_ack+0x174>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
    22a4:	00800134 	movhi	r2,4
    22a8:	10918404 	addi	r2,r2,17936
    22ac:	10800617 	ldw	r2,24(r2)
    22b0:	1006d63a 	srli	r3,r2,24
    22b4:	00800134 	movhi	r2,4
    22b8:	10918404 	addi	r2,r2,17936
    22bc:	10800617 	ldw	r2,24(r2)
    22c0:	1004d23a 	srli	r2,r2,8
    22c4:	10bfc00c 	andi	r2,r2,65280
    22c8:	1886b03a 	or	r3,r3,r2
    22cc:	00800134 	movhi	r2,4
    22d0:	10918404 	addi	r2,r2,17936
    22d4:	10800617 	ldw	r2,24(r2)
    22d8:	10bfc00c 	andi	r2,r2,65280
    22dc:	1004923a 	slli	r2,r2,8
    22e0:	1886b03a 	or	r3,r3,r2
    22e4:	00800134 	movhi	r2,4
    22e8:	10918404 	addi	r2,r2,17936
    22ec:	10800617 	ldw	r2,24(r2)
    22f0:	1004963a 	slli	r2,r2,24
    22f4:	1886b03a 	or	r3,r3,r2
    22f8:	e0bffe17 	ldw	r2,-8(fp)
    22fc:	10c00a15 	stw	r3,40(r2)
    dhcp->subnet_mask_given = 1;
    2300:	e0bffe17 	ldw	r2,-8(fp)
    2304:	00c00044 	movi	r3,1
    2308:	10c00385 	stb	r3,14(r2)
    230c:	00000206 	br	2318 <dhcp_handle_ack+0x17c>
  } else {
    dhcp->subnet_mask_given = 0;
    2310:	e0bffe17 	ldw	r2,-8(fp)
    2314:	10000385 	stb	zero,14(r2)
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
    2318:	00800134 	movhi	r2,4
    231c:	10918104 	addi	r2,r2,17924
    2320:	108001c3 	ldbu	r2,7(r2)
    2324:	10803fcc 	andi	r2,r2,255
    2328:	10001726 	beq	r2,zero,2388 <dhcp_handle_ack+0x1ec>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
    232c:	00800134 	movhi	r2,4
    2330:	10918404 	addi	r2,r2,17936
    2334:	10800717 	ldw	r2,28(r2)
    2338:	1006d63a 	srli	r3,r2,24
    233c:	00800134 	movhi	r2,4
    2340:	10918404 	addi	r2,r2,17936
    2344:	10800717 	ldw	r2,28(r2)
    2348:	1004d23a 	srli	r2,r2,8
    234c:	10bfc00c 	andi	r2,r2,65280
    2350:	1886b03a 	or	r3,r3,r2
    2354:	00800134 	movhi	r2,4
    2358:	10918404 	addi	r2,r2,17936
    235c:	10800717 	ldw	r2,28(r2)
    2360:	10bfc00c 	andi	r2,r2,65280
    2364:	1004923a 	slli	r2,r2,8
    2368:	1886b03a 	or	r3,r3,r2
    236c:	00800134 	movhi	r2,4
    2370:	10918404 	addi	r2,r2,17936
    2374:	10800717 	ldw	r2,28(r2)
    2378:	1004963a 	slli	r2,r2,24
    237c:	1886b03a 	or	r3,r3,r2
    2380:	e0bffe17 	ldw	r2,-8(fp)
    2384:	10c00b15 	stw	r3,44(r2)
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
    2388:	e037883a 	mov	sp,fp
    238c:	df000017 	ldw	fp,0(sp)
    2390:	dec00104 	addi	sp,sp,4
    2394:	f800283a 	ret

00002398 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
    2398:	defffc04 	addi	sp,sp,-16
    239c:	dfc00315 	stw	ra,12(sp)
    23a0:	df000215 	stw	fp,8(sp)
    23a4:	df000204 	addi	fp,sp,8
    23a8:	e13ffe15 	stw	r4,-8(fp)
    23ac:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
    23b0:	e0bffe17 	ldw	r2,-8(fp)
    23b4:	1000091e 	bne	r2,zero,23dc <dhcp_set_struct+0x44>
    23b8:	010000f4 	movhi	r4,3
    23bc:	213a8404 	addi	r4,r4,-5616
    23c0:	014000f4 	movhi	r5,3
    23c4:	297a8e04 	addi	r5,r5,-5576
    23c8:	01809344 	movi	r6,589
    23cc:	01c000f4 	movhi	r7,3
    23d0:	39fa9204 	addi	r7,r7,-5560
    23d4:	0017c440 	call	17c44 <printf>
    23d8:	003fff06 	br	23d8 <dhcp_set_struct+0x40>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
    23dc:	e0bfff17 	ldw	r2,-4(fp)
    23e0:	1000091e 	bne	r2,zero,2408 <dhcp_set_struct+0x70>
    23e4:	010000f4 	movhi	r4,3
    23e8:	213a8404 	addi	r4,r4,-5616
    23ec:	014000f4 	movhi	r5,3
    23f0:	297a9804 	addi	r5,r5,-5536
    23f4:	01809384 	movi	r6,590
    23f8:	01c000f4 	movhi	r7,3
    23fc:	39fa9204 	addi	r7,r7,-5560
    2400:	0017c440 	call	17c44 <printf>
    2404:	003fff06 	br	2404 <dhcp_set_struct+0x6c>
  LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
    2408:	e0bffe17 	ldw	r2,-8(fp)
    240c:	10800817 	ldw	r2,32(r2)
    2410:	10000926 	beq	r2,zero,2438 <dhcp_set_struct+0xa0>
    2414:	010000f4 	movhi	r4,3
    2418:	213a8404 	addi	r4,r4,-5616
    241c:	014000f4 	movhi	r5,3
    2420:	297a9c04 	addi	r5,r5,-5520
    2424:	018093c4 	movi	r6,591
    2428:	01c000f4 	movhi	r7,3
    242c:	39fa9204 	addi	r7,r7,-5560
    2430:	0017c440 	call	17c44 <printf>
    2434:	003fff06 	br	2434 <dhcp_set_struct+0x9c>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
    2438:	e13fff17 	ldw	r4,-4(fp)
    243c:	000b883a 	mov	r5,zero
    2440:	01800f04 	movi	r6,60
    2444:	0017b3c0 	call	17b3c <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  netif->dhcp = dhcp;
    2448:	e0bffe17 	ldw	r2,-8(fp)
    244c:	e0ffff17 	ldw	r3,-4(fp)
    2450:	10c00815 	stw	r3,32(r2)
}
    2454:	e037883a 	mov	sp,fp
    2458:	dfc00117 	ldw	ra,4(sp)
    245c:	df000017 	ldw	fp,0(sp)
    2460:	dec00204 	addi	sp,sp,8
    2464:	f800283a 	ret

00002468 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
    2468:	defffd04 	addi	sp,sp,-12
    246c:	dfc00215 	stw	ra,8(sp)
    2470:	df000115 	stw	fp,4(sp)
    2474:	df000104 	addi	fp,sp,4
    2478:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
    247c:	e0bfff17 	ldw	r2,-4(fp)
    2480:	1000091e 	bne	r2,zero,24a8 <dhcp_cleanup+0x40>
    2484:	010000f4 	movhi	r4,3
    2488:	213a8404 	addi	r4,r4,-5616
    248c:	014000f4 	movhi	r5,3
    2490:	297a8e04 	addi	r5,r5,-5576
    2494:	01809804 	movi	r6,608
    2498:	01c000f4 	movhi	r7,3
    249c:	39fa9204 	addi	r7,r7,-5560
    24a0:	0017c440 	call	17c44 <printf>
    24a4:	003fff06 	br	24a4 <dhcp_cleanup+0x3c>

  if (netif->dhcp != NULL) {
    24a8:	e0bfff17 	ldw	r2,-4(fp)
    24ac:	10800817 	ldw	r2,32(r2)
    24b0:	10000626 	beq	r2,zero,24cc <dhcp_cleanup+0x64>
    mem_free(netif->dhcp);
    24b4:	e0bfff17 	ldw	r2,-4(fp)
    24b8:	10800817 	ldw	r2,32(r2)
    24bc:	1009883a 	mov	r4,r2
    24c0:	00084e80 	call	84e8 <mem_free>
    netif->dhcp = NULL;
    24c4:	e0bfff17 	ldw	r2,-4(fp)
    24c8:	10000815 	stw	zero,32(r2)
  }
}
    24cc:	e037883a 	mov	sp,fp
    24d0:	dfc00117 	ldw	ra,4(sp)
    24d4:	df000017 	ldw	fp,0(sp)
    24d8:	dec00204 	addi	sp,sp,8
    24dc:	f800283a 	ret

000024e0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
    24e0:	defffb04 	addi	sp,sp,-20
    24e4:	dfc00415 	stw	ra,16(sp)
    24e8:	df000315 	stw	fp,12(sp)
    24ec:	df000304 	addi	fp,sp,12
    24f0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  err_t result = ERR_OK;
    24f4:	e03ffe05 	stb	zero,-8(fp)

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
    24f8:	e0bfff17 	ldw	r2,-4(fp)
    24fc:	1000091e 	bne	r2,zero,2524 <dhcp_start+0x44>
    2500:	010000f4 	movhi	r4,3
    2504:	213a8404 	addi	r4,r4,-5616
    2508:	014000f4 	movhi	r5,3
    250c:	297a8e04 	addi	r5,r5,-5576
    2510:	01809e84 	movi	r6,634
    2514:	01c000f4 	movhi	r7,3
    2518:	39fa9204 	addi	r7,r7,-5560
    251c:	0017c440 	call	17c44 <printf>
    2520:	003fff06 	br	2520 <dhcp_start+0x40>
  dhcp = netif->dhcp;
    2524:	e0bfff17 	ldw	r2,-4(fp)
    2528:	10800817 	ldw	r2,32(r2)
    252c:	e0bffd15 	stw	r2,-12(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
    2530:	e0bfff17 	ldw	r2,-4(fp)
    2534:	10c00b43 	ldbu	r3,45(r2)
    2538:	00bffdc4 	movi	r2,-9
    253c:	1884703a 	and	r2,r3,r2
    2540:	1007883a 	mov	r3,r2
    2544:	e0bfff17 	ldw	r2,-4(fp)
    2548:	10c00b45 	stb	r3,45(r2)

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
    254c:	e0bfff17 	ldw	r2,-4(fp)
    2550:	10800b43 	ldbu	r2,45(r2)
    2554:	10803fcc 	andi	r2,r2,255
    2558:	1080080c 	andi	r2,r2,32
    255c:	1000021e 	bne	r2,zero,2568 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
    2560:	00bffc84 	movi	r2,-14
    2564:	00006b06 	br	2714 <dhcp_start+0x234>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
    2568:	e0bfff17 	ldw	r2,-4(fp)
    256c:	1080090b 	ldhu	r2,36(r2)
    2570:	10bfffcc 	andi	r2,r2,65535
    2574:	10809028 	cmpgeui	r2,r2,576
    2578:	1000021e 	bne	r2,zero,2584 <dhcp_start+0xa4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
    257c:	00bfffc4 	movi	r2,-1
    2580:	00006406 	br	2714 <dhcp_start+0x234>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
    2584:	e0bffd17 	ldw	r2,-12(fp)
    2588:	10000b1e 	bne	r2,zero,25b8 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
    258c:	01000f04 	movi	r4,60
    2590:	00089b80 	call	89b8 <mem_malloc>
    2594:	e0bffd15 	stw	r2,-12(fp)
    if (dhcp == NULL) {
    2598:	e0bffd17 	ldw	r2,-12(fp)
    259c:	1000021e 	bne	r2,zero,25a8 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
    25a0:	00bfffc4 	movi	r2,-1
    25a4:	00005b06 	br	2714 <dhcp_start+0x234>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
    25a8:	e0bfff17 	ldw	r2,-4(fp)
    25ac:	e0fffd17 	ldw	r3,-12(fp)
    25b0:	10c00815 	stw	r3,32(r2)
    25b4:	00001f06 	br	2634 <dhcp_start+0x154>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
    25b8:	e0bffd17 	ldw	r2,-12(fp)
    25bc:	10800117 	ldw	r2,4(r2)
    25c0:	10000426 	beq	r2,zero,25d4 <dhcp_start+0xf4>
      udp_remove(dhcp->pcb);
    25c4:	e0bffd17 	ldw	r2,-12(fp)
    25c8:	10800117 	ldw	r2,4(r2)
    25cc:	1009883a 	mov	r4,r2
    25d0:	00157540 	call	15754 <udp_remove>
    }
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    25d4:	e0bffd17 	ldw	r2,-12(fp)
    25d8:	10800417 	ldw	r2,16(r2)
    25dc:	10000926 	beq	r2,zero,2604 <dhcp_start+0x124>
    25e0:	010000f4 	movhi	r4,3
    25e4:	213a8404 	addi	r4,r4,-5616
    25e8:	014000f4 	movhi	r5,3
    25ec:	297aa504 	addi	r5,r5,-5484
    25f0:	0180a784 	movi	r6,670
    25f4:	01c000f4 	movhi	r7,3
    25f8:	39fa9204 	addi	r7,r7,-5560
    25fc:	0017c440 	call	17c44 <printf>
    2600:	003fff06 	br	2600 <dhcp_start+0x120>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
    2604:	e0bffd17 	ldw	r2,-12(fp)
    2608:	10800217 	ldw	r2,8(r2)
    260c:	10000926 	beq	r2,zero,2634 <dhcp_start+0x154>
    2610:	010000f4 	movhi	r4,3
    2614:	213a8404 	addi	r4,r4,-5616
    2618:	014000f4 	movhi	r5,3
    261c:	297aab04 	addi	r5,r5,-5460
    2620:	0180a7c4 	movi	r6,671
    2624:	01c000f4 	movhi	r7,3
    2628:	39fa9204 	addi	r7,r7,-5560
    262c:	0017c440 	call	17c44 <printf>
    2630:	003fff06 	br	2630 <dhcp_start+0x150>
  }
    
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
    2634:	e13ffd17 	ldw	r4,-12(fp)
    2638:	000b883a 	mov	r5,zero
    263c:	01800f04 	movi	r6,60
    2640:	0017b3c0 	call	17b3c <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
    2644:	00157f00 	call	157f0 <udp_new>
    2648:	e0fffd17 	ldw	r3,-12(fp)
    264c:	18800115 	stw	r2,4(r3)
  if (dhcp->pcb == NULL) {
    2650:	e0bffd17 	ldw	r2,-12(fp)
    2654:	10800117 	ldw	r2,4(r2)
    2658:	1000021e 	bne	r2,zero,2664 <dhcp_start+0x184>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
    265c:	00bfffc4 	movi	r2,-1
    2660:	00002c06 	br	2714 <dhcp_start+0x234>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
    2664:	e0bffd17 	ldw	r2,-12(fp)
    2668:	10800117 	ldw	r2,4(r2)
    266c:	e0fffd17 	ldw	r3,-12(fp)
    2670:	18c00117 	ldw	r3,4(r3)
    2674:	18c00203 	ldbu	r3,8(r3)
    2678:	18c00814 	ori	r3,r3,32
    267c:	10c00205 	stb	r3,8(r2)
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
    2680:	e0bffd17 	ldw	r2,-12(fp)
    2684:	10800117 	ldw	r2,4(r2)
    2688:	1009883a 	mov	r4,r2
    268c:	014000f4 	movhi	r5,3
    2690:	29532904 	addi	r5,r5,19620
    2694:	01801104 	movi	r6,68
    2698:	00154600 	call	15460 <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
    269c:	e0bffd17 	ldw	r2,-12(fp)
    26a0:	10800117 	ldw	r2,4(r2)
    26a4:	1009883a 	mov	r4,r2
    26a8:	014000f4 	movhi	r5,3
    26ac:	29532904 	addi	r5,r5,19620
    26b0:	018010c4 	movi	r6,67
    26b4:	00155c00 	call	155c0 <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
    26b8:	e0bffd17 	ldw	r2,-12(fp)
    26bc:	10800117 	ldw	r2,4(r2)
    26c0:	1009883a 	mov	r4,r2
    26c4:	01400034 	movhi	r5,0
    26c8:	2950dd04 	addi	r5,r5,17268
    26cc:	e1bfff17 	ldw	r6,-4(fp)
    26d0:	00157140 	call	15714 <udp_recv>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
    26d4:	e13fff17 	ldw	r4,-4(fp)
    26d8:	0002b7c0 	call	2b7c <dhcp_discover>
    26dc:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
    26e0:	e0bffe07 	ldb	r2,-8(fp)
    26e4:	10000426 	beq	r2,zero,26f8 <dhcp_start+0x218>
    /* free resources allocated above */
    dhcp_stop(netif);
    26e8:	e13fff17 	ldw	r4,-4(fp)
    26ec:	00035880 	call	3588 <dhcp_stop>
    return ERR_MEM;
    26f0:	00bfffc4 	movi	r2,-1
    26f4:	00000706 	br	2714 <dhcp_start+0x234>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
    26f8:	e0bfff17 	ldw	r2,-4(fp)
    26fc:	10800b43 	ldbu	r2,45(r2)
    2700:	10800214 	ori	r2,r2,8
    2704:	1007883a 	mov	r3,r2
    2708:	e0bfff17 	ldw	r2,-4(fp)
    270c:	10c00b45 	stb	r3,45(r2)
  return result;
    2710:	e0bffe03 	ldbu	r2,-8(fp)
}
    2714:	e037883a 	mov	sp,fp
    2718:	dfc00117 	ldw	ra,4(sp)
    271c:	df000017 	ldw	fp,0(sp)
    2720:	dec00204 	addi	sp,sp,8
    2724:	f800283a 	ret

00002728 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
    2728:	deffeb04 	addi	sp,sp,-84
    272c:	dfc01415 	stw	ra,80(sp)
    2730:	df001315 	stw	fp,76(sp)
    2734:	df001304 	addi	fp,sp,76
    2738:	e13fff15 	stw	r4,-4(fp)
  struct dhcp dhcp;
  err_t result = ERR_OK;
    273c:	e03fef05 	stb	zero,-68(fp)
  struct udp_pcb *pcb;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    2740:	e0bfff17 	ldw	r2,-4(fp)
    2744:	1000091e 	bne	r2,zero,276c <dhcp_inform+0x44>
    2748:	010000f4 	movhi	r4,3
    274c:	213a8404 	addi	r4,r4,-5616
    2750:	014000f4 	movhi	r5,3
    2754:	297a8e04 	addi	r5,r5,-5576
    2758:	0180b384 	movi	r6,718
    275c:	01c000f4 	movhi	r7,3
    2760:	39fa9204 	addi	r7,r7,-5560
    2764:	0017c440 	call	17c44 <printf>
    2768:	003fff06 	br	2768 <dhcp_inform+0x40>

  memset(&dhcp, 0, sizeof(struct dhcp));
    276c:	e0bff004 	addi	r2,fp,-64
    2770:	1009883a 	mov	r4,r2
    2774:	000b883a 	mov	r5,zero
    2778:	01800f04 	movi	r6,60
    277c:	0017b3c0 	call	17b3c <memset>
  dhcp_set_state(&dhcp, DHCP_INFORM);
    2780:	e0bff004 	addi	r2,fp,-64
    2784:	1009883a 	mov	r4,r2
    2788:	01400204 	movi	r5,8
    278c:	000366c0 	call	366c <dhcp_set_state>

  if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
    2790:	e0bfff17 	ldw	r2,-4(fp)
    2794:	10800817 	ldw	r2,32(r2)
    2798:	10000926 	beq	r2,zero,27c0 <dhcp_inform+0x98>
    279c:	e0bfff17 	ldw	r2,-4(fp)
    27a0:	10800817 	ldw	r2,32(r2)
    27a4:	10800117 	ldw	r2,4(r2)
    27a8:	10000526 	beq	r2,zero,27c0 <dhcp_inform+0x98>
    /* re-use existing pcb */
    pcb = netif->dhcp->pcb;
    27ac:	e0bfff17 	ldw	r2,-4(fp)
    27b0:	10800817 	ldw	r2,32(r2)
    27b4:	10800117 	ldw	r2,4(r2)
    27b8:	e0bfee15 	stw	r2,-72(fp)
    27bc:	00001106 	br	2804 <dhcp_inform+0xdc>
  } else {
    pcb = udp_new();
    27c0:	00157f00 	call	157f0 <udp_new>
    27c4:	e0bfee15 	stw	r2,-72(fp)
    if (pcb == NULL) {
    27c8:	e0bfee17 	ldw	r2,-72(fp)
    27cc:	10003c26 	beq	r2,zero,28c0 <dhcp_inform+0x198>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
    }
    dhcp.pcb = pcb;
    27d0:	e0bfee17 	ldw	r2,-72(fp)
    27d4:	e0bff115 	stw	r2,-60(fp)
    ip_set_option(dhcp.pcb, SOF_BROADCAST);
    27d8:	e0bff117 	ldw	r2,-60(fp)
    27dc:	e0fff117 	ldw	r3,-60(fp)
    27e0:	18c00203 	ldbu	r3,8(r3)
    27e4:	18c00814 	ori	r3,r3,32
    27e8:	10c00205 	stb	r3,8(r2)
    udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
    27ec:	e0bff117 	ldw	r2,-60(fp)
    27f0:	1009883a 	mov	r4,r2
    27f4:	014000f4 	movhi	r5,3
    27f8:	29532904 	addi	r5,r5,19620
    27fc:	01801104 	movi	r6,68
    2800:	00154600 	call	15460 <udp_bind>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
  }
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
    2804:	e0bff004 	addi	r2,fp,-64
    2808:	e13fff17 	ldw	r4,-4(fp)
    280c:	100b883a 	mov	r5,r2
    2810:	01800204 	movi	r6,8
    2814:	00046980 	call	4698 <dhcp_create_msg>
    2818:	e0bfef05 	stb	r2,-68(fp)
  if (result == ERR_OK) {
    281c:	e0bfef07 	ldb	r2,-68(fp)
    2820:	1000221e 	bne	r2,zero,28ac <dhcp_inform+0x184>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    2824:	e0bff004 	addi	r2,fp,-64
    2828:	1009883a 	mov	r4,r2
    282c:	01400e44 	movi	r5,57
    2830:	01800084 	movi	r6,2
    2834:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
    2838:	e0bfff17 	ldw	r2,-4(fp)
    283c:	1080090b 	ldhu	r2,36(r2)
    2840:	10bfffcc 	andi	r2,r2,65535
    2844:	e0fff004 	addi	r3,fp,-64
    2848:	1809883a 	mov	r4,r3
    284c:	100b883a 	mov	r5,r2
    2850:	00038440 	call	3844 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
    2854:	e0bff004 	addi	r2,fp,-64
    2858:	1009883a 	mov	r4,r2
    285c:	0004c4c0 	call	4c4c <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
    2860:	e0fff417 	ldw	r3,-48(fp)
    2864:	e0bff60b 	ldhu	r2,-40(fp)
    2868:	10803c04 	addi	r2,r2,240
    286c:	10bfffcc 	andi	r2,r2,65535
    2870:	1809883a 	mov	r4,r3
    2874:	100b883a 	mov	r5,r2
    2878:	0009fa40 	call	9fa4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
    udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    287c:	e0bff417 	ldw	r2,-48(fp)
    2880:	e0ffff17 	ldw	r3,-4(fp)
    2884:	d8c00015 	stw	r3,0(sp)
    2888:	e13fee17 	ldw	r4,-72(fp)
    288c:	100b883a 	mov	r5,r2
    2890:	018000f4 	movhi	r6,3
    2894:	31932a04 	addi	r6,r6,19624
    2898:	01c010c4 	movi	r7,67
    289c:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(&dhcp);
    28a0:	e0bff004 	addi	r2,fp,-64
    28a4:	1009883a 	mov	r4,r2
    28a8:	0004b6c0 	call	4b6c <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  if (dhcp.pcb != NULL) {
    28ac:	e0bff117 	ldw	r2,-60(fp)
    28b0:	10000326 	beq	r2,zero,28c0 <dhcp_inform+0x198>
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
    28b4:	e0bff117 	ldw	r2,-60(fp)
    28b8:	1009883a 	mov	r4,r2
    28bc:	00157540 	call	15754 <udp_remove>
  }
}
    28c0:	e037883a 	mov	sp,fp
    28c4:	dfc00117 	ldw	ra,4(sp)
    28c8:	df000017 	ldw	fp,0(sp)
    28cc:	dec00204 	addi	sp,sp,8
    28d0:	f800283a 	ret

000028d4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
    28d4:	defffc04 	addi	sp,sp,-16
    28d8:	dfc00315 	stw	ra,12(sp)
    28dc:	df000215 	stw	fp,8(sp)
    28e0:	df000204 	addi	fp,sp,8
    28e4:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    28e8:	e0bfff17 	ldw	r2,-4(fp)
    28ec:	10800817 	ldw	r2,32(r2)
    28f0:	e0bffe15 	stw	r2,-8(fp)
  if (!dhcp)
    28f4:	e0bffe17 	ldw	r2,-8(fp)
    28f8:	10001826 	beq	r2,zero,295c <dhcp_network_changed+0x88>
    return;
  switch (dhcp->state) {
    28fc:	e0bffe17 	ldw	r2,-8(fp)
    2900:	10800303 	ldbu	r2,12(r2)
    2904:	10803fcc 	andi	r2,r2,255
    2908:	10c00188 	cmpgei	r3,r2,6
    290c:	1800041e 	bne	r3,zero,2920 <dhcp_network_changed+0x4c>
    2910:	10c000c8 	cmpgei	r3,r2,3
    2914:	1800041e 	bne	r3,zero,2928 <dhcp_network_changed+0x54>
    2918:	10001226 	beq	r2,zero,2964 <dhcp_network_changed+0x90>
    291c:	00000906 	br	2944 <dhcp_network_changed+0x70>
    2920:	108002a0 	cmpeqi	r2,r2,10
    2924:	10000726 	beq	r2,zero,2944 <dhcp_network_changed+0x70>
  case DHCP_REBINDING:
  case DHCP_RENEWING:
  case DHCP_BOUND:
  case DHCP_REBOOTING:
    netif_set_down(netif);
    2928:	e13fff17 	ldw	r4,-4(fp)
    292c:	000985c0 	call	985c <netif_set_down>
    dhcp->tries = 0;
    2930:	e0bffe17 	ldw	r2,-8(fp)
    2934:	10000345 	stb	zero,13(r2)
    dhcp_reboot(netif);
    2938:	e13fff17 	ldw	r4,-4(fp)
    293c:	000323c0 	call	323c <dhcp_reboot>
    break;
    2940:	00000906 	br	2968 <dhcp_network_changed+0x94>
  case DHCP_OFF:
    /* stay off */
    break;
  default:
    dhcp->tries = 0;
    2944:	e0bffe17 	ldw	r2,-8(fp)
    2948:	10000345 	stb	zero,13(r2)
    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    294c:	e13fff17 	ldw	r4,-4(fp)
    2950:	0002b7c0 	call	2b7c <dhcp_discover>
    break;
    2954:	0001883a 	nop
    2958:	00000306 	br	2968 <dhcp_network_changed+0x94>
void
dhcp_network_changed(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  if (!dhcp)
    return;
    295c:	0001883a 	nop
    2960:	00000106 	br	2968 <dhcp_network_changed+0x94>
    dhcp->tries = 0;
    dhcp_reboot(netif);
    break;
  case DHCP_OFF:
    /* stay off */
    break;
    2964:	0001883a 	nop
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    break;
  }
}
    2968:	e037883a 	mov	sp,fp
    296c:	dfc00117 	ldw	ra,4(sp)
    2970:	df000017 	ldw	fp,0(sp)
    2974:	dec00204 	addi	sp,sp,8
    2978:	f800283a 	ret

0000297c <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
    297c:	defffc04 	addi	sp,sp,-16
    2980:	dfc00315 	stw	ra,12(sp)
    2984:	df000215 	stw	fp,8(sp)
    2988:	df000204 	addi	fp,sp,8
    298c:	e13ffe15 	stw	r4,-8(fp)
    2990:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    2994:	e0bffe17 	ldw	r2,-8(fp)
    2998:	1000091e 	bne	r2,zero,29c0 <dhcp_arp_reply+0x44>
    299c:	010000f4 	movhi	r4,3
    29a0:	213a8404 	addi	r4,r4,-5616
    29a4:	014000f4 	movhi	r5,3
    29a8:	297a8e04 	addi	r5,r5,-5576
    29ac:	0180c944 	movi	r6,805
    29b0:	01c000f4 	movhi	r7,3
    29b4:	39fa9204 	addi	r7,r7,-5560
    29b8:	0017c440 	call	17c44 <printf>
    29bc:	003fff06 	br	29bc <dhcp_arp_reply+0x40>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
    29c0:	e0bffe17 	ldw	r2,-8(fp)
    29c4:	10800817 	ldw	r2,32(r2)
    29c8:	10000e26 	beq	r2,zero,2a04 <dhcp_arp_reply+0x88>
    29cc:	e0bffe17 	ldw	r2,-8(fp)
    29d0:	10800817 	ldw	r2,32(r2)
    29d4:	10800303 	ldbu	r2,12(r2)
    29d8:	10803fcc 	andi	r2,r2,255
    29dc:	10800218 	cmpnei	r2,r2,8
    29e0:	1000081e 	bne	r2,zero,2a04 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
    29e4:	e0bfff17 	ldw	r2,-4(fp)
    29e8:	10c00017 	ldw	r3,0(r2)
    29ec:	e0bffe17 	ldw	r2,-8(fp)
    29f0:	10800817 	ldw	r2,32(r2)
    29f4:	10800917 	ldw	r2,36(r2)
    29f8:	1880021e 	bne	r3,r2,2a04 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
    29fc:	e13ffe17 	ldw	r4,-8(fp)
    2a00:	0002a180 	call	2a18 <dhcp_decline>
    }
  }
}
    2a04:	e037883a 	mov	sp,fp
    2a08:	dfc00117 	ldw	ra,4(sp)
    2a0c:	df000017 	ldw	fp,0(sp)
    2a10:	dec00204 	addi	sp,sp,8
    2a14:	f800283a 	ret

00002a18 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
    2a18:	defffa04 	addi	sp,sp,-24
    2a1c:	dfc00515 	stw	ra,20(sp)
    2a20:	df000415 	stw	fp,16(sp)
    2a24:	df000404 	addi	fp,sp,16
    2a28:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    2a2c:	e0bfff17 	ldw	r2,-4(fp)
    2a30:	10800817 	ldw	r2,32(r2)
    2a34:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
    2a38:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
    2a3c:	e13ffd17 	ldw	r4,-12(fp)
    2a40:	01400304 	movi	r5,12
    2a44:	000366c0 	call	366c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
    2a48:	e13fff17 	ldw	r4,-4(fp)
    2a4c:	e17ffd17 	ldw	r5,-12(fp)
    2a50:	01800104 	movi	r6,4
    2a54:	00046980 	call	4698 <dhcp_create_msg>
    2a58:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    2a5c:	e0bffe07 	ldb	r2,-8(fp)
    2a60:	1000311e 	bne	r2,zero,2b28 <dhcp_decline+0x110>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
    2a64:	e13ffd17 	ldw	r4,-12(fp)
    2a68:	01400c84 	movi	r5,50
    2a6c:	01800104 	movi	r6,4
    2a70:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
    2a74:	e0bffd17 	ldw	r2,-12(fp)
    2a78:	10800917 	ldw	r2,36(r2)
    2a7c:	1006d63a 	srli	r3,r2,24
    2a80:	e0bffd17 	ldw	r2,-12(fp)
    2a84:	10800917 	ldw	r2,36(r2)
    2a88:	1004d23a 	srli	r2,r2,8
    2a8c:	10bfc00c 	andi	r2,r2,65280
    2a90:	1886b03a 	or	r3,r3,r2
    2a94:	e0bffd17 	ldw	r2,-12(fp)
    2a98:	10800917 	ldw	r2,36(r2)
    2a9c:	10bfc00c 	andi	r2,r2,65280
    2aa0:	1004923a 	slli	r2,r2,8
    2aa4:	1886b03a 	or	r3,r3,r2
    2aa8:	e0bffd17 	ldw	r2,-12(fp)
    2aac:	10800917 	ldw	r2,36(r2)
    2ab0:	1004963a 	slli	r2,r2,24
    2ab4:	1884b03a 	or	r2,r3,r2
    2ab8:	e13ffd17 	ldw	r4,-12(fp)
    2abc:	100b883a 	mov	r5,r2
    2ac0:	000391c0 	call	391c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
    2ac4:	e13ffd17 	ldw	r4,-12(fp)
    2ac8:	0004c4c0 	call	4c4c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    2acc:	e0bffd17 	ldw	r2,-12(fp)
    2ad0:	10c00417 	ldw	r3,16(r2)
    2ad4:	e0bffd17 	ldw	r2,-12(fp)
    2ad8:	1080060b 	ldhu	r2,24(r2)
    2adc:	10803c04 	addi	r2,r2,240
    2ae0:	10bfffcc 	andi	r2,r2,65535
    2ae4:	1809883a 	mov	r4,r3
    2ae8:	100b883a 	mov	r5,r2
    2aec:	0009fa40 	call	9fa4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    2af0:	e0bffd17 	ldw	r2,-12(fp)
    2af4:	10c00117 	ldw	r3,4(r2)
    2af8:	e0bffd17 	ldw	r2,-12(fp)
    2afc:	10800417 	ldw	r2,16(r2)
    2b00:	e13fff17 	ldw	r4,-4(fp)
    2b04:	d9000015 	stw	r4,0(sp)
    2b08:	1809883a 	mov	r4,r3
    2b0c:	100b883a 	mov	r5,r2
    2b10:	018000f4 	movhi	r6,3
    2b14:	31932a04 	addi	r6,r6,19624
    2b18:	01c010c4 	movi	r7,67
    2b1c:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
    2b20:	e13ffd17 	ldw	r4,-12(fp)
    2b24:	0004b6c0 	call	4b6c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    2b28:	e0bffd17 	ldw	r2,-12(fp)
    2b2c:	10800343 	ldbu	r2,13(r2)
    2b30:	10800044 	addi	r2,r2,1
    2b34:	1007883a 	mov	r3,r2
    2b38:	e0bffd17 	ldw	r2,-12(fp)
    2b3c:	10c00345 	stb	r3,13(r2)
  msecs = 10*1000;
    2b40:	0089c404 	movi	r2,10000
    2b44:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    2b48:	e0bffe8b 	ldhu	r2,-6(fp)
    2b4c:	10c07cc4 	addi	r3,r2,499
    2b50:	00807d04 	movi	r2,500
    2b54:	1885283a 	div	r2,r3,r2
    2b58:	1007883a 	mov	r3,r2
    2b5c:	e0bffd17 	ldw	r2,-12(fp)
    2b60:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
    2b64:	e0bffe03 	ldbu	r2,-8(fp)
}
    2b68:	e037883a 	mov	sp,fp
    2b6c:	dfc00117 	ldw	ra,4(sp)
    2b70:	df000017 	ldw	fp,0(sp)
    2b74:	dec00204 	addi	sp,sp,8
    2b78:	f800283a 	ret

00002b7c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
    2b7c:	defffa04 	addi	sp,sp,-24
    2b80:	dfc00515 	stw	ra,20(sp)
    2b84:	df000415 	stw	fp,16(sp)
    2b88:	df000404 	addi	fp,sp,16
    2b8c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    2b90:	e0bfff17 	ldw	r2,-4(fp)
    2b94:	10800817 	ldw	r2,32(r2)
    2b98:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
    2b9c:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10000915 	stw	zero,36(r2)
  dhcp_set_state(dhcp, DHCP_SELECTING);
    2ba8:	e13ffd17 	ldw	r4,-12(fp)
    2bac:	01400184 	movi	r5,6
    2bb0:	000366c0 	call	366c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
    2bb4:	e13fff17 	ldw	r4,-4(fp)
    2bb8:	e17ffd17 	ldw	r5,-12(fp)
    2bbc:	01800044 	movi	r6,1
    2bc0:	00046980 	call	4698 <dhcp_create_msg>
    2bc4:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    2bc8:	e0bffe07 	ldb	r2,-8(fp)
    2bcc:	1000331e 	bne	r2,zero,2c9c <dhcp_discover+0x120>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    2bd0:	e13ffd17 	ldw	r4,-12(fp)
    2bd4:	01400e44 	movi	r5,57
    2bd8:	01800084 	movi	r6,2
    2bdc:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    2be0:	e0bfff17 	ldw	r2,-4(fp)
    2be4:	1080090b 	ldhu	r2,36(r2)
    2be8:	10bfffcc 	andi	r2,r2,65535
    2bec:	e13ffd17 	ldw	r4,-12(fp)
    2bf0:	100b883a 	mov	r5,r2
    2bf4:	00038440 	call	3844 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
    2bf8:	e13ffd17 	ldw	r4,-12(fp)
    2bfc:	01400dc4 	movi	r5,55
    2c00:	01800104 	movi	r6,4
    2c04:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
    2c08:	e13ffd17 	ldw	r4,-12(fp)
    2c0c:	01400044 	movi	r5,1
    2c10:	00037a80 	call	37a8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
    2c14:	e13ffd17 	ldw	r4,-12(fp)
    2c18:	014000c4 	movi	r5,3
    2c1c:	00037a80 	call	37a8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
    2c20:	e13ffd17 	ldw	r4,-12(fp)
    2c24:	01400704 	movi	r5,28
    2c28:	00037a80 	call	37a8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
    2c2c:	e13ffd17 	ldw	r4,-12(fp)
    2c30:	01400184 	movi	r5,6
    2c34:	00037a80 	call	37a8 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
    2c38:	e13ffd17 	ldw	r4,-12(fp)
    2c3c:	0004c4c0 	call	4c4c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    2c40:	e0bffd17 	ldw	r2,-12(fp)
    2c44:	10c00417 	ldw	r3,16(r2)
    2c48:	e0bffd17 	ldw	r2,-12(fp)
    2c4c:	1080060b 	ldhu	r2,24(r2)
    2c50:	10803c04 	addi	r2,r2,240
    2c54:	10bfffcc 	andi	r2,r2,65535
    2c58:	1809883a 	mov	r4,r3
    2c5c:	100b883a 	mov	r5,r2
    2c60:	0009fa40 	call	9fa4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    2c64:	e0bffd17 	ldw	r2,-12(fp)
    2c68:	10c00117 	ldw	r3,4(r2)
    2c6c:	e0bffd17 	ldw	r2,-12(fp)
    2c70:	10800417 	ldw	r2,16(r2)
    2c74:	e13fff17 	ldw	r4,-4(fp)
    2c78:	d9000015 	stw	r4,0(sp)
    2c7c:	1809883a 	mov	r4,r3
    2c80:	100b883a 	mov	r5,r2
    2c84:	018000f4 	movhi	r6,3
    2c88:	31932a04 	addi	r6,r6,19624
    2c8c:	01c010c4 	movi	r7,67
    2c90:	00151740 	call	15174 <udp_sendto_if>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
    2c94:	e13ffd17 	ldw	r4,-12(fp)
    2c98:	0004b6c0 	call	4b6c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    2c9c:	e0bffd17 	ldw	r2,-12(fp)
    2ca0:	10800343 	ldbu	r2,13(r2)
    2ca4:	10800044 	addi	r2,r2,1
    2ca8:	1007883a 	mov	r3,r2
    2cac:	e0bffd17 	ldw	r2,-12(fp)
    2cb0:	10c00345 	stb	r3,13(r2)
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
    2cb4:	e0bffd17 	ldw	r2,-12(fp)
    2cb8:	10800343 	ldbu	r2,13(r2)
    2cbc:	10803fcc 	andi	r2,r2,255
    2cc0:	108001a8 	cmpgeui	r2,r2,6
    2cc4:	1000061e 	bne	r2,zero,2ce0 <dhcp_discover+0x164>
    2cc8:	e0bffd17 	ldw	r2,-12(fp)
    2ccc:	10800343 	ldbu	r2,13(r2)
    2cd0:	10803fcc 	andi	r2,r2,255
    2cd4:	00c0fa04 	movi	r3,1000
    2cd8:	1884983a 	sll	r2,r3,r2
    2cdc:	00000106 	br	2ce4 <dhcp_discover+0x168>
    2ce0:	00ba9804 	movi	r2,-5536
    2ce4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    2ce8:	e0bffe8b 	ldhu	r2,-6(fp)
    2cec:	10c07cc4 	addi	r3,r2,499
    2cf0:	00807d04 	movi	r2,500
    2cf4:	1885283a 	div	r2,r3,r2
    2cf8:	1007883a 	mov	r3,r2
    2cfc:	e0bffd17 	ldw	r2,-12(fp)
    2d00:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
    2d04:	e0bffe03 	ldbu	r2,-8(fp)
}
    2d08:	e037883a 	mov	sp,fp
    2d0c:	dfc00117 	ldw	ra,4(sp)
    2d10:	df000017 	ldw	fp,0(sp)
    2d14:	dec00204 	addi	sp,sp,8
    2d18:	f800283a 	ret

00002d1c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
    2d1c:	defff804 	addi	sp,sp,-32
    2d20:	dfc00715 	stw	ra,28(sp)
    2d24:	df000615 	stw	fp,24(sp)
    2d28:	df000604 	addi	fp,sp,24
    2d2c:	e13fff15 	stw	r4,-4(fp)
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
    2d30:	e0bfff17 	ldw	r2,-4(fp)
    2d34:	1000091e 	bne	r2,zero,2d5c <dhcp_bind+0x40>
    2d38:	010000f4 	movhi	r4,3
    2d3c:	213a8404 	addi	r4,r4,-5616
    2d40:	014000f4 	movhi	r5,3
    2d44:	297ab004 	addi	r5,r5,-5440
    2d48:	0180e904 	movi	r6,932
    2d4c:	01c000f4 	movhi	r7,3
    2d50:	39fa9204 	addi	r7,r7,-5560
    2d54:	0017c440 	call	17c44 <printf>
    2d58:	003fff06 	br	2d58 <dhcp_bind+0x3c>
  dhcp = netif->dhcp;
    2d5c:	e0bfff17 	ldw	r2,-4(fp)
    2d60:	10800817 	ldw	r2,32(r2)
    2d64:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
    2d68:	e0bffb17 	ldw	r2,-20(fp)
    2d6c:	1000091e 	bne	r2,zero,2d94 <dhcp_bind+0x78>
    2d70:	010000f4 	movhi	r4,3
    2d74:	213a8404 	addi	r4,r4,-5616
    2d78:	014000f4 	movhi	r5,3
    2d7c:	297ab704 	addi	r5,r5,-5412
    2d80:	0180e984 	movi	r6,934
    2d84:	01c000f4 	movhi	r7,3
    2d88:	39fa9204 	addi	r7,r7,-5560
    2d8c:	0017c440 	call	17c44 <printf>
    2d90:	003fff06 	br	2d90 <dhcp_bind+0x74>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
    2d94:	e0bffb17 	ldw	r2,-20(fp)
    2d98:	10800d17 	ldw	r2,52(r2)
    2d9c:	10bfffe0 	cmpeqi	r2,r2,-1
    2da0:	1000161e 	bne	r2,zero,2dfc <dhcp_bind+0xe0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
    2da4:	e0bffb17 	ldw	r2,-20(fp)
    2da8:	10800d17 	ldw	r2,52(r2)
    2dac:	10c00784 	addi	r3,r2,30
    2db0:	00800f04 	movi	r2,60
    2db4:	1885203a 	divu	r2,r3,r2
    2db8:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
    2dbc:	e0bffa17 	ldw	r2,-24(fp)
    2dc0:	00ffffd4 	movui	r3,65535
    2dc4:	1880022e 	bgeu	r3,r2,2dd0 <dhcp_bind+0xb4>
      timeout = 0xffff;
    2dc8:	00bfffd4 	movui	r2,65535
    2dcc:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t1_timeout = (u16_t)timeout;
    2dd0:	e0bffa17 	ldw	r2,-24(fp)
    2dd4:	1007883a 	mov	r3,r2
    2dd8:	e0bffb17 	ldw	r2,-20(fp)
    2ddc:	10c0070d 	sth	r3,28(r2)
    if (dhcp->t1_timeout == 0) {
    2de0:	e0bffb17 	ldw	r2,-20(fp)
    2de4:	1080070b 	ldhu	r2,28(r2)
    2de8:	10bfffcc 	andi	r2,r2,65535
    2dec:	1000031e 	bne	r2,zero,2dfc <dhcp_bind+0xe0>
      dhcp->t1_timeout = 1;
    2df0:	e0bffb17 	ldw	r2,-20(fp)
    2df4:	00c00044 	movi	r3,1
    2df8:	10c0070d 	sth	r3,28(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
    2dfc:	e0bffb17 	ldw	r2,-20(fp)
    2e00:	10800e17 	ldw	r2,56(r2)
    2e04:	10bfffe0 	cmpeqi	r2,r2,-1
    2e08:	1000161e 	bne	r2,zero,2e64 <dhcp_bind+0x148>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
    2e0c:	e0bffb17 	ldw	r2,-20(fp)
    2e10:	10800e17 	ldw	r2,56(r2)
    2e14:	10c00784 	addi	r3,r2,30
    2e18:	00800f04 	movi	r2,60
    2e1c:	1885203a 	divu	r2,r3,r2
    2e20:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
    2e24:	e0bffa17 	ldw	r2,-24(fp)
    2e28:	00ffffd4 	movui	r3,65535
    2e2c:	1880022e 	bgeu	r3,r2,2e38 <dhcp_bind+0x11c>
      timeout = 0xffff;
    2e30:	00bfffd4 	movui	r2,65535
    2e34:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t2_timeout = (u16_t)timeout;
    2e38:	e0bffa17 	ldw	r2,-24(fp)
    2e3c:	1007883a 	mov	r3,r2
    2e40:	e0bffb17 	ldw	r2,-20(fp)
    2e44:	10c0078d 	sth	r3,30(r2)
    if (dhcp->t2_timeout == 0) {
    2e48:	e0bffb17 	ldw	r2,-20(fp)
    2e4c:	1080078b 	ldhu	r2,30(r2)
    2e50:	10bfffcc 	andi	r2,r2,65535
    2e54:	1000031e 	bne	r2,zero,2e64 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
    2e58:	e0bffb17 	ldw	r2,-20(fp)
    2e5c:	00c00044 	movi	r3,1
    2e60:	10c0078d 	sth	r3,30(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
    2e64:	e0bffb17 	ldw	r2,-20(fp)
    2e68:	10c0070b 	ldhu	r3,28(r2)
    2e6c:	e0bffb17 	ldw	r2,-20(fp)
    2e70:	1080078b 	ldhu	r2,30(r2)
    2e74:	18ffffcc 	andi	r3,r3,65535
    2e78:	10bfffcc 	andi	r2,r2,65535
    2e7c:	18800636 	bltu	r3,r2,2e98 <dhcp_bind+0x17c>
    2e80:	e0bffb17 	ldw	r2,-20(fp)
    2e84:	1080078b 	ldhu	r2,30(r2)
    2e88:	10bfffcc 	andi	r2,r2,65535
    2e8c:	10000226 	beq	r2,zero,2e98 <dhcp_bind+0x17c>
    dhcp->t1_timeout = 0;
    2e90:	e0bffb17 	ldw	r2,-20(fp)
    2e94:	1000070d 	sth	zero,28(r2)
  }

  if (dhcp->subnet_mask_given) {
    2e98:	e0bffb17 	ldw	r2,-20(fp)
    2e9c:	10800383 	ldbu	r2,14(r2)
    2ea0:	10803fcc 	andi	r2,r2,255
    2ea4:	10000426 	beq	r2,zero,2eb8 <dhcp_bind+0x19c>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
    2ea8:	e0bffb17 	ldw	r2,-20(fp)
    2eac:	10800a17 	ldw	r2,40(r2)
    2eb0:	e0bffd15 	stw	r2,-12(fp)
    2eb4:	00001506 	br	2f0c <dhcp_bind+0x1f0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
    2eb8:	e0bffb17 	ldw	r2,-20(fp)
    2ebc:	10800904 	addi	r2,r2,36
    2ec0:	10800003 	ldbu	r2,0(r2)
    2ec4:	e0bffc05 	stb	r2,-16(fp)
    if (first_octet <= 127) {
    2ec8:	e0bffc03 	ldbu	r2,-16(fp)
    2ecc:	10803fcc 	andi	r2,r2,255
    2ed0:	1080201c 	xori	r2,r2,128
    2ed4:	10bfe004 	addi	r2,r2,-128
    2ed8:	10000316 	blt	r2,zero,2ee8 <dhcp_bind+0x1cc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
    2edc:	00803fc4 	movi	r2,255
    2ee0:	e0bffd15 	stw	r2,-12(fp)
    2ee4:	00000906 	br	2f0c <dhcp_bind+0x1f0>
    } else if (first_octet >= 192) {
    2ee8:	e0bffc03 	ldbu	r2,-16(fp)
    2eec:	10803030 	cmpltui	r2,r2,192
    2ef0:	1000041e 	bne	r2,zero,2f04 <dhcp_bind+0x1e8>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
    2ef4:	00804034 	movhi	r2,256
    2ef8:	10bfffc4 	addi	r2,r2,-1
    2efc:	e0bffd15 	stw	r2,-12(fp)
    2f00:	00000206 	br	2f0c <dhcp_bind+0x1f0>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
    2f04:	00bfffd4 	movui	r2,65535
    2f08:	e0bffd15 	stw	r2,-12(fp)
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
    2f0c:	e0bffb17 	ldw	r2,-20(fp)
    2f10:	10800b17 	ldw	r2,44(r2)
    2f14:	e0bffe15 	stw	r2,-8(fp)
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
    2f18:	e0bffe17 	ldw	r2,-8(fp)
    2f1c:	1000081e 	bne	r2,zero,2f40 <dhcp_bind+0x224>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
    2f20:	e0bffb17 	ldw	r2,-20(fp)
    2f24:	10c00917 	ldw	r3,36(r2)
    2f28:	e0bffd17 	ldw	r2,-12(fp)
    2f2c:	1884703a 	and	r2,r3,r2
    2f30:	e0bffe15 	stw	r2,-8(fp)
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
    2f34:	e0bffe17 	ldw	r2,-8(fp)
    2f38:	10804034 	orhi	r2,r2,256
    2f3c:	e0bffe15 	stw	r2,-8(fp)
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
    2f40:	e0bffb17 	ldw	r2,-20(fp)
    2f44:	10800904 	addi	r2,r2,36
    2f48:	e13fff17 	ldw	r4,-4(fp)
    2f4c:	100b883a 	mov	r5,r2
    2f50:	00095e80 	call	95e8 <netif_set_ipaddr>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
    2f54:	e0bffd04 	addi	r2,fp,-12
    2f58:	e13fff17 	ldw	r4,-4(fp)
    2f5c:	100b883a 	mov	r5,r2
    2f60:	00097600 	call	9760 <netif_set_netmask>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
    2f64:	e0bffe04 	addi	r2,fp,-8
    2f68:	e13fff17 	ldw	r4,-4(fp)
    2f6c:	100b883a 	mov	r5,r2
    2f70:	000971c0 	call	971c <netif_set_gw>
  /* bring the interface up */
  netif_set_up(netif);
    2f74:	e13fff17 	ldw	r4,-4(fp)
    2f78:	00097cc0 	call	97cc <netif_set_up>
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
    2f7c:	e13ffb17 	ldw	r4,-20(fp)
    2f80:	01400284 	movi	r5,10
    2f84:	000366c0 	call	366c <dhcp_set_state>
}
    2f88:	e037883a 	mov	sp,fp
    2f8c:	dfc00117 	ldw	ra,4(sp)
    2f90:	df000017 	ldw	fp,0(sp)
    2f94:	dec00204 	addi	sp,sp,8
    2f98:	f800283a 	ret

00002f9c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
    2f9c:	defffa04 	addi	sp,sp,-24
    2fa0:	dfc00515 	stw	ra,20(sp)
    2fa4:	df000415 	stw	fp,16(sp)
    2fa8:	df000404 	addi	fp,sp,16
    2fac:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    2fb0:	e0bfff17 	ldw	r2,-4(fp)
    2fb4:	10800817 	ldw	r2,32(r2)
    2fb8:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
    2fbc:	e13ffd17 	ldw	r4,-12(fp)
    2fc0:	01400144 	movi	r5,5
    2fc4:	000366c0 	call	366c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    2fc8:	e13fff17 	ldw	r4,-4(fp)
    2fcc:	e17ffd17 	ldw	r5,-12(fp)
    2fd0:	018000c4 	movi	r6,3
    2fd4:	00046980 	call	4698 <dhcp_create_msg>
    2fd8:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    2fdc:	e0bffe07 	ldb	r2,-8(fp)
    2fe0:	1000231e 	bne	r2,zero,3070 <dhcp_renew+0xd4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    2fe4:	e13ffd17 	ldw	r4,-12(fp)
    2fe8:	01400e44 	movi	r5,57
    2fec:	01800084 	movi	r6,2
    2ff0:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    2ff4:	e0bfff17 	ldw	r2,-4(fp)
    2ff8:	1080090b 	ldhu	r2,36(r2)
    2ffc:	10bfffcc 	andi	r2,r2,65535
    3000:	e13ffd17 	ldw	r4,-12(fp)
    3004:	100b883a 	mov	r5,r2
    3008:	00038440 	call	3844 <dhcp_option_short>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
    300c:	e13ffd17 	ldw	r4,-12(fp)
    3010:	0004c4c0 	call	4c4c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    3014:	e0bffd17 	ldw	r2,-12(fp)
    3018:	10c00417 	ldw	r3,16(r2)
    301c:	e0bffd17 	ldw	r2,-12(fp)
    3020:	1080060b 	ldhu	r2,24(r2)
    3024:	10803c04 	addi	r2,r2,240
    3028:	10bfffcc 	andi	r2,r2,65535
    302c:	1809883a 	mov	r4,r3
    3030:	100b883a 	mov	r5,r2
    3034:	0009fa40 	call	9fa4 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
    3038:	e0bffd17 	ldw	r2,-12(fp)
    303c:	11000117 	ldw	r4,4(r2)
    3040:	e0bffd17 	ldw	r2,-12(fp)
    3044:	10c00417 	ldw	r3,16(r2)
    3048:	e0bffd17 	ldw	r2,-12(fp)
    304c:	10800804 	addi	r2,r2,32
    3050:	e17fff17 	ldw	r5,-4(fp)
    3054:	d9400015 	stw	r5,0(sp)
    3058:	180b883a 	mov	r5,r3
    305c:	100d883a 	mov	r6,r2
    3060:	01c010c4 	movi	r7,67
    3064:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
    3068:	e13ffd17 	ldw	r4,-12(fp)
    306c:	0004b6c0 	call	4b6c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    3070:	e0bffd17 	ldw	r2,-12(fp)
    3074:	10800343 	ldbu	r2,13(r2)
    3078:	10800044 	addi	r2,r2,1
    307c:	1007883a 	mov	r3,r2
    3080:	e0bffd17 	ldw	r2,-12(fp)
    3084:	10c00345 	stb	r3,13(r2)
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
    3088:	e0bffd17 	ldw	r2,-12(fp)
    308c:	10800343 	ldbu	r2,13(r2)
    3090:	10803fcc 	andi	r2,r2,255
    3094:	108002a8 	cmpgeui	r2,r2,10
    3098:	1000051e 	bne	r2,zero,30b0 <dhcp_renew+0x114>
    309c:	e0bffd17 	ldw	r2,-12(fp)
    30a0:	10800343 	ldbu	r2,13(r2)
    30a4:	10803fcc 	andi	r2,r2,255
    30a8:	1081f424 	muli	r2,r2,2000
    30ac:	00000106 	br	30b4 <dhcp_renew+0x118>
    30b0:	00938804 	movi	r2,20000
    30b4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    30b8:	e0bffe8b 	ldhu	r2,-6(fp)
    30bc:	10c07cc4 	addi	r3,r2,499
    30c0:	00807d04 	movi	r2,500
    30c4:	1885283a 	div	r2,r3,r2
    30c8:	1007883a 	mov	r3,r2
    30cc:	e0bffd17 	ldw	r2,-12(fp)
    30d0:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
    30d4:	e0bffe03 	ldbu	r2,-8(fp)
}
    30d8:	e037883a 	mov	sp,fp
    30dc:	dfc00117 	ldw	ra,4(sp)
    30e0:	df000017 	ldw	fp,0(sp)
    30e4:	dec00204 	addi	sp,sp,8
    30e8:	f800283a 	ret

000030ec <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
    30ec:	defffa04 	addi	sp,sp,-24
    30f0:	dfc00515 	stw	ra,20(sp)
    30f4:	df000415 	stw	fp,16(sp)
    30f8:	df000404 	addi	fp,sp,16
    30fc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    3100:	e0bfff17 	ldw	r2,-4(fp)
    3104:	10800817 	ldw	r2,32(r2)
    3108:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
    310c:	e13ffd17 	ldw	r4,-12(fp)
    3110:	01400104 	movi	r5,4
    3114:	000366c0 	call	366c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    3118:	e13fff17 	ldw	r4,-4(fp)
    311c:	e17ffd17 	ldw	r5,-12(fp)
    3120:	018000c4 	movi	r6,3
    3124:	00046980 	call	4698 <dhcp_create_msg>
    3128:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    312c:	e0bffe07 	ldb	r2,-8(fp)
    3130:	1000231e 	bne	r2,zero,31c0 <dhcp_rebind+0xd4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    3134:	e13ffd17 	ldw	r4,-12(fp)
    3138:	01400e44 	movi	r5,57
    313c:	01800084 	movi	r6,2
    3140:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    3144:	e0bfff17 	ldw	r2,-4(fp)
    3148:	1080090b 	ldhu	r2,36(r2)
    314c:	10bfffcc 	andi	r2,r2,65535
    3150:	e13ffd17 	ldw	r4,-12(fp)
    3154:	100b883a 	mov	r5,r2
    3158:	00038440 	call	3844 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
    315c:	e13ffd17 	ldw	r4,-12(fp)
    3160:	0004c4c0 	call	4c4c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    3164:	e0bffd17 	ldw	r2,-12(fp)
    3168:	10c00417 	ldw	r3,16(r2)
    316c:	e0bffd17 	ldw	r2,-12(fp)
    3170:	1080060b 	ldhu	r2,24(r2)
    3174:	10803c04 	addi	r2,r2,240
    3178:	10bfffcc 	andi	r2,r2,65535
    317c:	1809883a 	mov	r4,r3
    3180:	100b883a 	mov	r5,r2
    3184:	0009fa40 	call	9fa4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    3188:	e0bffd17 	ldw	r2,-12(fp)
    318c:	10c00117 	ldw	r3,4(r2)
    3190:	e0bffd17 	ldw	r2,-12(fp)
    3194:	10800417 	ldw	r2,16(r2)
    3198:	e13fff17 	ldw	r4,-4(fp)
    319c:	d9000015 	stw	r4,0(sp)
    31a0:	1809883a 	mov	r4,r3
    31a4:	100b883a 	mov	r5,r2
    31a8:	018000f4 	movhi	r6,3
    31ac:	31932a04 	addi	r6,r6,19624
    31b0:	01c010c4 	movi	r7,67
    31b4:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
    31b8:	e13ffd17 	ldw	r4,-12(fp)
    31bc:	0004b6c0 	call	4b6c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    31c0:	e0bffd17 	ldw	r2,-12(fp)
    31c4:	10800343 	ldbu	r2,13(r2)
    31c8:	10800044 	addi	r2,r2,1
    31cc:	1007883a 	mov	r3,r2
    31d0:	e0bffd17 	ldw	r2,-12(fp)
    31d4:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    31d8:	e0bffd17 	ldw	r2,-12(fp)
    31dc:	10800343 	ldbu	r2,13(r2)
    31e0:	10803fcc 	andi	r2,r2,255
    31e4:	108002a8 	cmpgeui	r2,r2,10
    31e8:	1000051e 	bne	r2,zero,3200 <dhcp_rebind+0x114>
    31ec:	e0bffd17 	ldw	r2,-12(fp)
    31f0:	10800343 	ldbu	r2,13(r2)
    31f4:	10803fcc 	andi	r2,r2,255
    31f8:	1080fa24 	muli	r2,r2,1000
    31fc:	00000106 	br	3204 <dhcp_rebind+0x118>
    3200:	0089c404 	movi	r2,10000
    3204:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    3208:	e0bffe8b 	ldhu	r2,-6(fp)
    320c:	10c07cc4 	addi	r3,r2,499
    3210:	00807d04 	movi	r2,500
    3214:	1885283a 	div	r2,r3,r2
    3218:	1007883a 	mov	r3,r2
    321c:	e0bffd17 	ldw	r2,-12(fp)
    3220:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
    3224:	e0bffe03 	ldbu	r2,-8(fp)
}
    3228:	e037883a 	mov	sp,fp
    322c:	dfc00117 	ldw	ra,4(sp)
    3230:	df000017 	ldw	fp,0(sp)
    3234:	dec00204 	addi	sp,sp,8
    3238:	f800283a 	ret

0000323c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
    323c:	defffa04 	addi	sp,sp,-24
    3240:	dfc00515 	stw	ra,20(sp)
    3244:	df000415 	stw	fp,16(sp)
    3248:	df000404 	addi	fp,sp,16
    324c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    3250:	e0bfff17 	ldw	r2,-4(fp)
    3254:	10800817 	ldw	r2,32(r2)
    3258:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
    325c:	e13ffd17 	ldw	r4,-12(fp)
    3260:	014000c4 	movi	r5,3
    3264:	000366c0 	call	366c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    3268:	e13fff17 	ldw	r4,-4(fp)
    326c:	e17ffd17 	ldw	r5,-12(fp)
    3270:	018000c4 	movi	r6,3
    3274:	00046980 	call	4698 <dhcp_create_msg>
    3278:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    327c:	e0bffe07 	ldb	r2,-8(fp)
    3280:	1000381e 	bne	r2,zero,3364 <dhcp_reboot+0x128>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    3284:	e13ffd17 	ldw	r4,-12(fp)
    3288:	01400e44 	movi	r5,57
    328c:	01800084 	movi	r6,2
    3290:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_short(dhcp, 576);
    3294:	e13ffd17 	ldw	r4,-12(fp)
    3298:	01409004 	movi	r5,576
    329c:	00038440 	call	3844 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
    32a0:	e13ffd17 	ldw	r4,-12(fp)
    32a4:	01400c84 	movi	r5,50
    32a8:	01800104 	movi	r6,4
    32ac:	00036c40 	call	36c4 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
    32b0:	e0bffd17 	ldw	r2,-12(fp)
    32b4:	10800917 	ldw	r2,36(r2)
    32b8:	1006d63a 	srli	r3,r2,24
    32bc:	e0bffd17 	ldw	r2,-12(fp)
    32c0:	10800917 	ldw	r2,36(r2)
    32c4:	1004d23a 	srli	r2,r2,8
    32c8:	10bfc00c 	andi	r2,r2,65280
    32cc:	1886b03a 	or	r3,r3,r2
    32d0:	e0bffd17 	ldw	r2,-12(fp)
    32d4:	10800917 	ldw	r2,36(r2)
    32d8:	10bfc00c 	andi	r2,r2,65280
    32dc:	1004923a 	slli	r2,r2,8
    32e0:	1886b03a 	or	r3,r3,r2
    32e4:	e0bffd17 	ldw	r2,-12(fp)
    32e8:	10800917 	ldw	r2,36(r2)
    32ec:	1004963a 	slli	r2,r2,24
    32f0:	1884b03a 	or	r2,r3,r2
    32f4:	e13ffd17 	ldw	r4,-12(fp)
    32f8:	100b883a 	mov	r5,r2
    32fc:	000391c0 	call	391c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
    3300:	e13ffd17 	ldw	r4,-12(fp)
    3304:	0004c4c0 	call	4c4c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    3308:	e0bffd17 	ldw	r2,-12(fp)
    330c:	10c00417 	ldw	r3,16(r2)
    3310:	e0bffd17 	ldw	r2,-12(fp)
    3314:	1080060b 	ldhu	r2,24(r2)
    3318:	10803c04 	addi	r2,r2,240
    331c:	10bfffcc 	andi	r2,r2,65535
    3320:	1809883a 	mov	r4,r3
    3324:	100b883a 	mov	r5,r2
    3328:	0009fa40 	call	9fa4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    332c:	e0bffd17 	ldw	r2,-12(fp)
    3330:	10c00117 	ldw	r3,4(r2)
    3334:	e0bffd17 	ldw	r2,-12(fp)
    3338:	10800417 	ldw	r2,16(r2)
    333c:	e13fff17 	ldw	r4,-4(fp)
    3340:	d9000015 	stw	r4,0(sp)
    3344:	1809883a 	mov	r4,r3
    3348:	100b883a 	mov	r5,r2
    334c:	018000f4 	movhi	r6,3
    3350:	31932a04 	addi	r6,r6,19624
    3354:	01c010c4 	movi	r7,67
    3358:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
    335c:	e13ffd17 	ldw	r4,-12(fp)
    3360:	0004b6c0 	call	4b6c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    3364:	e0bffd17 	ldw	r2,-12(fp)
    3368:	10800343 	ldbu	r2,13(r2)
    336c:	10800044 	addi	r2,r2,1
    3370:	1007883a 	mov	r3,r2
    3374:	e0bffd17 	ldw	r2,-12(fp)
    3378:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    337c:	e0bffd17 	ldw	r2,-12(fp)
    3380:	10800343 	ldbu	r2,13(r2)
    3384:	10803fcc 	andi	r2,r2,255
    3388:	108002a8 	cmpgeui	r2,r2,10
    338c:	1000051e 	bne	r2,zero,33a4 <dhcp_reboot+0x168>
    3390:	e0bffd17 	ldw	r2,-12(fp)
    3394:	10800343 	ldbu	r2,13(r2)
    3398:	10803fcc 	andi	r2,r2,255
    339c:	1080fa24 	muli	r2,r2,1000
    33a0:	00000106 	br	33a8 <dhcp_reboot+0x16c>
    33a4:	0089c404 	movi	r2,10000
    33a8:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    33ac:	e0bffe8b 	ldhu	r2,-6(fp)
    33b0:	10c07cc4 	addi	r3,r2,499
    33b4:	00807d04 	movi	r2,500
    33b8:	1885283a 	div	r2,r3,r2
    33bc:	1007883a 	mov	r3,r2
    33c0:	e0bffd17 	ldw	r2,-12(fp)
    33c4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
    33c8:	e0bffe03 	ldbu	r2,-8(fp)
}
    33cc:	e037883a 	mov	sp,fp
    33d0:	dfc00117 	ldw	ra,4(sp)
    33d4:	df000017 	ldw	fp,0(sp)
    33d8:	dec00204 	addi	sp,sp,8
    33dc:	f800283a 	ret

000033e0 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
    33e0:	defffa04 	addi	sp,sp,-24
    33e4:	dfc00515 	stw	ra,20(sp)
    33e8:	df000415 	stw	fp,16(sp)
    33ec:	df000404 	addi	fp,sp,16
    33f0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
    33f4:	e0bfff17 	ldw	r2,-4(fp)
    33f8:	10800817 	ldw	r2,32(r2)
    33fc:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
    3400:	e13ffd17 	ldw	r4,-12(fp)
    3404:	000b883a 	mov	r5,zero
    3408:	000366c0 	call	366c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
    340c:	e0bffd17 	ldw	r2,-12(fp)
    3410:	10000815 	stw	zero,32(r2)
  ip_addr_set_zero(&dhcp->offered_ip_addr);
    3414:	e0bffd17 	ldw	r2,-12(fp)
    3418:	10000915 	stw	zero,36(r2)
  ip_addr_set_zero(&dhcp->offered_sn_mask);
    341c:	e0bffd17 	ldw	r2,-12(fp)
    3420:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
    3424:	e0bffd17 	ldw	r2,-12(fp)
    3428:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
    342c:	e0bffd17 	ldw	r2,-12(fp)
    3430:	10000e15 	stw	zero,56(r2)
    3434:	e0bffd17 	ldw	r2,-12(fp)
    3438:	10c00e17 	ldw	r3,56(r2)
    343c:	e0bffd17 	ldw	r2,-12(fp)
    3440:	10c00d15 	stw	r3,52(r2)
    3444:	e0bffd17 	ldw	r2,-12(fp)
    3448:	10c00d17 	ldw	r3,52(r2)
    344c:	e0bffd17 	ldw	r2,-12(fp)
    3450:	10c00c15 	stw	r3,48(r2)
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
    3454:	e13fff17 	ldw	r4,-4(fp)
    3458:	e17ffd17 	ldw	r5,-12(fp)
    345c:	018001c4 	movi	r6,7
    3460:	00046980 	call	4698 <dhcp_create_msg>
    3464:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
    3468:	e0bffe07 	ldb	r2,-8(fp)
    346c:	1000191e 	bne	r2,zero,34d4 <dhcp_release+0xf4>
    dhcp_option_trailer(dhcp);
    3470:	e13ffd17 	ldw	r4,-12(fp)
    3474:	0004c4c0 	call	4c4c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    3478:	e0bffd17 	ldw	r2,-12(fp)
    347c:	10c00417 	ldw	r3,16(r2)
    3480:	e0bffd17 	ldw	r2,-12(fp)
    3484:	1080060b 	ldhu	r2,24(r2)
    3488:	10803c04 	addi	r2,r2,240
    348c:	10bfffcc 	andi	r2,r2,65535
    3490:	1809883a 	mov	r4,r3
    3494:	100b883a 	mov	r5,r2
    3498:	0009fa40 	call	9fa4 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
    349c:	e0bffd17 	ldw	r2,-12(fp)
    34a0:	11000117 	ldw	r4,4(r2)
    34a4:	e0bffd17 	ldw	r2,-12(fp)
    34a8:	10c00417 	ldw	r3,16(r2)
    34ac:	e0bffd17 	ldw	r2,-12(fp)
    34b0:	10800804 	addi	r2,r2,32
    34b4:	e17fff17 	ldw	r5,-4(fp)
    34b8:	d9400015 	stw	r5,0(sp)
    34bc:	180b883a 	mov	r5,r3
    34c0:	100d883a 	mov	r6,r2
    34c4:	01c010c4 	movi	r7,67
    34c8:	00151740 	call	15174 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
    34cc:	e13ffd17 	ldw	r4,-12(fp)
    34d0:	0004b6c0 	call	4b6c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	10800343 	ldbu	r2,13(r2)
    34dc:	10800044 	addi	r2,r2,1
    34e0:	1007883a 	mov	r3,r2
    34e4:	e0bffd17 	ldw	r2,-12(fp)
    34e8:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    34ec:	e0bffd17 	ldw	r2,-12(fp)
    34f0:	10800343 	ldbu	r2,13(r2)
    34f4:	10803fcc 	andi	r2,r2,255
    34f8:	108002a8 	cmpgeui	r2,r2,10
    34fc:	1000051e 	bne	r2,zero,3514 <dhcp_release+0x134>
    3500:	e0bffd17 	ldw	r2,-12(fp)
    3504:	10800343 	ldbu	r2,13(r2)
    3508:	10803fcc 	andi	r2,r2,255
    350c:	1080fa24 	muli	r2,r2,1000
    3510:	00000106 	br	3518 <dhcp_release+0x138>
    3514:	0089c404 	movi	r2,10000
    3518:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    351c:	e0bffe8b 	ldhu	r2,-6(fp)
    3520:	10c07cc4 	addi	r3,r2,499
    3524:	00807d04 	movi	r2,500
    3528:	1885283a 	div	r2,r3,r2
    352c:	1007883a 	mov	r3,r2
    3530:	e0bffd17 	ldw	r2,-12(fp)
    3534:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
    3538:	e13fff17 	ldw	r4,-4(fp)
    353c:	000985c0 	call	985c <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
    3540:	e13fff17 	ldw	r4,-4(fp)
    3544:	014000f4 	movhi	r5,3
    3548:	29532904 	addi	r5,r5,19620
    354c:	00095e80 	call	95e8 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
    3550:	e13fff17 	ldw	r4,-4(fp)
    3554:	014000f4 	movhi	r5,3
    3558:	29532904 	addi	r5,r5,19620
    355c:	000971c0 	call	971c <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY);
    3560:	e13fff17 	ldw	r4,-4(fp)
    3564:	014000f4 	movhi	r5,3
    3568:	29532904 	addi	r5,r5,19620
    356c:	00097600 	call	9760 <netif_set_netmask>
  
  return result;
    3570:	e0bffe03 	ldbu	r2,-8(fp)
}
    3574:	e037883a 	mov	sp,fp
    3578:	dfc00117 	ldw	ra,4(sp)
    357c:	df000017 	ldw	fp,0(sp)
    3580:	dec00204 	addi	sp,sp,8
    3584:	f800283a 	ret

00003588 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
    3588:	defffc04 	addi	sp,sp,-16
    358c:	dfc00315 	stw	ra,12(sp)
    3590:	df000215 	stw	fp,8(sp)
    3594:	df000204 	addi	fp,sp,8
    3598:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
    359c:	e0bfff17 	ldw	r2,-4(fp)
    35a0:	1000091e 	bne	r2,zero,35c8 <dhcp_stop+0x40>
    35a4:	010000f4 	movhi	r4,3
    35a8:	213a8404 	addi	r4,r4,-5616
    35ac:	014000f4 	movhi	r5,3
    35b0:	297abd04 	addi	r5,r5,-5388
    35b4:	018131c4 	movi	r6,1223
    35b8:	01c000f4 	movhi	r7,3
    35bc:	39fa9204 	addi	r7,r7,-5560
    35c0:	0017c440 	call	17c44 <printf>
    35c4:	003fff06 	br	35c4 <dhcp_stop+0x3c>
  dhcp = netif->dhcp;
    35c8:	e0bfff17 	ldw	r2,-4(fp)
    35cc:	10800817 	ldw	r2,32(r2)
    35d0:	e0bffe15 	stw	r2,-8(fp)
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
    35d4:	e0bfff17 	ldw	r2,-4(fp)
    35d8:	10c00b43 	ldbu	r3,45(r2)
    35dc:	00bffdc4 	movi	r2,-9
    35e0:	1884703a 	and	r2,r3,r2
    35e4:	1007883a 	mov	r3,r2
    35e8:	e0bfff17 	ldw	r2,-4(fp)
    35ec:	10c00b45 	stb	r3,45(r2)

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
    35f0:	e0bffe17 	ldw	r2,-8(fp)
    35f4:	10001826 	beq	r2,zero,3658 <dhcp_stop+0xd0>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
    35f8:	e0bffe17 	ldw	r2,-8(fp)
    35fc:	10800117 	ldw	r2,4(r2)
    3600:	10000626 	beq	r2,zero,361c <dhcp_stop+0x94>
      udp_remove(dhcp->pcb);
    3604:	e0bffe17 	ldw	r2,-8(fp)
    3608:	10800117 	ldw	r2,4(r2)
    360c:	1009883a 	mov	r4,r2
    3610:	00157540 	call	15754 <udp_remove>
      dhcp->pcb = NULL;
    3614:	e0bffe17 	ldw	r2,-8(fp)
    3618:	10000115 	stw	zero,4(r2)
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    361c:	e0bffe17 	ldw	r2,-8(fp)
    3620:	10800217 	ldw	r2,8(r2)
    3624:	10000926 	beq	r2,zero,364c <dhcp_stop+0xc4>
    3628:	010000f4 	movhi	r4,3
    362c:	213a8404 	addi	r4,r4,-5616
    3630:	014000f4 	movhi	r5,3
    3634:	297aab04 	addi	r5,r5,-5460
    3638:	01813684 	movi	r6,1242
    363c:	01c000f4 	movhi	r7,3
    3640:	39fa9204 	addi	r7,r7,-5560
    3644:	0017c440 	call	17c44 <printf>
    3648:	003fff06 	br	3648 <dhcp_stop+0xc0>
    dhcp_set_state(dhcp, DHCP_OFF);
    364c:	e13ffe17 	ldw	r4,-8(fp)
    3650:	000b883a 	mov	r5,zero
    3654:	000366c0 	call	366c <dhcp_set_state>
  }
}
    3658:	e037883a 	mov	sp,fp
    365c:	dfc00117 	ldw	ra,4(sp)
    3660:	df000017 	ldw	fp,0(sp)
    3664:	dec00204 	addi	sp,sp,8
    3668:	f800283a 	ret

0000366c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
    366c:	defffd04 	addi	sp,sp,-12
    3670:	df000215 	stw	fp,8(sp)
    3674:	df000204 	addi	fp,sp,8
    3678:	e13ffe15 	stw	r4,-8(fp)
    367c:	2805883a 	mov	r2,r5
    3680:	e0bfff05 	stb	r2,-4(fp)
  if (new_state != dhcp->state) {
    3684:	e0bffe17 	ldw	r2,-8(fp)
    3688:	10800303 	ldbu	r2,12(r2)
    368c:	10c03fcc 	andi	r3,r2,255
    3690:	e0bfff03 	ldbu	r2,-4(fp)
    3694:	18800726 	beq	r3,r2,36b4 <dhcp_set_state+0x48>
    dhcp->state = new_state;
    3698:	e0bffe17 	ldw	r2,-8(fp)
    369c:	e0ffff03 	ldbu	r3,-4(fp)
    36a0:	10c00305 	stb	r3,12(r2)
    dhcp->tries = 0;
    36a4:	e0bffe17 	ldw	r2,-8(fp)
    36a8:	10000345 	stb	zero,13(r2)
    dhcp->request_timeout = 0;
    36ac:	e0bffe17 	ldw	r2,-8(fp)
    36b0:	1000068d 	sth	zero,26(r2)
  }
}
    36b4:	e037883a 	mov	sp,fp
    36b8:	df000017 	ldw	fp,0(sp)
    36bc:	dec00104 	addi	sp,sp,4
    36c0:	f800283a 	ret

000036c4 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
    36c4:	defffb04 	addi	sp,sp,-20
    36c8:	dfc00415 	stw	ra,16(sp)
    36cc:	df000315 	stw	fp,12(sp)
    36d0:	df000304 	addi	fp,sp,12
    36d4:	e13ffd15 	stw	r4,-12(fp)
    36d8:	2807883a 	mov	r3,r5
    36dc:	3005883a 	mov	r2,r6
    36e0:	e0fffe05 	stb	r3,-8(fp)
    36e4:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
    36e8:	e0bffd17 	ldw	r2,-12(fp)
    36ec:	1080060b 	ldhu	r2,24(r2)
    36f0:	10ffffcc 	andi	r3,r2,65535
    36f4:	e0bfff03 	ldbu	r2,-4(fp)
    36f8:	1885883a 	add	r2,r3,r2
    36fc:	10800084 	addi	r2,r2,2
    3700:	10801170 	cmpltui	r2,r2,69
    3704:	1000091e 	bne	r2,zero,372c <dhcp_option+0x68>
    3708:	010000f4 	movhi	r4,3
    370c:	213a8404 	addi	r4,r4,-5616
    3710:	014000f4 	movhi	r5,3
    3714:	297ac404 	addi	r5,r5,-5360
    3718:	01813d84 	movi	r6,1270
    371c:	01c000f4 	movhi	r7,3
    3720:	39fa9204 	addi	r7,r7,-5560
    3724:	0017c440 	call	17c44 <printf>
    3728:	003fff06 	br	3728 <dhcp_option+0x64>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
    372c:	e0bffd17 	ldw	r2,-12(fp)
    3730:	11000517 	ldw	r4,20(r2)
    3734:	e0bffd17 	ldw	r2,-12(fp)
    3738:	1080060b 	ldhu	r2,24(r2)
    373c:	10ffffcc 	andi	r3,r2,65535
    3740:	20c7883a 	add	r3,r4,r3
    3744:	18c03c04 	addi	r3,r3,240
    3748:	e13ffe03 	ldbu	r4,-8(fp)
    374c:	19000005 	stb	r4,0(r3)
    3750:	10800044 	addi	r2,r2,1
    3754:	1007883a 	mov	r3,r2
    3758:	e0bffd17 	ldw	r2,-12(fp)
    375c:	10c0060d 	sth	r3,24(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
    3760:	e0bffd17 	ldw	r2,-12(fp)
    3764:	11000517 	ldw	r4,20(r2)
    3768:	e0bffd17 	ldw	r2,-12(fp)
    376c:	1080060b 	ldhu	r2,24(r2)
    3770:	10ffffcc 	andi	r3,r2,65535
    3774:	20c7883a 	add	r3,r4,r3
    3778:	18c03c04 	addi	r3,r3,240
    377c:	e13fff03 	ldbu	r4,-4(fp)
    3780:	19000005 	stb	r4,0(r3)
    3784:	10800044 	addi	r2,r2,1
    3788:	1007883a 	mov	r3,r2
    378c:	e0bffd17 	ldw	r2,-12(fp)
    3790:	10c0060d 	sth	r3,24(r2)
}
    3794:	e037883a 	mov	sp,fp
    3798:	dfc00117 	ldw	ra,4(sp)
    379c:	df000017 	ldw	fp,0(sp)
    37a0:	dec00204 	addi	sp,sp,8
    37a4:	f800283a 	ret

000037a8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
    37a8:	defffc04 	addi	sp,sp,-16
    37ac:	dfc00315 	stw	ra,12(sp)
    37b0:	df000215 	stw	fp,8(sp)
    37b4:	df000204 	addi	fp,sp,8
    37b8:	e13ffe15 	stw	r4,-8(fp)
    37bc:	2805883a 	mov	r2,r5
    37c0:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
    37c4:	e0bffe17 	ldw	r2,-8(fp)
    37c8:	1080060b 	ldhu	r2,24(r2)
    37cc:	10bfffcc 	andi	r2,r2,65535
    37d0:	10801130 	cmpltui	r2,r2,68
    37d4:	1000091e 	bne	r2,zero,37fc <dhcp_option_byte+0x54>
    37d8:	010000f4 	movhi	r4,3
    37dc:	213a8404 	addi	r4,r4,-5616
    37e0:	014000f4 	movhi	r5,3
    37e4:	297ad604 	addi	r5,r5,-5288
    37e8:	01814044 	movi	r6,1281
    37ec:	01c000f4 	movhi	r7,3
    37f0:	39fa9204 	addi	r7,r7,-5560
    37f4:	0017c440 	call	17c44 <printf>
    37f8:	003fff06 	br	37f8 <dhcp_option_byte+0x50>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
    37fc:	e0bffe17 	ldw	r2,-8(fp)
    3800:	11000517 	ldw	r4,20(r2)
    3804:	e0bffe17 	ldw	r2,-8(fp)
    3808:	1080060b 	ldhu	r2,24(r2)
    380c:	10ffffcc 	andi	r3,r2,65535
    3810:	20c7883a 	add	r3,r4,r3
    3814:	18c03c04 	addi	r3,r3,240
    3818:	e13fff03 	ldbu	r4,-4(fp)
    381c:	19000005 	stb	r4,0(r3)
    3820:	10800044 	addi	r2,r2,1
    3824:	1007883a 	mov	r3,r2
    3828:	e0bffe17 	ldw	r2,-8(fp)
    382c:	10c0060d 	sth	r3,24(r2)
}
    3830:	e037883a 	mov	sp,fp
    3834:	dfc00117 	ldw	ra,4(sp)
    3838:	df000017 	ldw	fp,0(sp)
    383c:	dec00204 	addi	sp,sp,8
    3840:	f800283a 	ret

00003844 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
    3844:	defffc04 	addi	sp,sp,-16
    3848:	dfc00315 	stw	ra,12(sp)
    384c:	df000215 	stw	fp,8(sp)
    3850:	df000204 	addi	fp,sp,8
    3854:	e13ffe15 	stw	r4,-8(fp)
    3858:	2805883a 	mov	r2,r5
    385c:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
    3860:	e0bffe17 	ldw	r2,-8(fp)
    3864:	1080060b 	ldhu	r2,24(r2)
    3868:	10bfffcc 	andi	r2,r2,65535
    386c:	10800084 	addi	r2,r2,2
    3870:	10801170 	cmpltui	r2,r2,69
    3874:	1000091e 	bne	r2,zero,389c <dhcp_option_short+0x58>
    3878:	010000f4 	movhi	r4,3
    387c:	213a8404 	addi	r4,r4,-5616
    3880:	014000f4 	movhi	r5,3
    3884:	297ae504 	addi	r5,r5,-5228
    3888:	01814204 	movi	r6,1288
    388c:	01c000f4 	movhi	r7,3
    3890:	39fa9204 	addi	r7,r7,-5560
    3894:	0017c440 	call	17c44 <printf>
    3898:	003fff06 	br	3898 <dhcp_option_short+0x54>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
    389c:	e0bffe17 	ldw	r2,-8(fp)
    38a0:	11400517 	ldw	r5,20(r2)
    38a4:	e0bffe17 	ldw	r2,-8(fp)
    38a8:	1080060b 	ldhu	r2,24(r2)
    38ac:	10ffffcc 	andi	r3,r2,65535
    38b0:	e13fff0b 	ldhu	r4,-4(fp)
    38b4:	2008d23a 	srli	r4,r4,8
    38b8:	28c7883a 	add	r3,r5,r3
    38bc:	18c03c04 	addi	r3,r3,240
    38c0:	19000005 	stb	r4,0(r3)
    38c4:	10800044 	addi	r2,r2,1
    38c8:	1007883a 	mov	r3,r2
    38cc:	e0bffe17 	ldw	r2,-8(fp)
    38d0:	10c0060d 	sth	r3,24(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
    38d4:	e0bffe17 	ldw	r2,-8(fp)
    38d8:	11400517 	ldw	r5,20(r2)
    38dc:	e0bffe17 	ldw	r2,-8(fp)
    38e0:	1080060b 	ldhu	r2,24(r2)
    38e4:	10ffffcc 	andi	r3,r2,65535
    38e8:	e13fff0b 	ldhu	r4,-4(fp)
    38ec:	28c7883a 	add	r3,r5,r3
    38f0:	18c03c04 	addi	r3,r3,240
    38f4:	19000005 	stb	r4,0(r3)
    38f8:	10800044 	addi	r2,r2,1
    38fc:	1007883a 	mov	r3,r2
    3900:	e0bffe17 	ldw	r2,-8(fp)
    3904:	10c0060d 	sth	r3,24(r2)
}
    3908:	e037883a 	mov	sp,fp
    390c:	dfc00117 	ldw	ra,4(sp)
    3910:	df000017 	ldw	fp,0(sp)
    3914:	dec00204 	addi	sp,sp,8
    3918:	f800283a 	ret

0000391c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
    391c:	defffc04 	addi	sp,sp,-16
    3920:	dfc00315 	stw	ra,12(sp)
    3924:	df000215 	stw	fp,8(sp)
    3928:	df000204 	addi	fp,sp,8
    392c:	e13ffe15 	stw	r4,-8(fp)
    3930:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
    3934:	e0bffe17 	ldw	r2,-8(fp)
    3938:	1080060b 	ldhu	r2,24(r2)
    393c:	10bfffcc 	andi	r2,r2,65535
    3940:	10800104 	addi	r2,r2,4
    3944:	10801170 	cmpltui	r2,r2,69
    3948:	1000091e 	bne	r2,zero,3970 <dhcp_option_long+0x54>
    394c:	010000f4 	movhi	r4,3
    3950:	213a8404 	addi	r4,r4,-5616
    3954:	014000f4 	movhi	r5,3
    3958:	297af604 	addi	r5,r5,-5160
    395c:	01814404 	movi	r6,1296
    3960:	01c000f4 	movhi	r7,3
    3964:	39fa9204 	addi	r7,r7,-5560
    3968:	0017c440 	call	17c44 <printf>
    396c:	003fff06 	br	396c <dhcp_option_long+0x50>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
    3970:	e0bffe17 	ldw	r2,-8(fp)
    3974:	11400517 	ldw	r5,20(r2)
    3978:	e0bffe17 	ldw	r2,-8(fp)
    397c:	1080060b 	ldhu	r2,24(r2)
    3980:	10ffffcc 	andi	r3,r2,65535
    3984:	e13fff17 	ldw	r4,-4(fp)
    3988:	2008d63a 	srli	r4,r4,24
    398c:	28c7883a 	add	r3,r5,r3
    3990:	18c03c04 	addi	r3,r3,240
    3994:	19000005 	stb	r4,0(r3)
    3998:	10800044 	addi	r2,r2,1
    399c:	1007883a 	mov	r3,r2
    39a0:	e0bffe17 	ldw	r2,-8(fp)
    39a4:	10c0060d 	sth	r3,24(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
    39a8:	e0bffe17 	ldw	r2,-8(fp)
    39ac:	11400517 	ldw	r5,20(r2)
    39b0:	e0bffe17 	ldw	r2,-8(fp)
    39b4:	1080060b 	ldhu	r2,24(r2)
    39b8:	10ffffcc 	andi	r3,r2,65535
    39bc:	e13fff17 	ldw	r4,-4(fp)
    39c0:	21003fec 	andhi	r4,r4,255
    39c4:	2008d43a 	srli	r4,r4,16
    39c8:	28c7883a 	add	r3,r5,r3
    39cc:	18c03c04 	addi	r3,r3,240
    39d0:	19000005 	stb	r4,0(r3)
    39d4:	10800044 	addi	r2,r2,1
    39d8:	1007883a 	mov	r3,r2
    39dc:	e0bffe17 	ldw	r2,-8(fp)
    39e0:	10c0060d 	sth	r3,24(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
    39e4:	e0bffe17 	ldw	r2,-8(fp)
    39e8:	11400517 	ldw	r5,20(r2)
    39ec:	e0bffe17 	ldw	r2,-8(fp)
    39f0:	1080060b 	ldhu	r2,24(r2)
    39f4:	10ffffcc 	andi	r3,r2,65535
    39f8:	e13fff17 	ldw	r4,-4(fp)
    39fc:	213fc00c 	andi	r4,r4,65280
    3a00:	2008d23a 	srli	r4,r4,8
    3a04:	28c7883a 	add	r3,r5,r3
    3a08:	18c03c04 	addi	r3,r3,240
    3a0c:	19000005 	stb	r4,0(r3)
    3a10:	10800044 	addi	r2,r2,1
    3a14:	1007883a 	mov	r3,r2
    3a18:	e0bffe17 	ldw	r2,-8(fp)
    3a1c:	10c0060d 	sth	r3,24(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
    3a20:	e0bffe17 	ldw	r2,-8(fp)
    3a24:	11400517 	ldw	r5,20(r2)
    3a28:	e0bffe17 	ldw	r2,-8(fp)
    3a2c:	1080060b 	ldhu	r2,24(r2)
    3a30:	10ffffcc 	andi	r3,r2,65535
    3a34:	e13fff17 	ldw	r4,-4(fp)
    3a38:	28c7883a 	add	r3,r5,r3
    3a3c:	18c03c04 	addi	r3,r3,240
    3a40:	19000005 	stb	r4,0(r3)
    3a44:	10800044 	addi	r2,r2,1
    3a48:	1007883a 	mov	r3,r2
    3a4c:	e0bffe17 	ldw	r2,-8(fp)
    3a50:	10c0060d 	sth	r3,24(r2)
}
    3a54:	e037883a 	mov	sp,fp
    3a58:	dfc00117 	ldw	ra,4(sp)
    3a5c:	df000017 	ldw	fp,0(sp)
    3a60:	dec00204 	addi	sp,sp,8
    3a64:	f800283a 	ret

00003a68 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
    3a68:	defff004 	addi	sp,sp,-64
    3a6c:	dfc00f15 	stw	ra,60(sp)
    3a70:	df000e15 	stw	fp,56(sp)
    3a74:	df000e04 	addi	fp,sp,56
    3a78:	e13ffe15 	stw	r4,-8(fp)
    3a7c:	e17fff15 	stw	r5,-4(fp)
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
    3a80:	e03ff615 	stw	zero,-40(fp)
  int parse_sname_as_options = 0;
    3a84:	e03ff715 	stw	zero,-36(fp)

  /* clear received options */
  dhcp_clear_all_options(dhcp);
    3a88:	01000134 	movhi	r4,4
    3a8c:	21118104 	addi	r4,r4,17924
    3a90:	000b883a 	mov	r5,zero
    3a94:	01800284 	movi	r6,10
    3a98:	0017b3c0 	call	17b3c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
    3a9c:	e0bfff17 	ldw	r2,-4(fp)
    3aa0:	1080028b 	ldhu	r2,10(r2)
    3aa4:	10bfffcc 	andi	r2,r2,65535
    3aa8:	10800b28 	cmpgeui	r2,r2,44
    3aac:	1000021e 	bne	r2,zero,3ab8 <dhcp_parse_reply+0x50>
    return ERR_BUF;
    3ab0:	00bfff84 	movi	r2,-2
    3ab4:	00022a06 	br	4360 <dhcp_parse_reply+0x8f8>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
    3ab8:	e0bfff17 	ldw	r2,-4(fp)
    3abc:	10c00117 	ldw	r3,4(r2)
    3ac0:	e0bffe17 	ldw	r2,-8(fp)
    3ac4:	10c00215 	stw	r3,8(r2)
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
    3ac8:	00803c04 	movi	r2,240
    3acc:	e0bff40d 	sth	r2,-48(fp)
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
    3ad0:	e0bfff17 	ldw	r2,-4(fp)
    3ad4:	1080020b 	ldhu	r2,8(r2)
    3ad8:	e0bff48d 	sth	r2,-46(fp)
again:
  q = p;
    3adc:	e0bfff17 	ldw	r2,-4(fp)
    3ae0:	e0bff515 	stw	r2,-44(fp)
  while((q != NULL) && (options_idx >= q->len)) {
    3ae4:	00000d06 	br	3b1c <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
    3ae8:	e0bff517 	ldw	r2,-44(fp)
    3aec:	1080028b 	ldhu	r2,10(r2)
    3af0:	e0fff40b 	ldhu	r3,-48(fp)
    3af4:	1885c83a 	sub	r2,r3,r2
    3af8:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max -= q->len;
    3afc:	e0bff517 	ldw	r2,-44(fp)
    3b00:	1080028b 	ldhu	r2,10(r2)
    3b04:	e0fff48b 	ldhu	r3,-46(fp)
    3b08:	1885c83a 	sub	r2,r3,r2
    3b0c:	e0bff48d 	sth	r2,-46(fp)
    q = q->next;
    3b10:	e0bff517 	ldw	r2,-44(fp)
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	e0bff515 	stw	r2,-44(fp)
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
    3b1c:	e0bff517 	ldw	r2,-44(fp)
    3b20:	10000526 	beq	r2,zero,3b38 <dhcp_parse_reply+0xd0>
    3b24:	e0bff517 	ldw	r2,-44(fp)
    3b28:	1080028b 	ldhu	r2,10(r2)
    3b2c:	10bfffcc 	andi	r2,r2,65535
    3b30:	e0fff40b 	ldhu	r3,-48(fp)
    3b34:	18bfec2e 	bgeu	r3,r2,3ae8 <dhcp_parse_reply+0x80>
    options_idx -= q->len;
    options_idx_max -= q->len;
    q = q->next;
  }
  if (q == NULL) {
    3b38:	e0bff517 	ldw	r2,-44(fp)
    3b3c:	1000021e 	bne	r2,zero,3b48 <dhcp_parse_reply+0xe0>
    return ERR_BUF;
    3b40:	00bfff84 	movi	r2,-2
    3b44:	00020606 	br	4360 <dhcp_parse_reply+0x8f8>
  }
  offset = options_idx;
    3b48:	e0bff40b 	ldhu	r2,-48(fp)
    3b4c:	e0bff30d 	sth	r2,-52(fp)
  offset_max = options_idx_max;
    3b50:	e0bff48b 	ldhu	r2,-46(fp)
    3b54:	e0bff38d 	sth	r2,-50(fp)
  options = (u8_t*)q->payload;
    3b58:	e0bff517 	ldw	r2,-44(fp)
    3b5c:	10800117 	ldw	r2,4(r2)
    3b60:	e0bff215 	stw	r2,-56(fp)
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    3b64:	0001c206 	br	4270 <dhcp_parse_reply+0x808>
    u8_t op = options[offset];
    3b68:	e0bff30b 	ldhu	r2,-52(fp)
    3b6c:	e0fff217 	ldw	r3,-56(fp)
    3b70:	1885883a 	add	r2,r3,r2
    3b74:	10800003 	ldbu	r2,0(r2)
    3b78:	e0bffa85 	stb	r2,-22(fp)
    u8_t len;
    u8_t decode_len = 0;
    3b7c:	e03ff845 	stb	zero,-31(fp)
    int decode_idx = -1;
    3b80:	00bfffc4 	movi	r2,-1
    3b84:	e0bff915 	stw	r2,-28(fp)
    u16_t val_offset = offset + 2;
    3b88:	e0bff30b 	ldhu	r2,-52(fp)
    3b8c:	10800084 	addi	r2,r2,2
    3b90:	e0bffa0d 	sth	r2,-24(fp)
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
    3b94:	e0bff30b 	ldhu	r2,-52(fp)
    3b98:	10c00044 	addi	r3,r2,1
    3b9c:	e0bff517 	ldw	r2,-44(fp)
    3ba0:	1080028b 	ldhu	r2,10(r2)
    3ba4:	10bfffcc 	andi	r2,r2,65535
    3ba8:	1880070e 	bge	r3,r2,3bc8 <dhcp_parse_reply+0x160>
      len = options[offset + 1];
    3bac:	e0bff30b 	ldhu	r2,-52(fp)
    3bb0:	10800044 	addi	r2,r2,1
    3bb4:	e0fff217 	ldw	r3,-56(fp)
    3bb8:	1885883a 	add	r2,r3,r2
    3bbc:	10800003 	ldbu	r2,0(r2)
    3bc0:	e0bff805 	stb	r2,-32(fp)
    3bc4:	00000a06 	br	3bf0 <dhcp_parse_reply+0x188>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    3bc8:	e0bff517 	ldw	r2,-44(fp)
    3bcc:	10800017 	ldw	r2,0(r2)
    3bd0:	10000526 	beq	r2,zero,3be8 <dhcp_parse_reply+0x180>
    3bd4:	e0bff517 	ldw	r2,-44(fp)
    3bd8:	10800017 	ldw	r2,0(r2)
    3bdc:	10800117 	ldw	r2,4(r2)
    3be0:	10800003 	ldbu	r2,0(r2)
    3be4:	00000106 	br	3bec <dhcp_parse_reply+0x184>
    3be8:	0005883a 	mov	r2,zero
    3bec:	e0bff805 	stb	r2,-32(fp)
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    3bf0:	e0bff803 	ldbu	r2,-32(fp)
    3bf4:	e0bff845 	stb	r2,-31(fp)
    switch(op) {
    3bf8:	e0bffa83 	ldbu	r2,-22(fp)
    3bfc:	10c00f28 	cmpgeui	r3,r2,60
    3c00:	1800e51e 	bne	r3,zero,3f98 <dhcp_parse_reply+0x530>
    3c04:	1085883a 	add	r2,r2,r2
    3c08:	1087883a 	add	r3,r2,r2
    3c0c:	00800034 	movhi	r2,0
    3c10:	108f0804 	addi	r2,r2,15392
    3c14:	1885883a 	add	r2,r3,r2
    3c18:	10800017 	ldw	r2,0(r2)
    3c1c:	1000683a 	jmp	r2
    3c20:	00003d10 	cmplti	zero,zero,244
    3c24:	00003d2c 	andhi	zero,zero,244
    3c28:	00003f98 	cmpnei	zero,zero,254
    3c2c:	00003d68 	cmpgeui	zero,zero,245
    3c30:	00003f98 	cmpnei	zero,zero,254
    3c34:	00003f98 	cmpnei	zero,zero,254
    3c38:	00003dac 	andhi	zero,zero,246
    3c3c:	00003f98 	cmpnei	zero,zero,254
    3c40:	00003f98 	cmpnei	zero,zero,254
    3c44:	00003f98 	cmpnei	zero,zero,254
    3c48:	00003f98 	cmpnei	zero,zero,254
    3c4c:	00003f98 	cmpnei	zero,zero,254
    3c50:	00003f98 	cmpnei	zero,zero,254
    3c54:	00003f98 	cmpnei	zero,zero,254
    3c58:	00003f98 	cmpnei	zero,zero,254
    3c5c:	00003f98 	cmpnei	zero,zero,254
    3c60:	00003f98 	cmpnei	zero,zero,254
    3c64:	00003f98 	cmpnei	zero,zero,254
    3c68:	00003f98 	cmpnei	zero,zero,254
    3c6c:	00003f98 	cmpnei	zero,zero,254
    3c70:	00003f98 	cmpnei	zero,zero,254
    3c74:	00003f98 	cmpnei	zero,zero,254
    3c78:	00003f98 	cmpnei	zero,zero,254
    3c7c:	00003f98 	cmpnei	zero,zero,254
    3c80:	00003f98 	cmpnei	zero,zero,254
    3c84:	00003f98 	cmpnei	zero,zero,254
    3c88:	00003f98 	cmpnei	zero,zero,254
    3c8c:	00003f98 	cmpnei	zero,zero,254
    3c90:	00003f98 	cmpnei	zero,zero,254
    3c94:	00003f98 	cmpnei	zero,zero,254
    3c98:	00003f98 	cmpnei	zero,zero,254
    3c9c:	00003f98 	cmpnei	zero,zero,254
    3ca0:	00003f98 	cmpnei	zero,zero,254
    3ca4:	00003f98 	cmpnei	zero,zero,254
    3ca8:	00003f98 	cmpnei	zero,zero,254
    3cac:	00003f98 	cmpnei	zero,zero,254
    3cb0:	00003f98 	cmpnei	zero,zero,254
    3cb4:	00003f98 	cmpnei	zero,zero,254
    3cb8:	00003f98 	cmpnei	zero,zero,254
    3cbc:	00003f98 	cmpnei	zero,zero,254
    3cc0:	00003f98 	cmpnei	zero,zero,254
    3cc4:	00003f98 	cmpnei	zero,zero,254
    3cc8:	00003f98 	cmpnei	zero,zero,254
    3ccc:	00003f98 	cmpnei	zero,zero,254
    3cd0:	00003f98 	cmpnei	zero,zero,254
    3cd4:	00003f98 	cmpnei	zero,zero,254
    3cd8:	00003f98 	cmpnei	zero,zero,254
    3cdc:	00003f98 	cmpnei	zero,zero,254
    3ce0:	00003f98 	cmpnei	zero,zero,254
    3ce4:	00003f98 	cmpnei	zero,zero,254
    3ce8:	00003f98 	cmpnei	zero,zero,254
    3cec:	00003e34 	movhi	zero,248
    3cf0:	00003e70 	cmpltui	zero,zero,249
    3cf4:	00003ea8 	cmpgeui	zero,zero,250
    3cf8:	00003ee4 	muli	zero,zero,251
    3cfc:	00003f98 	cmpnei	zero,zero,254
    3d00:	00003f98 	cmpnei	zero,zero,254
    3d04:	00003f98 	cmpnei	zero,zero,254
    3d08:	00003f20 	cmpeqi	zero,zero,252
    3d0c:	00003f5c 	xori	zero,zero,253
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
    3d10:	e03ff805 	stb	zero,-32(fp)
    3d14:	e0bff803 	ldbu	r2,-32(fp)
    3d18:	e0bff845 	stb	r2,-31(fp)
        /* will be increased below */
        offset--;
    3d1c:	e0bff30b 	ldhu	r2,-52(fp)
    3d20:	10bfffc4 	addi	r2,r2,-1
    3d24:	e0bff30d 	sth	r2,-52(fp)
        break;
    3d28:	00009d06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
    3d2c:	e0bff803 	ldbu	r2,-32(fp)
    3d30:	10800120 	cmpeqi	r2,r2,4
    3d34:	1000091e 	bne	r2,zero,3d5c <dhcp_parse_reply+0x2f4>
    3d38:	010000f4 	movhi	r4,3
    3d3c:	213a8404 	addi	r4,r4,-5616
    3d40:	014000f4 	movhi	r5,3
    3d44:	297b0604 	addi	r5,r5,-5096
    3d48:	01815ec4 	movi	r6,1403
    3d4c:	01c000f4 	movhi	r7,3
    3d50:	39fa9204 	addi	r7,r7,-5560
    3d54:	0017c440 	call	17c44 <printf>
    3d58:	003fff06 	br	3d58 <dhcp_parse_reply+0x2f0>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
    3d5c:	00800184 	movi	r2,6
    3d60:	e0bff915 	stw	r2,-28(fp)
        break;
    3d64:	00008e06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
    3d68:	00800104 	movi	r2,4
    3d6c:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
    3d70:	e0fff803 	ldbu	r3,-32(fp)
    3d74:	e0bff843 	ldbu	r2,-31(fp)
    3d78:	1880092e 	bgeu	r3,r2,3da0 <dhcp_parse_reply+0x338>
    3d7c:	010000f4 	movhi	r4,3
    3d80:	213a8404 	addi	r4,r4,-5616
    3d84:	014000f4 	movhi	r5,3
    3d88:	297b0904 	addi	r5,r5,-5084
    3d8c:	01816004 	movi	r6,1408
    3d90:	01c000f4 	movhi	r7,3
    3d94:	39fa9204 	addi	r7,r7,-5560
    3d98:	0017c440 	call	17c44 <printf>
    3d9c:	003fff06 	br	3d9c <dhcp_parse_reply+0x334>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
    3da0:	008001c4 	movi	r2,7
    3da4:	e0bff915 	stw	r2,-28(fp)
        break;
    3da8:	00007d06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
    3dac:	e0bff803 	ldbu	r2,-32(fp)
    3db0:	108000cc 	andi	r2,r2,3
    3db4:	10803fcc 	andi	r2,r2,255
    3db8:	10000926 	beq	r2,zero,3de0 <dhcp_parse_reply+0x378>
    3dbc:	010000f4 	movhi	r4,3
    3dc0:	213a8404 	addi	r4,r4,-5616
    3dc4:	014000f4 	movhi	r5,3
    3dc8:	297b0e04 	addi	r5,r5,-5064
    3dcc:	01816144 	movi	r6,1413
    3dd0:	01c000f4 	movhi	r7,3
    3dd4:	39fa9204 	addi	r7,r7,-5560
    3dd8:	0017c440 	call	17c44 <printf>
    3ddc:	003fff06 	br	3ddc <dhcp_parse_reply+0x374>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
    3de0:	e0bff803 	ldbu	r2,-32(fp)
    3de4:	10c03fcc 	andi	r3,r2,255
    3de8:	18c00270 	cmpltui	r3,r3,9
    3dec:	1800011e 	bne	r3,zero,3df4 <dhcp_parse_reply+0x38c>
    3df0:	00800204 	movi	r2,8
    3df4:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
    3df8:	e0fff803 	ldbu	r3,-32(fp)
    3dfc:	e0bff843 	ldbu	r2,-31(fp)
    3e00:	1880092e 	bgeu	r3,r2,3e28 <dhcp_parse_reply+0x3c0>
    3e04:	010000f4 	movhi	r4,3
    3e08:	213a8404 	addi	r4,r4,-5616
    3e0c:	014000f4 	movhi	r5,3
    3e10:	297b0904 	addi	r5,r5,-5084
    3e14:	01816204 	movi	r6,1416
    3e18:	01c000f4 	movhi	r7,3
    3e1c:	39fa9204 	addi	r7,r7,-5560
    3e20:	0017c440 	call	17c44 <printf>
    3e24:	003fff06 	br	3e24 <dhcp_parse_reply+0x3bc>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
    3e28:	00800204 	movi	r2,8
    3e2c:	e0bff915 	stw	r2,-28(fp)
        break;
    3e30:	00005b06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
    3e34:	e0bff803 	ldbu	r2,-32(fp)
    3e38:	10800120 	cmpeqi	r2,r2,4
    3e3c:	1000091e 	bne	r2,zero,3e64 <dhcp_parse_reply+0x3fc>
    3e40:	010000f4 	movhi	r4,3
    3e44:	213a8404 	addi	r4,r4,-5616
    3e48:	014000f4 	movhi	r5,3
    3e4c:	297b0604 	addi	r5,r5,-5096
    3e50:	01816304 	movi	r6,1420
    3e54:	01c000f4 	movhi	r7,3
    3e58:	39fa9204 	addi	r7,r7,-5560
    3e5c:	0017c440 	call	17c44 <printf>
    3e60:	003fff06 	br	3e60 <dhcp_parse_reply+0x3f8>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
    3e64:	008000c4 	movi	r2,3
    3e68:	e0bff915 	stw	r2,-28(fp)
        break;
    3e6c:	00004c06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
    3e70:	e0bff803 	ldbu	r2,-32(fp)
    3e74:	10800060 	cmpeqi	r2,r2,1
    3e78:	1000091e 	bne	r2,zero,3ea0 <dhcp_parse_reply+0x438>
    3e7c:	010000f4 	movhi	r4,3
    3e80:	213a8404 	addi	r4,r4,-5616
    3e84:	014000f4 	movhi	r5,3
    3e88:	297b1204 	addi	r5,r5,-5048
    3e8c:	01816404 	movi	r6,1424
    3e90:	01c000f4 	movhi	r7,3
    3e94:	39fa9204 	addi	r7,r7,-5560
    3e98:	0017c440 	call	17c44 <printf>
    3e9c:	003fff06 	br	3e9c <dhcp_parse_reply+0x434>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
    3ea0:	e03ff915 	stw	zero,-28(fp)
        break;
    3ea4:	00003e06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
    3ea8:	e0bff803 	ldbu	r2,-32(fp)
    3eac:	10800060 	cmpeqi	r2,r2,1
    3eb0:	1000091e 	bne	r2,zero,3ed8 <dhcp_parse_reply+0x470>
    3eb4:	010000f4 	movhi	r4,3
    3eb8:	213a8404 	addi	r4,r4,-5616
    3ebc:	014000f4 	movhi	r5,3
    3ec0:	297b1204 	addi	r5,r5,-5048
    3ec4:	01816504 	movi	r6,1428
    3ec8:	01c000f4 	movhi	r7,3
    3ecc:	39fa9204 	addi	r7,r7,-5560
    3ed0:	0017c440 	call	17c44 <printf>
    3ed4:	003fff06 	br	3ed4 <dhcp_parse_reply+0x46c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
    3ed8:	00800044 	movi	r2,1
    3edc:	e0bff915 	stw	r2,-28(fp)
        break;
    3ee0:	00002f06 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
    3ee4:	e0bff803 	ldbu	r2,-32(fp)
    3ee8:	10800120 	cmpeqi	r2,r2,4
    3eec:	1000091e 	bne	r2,zero,3f14 <dhcp_parse_reply+0x4ac>
    3ef0:	010000f4 	movhi	r4,3
    3ef4:	213a8404 	addi	r4,r4,-5616
    3ef8:	014000f4 	movhi	r5,3
    3efc:	297b0604 	addi	r5,r5,-5096
    3f00:	01816604 	movi	r6,1432
    3f04:	01c000f4 	movhi	r7,3
    3f08:	39fa9204 	addi	r7,r7,-5560
    3f0c:	0017c440 	call	17c44 <printf>
    3f10:	003fff06 	br	3f10 <dhcp_parse_reply+0x4a8>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
    3f14:	00800084 	movi	r2,2
    3f18:	e0bff915 	stw	r2,-28(fp)
        break;
    3f1c:	00002006 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
    3f20:	e0bff803 	ldbu	r2,-32(fp)
    3f24:	10800120 	cmpeqi	r2,r2,4
    3f28:	1000091e 	bne	r2,zero,3f50 <dhcp_parse_reply+0x4e8>
    3f2c:	010000f4 	movhi	r4,3
    3f30:	213a8404 	addi	r4,r4,-5616
    3f34:	014000f4 	movhi	r5,3
    3f38:	297b0604 	addi	r5,r5,-5096
    3f3c:	01816704 	movi	r6,1436
    3f40:	01c000f4 	movhi	r7,3
    3f44:	39fa9204 	addi	r7,r7,-5560
    3f48:	0017c440 	call	17c44 <printf>
    3f4c:	003fff06 	br	3f4c <dhcp_parse_reply+0x4e4>
        decode_idx = DHCP_OPTION_IDX_T1;
    3f50:	00800104 	movi	r2,4
    3f54:	e0bff915 	stw	r2,-28(fp)
        break;
    3f58:	00001106 	br	3fa0 <dhcp_parse_reply+0x538>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
    3f5c:	e0bff803 	ldbu	r2,-32(fp)
    3f60:	10800120 	cmpeqi	r2,r2,4
    3f64:	1000091e 	bne	r2,zero,3f8c <dhcp_parse_reply+0x524>
    3f68:	010000f4 	movhi	r4,3
    3f6c:	213a8404 	addi	r4,r4,-5616
    3f70:	014000f4 	movhi	r5,3
    3f74:	297b0604 	addi	r5,r5,-5096
    3f78:	01816804 	movi	r6,1440
    3f7c:	01c000f4 	movhi	r7,3
    3f80:	39fa9204 	addi	r7,r7,-5560
    3f84:	0017c440 	call	17c44 <printf>
    3f88:	003fff06 	br	3f88 <dhcp_parse_reply+0x520>
        decode_idx = DHCP_OPTION_IDX_T2;
    3f8c:	00800144 	movi	r2,5
    3f90:	e0bff915 	stw	r2,-28(fp)
        break;
    3f94:	00000206 	br	3fa0 <dhcp_parse_reply+0x538>
      default:
        decode_len = 0;
    3f98:	e03ff845 	stb	zero,-31(fp)
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    3f9c:	0001883a 	nop
    }
    offset += len + 2;
    3fa0:	e0fff803 	ldbu	r3,-32(fp)
    3fa4:	e0bff30b 	ldhu	r2,-52(fp)
    3fa8:	1885883a 	add	r2,r3,r2
    3fac:	10800084 	addi	r2,r2,2
    3fb0:	e0bff30d 	sth	r2,-52(fp)
    if (decode_len > 0) {
    3fb4:	e0bff843 	ldbu	r2,-31(fp)
    3fb8:	10008826 	beq	r2,zero,41dc <dhcp_parse_reply+0x774>
      u32_t value = 0;
    3fbc:	e03ffd15 	stw	zero,-12(fp)
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
    3fc0:	e0bff917 	ldw	r2,-28(fp)
    3fc4:	10000316 	blt	r2,zero,3fd4 <dhcp_parse_reply+0x56c>
    3fc8:	e0bff917 	ldw	r2,-28(fp)
    3fcc:	10800290 	cmplti	r2,r2,10
    3fd0:	1000091e 	bne	r2,zero,3ff8 <dhcp_parse_reply+0x590>
    3fd4:	010000f4 	movhi	r4,3
    3fd8:	213a8404 	addi	r4,r4,-5616
    3fdc:	014000f4 	movhi	r5,3
    3fe0:	297b1504 	addi	r5,r5,-5036
    3fe4:	01816b44 	movi	r6,1453
    3fe8:	01c000f4 	movhi	r7,3
    3fec:	39fa9204 	addi	r7,r7,-5560
    3ff0:	0017c440 	call	17c44 <printf>
    3ff4:	003fff06 	br	3ff4 <dhcp_parse_reply+0x58c>
      if (!dhcp_option_given(dhcp, decode_idx)) {
    3ff8:	00c00134 	movhi	r3,4
    3ffc:	18d18104 	addi	r3,r3,17924
    4000:	e0bff917 	ldw	r2,-28(fp)
    4004:	1885883a 	add	r2,r3,r2
    4008:	10800003 	ldbu	r2,0(r2)
    400c:	10803fcc 	andi	r2,r2,255
    4010:	1000721e 	bne	r2,zero,41dc <dhcp_parse_reply+0x774>
        copy_len = LWIP_MIN(decode_len, 4);
    4014:	e0bff843 	ldbu	r2,-31(fp)
    4018:	10800128 	cmpgeui	r2,r2,4
    401c:	1000021e 	bne	r2,zero,4028 <dhcp_parse_reply+0x5c0>
    4020:	e0bff843 	ldbu	r2,-31(fp)
    4024:	00000106 	br	402c <dhcp_parse_reply+0x5c4>
    4028:	00800104 	movi	r2,4
    402c:	e0bffb0d 	sth	r2,-20(fp)
        pbuf_copy_partial(q, &value, copy_len, val_offset);
    4030:	e0fffb0b 	ldhu	r3,-20(fp)
    4034:	e0bffa0b 	ldhu	r2,-24(fp)
    4038:	e17ffd04 	addi	r5,fp,-12
    403c:	e13ff517 	ldw	r4,-44(fp)
    4040:	180d883a 	mov	r6,r3
    4044:	100f883a 	mov	r7,r2
    4048:	000abf00 	call	abf0 <pbuf_copy_partial>
        if (decode_len > 4) {
    404c:	e0bff843 	ldbu	r2,-31(fp)
    4050:	10800170 	cmpltui	r2,r2,5
    4054:	1000311e 	bne	r2,zero,411c <dhcp_parse_reply+0x6b4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
    4058:	e0bff843 	ldbu	r2,-31(fp)
    405c:	108000cc 	andi	r2,r2,3
    4060:	10803fcc 	andi	r2,r2,255
    4064:	10000926 	beq	r2,zero,408c <dhcp_parse_reply+0x624>
    4068:	010000f4 	movhi	r4,3
    406c:	213a8404 	addi	r4,r4,-5616
    4070:	014000f4 	movhi	r5,3
    4074:	297b1a04 	addi	r5,r5,-5016
    4078:	01816cc4 	movi	r6,1459
    407c:	01c000f4 	movhi	r7,3
    4080:	39fa9204 	addi	r7,r7,-5560
    4084:	0017c440 	call	17c44 <printf>
    4088:	003fff06 	br	4088 <dhcp_parse_reply+0x620>
          dhcp_got_option(dhcp, decode_idx);
    408c:	00c00134 	movhi	r3,4
    4090:	18d18104 	addi	r3,r3,17924
    4094:	e0bff917 	ldw	r2,-28(fp)
    4098:	1885883a 	add	r2,r3,r2
    409c:	00c00044 	movi	r3,1
    40a0:	10c00005 	stb	r3,0(r2)
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
    40a4:	e0bffd17 	ldw	r2,-12(fp)
    40a8:	1006d63a 	srli	r3,r2,24
    40ac:	e0bffd17 	ldw	r2,-12(fp)
    40b0:	1004d23a 	srli	r2,r2,8
    40b4:	10bfc00c 	andi	r2,r2,65280
    40b8:	1886b03a 	or	r3,r3,r2
    40bc:	e0bffd17 	ldw	r2,-12(fp)
    40c0:	10bfc00c 	andi	r2,r2,65280
    40c4:	1004923a 	slli	r2,r2,8
    40c8:	1886b03a 	or	r3,r3,r2
    40cc:	e0bffd17 	ldw	r2,-12(fp)
    40d0:	1004963a 	slli	r2,r2,24
    40d4:	1886b03a 	or	r3,r3,r2
    40d8:	01000134 	movhi	r4,4
    40dc:	21118404 	addi	r4,r4,17936
    40e0:	e0bff917 	ldw	r2,-28(fp)
    40e4:	1085883a 	add	r2,r2,r2
    40e8:	1085883a 	add	r2,r2,r2
    40ec:	2085883a 	add	r2,r4,r2
    40f0:	10c00015 	stw	r3,0(r2)
          decode_len -= 4;
    40f4:	e0bff843 	ldbu	r2,-31(fp)
    40f8:	10bfff04 	addi	r2,r2,-4
    40fc:	e0bff845 	stb	r2,-31(fp)
          val_offset += 4;
    4100:	e0bffa0b 	ldhu	r2,-24(fp)
    4104:	10800104 	addi	r2,r2,4
    4108:	e0bffa0d 	sth	r2,-24(fp)
          decode_idx++;
    410c:	e0bff917 	ldw	r2,-28(fp)
    4110:	10800044 	addi	r2,r2,1
    4114:	e0bff915 	stw	r2,-28(fp)
          goto decode_next;
    4118:	003fa906 	br	3fc0 <dhcp_parse_reply+0x558>
        } else if (decode_len == 4) {
    411c:	e0bff843 	ldbu	r2,-31(fp)
    4120:	10800118 	cmpnei	r2,r2,4
    4124:	10000f1e 	bne	r2,zero,4164 <dhcp_parse_reply+0x6fc>
          value = ntohl(value);
    4128:	e0bffd17 	ldw	r2,-12(fp)
    412c:	1006d63a 	srli	r3,r2,24
    4130:	e0bffd17 	ldw	r2,-12(fp)
    4134:	1004d23a 	srli	r2,r2,8
    4138:	10bfc00c 	andi	r2,r2,65280
    413c:	1886b03a 	or	r3,r3,r2
    4140:	e0bffd17 	ldw	r2,-12(fp)
    4144:	10bfc00c 	andi	r2,r2,65280
    4148:	1004923a 	slli	r2,r2,8
    414c:	1886b03a 	or	r3,r3,r2
    4150:	e0bffd17 	ldw	r2,-12(fp)
    4154:	1004963a 	slli	r2,r2,24
    4158:	1884b03a 	or	r2,r3,r2
    415c:	e0bffd15 	stw	r2,-12(fp)
    4160:	00001006 	br	41a4 <dhcp_parse_reply+0x73c>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
    4164:	e0bff843 	ldbu	r2,-31(fp)
    4168:	10800060 	cmpeqi	r2,r2,1
    416c:	1000091e 	bne	r2,zero,4194 <dhcp_parse_reply+0x72c>
    4170:	010000f4 	movhi	r4,3
    4174:	213a8404 	addi	r4,r4,-5616
    4178:	014000f4 	movhi	r5,3
    417c:	297b1f04 	addi	r5,r5,-4996
    4180:	01816f44 	movi	r6,1469
    4184:	01c000f4 	movhi	r7,3
    4188:	39fa9204 	addi	r7,r7,-5560
    418c:	0017c440 	call	17c44 <printf>
    4190:	003fff06 	br	4190 <dhcp_parse_reply+0x728>
          value = ((u8_t*)&value)[0];
    4194:	e0bffd04 	addi	r2,fp,-12
    4198:	10800003 	ldbu	r2,0(r2)
    419c:	10803fcc 	andi	r2,r2,255
    41a0:	e0bffd15 	stw	r2,-12(fp)
        }
        dhcp_got_option(dhcp, decode_idx);
    41a4:	00c00134 	movhi	r3,4
    41a8:	18d18104 	addi	r3,r3,17924
    41ac:	e0bff917 	ldw	r2,-28(fp)
    41b0:	1885883a 	add	r2,r3,r2
    41b4:	00c00044 	movi	r3,1
    41b8:	10c00005 	stb	r3,0(r2)
        dhcp_set_option_value(dhcp, decode_idx, value);
    41bc:	e0fffd17 	ldw	r3,-12(fp)
    41c0:	01000134 	movhi	r4,4
    41c4:	21118404 	addi	r4,r4,17936
    41c8:	e0bff917 	ldw	r2,-28(fp)
    41cc:	1085883a 	add	r2,r2,r2
    41d0:	1085883a 	add	r2,r2,r2
    41d4:	2085883a 	add	r2,r4,r2
    41d8:	10c00015 	stw	r3,0(r2)
      }
    }
    if (offset >= q->len) {
    41dc:	e0bff517 	ldw	r2,-44(fp)
    41e0:	1080028b 	ldhu	r2,10(r2)
    41e4:	10bfffcc 	andi	r2,r2,65535
    41e8:	e0fff30b 	ldhu	r3,-52(fp)
    41ec:	18802036 	bltu	r3,r2,4270 <dhcp_parse_reply+0x808>
      offset -= q->len;
    41f0:	e0bff517 	ldw	r2,-44(fp)
    41f4:	1080028b 	ldhu	r2,10(r2)
    41f8:	e0fff30b 	ldhu	r3,-52(fp)
    41fc:	1885c83a 	sub	r2,r3,r2
    4200:	e0bff30d 	sth	r2,-52(fp)
      offset_max -= q->len;
    4204:	e0bff517 	ldw	r2,-44(fp)
    4208:	1080028b 	ldhu	r2,10(r2)
    420c:	e0fff38b 	ldhu	r3,-50(fp)
    4210:	1885c83a 	sub	r2,r3,r2
    4214:	e0bff38d 	sth	r2,-50(fp)
      if ((offset < offset_max) && offset_max) {
    4218:	e0fff30b 	ldhu	r3,-52(fp)
    421c:	e0bff38b 	ldhu	r2,-50(fp)
    4220:	18801f2e 	bgeu	r3,r2,42a0 <dhcp_parse_reply+0x838>
    4224:	e0bff38b 	ldhu	r2,-50(fp)
    4228:	10001d26 	beq	r2,zero,42a0 <dhcp_parse_reply+0x838>
        q = q->next;
    422c:	e0bff517 	ldw	r2,-44(fp)
    4230:	10800017 	ldw	r2,0(r2)
    4234:	e0bff515 	stw	r2,-44(fp)
        LWIP_ASSERT("next pbuf was null", q);
    4238:	e0bff517 	ldw	r2,-44(fp)
    423c:	1000091e 	bne	r2,zero,4264 <dhcp_parse_reply+0x7fc>
    4240:	010000f4 	movhi	r4,3
    4244:	213a8404 	addi	r4,r4,-5616
    4248:	014000f4 	movhi	r5,3
    424c:	297b2404 	addi	r5,r5,-4976
    4250:	01817244 	movi	r6,1481
    4254:	01c000f4 	movhi	r7,3
    4258:	39fa9204 	addi	r7,r7,-5560
    425c:	0017c440 	call	17c44 <printf>
    4260:	003fff06 	br	4260 <dhcp_parse_reply+0x7f8>
        options = (u8_t*)q->payload;
    4264:	e0bff517 	ldw	r2,-44(fp)
    4268:	10800117 	ldw	r2,4(r2)
    426c:	e0bff215 	stw	r2,-56(fp)
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    4270:	e0bff517 	ldw	r2,-44(fp)
    4274:	10000a26 	beq	r2,zero,42a0 <dhcp_parse_reply+0x838>
    4278:	e0bff30b 	ldhu	r2,-52(fp)
    427c:	e0fff217 	ldw	r3,-56(fp)
    4280:	1885883a 	add	r2,r3,r2
    4284:	10800003 	ldbu	r2,0(r2)
    4288:	10803fcc 	andi	r2,r2,255
    428c:	10803fe0 	cmpeqi	r2,r2,255
    4290:	1000031e 	bne	r2,zero,42a0 <dhcp_parse_reply+0x838>
    4294:	e0fff30b 	ldhu	r3,-52(fp)
    4298:	e0bff38b 	ldhu	r2,-50(fp)
    429c:	18be3236 	bltu	r3,r2,3b68 <dhcp_parse_reply+0x100>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
    42a0:	00800134 	movhi	r2,4
    42a4:	10918104 	addi	r2,r2,17924
    42a8:	10800003 	ldbu	r2,0(r2)
    42ac:	10803fcc 	andi	r2,r2,255
    42b0:	10001a26 	beq	r2,zero,431c <dhcp_parse_reply+0x8b4>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
    42b4:	00800134 	movhi	r2,4
    42b8:	10918404 	addi	r2,r2,17936
    42bc:	10800017 	ldw	r2,0(r2)
    42c0:	e0bffc15 	stw	r2,-16(fp)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
    42c4:	00800134 	movhi	r2,4
    42c8:	10918104 	addi	r2,r2,17924
    42cc:	10000005 	stb	zero,0(r2)
    if (overload == DHCP_OVERLOAD_FILE) {
    42d0:	e0bffc17 	ldw	r2,-16(fp)
    42d4:	10800058 	cmpnei	r2,r2,1
    42d8:	1000031e 	bne	r2,zero,42e8 <dhcp_parse_reply+0x880>
      parse_file_as_options = 1;
    42dc:	00800044 	movi	r2,1
    42e0:	e0bff615 	stw	r2,-40(fp)
    42e4:	00000d06 	br	431c <dhcp_parse_reply+0x8b4>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
    42e8:	e0bffc17 	ldw	r2,-16(fp)
    42ec:	10800098 	cmpnei	r2,r2,2
    42f0:	1000031e 	bne	r2,zero,4300 <dhcp_parse_reply+0x898>
      parse_sname_as_options = 1;
    42f4:	00800044 	movi	r2,1
    42f8:	e0bff715 	stw	r2,-36(fp)
    42fc:	00000706 	br	431c <dhcp_parse_reply+0x8b4>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
    4300:	e0bffc17 	ldw	r2,-16(fp)
    4304:	108000d8 	cmpnei	r2,r2,3
    4308:	1000041e 	bne	r2,zero,431c <dhcp_parse_reply+0x8b4>
      parse_sname_as_options = 1;
    430c:	00800044 	movi	r2,1
    4310:	e0bff715 	stw	r2,-36(fp)
      parse_file_as_options = 1;
    4314:	00800044 	movi	r2,1
    4318:	e0bff615 	stw	r2,-40(fp)
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
    431c:	e0bff617 	ldw	r2,-40(fp)
    4320:	10000626 	beq	r2,zero,433c <dhcp_parse_reply+0x8d4>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    4324:	e03ff615 	stw	zero,-40(fp)
    options_idx = DHCP_FILE_OFS;
    4328:	00801b04 	movi	r2,108
    432c:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    4330:	00803b04 	movi	r2,236
    4334:	e0bff48d 	sth	r2,-46(fp)
    goto again;
    4338:	003de806 	br	3adc <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
    433c:	e0bff717 	ldw	r2,-36(fp)
    4340:	10000626 	beq	r2,zero,435c <dhcp_parse_reply+0x8f4>
    parse_sname_as_options = 0;
    4344:	e03ff715 	stw	zero,-36(fp)
    options_idx = DHCP_SNAME_OFS;
    4348:	00800b04 	movi	r2,44
    434c:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
    4350:	00801b04 	movi	r2,108
    4354:	e0bff48d 	sth	r2,-46(fp)
    goto again;
    4358:	003de006 	br	3adc <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
    435c:	0005883a 	mov	r2,zero
}
    4360:	e037883a 	mov	sp,fp
    4364:	dfc00117 	ldw	ra,4(sp)
    4368:	df000017 	ldw	fp,0(sp)
    436c:	dec00204 	addi	sp,sp,8
    4370:	f800283a 	ret

00004374 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
    4374:	defff404 	addi	sp,sp,-48
    4378:	dfc00b15 	stw	ra,44(sp)
    437c:	df000a15 	stw	fp,40(sp)
    4380:	df000a04 	addi	fp,sp,40
    4384:	e13ffb15 	stw	r4,-20(fp)
    4388:	e17ffc15 	stw	r5,-16(fp)
    438c:	e1bffd15 	stw	r6,-12(fp)
    4390:	e1fffe15 	stw	r7,-8(fp)
    4394:	e0800217 	ldw	r2,8(fp)
    4398:	e0bfff0d 	sth	r2,-4(fp)
  struct netif *netif = (struct netif *)arg;
    439c:	e0bffb17 	ldw	r2,-20(fp)
    43a0:	e0bff715 	stw	r2,-36(fp)
  struct dhcp *dhcp = netif->dhcp;
    43a4:	e0bff717 	ldw	r2,-36(fp)
    43a8:	10800817 	ldw	r2,32(r2)
    43ac:	e0bff815 	stw	r2,-32(fp)
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
    43b0:	e0bffd17 	ldw	r2,-12(fp)
    43b4:	10800117 	ldw	r2,4(r2)
    43b8:	e0bff915 	stw	r2,-28(fp)
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    43bc:	e0bff817 	ldw	r2,-32(fp)
    43c0:	10800217 	ldw	r2,8(r2)
    43c4:	10000926 	beq	r2,zero,43ec <dhcp_recv+0x78>
    43c8:	010000f4 	movhi	r4,3
    43cc:	213a8404 	addi	r4,r4,-5616
    43d0:	014000f4 	movhi	r5,3
    43d4:	297aab04 	addi	r5,r5,-5460
    43d8:	01818444 	movi	r6,1553
    43dc:	01c000f4 	movhi	r7,3
    43e0:	39fa9204 	addi	r7,r7,-5560
    43e4:	0017c440 	call	17c44 <printf>
    43e8:	003fff06 	br	43e8 <dhcp_recv+0x74>

  if (p->len < DHCP_MIN_REPLY_LEN) {
    43ec:	e0bffd17 	ldw	r2,-12(fp)
    43f0:	1080028b 	ldhu	r2,10(r2)
    43f4:	10bfffcc 	andi	r2,r2,65535
    43f8:	10800b28 	cmpgeui	r2,r2,44
    43fc:	10009226 	beq	r2,zero,4648 <dhcp_recv+0x2d4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
    4400:	e0bff917 	ldw	r2,-28(fp)
    4404:	10800003 	ldbu	r2,0(r2)
    4408:	10803fcc 	andi	r2,r2,255
    440c:	108000a0 	cmpeqi	r2,r2,2
    4410:	10008f26 	beq	r2,zero,4650 <dhcp_recv+0x2dc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
    4414:	e03ff605 	stb	zero,-40(fp)
    4418:	00001006 	br	445c <dhcp_recv+0xe8>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
    441c:	e0bff603 	ldbu	r2,-40(fp)
    4420:	e0fff717 	ldw	r3,-36(fp)
    4424:	1885883a 	add	r2,r3,r2
    4428:	10800904 	addi	r2,r2,36
    442c:	10c000c3 	ldbu	r3,3(r2)
    4430:	e0bff603 	ldbu	r2,-40(fp)
    4434:	e13ff917 	ldw	r4,-28(fp)
    4438:	2085883a 	add	r2,r4,r2
    443c:	10800704 	addi	r2,r2,28
    4440:	10800003 	ldbu	r2,0(r2)
    4444:	18c03fcc 	andi	r3,r3,255
    4448:	10803fcc 	andi	r2,r2,255
    444c:	1880821e 	bne	r3,r2,4658 <dhcp_recv+0x2e4>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
    4450:	e0bff603 	ldbu	r2,-40(fp)
    4454:	10800044 	addi	r2,r2,1
    4458:	e0bff605 	stb	r2,-40(fp)
    445c:	e0bff717 	ldw	r2,-36(fp)
    4460:	10800983 	ldbu	r2,38(r2)
    4464:	10803fcc 	andi	r2,r2,255
    4468:	e0fff603 	ldbu	r3,-40(fp)
    446c:	18bfeb36 	bltu	r3,r2,441c <dhcp_recv+0xa8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    4470:	e0bff917 	ldw	r2,-28(fp)
    4474:	10c0010b 	ldhu	r3,4(r2)
    4478:	1080018b 	ldhu	r2,6(r2)
    447c:	1004943a 	slli	r2,r2,16
    4480:	10c4b03a 	or	r2,r2,r3
    4484:	1006d63a 	srli	r3,r2,24
    4488:	e0bff917 	ldw	r2,-28(fp)
    448c:	1100010b 	ldhu	r4,4(r2)
    4490:	1080018b 	ldhu	r2,6(r2)
    4494:	1004943a 	slli	r2,r2,16
    4498:	1104b03a 	or	r2,r2,r4
    449c:	1004d23a 	srli	r2,r2,8
    44a0:	10bfc00c 	andi	r2,r2,65280
    44a4:	1886b03a 	or	r3,r3,r2
    44a8:	e0bff917 	ldw	r2,-28(fp)
    44ac:	1100010b 	ldhu	r4,4(r2)
    44b0:	1080018b 	ldhu	r2,6(r2)
    44b4:	1004943a 	slli	r2,r2,16
    44b8:	1104b03a 	or	r2,r2,r4
    44bc:	10bfc00c 	andi	r2,r2,65280
    44c0:	1004923a 	slli	r2,r2,8
    44c4:	1886b03a 	or	r3,r3,r2
    44c8:	e0bff917 	ldw	r2,-28(fp)
    44cc:	1100010b 	ldhu	r4,4(r2)
    44d0:	1080018b 	ldhu	r2,6(r2)
    44d4:	1004943a 	slli	r2,r2,16
    44d8:	1104b03a 	or	r2,r2,r4
    44dc:	1004963a 	slli	r2,r2,24
    44e0:	1886b03a 	or	r3,r3,r2
    44e4:	e0bff817 	ldw	r2,-32(fp)
    44e8:	10800017 	ldw	r2,0(r2)
    44ec:	18805c1e 	bne	r3,r2,4660 <dhcp_recv+0x2ec>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
    44f0:	e13ff817 	ldw	r4,-32(fp)
    44f4:	e17ffd17 	ldw	r5,-12(fp)
    44f8:	0003a680 	call	3a68 <dhcp_parse_reply>
    44fc:	10803fcc 	andi	r2,r2,255
    4500:	1080201c 	xori	r2,r2,128
    4504:	10bfe004 	addi	r2,r2,-128
    4508:	1000571e 	bne	r2,zero,4668 <dhcp_recv+0x2f4>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
    450c:	00800134 	movhi	r2,4
    4510:	10918104 	addi	r2,r2,17924
    4514:	10800043 	ldbu	r2,1(r2)
    4518:	10803fcc 	andi	r2,r2,255
    451c:	10005426 	beq	r2,zero,4670 <dhcp_recv+0x2fc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
    4520:	00800134 	movhi	r2,4
    4524:	10918404 	addi	r2,r2,17936
    4528:	10800117 	ldw	r2,4(r2)
    452c:	e0bffa05 	stb	r2,-24(fp)
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
    4530:	e0bffa03 	ldbu	r2,-24(fp)
    4534:	10800158 	cmpnei	r2,r2,5
    4538:	10001c1e 	bne	r2,zero,45ac <dhcp_recv+0x238>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
    453c:	e0bff817 	ldw	r2,-32(fp)
    4540:	10800303 	ldbu	r2,12(r2)
    4544:	10803fcc 	andi	r2,r2,255
    4548:	10800058 	cmpnei	r2,r2,1
    454c:	1000051e 	bne	r2,zero,4564 <dhcp_recv+0x1f0>
      dhcp_handle_ack(netif);
    4550:	e13ff717 	ldw	r4,-36(fp)
    4554:	000219c0 	call	219c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
    4558:	e13ff717 	ldw	r4,-36(fp)
    455c:	00019ec0 	call	19ec <dhcp_check>
    4560:	00004406 	br	4674 <dhcp_recv+0x300>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
    4564:	e0bff817 	ldw	r2,-32(fp)
    4568:	10800303 	ldbu	r2,12(r2)
    456c:	10803fcc 	andi	r2,r2,255
    4570:	108000e0 	cmpeqi	r2,r2,3
    4574:	10000a1e 	bne	r2,zero,45a0 <dhcp_recv+0x22c>
    4578:	e0bff817 	ldw	r2,-32(fp)
    457c:	10800303 	ldbu	r2,12(r2)
    4580:	10803fcc 	andi	r2,r2,255
    4584:	10800120 	cmpeqi	r2,r2,4
    4588:	1000051e 	bne	r2,zero,45a0 <dhcp_recv+0x22c>
    458c:	e0bff817 	ldw	r2,-32(fp)
    4590:	10800303 	ldbu	r2,12(r2)
    4594:	10803fcc 	andi	r2,r2,255
    4598:	10800158 	cmpnei	r2,r2,5
    459c:	1000351e 	bne	r2,zero,4674 <dhcp_recv+0x300>
      dhcp_bind(netif);
    45a0:	e13ff717 	ldw	r4,-36(fp)
    45a4:	0002d1c0 	call	2d1c <dhcp_bind>
    45a8:	00003206 	br	4674 <dhcp_recv+0x300>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    45ac:	e0bffa03 	ldbu	r2,-24(fp)
    45b0:	10800198 	cmpnei	r2,r2,6
    45b4:	1000171e 	bne	r2,zero,4614 <dhcp_recv+0x2a0>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
    45b8:	e0bff817 	ldw	r2,-32(fp)
    45bc:	10800303 	ldbu	r2,12(r2)
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    45c0:	10803fcc 	andi	r2,r2,255
    45c4:	108000e0 	cmpeqi	r2,r2,3
    45c8:	10000f1e 	bne	r2,zero,4608 <dhcp_recv+0x294>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
    45cc:	e0bff817 	ldw	r2,-32(fp)
    45d0:	10800303 	ldbu	r2,12(r2)
    45d4:	10803fcc 	andi	r2,r2,255
    45d8:	10800060 	cmpeqi	r2,r2,1
    45dc:	10000a1e 	bne	r2,zero,4608 <dhcp_recv+0x294>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
    45e0:	e0bff817 	ldw	r2,-32(fp)
    45e4:	10800303 	ldbu	r2,12(r2)
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
    45e8:	10803fcc 	andi	r2,r2,255
    45ec:	10800120 	cmpeqi	r2,r2,4
    45f0:	1000051e 	bne	r2,zero,4608 <dhcp_recv+0x294>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
    45f4:	e0bff817 	ldw	r2,-32(fp)
    45f8:	10800303 	ldbu	r2,12(r2)
    45fc:	10803fcc 	andi	r2,r2,255
    4600:	10800158 	cmpnei	r2,r2,5
    4604:	1000031e 	bne	r2,zero,4614 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
    4608:	e13ff717 	ldw	r4,-36(fp)
    460c:	000196c0 	call	196c <dhcp_handle_nak>
    4610:	00001806 	br	4674 <dhcp_recv+0x300>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
    4614:	e0bffa03 	ldbu	r2,-24(fp)
    4618:	10800098 	cmpnei	r2,r2,2
    461c:	1000151e 	bne	r2,zero,4674 <dhcp_recv+0x300>
    4620:	e0bff817 	ldw	r2,-32(fp)
    4624:	10800303 	ldbu	r2,12(r2)
    4628:	10803fcc 	andi	r2,r2,255
    462c:	10800198 	cmpnei	r2,r2,6
    4630:	1000101e 	bne	r2,zero,4674 <dhcp_recv+0x300>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
    4634:	e0bff817 	ldw	r2,-32(fp)
    4638:	1000068d 	sth	zero,26(r2)
    /* remember offered lease */
    dhcp_handle_offer(netif);
    463c:	e13ff717 	ldw	r4,-36(fp)
    4640:	0001a840 	call	1a84 <dhcp_handle_offer>
    4644:	00000b06 	br	4674 <dhcp_recv+0x300>

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
    4648:	0001883a 	nop
    464c:	00000906 	br	4674 <dhcp_recv+0x300>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
    4650:	0001883a 	nop
    4654:	00000706 	br	4674 <dhcp_recv+0x300>
  for (i = 0; i < netif->hwaddr_len; i++) {
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    4658:	0001883a 	nop
    465c:	00000506 	br	4674 <dhcp_recv+0x300>
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
    4660:	0001883a 	nop
    4664:	00000306 	br	4674 <dhcp_recv+0x300>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
    4668:	0001883a 	nop
    466c:	00000106 	br	4674 <dhcp_recv+0x300>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
    4670:	0001883a 	nop
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
    4674:	e0bff817 	ldw	r2,-32(fp)
    4678:	10000215 	stw	zero,8(r2)
  pbuf_free(p);
    467c:	e13ffd17 	ldw	r4,-12(fp)
    4680:	000a4200 	call	a420 <pbuf_free>
}
    4684:	e037883a 	mov	sp,fp
    4688:	dfc00117 	ldw	ra,4(sp)
    468c:	df000017 	ldw	fp,0(sp)
    4690:	dec00204 	addi	sp,sp,8
    4694:	f800283a 	ret

00004698 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
    4698:	defffa04 	addi	sp,sp,-24
    469c:	dfc00515 	stw	ra,20(sp)
    46a0:	df000415 	stw	fp,16(sp)
    46a4:	df000404 	addi	fp,sp,16
    46a8:	e13ffd15 	stw	r4,-12(fp)
    46ac:	e17ffe15 	stw	r5,-8(fp)
    46b0:	3005883a 	mov	r2,r6
    46b4:	e0bfff05 	stb	r2,-4(fp)
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
    46b8:	e0bffd17 	ldw	r2,-12(fp)
    46bc:	1000091e 	bne	r2,zero,46e4 <dhcp_create_msg+0x4c>
    46c0:	010000f4 	movhi	r4,3
    46c4:	213a8404 	addi	r4,r4,-5616
    46c8:	014000f4 	movhi	r5,3
    46cc:	297b2904 	addi	r5,r5,-4956
    46d0:	01819f04 	movi	r6,1660
    46d4:	01c000f4 	movhi	r7,3
    46d8:	39fa9204 	addi	r7,r7,-5560
    46dc:	0017c440 	call	17c44 <printf>
    46e0:	003fff06 	br	46e0 <dhcp_create_msg+0x48>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
    46e4:	e0bffe17 	ldw	r2,-8(fp)
    46e8:	1000091e 	bne	r2,zero,4710 <dhcp_create_msg+0x78>
    46ec:	010000f4 	movhi	r4,3
    46f0:	213a8404 	addi	r4,r4,-5616
    46f4:	014000f4 	movhi	r5,3
    46f8:	297b3104 	addi	r5,r5,-4924
    46fc:	01819f44 	movi	r6,1661
    4700:	01c000f4 	movhi	r7,3
    4704:	39fa9204 	addi	r7,r7,-5560
    4708:	0017c440 	call	17c44 <printf>
    470c:	003fff06 	br	470c <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
    4710:	e0bffe17 	ldw	r2,-8(fp)
    4714:	10800417 	ldw	r2,16(r2)
    4718:	10000926 	beq	r2,zero,4740 <dhcp_create_msg+0xa8>
    471c:	010000f4 	movhi	r4,3
    4720:	213a8404 	addi	r4,r4,-5616
    4724:	014000f4 	movhi	r5,3
    4728:	297b3904 	addi	r5,r5,-4892
    472c:	01819f84 	movi	r6,1662
    4730:	01c000f4 	movhi	r7,3
    4734:	39fa9204 	addi	r7,r7,-5560
    4738:	0017c440 	call	17c44 <printf>
    473c:	003fff06 	br	473c <dhcp_create_msg+0xa4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
    4740:	e0bffe17 	ldw	r2,-8(fp)
    4744:	10800517 	ldw	r2,20(r2)
    4748:	10000926 	beq	r2,zero,4770 <dhcp_create_msg+0xd8>
    474c:	010000f4 	movhi	r4,3
    4750:	213a8404 	addi	r4,r4,-5616
    4754:	014000f4 	movhi	r5,3
    4758:	297b4304 	addi	r5,r5,-4852
    475c:	01819fc4 	movi	r6,1663
    4760:	01c000f4 	movhi	r7,3
    4764:	39fa9204 	addi	r7,r7,-5560
    4768:	0017c440 	call	17c44 <printf>
    476c:	003fff06 	br	476c <dhcp_create_msg+0xd4>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
    4770:	0009883a 	mov	r4,zero
    4774:	01404d04 	movi	r5,308
    4778:	000d883a 	mov	r6,zero
    477c:	0009a600 	call	9a60 <pbuf_alloc>
    4780:	e0fffe17 	ldw	r3,-8(fp)
    4784:	18800415 	stw	r2,16(r3)
  if (dhcp->p_out == NULL) {
    4788:	e0bffe17 	ldw	r2,-8(fp)
    478c:	10800417 	ldw	r2,16(r2)
    4790:	1000021e 	bne	r2,zero,479c <dhcp_create_msg+0x104>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
    4794:	00bfffc4 	movi	r2,-1
    4798:	0000ef06 	br	4b58 <dhcp_create_msg+0x4c0>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
    479c:	e0bffe17 	ldw	r2,-8(fp)
    47a0:	10800417 	ldw	r2,16(r2)
    47a4:	1080028b 	ldhu	r2,10(r2)
    47a8:	10bfffcc 	andi	r2,r2,65535
    47ac:	10804d28 	cmpgeui	r2,r2,308
    47b0:	1000091e 	bne	r2,zero,47d8 <dhcp_create_msg+0x140>
    47b4:	010000f4 	movhi	r4,3
    47b8:	213a8404 	addi	r4,r4,-5616
    47bc:	014000f4 	movhi	r5,3
    47c0:	297b4d04 	addi	r5,r5,-4812
    47c4:	0181a1c4 	movi	r6,1671
    47c8:	01c000f4 	movhi	r7,3
    47cc:	39fa9204 	addi	r7,r7,-5560
    47d0:	0017c440 	call	17c44 <printf>
    47d4:	003fff06 	br	47d4 <dhcp_create_msg+0x13c>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
    47d8:	e0bffe17 	ldw	r2,-8(fp)
    47dc:	10800343 	ldbu	r2,13(r2)
    47e0:	10803fcc 	andi	r2,r2,255
    47e4:	1000031e 	bne	r2,zero,47f4 <dhcp_create_msg+0x15c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
    47e8:	d0a00017 	ldw	r2,-32768(gp)
    47ec:	10800044 	addi	r2,r2,1
    47f0:	d0a00015 	stw	r2,-32768(gp)
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
    47f4:	d0e00017 	ldw	r3,-32768(gp)
    47f8:	e0bffe17 	ldw	r2,-8(fp)
    47fc:	10c00015 	stw	r3,0(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
    4800:	e0bffe17 	ldw	r2,-8(fp)
    4804:	10800417 	ldw	r2,16(r2)
    4808:	10c00117 	ldw	r3,4(r2)
    480c:	e0bffe17 	ldw	r2,-8(fp)
    4810:	10c00515 	stw	r3,20(r2)

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
    4814:	e0bffe17 	ldw	r2,-8(fp)
    4818:	10800517 	ldw	r2,20(r2)
    481c:	00c00044 	movi	r3,1
    4820:	10c00005 	stb	r3,0(r2)
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
    4824:	e0bffe17 	ldw	r2,-8(fp)
    4828:	10800517 	ldw	r2,20(r2)
    482c:	00c00044 	movi	r3,1
    4830:	10c00045 	stb	r3,1(r2)
  dhcp->msg_out->hlen = netif->hwaddr_len;
    4834:	e0bffe17 	ldw	r2,-8(fp)
    4838:	10800517 	ldw	r2,20(r2)
    483c:	e0fffd17 	ldw	r3,-12(fp)
    4840:	18c00983 	ldbu	r3,38(r3)
    4844:	10c00085 	stb	r3,2(r2)
  dhcp->msg_out->hops = 0;
    4848:	e0bffe17 	ldw	r2,-8(fp)
    484c:	10800517 	ldw	r2,20(r2)
    4850:	100000c5 	stb	zero,3(r2)
  dhcp->msg_out->xid = htonl(dhcp->xid);
    4854:	e0bffe17 	ldw	r2,-8(fp)
    4858:	10800517 	ldw	r2,20(r2)
    485c:	e0fffe17 	ldw	r3,-8(fp)
    4860:	18c00017 	ldw	r3,0(r3)
    4864:	1808d63a 	srli	r4,r3,24
    4868:	e0fffe17 	ldw	r3,-8(fp)
    486c:	18c00017 	ldw	r3,0(r3)
    4870:	1806d23a 	srli	r3,r3,8
    4874:	18ffc00c 	andi	r3,r3,65280
    4878:	20c8b03a 	or	r4,r4,r3
    487c:	e0fffe17 	ldw	r3,-8(fp)
    4880:	18c00017 	ldw	r3,0(r3)
    4884:	18ffc00c 	andi	r3,r3,65280
    4888:	1806923a 	slli	r3,r3,8
    488c:	20c8b03a 	or	r4,r4,r3
    4890:	e0fffe17 	ldw	r3,-8(fp)
    4894:	18c00017 	ldw	r3,0(r3)
    4898:	1806963a 	slli	r3,r3,24
    489c:	20c6b03a 	or	r3,r4,r3
    48a0:	193fffcc 	andi	r4,r3,65535
    48a4:	1140010b 	ldhu	r5,4(r2)
    48a8:	280a703a 	and	r5,r5,zero
    48ac:	2908b03a 	or	r4,r5,r4
    48b0:	1100010d 	sth	r4,4(r2)
    48b4:	1806d43a 	srli	r3,r3,16
    48b8:	1100018b 	ldhu	r4,6(r2)
    48bc:	2008703a 	and	r4,r4,zero
    48c0:	20c6b03a 	or	r3,r4,r3
    48c4:	10c0018d 	sth	r3,6(r2)
  dhcp->msg_out->secs = 0;
    48c8:	e0bffe17 	ldw	r2,-8(fp)
    48cc:	10800517 	ldw	r2,20(r2)
    48d0:	1000020d 	sth	zero,8(r2)
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
    48d4:	e0bffe17 	ldw	r2,-8(fp)
    48d8:	10800517 	ldw	r2,20(r2)
    48dc:	1000028d 	sth	zero,10(r2)
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	10800517 	ldw	r2,20(r2)
    48e8:	10c0030b 	ldhu	r3,12(r2)
    48ec:	1806703a 	and	r3,r3,zero
    48f0:	10c0030d 	sth	r3,12(r2)
    48f4:	10c0038b 	ldhu	r3,14(r2)
    48f8:	1806703a 	and	r3,r3,zero
    48fc:	10c0038d 	sth	r3,14(r2)
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
    4900:	e0bfff03 	ldbu	r2,-4(fp)
    4904:	10800220 	cmpeqi	r2,r2,8
    4908:	1000101e 	bne	r2,zero,494c <dhcp_create_msg+0x2b4>
    490c:	e0bfff03 	ldbu	r2,-4(fp)
    4910:	10800120 	cmpeqi	r2,r2,4
    4914:	10000d1e 	bne	r2,zero,494c <dhcp_create_msg+0x2b4>
    4918:	e0bfff03 	ldbu	r2,-4(fp)
    491c:	108000d8 	cmpnei	r2,r2,3
    4920:	1000181e 	bne	r2,zero,4984 <dhcp_create_msg+0x2ec>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
    4924:	e0bffe17 	ldw	r2,-8(fp)
    4928:	10800303 	ldbu	r2,12(r2)
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
    492c:	10803fcc 	andi	r2,r2,255
    4930:	10800160 	cmpeqi	r2,r2,5
    4934:	1000051e 	bne	r2,zero,494c <dhcp_create_msg+0x2b4>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
    4938:	e0bffe17 	ldw	r2,-8(fp)
    493c:	10800303 	ldbu	r2,12(r2)
    4940:	10803fcc 	andi	r2,r2,255
    4944:	10800118 	cmpnei	r2,r2,4
    4948:	10000e1e 	bne	r2,zero,4984 <dhcp_create_msg+0x2ec>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
    494c:	e0bffe17 	ldw	r2,-8(fp)
    4950:	10800517 	ldw	r2,20(r2)
    4954:	e0fffd17 	ldw	r3,-12(fp)
    4958:	18c00117 	ldw	r3,4(r3)
    495c:	193fffcc 	andi	r4,r3,65535
    4960:	1140030b 	ldhu	r5,12(r2)
    4964:	280a703a 	and	r5,r5,zero
    4968:	2908b03a 	or	r4,r5,r4
    496c:	1100030d 	sth	r4,12(r2)
    4970:	1806d43a 	srli	r3,r3,16
    4974:	1100038b 	ldhu	r4,14(r2)
    4978:	2008703a 	and	r4,r4,zero
    497c:	20c6b03a 	or	r3,r4,r3
    4980:	10c0038d 	sth	r3,14(r2)
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
    4984:	e0bffe17 	ldw	r2,-8(fp)
    4988:	10800517 	ldw	r2,20(r2)
    498c:	10c0040b 	ldhu	r3,16(r2)
    4990:	1806703a 	and	r3,r3,zero
    4994:	10c0040d 	sth	r3,16(r2)
    4998:	10c0048b 	ldhu	r3,18(r2)
    499c:	1806703a 	and	r3,r3,zero
    49a0:	10c0048d 	sth	r3,18(r2)
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
    49a4:	e0bffe17 	ldw	r2,-8(fp)
    49a8:	10800517 	ldw	r2,20(r2)
    49ac:	10c0050b 	ldhu	r3,20(r2)
    49b0:	1806703a 	and	r3,r3,zero
    49b4:	10c0050d 	sth	r3,20(r2)
    49b8:	10c0058b 	ldhu	r3,22(r2)
    49bc:	1806703a 	and	r3,r3,zero
    49c0:	10c0058d 	sth	r3,22(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
    49c4:	e0bffe17 	ldw	r2,-8(fp)
    49c8:	10800517 	ldw	r2,20(r2)
    49cc:	10c0060b 	ldhu	r3,24(r2)
    49d0:	1806703a 	and	r3,r3,zero
    49d4:	10c0060d 	sth	r3,24(r2)
    49d8:	10c0068b 	ldhu	r3,26(r2)
    49dc:	1806703a 	and	r3,r3,zero
    49e0:	10c0068d 	sth	r3,26(r2)
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    49e4:	e03ffc0d 	sth	zero,-16(fp)
    49e8:	00001606 	br	4a44 <dhcp_create_msg+0x3ac>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
    49ec:	e0bffe17 	ldw	r2,-8(fp)
    49f0:	11000517 	ldw	r4,20(r2)
    49f4:	e0fffc0b 	ldhu	r3,-16(fp)
    49f8:	e0bffd17 	ldw	r2,-12(fp)
    49fc:	10800983 	ldbu	r2,38(r2)
    4a00:	10803fcc 	andi	r2,r2,255
    4a04:	10bfffcc 	andi	r2,r2,65535
    4a08:	e17ffc0b 	ldhu	r5,-16(fp)
    4a0c:	2880062e 	bgeu	r5,r2,4a28 <dhcp_create_msg+0x390>
    4a10:	e0bffc0b 	ldhu	r2,-16(fp)
    4a14:	e17ffd17 	ldw	r5,-12(fp)
    4a18:	2885883a 	add	r2,r5,r2
    4a1c:	10800904 	addi	r2,r2,36
    4a20:	108000c3 	ldbu	r2,3(r2)
    4a24:	00000106 	br	4a2c <dhcp_create_msg+0x394>
    4a28:	0005883a 	mov	r2,zero
    4a2c:	20c7883a 	add	r3,r4,r3
    4a30:	18c00704 	addi	r3,r3,28
    4a34:	18800005 	stb	r2,0(r3)
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    4a38:	e0bffc0b 	ldhu	r2,-16(fp)
    4a3c:	10800044 	addi	r2,r2,1
    4a40:	e0bffc0d 	sth	r2,-16(fp)
    4a44:	e0bffc0b 	ldhu	r2,-16(fp)
    4a48:	10800430 	cmpltui	r2,r2,16
    4a4c:	103fe71e 	bne	r2,zero,49ec <dhcp_create_msg+0x354>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    4a50:	e03ffc0d 	sth	zero,-16(fp)
    4a54:	00000906 	br	4a7c <dhcp_create_msg+0x3e4>
    dhcp->msg_out->sname[i] = 0;
    4a58:	e0bffe17 	ldw	r2,-8(fp)
    4a5c:	10c00517 	ldw	r3,20(r2)
    4a60:	e0bffc0b 	ldhu	r2,-16(fp)
    4a64:	1885883a 	add	r2,r3,r2
    4a68:	10800b04 	addi	r2,r2,44
    4a6c:	10000005 	stb	zero,0(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    4a70:	e0bffc0b 	ldhu	r2,-16(fp)
    4a74:	10800044 	addi	r2,r2,1
    4a78:	e0bffc0d 	sth	r2,-16(fp)
    4a7c:	e0bffc0b 	ldhu	r2,-16(fp)
    4a80:	10801030 	cmpltui	r2,r2,64
    4a84:	103ff41e 	bne	r2,zero,4a58 <dhcp_create_msg+0x3c0>
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    4a88:	e03ffc0d 	sth	zero,-16(fp)
    4a8c:	00000906 	br	4ab4 <dhcp_create_msg+0x41c>
    dhcp->msg_out->file[i] = 0;
    4a90:	e0bffe17 	ldw	r2,-8(fp)
    4a94:	10c00517 	ldw	r3,20(r2)
    4a98:	e0bffc0b 	ldhu	r2,-16(fp)
    4a9c:	1885883a 	add	r2,r3,r2
    4aa0:	10801b04 	addi	r2,r2,108
    4aa4:	10000005 	stb	zero,0(r2)
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    4aa8:	e0bffc0b 	ldhu	r2,-16(fp)
    4aac:	10800044 	addi	r2,r2,1
    4ab0:	e0bffc0d 	sth	r2,-16(fp)
    4ab4:	e0bffc0b 	ldhu	r2,-16(fp)
    4ab8:	10802030 	cmpltui	r2,r2,128
    4abc:	103ff41e 	bne	r2,zero,4a90 <dhcp_create_msg+0x3f8>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
    4ac0:	e0bffe17 	ldw	r2,-8(fp)
    4ac4:	10800517 	ldw	r2,20(r2)
    4ac8:	10c03b0b 	ldhu	r3,236(r2)
    4acc:	1806703a 	and	r3,r3,zero
    4ad0:	1809883a 	mov	r4,r3
    4ad4:	00e098c4 	movi	r3,-32157
    4ad8:	20c6b03a 	or	r3,r4,r3
    4adc:	10c03b0d 	sth	r3,236(r2)
    4ae0:	10c03b8b 	ldhu	r3,238(r2)
    4ae4:	1806703a 	and	r3,r3,zero
    4ae8:	18d8d4d4 	ori	r3,r3,25427
    4aec:	10c03b8d 	sth	r3,238(r2)
  dhcp->options_out_len = 0;
    4af0:	e0bffe17 	ldw	r2,-8(fp)
    4af4:	1000060d 	sth	zero,24(r2)
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    4af8:	e03ffc0d 	sth	zero,-16(fp)
    4afc:	00000a06 	br	4b28 <dhcp_create_msg+0x490>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
    4b00:	e0bffe17 	ldw	r2,-8(fp)
    4b04:	11000517 	ldw	r4,20(r2)
    4b08:	e0bffc0b 	ldhu	r2,-16(fp)
    4b0c:	e0fffc0b 	ldhu	r3,-16(fp)
    4b10:	2085883a 	add	r2,r4,r2
    4b14:	10803c04 	addi	r2,r2,240
    4b18:	10c00005 	stb	r3,0(r2)
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    4b1c:	e0bffc0b 	ldhu	r2,-16(fp)
    4b20:	10800044 	addi	r2,r2,1
    4b24:	e0bffc0d 	sth	r2,-16(fp)
    4b28:	e0bffc0b 	ldhu	r2,-16(fp)
    4b2c:	10801130 	cmpltui	r2,r2,68
    4b30:	103ff31e 	bne	r2,zero,4b00 <dhcp_create_msg+0x468>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
    4b34:	e13ffe17 	ldw	r4,-8(fp)
    4b38:	01400d44 	movi	r5,53
    4b3c:	01800044 	movi	r6,1
    4b40:	00036c40 	call	36c4 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
    4b44:	e0bfff03 	ldbu	r2,-4(fp)
    4b48:	e13ffe17 	ldw	r4,-8(fp)
    4b4c:	100b883a 	mov	r5,r2
    4b50:	00037a80 	call	37a8 <dhcp_option_byte>
  return ERR_OK;
    4b54:	0005883a 	mov	r2,zero
}
    4b58:	e037883a 	mov	sp,fp
    4b5c:	dfc00117 	ldw	ra,4(sp)
    4b60:	df000017 	ldw	fp,0(sp)
    4b64:	dec00204 	addi	sp,sp,8
    4b68:	f800283a 	ret

00004b6c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
    4b6c:	defffd04 	addi	sp,sp,-12
    4b70:	dfc00215 	stw	ra,8(sp)
    4b74:	df000115 	stw	fp,4(sp)
    4b78:	df000104 	addi	fp,sp,4
    4b7c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
    4b80:	e0bfff17 	ldw	r2,-4(fp)
    4b84:	1000091e 	bne	r2,zero,4bac <dhcp_delete_msg+0x40>
    4b88:	010000f4 	movhi	r4,3
    4b8c:	213a8404 	addi	r4,r4,-5616
    4b90:	014000f4 	movhi	r5,3
    4b94:	297b5d04 	addi	r5,r5,-4748
    4b98:	0181b244 	movi	r6,1737
    4b9c:	01c000f4 	movhi	r7,3
    4ba0:	39fa9204 	addi	r7,r7,-5560
    4ba4:	0017c440 	call	17c44 <printf>
    4ba8:	003fff06 	br	4ba8 <dhcp_delete_msg+0x3c>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
    4bac:	e0bfff17 	ldw	r2,-4(fp)
    4bb0:	10800417 	ldw	r2,16(r2)
    4bb4:	1000091e 	bne	r2,zero,4bdc <dhcp_delete_msg+0x70>
    4bb8:	010000f4 	movhi	r4,3
    4bbc:	213a8404 	addi	r4,r4,-5616
    4bc0:	014000f4 	movhi	r5,3
    4bc4:	297b6504 	addi	r5,r5,-4716
    4bc8:	0181b284 	movi	r6,1738
    4bcc:	01c000f4 	movhi	r7,3
    4bd0:	39fa9204 	addi	r7,r7,-5560
    4bd4:	0017c440 	call	17c44 <printf>
    4bd8:	003fff06 	br	4bd8 <dhcp_delete_msg+0x6c>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
    4bdc:	e0bfff17 	ldw	r2,-4(fp)
    4be0:	10800517 	ldw	r2,20(r2)
    4be4:	1000091e 	bne	r2,zero,4c0c <dhcp_delete_msg+0xa0>
    4be8:	010000f4 	movhi	r4,3
    4bec:	213a8404 	addi	r4,r4,-5616
    4bf0:	014000f4 	movhi	r5,3
    4bf4:	297b6f04 	addi	r5,r5,-4676
    4bf8:	0181b2c4 	movi	r6,1739
    4bfc:	01c000f4 	movhi	r7,3
    4c00:	39fa9204 	addi	r7,r7,-5560
    4c04:	0017c440 	call	17c44 <printf>
    4c08:	003fff06 	br	4c08 <dhcp_delete_msg+0x9c>
  if (dhcp->p_out != NULL) {
    4c0c:	e0bfff17 	ldw	r2,-4(fp)
    4c10:	10800417 	ldw	r2,16(r2)
    4c14:	10000426 	beq	r2,zero,4c28 <dhcp_delete_msg+0xbc>
    pbuf_free(dhcp->p_out);
    4c18:	e0bfff17 	ldw	r2,-4(fp)
    4c1c:	10800417 	ldw	r2,16(r2)
    4c20:	1009883a 	mov	r4,r2
    4c24:	000a4200 	call	a420 <pbuf_free>
  }
  dhcp->p_out = NULL;
    4c28:	e0bfff17 	ldw	r2,-4(fp)
    4c2c:	10000415 	stw	zero,16(r2)
  dhcp->msg_out = NULL;
    4c30:	e0bfff17 	ldw	r2,-4(fp)
    4c34:	10000515 	stw	zero,20(r2)
}
    4c38:	e037883a 	mov	sp,fp
    4c3c:	dfc00117 	ldw	ra,4(sp)
    4c40:	df000017 	ldw	fp,0(sp)
    4c44:	dec00204 	addi	sp,sp,8
    4c48:	f800283a 	ret

00004c4c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
    4c4c:	defffd04 	addi	sp,sp,-12
    4c50:	dfc00215 	stw	ra,8(sp)
    4c54:	df000115 	stw	fp,4(sp)
    4c58:	df000104 	addi	fp,sp,4
    4c5c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
    4c60:	e0bfff17 	ldw	r2,-4(fp)
    4c64:	1000091e 	bne	r2,zero,4c8c <dhcp_option_trailer+0x40>
    4c68:	010000f4 	movhi	r4,3
    4c6c:	213a8404 	addi	r4,r4,-5616
    4c70:	014000f4 	movhi	r5,3
    4c74:	297b7904 	addi	r5,r5,-4636
    4c78:	0181b784 	movi	r6,1758
    4c7c:	01c000f4 	movhi	r7,3
    4c80:	39fa9204 	addi	r7,r7,-5560
    4c84:	0017c440 	call	17c44 <printf>
    4c88:	003fff06 	br	4c88 <dhcp_option_trailer+0x3c>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
    4c8c:	e0bfff17 	ldw	r2,-4(fp)
    4c90:	10800517 	ldw	r2,20(r2)
    4c94:	1000091e 	bne	r2,zero,4cbc <dhcp_option_trailer+0x70>
    4c98:	010000f4 	movhi	r4,3
    4c9c:	213a8404 	addi	r4,r4,-5616
    4ca0:	014000f4 	movhi	r5,3
    4ca4:	297b8204 	addi	r5,r5,-4600
    4ca8:	0181b7c4 	movi	r6,1759
    4cac:	01c000f4 	movhi	r7,3
    4cb0:	39fa9204 	addi	r7,r7,-5560
    4cb4:	0017c440 	call	17c44 <printf>
    4cb8:	003fff06 	br	4cb8 <dhcp_option_trailer+0x6c>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
    4cbc:	e0bfff17 	ldw	r2,-4(fp)
    4cc0:	1080060b 	ldhu	r2,24(r2)
    4cc4:	10bfffcc 	andi	r2,r2,65535
    4cc8:	10801130 	cmpltui	r2,r2,68
    4ccc:	1000091e 	bne	r2,zero,4cf4 <dhcp_option_trailer+0xa8>
    4cd0:	010000f4 	movhi	r4,3
    4cd4:	213a8404 	addi	r4,r4,-5616
    4cd8:	014000f4 	movhi	r5,3
    4cdc:	297b8d04 	addi	r5,r5,-4556
    4ce0:	0181b804 	movi	r6,1760
    4ce4:	01c000f4 	movhi	r7,3
    4ce8:	39fa9204 	addi	r7,r7,-5560
    4cec:	0017c440 	call	17c44 <printf>
    4cf0:	003fff06 	br	4cf0 <dhcp_option_trailer+0xa4>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
    4cf4:	e0bfff17 	ldw	r2,-4(fp)
    4cf8:	11000517 	ldw	r4,20(r2)
    4cfc:	e0bfff17 	ldw	r2,-4(fp)
    4d00:	1080060b 	ldhu	r2,24(r2)
    4d04:	10ffffcc 	andi	r3,r2,65535
    4d08:	20c7883a 	add	r3,r4,r3
    4d0c:	18c03c04 	addi	r3,r3,240
    4d10:	013fffc4 	movi	r4,-1
    4d14:	19000005 	stb	r4,0(r3)
    4d18:	10800044 	addi	r2,r2,1
    4d1c:	1007883a 	mov	r3,r2
    4d20:	e0bfff17 	ldw	r2,-4(fp)
    4d24:	10c0060d 	sth	r3,24(r2)
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
    4d28:	00000c06 	br	4d5c <dhcp_option_trailer+0x110>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
    4d2c:	e0bfff17 	ldw	r2,-4(fp)
    4d30:	11000517 	ldw	r4,20(r2)
    4d34:	e0bfff17 	ldw	r2,-4(fp)
    4d38:	1080060b 	ldhu	r2,24(r2)
    4d3c:	10ffffcc 	andi	r3,r2,65535
    4d40:	20c7883a 	add	r3,r4,r3
    4d44:	18c03c04 	addi	r3,r3,240
    4d48:	18000005 	stb	zero,0(r3)
    4d4c:	10800044 	addi	r2,r2,1
    4d50:	1007883a 	mov	r3,r2
    4d54:	e0bfff17 	ldw	r2,-4(fp)
    4d58:	10c0060d 	sth	r3,24(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
    4d5c:	e0bfff17 	ldw	r2,-4(fp)
    4d60:	1080060b 	ldhu	r2,24(r2)
    4d64:	10bfffcc 	andi	r2,r2,65535
    4d68:	10801130 	cmpltui	r2,r2,68
    4d6c:	1000051e 	bne	r2,zero,4d84 <dhcp_option_trailer+0x138>
    4d70:	e0bfff17 	ldw	r2,-4(fp)
    4d74:	1080060b 	ldhu	r2,24(r2)
    4d78:	10bfffcc 	andi	r2,r2,65535
    4d7c:	108000cc 	andi	r2,r2,3
    4d80:	10000526 	beq	r2,zero,4d98 <dhcp_option_trailer+0x14c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    4d84:	e0bfff17 	ldw	r2,-4(fp)
    4d88:	1080060b 	ldhu	r2,24(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
    4d8c:	10bfffcc 	andi	r2,r2,65535
    4d90:	10801130 	cmpltui	r2,r2,68
    4d94:	103fe51e 	bne	r2,zero,4d2c <dhcp_option_trailer+0xe0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
    4d98:	e037883a 	mov	sp,fp
    4d9c:	dfc00117 	ldw	ra,4(sp)
    4da0:	df000017 	ldw	fp,0(sp)
    4da4:	dec00204 	addi	sp,sp,8
    4da8:	f800283a 	ret

00004dac <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
    4dac:	defffe04 	addi	sp,sp,-8
    4db0:	dfc00115 	stw	ra,4(sp)
    4db4:	df000015 	stw	fp,0(sp)
    4db8:	d839883a 	mov	fp,sp
  /* Modules initialization */
  stats_init();
    4dbc:	000b8280 	call	b828 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
    4dc0:	00084480 	call	8448 <mem_init>
  memp_init();
    4dc4:	0008e280 	call	8e28 <memp_init>
  pbuf_init();
  netif_init();
    4dc8:	00092b80 	call	92b8 <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
    4dcc:	00149e00 	call	149e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
    4dd0:	000b8440 	call	b844 <tcp_init>
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
    4dd4:	e037883a 	mov	sp,fp
    4dd8:	dfc00117 	ldw	ra,4(sp)
    4ddc:	df000017 	ldw	fp,0(sp)
    4de0:	dec00204 	addi	sp,sp,8
    4de4:	f800283a 	ret

00004de8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
    4de8:	defff304 	addi	sp,sp,-52
    4dec:	dfc00c15 	stw	ra,48(sp)
    4df0:	df000b15 	stw	fp,44(sp)
    4df4:	df000b04 	addi	fp,sp,44
    4df8:	e13ffe15 	stw	r4,-8(fp)
    4dfc:	e17fff15 	stw	r5,-4(fp)
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
    4e00:	00800134 	movhi	r2,4
    4e04:	10932304 	addi	r2,r2,19596
    4e08:	1080188b 	ldhu	r2,98(r2)
    4e0c:	10800044 	addi	r2,r2,1
    4e10:	1007883a 	mov	r3,r2
    4e14:	00800134 	movhi	r2,4
    4e18:	10932304 	addi	r2,r2,19596
    4e1c:	10c0188d 	sth	r3,98(r2)
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
    4e20:	e0bffe17 	ldw	r2,-8(fp)
    4e24:	10800117 	ldw	r2,4(r2)
    4e28:	e0bff815 	stw	r2,-32(fp)
  hlen = IPH_HL(iphdr) * 4;
    4e2c:	e0bff817 	ldw	r2,-32(fp)
    4e30:	10800003 	ldbu	r2,0(r2)
    4e34:	10803fcc 	andi	r2,r2,255
    4e38:	108003cc 	andi	r2,r2,15
    4e3c:	1085883a 	add	r2,r2,r2
    4e40:	1085883a 	add	r2,r2,r2
    4e44:	e0bffa0d 	sth	r2,-24(fp)
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
    4e48:	e0bffa0b 	ldhu	r2,-24(fp)
    4e4c:	0085c83a 	sub	r2,zero,r2
    4e50:	10bfffcc 	andi	r2,r2,65535
    4e54:	10a0001c 	xori	r2,r2,32768
    4e58:	10a00004 	addi	r2,r2,-32768
    4e5c:	e13ffe17 	ldw	r4,-8(fp)
    4e60:	100b883a 	mov	r5,r2
    4e64:	000a2280 	call	a228 <pbuf_header>
    4e68:	10803fcc 	andi	r2,r2,255
    4e6c:	10011d1e 	bne	r2,zero,52e4 <icmp_input+0x4fc>
    4e70:	e0bffe17 	ldw	r2,-8(fp)
    4e74:	1080020b 	ldhu	r2,8(r2)
    4e78:	10bfffcc 	andi	r2,r2,65535
    4e7c:	10800130 	cmpltui	r2,r2,4
    4e80:	1001181e 	bne	r2,zero,52e4 <icmp_input+0x4fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
    4e84:	e0bffe17 	ldw	r2,-8(fp)
    4e88:	10800117 	ldw	r2,4(r2)
    4e8c:	10800003 	ldbu	r2,0(r2)
    4e90:	e0bffa85 	stb	r2,-22(fp)
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
    4e94:	e0bffa83 	ldbu	r2,-22(fp)
    4e98:	10010d26 	beq	r2,zero,52d0 <icmp_input+0x4e8>
    4e9c:	10800220 	cmpeqi	r2,r2,8
    4ea0:	1000fa26 	beq	r2,zero,528c <icmp_input+0x4a4>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
    4ea4:	00800044 	movi	r2,1
    4ea8:	e0bff915 	stw	r2,-28(fp)
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
    4eac:	008000f4 	movhi	r2,3
    4eb0:	109bd204 	addi	r2,r2,28488
    4eb4:	10800017 	ldw	r2,0(r2)
    4eb8:	10803c0c 	andi	r2,r2,240
    4ebc:	10803818 	cmpnei	r2,r2,224
    4ec0:	1000011e 	bne	r2,zero,4ec8 <icmp_input+0xe0>
        accepted = 0;
    4ec4:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
    4ec8:	008000f4 	movhi	r2,3
    4ecc:	109bd204 	addi	r2,r2,28488
    4ed0:	10800017 	ldw	r2,0(r2)
    4ed4:	1009883a 	mov	r4,r2
    4ed8:	e17fff17 	ldw	r5,-4(fp)
    4edc:	00067940 	call	6794 <ip4_addr_isbroadcast>
    4ee0:	10803fcc 	andi	r2,r2,255
    4ee4:	10000126 	beq	r2,zero,4eec <icmp_input+0x104>
        accepted = 0;
    4ee8:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
    4eec:	e0bff917 	ldw	r2,-28(fp)
    4ef0:	10000b1e 	bne	r2,zero,4f20 <icmp_input+0x138>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
    4ef4:	00800134 	movhi	r2,4
    4ef8:	10932304 	addi	r2,r2,19596
    4efc:	10801d0b 	ldhu	r2,116(r2)
    4f00:	10800044 	addi	r2,r2,1
    4f04:	1007883a 	mov	r3,r2
    4f08:	00800134 	movhi	r2,4
    4f0c:	10932304 	addi	r2,r2,19596
    4f10:	10c01d0d 	sth	r3,116(r2)
        pbuf_free(p);
    4f14:	e13ffe17 	ldw	r4,-8(fp)
    4f18:	000a4200 	call	a420 <pbuf_free>
        return;
    4f1c:	00010806 	br	5340 <icmp_input+0x558>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
    4f20:	e0bffe17 	ldw	r2,-8(fp)
    4f24:	1080020b 	ldhu	r2,8(r2)
    4f28:	10bfffcc 	andi	r2,r2,65535
    4f2c:	10800228 	cmpgeui	r2,r2,8
    4f30:	1000eb26 	beq	r2,zero,52e0 <icmp_input+0x4f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
    4f34:	e13ffe17 	ldw	r4,-8(fp)
    4f38:	0005b400 	call	5b40 <inet_chksum_pbuf>
    4f3c:	10bfffcc 	andi	r2,r2,65535
    4f40:	10000b26 	beq	r2,zero,4f70 <icmp_input+0x188>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
    4f44:	e13ffe17 	ldw	r4,-8(fp)
    4f48:	000a4200 	call	a420 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
    4f4c:	00800134 	movhi	r2,4
    4f50:	10932304 	addi	r2,r2,19596
    4f54:	10801a0b 	ldhu	r2,104(r2)
    4f58:	10800044 	addi	r2,r2,1
    4f5c:	1007883a 	mov	r3,r2
    4f60:	00800134 	movhi	r2,4
    4f64:	10932304 	addi	r2,r2,19596
    4f68:	10c01a0d 	sth	r3,104(r2)
      snmp_inc_icmpinerrors();
      return;
    4f6c:	0000f406 	br	5340 <icmp_input+0x558>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    4f70:	e13ffe17 	ldw	r4,-8(fp)
    4f74:	01400884 	movi	r5,34
    4f78:	000a2280 	call	a228 <pbuf_header>
    4f7c:	10803fcc 	andi	r2,r2,255
    4f80:	10005326 	beq	r2,zero,50d0 <icmp_input+0x2e8>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
    4f84:	e0bffa0f 	ldh	r2,-24(fp)
    4f88:	e13ffe17 	ldw	r4,-8(fp)
    4f8c:	100b883a 	mov	r5,r2
    4f90:	000a2280 	call	a228 <pbuf_header>
    4f94:	10803fcc 	andi	r2,r2,255
    4f98:	10000926 	beq	r2,zero,4fc0 <icmp_input+0x1d8>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
    4f9c:	010000f4 	movhi	r4,3
    4fa0:	213b9d04 	addi	r4,r4,-4492
    4fa4:	014000f4 	movhi	r5,3
    4fa8:	297ba704 	addi	r5,r5,-4452
    4fac:	01802604 	movi	r6,152
    4fb0:	01c000f4 	movhi	r7,3
    4fb4:	39fbb404 	addi	r7,r7,-4400
    4fb8:	0017c440 	call	17c44 <printf>
    4fbc:	003fff06 	br	4fbc <icmp_input+0x1d4>
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
    4fc0:	e0bffe17 	ldw	r2,-8(fp)
    4fc4:	1080020b 	ldhu	r2,8(r2)
    4fc8:	10bfffcc 	andi	r2,r2,65535
    4fcc:	01000084 	movi	r4,2
    4fd0:	100b883a 	mov	r5,r2
    4fd4:	000d883a 	mov	r6,zero
    4fd8:	0009a600 	call	9a60 <pbuf_alloc>
    4fdc:	e0bffb15 	stw	r2,-20(fp)
      if (r == NULL) {
    4fe0:	e0bffb17 	ldw	r2,-20(fp)
    4fe4:	1000ca26 	beq	r2,zero,5310 <icmp_input+0x528>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	1080028b 	ldhu	r2,10(r2)
    4ff0:	10ffffcc 	andi	r3,r2,65535
    4ff4:	e0bffa0f 	ldh	r2,-24(fp)
    4ff8:	10800204 	addi	r2,r2,8
    4ffc:	1880092e 	bgeu	r3,r2,5024 <icmp_input+0x23c>
    5000:	010000f4 	movhi	r4,3
    5004:	213b9d04 	addi	r4,r4,-4492
    5008:	014000f4 	movhi	r5,3
    500c:	297bbb04 	addi	r5,r5,-4372
    5010:	01802884 	movi	r6,162
    5014:	01c000f4 	movhi	r7,3
    5018:	39fbb404 	addi	r7,r7,-4400
    501c:	0017c440 	call	17c44 <printf>
    5020:	003fff06 	br	5020 <icmp_input+0x238>
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
    5024:	e13ffb17 	ldw	r4,-20(fp)
    5028:	e17ffe17 	ldw	r5,-8(fp)
    502c:	000a9240 	call	a924 <pbuf_copy>
    5030:	10803fcc 	andi	r2,r2,255
    5034:	1080201c 	xori	r2,r2,128
    5038:	10bfe004 	addi	r2,r2,-128
    503c:	10000926 	beq	r2,zero,5064 <icmp_input+0x27c>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
    5040:	010000f4 	movhi	r4,3
    5044:	213b9d04 	addi	r4,r4,-4492
    5048:	014000f4 	movhi	r5,3
    504c:	297bc904 	addi	r5,r5,-4316
    5050:	01802944 	movi	r6,165
    5054:	01c000f4 	movhi	r7,3
    5058:	39fbb404 	addi	r7,r7,-4400
    505c:	0017c440 	call	17c44 <printf>
    5060:	003fff06 	br	5060 <icmp_input+0x278>
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
    5064:	e0bffb17 	ldw	r2,-20(fp)
    5068:	10800117 	ldw	r2,4(r2)
    506c:	e0bff815 	stw	r2,-32(fp)
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
    5070:	e0bffa0b 	ldhu	r2,-24(fp)
    5074:	0085c83a 	sub	r2,zero,r2
    5078:	10bfffcc 	andi	r2,r2,65535
    507c:	10a0001c 	xori	r2,r2,32768
    5080:	10a00004 	addi	r2,r2,-32768
    5084:	e13ffb17 	ldw	r4,-20(fp)
    5088:	100b883a 	mov	r5,r2
    508c:	000a2280 	call	a228 <pbuf_header>
    5090:	10803fcc 	andi	r2,r2,255
    5094:	10000926 	beq	r2,zero,50bc <icmp_input+0x2d4>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
    5098:	010000f4 	movhi	r4,3
    509c:	213b9d04 	addi	r4,r4,-4492
    50a0:	014000f4 	movhi	r5,3
    50a4:	297bd304 	addi	r5,r5,-4276
    50a8:	01802ac4 	movi	r6,171
    50ac:	01c000f4 	movhi	r7,3
    50b0:	39fbb404 	addi	r7,r7,-4400
    50b4:	0017c440 	call	17c44 <printf>
    50b8:	003fff06 	br	50b8 <icmp_input+0x2d0>
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
    50bc:	e13ffe17 	ldw	r4,-8(fp)
    50c0:	000a4200 	call	a420 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
    50c4:	e0bffb17 	ldw	r2,-20(fp)
    50c8:	e0bffe15 	stw	r2,-8(fp)
    50cc:	00000e06 	br	5108 <icmp_input+0x320>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    50d0:	e13ffe17 	ldw	r4,-8(fp)
    50d4:	017ff784 	movi	r5,-34
    50d8:	000a2280 	call	a228 <pbuf_header>
    50dc:	10803fcc 	andi	r2,r2,255
    50e0:	10000926 	beq	r2,zero,5108 <icmp_input+0x320>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
    50e4:	010000f4 	movhi	r4,3
    50e8:	213b9d04 	addi	r4,r4,-4492
    50ec:	014000f4 	movhi	r5,3
    50f0:	297bd304 	addi	r5,r5,-4276
    50f4:	01802d44 	movi	r6,181
    50f8:	01c000f4 	movhi	r7,3
    50fc:	39fbb404 	addi	r7,r7,-4400
    5100:	0017c440 	call	17c44 <printf>
    5104:	003fff06 	br	5104 <icmp_input+0x31c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
    5108:	e0bffe17 	ldw	r2,-8(fp)
    510c:	10800117 	ldw	r2,4(r2)
    5110:	e0bffc15 	stw	r2,-16(fp)
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
    5114:	008000f4 	movhi	r2,3
    5118:	109bd204 	addi	r2,r2,28488
    511c:	10c00017 	ldw	r3,0(r2)
    5120:	e0bff817 	ldw	r2,-32(fp)
    5124:	193fffcc 	andi	r4,r3,65535
    5128:	1140030b 	ldhu	r5,12(r2)
    512c:	280a703a 	and	r5,r5,zero
    5130:	2908b03a 	or	r4,r5,r4
    5134:	1100030d 	sth	r4,12(r2)
    5138:	1806d43a 	srli	r3,r3,16
    513c:	1100038b 	ldhu	r4,14(r2)
    5140:	2008703a 	and	r4,r4,zero
    5144:	20c6b03a 	or	r3,r4,r3
    5148:	10c0038d 	sth	r3,14(r2)
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
    514c:	008000f4 	movhi	r2,3
    5150:	109bd004 	addi	r2,r2,28480
    5154:	10c00017 	ldw	r3,0(r2)
    5158:	e0bff817 	ldw	r2,-32(fp)
    515c:	193fffcc 	andi	r4,r3,65535
    5160:	1140040b 	ldhu	r5,16(r2)
    5164:	280a703a 	and	r5,r5,zero
    5168:	2908b03a 	or	r4,r5,r4
    516c:	1100040d 	sth	r4,16(r2)
    5170:	1806d43a 	srli	r3,r3,16
    5174:	1100048b 	ldhu	r4,18(r2)
    5178:	2008703a 	and	r4,r4,zero
    517c:	20c6b03a 	or	r3,r4,r3
    5180:	10c0048d 	sth	r3,18(r2)
    ICMPH_TYPE_SET(iecho, ICMP_ER);
    5184:	e0bffc17 	ldw	r2,-16(fp)
    5188:	10000005 	stb	zero,0(r2)
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	1080008b 	ldhu	r2,2(r2)
    5194:	10bfffcc 	andi	r2,r2,65535
    5198:	10bffdf0 	cmpltui	r2,r2,65527
    519c:	1000071e 	bne	r2,zero,51bc <icmp_input+0x3d4>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	1080008b 	ldhu	r2,2(r2)
    51a8:	10800244 	addi	r2,r2,9
    51ac:	1007883a 	mov	r3,r2
    51b0:	e0bffc17 	ldw	r2,-16(fp)
    51b4:	10c0008d 	sth	r3,2(r2)
    51b8:	00000606 	br	51d4 <icmp_input+0x3ec>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    51bc:	e0bffc17 	ldw	r2,-16(fp)
    51c0:	1080008b 	ldhu	r2,2(r2)
    51c4:	10800204 	addi	r2,r2,8
    51c8:	1007883a 	mov	r3,r2
    51cc:	e0bffc17 	ldw	r2,-16(fp)
    51d0:	10c0008d 	sth	r3,2(r2)
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
    51d4:	e0bff817 	ldw	r2,-32(fp)
    51d8:	00ffffc4 	movi	r3,-1
    51dc:	10c00205 	stb	r3,8(r2)
    IPH_CHKSUM_SET(iphdr, 0);
    51e0:	e0bff817 	ldw	r2,-32(fp)
    51e4:	1000028d 	sth	zero,10(r2)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    51e8:	e13ff817 	ldw	r4,-32(fp)
    51ec:	01400504 	movi	r5,20
    51f0:	0005afc0 	call	5afc <inet_chksum>
    51f4:	e0fff817 	ldw	r3,-32(fp)
    51f8:	1880028d 	sth	r2,10(r3)
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
    51fc:	00800134 	movhi	r2,4
    5200:	10932304 	addi	r2,r2,19596
    5204:	1080180b 	ldhu	r2,96(r2)
    5208:	10800044 	addi	r2,r2,1
    520c:	1007883a 	mov	r3,r2
    5210:	00800134 	movhi	r2,4
    5214:	10932304 	addi	r2,r2,19596
    5218:	10c0180d 	sth	r3,96(r2)
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
    521c:	e0bffa0f 	ldh	r2,-24(fp)
    5220:	e13ffe17 	ldw	r4,-8(fp)
    5224:	100b883a 	mov	r5,r2
    5228:	000a2280 	call	a228 <pbuf_header>
    522c:	10803fcc 	andi	r2,r2,255
    5230:	10000926 	beq	r2,zero,5258 <icmp_input+0x470>
      LWIP_ASSERT("Can't move over header in packet", 0);
    5234:	010000f4 	movhi	r4,3
    5238:	213b9d04 	addi	r4,r4,-4492
    523c:	014000f4 	movhi	r5,3
    5240:	297be004 	addi	r5,r5,-4224
    5244:	01803684 	movi	r6,218
    5248:	01c000f4 	movhi	r7,3
    524c:	39fbb404 	addi	r7,r7,-4400
    5250:	0017c440 	call	17c44 <printf>
    5254:	003fff06 	br	5254 <icmp_input+0x46c>
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
    5258:	d8000015 	stw	zero,0(sp)
    525c:	00800044 	movi	r2,1
    5260:	d8800115 	stw	r2,4(sp)
    5264:	e0bfff17 	ldw	r2,-4(fp)
    5268:	d8800215 	stw	r2,8(sp)
    526c:	e13ffe17 	ldw	r4,-8(fp)
    5270:	014000f4 	movhi	r5,3
    5274:	295bd204 	addi	r5,r5,28488
    5278:	000d883a 	mov	r6,zero
    527c:	01c03fc4 	movi	r7,255
    5280:	00062400 	call	6240 <ip_output_if>
    5284:	e0bffd05 	stb	r2,-12(fp)
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
    5288:	00001206 	br	52d4 <icmp_input+0x4ec>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    528c:	00800134 	movhi	r2,4
    5290:	10932304 	addi	r2,r2,19596
    5294:	10801c0b 	ldhu	r2,112(r2)
    5298:	10800044 	addi	r2,r2,1
    529c:	1007883a 	mov	r3,r2
    52a0:	00800134 	movhi	r2,4
    52a4:	10932304 	addi	r2,r2,19596
    52a8:	10c01c0d 	sth	r3,112(r2)
    ICMP_STATS_INC(icmp.drop);
    52ac:	00800134 	movhi	r2,4
    52b0:	10932304 	addi	r2,r2,19596
    52b4:	1080198b 	ldhu	r2,102(r2)
    52b8:	10800044 	addi	r2,r2,1
    52bc:	1007883a 	mov	r3,r2
    52c0:	00800134 	movhi	r2,4
    52c4:	10932304 	addi	r2,r2,19596
    52c8:	10c0198d 	sth	r3,102(r2)
    52cc:	00000106 	br	52d4 <icmp_input+0x4ec>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
    52d0:	0001883a 	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
    52d4:	e13ffe17 	ldw	r4,-8(fp)
    52d8:	000a4200 	call	a420 <pbuf_free>
  return;
    52dc:	00001806 	br	5340 <icmp_input+0x558>
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    52e0:	0001883a 	nop
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
    52e4:	e13ffe17 	ldw	r4,-8(fp)
    52e8:	000a4200 	call	a420 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
    52ec:	00800134 	movhi	r2,4
    52f0:	10932304 	addi	r2,r2,19596
    52f4:	10801a8b 	ldhu	r2,106(r2)
    52f8:	10800044 	addi	r2,r2,1
    52fc:	1007883a 	mov	r3,r2
    5300:	00800134 	movhi	r2,4
    5304:	10932304 	addi	r2,r2,19596
    5308:	10c01a8d 	sth	r3,106(r2)
  snmp_inc_icmpinerrors();
  return;
    530c:	00000c06 	br	5340 <icmp_input+0x558>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
      if (r == NULL) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
    5310:	0001883a 	nop
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
    5314:	e13ffe17 	ldw	r4,-8(fp)
    5318:	000a4200 	call	a420 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
    531c:	00800134 	movhi	r2,4
    5320:	10932304 	addi	r2,r2,19596
    5324:	10801d0b 	ldhu	r2,116(r2)
    5328:	10800044 	addi	r2,r2,1
    532c:	1007883a 	mov	r3,r2
    5330:	00800134 	movhi	r2,4
    5334:	10932304 	addi	r2,r2,19596
    5338:	10c01d0d 	sth	r3,116(r2)
  snmp_inc_icmpinerrors();
  return;
    533c:	0001883a 	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
    5340:	e037883a 	mov	sp,fp
    5344:	dfc00117 	ldw	ra,4(sp)
    5348:	df000017 	ldw	fp,0(sp)
    534c:	dec00204 	addi	sp,sp,8
    5350:	f800283a 	ret

00005354 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
    5354:	defffc04 	addi	sp,sp,-16
    5358:	dfc00315 	stw	ra,12(sp)
    535c:	df000215 	stw	fp,8(sp)
    5360:	df000204 	addi	fp,sp,8
    5364:	e13ffe15 	stw	r4,-8(fp)
    5368:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_DUR, t);
    536c:	e0bfff17 	ldw	r2,-4(fp)
    5370:	10803fcc 	andi	r2,r2,255
    5374:	e13ffe17 	ldw	r4,-8(fp)
    5378:	014000c4 	movi	r5,3
    537c:	100d883a 	mov	r6,r2
    5380:	00053dc0 	call	53dc <icmp_send_response>
}
    5384:	e037883a 	mov	sp,fp
    5388:	dfc00117 	ldw	ra,4(sp)
    538c:	df000017 	ldw	fp,0(sp)
    5390:	dec00204 	addi	sp,sp,8
    5394:	f800283a 	ret

00005398 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
    5398:	defffc04 	addi	sp,sp,-16
    539c:	dfc00315 	stw	ra,12(sp)
    53a0:	df000215 	stw	fp,8(sp)
    53a4:	df000204 	addi	fp,sp,8
    53a8:	e13ffe15 	stw	r4,-8(fp)
    53ac:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_TE, t);
    53b0:	e0bfff17 	ldw	r2,-4(fp)
    53b4:	10803fcc 	andi	r2,r2,255
    53b8:	e13ffe17 	ldw	r4,-8(fp)
    53bc:	014002c4 	movi	r5,11
    53c0:	100d883a 	mov	r6,r2
    53c4:	00053dc0 	call	53dc <icmp_send_response>
}
    53c8:	e037883a 	mov	sp,fp
    53cc:	dfc00117 	ldw	ra,4(sp)
    53d0:	df000017 	ldw	fp,0(sp)
    53d4:	dec00204 	addi	sp,sp,8
    53d8:	f800283a 	ret

000053dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
    53dc:	defff504 	addi	sp,sp,-44
    53e0:	dfc00a15 	stw	ra,40(sp)
    53e4:	df000915 	stw	fp,36(sp)
    53e8:	df000904 	addi	fp,sp,36
    53ec:	e13ffd15 	stw	r4,-12(fp)
    53f0:	2807883a 	mov	r3,r5
    53f4:	3005883a 	mov	r2,r6
    53f8:	e0fffe05 	stb	r3,-8(fp)
    53fc:	e0bfff05 	stb	r2,-4(fp)
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
    5400:	01000044 	movi	r4,1
    5404:	01400904 	movi	r5,36
    5408:	000d883a 	mov	r6,zero
    540c:	0009a600 	call	9a60 <pbuf_alloc>
    5410:	e0bff915 	stw	r2,-28(fp)
                 PBUF_RAM);
  if (q == NULL) {
    5414:	e0bff917 	ldw	r2,-28(fp)
    5418:	10004a26 	beq	r2,zero,5544 <icmp_send_response+0x168>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
    541c:	e0bff917 	ldw	r2,-28(fp)
    5420:	1080028b 	ldhu	r2,10(r2)
    5424:	10bfffcc 	andi	r2,r2,65535
    5428:	10800928 	cmpgeui	r2,r2,36
    542c:	1000091e 	bne	r2,zero,5454 <icmp_send_response+0x78>
    5430:	010000f4 	movhi	r4,3
    5434:	213b9d04 	addi	r4,r4,-4492
    5438:	014000f4 	movhi	r5,3
    543c:	297be904 	addi	r5,r5,-4188
    5440:	01804cc4 	movi	r6,307
    5444:	01c000f4 	movhi	r7,3
    5448:	39fbb404 	addi	r7,r7,-4400
    544c:	0017c440 	call	17c44 <printf>
    5450:	003fff06 	br	5450 <icmp_send_response+0x74>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
    5454:	e0bffd17 	ldw	r2,-12(fp)
    5458:	10800117 	ldw	r2,4(r2)
    545c:	e0bffa15 	stw	r2,-24(fp)
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
    5460:	e0bff917 	ldw	r2,-28(fp)
    5464:	10800117 	ldw	r2,4(r2)
    5468:	e0bffb15 	stw	r2,-20(fp)
  icmphdr->type = type;
    546c:	e0bffb17 	ldw	r2,-20(fp)
    5470:	e0fffe03 	ldbu	r3,-8(fp)
    5474:	10c00005 	stb	r3,0(r2)
  icmphdr->code = code;
    5478:	e0bffb17 	ldw	r2,-20(fp)
    547c:	e0ffff03 	ldbu	r3,-4(fp)
    5480:	10c00045 	stb	r3,1(r2)
  icmphdr->id = 0;
    5484:	e0bffb17 	ldw	r2,-20(fp)
    5488:	1000010d 	sth	zero,4(r2)
  icmphdr->seqno = 0;
    548c:	e0bffb17 	ldw	r2,-20(fp)
    5490:	1000018d 	sth	zero,6(r2)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
    5494:	e0bff917 	ldw	r2,-28(fp)
    5498:	10800117 	ldw	r2,4(r2)
    549c:	10c00204 	addi	r3,r2,8
    54a0:	e0bffd17 	ldw	r2,-12(fp)
    54a4:	10800117 	ldw	r2,4(r2)
    54a8:	1809883a 	mov	r4,r3
    54ac:	100b883a 	mov	r5,r2
    54b0:	01800704 	movi	r6,28
    54b4:	0017a440 	call	17a44 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
    54b8:	e0bffb17 	ldw	r2,-20(fp)
    54bc:	1000008d 	sth	zero,2(r2)
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
    54c0:	e0bff917 	ldw	r2,-28(fp)
    54c4:	1080028b 	ldhu	r2,10(r2)
    54c8:	10bfffcc 	andi	r2,r2,65535
    54cc:	e13ffb17 	ldw	r4,-20(fp)
    54d0:	100b883a 	mov	r5,r2
    54d4:	0005afc0 	call	5afc <inet_chksum>
    54d8:	e0fffb17 	ldw	r3,-20(fp)
    54dc:	1880008d 	sth	r2,2(r3)
  ICMP_STATS_INC(icmp.xmit);
    54e0:	00800134 	movhi	r2,4
    54e4:	10932304 	addi	r2,r2,19596
    54e8:	1080180b 	ldhu	r2,96(r2)
    54ec:	10800044 	addi	r2,r2,1
    54f0:	1007883a 	mov	r3,r2
    54f4:	00800134 	movhi	r2,4
    54f8:	10932304 	addi	r2,r2,19596
    54fc:	10c0180d 	sth	r3,96(r2)
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
    5500:	e0bffa17 	ldw	r2,-24(fp)
    5504:	10c0030b 	ldhu	r3,12(r2)
    5508:	1080038b 	ldhu	r2,14(r2)
    550c:	1004943a 	slli	r2,r2,16
    5510:	10c4b03a 	or	r2,r2,r3
    5514:	e0bffc15 	stw	r2,-16(fp)
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
    5518:	e0bffc04 	addi	r2,fp,-16
    551c:	d8000015 	stw	zero,0(sp)
    5520:	00c00044 	movi	r3,1
    5524:	d8c00115 	stw	r3,4(sp)
    5528:	e13ff917 	ldw	r4,-28(fp)
    552c:	000b883a 	mov	r5,zero
    5530:	100d883a 	mov	r6,r2
    5534:	01c03fc4 	movi	r7,255
    5538:	00066a80 	call	66a8 <ip_output>
  pbuf_free(q);
    553c:	e13ff917 	ldw	r4,-28(fp)
    5540:	000a4200 	call	a420 <pbuf_free>
}
    5544:	e037883a 	mov	sp,fp
    5548:	dfc00117 	ldw	ra,4(sp)
    554c:	df000017 	ldw	fp,0(sp)
    5550:	dec00204 	addi	sp,sp,8
    5554:	f800283a 	ret

00005558 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
    5558:	defff804 	addi	sp,sp,-32
    555c:	df000715 	stw	fp,28(sp)
    5560:	df000704 	addi	fp,sp,28
    5564:	e13ffe15 	stw	r4,-8(fp)
    5568:	e17fff15 	stw	r5,-4(fp)
  u8_t *pb = (u8_t *)dataptr;
    556c:	e0bffe17 	ldw	r2,-8(fp)
    5570:	e0bff915 	stw	r2,-28(fp)
  u16_t *ps, t = 0;
    5574:	e03ffd0d 	sth	zero,-12(fp)
  u32_t sum = 0;
    5578:	e03ffb15 	stw	zero,-20(fp)
  int odd = ((mem_ptr_t)pb & 1);
    557c:	e0bff917 	ldw	r2,-28(fp)
    5580:	1080004c 	andi	r2,r2,1
    5584:	e0bffc15 	stw	r2,-16(fp)

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    5588:	e0bffc17 	ldw	r2,-16(fp)
    558c:	10000d26 	beq	r2,zero,55c4 <lwip_standard_chksum+0x6c>
    5590:	e0bfff17 	ldw	r2,-4(fp)
    5594:	00800b0e 	bge	zero,r2,55c4 <lwip_standard_chksum+0x6c>
    ((u8_t *)&t)[1] = *pb++;
    5598:	e0bffd04 	addi	r2,fp,-12
    559c:	10800044 	addi	r2,r2,1
    55a0:	e0fff917 	ldw	r3,-28(fp)
    55a4:	18c00003 	ldbu	r3,0(r3)
    55a8:	10c00005 	stb	r3,0(r2)
    55ac:	e0bff917 	ldw	r2,-28(fp)
    55b0:	10800044 	addi	r2,r2,1
    55b4:	e0bff915 	stw	r2,-28(fp)
    len--;
    55b8:	e0bfff17 	ldw	r2,-4(fp)
    55bc:	10bfffc4 	addi	r2,r2,-1
    55c0:	e0bfff15 	stw	r2,-4(fp)
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
    55c4:	e0bff917 	ldw	r2,-28(fp)
    55c8:	e0bffa15 	stw	r2,-24(fp)
  while (len > 1) {
    55cc:	00000c06 	br	5600 <lwip_standard_chksum+0xa8>
    sum += *ps++;
    55d0:	e0bffa17 	ldw	r2,-24(fp)
    55d4:	1080000b 	ldhu	r2,0(r2)
    55d8:	10bfffcc 	andi	r2,r2,65535
    55dc:	e0fffb17 	ldw	r3,-20(fp)
    55e0:	1885883a 	add	r2,r3,r2
    55e4:	e0bffb15 	stw	r2,-20(fp)
    55e8:	e0bffa17 	ldw	r2,-24(fp)
    55ec:	10800084 	addi	r2,r2,2
    55f0:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
    55f4:	e0bfff17 	ldw	r2,-4(fp)
    55f8:	10bfff84 	addi	r2,r2,-2
    55fc:	e0bfff15 	stw	r2,-4(fp)
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
    5600:	e0bfff17 	ldw	r2,-4(fp)
    5604:	10800088 	cmpgei	r2,r2,2
    5608:	103ff11e 	bne	r2,zero,55d0 <lwip_standard_chksum+0x78>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    560c:	e0bfff17 	ldw	r2,-4(fp)
    5610:	0080040e 	bge	zero,r2,5624 <lwip_standard_chksum+0xcc>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
    5614:	e0bffd04 	addi	r2,fp,-12
    5618:	e0fffa17 	ldw	r3,-24(fp)
    561c:	18c00003 	ldbu	r3,0(r3)
    5620:	10c00005 	stb	r3,0(r2)
  }

  /* Add end bytes */
  sum += t;
    5624:	e0bffd0b 	ldhu	r2,-12(fp)
    5628:	10bfffcc 	andi	r2,r2,65535
    562c:	e0fffb17 	ldw	r3,-20(fp)
    5630:	1885883a 	add	r2,r3,r2
    5634:	e0bffb15 	stw	r2,-20(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
    5638:	e0bffb17 	ldw	r2,-20(fp)
    563c:	1006d43a 	srli	r3,r2,16
    5640:	e0bffb17 	ldw	r2,-20(fp)
    5644:	10bfffcc 	andi	r2,r2,65535
    5648:	1885883a 	add	r2,r3,r2
    564c:	e0bffb15 	stw	r2,-20(fp)
  sum = FOLD_U32T(sum);
    5650:	e0bffb17 	ldw	r2,-20(fp)
    5654:	1006d43a 	srli	r3,r2,16
    5658:	e0bffb17 	ldw	r2,-20(fp)
    565c:	10bfffcc 	andi	r2,r2,65535
    5660:	1885883a 	add	r2,r3,r2
    5664:	e0bffb15 	stw	r2,-20(fp)

  /* Swap if alignment was odd */
  if (odd) {
    5668:	e0bffc17 	ldw	r2,-16(fp)
    566c:	10000826 	beq	r2,zero,5690 <lwip_standard_chksum+0x138>
    sum = SWAP_BYTES_IN_WORD(sum);
    5670:	e0bffb17 	ldw	r2,-20(fp)
    5674:	10bfc00c 	andi	r2,r2,65280
    5678:	1006d23a 	srli	r3,r2,8
    567c:	e0bffb17 	ldw	r2,-20(fp)
    5680:	1004923a 	slli	r2,r2,8
    5684:	10bfffcc 	andi	r2,r2,65535
    5688:	1884b03a 	or	r2,r3,r2
    568c:	e0bffb15 	stw	r2,-20(fp)
  }

  return (u16_t)sum;
    5690:	e0bffb17 	ldw	r2,-20(fp)
}
    5694:	e037883a 	mov	sp,fp
    5698:	df000017 	ldw	fp,0(sp)
    569c:	dec00104 	addi	sp,sp,4
    56a0:	f800283a 	ret

000056a4 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
    56a4:	defff504 	addi	sp,sp,-44
    56a8:	dfc00a15 	stw	ra,40(sp)
    56ac:	df000915 	stw	fp,36(sp)
    56b0:	df000904 	addi	fp,sp,36
    56b4:	e13ffb15 	stw	r4,-20(fp)
    56b8:	e17ffc15 	stw	r5,-16(fp)
    56bc:	e1bffd15 	stw	r6,-12(fp)
    56c0:	3805883a 	mov	r2,r7
    56c4:	e0c00217 	ldw	r3,8(fp)
    56c8:	e0bffe05 	stb	r2,-8(fp)
    56cc:	e0ffff0d 	sth	r3,-4(fp)
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
    56d0:	e03ff715 	stw	zero,-36(fp)
  swapped = 0;
    56d4:	e03ff905 	stb	zero,-28(fp)
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
    56d8:	e0bffb17 	ldw	r2,-20(fp)
    56dc:	e0bff815 	stw	r2,-32(fp)
    56e0:	00002606 	br	577c <inet_chksum_pseudo+0xd8>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
    56e4:	e0bff817 	ldw	r2,-32(fp)
    56e8:	10c00117 	ldw	r3,4(r2)
    56ec:	e0bff817 	ldw	r2,-32(fp)
    56f0:	1080028b 	ldhu	r2,10(r2)
    56f4:	10bfffcc 	andi	r2,r2,65535
    56f8:	1809883a 	mov	r4,r3
    56fc:	100b883a 	mov	r5,r2
    5700:	00055580 	call	5558 <lwip_standard_chksum>
    5704:	10bfffcc 	andi	r2,r2,65535
    5708:	e0fff717 	ldw	r3,-36(fp)
    570c:	1885883a 	add	r2,r3,r2
    5710:	e0bff715 	stw	r2,-36(fp)
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    5714:	e0bff717 	ldw	r2,-36(fp)
    5718:	1006d43a 	srli	r3,r2,16
    571c:	e0bff717 	ldw	r2,-36(fp)
    5720:	10bfffcc 	andi	r2,r2,65535
    5724:	1885883a 	add	r2,r3,r2
    5728:	e0bff715 	stw	r2,-36(fp)
    if (q->len % 2 != 0) {
    572c:	e0bff817 	ldw	r2,-32(fp)
    5730:	1080028b 	ldhu	r2,10(r2)
    5734:	1080004c 	andi	r2,r2,1
    5738:	10bfffcc 	andi	r2,r2,65535
    573c:	10000c26 	beq	r2,zero,5770 <inet_chksum_pseudo+0xcc>
      swapped = 1 - swapped;
    5740:	e0bff903 	ldbu	r2,-28(fp)
    5744:	00c00044 	movi	r3,1
    5748:	1885c83a 	sub	r2,r3,r2
    574c:	e0bff905 	stb	r2,-28(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
    5750:	e0bff717 	ldw	r2,-36(fp)
    5754:	10bfc00c 	andi	r2,r2,65280
    5758:	1006d23a 	srli	r3,r2,8
    575c:	e0bff717 	ldw	r2,-36(fp)
    5760:	1004923a 	slli	r2,r2,8
    5764:	10bfffcc 	andi	r2,r2,65535
    5768:	1884b03a 	or	r2,r3,r2
    576c:	e0bff715 	stw	r2,-36(fp)
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
    5770:	e0bff817 	ldw	r2,-32(fp)
    5774:	10800017 	ldw	r2,0(r2)
    5778:	e0bff815 	stw	r2,-32(fp)
    577c:	e0bff817 	ldw	r2,-32(fp)
    5780:	103fd81e 	bne	r2,zero,56e4 <inet_chksum_pseudo+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
    5784:	e0bff903 	ldbu	r2,-28(fp)
    5788:	10000826 	beq	r2,zero,57ac <inet_chksum_pseudo+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
    578c:	e0bff717 	ldw	r2,-36(fp)
    5790:	10bfc00c 	andi	r2,r2,65280
    5794:	1006d23a 	srli	r3,r2,8
    5798:	e0bff717 	ldw	r2,-36(fp)
    579c:	1004923a 	slli	r2,r2,8
    57a0:	10bfffcc 	andi	r2,r2,65535
    57a4:	1884b03a 	or	r2,r3,r2
    57a8:	e0bff715 	stw	r2,-36(fp)
  }
  addr = ip4_addr_get_u32(src);
    57ac:	e0bffc17 	ldw	r2,-16(fp)
    57b0:	10800017 	ldw	r2,0(r2)
    57b4:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
    57b8:	e0bffa17 	ldw	r2,-24(fp)
    57bc:	10bfffcc 	andi	r2,r2,65535
    57c0:	e0fff717 	ldw	r3,-36(fp)
    57c4:	1885883a 	add	r2,r3,r2
    57c8:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
    57cc:	e0bffa17 	ldw	r2,-24(fp)
    57d0:	1004d43a 	srli	r2,r2,16
    57d4:	e0fff717 	ldw	r3,-36(fp)
    57d8:	1885883a 	add	r2,r3,r2
    57dc:	e0bff715 	stw	r2,-36(fp)
  addr = ip4_addr_get_u32(dest);
    57e0:	e0bffd17 	ldw	r2,-12(fp)
    57e4:	10800017 	ldw	r2,0(r2)
    57e8:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
    57ec:	e0bffa17 	ldw	r2,-24(fp)
    57f0:	10bfffcc 	andi	r2,r2,65535
    57f4:	e0fff717 	ldw	r3,-36(fp)
    57f8:	1885883a 	add	r2,r3,r2
    57fc:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
    5800:	e0bffa17 	ldw	r2,-24(fp)
    5804:	1004d43a 	srli	r2,r2,16
    5808:	e0fff717 	ldw	r3,-36(fp)
    580c:	1885883a 	add	r2,r3,r2
    5810:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons((u16_t)proto);
    5814:	e0bffe03 	ldbu	r2,-8(fp)
    5818:	1004923a 	slli	r2,r2,8
    581c:	e0fff717 	ldw	r3,-36(fp)
    5820:	1885883a 	add	r2,r3,r2
    5824:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons(proto_len);
    5828:	e0bfff0b 	ldhu	r2,-4(fp)
    582c:	1004d23a 	srli	r2,r2,8
    5830:	10ffffcc 	andi	r3,r2,65535
    5834:	e0bfff0b 	ldhu	r2,-4(fp)
    5838:	1004923a 	slli	r2,r2,8
    583c:	10bfffcc 	andi	r2,r2,65535
    5840:	1884b03a 	or	r2,r3,r2
    5844:	e0fff717 	ldw	r3,-36(fp)
    5848:	1885883a 	add	r2,r3,r2
    584c:	e0bff715 	stw	r2,-36(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
    5850:	e0bff717 	ldw	r2,-36(fp)
    5854:	1006d43a 	srli	r3,r2,16
    5858:	e0bff717 	ldw	r2,-36(fp)
    585c:	10bfffcc 	andi	r2,r2,65535
    5860:	1885883a 	add	r2,r3,r2
    5864:	e0bff715 	stw	r2,-36(fp)
  acc = FOLD_U32T(acc);
    5868:	e0bff717 	ldw	r2,-36(fp)
    586c:	1006d43a 	srli	r3,r2,16
    5870:	e0bff717 	ldw	r2,-36(fp)
    5874:	10bfffcc 	andi	r2,r2,65535
    5878:	1885883a 	add	r2,r3,r2
    587c:	e0bff715 	stw	r2,-36(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
    5880:	e0bff717 	ldw	r2,-36(fp)
    5884:	0084303a 	nor	r2,zero,r2
}
    5888:	e037883a 	mov	sp,fp
    588c:	dfc00117 	ldw	ra,4(sp)
    5890:	df000017 	ldw	fp,0(sp)
    5894:	dec00204 	addi	sp,sp,8
    5898:	f800283a 	ret

0000589c <inet_chksum_pseudo_partial>:
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len, u16_t chksum_len)
{
    589c:	defff404 	addi	sp,sp,-48
    58a0:	dfc00b15 	stw	ra,44(sp)
    58a4:	df000a15 	stw	fp,40(sp)
    58a8:	df000a04 	addi	fp,sp,40
    58ac:	e13ffa15 	stw	r4,-24(fp)
    58b0:	e17ffb15 	stw	r5,-20(fp)
    58b4:	e1bffc15 	stw	r6,-16(fp)
    58b8:	3805883a 	mov	r2,r7
    58bc:	e1000217 	ldw	r4,8(fp)
    58c0:	e0c00317 	ldw	r3,12(fp)
    58c4:	e0bffd05 	stb	r2,-12(fp)
    58c8:	e13ffe0d 	sth	r4,-8(fp)
    58cc:	e0ffff0d 	sth	r3,-4(fp)
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
    58d0:	e03ff615 	stw	zero,-40(fp)
  swapped = 0;
    58d4:	e03ff805 	stb	zero,-32(fp)
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
    58d8:	e0bffa17 	ldw	r2,-24(fp)
    58dc:	e0bff715 	stw	r2,-36(fp)
    58e0:	00003c06 	br	59d4 <inet_chksum_pseudo_partial+0x138>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
    58e4:	e0bff717 	ldw	r2,-36(fp)
    58e8:	1080028b 	ldhu	r2,10(r2)
    58ec:	e0bff88d 	sth	r2,-30(fp)
    if (chklen > chksum_len) {
    58f0:	e0bff88b 	ldhu	r2,-30(fp)
    58f4:	e0ffff0b 	ldhu	r3,-4(fp)
    58f8:	1880022e 	bgeu	r3,r2,5904 <inet_chksum_pseudo_partial+0x68>
      chklen = chksum_len;
    58fc:	e0bfff0b 	ldhu	r2,-4(fp)
    5900:	e0bff88d 	sth	r2,-30(fp)
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
    5904:	e0bff717 	ldw	r2,-36(fp)
    5908:	10c00117 	ldw	r3,4(r2)
    590c:	e0bff88b 	ldhu	r2,-30(fp)
    5910:	1809883a 	mov	r4,r3
    5914:	100b883a 	mov	r5,r2
    5918:	00055580 	call	5558 <lwip_standard_chksum>
    591c:	10bfffcc 	andi	r2,r2,65535
    5920:	e0fff617 	ldw	r3,-40(fp)
    5924:	1885883a 	add	r2,r3,r2
    5928:	e0bff615 	stw	r2,-40(fp)
    chksum_len -= chklen;
    592c:	e0ffff0b 	ldhu	r3,-4(fp)
    5930:	e0bff88b 	ldhu	r2,-30(fp)
    5934:	1885c83a 	sub	r2,r3,r2
    5938:	e0bfff0d 	sth	r2,-4(fp)
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
    593c:	e0bfff0b 	ldhu	r2,-4(fp)
    5940:	109ffff0 	cmpltui	r2,r2,32767
    5944:	1000091e 	bne	r2,zero,596c <inet_chksum_pseudo_partial+0xd0>
    5948:	010000f4 	movhi	r4,3
    594c:	213bf404 	addi	r4,r4,-4144
    5950:	014000f4 	movhi	r5,3
    5954:	297bfe04 	addi	r5,r5,-4104
    5958:	01805884 	movi	r6,354
    595c:	01c000f4 	movhi	r7,3
    5960:	39fc0104 	addi	r7,r7,-4092
    5964:	0017c440 	call	17c44 <printf>
    5968:	003fff06 	br	5968 <inet_chksum_pseudo_partial+0xcc>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
    596c:	e0bff617 	ldw	r2,-40(fp)
    5970:	1006d43a 	srli	r3,r2,16
    5974:	e0bff617 	ldw	r2,-40(fp)
    5978:	10bfffcc 	andi	r2,r2,65535
    597c:	1885883a 	add	r2,r3,r2
    5980:	e0bff615 	stw	r2,-40(fp)
    if (q->len % 2 != 0) {
    5984:	e0bff717 	ldw	r2,-36(fp)
    5988:	1080028b 	ldhu	r2,10(r2)
    598c:	1080004c 	andi	r2,r2,1
    5990:	10bfffcc 	andi	r2,r2,65535
    5994:	10000c26 	beq	r2,zero,59c8 <inet_chksum_pseudo_partial+0x12c>
      swapped = 1 - swapped;
    5998:	e0bff803 	ldbu	r2,-32(fp)
    599c:	00c00044 	movi	r3,1
    59a0:	1885c83a 	sub	r2,r3,r2
    59a4:	e0bff805 	stb	r2,-32(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
    59a8:	e0bff617 	ldw	r2,-40(fp)
    59ac:	10bfc00c 	andi	r2,r2,65280
    59b0:	1006d23a 	srli	r3,r2,8
    59b4:	e0bff617 	ldw	r2,-40(fp)
    59b8:	1004923a 	slli	r2,r2,8
    59bc:	10bfffcc 	andi	r2,r2,65535
    59c0:	1884b03a 	or	r2,r3,r2
    59c4:	e0bff615 	stw	r2,-40(fp)
  u16_t chklen;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
    59c8:	e0bff717 	ldw	r2,-36(fp)
    59cc:	10800017 	ldw	r2,0(r2)
    59d0:	e0bff715 	stw	r2,-36(fp)
    59d4:	e0bff717 	ldw	r2,-36(fp)
    59d8:	10000226 	beq	r2,zero,59e4 <inet_chksum_pseudo_partial+0x148>
    59dc:	e0bfff0b 	ldhu	r2,-4(fp)
    59e0:	103fc01e 	bne	r2,zero,58e4 <inet_chksum_pseudo_partial+0x48>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
    59e4:	e0bff803 	ldbu	r2,-32(fp)
    59e8:	10000826 	beq	r2,zero,5a0c <inet_chksum_pseudo_partial+0x170>
    acc = SWAP_BYTES_IN_WORD(acc);
    59ec:	e0bff617 	ldw	r2,-40(fp)
    59f0:	10bfc00c 	andi	r2,r2,65280
    59f4:	1006d23a 	srli	r3,r2,8
    59f8:	e0bff617 	ldw	r2,-40(fp)
    59fc:	1004923a 	slli	r2,r2,8
    5a00:	10bfffcc 	andi	r2,r2,65535
    5a04:	1884b03a 	or	r2,r3,r2
    5a08:	e0bff615 	stw	r2,-40(fp)
  }
  addr = ip4_addr_get_u32(src);
    5a0c:	e0bffb17 	ldw	r2,-20(fp)
    5a10:	10800017 	ldw	r2,0(r2)
    5a14:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
    5a18:	e0bff917 	ldw	r2,-28(fp)
    5a1c:	10bfffcc 	andi	r2,r2,65535
    5a20:	e0fff617 	ldw	r3,-40(fp)
    5a24:	1885883a 	add	r2,r3,r2
    5a28:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
    5a2c:	e0bff917 	ldw	r2,-28(fp)
    5a30:	1004d43a 	srli	r2,r2,16
    5a34:	e0fff617 	ldw	r3,-40(fp)
    5a38:	1885883a 	add	r2,r3,r2
    5a3c:	e0bff615 	stw	r2,-40(fp)
  addr = ip4_addr_get_u32(dest);
    5a40:	e0bffc17 	ldw	r2,-16(fp)
    5a44:	10800017 	ldw	r2,0(r2)
    5a48:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
    5a4c:	e0bff917 	ldw	r2,-28(fp)
    5a50:	10bfffcc 	andi	r2,r2,65535
    5a54:	e0fff617 	ldw	r3,-40(fp)
    5a58:	1885883a 	add	r2,r3,r2
    5a5c:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
    5a60:	e0bff917 	ldw	r2,-28(fp)
    5a64:	1004d43a 	srli	r2,r2,16
    5a68:	e0fff617 	ldw	r3,-40(fp)
    5a6c:	1885883a 	add	r2,r3,r2
    5a70:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons((u16_t)proto);
    5a74:	e0bffd03 	ldbu	r2,-12(fp)
    5a78:	1004923a 	slli	r2,r2,8
    5a7c:	e0fff617 	ldw	r3,-40(fp)
    5a80:	1885883a 	add	r2,r3,r2
    5a84:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons(proto_len);
    5a88:	e0bffe0b 	ldhu	r2,-8(fp)
    5a8c:	1004d23a 	srli	r2,r2,8
    5a90:	10ffffcc 	andi	r3,r2,65535
    5a94:	e0bffe0b 	ldhu	r2,-8(fp)
    5a98:	1004923a 	slli	r2,r2,8
    5a9c:	10bfffcc 	andi	r2,r2,65535
    5aa0:	1884b03a 	or	r2,r3,r2
    5aa4:	e0fff617 	ldw	r3,-40(fp)
    5aa8:	1885883a 	add	r2,r3,r2
    5aac:	e0bff615 	stw	r2,-40(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
    5ab0:	e0bff617 	ldw	r2,-40(fp)
    5ab4:	1006d43a 	srli	r3,r2,16
    5ab8:	e0bff617 	ldw	r2,-40(fp)
    5abc:	10bfffcc 	andi	r2,r2,65535
    5ac0:	1885883a 	add	r2,r3,r2
    5ac4:	e0bff615 	stw	r2,-40(fp)
  acc = FOLD_U32T(acc);
    5ac8:	e0bff617 	ldw	r2,-40(fp)
    5acc:	1006d43a 	srli	r3,r2,16
    5ad0:	e0bff617 	ldw	r2,-40(fp)
    5ad4:	10bfffcc 	andi	r2,r2,65535
    5ad8:	1885883a 	add	r2,r3,r2
    5adc:	e0bff615 	stw	r2,-40(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
    5ae0:	e0bff617 	ldw	r2,-40(fp)
    5ae4:	0084303a 	nor	r2,zero,r2
}
    5ae8:	e037883a 	mov	sp,fp
    5aec:	dfc00117 	ldw	ra,4(sp)
    5af0:	df000017 	ldw	fp,0(sp)
    5af4:	dec00204 	addi	sp,sp,8
    5af8:	f800283a 	ret

00005afc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
    5afc:	defffc04 	addi	sp,sp,-16
    5b00:	dfc00315 	stw	ra,12(sp)
    5b04:	df000215 	stw	fp,8(sp)
    5b08:	df000204 	addi	fp,sp,8
    5b0c:	e13ffe15 	stw	r4,-8(fp)
    5b10:	2805883a 	mov	r2,r5
    5b14:	e0bfff0d 	sth	r2,-4(fp)
  return ~LWIP_CHKSUM(dataptr, len);
    5b18:	e0bfff0b 	ldhu	r2,-4(fp)
    5b1c:	e13ffe17 	ldw	r4,-8(fp)
    5b20:	100b883a 	mov	r5,r2
    5b24:	00055580 	call	5558 <lwip_standard_chksum>
    5b28:	0084303a 	nor	r2,zero,r2
}
    5b2c:	e037883a 	mov	sp,fp
    5b30:	dfc00117 	ldw	ra,4(sp)
    5b34:	df000017 	ldw	fp,0(sp)
    5b38:	dec00204 	addi	sp,sp,8
    5b3c:	f800283a 	ret

00005b40 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
    5b40:	defffa04 	addi	sp,sp,-24
    5b44:	dfc00515 	stw	ra,20(sp)
    5b48:	df000415 	stw	fp,16(sp)
    5b4c:	df000404 	addi	fp,sp,16
    5b50:	e13fff15 	stw	r4,-4(fp)
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
    5b54:	e03ffc15 	stw	zero,-16(fp)
  swapped = 0;
    5b58:	e03ffe05 	stb	zero,-8(fp)
  for(q = p; q != NULL; q = q->next) {
    5b5c:	e0bfff17 	ldw	r2,-4(fp)
    5b60:	e0bffd15 	stw	r2,-12(fp)
    5b64:	00002606 	br	5c00 <inet_chksum_pbuf+0xc0>
    acc += LWIP_CHKSUM(q->payload, q->len);
    5b68:	e0bffd17 	ldw	r2,-12(fp)
    5b6c:	10c00117 	ldw	r3,4(r2)
    5b70:	e0bffd17 	ldw	r2,-12(fp)
    5b74:	1080028b 	ldhu	r2,10(r2)
    5b78:	10bfffcc 	andi	r2,r2,65535
    5b7c:	1809883a 	mov	r4,r3
    5b80:	100b883a 	mov	r5,r2
    5b84:	00055580 	call	5558 <lwip_standard_chksum>
    5b88:	10bfffcc 	andi	r2,r2,65535
    5b8c:	e0fffc17 	ldw	r3,-16(fp)
    5b90:	1885883a 	add	r2,r3,r2
    5b94:	e0bffc15 	stw	r2,-16(fp)
    acc = FOLD_U32T(acc);
    5b98:	e0bffc17 	ldw	r2,-16(fp)
    5b9c:	1006d43a 	srli	r3,r2,16
    5ba0:	e0bffc17 	ldw	r2,-16(fp)
    5ba4:	10bfffcc 	andi	r2,r2,65535
    5ba8:	1885883a 	add	r2,r3,r2
    5bac:	e0bffc15 	stw	r2,-16(fp)
    if (q->len % 2 != 0) {
    5bb0:	e0bffd17 	ldw	r2,-12(fp)
    5bb4:	1080028b 	ldhu	r2,10(r2)
    5bb8:	1080004c 	andi	r2,r2,1
    5bbc:	10bfffcc 	andi	r2,r2,65535
    5bc0:	10000c26 	beq	r2,zero,5bf4 <inet_chksum_pbuf+0xb4>
      swapped = 1 - swapped;
    5bc4:	e0bffe03 	ldbu	r2,-8(fp)
    5bc8:	00c00044 	movi	r3,1
    5bcc:	1885c83a 	sub	r2,r3,r2
    5bd0:	e0bffe05 	stb	r2,-8(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
    5bd4:	e0bffc17 	ldw	r2,-16(fp)
    5bd8:	10bfc00c 	andi	r2,r2,65280
    5bdc:	1006d23a 	srli	r3,r2,8
    5be0:	e0bffc17 	ldw	r2,-16(fp)
    5be4:	1004923a 	slli	r2,r2,8
    5be8:	10bfffcc 	andi	r2,r2,65535
    5bec:	1884b03a 	or	r2,r3,r2
    5bf0:	e0bffc15 	stw	r2,-16(fp)
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    5bf4:	e0bffd17 	ldw	r2,-12(fp)
    5bf8:	10800017 	ldw	r2,0(r2)
    5bfc:	e0bffd15 	stw	r2,-12(fp)
    5c00:	e0bffd17 	ldw	r2,-12(fp)
    5c04:	103fd81e 	bne	r2,zero,5b68 <inet_chksum_pbuf+0x28>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
    5c08:	e0bffe03 	ldbu	r2,-8(fp)
    5c0c:	10000826 	beq	r2,zero,5c30 <inet_chksum_pbuf+0xf0>
    acc = SWAP_BYTES_IN_WORD(acc);
    5c10:	e0bffc17 	ldw	r2,-16(fp)
    5c14:	10bfc00c 	andi	r2,r2,65280
    5c18:	1006d23a 	srli	r3,r2,8
    5c1c:	e0bffc17 	ldw	r2,-16(fp)
    5c20:	1004923a 	slli	r2,r2,8
    5c24:	10bfffcc 	andi	r2,r2,65535
    5c28:	1884b03a 	or	r2,r3,r2
    5c2c:	e0bffc15 	stw	r2,-16(fp)
  }
  return (u16_t)~(acc & 0xffffUL);
    5c30:	e0bffc17 	ldw	r2,-16(fp)
    5c34:	0084303a 	nor	r2,zero,r2
}
    5c38:	e037883a 	mov	sp,fp
    5c3c:	dfc00117 	ldw	ra,4(sp)
    5c40:	df000017 	ldw	fp,0(sp)
    5c44:	dec00204 	addi	sp,sp,8
    5c48:	f800283a 	ret

00005c4c <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
    5c4c:	defffd04 	addi	sp,sp,-12
    5c50:	df000215 	stw	fp,8(sp)
    5c54:	df000204 	addi	fp,sp,8
    5c58:	e13fff15 	stw	r4,-4(fp)
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
    5c5c:	008000f4 	movhi	r2,3
    5c60:	109bda04 	addi	r2,r2,28520
    5c64:	10800017 	ldw	r2,0(r2)
    5c68:	e0bffe15 	stw	r2,-8(fp)
    5c6c:	00001306 	br	5cbc <ip_route+0x70>
    /* network mask matches? */
    if (netif_is_up(netif)) {
    5c70:	e0bffe17 	ldw	r2,-8(fp)
    5c74:	10800b43 	ldbu	r2,45(r2)
    5c78:	10803fcc 	andi	r2,r2,255
    5c7c:	1080004c 	andi	r2,r2,1
    5c80:	10000b26 	beq	r2,zero,5cb0 <ip_route+0x64>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
    5c84:	e0bfff17 	ldw	r2,-4(fp)
    5c88:	10c00017 	ldw	r3,0(r2)
    5c8c:	e0bffe17 	ldw	r2,-8(fp)
    5c90:	10800117 	ldw	r2,4(r2)
    5c94:	1886f03a 	xor	r3,r3,r2
    5c98:	e0bffe17 	ldw	r2,-8(fp)
    5c9c:	10800217 	ldw	r2,8(r2)
    5ca0:	1884703a 	and	r2,r3,r2
    5ca4:	1000021e 	bne	r2,zero,5cb0 <ip_route+0x64>
        /* return netif on which to forward IP packet */
        return netif;
    5ca8:	e0bffe17 	ldw	r2,-8(fp)
    5cac:	00001d06 	br	5d24 <ip_route+0xd8>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
    5cb0:	e0bffe17 	ldw	r2,-8(fp)
    5cb4:	10800017 	ldw	r2,0(r2)
    5cb8:	e0bffe15 	stw	r2,-8(fp)
    5cbc:	e0bffe17 	ldw	r2,-8(fp)
    5cc0:	103feb1e 	bne	r2,zero,5c70 <ip_route+0x24>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    5cc4:	008000f4 	movhi	r2,3
    5cc8:	109bdb04 	addi	r2,r2,28524
    5ccc:	10800017 	ldw	r2,0(r2)
    5cd0:	10000726 	beq	r2,zero,5cf0 <ip_route+0xa4>
    5cd4:	008000f4 	movhi	r2,3
    5cd8:	109bdb04 	addi	r2,r2,28524
    5cdc:	10800017 	ldw	r2,0(r2)
    5ce0:	10800b43 	ldbu	r2,45(r2)
    5ce4:	10803fcc 	andi	r2,r2,255
    5ce8:	1080004c 	andi	r2,r2,1
    5cec:	10000a1e 	bne	r2,zero,5d18 <ip_route+0xcc>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    5cf0:	00800134 	movhi	r2,4
    5cf4:	10932304 	addi	r2,r2,19596
    5cf8:	1080158b 	ldhu	r2,86(r2)
    5cfc:	10800044 	addi	r2,r2,1
    5d00:	1007883a 	mov	r3,r2
    5d04:	00800134 	movhi	r2,4
    5d08:	10932304 	addi	r2,r2,19596
    5d0c:	10c0158d 	sth	r3,86(r2)
    snmp_inc_ipoutnoroutes();
    return NULL;
    5d10:	0005883a 	mov	r2,zero
    5d14:	00000306 	br	5d24 <ip_route+0xd8>
  }
  /* no matching netif found, use default netif */
  return netif_default;
    5d18:	008000f4 	movhi	r2,3
    5d1c:	109bdb04 	addi	r2,r2,28524
    5d20:	10800017 	ldw	r2,0(r2)
}
    5d24:	e037883a 	mov	sp,fp
    5d28:	df000017 	ldw	fp,0(sp)
    5d2c:	dec00104 	addi	sp,sp,4
    5d30:	f800283a 	ret

00005d34 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
    5d34:	defff604 	addi	sp,sp,-40
    5d38:	dfc00915 	stw	ra,36(sp)
    5d3c:	df000815 	stw	fp,32(sp)
    5d40:	df000804 	addi	fp,sp,32
    5d44:	e13ffe15 	stw	r4,-8(fp)
    5d48:	e17fff15 	stw	r5,-4(fp)
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
    5d4c:	00800044 	movi	r2,1
    5d50:	e0bffa15 	stw	r2,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
    5d54:	00800134 	movhi	r2,4
    5d58:	10932304 	addi	r2,r2,19596
    5d5c:	1080128b 	ldhu	r2,74(r2)
    5d60:	10800044 	addi	r2,r2,1
    5d64:	1007883a 	mov	r3,r2
    5d68:	00800134 	movhi	r2,4
    5d6c:	10932304 	addi	r2,r2,19596
    5d70:	10c0128d 	sth	r3,74(r2)
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
    5d74:	e0bffe17 	ldw	r2,-8(fp)
    5d78:	10800117 	ldw	r2,4(r2)
    5d7c:	e0bff815 	stw	r2,-32(fp)
  if (IPH_V(iphdr) != 4) {
    5d80:	e0bff817 	ldw	r2,-32(fp)
    5d84:	10800003 	ldbu	r2,0(r2)
    5d88:	10803fcc 	andi	r2,r2,255
    5d8c:	1004d13a 	srli	r2,r2,4
    5d90:	10803fcc 	andi	r2,r2,255
    5d94:	10800120 	cmpeqi	r2,r2,4
    5d98:	1000141e 	bne	r2,zero,5dec <ip_input+0xb8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
    5d9c:	e13ffe17 	ldw	r4,-8(fp)
    5da0:	000a4200 	call	a420 <pbuf_free>
    IP_STATS_INC(ip.err);
    5da4:	00800134 	movhi	r2,4
    5da8:	10932304 	addi	r2,r2,19596
    5dac:	1080170b 	ldhu	r2,92(r2)
    5db0:	10800044 	addi	r2,r2,1
    5db4:	1007883a 	mov	r3,r2
    5db8:	00800134 	movhi	r2,4
    5dbc:	10932304 	addi	r2,r2,19596
    5dc0:	10c0170d 	sth	r3,92(r2)
    IP_STATS_INC(ip.drop);
    5dc4:	00800134 	movhi	r2,4
    5dc8:	10932304 	addi	r2,r2,19596
    5dcc:	1080138b 	ldhu	r2,78(r2)
    5dd0:	10800044 	addi	r2,r2,1
    5dd4:	1007883a 	mov	r3,r2
    5dd8:	00800134 	movhi	r2,4
    5ddc:	10932304 	addi	r2,r2,19596
    5de0:	10c0138d 	sth	r3,78(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
    5de4:	0005883a 	mov	r2,zero
    5de8:	00011006 	br	622c <ip_input+0x4f8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
    5dec:	e0bff817 	ldw	r2,-32(fp)
    5df0:	10800003 	ldbu	r2,0(r2)
    5df4:	10803fcc 	andi	r2,r2,255
    5df8:	108003cc 	andi	r2,r2,15
    5dfc:	e0bffc0d 	sth	r2,-16(fp)
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
    5e00:	e0bffc0b 	ldhu	r2,-16(fp)
    5e04:	1085883a 	add	r2,r2,r2
    5e08:	1085883a 	add	r2,r2,r2
    5e0c:	e0bffc0d 	sth	r2,-16(fp)
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
    5e10:	e0bff817 	ldw	r2,-32(fp)
    5e14:	1080008b 	ldhu	r2,2(r2)
    5e18:	10bfffcc 	andi	r2,r2,65535
    5e1c:	1004d23a 	srli	r2,r2,8
    5e20:	1007883a 	mov	r3,r2
    5e24:	e0bff817 	ldw	r2,-32(fp)
    5e28:	1080008b 	ldhu	r2,2(r2)
    5e2c:	10bfffcc 	andi	r2,r2,65535
    5e30:	1004923a 	slli	r2,r2,8
    5e34:	1884b03a 	or	r2,r3,r2
    5e38:	e0bffc8d 	sth	r2,-14(fp)

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
    5e3c:	e0bffe17 	ldw	r2,-8(fp)
    5e40:	1080028b 	ldhu	r2,10(r2)
    5e44:	10ffffcc 	andi	r3,r2,65535
    5e48:	e0bffc0b 	ldhu	r2,-16(fp)
    5e4c:	18800536 	bltu	r3,r2,5e64 <ip_input+0x130>
    5e50:	e0bffe17 	ldw	r2,-8(fp)
    5e54:	1080020b 	ldhu	r2,8(r2)
    5e58:	10ffffcc 	andi	r3,r2,65535
    5e5c:	e0bffc8b 	ldhu	r2,-14(fp)
    5e60:	1880142e 	bgeu	r3,r2,5eb4 <ip_input+0x180>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
    5e64:	e13ffe17 	ldw	r4,-8(fp)
    5e68:	000a4200 	call	a420 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    5e6c:	00800134 	movhi	r2,4
    5e70:	10932304 	addi	r2,r2,19596
    5e74:	1080148b 	ldhu	r2,82(r2)
    5e78:	10800044 	addi	r2,r2,1
    5e7c:	1007883a 	mov	r3,r2
    5e80:	00800134 	movhi	r2,4
    5e84:	10932304 	addi	r2,r2,19596
    5e88:	10c0148d 	sth	r3,82(r2)
    IP_STATS_INC(ip.drop);
    5e8c:	00800134 	movhi	r2,4
    5e90:	10932304 	addi	r2,r2,19596
    5e94:	1080138b 	ldhu	r2,78(r2)
    5e98:	10800044 	addi	r2,r2,1
    5e9c:	1007883a 	mov	r3,r2
    5ea0:	00800134 	movhi	r2,4
    5ea4:	10932304 	addi	r2,r2,19596
    5ea8:	10c0138d 	sth	r3,78(r2)
    snmp_inc_ipindiscards();
    return ERR_OK;
    5eac:	0005883a 	mov	r2,zero
    5eb0:	0000de06 	br	622c <ip_input+0x4f8>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
    5eb4:	e0bffc0b 	ldhu	r2,-16(fp)
    5eb8:	e13ff817 	ldw	r4,-32(fp)
    5ebc:	100b883a 	mov	r5,r2
    5ec0:	0005afc0 	call	5afc <inet_chksum>
    5ec4:	10bfffcc 	andi	r2,r2,65535
    5ec8:	10001426 	beq	r2,zero,5f1c <ip_input+0x1e8>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
    5ecc:	e13ffe17 	ldw	r4,-8(fp)
    5ed0:	000a4200 	call	a420 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
    5ed4:	00800134 	movhi	r2,4
    5ed8:	10932304 	addi	r2,r2,19596
    5edc:	1080140b 	ldhu	r2,80(r2)
    5ee0:	10800044 	addi	r2,r2,1
    5ee4:	1007883a 	mov	r3,r2
    5ee8:	00800134 	movhi	r2,4
    5eec:	10932304 	addi	r2,r2,19596
    5ef0:	10c0140d 	sth	r3,80(r2)
    IP_STATS_INC(ip.drop);
    5ef4:	00800134 	movhi	r2,4
    5ef8:	10932304 	addi	r2,r2,19596
    5efc:	1080138b 	ldhu	r2,78(r2)
    5f00:	10800044 	addi	r2,r2,1
    5f04:	1007883a 	mov	r3,r2
    5f08:	00800134 	movhi	r2,4
    5f0c:	10932304 	addi	r2,r2,19596
    5f10:	10c0138d 	sth	r3,78(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
    5f14:	0005883a 	mov	r2,zero
    5f18:	0000c406 	br	622c <ip_input+0x4f8>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
    5f1c:	e0bffc8b 	ldhu	r2,-14(fp)
    5f20:	e13ffe17 	ldw	r4,-8(fp)
    5f24:	100b883a 	mov	r5,r2
    5f28:	0009fa40 	call	9fa4 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
    5f2c:	e0bff817 	ldw	r2,-32(fp)
    5f30:	10c0040b 	ldhu	r3,16(r2)
    5f34:	1080048b 	ldhu	r2,18(r2)
    5f38:	1004943a 	slli	r2,r2,16
    5f3c:	10c4b03a 	or	r2,r2,r3
    5f40:	d0a8aa15 	stw	r2,-23896(gp)
  ip_addr_copy(current_iphdr_src, iphdr->src);
    5f44:	e0bff817 	ldw	r2,-32(fp)
    5f48:	10c0030b 	ldhu	r3,12(r2)
    5f4c:	1080038b 	ldhu	r2,14(r2)
    5f50:	1004943a 	slli	r2,r2,16
    5f54:	10c4b03a 	or	r2,r2,r3
    5f58:	d0a8a815 	stw	r2,-23904(gp)
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
    5f5c:	00800044 	movi	r2,1
    5f60:	e0bffb15 	stw	r2,-20(fp)
    netif = inp;
    5f64:	e0bfff17 	ldw	r2,-4(fp)
    5f68:	e0bff915 	stw	r2,-28(fp)
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
    5f6c:	e0bff917 	ldw	r2,-28(fp)
    5f70:	10800b43 	ldbu	r2,45(r2)
    5f74:	10803fcc 	andi	r2,r2,255
    5f78:	1080004c 	andi	r2,r2,1
    5f7c:	10001026 	beq	r2,zero,5fc0 <ip_input+0x28c>
    5f80:	e0bff917 	ldw	r2,-28(fp)
    5f84:	10800104 	addi	r2,r2,4
    5f88:	10000d26 	beq	r2,zero,5fc0 <ip_input+0x28c>
    5f8c:	e0bff917 	ldw	r2,-28(fp)
    5f90:	10800117 	ldw	r2,4(r2)
    5f94:	10000a26 	beq	r2,zero,5fc0 <ip_input+0x28c>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    5f98:	d0e8aa17 	ldw	r3,-23896(gp)
    5f9c:	e0bff917 	ldw	r2,-28(fp)
    5fa0:	10800117 	ldw	r2,4(r2)
    5fa4:	18801926 	beq	r3,r2,600c <ip_input+0x2d8>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
    5fa8:	d0a8aa17 	ldw	r2,-23896(gp)
    5fac:	1009883a 	mov	r4,r2
    5fb0:	e17ff917 	ldw	r5,-28(fp)
    5fb4:	00067940 	call	6794 <ip4_addr_isbroadcast>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    5fb8:	10803fcc 	andi	r2,r2,255
    5fbc:	1000131e 	bne	r2,zero,600c <ip_input+0x2d8>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
    5fc0:	e0bffb17 	ldw	r2,-20(fp)
    5fc4:	10000626 	beq	r2,zero,5fe0 <ip_input+0x2ac>
        first = 0;
    5fc8:	e03ffb15 	stw	zero,-20(fp)
        netif = netif_list;
    5fcc:	008000f4 	movhi	r2,3
    5fd0:	109bda04 	addi	r2,r2,28520
    5fd4:	10800017 	ldw	r2,0(r2)
    5fd8:	e0bff915 	stw	r2,-28(fp)
    5fdc:	00000306 	br	5fec <ip_input+0x2b8>
      } else {
        netif = netif->next;
    5fe0:	e0bff917 	ldw	r2,-28(fp)
    5fe4:	10800017 	ldw	r2,0(r2)
    5fe8:	e0bff915 	stw	r2,-28(fp)
      }
      if (netif == inp) {
    5fec:	e0fff917 	ldw	r3,-28(fp)
    5ff0:	e0bfff17 	ldw	r2,-4(fp)
    5ff4:	1880031e 	bne	r3,r2,6004 <ip_input+0x2d0>
        netif = netif->next;
    5ff8:	e0bff917 	ldw	r2,-28(fp)
    5ffc:	10800017 	ldw	r2,0(r2)
    6000:	e0bff915 	stw	r2,-28(fp)
      }
    } while(netif != NULL);
    6004:	e0bff917 	ldw	r2,-28(fp)
    6008:	103fd81e 	bne	r2,zero,5f6c <ip_input+0x238>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
    600c:	e0bff917 	ldw	r2,-28(fp)
    6010:	1000111e 	bne	r2,zero,6058 <ip_input+0x324>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
    6014:	e0bff817 	ldw	r2,-32(fp)
    6018:	10800243 	ldbu	r2,9(r2)
    601c:	10803fcc 	andi	r2,r2,255
    6020:	10800458 	cmpnei	r2,r2,17
    6024:	10000c1e 	bne	r2,zero,6058 <ip_input+0x324>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
    6028:	e0bffc0b 	ldhu	r2,-16(fp)
    602c:	e0fff817 	ldw	r3,-32(fp)
    6030:	1885883a 	add	r2,r3,r2
    6034:	e0bffd15 	stw	r2,-12(fp)
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
    6038:	e0bffd17 	ldw	r2,-12(fp)
    603c:	1080008b 	ldhu	r2,2(r2)
    6040:	10bfffcc 	andi	r2,r2,65535
    6044:	10910018 	cmpnei	r2,r2,17408
    6048:	1000031e 	bne	r2,zero,6058 <ip_input+0x324>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
    604c:	e0bfff17 	ldw	r2,-4(fp)
    6050:	e0bff915 	stw	r2,-28(fp)
        check_ip_src = 0;
    6054:	e03ffa15 	stw	zero,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
    6058:	e0bffa17 	ldw	r2,-24(fp)
    605c:	10001826 	beq	r2,zero,60c0 <ip_input+0x38c>
    6060:	d0a8a817 	ldw	r2,-23904(gp)
    6064:	10001626 	beq	r2,zero,60c0 <ip_input+0x38c>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
    6068:	d0a8a817 	ldw	r2,-23904(gp)
    606c:	1009883a 	mov	r4,r2
    6070:	e17fff17 	ldw	r5,-4(fp)
    6074:	00067940 	call	6794 <ip4_addr_isbroadcast>
    6078:	10803fcc 	andi	r2,r2,255
    607c:	1000041e 	bne	r2,zero,6090 <ip_input+0x35c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
    6080:	d0a8a817 	ldw	r2,-23904(gp)
    6084:	10803c0c 	andi	r2,r2,240
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
    6088:	10803818 	cmpnei	r2,r2,224
    608c:	10000c1e 	bne	r2,zero,60c0 <ip_input+0x38c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
    6090:	e13ffe17 	ldw	r4,-8(fp)
    6094:	000a4200 	call	a420 <pbuf_free>
      IP_STATS_INC(ip.drop);
    6098:	00800134 	movhi	r2,4
    609c:	10932304 	addi	r2,r2,19596
    60a0:	1080138b 	ldhu	r2,78(r2)
    60a4:	10800044 	addi	r2,r2,1
    60a8:	1007883a 	mov	r3,r2
    60ac:	00800134 	movhi	r2,4
    60b0:	10932304 	addi	r2,r2,19596
    60b4:	10c0138d 	sth	r3,78(r2)
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
    60b8:	0005883a 	mov	r2,zero
    60bc:	00005b06 	br	622c <ip_input+0x4f8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
    60c0:	e0bff917 	ldw	r2,-28(fp)
    60c4:	1000041e 	bne	r2,zero,60d8 <ip_input+0x3a4>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
    60c8:	e13ffe17 	ldw	r4,-8(fp)
    60cc:	000a4200 	call	a420 <pbuf_free>
    return ERR_OK;
    60d0:	0005883a 	mov	r2,zero
    60d4:	00005506 	br	622c <ip_input+0x4f8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
    60d8:	e0bff817 	ldw	r2,-32(fp)
    60dc:	1080018b 	ldhu	r2,6(r2)
    60e0:	10bfffcc 	andi	r2,r2,65535
    60e4:	10bfcfcc 	andi	r2,r2,65343
    60e8:	10000a26 	beq	r2,zero,6114 <ip_input+0x3e0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
    60ec:	e13ffe17 	ldw	r4,-8(fp)
    60f0:	0007a940 	call	7a94 <ip_reass>
    60f4:	e0bffe15 	stw	r2,-8(fp)
    /* packet not fully reassembled yet? */
    if (p == NULL) {
    60f8:	e0bffe17 	ldw	r2,-8(fp)
    60fc:	1000021e 	bne	r2,zero,6108 <ip_input+0x3d4>
      return ERR_OK;
    6100:	0005883a 	mov	r2,zero
    6104:	00004906 	br	622c <ip_input+0x4f8>
    }
    iphdr = (struct ip_hdr *)p->payload;
    6108:	e0bffe17 	ldw	r2,-8(fp)
    610c:	10800117 	ldw	r2,4(r2)
    6110:	e0bff815 	stw	r2,-32(fp)
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
    6114:	e0bfff17 	ldw	r2,-4(fp)
    6118:	d0a8a915 	stw	r2,-23900(gp)
  current_header = iphdr;
    611c:	e0bff817 	ldw	r2,-32(fp)
    6120:	d0a8ab15 	stw	r2,-23892(gp)

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
    6124:	e13ffe17 	ldw	r4,-8(fp)
    6128:	e17fff17 	ldw	r5,-4(fp)
    612c:	000b3380 	call	b338 <raw_input>
    6130:	10803fcc 	andi	r2,r2,255
    6134:	1000381e 	bne	r2,zero,6218 <ip_input+0x4e4>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
    6138:	e0bff817 	ldw	r2,-32(fp)
    613c:	10800243 	ldbu	r2,9(r2)
    6140:	10803fcc 	andi	r2,r2,255
    6144:	10c001a0 	cmpeqi	r3,r2,6
    6148:	1800091e 	bne	r3,zero,6170 <ip_input+0x43c>
    614c:	10c00460 	cmpeqi	r3,r2,17
    6150:	1800031e 	bne	r3,zero,6160 <ip_input+0x42c>
    6154:	10800060 	cmpeqi	r2,r2,1
    6158:	1000091e 	bne	r2,zero,6180 <ip_input+0x44c>
    615c:	00000c06 	br	6190 <ip_input+0x45c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
    6160:	e13ffe17 	ldw	r4,-8(fp)
    6164:	e17fff17 	ldw	r5,-4(fp)
    6168:	0014aa80 	call	14aa8 <udp_input>
      break;
    616c:	00002a06 	br	6218 <ip_input+0x4e4>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
    6170:	e13ffe17 	ldw	r4,-8(fp)
    6174:	e17fff17 	ldw	r5,-4(fp)
    6178:	000de780 	call	de78 <tcp_input>
      break;
    617c:	00002606 	br	6218 <ip_input+0x4e4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
    6180:	e13ffe17 	ldw	r4,-8(fp)
    6184:	e17fff17 	ldw	r5,-4(fp)
    6188:	0004de80 	call	4de8 <icmp_input>
      break;
    618c:	00002206 	br	6218 <ip_input+0x4e4>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
    6190:	d0a8aa17 	ldw	r2,-23896(gp)
    6194:	1009883a 	mov	r4,r2
    6198:	e17fff17 	ldw	r5,-4(fp)
    619c:	00067940 	call	6794 <ip4_addr_isbroadcast>
    61a0:	10803fcc 	andi	r2,r2,255
    61a4:	10000a1e 	bne	r2,zero,61d0 <ip_input+0x49c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
    61a8:	d0a8aa17 	ldw	r2,-23896(gp)
    61ac:	10803c0c 	andi	r2,r2,240
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
    61b0:	10803820 	cmpeqi	r2,r2,224
    61b4:	1000061e 	bne	r2,zero,61d0 <ip_input+0x49c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
    61b8:	e0bffe17 	ldw	r2,-8(fp)
    61bc:	e0fff817 	ldw	r3,-32(fp)
    61c0:	10c00115 	stw	r3,4(r2)
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
    61c4:	e13ffe17 	ldw	r4,-8(fp)
    61c8:	01400084 	movi	r5,2
    61cc:	00053540 	call	5354 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
    61d0:	e13ffe17 	ldw	r4,-8(fp)
    61d4:	000a4200 	call	a420 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
    61d8:	00800134 	movhi	r2,4
    61dc:	10932304 	addi	r2,r2,19596
    61e0:	1080160b 	ldhu	r2,88(r2)
    61e4:	10800044 	addi	r2,r2,1
    61e8:	1007883a 	mov	r3,r2
    61ec:	00800134 	movhi	r2,4
    61f0:	10932304 	addi	r2,r2,19596
    61f4:	10c0160d 	sth	r3,88(r2)
      IP_STATS_INC(ip.drop);
    61f8:	00800134 	movhi	r2,4
    61fc:	10932304 	addi	r2,r2,19596
    6200:	1080138b 	ldhu	r2,78(r2)
    6204:	10800044 	addi	r2,r2,1
    6208:	1007883a 	mov	r3,r2
    620c:	00800134 	movhi	r2,4
    6210:	10932304 	addi	r2,r2,19596
    6214:	10c0138d 	sth	r3,78(r2)
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
    6218:	d028a915 	stw	zero,-23900(gp)
  current_header = NULL;
    621c:	d028ab15 	stw	zero,-23892(gp)
  ip_addr_set_any(&current_iphdr_src);
    6220:	d028a815 	stw	zero,-23904(gp)
  ip_addr_set_any(&current_iphdr_dest);
    6224:	d028aa15 	stw	zero,-23896(gp)

  return ERR_OK;
    6228:	0005883a 	mov	r2,zero
}
    622c:	e037883a 	mov	sp,fp
    6230:	dfc00117 	ldw	ra,4(sp)
    6234:	df000017 	ldw	fp,0(sp)
    6238:	dec00204 	addi	sp,sp,8
    623c:	f800283a 	ret

00006240 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
    6240:	defff404 	addi	sp,sp,-48
    6244:	dfc00b15 	stw	ra,44(sp)
    6248:	df000a15 	stw	fp,40(sp)
    624c:	df000a04 	addi	fp,sp,40
    6250:	e13ffa15 	stw	r4,-24(fp)
    6254:	e17ffb15 	stw	r5,-20(fp)
    6258:	e1bffc15 	stw	r6,-16(fp)
    625c:	3805883a 	mov	r2,r7
    6260:	e1000217 	ldw	r4,8(fp)
    6264:	e0c00317 	ldw	r3,12(fp)
    6268:	e0bffd05 	stb	r2,-12(fp)
    626c:	e13ffe05 	stb	r4,-8(fp)
    6270:	e0ffff05 	stb	r3,-4(fp)
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
    6274:	e03ff615 	stw	zero,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);
    6278:	e0bffa17 	ldw	r2,-24(fp)
    627c:	1080038b 	ldhu	r2,14(r2)
    6280:	10bfffcc 	andi	r2,r2,65535
    6284:	10800060 	cmpeqi	r2,r2,1
    6288:	1000091e 	bne	r2,zero,62b0 <ip_output_if+0x70>
    628c:	010000f4 	movhi	r4,3
    6290:	213c0a04 	addi	r4,r4,-4056
    6294:	014000f4 	movhi	r5,3
    6298:	297c1404 	addi	r5,r5,-4016
    629c:	0180a704 	movi	r6,668
    62a0:	01c000f4 	movhi	r7,3
    62a4:	39fc1704 	addi	r7,r7,-4004
    62a8:	0017c440 	call	17c44 <printf>
    62ac:	003fff06 	br	62ac <ip_output_if+0x6c>

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
    62b0:	e0bffc17 	ldw	r2,-16(fp)
    62b4:	1000ce26 	beq	r2,zero,65f0 <ip_output_if+0x3b0>
    u16_t ip_hlen = IP_HLEN;
    62b8:	00800504 	movi	r2,20
    62bc:	e0bff70d 	sth	r2,-36(fp)
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
    62c0:	e13ffa17 	ldw	r4,-24(fp)
    62c4:	01400504 	movi	r5,20
    62c8:	000a2280 	call	a228 <pbuf_header>
    62cc:	10803fcc 	andi	r2,r2,255
    62d0:	10000a26 	beq	r2,zero,62fc <ip_output_if+0xbc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
    62d4:	00800134 	movhi	r2,4
    62d8:	10932304 	addi	r2,r2,19596
    62dc:	1080170b 	ldhu	r2,92(r2)
    62e0:	10800044 	addi	r2,r2,1
    62e4:	1007883a 	mov	r3,r2
    62e8:	00800134 	movhi	r2,4
    62ec:	10932304 	addi	r2,r2,19596
    62f0:	10c0170d 	sth	r3,92(r2)
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    62f4:	00bfff84 	movi	r2,-2
    62f8:	0000e606 	br	6694 <ip_output_if+0x454>
    }

    iphdr = (struct ip_hdr *)p->payload;
    62fc:	e0bffa17 	ldw	r2,-24(fp)
    6300:	10800117 	ldw	r2,4(r2)
    6304:	e0bff815 	stw	r2,-32(fp)
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
    6308:	e0bffa17 	ldw	r2,-24(fp)
    630c:	1080028b 	ldhu	r2,10(r2)
    6310:	10bfffcc 	andi	r2,r2,65535
    6314:	10800528 	cmpgeui	r2,r2,20
    6318:	1000091e 	bne	r2,zero,6340 <ip_output_if+0x100>
    631c:	010000f4 	movhi	r4,3
    6320:	213c0a04 	addi	r4,r4,-4056
    6324:	014000f4 	movhi	r5,3
    6328:	297c1d04 	addi	r5,r5,-3980
    632c:	0180b284 	movi	r6,714
    6330:	01c000f4 	movhi	r7,3
    6334:	39fc1704 	addi	r7,r7,-4004
    6338:	0017c440 	call	17c44 <printf>
    633c:	003fff06 	br	633c <ip_output_if+0xfc>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    6340:	e0bff817 	ldw	r2,-32(fp)
    6344:	e0fffd03 	ldbu	r3,-12(fp)
    6348:	10c00205 	stb	r3,8(r2)
    IPH_PROTO_SET(iphdr, proto);
    634c:	e0bff817 	ldw	r2,-32(fp)
    6350:	e0ffff03 	ldbu	r3,-4(fp)
    6354:	10c00245 	stb	r3,9(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
    6358:	e0bfff03 	ldbu	r2,-4(fp)
    635c:	1006923a 	slli	r3,r2,8
    6360:	e0bffd03 	ldbu	r2,-12(fp)
    6364:	1884b03a 	or	r2,r3,r2
    6368:	e0fff617 	ldw	r3,-40(fp)
    636c:	1885883a 	add	r2,r3,r2
    6370:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
    6374:	e0bffc17 	ldw	r2,-16(fp)
    6378:	10c00017 	ldw	r3,0(r2)
    637c:	e0bff817 	ldw	r2,-32(fp)
    6380:	193fffcc 	andi	r4,r3,65535
    6384:	1140040b 	ldhu	r5,16(r2)
    6388:	280a703a 	and	r5,r5,zero
    638c:	2908b03a 	or	r4,r5,r4
    6390:	1100040d 	sth	r4,16(r2)
    6394:	1806d43a 	srli	r3,r3,16
    6398:	1100048b 	ldhu	r4,18(r2)
    639c:	2008703a 	and	r4,r4,zero
    63a0:	20c6b03a 	or	r3,r4,r3
    63a4:	10c0048d 	sth	r3,18(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    63a8:	e0bff817 	ldw	r2,-32(fp)
    63ac:	10c0040b 	ldhu	r3,16(r2)
    63b0:	1080048b 	ldhu	r2,18(r2)
    63b4:	1004943a 	slli	r2,r2,16
    63b8:	10c4b03a 	or	r2,r2,r3
    63bc:	10bfffcc 	andi	r2,r2,65535
    63c0:	e0fff617 	ldw	r3,-40(fp)
    63c4:	1885883a 	add	r2,r3,r2
    63c8:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
    63cc:	e0bff817 	ldw	r2,-32(fp)
    63d0:	10c0040b 	ldhu	r3,16(r2)
    63d4:	1080048b 	ldhu	r2,18(r2)
    63d8:	1004943a 	slli	r2,r2,16
    63dc:	10c4b03a 	or	r2,r2,r3
    63e0:	1004d43a 	srli	r2,r2,16
    63e4:	e0fff617 	ldw	r3,-40(fp)
    63e8:	1885883a 	add	r2,r3,r2
    63ec:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    63f0:	e0bff70b 	ldhu	r2,-36(fp)
    63f4:	1004d0ba 	srli	r2,r2,2
    63f8:	10801014 	ori	r2,r2,64
    63fc:	1007883a 	mov	r3,r2
    6400:	e0bff817 	ldw	r2,-32(fp)
    6404:	10c00005 	stb	r3,0(r2)
    IPH_TOS_SET(iphdr, tos);
    6408:	e0bff817 	ldw	r2,-32(fp)
    640c:	e0fffe03 	ldbu	r3,-8(fp)
    6410:	10c00045 	stb	r3,1(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
    6414:	e0bffe03 	ldbu	r2,-8(fp)
    6418:	1006923a 	slli	r3,r2,8
    641c:	e0bff817 	ldw	r2,-32(fp)
    6420:	10800003 	ldbu	r2,0(r2)
    6424:	10803fcc 	andi	r2,r2,255
    6428:	1884b03a 	or	r2,r3,r2
    642c:	e0fff617 	ldw	r3,-40(fp)
    6430:	1885883a 	add	r2,r3,r2
    6434:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
    6438:	e0bffa17 	ldw	r2,-24(fp)
    643c:	1080020b 	ldhu	r2,8(r2)
    6440:	10bfffcc 	andi	r2,r2,65535
    6444:	1004d23a 	srli	r2,r2,8
    6448:	1007883a 	mov	r3,r2
    644c:	e0bffa17 	ldw	r2,-24(fp)
    6450:	1080020b 	ldhu	r2,8(r2)
    6454:	10bfffcc 	andi	r2,r2,65535
    6458:	1004923a 	slli	r2,r2,8
    645c:	1884b03a 	or	r2,r3,r2
    6460:	1007883a 	mov	r3,r2
    6464:	e0bff817 	ldw	r2,-32(fp)
    6468:	10c0008d 	sth	r3,2(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
    646c:	e0bff817 	ldw	r2,-32(fp)
    6470:	1080008b 	ldhu	r2,2(r2)
    6474:	10bfffcc 	andi	r2,r2,65535
    6478:	e0fff617 	ldw	r3,-40(fp)
    647c:	1885883a 	add	r2,r3,r2
    6480:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    6484:	e0bff817 	ldw	r2,-32(fp)
    6488:	1000018d 	sth	zero,6(r2)
    IPH_ID_SET(iphdr, htons(ip_id));
    648c:	d0a8a70b 	ldhu	r2,-23908(gp)
    6490:	10bfffcc 	andi	r2,r2,65535
    6494:	1004d23a 	srli	r2,r2,8
    6498:	1007883a 	mov	r3,r2
    649c:	d0a8a70b 	ldhu	r2,-23908(gp)
    64a0:	10bfffcc 	andi	r2,r2,65535
    64a4:	1004923a 	slli	r2,r2,8
    64a8:	1884b03a 	or	r2,r3,r2
    64ac:	1007883a 	mov	r3,r2
    64b0:	e0bff817 	ldw	r2,-32(fp)
    64b4:	10c0010d 	sth	r3,4(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
    64b8:	e0bff817 	ldw	r2,-32(fp)
    64bc:	1080010b 	ldhu	r2,4(r2)
    64c0:	10bfffcc 	andi	r2,r2,65535
    64c4:	e0fff617 	ldw	r3,-40(fp)
    64c8:	1885883a 	add	r2,r3,r2
    64cc:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
    64d0:	d0a8a70b 	ldhu	r2,-23908(gp)
    64d4:	10800044 	addi	r2,r2,1
    64d8:	d0a8a70d 	sth	r2,-23908(gp)

    if (ip_addr_isany(src)) {
    64dc:	e0bffb17 	ldw	r2,-20(fp)
    64e0:	10000326 	beq	r2,zero,64f0 <ip_output_if+0x2b0>
    64e4:	e0bffb17 	ldw	r2,-20(fp)
    64e8:	10800017 	ldw	r2,0(r2)
    64ec:	10000e1e 	bne	r2,zero,6528 <ip_output_if+0x2e8>
      ip_addr_copy(iphdr->src, netif->ip_addr);
    64f0:	e0800417 	ldw	r2,16(fp)
    64f4:	10c00117 	ldw	r3,4(r2)
    64f8:	e0bff817 	ldw	r2,-32(fp)
    64fc:	193fffcc 	andi	r4,r3,65535
    6500:	1140030b 	ldhu	r5,12(r2)
    6504:	280a703a 	and	r5,r5,zero
    6508:	2908b03a 	or	r4,r5,r4
    650c:	1100030d 	sth	r4,12(r2)
    6510:	1806d43a 	srli	r3,r3,16
    6514:	1100038b 	ldhu	r4,14(r2)
    6518:	2008703a 	and	r4,r4,zero
    651c:	20c6b03a 	or	r3,r4,r3
    6520:	10c0038d 	sth	r3,14(r2)
    6524:	00000d06 	br	655c <ip_output_if+0x31c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    6528:	e0bffb17 	ldw	r2,-20(fp)
    652c:	10c00017 	ldw	r3,0(r2)
    6530:	e0bff817 	ldw	r2,-32(fp)
    6534:	193fffcc 	andi	r4,r3,65535
    6538:	1140030b 	ldhu	r5,12(r2)
    653c:	280a703a 	and	r5,r5,zero
    6540:	2908b03a 	or	r4,r5,r4
    6544:	1100030d 	sth	r4,12(r2)
    6548:	1806d43a 	srli	r3,r3,16
    654c:	1100038b 	ldhu	r4,14(r2)
    6550:	2008703a 	and	r4,r4,zero
    6554:	20c6b03a 	or	r3,r4,r3
    6558:	10c0038d 	sth	r3,14(r2)
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    655c:	e0bff817 	ldw	r2,-32(fp)
    6560:	10c0030b 	ldhu	r3,12(r2)
    6564:	1080038b 	ldhu	r2,14(r2)
    6568:	1004943a 	slli	r2,r2,16
    656c:	10c4b03a 	or	r2,r2,r3
    6570:	10bfffcc 	andi	r2,r2,65535
    6574:	e0fff617 	ldw	r3,-40(fp)
    6578:	1885883a 	add	r2,r3,r2
    657c:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
    6580:	e0bff817 	ldw	r2,-32(fp)
    6584:	10c0030b 	ldhu	r3,12(r2)
    6588:	1080038b 	ldhu	r2,14(r2)
    658c:	1004943a 	slli	r2,r2,16
    6590:	10c4b03a 	or	r2,r2,r3
    6594:	1004d43a 	srli	r2,r2,16
    6598:	e0fff617 	ldw	r3,-40(fp)
    659c:	1885883a 	add	r2,r3,r2
    65a0:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    65a4:	e0bff617 	ldw	r2,-40(fp)
    65a8:	1006d43a 	srli	r3,r2,16
    65ac:	e0bff617 	ldw	r2,-40(fp)
    65b0:	10bfffcc 	andi	r2,r2,65535
    65b4:	1885883a 	add	r2,r3,r2
    65b8:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + chk_sum;
    65bc:	e0bff617 	ldw	r2,-40(fp)
    65c0:	1004d43a 	srli	r2,r2,16
    65c4:	e0fff617 	ldw	r3,-40(fp)
    65c8:	1885883a 	add	r2,r3,r2
    65cc:	e0bff615 	stw	r2,-40(fp)
    chk_sum = ~chk_sum;
    65d0:	e0bff617 	ldw	r2,-40(fp)
    65d4:	0084303a 	nor	r2,zero,r2
    65d8:	e0bff615 	stw	r2,-40(fp)
    iphdr->_chksum = chk_sum; /* network order */
    65dc:	e0bff617 	ldw	r2,-40(fp)
    65e0:	1007883a 	mov	r3,r2
    65e4:	e0bff817 	ldw	r2,-32(fp)
    65e8:	10c0028d 	sth	r3,10(r2)
    65ec:	00000b06 	br	661c <ip_output_if+0x3dc>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    65f0:	e0bffa17 	ldw	r2,-24(fp)
    65f4:	10800117 	ldw	r2,4(r2)
    65f8:	e0bff815 	stw	r2,-32(fp)
    ip_addr_copy(dest_addr, iphdr->dest);
    65fc:	e0bff817 	ldw	r2,-32(fp)
    6600:	10c0040b 	ldhu	r3,16(r2)
    6604:	1080048b 	ldhu	r2,18(r2)
    6608:	1004943a 	slli	r2,r2,16
    660c:	10c4b03a 	or	r2,r2,r3
    6610:	e0bff915 	stw	r2,-28(fp)
    dest = &dest_addr;
    6614:	e0bff904 	addi	r2,fp,-28
    6618:	e0bffc15 	stw	r2,-16(fp)
  }

  IP_STATS_INC(ip.xmit);
    661c:	00800134 	movhi	r2,4
    6620:	10932304 	addi	r2,r2,19596
    6624:	1080120b 	ldhu	r2,72(r2)
    6628:	10800044 	addi	r2,r2,1
    662c:	1007883a 	mov	r3,r2
    6630:	00800134 	movhi	r2,4
    6634:	10932304 	addi	r2,r2,19596
    6638:	10c0120d 	sth	r3,72(r2)
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
    663c:	e0800417 	ldw	r2,16(fp)
    6640:	1080090b 	ldhu	r2,36(r2)
    6644:	10bfffcc 	andi	r2,r2,65535
    6648:	10000c26 	beq	r2,zero,667c <ip_output_if+0x43c>
    664c:	e0bffa17 	ldw	r2,-24(fp)
    6650:	1080020b 	ldhu	r2,8(r2)
    6654:	e0c00417 	ldw	r3,16(fp)
    6658:	18c0090b 	ldhu	r3,36(r3)
    665c:	10bfffcc 	andi	r2,r2,65535
    6660:	18ffffcc 	andi	r3,r3,65535
    6664:	1880052e 	bgeu	r3,r2,667c <ip_output_if+0x43c>
    return ip_frag(p, netif, dest);
    6668:	e13ffa17 	ldw	r4,-24(fp)
    666c:	e1400417 	ldw	r5,16(fp)
    6670:	e1bffc17 	ldw	r6,-16(fp)
    6674:	0007f4c0 	call	7f4c <ip_frag>
    6678:	00000606 	br	6694 <ip_output_if+0x454>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
    667c:	e0800417 	ldw	r2,16(fp)
    6680:	10800517 	ldw	r2,20(r2)
    6684:	e1000417 	ldw	r4,16(fp)
    6688:	e17ffa17 	ldw	r5,-24(fp)
    668c:	e1bffc17 	ldw	r6,-16(fp)
    6690:	103ee83a 	callr	r2
}
    6694:	e037883a 	mov	sp,fp
    6698:	dfc00117 	ldw	ra,4(sp)
    669c:	df000017 	ldw	fp,0(sp)
    66a0:	dec00204 	addi	sp,sp,8
    66a4:	f800283a 	ret

000066a8 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
    66a8:	defff404 	addi	sp,sp,-48
    66ac:	dfc00b15 	stw	ra,44(sp)
    66b0:	df000a15 	stw	fp,40(sp)
    66b4:	df000a04 	addi	fp,sp,40
    66b8:	e13ffa15 	stw	r4,-24(fp)
    66bc:	e17ffb15 	stw	r5,-20(fp)
    66c0:	e1bffc15 	stw	r6,-16(fp)
    66c4:	3805883a 	mov	r2,r7
    66c8:	e1000217 	ldw	r4,8(fp)
    66cc:	e0c00317 	ldw	r3,12(fp)
    66d0:	e0bffd05 	stb	r2,-12(fp)
    66d4:	e13ffe05 	stb	r4,-8(fp)
    66d8:	e0ffff05 	stb	r3,-4(fp)
  struct netif *netif;

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);
    66dc:	e0bffa17 	ldw	r2,-24(fp)
    66e0:	1080038b 	ldhu	r2,14(r2)
    66e4:	10bfffcc 	andi	r2,r2,65535
    66e8:	10800060 	cmpeqi	r2,r2,1
    66ec:	1000091e 	bne	r2,zero,6714 <ip_output+0x6c>
    66f0:	010000f4 	movhi	r4,3
    66f4:	213c0a04 	addi	r4,r4,-4056
    66f8:	014000f4 	movhi	r5,3
    66fc:	297c1404 	addi	r5,r5,-4016
    6700:	0180ce44 	movi	r6,825
    6704:	01c000f4 	movhi	r7,3
    6708:	39fc1704 	addi	r7,r7,-4004
    670c:	0017c440 	call	17c44 <printf>
    6710:	003fff06 	br	6710 <ip_output+0x68>

  if ((netif = ip_route(dest)) == NULL) {
    6714:	e13ffc17 	ldw	r4,-16(fp)
    6718:	0005c4c0 	call	5c4c <ip_route>
    671c:	e0bff915 	stw	r2,-28(fp)
    6720:	e0bff917 	ldw	r2,-28(fp)
    6724:	10000a1e 	bne	r2,zero,6750 <ip_output+0xa8>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    6728:	00800134 	movhi	r2,4
    672c:	10932304 	addi	r2,r2,19596
    6730:	1080158b 	ldhu	r2,86(r2)
    6734:	10800044 	addi	r2,r2,1
    6738:	1007883a 	mov	r3,r2
    673c:	00800134 	movhi	r2,4
    6740:	10932304 	addi	r2,r2,19596
    6744:	10c0158d 	sth	r3,86(r2)
    return ERR_RTE;
    6748:	00bfff04 	movi	r2,-4
    674c:	00000c06 	br	6780 <ip_output+0xd8>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
    6750:	e0bffd03 	ldbu	r2,-12(fp)
    6754:	e13ffe03 	ldbu	r4,-8(fp)
    6758:	e0ffff03 	ldbu	r3,-4(fp)
    675c:	d9000015 	stw	r4,0(sp)
    6760:	d8c00115 	stw	r3,4(sp)
    6764:	e0fff917 	ldw	r3,-28(fp)
    6768:	d8c00215 	stw	r3,8(sp)
    676c:	e13ffa17 	ldw	r4,-24(fp)
    6770:	e17ffb17 	ldw	r5,-20(fp)
    6774:	e1bffc17 	ldw	r6,-16(fp)
    6778:	100f883a 	mov	r7,r2
    677c:	00062400 	call	6240 <ip_output_if>
}
    6780:	e037883a 	mov	sp,fp
    6784:	dfc00117 	ldw	ra,4(sp)
    6788:	df000017 	ldw	fp,0(sp)
    678c:	dec00204 	addi	sp,sp,8
    6790:	f800283a 	ret

00006794 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
    6794:	defffc04 	addi	sp,sp,-16
    6798:	df000315 	stw	fp,12(sp)
    679c:	df000304 	addi	fp,sp,12
    67a0:	e13ffe15 	stw	r4,-8(fp)
    67a4:	e17fff15 	stw	r5,-4(fp)
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
    67a8:	e0bffe17 	ldw	r2,-8(fp)
    67ac:	e0bffd15 	stw	r2,-12(fp)

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
    67b0:	e0bffe17 	ldw	r2,-8(fp)
    67b4:	10bfffe0 	cmpeqi	r2,r2,-1
    67b8:	1000021e 	bne	r2,zero,67c4 <ip4_addr_isbroadcast+0x30>
    67bc:	e0bffe17 	ldw	r2,-8(fp)
    67c0:	1000021e 	bne	r2,zero,67cc <ip4_addr_isbroadcast+0x38>
      (addr == IPADDR_ANY)) {
    return 1;
    67c4:	00800044 	movi	r2,1
    67c8:	00002106 	br	6850 <ip4_addr_isbroadcast+0xbc>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
    67cc:	e0bfff17 	ldw	r2,-4(fp)
    67d0:	10800b43 	ldbu	r2,45(r2)
    67d4:	10803fcc 	andi	r2,r2,255
    67d8:	1080008c 	andi	r2,r2,2
    67dc:	1000021e 	bne	r2,zero,67e8 <ip4_addr_isbroadcast+0x54>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    67e0:	0005883a 	mov	r2,zero
    67e4:	00001a06 	br	6850 <ip4_addr_isbroadcast+0xbc>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    67e8:	e0bfff17 	ldw	r2,-4(fp)
    67ec:	10c00117 	ldw	r3,4(r2)
    67f0:	e0bffe17 	ldw	r2,-8(fp)
    67f4:	1880021e 	bne	r3,r2,6800 <ip4_addr_isbroadcast+0x6c>
    return 0;
    67f8:	0005883a 	mov	r2,zero
    67fc:	00001406 	br	6850 <ip4_addr_isbroadcast+0xbc>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
    6800:	e0fffd17 	ldw	r3,-12(fp)
    6804:	e0bfff17 	ldw	r2,-4(fp)
    6808:	10800117 	ldw	r2,4(r2)
    680c:	1886f03a 	xor	r3,r3,r2
    6810:	e0bfff17 	ldw	r2,-4(fp)
    6814:	10800217 	ldw	r2,8(r2)
    6818:	1884703a 	and	r2,r3,r2
    681c:	10000b1e 	bne	r2,zero,684c <ip4_addr_isbroadcast+0xb8>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
    6820:	e0bfff17 	ldw	r2,-4(fp)
    6824:	10800217 	ldw	r2,8(r2)
    6828:	0086303a 	nor	r3,zero,r2
    682c:	e0bffe17 	ldw	r2,-8(fp)
    6830:	1886703a 	and	r3,r3,r2
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    6834:	e0bfff17 	ldw	r2,-4(fp)
    6838:	10800217 	ldw	r2,8(r2)
    683c:	0084303a 	nor	r2,zero,r2
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
    6840:	1880021e 	bne	r3,r2,684c <ip4_addr_isbroadcast+0xb8>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
    6844:	00800044 	movi	r2,1
    6848:	00000106 	br	6850 <ip4_addr_isbroadcast+0xbc>
  } else {
    return 0;
    684c:	0005883a 	mov	r2,zero
  }
}
    6850:	e037883a 	mov	sp,fp
    6854:	df000017 	ldw	fp,0(sp)
    6858:	dec00104 	addi	sp,sp,4
    685c:	f800283a 	ret

00006860 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
    6860:	defffc04 	addi	sp,sp,-16
    6864:	df000315 	stw	fp,12(sp)
    6868:	df000304 	addi	fp,sp,12
    686c:	e13fff15 	stw	r4,-4(fp)
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
    6870:	e0bfff17 	ldw	r2,-4(fp)
    6874:	1006d63a 	srli	r3,r2,24
    6878:	e0bfff17 	ldw	r2,-4(fp)
    687c:	1004d23a 	srli	r2,r2,8
    6880:	10bfc00c 	andi	r2,r2,65280
    6884:	1886b03a 	or	r3,r3,r2
    6888:	e0bfff17 	ldw	r2,-4(fp)
    688c:	10bfc00c 	andi	r2,r2,65280
    6890:	1004923a 	slli	r2,r2,8
    6894:	1886b03a 	or	r3,r3,r2
    6898:	e0bfff17 	ldw	r2,-4(fp)
    689c:	1004963a 	slli	r2,r2,24
    68a0:	1884b03a 	or	r2,r3,r2
    68a4:	e0bffe15 	stw	r2,-8(fp)

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
    68a8:	00a00034 	movhi	r2,32768
    68ac:	e0bffd15 	stw	r2,-12(fp)
    68b0:	00000706 	br	68d0 <ip4_addr_netmask_valid+0x70>
    if ((nm_hostorder & mask) == 0) {
    68b4:	e0fffe17 	ldw	r3,-8(fp)
    68b8:	e0bffd17 	ldw	r2,-12(fp)
    68bc:	1884703a 	and	r2,r3,r2
    68c0:	10000626 	beq	r2,zero,68dc <ip4_addr_netmask_valid+0x7c>
{
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
    68c4:	e0bffd17 	ldw	r2,-12(fp)
    68c8:	1004d07a 	srli	r2,r2,1
    68cc:	e0bffd15 	stw	r2,-12(fp)
    68d0:	e0bffd17 	ldw	r2,-12(fp)
    68d4:	103ff71e 	bne	r2,zero,68b4 <ip4_addr_netmask_valid+0x54>
    if ((nm_hostorder & mask) == 0) {
      break;
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
    68d8:	00000b06 	br	6908 <ip4_addr_netmask_valid+0xa8>
  u32_t nm_hostorder = lwip_htonl(netmask);

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
    if ((nm_hostorder & mask) == 0) {
      break;
    68dc:	0001883a 	nop
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
    68e0:	00000906 	br	6908 <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) != 0) {
    68e4:	e0fffe17 	ldw	r3,-8(fp)
    68e8:	e0bffd17 	ldw	r2,-12(fp)
    68ec:	1884703a 	and	r2,r3,r2
    68f0:	10000226 	beq	r2,zero,68fc <ip4_addr_netmask_valid+0x9c>
      /* there is a one after the first zero -> invalid */
      return 0;
    68f4:	0005883a 	mov	r2,zero
    68f8:	00000606 	br	6914 <ip4_addr_netmask_valid+0xb4>
    if ((nm_hostorder & mask) == 0) {
      break;
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
    68fc:	e0bffd17 	ldw	r2,-12(fp)
    6900:	1004d07a 	srli	r2,r2,1
    6904:	e0bffd15 	stw	r2,-12(fp)
    6908:	e0bffd17 	ldw	r2,-12(fp)
    690c:	103ff51e 	bne	r2,zero,68e4 <ip4_addr_netmask_valid+0x84>
      /* there is a one after the first zero -> invalid */
      return 0;
    }
  }
  /* no one after the first zero -> valid */
  return 1;
    6910:	00800044 	movi	r2,1
}
    6914:	e037883a 	mov	sp,fp
    6918:	df000017 	ldw	fp,0(sp)
    691c:	dec00104 	addi	sp,sp,4
    6920:	f800283a 	ret

00006924 <ipaddr_addr>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
    6924:	defffc04 	addi	sp,sp,-16
    6928:	dfc00315 	stw	ra,12(sp)
    692c:	df000215 	stw	fp,8(sp)
    6930:	df000204 	addi	fp,sp,8
    6934:	e13fff15 	stw	r4,-4(fp)
  ip_addr_t val;

  if (ipaddr_aton(cp, &val)) {
    6938:	e13fff17 	ldw	r4,-4(fp)
    693c:	e17ffe04 	addi	r5,fp,-8
    6940:	00069680 	call	6968 <ipaddr_aton>
    6944:	10000226 	beq	r2,zero,6950 <ipaddr_addr+0x2c>
    return ip4_addr_get_u32(&val);
    6948:	e0bffe17 	ldw	r2,-8(fp)
    694c:	00000106 	br	6954 <ipaddr_addr+0x30>
  }
  return (IPADDR_NONE);
    6950:	00bfffc4 	movi	r2,-1
}
    6954:	e037883a 	mov	sp,fp
    6958:	dfc00117 	ldw	ra,4(sp)
    695c:	df000017 	ldw	fp,0(sp)
    6960:	dec00204 	addi	sp,sp,8
    6964:	f800283a 	ret

00006968 <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
    6968:	defff504 	addi	sp,sp,-44
    696c:	dfc00a15 	stw	ra,40(sp)
    6970:	df000915 	stw	fp,36(sp)
    6974:	df000904 	addi	fp,sp,36
    6978:	e13ffe15 	stw	r4,-8(fp)
    697c:	e17fff15 	stw	r5,-4(fp)
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
    6980:	e0bffa04 	addi	r2,fp,-24
    6984:	e0bff915 	stw	r2,-28(fp)

  c = *cp;
    6988:	e0bffe17 	ldw	r2,-8(fp)
    698c:	10800003 	ldbu	r2,0(r2)
    6990:	e0bff845 	stb	r2,-31(fp)
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
    6994:	e0bff843 	ldbu	r2,-31(fp)
    6998:	10803fcc 	andi	r2,r2,255
    699c:	10800c30 	cmpltui	r2,r2,48
    69a0:	1000041e 	bne	r2,zero,69b4 <ipaddr_aton+0x4c>
    69a4:	e0bff843 	ldbu	r2,-31(fp)
    69a8:	10803fcc 	andi	r2,r2,255
    69ac:	10800eb0 	cmpltui	r2,r2,58
    69b0:	1000021e 	bne	r2,zero,69bc <ipaddr_aton+0x54>
      return (0);
    69b4:	0005883a 	mov	r2,zero
    69b8:	0000ef06 	br	6d78 <ipaddr_aton+0x410>
    val = 0;
    69bc:	e03ff715 	stw	zero,-36(fp)
    base = 10;
    69c0:	00800284 	movi	r2,10
    69c4:	e0bff805 	stb	r2,-32(fp)
    if (c == '0') {
    69c8:	e0bff847 	ldb	r2,-31(fp)
    69cc:	10800c18 	cmpnei	r2,r2,48
    69d0:	1000171e 	bne	r2,zero,6a30 <ipaddr_aton+0xc8>
      c = *++cp;
    69d4:	e0bffe17 	ldw	r2,-8(fp)
    69d8:	10800044 	addi	r2,r2,1
    69dc:	e0bffe15 	stw	r2,-8(fp)
    69e0:	e0bffe17 	ldw	r2,-8(fp)
    69e4:	10800003 	ldbu	r2,0(r2)
    69e8:	e0bff845 	stb	r2,-31(fp)
      if (c == 'x' || c == 'X') {
    69ec:	e0bff847 	ldb	r2,-31(fp)
    69f0:	10801e20 	cmpeqi	r2,r2,120
    69f4:	1000031e 	bne	r2,zero,6a04 <ipaddr_aton+0x9c>
    69f8:	e0bff847 	ldb	r2,-31(fp)
    69fc:	10801618 	cmpnei	r2,r2,88
    6a00:	1000091e 	bne	r2,zero,6a28 <ipaddr_aton+0xc0>
        base = 16;
    6a04:	00800404 	movi	r2,16
    6a08:	e0bff805 	stb	r2,-32(fp)
        c = *++cp;
    6a0c:	e0bffe17 	ldw	r2,-8(fp)
    6a10:	10800044 	addi	r2,r2,1
    6a14:	e0bffe15 	stw	r2,-8(fp)
    6a18:	e0bffe17 	ldw	r2,-8(fp)
    6a1c:	10800003 	ldbu	r2,0(r2)
    6a20:	e0bff845 	stb	r2,-31(fp)
    6a24:	00000206 	br	6a30 <ipaddr_aton+0xc8>
      } else
        base = 8;
    6a28:	00800204 	movi	r2,8
    6a2c:	e0bff805 	stb	r2,-32(fp)
    }
    for (;;) {
      if (isdigit(c)) {
    6a30:	e0bff843 	ldbu	r2,-31(fp)
    6a34:	10803fcc 	andi	r2,r2,255
    6a38:	10800c30 	cmpltui	r2,r2,48
    6a3c:	1000121e 	bne	r2,zero,6a88 <ipaddr_aton+0x120>
    6a40:	e0bff843 	ldbu	r2,-31(fp)
    6a44:	10803fcc 	andi	r2,r2,255
    6a48:	10800ea8 	cmpgeui	r2,r2,58
    6a4c:	10000e1e 	bne	r2,zero,6a88 <ipaddr_aton+0x120>
        val = (val * base) + (int)(c - '0');
    6a50:	e0fff803 	ldbu	r3,-32(fp)
    6a54:	e0bff717 	ldw	r2,-36(fp)
    6a58:	1887383a 	mul	r3,r3,r2
    6a5c:	e0bff847 	ldb	r2,-31(fp)
    6a60:	1885883a 	add	r2,r3,r2
    6a64:	10bff404 	addi	r2,r2,-48
    6a68:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
    6a6c:	e0bffe17 	ldw	r2,-8(fp)
    6a70:	10800044 	addi	r2,r2,1
    6a74:	e0bffe15 	stw	r2,-8(fp)
    6a78:	e0bffe17 	ldw	r2,-8(fp)
    6a7c:	10800003 	ldbu	r2,0(r2)
    6a80:	e0bff845 	stb	r2,-31(fp)
      } else if (base == 16 && isxdigit(c)) {
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
        c = *++cp;
      } else
        break;
    }
    6a84:	003fea06 	br	6a30 <ipaddr_aton+0xc8>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (int)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
    6a88:	e0bff803 	ldbu	r2,-32(fp)
    6a8c:	10800418 	cmpnei	r2,r2,16
    6a90:	1000311e 	bne	r2,zero,6b58 <ipaddr_aton+0x1f0>
    6a94:	e0bff843 	ldbu	r2,-31(fp)
    6a98:	10803fcc 	andi	r2,r2,255
    6a9c:	10800c30 	cmpltui	r2,r2,48
    6aa0:	1000041e 	bne	r2,zero,6ab4 <ipaddr_aton+0x14c>
    6aa4:	e0bff843 	ldbu	r2,-31(fp)
    6aa8:	10803fcc 	andi	r2,r2,255
    6aac:	10800eb0 	cmpltui	r2,r2,58
    6ab0:	1000101e 	bne	r2,zero,6af4 <ipaddr_aton+0x18c>
    6ab4:	e0bff843 	ldbu	r2,-31(fp)
    6ab8:	10803fcc 	andi	r2,r2,255
    6abc:	10801870 	cmpltui	r2,r2,97
    6ac0:	1000041e 	bne	r2,zero,6ad4 <ipaddr_aton+0x16c>
    6ac4:	e0bff843 	ldbu	r2,-31(fp)
    6ac8:	10803fcc 	andi	r2,r2,255
    6acc:	108019f0 	cmpltui	r2,r2,103
    6ad0:	1000081e 	bne	r2,zero,6af4 <ipaddr_aton+0x18c>
    6ad4:	e0bff843 	ldbu	r2,-31(fp)
    6ad8:	10803fcc 	andi	r2,r2,255
    6adc:	10801070 	cmpltui	r2,r2,65
    6ae0:	10001d1e 	bne	r2,zero,6b58 <ipaddr_aton+0x1f0>
    6ae4:	e0bff843 	ldbu	r2,-31(fp)
    6ae8:	10803fcc 	andi	r2,r2,255
    6aec:	108011e8 	cmpgeui	r2,r2,71
    6af0:	1000191e 	bne	r2,zero,6b58 <ipaddr_aton+0x1f0>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
    6af4:	e0bff717 	ldw	r2,-36(fp)
    6af8:	1006913a 	slli	r3,r2,4
    6afc:	e0bff847 	ldb	r2,-31(fp)
    6b00:	11000284 	addi	r4,r2,10
    6b04:	e0bff843 	ldbu	r2,-31(fp)
    6b08:	10803fcc 	andi	r2,r2,255
    6b0c:	10801870 	cmpltui	r2,r2,97
    6b10:	1000061e 	bne	r2,zero,6b2c <ipaddr_aton+0x1c4>
    6b14:	e0bff843 	ldbu	r2,-31(fp)
    6b18:	10803fcc 	andi	r2,r2,255
    6b1c:	10801ee8 	cmpgeui	r2,r2,123
    6b20:	1000021e 	bne	r2,zero,6b2c <ipaddr_aton+0x1c4>
    6b24:	00801844 	movi	r2,97
    6b28:	00000106 	br	6b30 <ipaddr_aton+0x1c8>
    6b2c:	00801044 	movi	r2,65
    6b30:	2085c83a 	sub	r2,r4,r2
    6b34:	1884b03a 	or	r2,r3,r2
    6b38:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
    6b3c:	e0bffe17 	ldw	r2,-8(fp)
    6b40:	10800044 	addi	r2,r2,1
    6b44:	e0bffe15 	stw	r2,-8(fp)
    6b48:	e0bffe17 	ldw	r2,-8(fp)
    6b4c:	10800003 	ldbu	r2,0(r2)
    6b50:	e0bff845 	stb	r2,-31(fp)
      } else
        break;
    }
    6b54:	003fb606 	br	6a30 <ipaddr_aton+0xc8>
    if (c == '.') {
    6b58:	e0bff847 	ldb	r2,-31(fp)
    6b5c:	10800b98 	cmpnei	r2,r2,46
    6b60:	1000131e 	bne	r2,zero,6bb0 <ipaddr_aton+0x248>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
    6b64:	e0bffa04 	addi	r2,fp,-24
    6b68:	10800304 	addi	r2,r2,12
    6b6c:	e0fff917 	ldw	r3,-28(fp)
    6b70:	18800236 	bltu	r3,r2,6b7c <ipaddr_aton+0x214>
        return (0);
    6b74:	0005883a 	mov	r2,zero
    6b78:	00007f06 	br	6d78 <ipaddr_aton+0x410>
      }
      *pp++ = val;
    6b7c:	e0bff917 	ldw	r2,-28(fp)
    6b80:	e0fff717 	ldw	r3,-36(fp)
    6b84:	10c00015 	stw	r3,0(r2)
    6b88:	e0bff917 	ldw	r2,-28(fp)
    6b8c:	10800104 	addi	r2,r2,4
    6b90:	e0bff915 	stw	r2,-28(fp)
      c = *++cp;
    6b94:	e0bffe17 	ldw	r2,-8(fp)
    6b98:	10800044 	addi	r2,r2,1
    6b9c:	e0bffe15 	stw	r2,-8(fp)
    6ba0:	e0bffe17 	ldw	r2,-8(fp)
    6ba4:	10800003 	ldbu	r2,0(r2)
    6ba8:	e0bff845 	stb	r2,-31(fp)
    } else
      break;
  }
    6bac:	003f7906 	br	6994 <ipaddr_aton+0x2c>
        return (0);
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
    6bb0:	0001883a 	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
    6bb4:	e0bff847 	ldb	r2,-31(fp)
    6bb8:	10001426 	beq	r2,zero,6c0c <ipaddr_aton+0x2a4>
    6bbc:	e0bff847 	ldb	r2,-31(fp)
    6bc0:	10800820 	cmpeqi	r2,r2,32
    6bc4:	1000111e 	bne	r2,zero,6c0c <ipaddr_aton+0x2a4>
    6bc8:	e0bff847 	ldb	r2,-31(fp)
    6bcc:	10800320 	cmpeqi	r2,r2,12
    6bd0:	10000e1e 	bne	r2,zero,6c0c <ipaddr_aton+0x2a4>
    6bd4:	e0bff847 	ldb	r2,-31(fp)
    6bd8:	108002a0 	cmpeqi	r2,r2,10
    6bdc:	10000b1e 	bne	r2,zero,6c0c <ipaddr_aton+0x2a4>
    6be0:	e0bff847 	ldb	r2,-31(fp)
    6be4:	10800360 	cmpeqi	r2,r2,13
    6be8:	1000081e 	bne	r2,zero,6c0c <ipaddr_aton+0x2a4>
    6bec:	e0bff847 	ldb	r2,-31(fp)
    6bf0:	10800260 	cmpeqi	r2,r2,9
    6bf4:	1000051e 	bne	r2,zero,6c0c <ipaddr_aton+0x2a4>
    6bf8:	e0bff847 	ldb	r2,-31(fp)
    6bfc:	108002e0 	cmpeqi	r2,r2,11
    6c00:	1000021e 	bne	r2,zero,6c0c <ipaddr_aton+0x2a4>
    return (0);
    6c04:	0005883a 	mov	r2,zero
    6c08:	00005b06 	br	6d78 <ipaddr_aton+0x410>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
    6c0c:	e0fff917 	ldw	r3,-28(fp)
    6c10:	e0bffa04 	addi	r2,fp,-24
    6c14:	1885c83a 	sub	r2,r3,r2
    6c18:	1005d0ba 	srai	r2,r2,2
    6c1c:	10800044 	addi	r2,r2,1
    6c20:	10c00168 	cmpgeui	r3,r2,5
    6c24:	1800381e 	bne	r3,zero,6d08 <ipaddr_aton+0x3a0>
    6c28:	1085883a 	add	r2,r2,r2
    6c2c:	1087883a 	add	r3,r2,r2
    6c30:	00800034 	movhi	r2,0
    6c34:	109b1104 	addi	r2,r2,27716
    6c38:	1885883a 	add	r2,r3,r2
    6c3c:	10800017 	ldw	r2,0(r2)
    6c40:	1000683a 	jmp	r2
    6c44:	00006c58 	cmpnei	zero,zero,433
    6c48:	00006d2c 	andhi	zero,zero,436
    6c4c:	00006c60 	cmpeqi	zero,zero,433
    6c50:	00006c8c 	andi	zero,zero,434
    6c54:	00006cc4 	movi	zero,435

  case 0:
    return (0);       /* initial nondigit */
    6c58:	0005883a 	mov	r2,zero
    6c5c:	00004606 	br	6d78 <ipaddr_aton+0x410>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
    6c60:	e0fff717 	ldw	r3,-36(fp)
    6c64:	00804034 	movhi	r2,256
    6c68:	18800236 	bltu	r3,r2,6c74 <ipaddr_aton+0x30c>
      return (0);
    6c6c:	0005883a 	mov	r2,zero
    6c70:	00004106 	br	6d78 <ipaddr_aton+0x410>
    }
    val |= parts[0] << 24;
    6c74:	e0bffa17 	ldw	r2,-24(fp)
    6c78:	1004963a 	slli	r2,r2,24
    6c7c:	e0fff717 	ldw	r3,-36(fp)
    6c80:	1884b03a 	or	r2,r3,r2
    6c84:	e0bff715 	stw	r2,-36(fp)
    break;
    6c88:	00002906 	br	6d30 <ipaddr_aton+0x3c8>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
    6c8c:	e0bff717 	ldw	r2,-36(fp)
    6c90:	00ffffd4 	movui	r3,65535
    6c94:	1880022e 	bgeu	r3,r2,6ca0 <ipaddr_aton+0x338>
      return (0);
    6c98:	0005883a 	mov	r2,zero
    6c9c:	00003606 	br	6d78 <ipaddr_aton+0x410>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
    6ca0:	e0bffa17 	ldw	r2,-24(fp)
    6ca4:	1006963a 	slli	r3,r2,24
    6ca8:	e0bffb17 	ldw	r2,-20(fp)
    6cac:	1004943a 	slli	r2,r2,16
    6cb0:	1884b03a 	or	r2,r3,r2
    6cb4:	e0fff717 	ldw	r3,-36(fp)
    6cb8:	1884b03a 	or	r2,r3,r2
    6cbc:	e0bff715 	stw	r2,-36(fp)
    break;
    6cc0:	00001b06 	br	6d30 <ipaddr_aton+0x3c8>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
    6cc4:	e0bff717 	ldw	r2,-36(fp)
    6cc8:	10804030 	cmpltui	r2,r2,256
    6ccc:	1000021e 	bne	r2,zero,6cd8 <ipaddr_aton+0x370>
      return (0);
    6cd0:	0005883a 	mov	r2,zero
    6cd4:	00002806 	br	6d78 <ipaddr_aton+0x410>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
    6cd8:	e0bffa17 	ldw	r2,-24(fp)
    6cdc:	1006963a 	slli	r3,r2,24
    6ce0:	e0bffb17 	ldw	r2,-20(fp)
    6ce4:	1004943a 	slli	r2,r2,16
    6ce8:	1886b03a 	or	r3,r3,r2
    6cec:	e0bffc17 	ldw	r2,-16(fp)
    6cf0:	1004923a 	slli	r2,r2,8
    6cf4:	1884b03a 	or	r2,r3,r2
    6cf8:	e0fff717 	ldw	r3,-36(fp)
    6cfc:	1884b03a 	or	r2,r3,r2
    6d00:	e0bff715 	stw	r2,-36(fp)
    break;
    6d04:	00000a06 	br	6d30 <ipaddr_aton+0x3c8>
  default:
    LWIP_ASSERT("unhandled", 0);
    6d08:	010000f4 	movhi	r4,3
    6d0c:	213c2904 	addi	r4,r4,-3932
    6d10:	014000f4 	movhi	r5,3
    6d14:	297c3304 	addi	r5,r5,-3892
    6d18:	01803cc4 	movi	r6,243
    6d1c:	01c000f4 	movhi	r7,3
    6d20:	39fc3604 	addi	r7,r7,-3880
    6d24:	0017c440 	call	17c44 <printf>
    6d28:	003fff06 	br	6d28 <ipaddr_aton+0x3c0>

  case 0:
    return (0);       /* initial nondigit */

  case 1:             /* a -- 32 bits */
    break;
    6d2c:	0001883a 	nop
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
    6d30:	e0bfff17 	ldw	r2,-4(fp)
    6d34:	10000f26 	beq	r2,zero,6d74 <ipaddr_aton+0x40c>
    ip4_addr_set_u32(addr, htonl(val));
    6d38:	e0bff717 	ldw	r2,-36(fp)
    6d3c:	1006d63a 	srli	r3,r2,24
    6d40:	e0bff717 	ldw	r2,-36(fp)
    6d44:	1004d23a 	srli	r2,r2,8
    6d48:	10bfc00c 	andi	r2,r2,65280
    6d4c:	1886b03a 	or	r3,r3,r2
    6d50:	e0bff717 	ldw	r2,-36(fp)
    6d54:	10bfc00c 	andi	r2,r2,65280
    6d58:	1004923a 	slli	r2,r2,8
    6d5c:	1886b03a 	or	r3,r3,r2
    6d60:	e0bff717 	ldw	r2,-36(fp)
    6d64:	1004963a 	slli	r2,r2,24
    6d68:	1886b03a 	or	r3,r3,r2
    6d6c:	e0bfff17 	ldw	r2,-4(fp)
    6d70:	10c00015 	stw	r3,0(r2)
  }
  return (1);
    6d74:	00800044 	movi	r2,1
}
    6d78:	e037883a 	mov	sp,fp
    6d7c:	dfc00117 	ldw	ra,4(sp)
    6d80:	df000017 	ldw	fp,0(sp)
    6d84:	dec00204 	addi	sp,sp,8
    6d88:	f800283a 	ret

00006d8c <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
    6d8c:	defffd04 	addi	sp,sp,-12
    6d90:	dfc00215 	stw	ra,8(sp)
    6d94:	df000115 	stw	fp,4(sp)
    6d98:	df000104 	addi	fp,sp,4
    6d9c:	e13fff15 	stw	r4,-4(fp)
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
    6da0:	e13fff17 	ldw	r4,-4(fp)
    6da4:	014000f4 	movhi	r5,3
    6da8:	295c0204 	addi	r5,r5,28680
    6dac:	01800404 	movi	r6,16
    6db0:	0006dc80 	call	6dc8 <ipaddr_ntoa_r>
}
    6db4:	e037883a 	mov	sp,fp
    6db8:	dfc00117 	ldw	ra,4(sp)
    6dbc:	df000017 	ldw	fp,0(sp)
    6dc0:	dec00204 	addi	sp,sp,8
    6dc4:	f800283a 	ret

00006dc8 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
    6dc8:	defff504 	addi	sp,sp,-44
    6dcc:	df000a15 	stw	fp,40(sp)
    6dd0:	df000a04 	addi	fp,sp,40
    6dd4:	e13ffd15 	stw	r4,-12(fp)
    6dd8:	e17ffe15 	stw	r5,-8(fp)
    6ddc:	e1bfff15 	stw	r6,-4(fp)
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
    6de0:	e03ff915 	stw	zero,-28(fp)

  s_addr = ip4_addr_get_u32(addr);
    6de4:	e0bffd17 	ldw	r2,-12(fp)
    6de8:	10800017 	ldw	r2,0(r2)
    6dec:	e0bffb15 	stw	r2,-20(fp)

  rp = buf;
    6df0:	e0bffe17 	ldw	r2,-8(fp)
    6df4:	e0bff615 	stw	r2,-40(fp)
  ap = (u8_t *)&s_addr;
    6df8:	e0bffb04 	addi	r2,fp,-20
    6dfc:	e0bff715 	stw	r2,-36(fp)
  for(n = 0; n < 4; n++) {
    6e00:	e03ff805 	stb	zero,-32(fp)
    6e04:	00004f06 	br	6f44 <ipaddr_ntoa_r+0x17c>
    i = 0;
    6e08:	e03ff845 	stb	zero,-31(fp)
    do {
      rem = *ap % (u8_t)10;
    6e0c:	e0bff717 	ldw	r2,-36(fp)
    6e10:	10800003 	ldbu	r2,0(r2)
    6e14:	10803fcc 	andi	r2,r2,255
    6e18:	00c00284 	movi	r3,10
    6e1c:	10c7203a 	divu	r3,r2,r3
    6e20:	18c002a4 	muli	r3,r3,10
    6e24:	10c5c83a 	sub	r2,r2,r3
    6e28:	e0bffa05 	stb	r2,-24(fp)
      *ap /= (u8_t)10;
    6e2c:	e0bff717 	ldw	r2,-36(fp)
    6e30:	10800003 	ldbu	r2,0(r2)
    6e34:	10c03fcc 	andi	r3,r2,255
    6e38:	00800284 	movi	r2,10
    6e3c:	1885203a 	divu	r2,r3,r2
    6e40:	1007883a 	mov	r3,r2
    6e44:	e0bff717 	ldw	r2,-36(fp)
    6e48:	10c00005 	stb	r3,0(r2)
      inv[i++] = '0' + rem;
    6e4c:	e0bff843 	ldbu	r2,-31(fp)
    6e50:	e0fffa03 	ldbu	r3,-24(fp)
    6e54:	18c00c04 	addi	r3,r3,48
    6e58:	e13ffc04 	addi	r4,fp,-16
    6e5c:	2085883a 	add	r2,r4,r2
    6e60:	10c00005 	stb	r3,0(r2)
    6e64:	e0bff843 	ldbu	r2,-31(fp)
    6e68:	10800044 	addi	r2,r2,1
    6e6c:	e0bff845 	stb	r2,-31(fp)
    } while(*ap);
    6e70:	e0bff717 	ldw	r2,-36(fp)
    6e74:	10800003 	ldbu	r2,0(r2)
    6e78:	10803fcc 	andi	r2,r2,255
    6e7c:	103fe31e 	bne	r2,zero,6e0c <ipaddr_ntoa_r+0x44>
    while(i--) {
    6e80:	00001306 	br	6ed0 <ipaddr_ntoa_r+0x108>
      if (len++ >= buflen) {
    6e84:	e0fff917 	ldw	r3,-28(fp)
    6e88:	e0bfff17 	ldw	r2,-4(fp)
    6e8c:	1884403a 	cmpge	r2,r3,r2
    6e90:	e0fff917 	ldw	r3,-28(fp)
    6e94:	18c00044 	addi	r3,r3,1
    6e98:	e0fff915 	stw	r3,-28(fp)
    6e9c:	10803fcc 	andi	r2,r2,255
    6ea0:	10000226 	beq	r2,zero,6eac <ipaddr_ntoa_r+0xe4>
        return NULL;
    6ea4:	0005883a 	mov	r2,zero
    6ea8:	00002f06 	br	6f68 <ipaddr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
    6eac:	e0bff843 	ldbu	r2,-31(fp)
    6eb0:	e0fffc04 	addi	r3,fp,-16
    6eb4:	1885883a 	add	r2,r3,r2
    6eb8:	10c00003 	ldbu	r3,0(r2)
    6ebc:	e0bff617 	ldw	r2,-40(fp)
    6ec0:	10c00005 	stb	r3,0(r2)
    6ec4:	e0bff617 	ldw	r2,-40(fp)
    6ec8:	10800044 	addi	r2,r2,1
    6ecc:	e0bff615 	stw	r2,-40(fp)
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
    6ed0:	e0bff843 	ldbu	r2,-31(fp)
    6ed4:	1004c03a 	cmpne	r2,r2,zero
    6ed8:	e0fff843 	ldbu	r3,-31(fp)
    6edc:	18ffffc4 	addi	r3,r3,-1
    6ee0:	e0fff845 	stb	r3,-31(fp)
    6ee4:	10803fcc 	andi	r2,r2,255
    6ee8:	103fe61e 	bne	r2,zero,6e84 <ipaddr_ntoa_r+0xbc>
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
    6eec:	e0fff917 	ldw	r3,-28(fp)
    6ef0:	e0bfff17 	ldw	r2,-4(fp)
    6ef4:	1884403a 	cmpge	r2,r3,r2
    6ef8:	e0fff917 	ldw	r3,-28(fp)
    6efc:	18c00044 	addi	r3,r3,1
    6f00:	e0fff915 	stw	r3,-28(fp)
    6f04:	10803fcc 	andi	r2,r2,255
    6f08:	10000226 	beq	r2,zero,6f14 <ipaddr_ntoa_r+0x14c>
      return NULL;
    6f0c:	0005883a 	mov	r2,zero
    6f10:	00001506 	br	6f68 <ipaddr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
    6f14:	e0bff617 	ldw	r2,-40(fp)
    6f18:	00c00b84 	movi	r3,46
    6f1c:	10c00005 	stb	r3,0(r2)
    6f20:	e0bff617 	ldw	r2,-40(fp)
    6f24:	10800044 	addi	r2,r2,1
    6f28:	e0bff615 	stw	r2,-40(fp)
    ap++;
    6f2c:	e0bff717 	ldw	r2,-36(fp)
    6f30:	10800044 	addi	r2,r2,1
    6f34:	e0bff715 	stw	r2,-36(fp)

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    6f38:	e0bff803 	ldbu	r2,-32(fp)
    6f3c:	10800044 	addi	r2,r2,1
    6f40:	e0bff805 	stb	r2,-32(fp)
    6f44:	e0bff803 	ldbu	r2,-32(fp)
    6f48:	10800130 	cmpltui	r2,r2,4
    6f4c:	103fae1e 	bne	r2,zero,6e08 <ipaddr_ntoa_r+0x40>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
    6f50:	e0bff617 	ldw	r2,-40(fp)
    6f54:	10bfffc4 	addi	r2,r2,-1
    6f58:	e0bff615 	stw	r2,-40(fp)
    6f5c:	e0bff617 	ldw	r2,-40(fp)
    6f60:	10000005 	stb	zero,0(r2)
  return buf;
    6f64:	e0bffe17 	ldw	r2,-8(fp)
}
    6f68:	e037883a 	mov	sp,fp
    6f6c:	df000017 	ldw	fp,0(sp)
    6f70:	dec00104 	addi	sp,sp,4
    6f74:	f800283a 	ret

00006f78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
    6f78:	defffb04 	addi	sp,sp,-20
    6f7c:	dfc00415 	stw	ra,16(sp)
    6f80:	df000315 	stw	fp,12(sp)
    6f84:	df000304 	addi	fp,sp,12
  struct ip_reassdata *r, *prev = NULL;
    6f88:	e03ffe15 	stw	zero,-8(fp)

  r = reassdatagrams;
    6f8c:	d0a8ac17 	ldw	r2,-23888(gp)
    6f90:	e0bffd15 	stw	r2,-12(fp)
  while (r != NULL) {
    6f94:	00001806 	br	6ff8 <ip_reass_tmr+0x80>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
    6f98:	e0bffd17 	ldw	r2,-12(fp)
    6f9c:	108007c3 	ldbu	r2,31(r2)
    6fa0:	10803fcc 	andi	r2,r2,255
    6fa4:	10000c26 	beq	r2,zero,6fd8 <ip_reass_tmr+0x60>
      r->timer--;
    6fa8:	e0bffd17 	ldw	r2,-12(fp)
    6fac:	108007c3 	ldbu	r2,31(r2)
    6fb0:	10bfffc4 	addi	r2,r2,-1
    6fb4:	1007883a 	mov	r3,r2
    6fb8:	e0bffd17 	ldw	r2,-12(fp)
    6fbc:	10c007c5 	stb	r3,31(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
    6fc0:	e0bffd17 	ldw	r2,-12(fp)
    6fc4:	e0bffe15 	stw	r2,-8(fp)
      r = r->next;
    6fc8:	e0bffd17 	ldw	r2,-12(fp)
    6fcc:	10800017 	ldw	r2,0(r2)
    6fd0:	e0bffd15 	stw	r2,-12(fp)
    6fd4:	00000806 	br	6ff8 <ip_reass_tmr+0x80>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
    6fd8:	e0bffd17 	ldw	r2,-12(fp)
    6fdc:	e0bfff15 	stw	r2,-4(fp)
      /* get the next pointer before freeing */
      r = r->next;
    6fe0:	e0bffd17 	ldw	r2,-12(fp)
    6fe4:	10800017 	ldw	r2,0(r2)
    6fe8:	e0bffd15 	stw	r2,-12(fp)
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
    6fec:	e13fff17 	ldw	r4,-4(fp)
    6ff0:	e17ffe17 	ldw	r5,-8(fp)
    6ff4:	00070140 	call	7014 <ip_reass_free_complete_datagram>
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
    6ff8:	e0bffd17 	ldw	r2,-12(fp)
    6ffc:	103fe61e 	bne	r2,zero,6f98 <ip_reass_tmr+0x20>
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
     }
   }
}
    7000:	e037883a 	mov	sp,fp
    7004:	dfc00117 	ldw	ra,4(sp)
    7008:	df000017 	ldw	fp,0(sp)
    700c:	dec00204 	addi	sp,sp,8
    7010:	f800283a 	ret

00007014 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
    7014:	defff704 	addi	sp,sp,-36
    7018:	dfc00815 	stw	ra,32(sp)
    701c:	df000715 	stw	fp,28(sp)
    7020:	df000704 	addi	fp,sp,28
    7024:	e13ffe15 	stw	r4,-8(fp)
    7028:	e17fff15 	stw	r5,-4(fp)
  u16_t pbufs_freed = 0;
    702c:	e03ff90d 	sth	zero,-28(fp)
  u8_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
    7030:	e0ffff17 	ldw	r3,-4(fp)
    7034:	e0bffe17 	ldw	r2,-8(fp)
    7038:	1880091e 	bne	r3,r2,7060 <ip_reass_free_complete_datagram+0x4c>
    703c:	010000f4 	movhi	r4,3
    7040:	213c3e04 	addi	r4,r4,-3848
    7044:	014000f4 	movhi	r5,3
    7048:	297c4804 	addi	r5,r5,-3808
    704c:	01802944 	movi	r6,165
    7050:	01c000f4 	movhi	r7,3
    7054:	39fc4b04 	addi	r7,r7,-3796
    7058:	0017c440 	call	17c44 <printf>
    705c:	003fff06 	br	705c <ip_reass_free_complete_datagram+0x48>
  if (prev != NULL) {
    7060:	e0bfff17 	ldw	r2,-4(fp)
    7064:	10000d26 	beq	r2,zero,709c <ip_reass_free_complete_datagram+0x88>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
    7068:	e0bfff17 	ldw	r2,-4(fp)
    706c:	10c00017 	ldw	r3,0(r2)
    7070:	e0bffe17 	ldw	r2,-8(fp)
    7074:	18800926 	beq	r3,r2,709c <ip_reass_free_complete_datagram+0x88>
    7078:	010000f4 	movhi	r4,3
    707c:	213c3e04 	addi	r4,r4,-3848
    7080:	014000f4 	movhi	r5,3
    7084:	297c5304 	addi	r5,r5,-3764
    7088:	018029c4 	movi	r6,167
    708c:	01c000f4 	movhi	r7,3
    7090:	39fc4b04 	addi	r7,r7,-3796
    7094:	0017c440 	call	17c44 <printf>
    7098:	003fff06 	br	7098 <ip_reass_free_complete_datagram+0x84>
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
    709c:	e0bffe17 	ldw	r2,-8(fp)
    70a0:	10800117 	ldw	r2,4(r2)
    70a4:	10800117 	ldw	r2,4(r2)
    70a8:	e0bffb15 	stw	r2,-20(fp)
  if (iprh->start == 0) {
    70ac:	e0bffb17 	ldw	r2,-20(fp)
    70b0:	1080010b 	ldhu	r2,4(r2)
    70b4:	10bfffcc 	andi	r2,r2,65535
    70b8:	10002d1e 	bne	r2,zero,7170 <ip_reass_free_complete_datagram+0x15c>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    70bc:	e0bffe17 	ldw	r2,-8(fp)
    70c0:	10800117 	ldw	r2,4(r2)
    70c4:	e0bffa15 	stw	r2,-24(fp)
    ipr->p = iprh->next_pbuf;
    70c8:	e0bffb17 	ldw	r2,-20(fp)
    70cc:	10c0000b 	ldhu	r3,0(r2)
    70d0:	1080008b 	ldhu	r2,2(r2)
    70d4:	1004943a 	slli	r2,r2,16
    70d8:	10c4b03a 	or	r2,r2,r3
    70dc:	1007883a 	mov	r3,r2
    70e0:	e0bffe17 	ldw	r2,-8(fp)
    70e4:	10c00115 	stw	r3,4(r2)
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
    70e8:	e0bffa17 	ldw	r2,-24(fp)
    70ec:	10c00117 	ldw	r3,4(r2)
    70f0:	e0bffe17 	ldw	r2,-8(fp)
    70f4:	10800204 	addi	r2,r2,8
    70f8:	1809883a 	mov	r4,r3
    70fc:	100b883a 	mov	r5,r2
    7100:	01800504 	movi	r6,20
    7104:	0017a440 	call	17a44 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
    7108:	e13ffa17 	ldw	r4,-24(fp)
    710c:	01400044 	movi	r5,1
    7110:	00053980 	call	5398 <icmp_time_exceeded>
    clen = pbuf_clen(p);
    7114:	e13ffa17 	ldw	r4,-24(fp)
    7118:	000a5ec0 	call	a5ec <pbuf_clen>
    711c:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    7120:	e0fff90b 	ldhu	r3,-28(fp)
    7124:	e0bffc03 	ldbu	r2,-16(fp)
    7128:	1885883a 	add	r2,r3,r2
    712c:	00ffffd4 	movui	r3,65535
    7130:	1880090e 	bge	r3,r2,7158 <ip_reass_free_complete_datagram+0x144>
    7134:	010000f4 	movhi	r4,3
    7138:	213c3e04 	addi	r4,r4,-3848
    713c:	014000f4 	movhi	r5,3
    7140:	297c5804 	addi	r5,r5,-3744
    7144:	01802d84 	movi	r6,182
    7148:	01c000f4 	movhi	r7,3
    714c:	39fc4b04 	addi	r7,r7,-3796
    7150:	0017c440 	call	17c44 <printf>
    7154:	003fff06 	br	7154 <ip_reass_free_complete_datagram+0x140>
    pbufs_freed += clen;
    7158:	e0fffc03 	ldbu	r3,-16(fp)
    715c:	e0bff90b 	ldhu	r2,-28(fp)
    7160:	1885883a 	add	r2,r3,r2
    7164:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(p);
    7168:	e13ffa17 	ldw	r4,-24(fp)
    716c:	000a4200 	call	a420 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
    7170:	e0bffe17 	ldw	r2,-8(fp)
    7174:	10800117 	ldw	r2,4(r2)
    7178:	e0bffa15 	stw	r2,-24(fp)
  while (p != NULL) {
    717c:	00002206 	br	7208 <ip_reass_free_complete_datagram+0x1f4>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    7180:	e0bffa17 	ldw	r2,-24(fp)
    7184:	10800117 	ldw	r2,4(r2)
    7188:	e0bffb15 	stw	r2,-20(fp)
    pcur = p;
    718c:	e0bffa17 	ldw	r2,-24(fp)
    7190:	e0bffd15 	stw	r2,-12(fp)
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    7194:	e0bffb17 	ldw	r2,-20(fp)
    7198:	10c0000b 	ldhu	r3,0(r2)
    719c:	1080008b 	ldhu	r2,2(r2)
    71a0:	1004943a 	slli	r2,r2,16
    71a4:	10c4b03a 	or	r2,r2,r3
    71a8:	e0bffa15 	stw	r2,-24(fp)
    clen = pbuf_clen(pcur);
    71ac:	e13ffd17 	ldw	r4,-12(fp)
    71b0:	000a5ec0 	call	a5ec <pbuf_clen>
    71b4:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    71b8:	e0fff90b 	ldhu	r3,-28(fp)
    71bc:	e0bffc03 	ldbu	r2,-16(fp)
    71c0:	1885883a 	add	r2,r3,r2
    71c4:	00ffffd4 	movui	r3,65535
    71c8:	1880090e 	bge	r3,r2,71f0 <ip_reass_free_complete_datagram+0x1dc>
    71cc:	010000f4 	movhi	r4,3
    71d0:	213c3e04 	addi	r4,r4,-3848
    71d4:	014000f4 	movhi	r5,3
    71d8:	297c5804 	addi	r5,r5,-3744
    71dc:	01803184 	movi	r6,198
    71e0:	01c000f4 	movhi	r7,3
    71e4:	39fc4b04 	addi	r7,r7,-3796
    71e8:	0017c440 	call	17c44 <printf>
    71ec:	003fff06 	br	71ec <ip_reass_free_complete_datagram+0x1d8>
    pbufs_freed += clen;
    71f0:	e0fffc03 	ldbu	r3,-16(fp)
    71f4:	e0bff90b 	ldhu	r2,-28(fp)
    71f8:	1885883a 	add	r2,r3,r2
    71fc:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(pcur);
    7200:	e13ffd17 	ldw	r4,-12(fp)
    7204:	000a4200 	call	a420 <pbuf_free>
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
    7208:	e0bffa17 	ldw	r2,-24(fp)
    720c:	103fdc1e 	bne	r2,zero,7180 <ip_reass_free_complete_datagram+0x16c>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
    7210:	e13ffe17 	ldw	r4,-8(fp)
    7214:	e17fff17 	ldw	r5,-4(fp)
    7218:	00074a80 	call	74a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
    721c:	d0a8ad0b 	ldhu	r2,-23884(gp)
    7220:	10ffffcc 	andi	r3,r2,65535
    7224:	e0bff90b 	ldhu	r2,-28(fp)
    7228:	1880092e 	bgeu	r3,r2,7250 <ip_reass_free_complete_datagram+0x23c>
    722c:	010000f4 	movhi	r4,3
    7230:	213c3e04 	addi	r4,r4,-3848
    7234:	014000f4 	movhi	r5,3
    7238:	297c6004 	addi	r5,r5,-3712
    723c:	01803304 	movi	r6,204
    7240:	01c000f4 	movhi	r7,3
    7244:	39fc4b04 	addi	r7,r7,-3796
    7248:	0017c440 	call	17c44 <printf>
    724c:	003fff06 	br	724c <ip_reass_free_complete_datagram+0x238>
  ip_reass_pbufcount -= pbufs_freed;
    7250:	d0e8ad0b 	ldhu	r3,-23884(gp)
    7254:	e0bff90b 	ldhu	r2,-28(fp)
    7258:	1885c83a 	sub	r2,r3,r2
    725c:	d0a8ad0d 	sth	r2,-23884(gp)

  return pbufs_freed;
    7260:	e0bff90b 	ldhu	r2,-28(fp)
}
    7264:	e037883a 	mov	sp,fp
    7268:	dfc00117 	ldw	ra,4(sp)
    726c:	df000017 	ldw	fp,0(sp)
    7270:	dec00204 	addi	sp,sp,8
    7274:	f800283a 	ret

00007278 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
    7278:	defff604 	addi	sp,sp,-40
    727c:	dfc00915 	stw	ra,36(sp)
    7280:	df000815 	stw	fp,32(sp)
    7284:	df000804 	addi	fp,sp,32
    7288:	e13ffe15 	stw	r4,-8(fp)
    728c:	e17fff15 	stw	r5,-4(fp)
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
    7290:	e03ffb15 	stw	zero,-20(fp)
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    7294:	e03ff915 	stw	zero,-28(fp)
    prev = NULL;
    7298:	e03ffa15 	stw	zero,-24(fp)
    other_datagrams = 0;
    729c:	e03ffc15 	stw	zero,-16(fp)
    r = reassdatagrams;
    72a0:	d0a8ac17 	ldw	r2,-23888(gp)
    72a4:	e0bff815 	stw	r2,-32(fp)
    while (r != NULL) {
    72a8:	00003006 	br	736c <ip_reass_remove_oldest_datagram+0xf4>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
    72ac:	e0bff817 	ldw	r2,-32(fp)
    72b0:	10c00517 	ldw	r3,20(r2)
    72b4:	e0bffe17 	ldw	r2,-8(fp)
    72b8:	1100030b 	ldhu	r4,12(r2)
    72bc:	1080038b 	ldhu	r2,14(r2)
    72c0:	1004943a 	slli	r2,r2,16
    72c4:	1104b03a 	or	r2,r2,r4
    72c8:	18800f1e 	bne	r3,r2,7308 <ip_reass_remove_oldest_datagram+0x90>
    72cc:	e0bff817 	ldw	r2,-32(fp)
    72d0:	10c00617 	ldw	r3,24(r2)
    72d4:	e0bffe17 	ldw	r2,-8(fp)
    72d8:	1100040b 	ldhu	r4,16(r2)
    72dc:	1080048b 	ldhu	r2,18(r2)
    72e0:	1004943a 	slli	r2,r2,16
    72e4:	1104b03a 	or	r2,r2,r4
    72e8:	1880071e 	bne	r3,r2,7308 <ip_reass_remove_oldest_datagram+0x90>
    72ec:	e0bff817 	ldw	r2,-32(fp)
    72f0:	10c0030b 	ldhu	r3,12(r2)
    72f4:	e0bffe17 	ldw	r2,-8(fp)
    72f8:	1080010b 	ldhu	r2,4(r2)
    72fc:	18ffffcc 	andi	r3,r3,65535
    7300:	10bfffcc 	andi	r2,r2,65535
    7304:	18801126 	beq	r3,r2,734c <ip_reass_remove_oldest_datagram+0xd4>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
    7308:	e0bffc17 	ldw	r2,-16(fp)
    730c:	10800044 	addi	r2,r2,1
    7310:	e0bffc15 	stw	r2,-16(fp)
        if (oldest == NULL) {
    7314:	e0bff917 	ldw	r2,-28(fp)
    7318:	1000031e 	bne	r2,zero,7328 <ip_reass_remove_oldest_datagram+0xb0>
          oldest = r;
    731c:	e0bff817 	ldw	r2,-32(fp)
    7320:	e0bff915 	stw	r2,-28(fp)
    7324:	00000906 	br	734c <ip_reass_remove_oldest_datagram+0xd4>
        } else if (r->timer <= oldest->timer) {
    7328:	e0bff817 	ldw	r2,-32(fp)
    732c:	108007c3 	ldbu	r2,31(r2)
    7330:	e0fff917 	ldw	r3,-28(fp)
    7334:	18c007c3 	ldbu	r3,31(r3)
    7338:	10803fcc 	andi	r2,r2,255
    733c:	18c03fcc 	andi	r3,r3,255
    7340:	18800236 	bltu	r3,r2,734c <ip_reass_remove_oldest_datagram+0xd4>
          /* older than the previous oldest */
          oldest = r;
    7344:	e0bff817 	ldw	r2,-32(fp)
    7348:	e0bff915 	stw	r2,-28(fp)
        }
      }
      if (r->next != NULL) {
    734c:	e0bff817 	ldw	r2,-32(fp)
    7350:	10800017 	ldw	r2,0(r2)
    7354:	10000226 	beq	r2,zero,7360 <ip_reass_remove_oldest_datagram+0xe8>
        prev = r;
    7358:	e0bff817 	ldw	r2,-32(fp)
    735c:	e0bffa15 	stw	r2,-24(fp)
      }
      r = r->next;
    7360:	e0bff817 	ldw	r2,-32(fp)
    7364:	10800017 	ldw	r2,0(r2)
    7368:	e0bff815 	stw	r2,-32(fp)
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
    736c:	e0bff817 	ldw	r2,-32(fp)
    7370:	103fce1e 	bne	r2,zero,72ac <ip_reass_remove_oldest_datagram+0x34>
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
    7374:	e0bff917 	ldw	r2,-28(fp)
    7378:	10000826 	beq	r2,zero,739c <ip_reass_remove_oldest_datagram+0x124>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
    737c:	e13ff917 	ldw	r4,-28(fp)
    7380:	e17ffa17 	ldw	r5,-24(fp)
    7384:	00070140 	call	7014 <ip_reass_free_complete_datagram>
    7388:	e0bffd15 	stw	r2,-12(fp)
      pbufs_freed += pbufs_freed_current;
    738c:	e0fffb17 	ldw	r3,-20(fp)
    7390:	e0bffd17 	ldw	r2,-12(fp)
    7394:	1885883a 	add	r2,r3,r2
    7398:	e0bffb15 	stw	r2,-20(fp)
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
    739c:	e0fffb17 	ldw	r3,-20(fp)
    73a0:	e0bfff17 	ldw	r2,-4(fp)
    73a4:	1880030e 	bge	r3,r2,73b4 <ip_reass_remove_oldest_datagram+0x13c>
    73a8:	e0bffc17 	ldw	r2,-16(fp)
    73ac:	10800088 	cmpgei	r2,r2,2
    73b0:	103fb81e 	bne	r2,zero,7294 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
    73b4:	e0bffb17 	ldw	r2,-20(fp)
}
    73b8:	e037883a 	mov	sp,fp
    73bc:	dfc00117 	ldw	ra,4(sp)
    73c0:	df000017 	ldw	fp,0(sp)
    73c4:	dec00204 	addi	sp,sp,8
    73c8:	f800283a 	ret

000073cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
    73cc:	defffb04 	addi	sp,sp,-20
    73d0:	dfc00415 	stw	ra,16(sp)
    73d4:	df000315 	stw	fp,12(sp)
    73d8:	df000304 	addi	fp,sp,12
    73dc:	e13ffe15 	stw	r4,-8(fp)
    73e0:	e17fff15 	stw	r5,-4(fp)
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    73e4:	01000144 	movi	r4,5
    73e8:	0008fe40 	call	8fe4 <memp_malloc>
    73ec:	e0bffd15 	stw	r2,-12(fp)
  if (ipr == NULL) {
    73f0:	e0bffd17 	ldw	r2,-12(fp)
    73f4:	1000141e 	bne	r2,zero,7448 <ip_reass_enqueue_new_datagram+0x7c>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
    73f8:	e13ffe17 	ldw	r4,-8(fp)
    73fc:	e17fff17 	ldw	r5,-4(fp)
    7400:	00072780 	call	7278 <ip_reass_remove_oldest_datagram>
    7404:	e0ffff17 	ldw	r3,-4(fp)
    7408:	10c00316 	blt	r2,r3,7418 <ip_reass_enqueue_new_datagram+0x4c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    740c:	01000144 	movi	r4,5
    7410:	0008fe40 	call	8fe4 <memp_malloc>
    7414:	e0bffd15 	stw	r2,-12(fp)
    }
    if (ipr == NULL)
    7418:	e0bffd17 	ldw	r2,-12(fp)
    741c:	10000a1e 	bne	r2,zero,7448 <ip_reass_enqueue_new_datagram+0x7c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
    7420:	00800134 	movhi	r2,4
    7424:	10932304 	addi	r2,r2,19596
    7428:	10800f0b 	ldhu	r2,60(r2)
    742c:	10800044 	addi	r2,r2,1
    7430:	1007883a 	mov	r3,r2
    7434:	00800134 	movhi	r2,4
    7438:	10932304 	addi	r2,r2,19596
    743c:	10c00f0d 	sth	r3,60(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    7440:	0005883a 	mov	r2,zero
    7444:	00001306 	br	7494 <ip_reass_enqueue_new_datagram+0xc8>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
    7448:	e13ffd17 	ldw	r4,-12(fp)
    744c:	000b883a 	mov	r5,zero
    7450:	01800804 	movi	r6,32
    7454:	0017b3c0 	call	17b3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
    7458:	e0bffd17 	ldw	r2,-12(fp)
    745c:	00c000c4 	movi	r3,3
    7460:	10c007c5 	stb	r3,31(r2)

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
    7464:	d0e8ac17 	ldw	r3,-23888(gp)
    7468:	e0bffd17 	ldw	r2,-12(fp)
    746c:	10c00015 	stw	r3,0(r2)
  reassdatagrams = ipr;
    7470:	e0bffd17 	ldw	r2,-12(fp)
    7474:	d0a8ac15 	stw	r2,-23888(gp)
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
    7478:	e0bffd17 	ldw	r2,-12(fp)
    747c:	10800204 	addi	r2,r2,8
    7480:	1009883a 	mov	r4,r2
    7484:	e17ffe17 	ldw	r5,-8(fp)
    7488:	01800504 	movi	r6,20
    748c:	0017a440 	call	17a44 <memcpy>
  return ipr;
    7490:	e0bffd17 	ldw	r2,-12(fp)
}
    7494:	e037883a 	mov	sp,fp
    7498:	dfc00117 	ldw	ra,4(sp)
    749c:	df000017 	ldw	fp,0(sp)
    74a0:	dec00204 	addi	sp,sp,8
    74a4:	f800283a 	ret

000074a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
    74a8:	defffc04 	addi	sp,sp,-16
    74ac:	dfc00315 	stw	ra,12(sp)
    74b0:	df000215 	stw	fp,8(sp)
    74b4:	df000204 	addi	fp,sp,8
    74b8:	e13ffe15 	stw	r4,-8(fp)
    74bc:	e17fff15 	stw	r5,-4(fp)
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
    74c0:	d0e8ac17 	ldw	r3,-23888(gp)
    74c4:	e0bffe17 	ldw	r2,-8(fp)
    74c8:	1880041e 	bne	r3,r2,74dc <ip_reass_dequeue_datagram+0x34>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
    74cc:	e0bffe17 	ldw	r2,-8(fp)
    74d0:	10800017 	ldw	r2,0(r2)
    74d4:	d0a8ac15 	stw	r2,-23888(gp)
    74d8:	00000f06 	br	7518 <ip_reass_dequeue_datagram+0x70>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    74dc:	e0bfff17 	ldw	r2,-4(fp)
    74e0:	1000091e 	bne	r2,zero,7508 <ip_reass_dequeue_datagram+0x60>
    74e4:	010000f4 	movhi	r4,3
    74e8:	213c3e04 	addi	r4,r4,-3848
    74ec:	014000f4 	movhi	r5,3
    74f0:	297c6704 	addi	r5,r5,-3684
    74f4:	01804e44 	movi	r6,313
    74f8:	01c000f4 	movhi	r7,3
    74fc:	39fc4b04 	addi	r7,r7,-3796
    7500:	0017c440 	call	17c44 <printf>
    7504:	003fff06 	br	7504 <ip_reass_dequeue_datagram+0x5c>
    prev->next = ipr->next;
    7508:	e0bffe17 	ldw	r2,-8(fp)
    750c:	10c00017 	ldw	r3,0(r2)
    7510:	e0bfff17 	ldw	r2,-4(fp)
    7514:	10c00015 	stw	r3,0(r2)
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
    7518:	01000144 	movi	r4,5
    751c:	e17ffe17 	ldw	r5,-8(fp)
    7520:	00091c00 	call	91c0 <memp_free>
}
    7524:	e037883a 	mov	sp,fp
    7528:	dfc00117 	ldw	ra,4(sp)
    752c:	df000017 	ldw	fp,0(sp)
    7530:	dec00204 	addi	sp,sp,8
    7534:	f800283a 	ret

00007538 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
    7538:	defff404 	addi	sp,sp,-48
    753c:	dfc00b15 	stw	ra,44(sp)
    7540:	df000a15 	stw	fp,40(sp)
    7544:	dc000915 	stw	r16,36(sp)
    7548:	df000904 	addi	fp,sp,36
    754c:	e13ffe15 	stw	r4,-8(fp)
    7550:	e17fff15 	stw	r5,-4(fp)
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
    7554:	e03ff815 	stw	zero,-32(fp)
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
    7558:	00800044 	movi	r2,1
    755c:	e0bffa15 	stw	r2,-24(fp)

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
    7560:	e0bfff17 	ldw	r2,-4(fp)
    7564:	10800117 	ldw	r2,4(r2)
    7568:	e0bffb15 	stw	r2,-20(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    756c:	e0bffb17 	ldw	r2,-20(fp)
    7570:	1080008b 	ldhu	r2,2(r2)
    7574:	10bfffcc 	andi	r2,r2,65535
    7578:	1004d23a 	srli	r2,r2,8
    757c:	1007883a 	mov	r3,r2
    7580:	e0bffb17 	ldw	r2,-20(fp)
    7584:	1080008b 	ldhu	r2,2(r2)
    7588:	10bfffcc 	andi	r2,r2,65535
    758c:	1004923a 	slli	r2,r2,8
    7590:	1884b03a 	or	r2,r3,r2
    7594:	1007883a 	mov	r3,r2
    7598:	e0bffb17 	ldw	r2,-20(fp)
    759c:	10800003 	ldbu	r2,0(r2)
    75a0:	10803fcc 	andi	r2,r2,255
    75a4:	108003cc 	andi	r2,r2,15
    75a8:	10bfff24 	muli	r2,r2,-4
    75ac:	1885883a 	add	r2,r3,r2
    75b0:	e0bffc0d 	sth	r2,-16(fp)
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    75b4:	e0bffb17 	ldw	r2,-20(fp)
    75b8:	1080018b 	ldhu	r2,6(r2)
    75bc:	10bfffcc 	andi	r2,r2,65535
    75c0:	1004d23a 	srli	r2,r2,8
    75c4:	10ffffcc 	andi	r3,r2,65535
    75c8:	e0bffb17 	ldw	r2,-20(fp)
    75cc:	1080018b 	ldhu	r2,6(r2)
    75d0:	10bfffcc 	andi	r2,r2,65535
    75d4:	1004923a 	slli	r2,r2,8
    75d8:	10bfffcc 	andi	r2,r2,65535
    75dc:	1884b03a 	or	r2,r3,r2
    75e0:	1087ffcc 	andi	r2,r2,8191
    75e4:	100490fa 	slli	r2,r2,3
    75e8:	e0bffc8d 	sth	r2,-14(fp)
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
    75ec:	e0bfff17 	ldw	r2,-4(fp)
    75f0:	10800117 	ldw	r2,4(r2)
    75f4:	e0bff715 	stw	r2,-36(fp)
  iprh->next_pbuf = NULL;
    75f8:	e0bff717 	ldw	r2,-36(fp)
    75fc:	10c0000b 	ldhu	r3,0(r2)
    7600:	1806703a 	and	r3,r3,zero
    7604:	10c0000d 	sth	r3,0(r2)
    7608:	10c0008b 	ldhu	r3,2(r2)
    760c:	1806703a 	and	r3,r3,zero
    7610:	10c0008d 	sth	r3,2(r2)
  iprh->start = offset;
    7614:	e0bff717 	ldw	r2,-36(fp)
    7618:	e0fffc8b 	ldhu	r3,-14(fp)
    761c:	10c0010d 	sth	r3,4(r2)
  iprh->end = offset + len;
    7620:	e0fffc8b 	ldhu	r3,-14(fp)
    7624:	e0bffc0b 	ldhu	r2,-16(fp)
    7628:	1885883a 	add	r2,r3,r2
    762c:	1007883a 	mov	r3,r2
    7630:	e0bff717 	ldw	r2,-36(fp)
    7634:	10c0018d 	sth	r3,6(r2)

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    7638:	e0bffe17 	ldw	r2,-8(fp)
    763c:	10800117 	ldw	r2,4(r2)
    7640:	e0bff915 	stw	r2,-28(fp)
    7644:	00005906 	br	77ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
    7648:	e0bff917 	ldw	r2,-28(fp)
    764c:	10800117 	ldw	r2,4(r2)
    7650:	e0bffd15 	stw	r2,-12(fp)
    if (iprh->start < iprh_tmp->start) {
    7654:	e0bff717 	ldw	r2,-36(fp)
    7658:	10c0010b 	ldhu	r3,4(r2)
    765c:	e0bffd17 	ldw	r2,-12(fp)
    7660:	1080010b 	ldhu	r2,4(r2)
    7664:	18ffffcc 	andi	r3,r3,65535
    7668:	10bfffcc 	andi	r2,r2,65535
    766c:	18802f2e 	bgeu	r3,r2,772c <ip_reass_chain_frag_into_datagram_and_validate+0x1f4>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
    7670:	e0bff717 	ldw	r2,-36(fp)
    7674:	e0fff917 	ldw	r3,-28(fp)
    7678:	18ffffcc 	andi	r3,r3,65535
    767c:	1100000b 	ldhu	r4,0(r2)
    7680:	2008703a 	and	r4,r4,zero
    7684:	20c6b03a 	or	r3,r4,r3
    7688:	10c0000d 	sth	r3,0(r2)
    768c:	e0fff917 	ldw	r3,-28(fp)
    7690:	1806d43a 	srli	r3,r3,16
    7694:	1100008b 	ldhu	r4,2(r2)
    7698:	2008703a 	and	r4,r4,zero
    769c:	20c6b03a 	or	r3,r4,r3
    76a0:	10c0008d 	sth	r3,2(r2)
      if (iprh_prev != NULL) {
    76a4:	e0bff817 	ldw	r2,-32(fp)
    76a8:	10001c26 	beq	r2,zero,771c <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
    76ac:	e0bff717 	ldw	r2,-36(fp)
    76b0:	10c0010b 	ldhu	r3,4(r2)
    76b4:	e0bff817 	ldw	r2,-32(fp)
    76b8:	1080018b 	ldhu	r2,6(r2)
    76bc:	18ffffcc 	andi	r3,r3,65535
    76c0:	10bfffcc 	andi	r2,r2,65535
    76c4:	1880e436 	bltu	r3,r2,7a58 <ip_reass_chain_frag_into_datagram_and_validate+0x520>
    76c8:	e0bff717 	ldw	r2,-36(fp)
    76cc:	1080018b 	ldhu	r2,6(r2)
    76d0:	e0fffd17 	ldw	r3,-12(fp)
    76d4:	18c0010b 	ldhu	r3,4(r3)
    76d8:	10bfffcc 	andi	r2,r2,65535
    76dc:	18ffffcc 	andi	r3,r3,65535
    76e0:	1880dd36 	bltu	r3,r2,7a58 <ip_reass_chain_frag_into_datagram_and_validate+0x520>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
    76e4:	e0bff817 	ldw	r2,-32(fp)
    76e8:	e0ffff17 	ldw	r3,-4(fp)
    76ec:	18ffffcc 	andi	r3,r3,65535
    76f0:	1100000b 	ldhu	r4,0(r2)
    76f4:	2008703a 	and	r4,r4,zero
    76f8:	20c6b03a 	or	r3,r4,r3
    76fc:	10c0000d 	sth	r3,0(r2)
    7700:	e0ffff17 	ldw	r3,-4(fp)
    7704:	1806d43a 	srli	r3,r3,16
    7708:	1100008b 	ldhu	r4,2(r2)
    770c:	2008703a 	and	r4,r4,zero
    7710:	20c6b03a 	or	r3,r4,r3
    7714:	10c0008d 	sth	r3,2(r2)
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    7718:	00002606 	br	77b4 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
    771c:	e0bffe17 	ldw	r2,-8(fp)
    7720:	e0ffff17 	ldw	r3,-4(fp)
    7724:	10c00115 	stw	r3,4(r2)
      }
      break;
    7728:	00002206 	br	77b4 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    } else if(iprh->start == iprh_tmp->start) {
    772c:	e0bff717 	ldw	r2,-36(fp)
    7730:	10c0010b 	ldhu	r3,4(r2)
    7734:	e0bffd17 	ldw	r2,-12(fp)
    7738:	1080010b 	ldhu	r2,4(r2)
    773c:	18ffffcc 	andi	r3,r3,65535
    7740:	10bfffcc 	andi	r2,r2,65535
    7744:	1880c126 	beq	r3,r2,7a4c <ip_reass_chain_frag_into_datagram_and_validate+0x514>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
    7748:	e0bff717 	ldw	r2,-36(fp)
    774c:	10c0010b 	ldhu	r3,4(r2)
    7750:	e0bffd17 	ldw	r2,-12(fp)
    7754:	1080018b 	ldhu	r2,6(r2)
    7758:	18ffffcc 	andi	r3,r3,65535
    775c:	10bfffcc 	andi	r2,r2,65535
    7760:	1880bc36 	bltu	r3,r2,7a54 <ip_reass_chain_frag_into_datagram_and_validate+0x51c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
    7764:	e0bff817 	ldw	r2,-32(fp)
    7768:	10000826 	beq	r2,zero,778c <ip_reass_chain_frag_into_datagram_and_validate+0x254>
        if (iprh_prev->end != iprh_tmp->start) {
    776c:	e0bff817 	ldw	r2,-32(fp)
    7770:	10c0018b 	ldhu	r3,6(r2)
    7774:	e0bffd17 	ldw	r2,-12(fp)
    7778:	1080010b 	ldhu	r2,4(r2)
    777c:	18ffffcc 	andi	r3,r3,65535
    7780:	10bfffcc 	andi	r2,r2,65535
    7784:	18800126 	beq	r3,r2,778c <ip_reass_chain_frag_into_datagram_and_validate+0x254>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
    7788:	e03ffa15 	stw	zero,-24(fp)
        }
      }
    }
    q = iprh_tmp->next_pbuf;
    778c:	e0bffd17 	ldw	r2,-12(fp)
    7790:	10c0000b 	ldhu	r3,0(r2)
    7794:	1080008b 	ldhu	r2,2(r2)
    7798:	1004943a 	slli	r2,r2,16
    779c:	10c4b03a 	or	r2,r2,r3
    77a0:	e0bff915 	stw	r2,-28(fp)
    iprh_prev = iprh_tmp;
    77a4:	e0bffd17 	ldw	r2,-12(fp)
    77a8:	e0bff815 	stw	r2,-32(fp)
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
    77ac:	e0bff917 	ldw	r2,-28(fp)
    77b0:	103fa51e 	bne	r2,zero,7648 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    77b4:	e0bff917 	ldw	r2,-28(fp)
    77b8:	1000371e 	bne	r2,zero,7898 <ip_reass_chain_frag_into_datagram_and_validate+0x360>
    if (iprh_prev != NULL) {
    77bc:	e0bff817 	ldw	r2,-32(fp)
    77c0:	10002626 	beq	r2,zero,785c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
    77c4:	e0bff817 	ldw	r2,-32(fp)
    77c8:	1080018b 	ldhu	r2,6(r2)
    77cc:	e0fff717 	ldw	r3,-36(fp)
    77d0:	18c0010b 	ldhu	r3,4(r3)
    77d4:	10bfffcc 	andi	r2,r2,65535
    77d8:	18ffffcc 	andi	r3,r3,65535
    77dc:	1880092e 	bgeu	r3,r2,7804 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
    77e0:	010000f4 	movhi	r4,3
    77e4:	213c3e04 	addi	r4,r4,-3848
    77e8:	014000f4 	movhi	r5,3
    77ec:	297c6e04 	addi	r5,r5,-3656
    77f0:	018064c4 	movi	r6,403
    77f4:	01c000f4 	movhi	r7,3
    77f8:	39fc4b04 	addi	r7,r7,-3796
    77fc:	0017c440 	call	17c44 <printf>
    7800:	003fff06 	br	7800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
    7804:	e0bff817 	ldw	r2,-32(fp)
    7808:	e0ffff17 	ldw	r3,-4(fp)
    780c:	18ffffcc 	andi	r3,r3,65535
    7810:	1100000b 	ldhu	r4,0(r2)
    7814:	2008703a 	and	r4,r4,zero
    7818:	20c6b03a 	or	r3,r4,r3
    781c:	10c0000d 	sth	r3,0(r2)
    7820:	e0ffff17 	ldw	r3,-4(fp)
    7824:	1806d43a 	srli	r3,r3,16
    7828:	1100008b 	ldhu	r4,2(r2)
    782c:	2008703a 	and	r4,r4,zero
    7830:	20c6b03a 	or	r3,r4,r3
    7834:	10c0008d 	sth	r3,2(r2)
      if (iprh_prev->end != iprh->start) {
    7838:	e0bff817 	ldw	r2,-32(fp)
    783c:	10c0018b 	ldhu	r3,6(r2)
    7840:	e0bff717 	ldw	r2,-36(fp)
    7844:	1080010b 	ldhu	r2,4(r2)
    7848:	18ffffcc 	andi	r3,r3,65535
    784c:	10bfffcc 	andi	r2,r2,65535
    7850:	18801126 	beq	r3,r2,7898 <ip_reass_chain_frag_into_datagram_and_validate+0x360>
        valid = 0;
    7854:	e03ffa15 	stw	zero,-24(fp)
    7858:	00000f06 	br	7898 <ip_reass_chain_frag_into_datagram_and_validate+0x360>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
    785c:	e0bffe17 	ldw	r2,-8(fp)
    7860:	10800117 	ldw	r2,4(r2)
    7864:	10000926 	beq	r2,zero,788c <ip_reass_chain_frag_into_datagram_and_validate+0x354>
    7868:	010000f4 	movhi	r4,3
    786c:	213c3e04 	addi	r4,r4,-3848
    7870:	014000f4 	movhi	r5,3
    7874:	297c7604 	addi	r5,r5,-3624
    7878:	01806704 	movi	r6,412
    787c:	01c000f4 	movhi	r7,3
    7880:	39fc4b04 	addi	r7,r7,-3796
    7884:	0017c440 	call	17c44 <printf>
    7888:	003fff06 	br	7888 <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
    788c:	e0bffe17 	ldw	r2,-8(fp)
    7890:	e0ffff17 	ldw	r3,-4(fp)
    7894:	10c00115 	stw	r3,4(r2)
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
    7898:	e0bffe17 	ldw	r2,-8(fp)
    789c:	10800783 	ldbu	r2,30(r2)
    78a0:	10803fcc 	andi	r2,r2,255
    78a4:	1080004c 	andi	r2,r2,1
    78a8:	10006626 	beq	r2,zero,7a44 <ip_reass_chain_frag_into_datagram_and_validate+0x50c>
    /* and had no wholes so far */
    if (valid) {
    78ac:	e0bffa17 	ldw	r2,-24(fp)
    78b0:	10006226 	beq	r2,zero,7a3c <ip_reass_chain_frag_into_datagram_and_validate+0x504>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
    78b4:	e0bffe17 	ldw	r2,-8(fp)
    78b8:	10800117 	ldw	r2,4(r2)
    78bc:	10800117 	ldw	r2,4(r2)
    78c0:	1080010b 	ldhu	r2,4(r2)
    78c4:	10bfffcc 	andi	r2,r2,65535
    78c8:	10000226 	beq	r2,zero,78d4 <ip_reass_chain_frag_into_datagram_and_validate+0x39c>
        valid = 0;
    78cc:	e03ffa15 	stw	zero,-24(fp)
    78d0:	00005a06 	br	7a3c <ip_reass_chain_frag_into_datagram_and_validate+0x504>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
    78d4:	e0bff717 	ldw	r2,-36(fp)
    78d8:	e0bff815 	stw	r2,-32(fp)
        q = iprh->next_pbuf;
    78dc:	e0bff717 	ldw	r2,-36(fp)
    78e0:	10c0000b 	ldhu	r3,0(r2)
    78e4:	1080008b 	ldhu	r2,2(r2)
    78e8:	1004943a 	slli	r2,r2,16
    78ec:	10c4b03a 	or	r2,r2,r3
    78f0:	e0bff915 	stw	r2,-28(fp)
        while (q != NULL) {
    78f4:	00001406 	br	7948 <ip_reass_chain_frag_into_datagram_and_validate+0x410>
          iprh = (struct ip_reass_helper*)q->payload;
    78f8:	e0bff917 	ldw	r2,-28(fp)
    78fc:	10800117 	ldw	r2,4(r2)
    7900:	e0bff715 	stw	r2,-36(fp)
          if (iprh_prev->end != iprh->start) {
    7904:	e0bff817 	ldw	r2,-32(fp)
    7908:	10c0018b 	ldhu	r3,6(r2)
    790c:	e0bff717 	ldw	r2,-36(fp)
    7910:	1080010b 	ldhu	r2,4(r2)
    7914:	18ffffcc 	andi	r3,r3,65535
    7918:	10bfffcc 	andi	r2,r2,65535
    791c:	18800226 	beq	r3,r2,7928 <ip_reass_chain_frag_into_datagram_and_validate+0x3f0>
            valid = 0;
    7920:	e03ffa15 	stw	zero,-24(fp)
            break;
    7924:	00000a06 	br	7950 <ip_reass_chain_frag_into_datagram_and_validate+0x418>
          }
          iprh_prev = iprh;
    7928:	e0bff717 	ldw	r2,-36(fp)
    792c:	e0bff815 	stw	r2,-32(fp)
          q = iprh->next_pbuf;
    7930:	e0bff717 	ldw	r2,-36(fp)
    7934:	10c0000b 	ldhu	r3,0(r2)
    7938:	1080008b 	ldhu	r2,2(r2)
    793c:	1004943a 	slli	r2,r2,16
    7940:	10c4b03a 	or	r2,r2,r3
    7944:	e0bff915 	stw	r2,-28(fp)
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
    7948:	e0bff917 	ldw	r2,-28(fp)
    794c:	103fea1e 	bne	r2,zero,78f8 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          iprh_prev = iprh;
          q = iprh->next_pbuf;
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
    7950:	e0bffa17 	ldw	r2,-24(fp)
    7954:	10003926 	beq	r2,zero,7a3c <ip_reass_chain_frag_into_datagram_and_validate+0x504>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
    7958:	e0bffe17 	ldw	r2,-8(fp)
    795c:	10800117 	ldw	r2,4(r2)
    7960:	1000091e 	bne	r2,zero,7988 <ip_reass_chain_frag_into_datagram_and_validate+0x450>
    7964:	010000f4 	movhi	r4,3
    7968:	213c3e04 	addi	r4,r4,-3848
    796c:	014000f4 	movhi	r5,3
    7970:	297c8404 	addi	r5,r5,-3568
    7974:	01806f04 	movi	r6,444
    7978:	01c000f4 	movhi	r7,3
    797c:	39fc4b04 	addi	r7,r7,-3796
    7980:	0017c440 	call	17c44 <printf>
    7984:	003fff06 	br	7984 <ip_reass_chain_frag_into_datagram_and_validate+0x44c>
          LWIP_ASSERT("sanity check",
    7988:	e0bffe17 	ldw	r2,-8(fp)
    798c:	10800117 	ldw	r2,4(r2)
    7990:	10c00117 	ldw	r3,4(r2)
    7994:	e0bff717 	ldw	r2,-36(fp)
    7998:	1880091e 	bne	r3,r2,79c0 <ip_reass_chain_frag_into_datagram_and_validate+0x488>
    799c:	010000f4 	movhi	r4,3
    79a0:	213c3e04 	addi	r4,r4,-3848
    79a4:	014000f4 	movhi	r5,3
    79a8:	297c8404 	addi	r5,r5,-3568
    79ac:	01806f84 	movi	r6,446
    79b0:	01c000f4 	movhi	r7,3
    79b4:	39fc4b04 	addi	r7,r7,-3796
    79b8:	0017c440 	call	17c44 <printf>
    79bc:	003fff06 	br	79bc <ip_reass_chain_frag_into_datagram_and_validate+0x484>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
    79c0:	e0bff717 	ldw	r2,-36(fp)
    79c4:	10c0000b 	ldhu	r3,0(r2)
    79c8:	1080008b 	ldhu	r2,2(r2)
    79cc:	1004943a 	slli	r2,r2,16
    79d0:	10c4b03a 	or	r2,r2,r3
    79d4:	10000926 	beq	r2,zero,79fc <ip_reass_chain_frag_into_datagram_and_validate+0x4c4>
    79d8:	010000f4 	movhi	r4,3
    79dc:	213c3e04 	addi	r4,r4,-3848
    79e0:	014000f4 	movhi	r5,3
    79e4:	297c8804 	addi	r5,r5,-3552
    79e8:	01807004 	movi	r6,448
    79ec:	01c000f4 	movhi	r7,3
    79f0:	39fc4b04 	addi	r7,r7,-3796
    79f4:	0017c440 	call	17c44 <printf>
    79f8:	003fff06 	br	79f8 <ip_reass_chain_frag_into_datagram_and_validate+0x4c0>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
    79fc:	e0bff717 	ldw	r2,-36(fp)
    7a00:	10c0018b 	ldhu	r3,6(r2)
    7a04:	e0bffe17 	ldw	r2,-8(fp)
    7a08:	1080070b 	ldhu	r2,28(r2)
    7a0c:	18ffffcc 	andi	r3,r3,65535
    7a10:	10bfffcc 	andi	r2,r2,65535
    7a14:	18800926 	beq	r3,r2,7a3c <ip_reass_chain_frag_into_datagram_and_validate+0x504>
    7a18:	010000f4 	movhi	r4,3
    7a1c:	213c3e04 	addi	r4,r4,-3848
    7a20:	014000f4 	movhi	r5,3
    7a24:	297c9104 	addi	r5,r5,-3516
    7a28:	01807084 	movi	r6,450
    7a2c:	01c000f4 	movhi	r7,3
    7a30:	39fc4b04 	addi	r7,r7,-3796
    7a34:	0017c440 	call	17c44 <printf>
    7a38:	003fff06 	br	7a38 <ip_reass_chain_frag_into_datagram_and_validate+0x500>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
    7a3c:	e0bffa17 	ldw	r2,-24(fp)
    7a40:	00000e06 	br	7a7c <ip_reass_chain_frag_into_datagram_and_validate+0x544>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
    7a44:	0005883a 	mov	r2,zero
    7a48:	00000c06 	br	7a7c <ip_reass_chain_frag_into_datagram_and_validate+0x544>
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
    7a4c:	0001883a 	nop
    7a50:	00000106 	br	7a58 <ip_reass_chain_frag_into_datagram_and_validate+0x520>
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
    7a54:	0001883a 	nop
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
    7a58:	d428ad0b 	ldhu	r16,-23884(gp)
    7a5c:	e13fff17 	ldw	r4,-4(fp)
    7a60:	000a5ec0 	call	a5ec <pbuf_clen>
    7a64:	10803fcc 	andi	r2,r2,255
    7a68:	8085c83a 	sub	r2,r16,r2
    7a6c:	d0a8ad0d 	sth	r2,-23884(gp)
  pbuf_free(new_p);
    7a70:	e13fff17 	ldw	r4,-4(fp)
    7a74:	000a4200 	call	a420 <pbuf_free>
  return 0;
    7a78:	0005883a 	mov	r2,zero
#endif /* IP_REASS_CHECK_OVERLAP */
}
    7a7c:	e037883a 	mov	sp,fp
    7a80:	dfc00217 	ldw	ra,8(sp)
    7a84:	df000117 	ldw	fp,4(sp)
    7a88:	dc000017 	ldw	r16,0(sp)
    7a8c:	dec00304 	addi	sp,sp,12
    7a90:	f800283a 	ret

00007a94 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
    7a94:	defff504 	addi	sp,sp,-44
    7a98:	dfc00a15 	stw	ra,40(sp)
    7a9c:	df000915 	stw	fp,36(sp)
    7aa0:	dc000815 	stw	r16,32(sp)
    7aa4:	df000804 	addi	fp,sp,32
    7aa8:	e13fff15 	stw	r4,-4(fp)
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
    7aac:	e03ffa15 	stw	zero,-24(fp)

  IPFRAG_STATS_INC(ip_frag.recv);
    7ab0:	00800134 	movhi	r2,4
    7ab4:	10932304 	addi	r2,r2,19596
    7ab8:	10800c8b 	ldhu	r2,50(r2)
    7abc:	10800044 	addi	r2,r2,1
    7ac0:	1007883a 	mov	r3,r2
    7ac4:	00800134 	movhi	r2,4
    7ac8:	10932304 	addi	r2,r2,19596
    7acc:	10c00c8d 	sth	r3,50(r2)
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
    7ad0:	e0bfff17 	ldw	r2,-4(fp)
    7ad4:	10800117 	ldw	r2,4(r2)
    7ad8:	e0bffb15 	stw	r2,-20(fp)

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
    7adc:	e0bffb17 	ldw	r2,-20(fp)
    7ae0:	10800003 	ldbu	r2,0(r2)
    7ae4:	10803fcc 	andi	r2,r2,255
    7ae8:	108003cc 	andi	r2,r2,15
    7aec:	1085883a 	add	r2,r2,r2
    7af0:	1085883a 	add	r2,r2,r2
    7af4:	10800520 	cmpeqi	r2,r2,20
    7af8:	1000091e 	bne	r2,zero,7b20 <ip_reass+0x8c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    7afc:	00800134 	movhi	r2,4
    7b00:	10932304 	addi	r2,r2,19596
    7b04:	1080110b 	ldhu	r2,68(r2)
    7b08:	10800044 	addi	r2,r2,1
    7b0c:	1007883a 	mov	r3,r2
    7b10:	00800134 	movhi	r2,4
    7b14:	10932304 	addi	r2,r2,19596
    7b18:	10c0110d 	sth	r3,68(r2)
    goto nullreturn;
    7b1c:	0000fa06 	br	7f08 <ip_reass+0x474>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    7b20:	e0bffb17 	ldw	r2,-20(fp)
    7b24:	1080018b 	ldhu	r2,6(r2)
    7b28:	10bfffcc 	andi	r2,r2,65535
    7b2c:	1004d23a 	srli	r2,r2,8
    7b30:	10ffffcc 	andi	r3,r2,65535
    7b34:	e0bffb17 	ldw	r2,-20(fp)
    7b38:	1080018b 	ldhu	r2,6(r2)
    7b3c:	10bfffcc 	andi	r2,r2,65535
    7b40:	1004923a 	slli	r2,r2,8
    7b44:	10bfffcc 	andi	r2,r2,65535
    7b48:	1884b03a 	or	r2,r3,r2
    7b4c:	1087ffcc 	andi	r2,r2,8191
    7b50:	100490fa 	slli	r2,r2,3
    7b54:	e0bffc0d 	sth	r2,-16(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    7b58:	e0bffb17 	ldw	r2,-20(fp)
    7b5c:	1080008b 	ldhu	r2,2(r2)
    7b60:	10bfffcc 	andi	r2,r2,65535
    7b64:	1004d23a 	srli	r2,r2,8
    7b68:	1007883a 	mov	r3,r2
    7b6c:	e0bffb17 	ldw	r2,-20(fp)
    7b70:	1080008b 	ldhu	r2,2(r2)
    7b74:	10bfffcc 	andi	r2,r2,65535
    7b78:	1004923a 	slli	r2,r2,8
    7b7c:	1884b03a 	or	r2,r3,r2
    7b80:	1007883a 	mov	r3,r2
    7b84:	e0bffb17 	ldw	r2,-20(fp)
    7b88:	10800003 	ldbu	r2,0(r2)
    7b8c:	10803fcc 	andi	r2,r2,255
    7b90:	108003cc 	andi	r2,r2,15
    7b94:	10bfff24 	muli	r2,r2,-4
    7b98:	1885883a 	add	r2,r3,r2
    7b9c:	e0bffc8d 	sth	r2,-14(fp)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
    7ba0:	e13fff17 	ldw	r4,-4(fp)
    7ba4:	000a5ec0 	call	a5ec <pbuf_clen>
    7ba8:	e0bffd05 	stb	r2,-12(fp)
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
    7bac:	d0a8ad0b 	ldhu	r2,-23884(gp)
    7bb0:	10ffffcc 	andi	r3,r2,65535
    7bb4:	e0bffd03 	ldbu	r2,-12(fp)
    7bb8:	1885883a 	add	r2,r3,r2
    7bbc:	108002d0 	cmplti	r2,r2,11
    7bc0:	1000141e 	bne	r2,zero,7c14 <ip_reass+0x180>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
    7bc4:	e0bffd03 	ldbu	r2,-12(fp)
    7bc8:	e13ffb17 	ldw	r4,-20(fp)
    7bcc:	100b883a 	mov	r5,r2
    7bd0:	00072780 	call	7278 <ip_reass_remove_oldest_datagram>
    7bd4:	10000626 	beq	r2,zero,7bf0 <ip_reass+0x15c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
    7bd8:	d0a8ad0b 	ldhu	r2,-23884(gp)
    7bdc:	10ffffcc 	andi	r3,r2,65535
    7be0:	e0bffd03 	ldbu	r2,-12(fp)
    7be4:	1885883a 	add	r2,r3,r2

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
    7be8:	108002d0 	cmplti	r2,r2,11
    7bec:	1000091e 	bne	r2,zero,7c14 <ip_reass+0x180>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
    7bf0:	00800134 	movhi	r2,4
    7bf4:	10932304 	addi	r2,r2,19596
    7bf8:	10800f0b 	ldhu	r2,60(r2)
    7bfc:	10800044 	addi	r2,r2,1
    7c00:	1007883a 	mov	r3,r2
    7c04:	00800134 	movhi	r2,4
    7c08:	10932304 	addi	r2,r2,19596
    7c0c:	10c00f0d 	sth	r3,60(r2)
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
    7c10:	0000bd06 	br	7f08 <ip_reass+0x474>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    7c14:	d0a8ac17 	ldw	r2,-23888(gp)
    7c18:	e0bff915 	stw	r2,-28(fp)
    7c1c:	00002506 	br	7cb4 <ip_reass+0x220>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
    7c20:	e0bff917 	ldw	r2,-28(fp)
    7c24:	10c00517 	ldw	r3,20(r2)
    7c28:	e0bffb17 	ldw	r2,-20(fp)
    7c2c:	1100030b 	ldhu	r4,12(r2)
    7c30:	1080038b 	ldhu	r2,14(r2)
    7c34:	1004943a 	slli	r2,r2,16
    7c38:	1104b03a 	or	r2,r2,r4
    7c3c:	1880181e 	bne	r3,r2,7ca0 <ip_reass+0x20c>
    7c40:	e0bff917 	ldw	r2,-28(fp)
    7c44:	10c00617 	ldw	r3,24(r2)
    7c48:	e0bffb17 	ldw	r2,-20(fp)
    7c4c:	1100040b 	ldhu	r4,16(r2)
    7c50:	1080048b 	ldhu	r2,18(r2)
    7c54:	1004943a 	slli	r2,r2,16
    7c58:	1104b03a 	or	r2,r2,r4
    7c5c:	1880101e 	bne	r3,r2,7ca0 <ip_reass+0x20c>
    7c60:	e0bff917 	ldw	r2,-28(fp)
    7c64:	10c0030b 	ldhu	r3,12(r2)
    7c68:	e0bffb17 	ldw	r2,-20(fp)
    7c6c:	1080010b 	ldhu	r2,4(r2)
    7c70:	18ffffcc 	andi	r3,r3,65535
    7c74:	10bfffcc 	andi	r2,r2,65535
    7c78:	1880091e 	bne	r3,r2,7ca0 <ip_reass+0x20c>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
    7c7c:	00800134 	movhi	r2,4
    7c80:	10932304 	addi	r2,r2,19596
    7c84:	1080118b 	ldhu	r2,70(r2)
    7c88:	10800044 	addi	r2,r2,1
    7c8c:	1007883a 	mov	r3,r2
    7c90:	00800134 	movhi	r2,4
    7c94:	10932304 	addi	r2,r2,19596
    7c98:	10c0118d 	sth	r3,70(r2)
      break;
    7c9c:	00000706 	br	7cbc <ip_reass+0x228>
    }
    ipr_prev = ipr;
    7ca0:	e0bff917 	ldw	r2,-28(fp)
    7ca4:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    7ca8:	e0bff917 	ldw	r2,-28(fp)
    7cac:	10800017 	ldw	r2,0(r2)
    7cb0:	e0bff915 	stw	r2,-28(fp)
    7cb4:	e0bff917 	ldw	r2,-28(fp)
    7cb8:	103fd91e 	bne	r2,zero,7c20 <ip_reass+0x18c>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
    7cbc:	e0bff917 	ldw	r2,-28(fp)
    7cc0:	1000081e 	bne	r2,zero,7ce4 <ip_reass+0x250>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
    7cc4:	e0bffd03 	ldbu	r2,-12(fp)
    7cc8:	e13ffb17 	ldw	r4,-20(fp)
    7ccc:	100b883a 	mov	r5,r2
    7cd0:	00073cc0 	call	73cc <ip_reass_enqueue_new_datagram>
    7cd4:	e0bff915 	stw	r2,-28(fp)
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
    7cd8:	e0bff917 	ldw	r2,-28(fp)
    7cdc:	1000211e 	bne	r2,zero,7d64 <ip_reass+0x2d0>
      goto nullreturn;
    7ce0:	00008906 	br	7f08 <ip_reass+0x474>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
    7ce4:	e0bffb17 	ldw	r2,-20(fp)
    7ce8:	1080018b 	ldhu	r2,6(r2)
    7cec:	10bfffcc 	andi	r2,r2,65535
    7cf0:	1004d23a 	srli	r2,r2,8
    7cf4:	10ffffcc 	andi	r3,r2,65535
    7cf8:	e0bffb17 	ldw	r2,-20(fp)
    7cfc:	1080018b 	ldhu	r2,6(r2)
    7d00:	10bfffcc 	andi	r2,r2,65535
    7d04:	1004923a 	slli	r2,r2,8
    7d08:	10bfffcc 	andi	r2,r2,65535
    7d0c:	1884b03a 	or	r2,r3,r2
    7d10:	1087ffcc 	andi	r2,r2,8191
    7d14:	1000131e 	bne	r2,zero,7d64 <ip_reass+0x2d0>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
    7d18:	e0bff917 	ldw	r2,-28(fp)
    7d1c:	1080038b 	ldhu	r2,14(r2)
    7d20:	10bfffcc 	andi	r2,r2,65535
    7d24:	1004d23a 	srli	r2,r2,8
    7d28:	10ffffcc 	andi	r3,r2,65535
    7d2c:	e0bff917 	ldw	r2,-28(fp)
    7d30:	1080038b 	ldhu	r2,14(r2)
    7d34:	10bfffcc 	andi	r2,r2,65535
    7d38:	1004923a 	slli	r2,r2,8
    7d3c:	10bfffcc 	andi	r2,r2,65535
    7d40:	1884b03a 	or	r2,r3,r2
    7d44:	1087ffcc 	andi	r2,r2,8191
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
    7d48:	10000626 	beq	r2,zero,7d64 <ip_reass+0x2d0>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
    7d4c:	e0bff917 	ldw	r2,-28(fp)
    7d50:	10800204 	addi	r2,r2,8
    7d54:	1009883a 	mov	r4,r2
    7d58:	e17ffb17 	ldw	r5,-20(fp)
    7d5c:	01800504 	movi	r6,20
    7d60:	0017a440 	call	17a44 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
    7d64:	e0fffd03 	ldbu	r3,-12(fp)
    7d68:	d0a8ad0b 	ldhu	r2,-23884(gp)
    7d6c:	1885883a 	add	r2,r3,r2
    7d70:	d0a8ad0d 	sth	r2,-23884(gp)

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
    7d74:	e0bffb17 	ldw	r2,-20(fp)
    7d78:	1080018b 	ldhu	r2,6(r2)
    7d7c:	10bfffcc 	andi	r2,r2,65535
    7d80:	1080080c 	andi	r2,r2,32
    7d84:	10000c1e 	bne	r2,zero,7db8 <ip_reass+0x324>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
    7d88:	e0bff917 	ldw	r2,-28(fp)
    7d8c:	10800783 	ldbu	r2,30(r2)
    7d90:	10800054 	ori	r2,r2,1
    7d94:	1007883a 	mov	r3,r2
    7d98:	e0bff917 	ldw	r2,-28(fp)
    7d9c:	10c00785 	stb	r3,30(r2)
    ipr->datagram_len = offset + len;
    7da0:	e0fffc0b 	ldhu	r3,-16(fp)
    7da4:	e0bffc8b 	ldhu	r2,-14(fp)
    7da8:	1885883a 	add	r2,r3,r2
    7dac:	1007883a 	mov	r3,r2
    7db0:	e0bff917 	ldw	r2,-28(fp)
    7db4:	10c0070d 	sth	r3,28(r2)
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    7db8:	e13ff917 	ldw	r4,-28(fp)
    7dbc:	e17fff17 	ldw	r5,-4(fp)
    7dc0:	00075380 	call	7538 <ip_reass_chain_frag_into_datagram_and_validate>
    7dc4:	10004e26 	beq	r2,zero,7f00 <ip_reass+0x46c>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
    7dc8:	e0bff917 	ldw	r2,-28(fp)
    7dcc:	1080070b 	ldhu	r2,28(r2)
    7dd0:	10800504 	addi	r2,r2,20
    7dd4:	1007883a 	mov	r3,r2
    7dd8:	e0bff917 	ldw	r2,-28(fp)
    7ddc:	10c0070d 	sth	r3,28(r2)

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
    7de0:	e0bff917 	ldw	r2,-28(fp)
    7de4:	10800117 	ldw	r2,4(r2)
    7de8:	10800117 	ldw	r2,4(r2)
    7dec:	10c0000b 	ldhu	r3,0(r2)
    7df0:	1080008b 	ldhu	r2,2(r2)
    7df4:	1004943a 	slli	r2,r2,16
    7df8:	10c4b03a 	or	r2,r2,r3
    7dfc:	e0bff815 	stw	r2,-32(fp)

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    7e00:	e0bff917 	ldw	r2,-28(fp)
    7e04:	10800117 	ldw	r2,4(r2)
    7e08:	10800117 	ldw	r2,4(r2)
    7e0c:	e0bffb15 	stw	r2,-20(fp)
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
    7e10:	e0bff917 	ldw	r2,-28(fp)
    7e14:	10800204 	addi	r2,r2,8
    7e18:	e13ffb17 	ldw	r4,-20(fp)
    7e1c:	100b883a 	mov	r5,r2
    7e20:	01800504 	movi	r6,20
    7e24:	0017a440 	call	17a44 <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
    7e28:	e0bff917 	ldw	r2,-28(fp)
    7e2c:	1080070b 	ldhu	r2,28(r2)
    7e30:	10bfffcc 	andi	r2,r2,65535
    7e34:	1004d23a 	srli	r2,r2,8
    7e38:	1007883a 	mov	r3,r2
    7e3c:	e0bff917 	ldw	r2,-28(fp)
    7e40:	1080070b 	ldhu	r2,28(r2)
    7e44:	10bfffcc 	andi	r2,r2,65535
    7e48:	1004923a 	slli	r2,r2,8
    7e4c:	1884b03a 	or	r2,r3,r2
    7e50:	1007883a 	mov	r3,r2
    7e54:	e0bffb17 	ldw	r2,-20(fp)
    7e58:	10c0008d 	sth	r3,2(r2)
    IPH_OFFSET_SET(fraghdr, 0);
    7e5c:	e0bffb17 	ldw	r2,-20(fp)
    7e60:	1000018d 	sth	zero,6(r2)
    IPH_CHKSUM_SET(fraghdr, 0);
    7e64:	e0bffb17 	ldw	r2,-20(fp)
    7e68:	1000028d 	sth	zero,10(r2)
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    7e6c:	e13ffb17 	ldw	r4,-20(fp)
    7e70:	01400504 	movi	r5,20
    7e74:	0005afc0 	call	5afc <inet_chksum>
    7e78:	e0fffb17 	ldw	r3,-20(fp)
    7e7c:	1880028d 	sth	r2,10(r3)

    p = ipr->p;
    7e80:	e0bff917 	ldw	r2,-28(fp)
    7e84:	10800117 	ldw	r2,4(r2)
    7e88:	e0bfff15 	stw	r2,-4(fp)

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
    7e8c:	00000f06 	br	7ecc <ip_reass+0x438>
      iprh = (struct ip_reass_helper*)r->payload;
    7e90:	e0bff817 	ldw	r2,-32(fp)
    7e94:	10800117 	ldw	r2,4(r2)
    7e98:	e0bffe15 	stw	r2,-8(fp)

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
    7e9c:	e13ff817 	ldw	r4,-32(fp)
    7ea0:	017ffb04 	movi	r5,-20
    7ea4:	000a2280 	call	a228 <pbuf_header>
      pbuf_cat(p, r);
    7ea8:	e13fff17 	ldw	r4,-4(fp)
    7eac:	e17ff817 	ldw	r5,-32(fp)
    7eb0:	000a6780 	call	a678 <pbuf_cat>
      r = iprh->next_pbuf;
    7eb4:	e0bffe17 	ldw	r2,-8(fp)
    7eb8:	10c0000b 	ldhu	r3,0(r2)
    7ebc:	1080008b 	ldhu	r2,2(r2)
    7ec0:	1004943a 	slli	r2,r2,16
    7ec4:	10c4b03a 	or	r2,r2,r3
    7ec8:	e0bff815 	stw	r2,-32(fp)
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
    7ecc:	e0bff817 	ldw	r2,-32(fp)
    7ed0:	103fef1e 	bne	r2,zero,7e90 <ip_reass+0x3fc>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
    7ed4:	e13ff917 	ldw	r4,-28(fp)
    7ed8:	e17ffa17 	ldw	r5,-24(fp)
    7edc:	00074a80 	call	74a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
    7ee0:	d428ad0b 	ldhu	r16,-23884(gp)
    7ee4:	e13fff17 	ldw	r4,-4(fp)
    7ee8:	000a5ec0 	call	a5ec <pbuf_clen>
    7eec:	10803fcc 	andi	r2,r2,255
    7ef0:	8085c83a 	sub	r2,r16,r2
    7ef4:	d0a8ad0d 	sth	r2,-23884(gp)

    /* Return the pbuf chain */
    return p;
    7ef8:	e0bfff17 	ldw	r2,-4(fp)
    7efc:	00000d06 	br	7f34 <ip_reass+0x4a0>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
    7f00:	0005883a 	mov	r2,zero
    7f04:	00000b06 	br	7f34 <ip_reass+0x4a0>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
    7f08:	00800134 	movhi	r2,4
    7f0c:	10932304 	addi	r2,r2,19596
    7f10:	10800d8b 	ldhu	r2,54(r2)
    7f14:	10800044 	addi	r2,r2,1
    7f18:	1007883a 	mov	r3,r2
    7f1c:	00800134 	movhi	r2,4
    7f20:	10932304 	addi	r2,r2,19596
    7f24:	10c00d8d 	sth	r3,54(r2)
  pbuf_free(p);
    7f28:	e13fff17 	ldw	r4,-4(fp)
    7f2c:	000a4200 	call	a420 <pbuf_free>
  return NULL;
    7f30:	0005883a 	mov	r2,zero
}
    7f34:	e037883a 	mov	sp,fp
    7f38:	dfc00217 	ldw	ra,8(sp)
    7f3c:	df000117 	ldw	fp,4(sp)
    7f40:	dc000017 	ldw	r16,0(sp)
    7f44:	dec00304 	addi	sp,sp,12
    7f48:	f800283a 	ret

00007f4c <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
    7f4c:	defff304 	addi	sp,sp,-52
    7f50:	dfc00c15 	stw	ra,48(sp)
    7f54:	df000b15 	stw	fp,44(sp)
    7f58:	df000b04 	addi	fp,sp,44
    7f5c:	e13ffd15 	stw	r4,-12(fp)
    7f60:	e17ffe15 	stw	r5,-8(fp)
    7f64:	e1bfff15 	stw	r6,-4(fp)
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
    7f68:	e0bffe17 	ldw	r2,-8(fp)
    7f6c:	1080090b 	ldhu	r2,36(r2)
    7f70:	e0bff70d 	sth	r2,-36(fp)
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
    7f74:	00800504 	movi	r2,20
    7f78:	e0bff60d 	sth	r2,-40(fp)
#if IP_FRAG_USES_STATIC_BUF
  /* When using a static buffer, we use a PBUF_REF, which we will
   * use to reference the packet (without link header).
   * Layer and length is irrelevant.
   */
  rambuf = pbuf_alloc(PBUF_LINK, 0, PBUF_REF);
    7f7c:	01000084 	movi	r4,2
    7f80:	000b883a 	mov	r5,zero
    7f84:	01800084 	movi	r6,2
    7f88:	0009a600 	call	9a60 <pbuf_alloc>
    7f8c:	e0bff815 	stw	r2,-32(fp)
  if (rambuf == NULL) {
    7f90:	e0bff817 	ldw	r2,-32(fp)
    7f94:	1000021e 	bne	r2,zero,7fa0 <ip_frag+0x54>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));
    return ERR_MEM;
    7f98:	00bfffc4 	movi	r2,-1
    7f9c:	0000a706 	br	823c <ip_frag+0x2f0>
  }
  rambuf->tot_len = rambuf->len = mtu;
    7fa0:	e0bff817 	ldw	r2,-32(fp)
    7fa4:	e0fff70b 	ldhu	r3,-36(fp)
    7fa8:	10c0028d 	sth	r3,10(r2)
    7fac:	e0bff817 	ldw	r2,-32(fp)
    7fb0:	10c0028b 	ldhu	r3,10(r2)
    7fb4:	e0bff817 	ldw	r2,-32(fp)
    7fb8:	10c0020d 	sth	r3,8(r2)
  rambuf->payload = LWIP_MEM_ALIGN((void *)buf);
    7fbc:	008000f4 	movhi	r2,3
    7fc0:	109c0604 	addi	r2,r2,28696
    7fc4:	10c000c4 	addi	r3,r2,3
    7fc8:	00bfff04 	movi	r2,-4
    7fcc:	1884703a 	and	r2,r3,r2
    7fd0:	1007883a 	mov	r3,r2
    7fd4:	e0bff817 	ldw	r2,-32(fp)
    7fd8:	10c00115 	stw	r3,4(r2)

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
    7fdc:	e0bff817 	ldw	r2,-32(fp)
    7fe0:	10800117 	ldw	r2,4(r2)
    7fe4:	e0bff915 	stw	r2,-28(fp)
  SMEMCPY(iphdr, p->payload, IP_HLEN);
    7fe8:	e0bffd17 	ldw	r2,-12(fp)
    7fec:	10800117 	ldw	r2,4(r2)
    7ff0:	e13ff917 	ldw	r4,-28(fp)
    7ff4:	100b883a 	mov	r5,r2
    7ff8:	01800504 	movi	r6,20
    7ffc:	0017a440 	call	17a44 <memcpy>
  original_iphdr = (struct ip_hdr *)p->payload;
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
    8000:	e0bff917 	ldw	r2,-28(fp)
    8004:	1080018b 	ldhu	r2,6(r2)
    8008:	10bfffcc 	andi	r2,r2,65535
    800c:	1004d23a 	srli	r2,r2,8
    8010:	1007883a 	mov	r3,r2
    8014:	e0bff917 	ldw	r2,-28(fp)
    8018:	1080018b 	ldhu	r2,6(r2)
    801c:	10bfffcc 	andi	r2,r2,65535
    8020:	1004923a 	slli	r2,r2,8
    8024:	1884b03a 	or	r2,r3,r2
    8028:	e0bff68d 	sth	r2,-38(fp)
  ofo = tmp & IP_OFFMASK;
    802c:	e0bff68b 	ldhu	r2,-38(fp)
    8030:	1087ffcc 	andi	r2,r2,8191
    8034:	e0bff58d 	sth	r2,-42(fp)
  omf = tmp & IP_MF;
    8038:	e0bff68b 	ldhu	r2,-38(fp)
    803c:	1088000c 	andi	r2,r2,8192
    8040:	e0bffa0d 	sth	r2,-24(fp)

  left = p->tot_len - IP_HLEN;
    8044:	e0bffd17 	ldw	r2,-12(fp)
    8048:	1080020b 	ldhu	r2,8(r2)
    804c:	10bffb04 	addi	r2,r2,-20
    8050:	e0bff50d 	sth	r2,-44(fp)

  nfb = (mtu - IP_HLEN) / 8;
    8054:	e0bff70b 	ldhu	r2,-36(fp)
    8058:	10bffb04 	addi	r2,r2,-20
    805c:	1000010e 	bge	r2,zero,8064 <ip_frag+0x118>
    8060:	108001c4 	addi	r2,r2,7
    8064:	1005d0fa 	srai	r2,r2,3
    8068:	e0bffa8d 	sth	r2,-22(fp)

  while (left) {
    806c:	00006e06 	br	8228 <ip_frag+0x2dc>
    last = (left <= mtu - IP_HLEN);
    8070:	e0bff50b 	ldhu	r2,-44(fp)
    8074:	e0fff70b 	ldhu	r3,-36(fp)
    8078:	18fffb04 	addi	r3,r3,-20
    807c:	1884403a 	cmpge	r2,r3,r2
    8080:	10803fcc 	andi	r2,r2,255
    8084:	e0bffb0d 	sth	r2,-20(fp)

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    8088:	e0bff58b 	ldhu	r2,-42(fp)
    808c:	1087ffcc 	andi	r2,r2,8191
    8090:	1007883a 	mov	r3,r2
    8094:	e0bffa0b 	ldhu	r2,-24(fp)
    8098:	1884b03a 	or	r2,r3,r2
    809c:	e0bff68d 	sth	r2,-38(fp)
    if (!last) {
    80a0:	e0bffb0b 	ldhu	r2,-20(fp)
    80a4:	1000031e 	bne	r2,zero,80b4 <ip_frag+0x168>
      tmp = tmp | IP_MF;
    80a8:	e0bff68b 	ldhu	r2,-38(fp)
    80ac:	10880014 	ori	r2,r2,8192
    80b0:	e0bff68d 	sth	r2,-38(fp)
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
    80b4:	e0bffb0b 	ldhu	r2,-20(fp)
    80b8:	1000031e 	bne	r2,zero,80c8 <ip_frag+0x17c>
    80bc:	e0bffa8b 	ldhu	r2,-22(fp)
    80c0:	100490fa 	slli	r2,r2,3
    80c4:	00000106 	br	80cc <ip_frag+0x180>
    80c8:	e0bff50b 	ldhu	r2,-44(fp)
    80cc:	e0bffb8d 	sth	r2,-18(fp)

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
    80d0:	e0bff917 	ldw	r2,-28(fp)
    80d4:	11400504 	addi	r5,r2,20
    80d8:	e0fffb8b 	ldhu	r3,-18(fp)
    80dc:	e0bff60b 	ldhu	r2,-40(fp)
    80e0:	e13ffd17 	ldw	r4,-12(fp)
    80e4:	180d883a 	mov	r6,r3
    80e8:	100f883a 	mov	r7,r2
    80ec:	000abf00 	call	abf0 <pbuf_copy_partial>
    80f0:	e0fff60b 	ldhu	r3,-40(fp)
    80f4:	10c5883a 	add	r2,r2,r3
    80f8:	e0bff60d 	sth	r2,-40(fp)
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
    80fc:	e0bff68b 	ldhu	r2,-38(fp)
    8100:	1004d23a 	srli	r2,r2,8
    8104:	1007883a 	mov	r3,r2
    8108:	e0bff68b 	ldhu	r2,-38(fp)
    810c:	1004923a 	slli	r2,r2,8
    8110:	1884b03a 	or	r2,r3,r2
    8114:	1007883a 	mov	r3,r2
    8118:	e0bff917 	ldw	r2,-28(fp)
    811c:	10c0018d 	sth	r3,6(r2)
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
    8120:	e0bffb8b 	ldhu	r2,-18(fp)
    8124:	10800504 	addi	r2,r2,20
    8128:	10bfc00c 	andi	r2,r2,65280
    812c:	1005d23a 	srai	r2,r2,8
    8130:	1007883a 	mov	r3,r2
    8134:	e0bffb8b 	ldhu	r2,-18(fp)
    8138:	10800504 	addi	r2,r2,20
    813c:	1004923a 	slli	r2,r2,8
    8140:	1884b03a 	or	r2,r3,r2
    8144:	1007883a 	mov	r3,r2
    8148:	e0bff917 	ldw	r2,-28(fp)
    814c:	10c0008d 	sth	r3,2(r2)
    IPH_CHKSUM_SET(iphdr, 0);
    8150:	e0bff917 	ldw	r2,-28(fp)
    8154:	1000028d 	sth	zero,10(r2)
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    8158:	e13ff917 	ldw	r4,-28(fp)
    815c:	01400504 	movi	r5,20
    8160:	0005afc0 	call	5afc <inet_chksum>
    8164:	e0fff917 	ldw	r3,-28(fp)
    8168:	1880028d 	sth	r2,10(r3)

#if IP_FRAG_USES_STATIC_BUF
    if (last) {
    816c:	e0bffb0b 	ldhu	r2,-20(fp)
    8170:	10000626 	beq	r2,zero,818c <ip_frag+0x240>
      pbuf_realloc(rambuf, left + IP_HLEN);
    8174:	e0bff50b 	ldhu	r2,-44(fp)
    8178:	10800504 	addi	r2,r2,20
    817c:	10bfffcc 	andi	r2,r2,65535
    8180:	e13ff817 	ldw	r4,-32(fp)
    8184:	100b883a 	mov	r5,r2
    8188:	0009fa40 	call	9fa4 <pbuf_realloc>
    /* This part is ugly: we alloc a RAM based pbuf for 
     * the link level header for each chunk and then 
     * free it.A PBUF_ROM style pbuf for which pbuf_header
     * worked would make things simpler.
     */
    header = pbuf_alloc(PBUF_LINK, 0, PBUF_RAM);
    818c:	01000084 	movi	r4,2
    8190:	000b883a 	mov	r5,zero
    8194:	000d883a 	mov	r6,zero
    8198:	0009a600 	call	9a60 <pbuf_alloc>
    819c:	e0bffc15 	stw	r2,-16(fp)
    if (header != NULL) {
    81a0:	e0bffc17 	ldw	r2,-16(fp)
    81a4:	10001c26 	beq	r2,zero,8218 <ip_frag+0x2cc>
      pbuf_chain(header, rambuf);
    81a8:	e13ffc17 	ldw	r4,-16(fp)
    81ac:	e17ff817 	ldw	r5,-32(fp)
    81b0:	000a7b80 	call	a7b8 <pbuf_chain>
      netif->output(netif, header, dest);
    81b4:	e0bffe17 	ldw	r2,-8(fp)
    81b8:	10800517 	ldw	r2,20(r2)
    81bc:	e13ffe17 	ldw	r4,-8(fp)
    81c0:	e17ffc17 	ldw	r5,-16(fp)
    81c4:	e1bfff17 	ldw	r6,-4(fp)
    81c8:	103ee83a 	callr	r2
      IPFRAG_STATS_INC(ip_frag.xmit);
    81cc:	00800134 	movhi	r2,4
    81d0:	10932304 	addi	r2,r2,19596
    81d4:	10800c0b 	ldhu	r2,48(r2)
    81d8:	10800044 	addi	r2,r2,1
    81dc:	1007883a 	mov	r3,r2
    81e0:	00800134 	movhi	r2,4
    81e4:	10932304 	addi	r2,r2,19596
    81e8:	10c00c0d 	sth	r3,48(r2)
      snmp_inc_ipfragcreates();
      pbuf_free(header);
    81ec:	e13ffc17 	ldw	r4,-16(fp)
    81f0:	000a4200 	call	a420 <pbuf_free>
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
    81f4:	e0fff50b 	ldhu	r3,-44(fp)
    81f8:	e0bffb8b 	ldhu	r2,-18(fp)
    81fc:	1885c83a 	sub	r2,r3,r2
    8200:	e0bff50d 	sth	r2,-44(fp)
    ofo += nfb;
    8204:	e0fff58b 	ldhu	r3,-42(fp)
    8208:	e0bffa8b 	ldhu	r2,-22(fp)
    820c:	1885883a 	add	r2,r3,r2
    8210:	e0bff58d 	sth	r2,-42(fp)
    8214:	00000406 	br	8228 <ip_frag+0x2dc>
      IPFRAG_STATS_INC(ip_frag.xmit);
      snmp_inc_ipfragcreates();
      pbuf_free(header);
    } else {
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc() for header failed\n"));
      pbuf_free(rambuf);
    8218:	e13ff817 	ldw	r4,-32(fp)
    821c:	000a4200 	call	a420 <pbuf_free>
      return ERR_MEM;
    8220:	00bfffc4 	movi	r2,-1
    8224:	00000506 	br	823c <ip_frag+0x2f0>

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
    8228:	e0bff50b 	ldhu	r2,-44(fp)
    822c:	103f901e 	bne	r2,zero,8070 <ip_frag+0x124>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
    ofo += nfb;
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
    8230:	e13ff817 	ldw	r4,-32(fp)
    8234:	000a4200 	call	a420 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
    8238:	0005883a 	mov	r2,zero
}
    823c:	e037883a 	mov	sp,fp
    8240:	dfc00117 	ldw	ra,4(sp)
    8244:	df000017 	ldw	fp,0(sp)
    8248:	dec00204 	addi	sp,sp,8
    824c:	f800283a 	ret

00008250 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
    8250:	defffb04 	addi	sp,sp,-20
    8254:	dfc00415 	stw	ra,16(sp)
    8258:	df000315 	stw	fp,12(sp)
    825c:	df000304 	addi	fp,sp,12
    8260:	e13fff15 	stw	r4,-4(fp)
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
    8264:	d0a8ae17 	ldw	r2,-23880(gp)
    8268:	e0ffff17 	ldw	r3,-4(fp)
    826c:	1880092e 	bgeu	r3,r2,8294 <plug_holes+0x44>
    8270:	010000f4 	movhi	r4,3
    8274:	213c9d04 	addi	r4,r4,-3468
    8278:	014000f4 	movhi	r5,3
    827c:	297ca704 	addi	r5,r5,-3428
    8280:	01803c44 	movi	r6,241
    8284:	01c000f4 	movhi	r7,3
    8288:	39fcad04 	addi	r7,r7,-3404
    828c:	0017c440 	call	17c44 <printf>
    8290:	003fff06 	br	8290 <plug_holes+0x40>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
    8294:	d0a8af17 	ldw	r2,-23876(gp)
    8298:	e0ffff17 	ldw	r3,-4(fp)
    829c:	18800936 	bltu	r3,r2,82c4 <plug_holes+0x74>
    82a0:	010000f4 	movhi	r4,3
    82a4:	213c9d04 	addi	r4,r4,-3468
    82a8:	014000f4 	movhi	r5,3
    82ac:	297cb204 	addi	r5,r5,-3384
    82b0:	01803c84 	movi	r6,242
    82b4:	01c000f4 	movhi	r7,3
    82b8:	39fcad04 	addi	r7,r7,-3404
    82bc:	0017c440 	call	17c44 <printf>
    82c0:	003fff06 	br	82c0 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
    82c4:	e0bfff17 	ldw	r2,-4(fp)
    82c8:	10800103 	ldbu	r2,4(r2)
    82cc:	10803fcc 	andi	r2,r2,255
    82d0:	10000926 	beq	r2,zero,82f8 <plug_holes+0xa8>
    82d4:	010000f4 	movhi	r4,3
    82d8:	213c9d04 	addi	r4,r4,-3468
    82dc:	014000f4 	movhi	r5,3
    82e0:	297cb904 	addi	r5,r5,-3356
    82e4:	01803cc4 	movi	r6,243
    82e8:	01c000f4 	movhi	r7,3
    82ec:	39fcad04 	addi	r7,r7,-3404
    82f0:	0017c440 	call	17c44 <printf>
    82f4:	003fff06 	br	82f4 <plug_holes+0xa4>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
    82f8:	e0bfff17 	ldw	r2,-4(fp)
    82fc:	1080000b 	ldhu	r2,0(r2)
    8300:	10bfffcc 	andi	r2,r2,65535
    8304:	10819070 	cmpltui	r2,r2,1601
    8308:	1000091e 	bne	r2,zero,8330 <plug_holes+0xe0>
    830c:	010000f4 	movhi	r4,3
    8310:	213c9d04 	addi	r4,r4,-3468
    8314:	014000f4 	movhi	r5,3
    8318:	297cc004 	addi	r5,r5,-3328
    831c:	01803d84 	movi	r6,246
    8320:	01c000f4 	movhi	r7,3
    8324:	39fcad04 	addi	r7,r7,-3404
    8328:	0017c440 	call	17c44 <printf>
    832c:	003fff06 	br	832c <plug_holes+0xdc>

  nmem = (struct mem *)(void *)&ram[mem->next];
    8330:	d0e8ae17 	ldw	r3,-23880(gp)
    8334:	e0bfff17 	ldw	r2,-4(fp)
    8338:	1080000b 	ldhu	r2,0(r2)
    833c:	10bfffcc 	andi	r2,r2,65535
    8340:	1885883a 	add	r2,r3,r2
    8344:	e0bffd15 	stw	r2,-12(fp)
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
    8348:	e0ffff17 	ldw	r3,-4(fp)
    834c:	e0bffd17 	ldw	r2,-12(fp)
    8350:	18801926 	beq	r3,r2,83b8 <plug_holes+0x168>
    8354:	e0bffd17 	ldw	r2,-12(fp)
    8358:	10800103 	ldbu	r2,4(r2)
    835c:	10803fcc 	andi	r2,r2,255
    8360:	1000151e 	bne	r2,zero,83b8 <plug_holes+0x168>
    8364:	d0a8af17 	ldw	r2,-23876(gp)
    8368:	e0fffd17 	ldw	r3,-12(fp)
    836c:	18801226 	beq	r3,r2,83b8 <plug_holes+0x168>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
    8370:	d0e8b017 	ldw	r3,-23872(gp)
    8374:	e0bffd17 	ldw	r2,-12(fp)
    8378:	1880021e 	bne	r3,r2,8384 <plug_holes+0x134>
      lfree = mem;
    837c:	e0bfff17 	ldw	r2,-4(fp)
    8380:	d0a8b015 	stw	r2,-23872(gp)
    }
    mem->next = nmem->next;
    8384:	e0bffd17 	ldw	r2,-12(fp)
    8388:	10c0000b 	ldhu	r3,0(r2)
    838c:	e0bfff17 	ldw	r2,-4(fp)
    8390:	10c0000d 	sth	r3,0(r2)
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
    8394:	d0e8ae17 	ldw	r3,-23880(gp)
    8398:	e0bffd17 	ldw	r2,-12(fp)
    839c:	1080000b 	ldhu	r2,0(r2)
    83a0:	10bfffcc 	andi	r2,r2,65535
    83a4:	1885883a 	add	r2,r3,r2
    83a8:	e13fff17 	ldw	r4,-4(fp)
    83ac:	d0e8ae17 	ldw	r3,-23880(gp)
    83b0:	20c7c83a 	sub	r3,r4,r3
    83b4:	10c0008d 	sth	r3,2(r2)
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
    83b8:	d0e8ae17 	ldw	r3,-23880(gp)
    83bc:	e0bfff17 	ldw	r2,-4(fp)
    83c0:	1080008b 	ldhu	r2,2(r2)
    83c4:	10bfffcc 	andi	r2,r2,65535
    83c8:	1885883a 	add	r2,r3,r2
    83cc:	e0bffe15 	stw	r2,-8(fp)
  if (pmem != mem && pmem->used == 0) {
    83d0:	e0fffe17 	ldw	r3,-8(fp)
    83d4:	e0bfff17 	ldw	r2,-4(fp)
    83d8:	18801626 	beq	r3,r2,8434 <plug_holes+0x1e4>
    83dc:	e0bffe17 	ldw	r2,-8(fp)
    83e0:	10800103 	ldbu	r2,4(r2)
    83e4:	10803fcc 	andi	r2,r2,255
    83e8:	1000121e 	bne	r2,zero,8434 <plug_holes+0x1e4>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
    83ec:	d0e8b017 	ldw	r3,-23872(gp)
    83f0:	e0bfff17 	ldw	r2,-4(fp)
    83f4:	1880021e 	bne	r3,r2,8400 <plug_holes+0x1b0>
      lfree = pmem;
    83f8:	e0bffe17 	ldw	r2,-8(fp)
    83fc:	d0a8b015 	stw	r2,-23872(gp)
    }
    pmem->next = mem->next;
    8400:	e0bfff17 	ldw	r2,-4(fp)
    8404:	10c0000b 	ldhu	r3,0(r2)
    8408:	e0bffe17 	ldw	r2,-8(fp)
    840c:	10c0000d 	sth	r3,0(r2)
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
    8410:	d0e8ae17 	ldw	r3,-23880(gp)
    8414:	e0bfff17 	ldw	r2,-4(fp)
    8418:	1080000b 	ldhu	r2,0(r2)
    841c:	10bfffcc 	andi	r2,r2,65535
    8420:	1885883a 	add	r2,r3,r2
    8424:	e13ffe17 	ldw	r4,-8(fp)
    8428:	d0e8ae17 	ldw	r3,-23880(gp)
    842c:	20c7c83a 	sub	r3,r4,r3
    8430:	10c0008d 	sth	r3,2(r2)
  }
}
    8434:	e037883a 	mov	sp,fp
    8438:	dfc00117 	ldw	ra,4(sp)
    843c:	df000017 	ldw	fp,0(sp)
    8440:	dec00204 	addi	sp,sp,8
    8444:	f800283a 	ret

00008448 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
    8448:	defffe04 	addi	sp,sp,-8
    844c:	df000115 	stw	fp,4(sp)
    8450:	df000104 	addi	fp,sp,4

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
    8454:	00800134 	movhi	r2,4
    8458:	10918e04 	addi	r2,r2,17976
    845c:	10c000c4 	addi	r3,r2,3
    8460:	00bfff04 	movi	r2,-4
    8464:	1884703a 	and	r2,r3,r2
    8468:	d0a8ae15 	stw	r2,-23880(gp)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
    846c:	d0a8ae17 	ldw	r2,-23880(gp)
    8470:	e0bfff15 	stw	r2,-4(fp)
  mem->next = MEM_SIZE_ALIGNED;
    8474:	e0bfff17 	ldw	r2,-4(fp)
    8478:	00c19004 	movi	r3,1600
    847c:	10c0000d 	sth	r3,0(r2)
  mem->prev = 0;
    8480:	e0bfff17 	ldw	r2,-4(fp)
    8484:	1000008d 	sth	zero,2(r2)
  mem->used = 0;
    8488:	e0bfff17 	ldw	r2,-4(fp)
    848c:	10000105 	stb	zero,4(r2)
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
    8490:	d0a8ae17 	ldw	r2,-23880(gp)
    8494:	10819004 	addi	r2,r2,1600
    8498:	d0a8af15 	stw	r2,-23876(gp)
  ram_end->used = 1;
    849c:	d0a8af17 	ldw	r2,-23876(gp)
    84a0:	00c00044 	movi	r3,1
    84a4:	10c00105 	stb	r3,4(r2)
  ram_end->next = MEM_SIZE_ALIGNED;
    84a8:	d0a8af17 	ldw	r2,-23876(gp)
    84ac:	00c19004 	movi	r3,1600
    84b0:	10c0000d 	sth	r3,0(r2)
  ram_end->prev = MEM_SIZE_ALIGNED;
    84b4:	d0a8af17 	ldw	r2,-23876(gp)
    84b8:	00c19004 	movi	r3,1600
    84bc:	10c0008d 	sth	r3,2(r2)

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
    84c0:	d0a8ae17 	ldw	r2,-23880(gp)
    84c4:	d0a8b015 	stw	r2,-23872(gp)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
    84c8:	00800134 	movhi	r2,4
    84cc:	10932304 	addi	r2,r2,19596
    84d0:	00c19004 	movi	r3,1600
    84d4:	10c02a0d 	sth	r3,168(r2)

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
    84d8:	e037883a 	mov	sp,fp
    84dc:	df000017 	ldw	fp,0(sp)
    84e0:	dec00104 	addi	sp,sp,4
    84e4:	f800283a 	ret

000084e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
    84e8:	defffc04 	addi	sp,sp,-16
    84ec:	dfc00315 	stw	ra,12(sp)
    84f0:	df000215 	stw	fp,8(sp)
    84f4:	df000204 	addi	fp,sp,8
    84f8:	e13fff15 	stw	r4,-4(fp)
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    84fc:	e0bfff17 	ldw	r2,-4(fp)
    8500:	10005326 	beq	r2,zero,8650 <mem_free+0x168>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
    8504:	e0bfff17 	ldw	r2,-4(fp)
    8508:	108000cc 	andi	r2,r2,3
    850c:	10000926 	beq	r2,zero,8534 <mem_free+0x4c>
    8510:	010000f4 	movhi	r4,3
    8514:	213c9d04 	addi	r4,r4,-3468
    8518:	014000f4 	movhi	r5,3
    851c:	297ccb04 	addi	r5,r5,-3284
    8520:	01805004 	movi	r6,320
    8524:	01c000f4 	movhi	r7,3
    8528:	39fcad04 	addi	r7,r7,-3404
    852c:	0017c440 	call	17c44 <printf>
    8530:	003fff06 	br	8530 <mem_free+0x48>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    8534:	d0a8ae17 	ldw	r2,-23880(gp)
    8538:	e0ffff17 	ldw	r3,-4(fp)
    853c:	18800336 	bltu	r3,r2,854c <mem_free+0x64>
    8540:	d0a8af17 	ldw	r2,-23876(gp)
    8544:	e0ffff17 	ldw	r3,-4(fp)
    8548:	18800936 	bltu	r3,r2,8570 <mem_free+0x88>
    854c:	010000f4 	movhi	r4,3
    8550:	213c9d04 	addi	r4,r4,-3468
    8554:	014000f4 	movhi	r5,3
    8558:	297cd404 	addi	r5,r5,-3248
    855c:	018050c4 	movi	r6,323
    8560:	01c000f4 	movhi	r7,3
    8564:	39fcad04 	addi	r7,r7,-3404
    8568:	0017c440 	call	17c44 <printf>
    856c:	003fff06 	br	856c <mem_free+0x84>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    8570:	d0a8ae17 	ldw	r2,-23880(gp)
    8574:	e0ffff17 	ldw	r3,-4(fp)
    8578:	18800336 	bltu	r3,r2,8588 <mem_free+0xa0>
    857c:	d0a8af17 	ldw	r2,-23876(gp)
    8580:	e0ffff17 	ldw	r3,-4(fp)
    8584:	18800936 	bltu	r3,r2,85ac <mem_free+0xc4>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    8588:	00800134 	movhi	r2,4
    858c:	10932304 	addi	r2,r2,19596
    8590:	10802c0b 	ldhu	r2,176(r2)
    8594:	10800044 	addi	r2,r2,1
    8598:	1007883a 	mov	r3,r2
    859c:	00800134 	movhi	r2,4
    85a0:	10932304 	addi	r2,r2,19596
    85a4:	10c02c0d 	sth	r3,176(r2)
    SYS_ARCH_UNPROTECT(lev);
    return;
    85a8:	00002a06 	br	8654 <mem_free+0x16c>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    85ac:	e0bfff17 	ldw	r2,-4(fp)
    85b0:	10bffe04 	addi	r2,r2,-8
    85b4:	e0bffe15 	stw	r2,-8(fp)
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
    85b8:	e0bffe17 	ldw	r2,-8(fp)
    85bc:	10800103 	ldbu	r2,4(r2)
    85c0:	10803fcc 	andi	r2,r2,255
    85c4:	1000091e 	bne	r2,zero,85ec <mem_free+0x104>
    85c8:	010000f4 	movhi	r4,3
    85cc:	213c9d04 	addi	r4,r4,-3468
    85d0:	014000f4 	movhi	r5,3
    85d4:	297cda04 	addi	r5,r5,-3224
    85d8:	018054c4 	movi	r6,339
    85dc:	01c000f4 	movhi	r7,3
    85e0:	39fcad04 	addi	r7,r7,-3404
    85e4:	0017c440 	call	17c44 <printf>
    85e8:	003fff06 	br	85e8 <mem_free+0x100>
  /* ... and is now unused. */
  mem->used = 0;
    85ec:	e0bffe17 	ldw	r2,-8(fp)
    85f0:	10000105 	stb	zero,4(r2)

  if (mem < lfree) {
    85f4:	d0a8b017 	ldw	r2,-23872(gp)
    85f8:	e0fffe17 	ldw	r3,-8(fp)
    85fc:	1880022e 	bgeu	r3,r2,8608 <mem_free+0x120>
    /* the newly freed struct is now the lowest */
    lfree = mem;
    8600:	e0bffe17 	ldw	r2,-8(fp)
    8604:	d0a8b015 	stw	r2,-23872(gp)
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
    8608:	00800134 	movhi	r2,4
    860c:	10932304 	addi	r2,r2,19596
    8610:	10c02a8b 	ldhu	r3,170(r2)
    8614:	e13ffe17 	ldw	r4,-8(fp)
    8618:	d0a8ae17 	ldw	r2,-23880(gp)
    861c:	2085c83a 	sub	r2,r4,r2
    8620:	1009883a 	mov	r4,r2
    8624:	e0bffe17 	ldw	r2,-8(fp)
    8628:	1080000b 	ldhu	r2,0(r2)
    862c:	2085c83a 	sub	r2,r4,r2
    8630:	1885883a 	add	r2,r3,r2
    8634:	1007883a 	mov	r3,r2
    8638:	00800134 	movhi	r2,4
    863c:	10932304 	addi	r2,r2,19596
    8640:	10c02a8d 	sth	r3,170(r2)

  /* finally, see if prev or next are free also */
  plug_holes(mem);
    8644:	e13ffe17 	ldw	r4,-8(fp)
    8648:	00082500 	call	8250 <plug_holes>
    864c:	00000106 	br	8654 <mem_free+0x16c>
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
    8650:	0001883a 	nop
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
    8654:	e037883a 	mov	sp,fp
    8658:	dfc00117 	ldw	ra,4(sp)
    865c:	df000017 	ldw	fp,0(sp)
    8660:	dec00204 	addi	sp,sp,8
    8664:	f800283a 	ret

00008668 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
    8668:	defff804 	addi	sp,sp,-32
    866c:	dfc00715 	stw	ra,28(sp)
    8670:	df000615 	stw	fp,24(sp)
    8674:	df000604 	addi	fp,sp,24
    8678:	e13ffe15 	stw	r4,-8(fp)
    867c:	2805883a 	mov	r2,r5
    8680:	e0bfff0d 	sth	r2,-4(fp)
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
    8684:	e0bfff0b 	ldhu	r2,-4(fp)
    8688:	108000c4 	addi	r2,r2,3
    868c:	1007883a 	mov	r3,r2
    8690:	00bfff04 	movi	r2,-4
    8694:	1884703a 	and	r2,r3,r2
    8698:	e0bfff0d 	sth	r2,-4(fp)

  if(newsize < MIN_SIZE_ALIGNED) {
    869c:	e0bfff0b 	ldhu	r2,-4(fp)
    86a0:	10800328 	cmpgeui	r2,r2,12
    86a4:	1000021e 	bne	r2,zero,86b0 <mem_trim+0x48>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
    86a8:	00800304 	movi	r2,12
    86ac:	e0bfff0d 	sth	r2,-4(fp)
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    86b0:	e0bfff0b 	ldhu	r2,-4(fp)
    86b4:	10819070 	cmpltui	r2,r2,1601
    86b8:	1000021e 	bne	r2,zero,86c4 <mem_trim+0x5c>
    return NULL;
    86bc:	0005883a 	mov	r2,zero
    86c0:	0000b806 	br	89a4 <mem_trim+0x33c>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    86c4:	d0a8ae17 	ldw	r2,-23880(gp)
    86c8:	e0fffe17 	ldw	r3,-8(fp)
    86cc:	18800336 	bltu	r3,r2,86dc <mem_trim+0x74>
    86d0:	d0a8af17 	ldw	r2,-23876(gp)
    86d4:	e0fffe17 	ldw	r3,-8(fp)
    86d8:	18800936 	bltu	r3,r2,8700 <mem_trim+0x98>
    86dc:	010000f4 	movhi	r4,3
    86e0:	213c9d04 	addi	r4,r4,-3468
    86e4:	014000f4 	movhi	r5,3
    86e8:	297cdf04 	addi	r5,r5,-3204
    86ec:	018061c4 	movi	r6,391
    86f0:	01c000f4 	movhi	r7,3
    86f4:	39fcad04 	addi	r7,r7,-3404
    86f8:	0017c440 	call	17c44 <printf>
    86fc:	003fff06 	br	86fc <mem_trim+0x94>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    8700:	d0a8ae17 	ldw	r2,-23880(gp)
    8704:	e0fffe17 	ldw	r3,-8(fp)
    8708:	18800336 	bltu	r3,r2,8718 <mem_trim+0xb0>
    870c:	d0a8af17 	ldw	r2,-23876(gp)
    8710:	e0fffe17 	ldw	r3,-8(fp)
    8714:	18800a36 	bltu	r3,r2,8740 <mem_trim+0xd8>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    8718:	00800134 	movhi	r2,4
    871c:	10932304 	addi	r2,r2,19596
    8720:	10802c0b 	ldhu	r2,176(r2)
    8724:	10800044 	addi	r2,r2,1
    8728:	1007883a 	mov	r3,r2
    872c:	00800134 	movhi	r2,4
    8730:	10932304 	addi	r2,r2,19596
    8734:	10c02c0d 	sth	r3,176(r2)
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
    8738:	e0bffe17 	ldw	r2,-8(fp)
    873c:	00009906 	br	89a4 <mem_trim+0x33c>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    8740:	e0bffe17 	ldw	r2,-8(fp)
    8744:	10bffe04 	addi	r2,r2,-8
    8748:	e0bffa15 	stw	r2,-24(fp)
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
    874c:	e0fffa17 	ldw	r3,-24(fp)
    8750:	d0a8ae17 	ldw	r2,-23880(gp)
    8754:	1885c83a 	sub	r2,r3,r2
    8758:	e0bffb0d 	sth	r2,-20(fp)

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    875c:	e0bffa17 	ldw	r2,-24(fp)
    8760:	10c0000b 	ldhu	r3,0(r2)
    8764:	e0bffb0b 	ldhu	r2,-20(fp)
    8768:	1885c83a 	sub	r2,r3,r2
    876c:	10bffe04 	addi	r2,r2,-8
    8770:	e0bffb8d 	sth	r2,-18(fp)
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
    8774:	e0bfff0b 	ldhu	r2,-4(fp)
    8778:	e0fffb8b 	ldhu	r3,-18(fp)
    877c:	1880092e 	bgeu	r3,r2,87a4 <mem_trim+0x13c>
    8780:	010000f4 	movhi	r4,3
    8784:	213c9d04 	addi	r4,r4,-3468
    8788:	014000f4 	movhi	r5,3
    878c:	297ce504 	addi	r5,r5,-3180
    8790:	01806604 	movi	r6,408
    8794:	01c000f4 	movhi	r7,3
    8798:	39fcad04 	addi	r7,r7,-3404
    879c:	0017c440 	call	17c44 <printf>
    87a0:	003fff06 	br	87a0 <mem_trim+0x138>
  if (newsize > size) {
    87a4:	e0bfff0b 	ldhu	r2,-4(fp)
    87a8:	e0fffb8b 	ldhu	r3,-18(fp)
    87ac:	1880022e 	bgeu	r3,r2,87b8 <mem_trim+0x150>
    /* not supported */
    return NULL;
    87b0:	0005883a 	mov	r2,zero
    87b4:	00007b06 	br	89a4 <mem_trim+0x33c>
  }
  if (newsize == size) {
    87b8:	e0ffff0b 	ldhu	r3,-4(fp)
    87bc:	e0bffb8b 	ldhu	r2,-18(fp)
    87c0:	1880021e 	bne	r3,r2,87cc <mem_trim+0x164>
    /* No change in size, simply return */
    return rmem;
    87c4:	e0bffe17 	ldw	r2,-8(fp)
    87c8:	00007606 	br	89a4 <mem_trim+0x33c>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
    87cc:	d0e8ae17 	ldw	r3,-23880(gp)
    87d0:	e0bffa17 	ldw	r2,-24(fp)
    87d4:	1080000b 	ldhu	r2,0(r2)
    87d8:	10bfffcc 	andi	r2,r2,65535
    87dc:	1885883a 	add	r2,r3,r2
    87e0:	e0bffc15 	stw	r2,-16(fp)
  if(mem2->used == 0) {
    87e4:	e0bffc17 	ldw	r2,-16(fp)
    87e8:	10800103 	ldbu	r2,4(r2)
    87ec:	10803fcc 	andi	r2,r2,255
    87f0:	1000361e 	bne	r2,zero,88cc <mem_trim+0x264>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    87f4:	e0bffc17 	ldw	r2,-16(fp)
    87f8:	1080000b 	ldhu	r2,0(r2)
    87fc:	e0bffd0d 	sth	r2,-12(fp)
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    8800:	e0fffb0b 	ldhu	r3,-20(fp)
    8804:	e0bfff0b 	ldhu	r2,-4(fp)
    8808:	1885883a 	add	r2,r3,r2
    880c:	10800204 	addi	r2,r2,8
    8810:	e0bffd8d 	sth	r2,-10(fp)
    if (lfree == mem2) {
    8814:	d0e8b017 	ldw	r3,-23872(gp)
    8818:	e0bffc17 	ldw	r2,-16(fp)
    881c:	1880041e 	bne	r3,r2,8830 <mem_trim+0x1c8>
      lfree = (struct mem *)(void *)&ram[ptr2];
    8820:	d0e8ae17 	ldw	r3,-23880(gp)
    8824:	e0bffd8b 	ldhu	r2,-10(fp)
    8828:	1885883a 	add	r2,r3,r2
    882c:	d0a8b015 	stw	r2,-23872(gp)
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
    8830:	d0e8ae17 	ldw	r3,-23880(gp)
    8834:	e0bffd8b 	ldhu	r2,-10(fp)
    8838:	1885883a 	add	r2,r3,r2
    883c:	e0bffc15 	stw	r2,-16(fp)
    mem2->used = 0;
    8840:	e0bffc17 	ldw	r2,-16(fp)
    8844:	10000105 	stb	zero,4(r2)
    /* restore the next pointer */
    mem2->next = next;
    8848:	e0bffc17 	ldw	r2,-16(fp)
    884c:	e0fffd0b 	ldhu	r3,-12(fp)
    8850:	10c0000d 	sth	r3,0(r2)
    /* link it back to mem */
    mem2->prev = ptr;
    8854:	e0bffc17 	ldw	r2,-16(fp)
    8858:	e0fffb0b 	ldhu	r3,-20(fp)
    885c:	10c0008d 	sth	r3,2(r2)
    /* link mem to it */
    mem->next = ptr2;
    8860:	e0bffa17 	ldw	r2,-24(fp)
    8864:	e0fffd8b 	ldhu	r3,-10(fp)
    8868:	10c0000d 	sth	r3,0(r2)
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
    886c:	e0bffc17 	ldw	r2,-16(fp)
    8870:	1080000b 	ldhu	r2,0(r2)
    8874:	10bfffcc 	andi	r2,r2,65535
    8878:	10819020 	cmpeqi	r2,r2,1600
    887c:	1000071e 	bne	r2,zero,889c <mem_trim+0x234>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    8880:	d0e8ae17 	ldw	r3,-23880(gp)
    8884:	e0bffc17 	ldw	r2,-16(fp)
    8888:	1080000b 	ldhu	r2,0(r2)
    888c:	10bfffcc 	andi	r2,r2,65535
    8890:	1885883a 	add	r2,r3,r2
    8894:	e0fffd8b 	ldhu	r3,-10(fp)
    8898:	10c0008d 	sth	r3,2(r2)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    889c:	00800134 	movhi	r2,4
    88a0:	10932304 	addi	r2,r2,19596
    88a4:	10c02a8b 	ldhu	r3,170(r2)
    88a8:	e13fff0b 	ldhu	r4,-4(fp)
    88ac:	e0bffb8b 	ldhu	r2,-18(fp)
    88b0:	2085c83a 	sub	r2,r4,r2
    88b4:	1885883a 	add	r2,r3,r2
    88b8:	1007883a 	mov	r3,r2
    88bc:	00800134 	movhi	r2,4
    88c0:	10932304 	addi	r2,r2,19596
    88c4:	10c02a8d 	sth	r3,170(r2)
    88c8:	00003506 	br	89a0 <mem_trim+0x338>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
    88cc:	e0bfff0b 	ldhu	r2,-4(fp)
    88d0:	10800504 	addi	r2,r2,20
    88d4:	e0fffb8b 	ldhu	r3,-18(fp)
    88d8:	18803136 	bltu	r3,r2,89a0 <mem_trim+0x338>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    88dc:	e0fffb0b 	ldhu	r3,-20(fp)
    88e0:	e0bfff0b 	ldhu	r2,-4(fp)
    88e4:	1885883a 	add	r2,r3,r2
    88e8:	10800204 	addi	r2,r2,8
    88ec:	e0bffd8d 	sth	r2,-10(fp)
    mem2 = (struct mem *)(void *)&ram[ptr2];
    88f0:	d0e8ae17 	ldw	r3,-23880(gp)
    88f4:	e0bffd8b 	ldhu	r2,-10(fp)
    88f8:	1885883a 	add	r2,r3,r2
    88fc:	e0bffc15 	stw	r2,-16(fp)
    if (mem2 < lfree) {
    8900:	d0a8b017 	ldw	r2,-23872(gp)
    8904:	e0fffc17 	ldw	r3,-16(fp)
    8908:	1880022e 	bgeu	r3,r2,8914 <mem_trim+0x2ac>
      lfree = mem2;
    890c:	e0bffc17 	ldw	r2,-16(fp)
    8910:	d0a8b015 	stw	r2,-23872(gp)
    }
    mem2->used = 0;
    8914:	e0bffc17 	ldw	r2,-16(fp)
    8918:	10000105 	stb	zero,4(r2)
    mem2->next = mem->next;
    891c:	e0bffa17 	ldw	r2,-24(fp)
    8920:	10c0000b 	ldhu	r3,0(r2)
    8924:	e0bffc17 	ldw	r2,-16(fp)
    8928:	10c0000d 	sth	r3,0(r2)
    mem2->prev = ptr;
    892c:	e0bffc17 	ldw	r2,-16(fp)
    8930:	e0fffb0b 	ldhu	r3,-20(fp)
    8934:	10c0008d 	sth	r3,2(r2)
    mem->next = ptr2;
    8938:	e0bffa17 	ldw	r2,-24(fp)
    893c:	e0fffd8b 	ldhu	r3,-10(fp)
    8940:	10c0000d 	sth	r3,0(r2)
    if (mem2->next != MEM_SIZE_ALIGNED) {
    8944:	e0bffc17 	ldw	r2,-16(fp)
    8948:	1080000b 	ldhu	r2,0(r2)
    894c:	10bfffcc 	andi	r2,r2,65535
    8950:	10819020 	cmpeqi	r2,r2,1600
    8954:	1000071e 	bne	r2,zero,8974 <mem_trim+0x30c>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    8958:	d0e8ae17 	ldw	r3,-23880(gp)
    895c:	e0bffc17 	ldw	r2,-16(fp)
    8960:	1080000b 	ldhu	r2,0(r2)
    8964:	10bfffcc 	andi	r2,r2,65535
    8968:	1885883a 	add	r2,r3,r2
    896c:	e0fffd8b 	ldhu	r3,-10(fp)
    8970:	10c0008d 	sth	r3,2(r2)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    8974:	00800134 	movhi	r2,4
    8978:	10932304 	addi	r2,r2,19596
    897c:	10c02a8b 	ldhu	r3,170(r2)
    8980:	e13fff0b 	ldhu	r4,-4(fp)
    8984:	e0bffb8b 	ldhu	r2,-18(fp)
    8988:	2085c83a 	sub	r2,r4,r2
    898c:	1885883a 	add	r2,r3,r2
    8990:	1007883a 	mov	r3,r2
    8994:	00800134 	movhi	r2,4
    8998:	10932304 	addi	r2,r2,19596
    899c:	10c02a8d 	sth	r3,170(r2)
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
    89a0:	e0bffe17 	ldw	r2,-8(fp)
}
    89a4:	e037883a 	mov	sp,fp
    89a8:	dfc00117 	ldw	ra,4(sp)
    89ac:	df000017 	ldw	fp,0(sp)
    89b0:	dec00204 	addi	sp,sp,8
    89b4:	f800283a 	ret

000089b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
    89b8:	defff804 	addi	sp,sp,-32
    89bc:	dfc00715 	stw	ra,28(sp)
    89c0:	df000615 	stw	fp,24(sp)
    89c4:	df000604 	addi	fp,sp,24
    89c8:	2005883a 	mov	r2,r4
    89cc:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    89d0:	e0bfff0b 	ldhu	r2,-4(fp)
    89d4:	1000021e 	bne	r2,zero,89e0 <mem_malloc+0x28>
    return NULL;
    89d8:	0005883a 	mov	r2,zero
    89dc:	0000ef06 	br	8d9c <mem_malloc+0x3e4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
    89e0:	e0bfff0b 	ldhu	r2,-4(fp)
    89e4:	108000c4 	addi	r2,r2,3
    89e8:	1007883a 	mov	r3,r2
    89ec:	00bfff04 	movi	r2,-4
    89f0:	1884703a 	and	r2,r3,r2
    89f4:	e0bfff0d 	sth	r2,-4(fp)

  if(size < MIN_SIZE_ALIGNED) {
    89f8:	e0bfff0b 	ldhu	r2,-4(fp)
    89fc:	10800328 	cmpgeui	r2,r2,12
    8a00:	1000021e 	bne	r2,zero,8a0c <mem_malloc+0x54>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
    8a04:	00800304 	movi	r2,12
    8a08:	e0bfff0d 	sth	r2,-4(fp)
  }

  if (size > MEM_SIZE_ALIGNED) {
    8a0c:	e0bfff0b 	ldhu	r2,-4(fp)
    8a10:	10819070 	cmpltui	r2,r2,1601
    8a14:	1000021e 	bne	r2,zero,8a20 <mem_malloc+0x68>
    return NULL;
    8a18:	0005883a 	mov	r2,zero
    8a1c:	0000df06 	br	8d9c <mem_malloc+0x3e4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    8a20:	d0a8b017 	ldw	r2,-23872(gp)
    8a24:	1007883a 	mov	r3,r2
    8a28:	d0a8ae17 	ldw	r2,-23880(gp)
    8a2c:	1885c83a 	sub	r2,r3,r2
    8a30:	e0bffa0d 	sth	r2,-24(fp)
    8a34:	0000cb06 	br	8d64 <mem_malloc+0x3ac>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
    8a38:	d0e8ae17 	ldw	r3,-23880(gp)
    8a3c:	e0bffa0b 	ldhu	r2,-24(fp)
    8a40:	1885883a 	add	r2,r3,r2
    8a44:	e0bffc15 	stw	r2,-16(fp)
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
    8a48:	e0bffc17 	ldw	r2,-16(fp)
    8a4c:	10800103 	ldbu	r2,4(r2)
    8a50:	10803fcc 	andi	r2,r2,255
    8a54:	1000be1e 	bne	r2,zero,8d50 <mem_malloc+0x398>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
    8a58:	e0bffc17 	ldw	r2,-16(fp)
    8a5c:	1080000b 	ldhu	r2,0(r2)
    8a60:	10ffffcc 	andi	r3,r2,65535
    8a64:	e0bffa0b 	ldhu	r2,-24(fp)
    8a68:	1885c83a 	sub	r2,r3,r2
    8a6c:	10fffe04 	addi	r3,r2,-8
    8a70:	e0bfff0b 	ldhu	r2,-4(fp)
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
    8a74:	1880b636 	bltu	r3,r2,8d50 <mem_malloc+0x398>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
    8a78:	e0bffc17 	ldw	r2,-16(fp)
    8a7c:	1080000b 	ldhu	r2,0(r2)
    8a80:	10ffffcc 	andi	r3,r2,65535
    8a84:	e0bffa0b 	ldhu	r2,-24(fp)
    8a88:	1885c83a 	sub	r2,r3,r2
    8a8c:	10fffe04 	addi	r3,r2,-8
    8a90:	e0bfff0b 	ldhu	r2,-4(fp)
    8a94:	10800504 	addi	r2,r2,20
    8a98:	18803e36 	bltu	r3,r2,8b94 <mem_malloc+0x1dc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
    8a9c:	e0fffa0b 	ldhu	r3,-24(fp)
    8aa0:	e0bfff0b 	ldhu	r2,-4(fp)
    8aa4:	1885883a 	add	r2,r3,r2
    8aa8:	10800204 	addi	r2,r2,8
    8aac:	e0bffd0d 	sth	r2,-12(fp)
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
    8ab0:	d0e8ae17 	ldw	r3,-23880(gp)
    8ab4:	e0bffd0b 	ldhu	r2,-12(fp)
    8ab8:	1885883a 	add	r2,r3,r2
    8abc:	e0bffe15 	stw	r2,-8(fp)
          mem2->used = 0;
    8ac0:	e0bffe17 	ldw	r2,-8(fp)
    8ac4:	10000105 	stb	zero,4(r2)
          mem2->next = mem->next;
    8ac8:	e0bffc17 	ldw	r2,-16(fp)
    8acc:	10c0000b 	ldhu	r3,0(r2)
    8ad0:	e0bffe17 	ldw	r2,-8(fp)
    8ad4:	10c0000d 	sth	r3,0(r2)
          mem2->prev = ptr;
    8ad8:	e0bffe17 	ldw	r2,-8(fp)
    8adc:	e0fffa0b 	ldhu	r3,-24(fp)
    8ae0:	10c0008d 	sth	r3,2(r2)
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
    8ae4:	e0bffc17 	ldw	r2,-16(fp)
    8ae8:	e0fffd0b 	ldhu	r3,-12(fp)
    8aec:	10c0000d 	sth	r3,0(r2)
          mem->used = 1;
    8af0:	e0bffc17 	ldw	r2,-16(fp)
    8af4:	00c00044 	movi	r3,1
    8af8:	10c00105 	stb	r3,4(r2)

          if (mem2->next != MEM_SIZE_ALIGNED) {
    8afc:	e0bffe17 	ldw	r2,-8(fp)
    8b00:	1080000b 	ldhu	r2,0(r2)
    8b04:	10bfffcc 	andi	r2,r2,65535
    8b08:	10819020 	cmpeqi	r2,r2,1600
    8b0c:	1000071e 	bne	r2,zero,8b2c <mem_malloc+0x174>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    8b10:	d0e8ae17 	ldw	r3,-23880(gp)
    8b14:	e0bffe17 	ldw	r2,-8(fp)
    8b18:	1080000b 	ldhu	r2,0(r2)
    8b1c:	10bfffcc 	andi	r2,r2,65535
    8b20:	1885883a 	add	r2,r3,r2
    8b24:	e0fffd0b 	ldhu	r3,-12(fp)
    8b28:	10c0008d 	sth	r3,2(r2)
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
    8b2c:	00800134 	movhi	r2,4
    8b30:	10932304 	addi	r2,r2,19596
    8b34:	10c02a8b 	ldhu	r3,170(r2)
    8b38:	e0bfff0b 	ldhu	r2,-4(fp)
    8b3c:	1885883a 	add	r2,r3,r2
    8b40:	10800204 	addi	r2,r2,8
    8b44:	1007883a 	mov	r3,r2
    8b48:	00800134 	movhi	r2,4
    8b4c:	10932304 	addi	r2,r2,19596
    8b50:	10c02a8d 	sth	r3,170(r2)
    8b54:	00800134 	movhi	r2,4
    8b58:	10932304 	addi	r2,r2,19596
    8b5c:	10c02b0b 	ldhu	r3,172(r2)
    8b60:	00800134 	movhi	r2,4
    8b64:	10932304 	addi	r2,r2,19596
    8b68:	10802a8b 	ldhu	r2,170(r2)
    8b6c:	18ffffcc 	andi	r3,r3,65535
    8b70:	10bfffcc 	andi	r2,r2,65535
    8b74:	1880272e 	bgeu	r3,r2,8c14 <mem_malloc+0x25c>
    8b78:	00800134 	movhi	r2,4
    8b7c:	10932304 	addi	r2,r2,19596
    8b80:	10c02a8b 	ldhu	r3,170(r2)
    8b84:	00800134 	movhi	r2,4
    8b88:	10932304 	addi	r2,r2,19596
    8b8c:	10c02b0d 	sth	r3,172(r2)
    8b90:	00002006 	br	8c14 <mem_malloc+0x25c>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
    8b94:	e0bffc17 	ldw	r2,-16(fp)
    8b98:	00c00044 	movi	r3,1
    8b9c:	10c00105 	stb	r3,4(r2)
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
    8ba0:	00800134 	movhi	r2,4
    8ba4:	10932304 	addi	r2,r2,19596
    8ba8:	10c02a8b 	ldhu	r3,170(r2)
    8bac:	e0bffc17 	ldw	r2,-16(fp)
    8bb0:	1100000b 	ldhu	r4,0(r2)
    8bb4:	e17ffc17 	ldw	r5,-16(fp)
    8bb8:	d0a8ae17 	ldw	r2,-23880(gp)
    8bbc:	2885c83a 	sub	r2,r5,r2
    8bc0:	2085c83a 	sub	r2,r4,r2
    8bc4:	1885883a 	add	r2,r3,r2
    8bc8:	1007883a 	mov	r3,r2
    8bcc:	00800134 	movhi	r2,4
    8bd0:	10932304 	addi	r2,r2,19596
    8bd4:	10c02a8d 	sth	r3,170(r2)
    8bd8:	00800134 	movhi	r2,4
    8bdc:	10932304 	addi	r2,r2,19596
    8be0:	10c02b0b 	ldhu	r3,172(r2)
    8be4:	00800134 	movhi	r2,4
    8be8:	10932304 	addi	r2,r2,19596
    8bec:	10802a8b 	ldhu	r2,170(r2)
    8bf0:	18ffffcc 	andi	r3,r3,65535
    8bf4:	10bfffcc 	andi	r2,r2,65535
    8bf8:	1880062e 	bgeu	r3,r2,8c14 <mem_malloc+0x25c>
    8bfc:	00800134 	movhi	r2,4
    8c00:	10932304 	addi	r2,r2,19596
    8c04:	10c02a8b 	ldhu	r3,170(r2)
    8c08:	00800134 	movhi	r2,4
    8c0c:	10932304 	addi	r2,r2,19596
    8c10:	10c02b0d 	sth	r3,172(r2)
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
    8c14:	d0a8b017 	ldw	r2,-23872(gp)
    8c18:	e0fffc17 	ldw	r3,-16(fp)
    8c1c:	1880221e 	bne	r3,r2,8ca8 <mem_malloc+0x2f0>
          struct mem *cur = lfree;
    8c20:	d0a8b017 	ldw	r2,-23872(gp)
    8c24:	e0bffb15 	stw	r2,-20(fp)
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
    8c28:	00000606 	br	8c44 <mem_malloc+0x28c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
    8c2c:	d0e8ae17 	ldw	r3,-23880(gp)
    8c30:	e0bffb17 	ldw	r2,-20(fp)
    8c34:	1080000b 	ldhu	r2,0(r2)
    8c38:	10bfffcc 	andi	r2,r2,65535
    8c3c:	1885883a 	add	r2,r3,r2
    8c40:	e0bffb15 	stw	r2,-20(fp)
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
    8c44:	e0bffb17 	ldw	r2,-20(fp)
    8c48:	10800103 	ldbu	r2,4(r2)
    8c4c:	10803fcc 	andi	r2,r2,255
    8c50:	10000326 	beq	r2,zero,8c60 <mem_malloc+0x2a8>
    8c54:	d0a8af17 	ldw	r2,-23876(gp)
    8c58:	e0fffb17 	ldw	r3,-20(fp)
    8c5c:	18bff31e 	bne	r3,r2,8c2c <mem_malloc+0x274>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
    8c60:	e0bffb17 	ldw	r2,-20(fp)
    8c64:	d0a8b015 	stw	r2,-23872(gp)
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
    8c68:	d0e8b017 	ldw	r3,-23872(gp)
    8c6c:	d0a8af17 	ldw	r2,-23876(gp)
    8c70:	18800d26 	beq	r3,r2,8ca8 <mem_malloc+0x2f0>
    8c74:	d0a8b017 	ldw	r2,-23872(gp)
    8c78:	10800103 	ldbu	r2,4(r2)
    8c7c:	10803fcc 	andi	r2,r2,255
    8c80:	10000926 	beq	r2,zero,8ca8 <mem_malloc+0x2f0>
    8c84:	010000f4 	movhi	r4,3
    8c88:	213c9d04 	addi	r4,r4,-3468
    8c8c:	014000f4 	movhi	r5,3
    8c90:	297ced04 	addi	r5,r5,-3148
    8c94:	01809884 	movi	r6,610
    8c98:	01c000f4 	movhi	r7,3
    8c9c:	39fcad04 	addi	r7,r7,-3404
    8ca0:	0017c440 	call	17c44 <printf>
    8ca4:	003fff06 	br	8ca4 <mem_malloc+0x2ec>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
    8ca8:	e0ffff0b 	ldhu	r3,-4(fp)
    8cac:	e0bffc17 	ldw	r2,-16(fp)
    8cb0:	1885883a 	add	r2,r3,r2
    8cb4:	10800204 	addi	r2,r2,8
    8cb8:	d0e8af17 	ldw	r3,-23876(gp)
    8cbc:	1880092e 	bgeu	r3,r2,8ce4 <mem_malloc+0x32c>
    8cc0:	010000f4 	movhi	r4,3
    8cc4:	213c9d04 	addi	r4,r4,-3468
    8cc8:	014000f4 	movhi	r5,3
    8ccc:	297cf404 	addi	r5,r5,-3120
    8cd0:	018099c4 	movi	r6,615
    8cd4:	01c000f4 	movhi	r7,3
    8cd8:	39fcad04 	addi	r7,r7,-3404
    8cdc:	0017c440 	call	17c44 <printf>
    8ce0:	003fff06 	br	8ce0 <mem_malloc+0x328>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
    8ce4:	e0bffc17 	ldw	r2,-16(fp)
    8ce8:	108000cc 	andi	r2,r2,3
    8cec:	10000926 	beq	r2,zero,8d14 <mem_malloc+0x35c>
    8cf0:	010000f4 	movhi	r4,3
    8cf4:	213c9d04 	addi	r4,r4,-3468
    8cf8:	014000f4 	movhi	r5,3
    8cfc:	297d0004 	addi	r5,r5,-3072
    8d00:	01809a44 	movi	r6,617
    8d04:	01c000f4 	movhi	r7,3
    8d08:	39fcad04 	addi	r7,r7,-3404
    8d0c:	0017c440 	call	17c44 <printf>
    8d10:	003fff06 	br	8d10 <mem_malloc+0x358>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
    8d14:	e0bffc17 	ldw	r2,-16(fp)
    8d18:	108000cc 	andi	r2,r2,3
    8d1c:	10000926 	beq	r2,zero,8d44 <mem_malloc+0x38c>
    8d20:	010000f4 	movhi	r4,3
    8d24:	213c9d04 	addi	r4,r4,-3468
    8d28:	014000f4 	movhi	r5,3
    8d2c:	297d0c04 	addi	r5,r5,-3024
    8d30:	01809ac4 	movi	r6,619
    8d34:	01c000f4 	movhi	r7,3
    8d38:	39fcad04 	addi	r7,r7,-3404
    8d3c:	0017c440 	call	17c44 <printf>
    8d40:	003fff06 	br	8d40 <mem_malloc+0x388>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
    8d44:	e0bffc17 	ldw	r2,-16(fp)
    8d48:	10800204 	addi	r2,r2,8
    8d4c:	00001306 	br	8d9c <mem_malloc+0x3e4>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
    8d50:	d0e8ae17 	ldw	r3,-23880(gp)
    8d54:	e0bffa0b 	ldhu	r2,-24(fp)
    8d58:	1885883a 	add	r2,r3,r2
    8d5c:	1080000b 	ldhu	r2,0(r2)
    8d60:	e0bffa0d 	sth	r2,-24(fp)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    8d64:	e0fffa0b 	ldhu	r3,-24(fp)
    8d68:	e0bfff0b 	ldhu	r2,-4(fp)
    8d6c:	01019004 	movi	r4,1600
    8d70:	2085c83a 	sub	r2,r4,r2
    8d74:	18bf3016 	blt	r3,r2,8a38 <mem_malloc+0x80>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
    8d78:	00800134 	movhi	r2,4
    8d7c:	10932304 	addi	r2,r2,19596
    8d80:	10802b8b 	ldhu	r2,174(r2)
    8d84:	10800044 	addi	r2,r2,1
    8d88:	1007883a 	mov	r3,r2
    8d8c:	00800134 	movhi	r2,4
    8d90:	10932304 	addi	r2,r2,19596
    8d94:	10c02b8d 	sth	r3,174(r2)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
    8d98:	0005883a 	mov	r2,zero
}
    8d9c:	e037883a 	mov	sp,fp
    8da0:	dfc00117 	ldw	ra,4(sp)
    8da4:	df000017 	ldw	fp,0(sp)
    8da8:	dec00204 	addi	sp,sp,8
    8dac:	f800283a 	ret

00008db0 <mem_calloc>:
 * @param count number of objects to allocate
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *mem_calloc(mem_size_t count, mem_size_t size)
{
    8db0:	defffb04 	addi	sp,sp,-20
    8db4:	dfc00415 	stw	ra,16(sp)
    8db8:	df000315 	stw	fp,12(sp)
    8dbc:	df000304 	addi	fp,sp,12
    8dc0:	2007883a 	mov	r3,r4
    8dc4:	2805883a 	mov	r2,r5
    8dc8:	e0fffe0d 	sth	r3,-8(fp)
    8dcc:	e0bfff0d 	sth	r2,-4(fp)
  void *p;

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc(count * size);
    8dd0:	e0fffe0b 	ldhu	r3,-8(fp)
    8dd4:	e0bfff0b 	ldhu	r2,-4(fp)
    8dd8:	1885383a 	mul	r2,r3,r2
    8ddc:	10bfffcc 	andi	r2,r2,65535
    8de0:	1009883a 	mov	r4,r2
    8de4:	00089b80 	call	89b8 <mem_malloc>
    8de8:	e0bffd15 	stw	r2,-12(fp)
  if (p) {
    8dec:	e0bffd17 	ldw	r2,-12(fp)
    8df0:	10000726 	beq	r2,zero,8e10 <mem_calloc+0x60>
    /* zero the memory */
    memset(p, 0, count * size);
    8df4:	e0fffe0b 	ldhu	r3,-8(fp)
    8df8:	e0bfff0b 	ldhu	r2,-4(fp)
    8dfc:	1885383a 	mul	r2,r3,r2
    8e00:	e13ffd17 	ldw	r4,-12(fp)
    8e04:	000b883a 	mov	r5,zero
    8e08:	100d883a 	mov	r6,r2
    8e0c:	0017b3c0 	call	17b3c <memset>
  }
  return p;
    8e10:	e0bffd17 	ldw	r2,-12(fp)
}
    8e14:	e037883a 	mov	sp,fp
    8e18:	dfc00117 	ldw	ra,4(sp)
    8e1c:	df000017 	ldw	fp,0(sp)
    8e20:	dec00204 	addi	sp,sp,8
    8e24:	f800283a 	ret

00008e28 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
    8e28:	defffd04 	addi	sp,sp,-12
    8e2c:	df000215 	stw	fp,8(sp)
    8e30:	df000204 	addi	fp,sp,8
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
    8e34:	e03fff0d 	sth	zero,-4(fp)
    8e38:	00002506 	br	8ed0 <memp_init+0xa8>
    MEMP_STATS_AVAIL(used, i, 0);
    8e3c:	e0bfff0b 	ldhu	r2,-4(fp)
    8e40:	00c00134 	movhi	r3,4
    8e44:	18d32304 	addi	r3,r3,19596
    8e48:	108002a4 	muli	r2,r2,10
    8e4c:	1885883a 	add	r2,r3,r2
    8e50:	10802d04 	addi	r2,r2,180
    8e54:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(max, i, 0);
    8e58:	e0bfff0b 	ldhu	r2,-4(fp)
    8e5c:	00c00134 	movhi	r3,4
    8e60:	18d32304 	addi	r3,r3,19596
    8e64:	108002a4 	muli	r2,r2,10
    8e68:	1885883a 	add	r2,r3,r2
    8e6c:	10802d84 	addi	r2,r2,182
    8e70:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(err, i, 0);
    8e74:	e0bfff0b 	ldhu	r2,-4(fp)
    8e78:	00c00134 	movhi	r3,4
    8e7c:	18d32304 	addi	r3,r3,19596
    8e80:	108002a4 	muli	r2,r2,10
    8e84:	1885883a 	add	r2,r3,r2
    8e88:	10802e04 	addi	r2,r2,184
    8e8c:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
    8e90:	e17fff0b 	ldhu	r5,-4(fp)
    8e94:	e0bfff0b 	ldhu	r2,-4(fp)
    8e98:	00c000f4 	movhi	r3,3
    8e9c:	18fd1984 	addi	r3,r3,-2970
    8ea0:	1085883a 	add	r2,r2,r2
    8ea4:	1885883a 	add	r2,r3,r2
    8ea8:	10c0000b 	ldhu	r3,0(r2)
    8eac:	01000134 	movhi	r4,4
    8eb0:	21132304 	addi	r4,r4,19596
    8eb4:	288002a4 	muli	r2,r5,10
    8eb8:	2085883a 	add	r2,r4,r2
    8ebc:	10802c84 	addi	r2,r2,178
    8ec0:	10c0000d 	sth	r3,0(r2)
memp_init(void)
{
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
    8ec4:	e0bfff0b 	ldhu	r2,-4(fp)
    8ec8:	10800044 	addi	r2,r2,1
    8ecc:	e0bfff0d 	sth	r2,-4(fp)
    8ed0:	e0bfff0b 	ldhu	r2,-4(fp)
    8ed4:	10800270 	cmpltui	r2,r2,9
    8ed8:	103fd81e 	bne	r2,zero,8e3c <memp_init+0x14>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
    8edc:	008000f4 	movhi	r2,3
    8ee0:	109d8704 	addi	r2,r2,30236
    8ee4:	10c000c4 	addi	r3,r2,3
    8ee8:	00bfff04 	movi	r2,-4
    8eec:	1884703a 	and	r2,r3,r2
    8ef0:	e0bffe15 	stw	r2,-8(fp)
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    8ef4:	e03fff0d 	sth	zero,-4(fp)
    8ef8:	00003306 	br	8fc8 <memp_init+0x1a0>
    memp_tab[i] = NULL;
    8efc:	e0bfff0b 	ldhu	r2,-4(fp)
    8f00:	00c000f4 	movhi	r3,3
    8f04:	18dd7e04 	addi	r3,r3,30200
    8f08:	1085883a 	add	r2,r2,r2
    8f0c:	1085883a 	add	r2,r2,r2
    8f10:	1885883a 	add	r2,r3,r2
    8f14:	10000015 	stw	zero,0(r2)
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
    8f18:	e03fff8d 	sth	zero,-2(fp)
    8f1c:	00001e06 	br	8f98 <memp_init+0x170>
      memp->next = memp_tab[i];
    8f20:	e0bfff0b 	ldhu	r2,-4(fp)
    8f24:	00c000f4 	movhi	r3,3
    8f28:	18dd7e04 	addi	r3,r3,30200
    8f2c:	1085883a 	add	r2,r2,r2
    8f30:	1085883a 	add	r2,r2,r2
    8f34:	1885883a 	add	r2,r3,r2
    8f38:	10c00017 	ldw	r3,0(r2)
    8f3c:	e0bffe17 	ldw	r2,-8(fp)
    8f40:	10c00015 	stw	r3,0(r2)
      memp_tab[i] = memp;
    8f44:	e0bfff0b 	ldhu	r2,-4(fp)
    8f48:	00c000f4 	movhi	r3,3
    8f4c:	18dd7e04 	addi	r3,r3,30200
    8f50:	1085883a 	add	r2,r2,r2
    8f54:	1085883a 	add	r2,r2,r2
    8f58:	1885883a 	add	r2,r3,r2
    8f5c:	e0fffe17 	ldw	r3,-8(fp)
    8f60:	10c00015 	stw	r3,0(r2)
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
    8f64:	e0bfff0b 	ldhu	r2,-4(fp)
    8f68:	00c000f4 	movhi	r3,3
    8f6c:	18fd1504 	addi	r3,r3,-2988
    8f70:	1085883a 	add	r2,r2,r2
    8f74:	1885883a 	add	r2,r3,r2
    8f78:	1080000b 	ldhu	r2,0(r2)
    8f7c:	10bfffcc 	andi	r2,r2,65535
    8f80:	e0fffe17 	ldw	r3,-8(fp)
    8f84:	1885883a 	add	r2,r3,r2
    8f88:	e0bffe15 	stw	r2,-8(fp)
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
    8f8c:	e0bfff8b 	ldhu	r2,-2(fp)
    8f90:	10800044 	addi	r2,r2,1
    8f94:	e0bfff8d 	sth	r2,-2(fp)
    8f98:	e0bfff0b 	ldhu	r2,-4(fp)
    8f9c:	00c000f4 	movhi	r3,3
    8fa0:	18fd1984 	addi	r3,r3,-2970
    8fa4:	1085883a 	add	r2,r2,r2
    8fa8:	1885883a 	add	r2,r3,r2
    8fac:	1080000b 	ldhu	r2,0(r2)
    8fb0:	10bfffcc 	andi	r2,r2,65535
    8fb4:	e0ffff8b 	ldhu	r3,-2(fp)
    8fb8:	18bfd936 	bltu	r3,r2,8f20 <memp_init+0xf8>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    8fbc:	e0bfff0b 	ldhu	r2,-4(fp)
    8fc0:	10800044 	addi	r2,r2,1
    8fc4:	e0bfff0d 	sth	r2,-4(fp)
    8fc8:	e0bfff0b 	ldhu	r2,-4(fp)
    8fcc:	10800270 	cmpltui	r2,r2,9
    8fd0:	103fca1e 	bne	r2,zero,8efc <memp_init+0xd4>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
    8fd4:	e037883a 	mov	sp,fp
    8fd8:	df000017 	ldw	fp,0(sp)
    8fdc:	dec00104 	addi	sp,sp,4
    8fe0:	f800283a 	ret

00008fe4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
    8fe4:	defffc04 	addi	sp,sp,-16
    8fe8:	dfc00315 	stw	ra,12(sp)
    8fec:	df000215 	stw	fp,8(sp)
    8ff0:	df000204 	addi	fp,sp,8
    8ff4:	e13fff15 	stw	r4,-4(fp)
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
    8ff8:	e0bfff17 	ldw	r2,-4(fp)
    8ffc:	10800270 	cmpltui	r2,r2,9
    9000:	1000091e 	bne	r2,zero,9028 <memp_malloc+0x44>
    9004:	010000f4 	movhi	r4,3
    9008:	213d1e04 	addi	r4,r4,-2952
    900c:	014000f4 	movhi	r5,3
    9010:	297d2804 	addi	r5,r5,-2912
    9014:	01806384 	movi	r6,398
    9018:	01c000f4 	movhi	r7,3
    901c:	39fd3004 	addi	r7,r7,-2880
    9020:	0017c440 	call	17c44 <printf>
    9024:	003fff06 	br	9024 <memp_malloc+0x40>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
    9028:	00c000f4 	movhi	r3,3
    902c:	18dd7e04 	addi	r3,r3,30200
    9030:	e0bfff17 	ldw	r2,-4(fp)
    9034:	1085883a 	add	r2,r2,r2
    9038:	1085883a 	add	r2,r2,r2
    903c:	1885883a 	add	r2,r3,r2
    9040:	10800017 	ldw	r2,0(r2)
    9044:	e0bffe15 	stw	r2,-8(fp)
  
  if (memp != NULL) {
    9048:	e0bffe17 	ldw	r2,-8(fp)
    904c:	10004426 	beq	r2,zero,9160 <memp_malloc+0x17c>
    memp_tab[type] = memp->next;
    9050:	e0bffe17 	ldw	r2,-8(fp)
    9054:	10c00017 	ldw	r3,0(r2)
    9058:	010000f4 	movhi	r4,3
    905c:	211d7e04 	addi	r4,r4,30200
    9060:	e0bfff17 	ldw	r2,-4(fp)
    9064:	1085883a 	add	r2,r2,r2
    9068:	1085883a 	add	r2,r2,r2
    906c:	2085883a 	add	r2,r4,r2
    9070:	10c00015 	stw	r3,0(r2)
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
    9074:	00c00134 	movhi	r3,4
    9078:	18d32304 	addi	r3,r3,19596
    907c:	e0bfff17 	ldw	r2,-4(fp)
    9080:	108002a4 	muli	r2,r2,10
    9084:	1885883a 	add	r2,r3,r2
    9088:	10802d04 	addi	r2,r2,180
    908c:	1080000b 	ldhu	r2,0(r2)
    9090:	10800044 	addi	r2,r2,1
    9094:	1007883a 	mov	r3,r2
    9098:	01000134 	movhi	r4,4
    909c:	21132304 	addi	r4,r4,19596
    90a0:	e0bfff17 	ldw	r2,-4(fp)
    90a4:	108002a4 	muli	r2,r2,10
    90a8:	2085883a 	add	r2,r4,r2
    90ac:	10802d04 	addi	r2,r2,180
    90b0:	10c0000d 	sth	r3,0(r2)
    90b4:	00c00134 	movhi	r3,4
    90b8:	18d32304 	addi	r3,r3,19596
    90bc:	e0bfff17 	ldw	r2,-4(fp)
    90c0:	108002a4 	muli	r2,r2,10
    90c4:	1885883a 	add	r2,r3,r2
    90c8:	10802d84 	addi	r2,r2,182
    90cc:	10c0000b 	ldhu	r3,0(r2)
    90d0:	01000134 	movhi	r4,4
    90d4:	21132304 	addi	r4,r4,19596
    90d8:	e0bfff17 	ldw	r2,-4(fp)
    90dc:	108002a4 	muli	r2,r2,10
    90e0:	2085883a 	add	r2,r4,r2
    90e4:	10802d04 	addi	r2,r2,180
    90e8:	1080000b 	ldhu	r2,0(r2)
    90ec:	18ffffcc 	andi	r3,r3,65535
    90f0:	10bfffcc 	andi	r2,r2,65535
    90f4:	18800e2e 	bgeu	r3,r2,9130 <memp_malloc+0x14c>
    90f8:	00c00134 	movhi	r3,4
    90fc:	18d32304 	addi	r3,r3,19596
    9100:	e0bfff17 	ldw	r2,-4(fp)
    9104:	108002a4 	muli	r2,r2,10
    9108:	1885883a 	add	r2,r3,r2
    910c:	10802d04 	addi	r2,r2,180
    9110:	10c0000b 	ldhu	r3,0(r2)
    9114:	01000134 	movhi	r4,4
    9118:	21132304 	addi	r4,r4,19596
    911c:	e0bfff17 	ldw	r2,-4(fp)
    9120:	108002a4 	muli	r2,r2,10
    9124:	2085883a 	add	r2,r4,r2
    9128:	10802d84 	addi	r2,r2,182
    912c:	10c0000d 	sth	r3,0(r2)
    LWIP_ASSERT("memp_malloc: memp properly aligned",
    9130:	e0bffe17 	ldw	r2,-8(fp)
    9134:	108000cc 	andi	r2,r2,3
    9138:	10001a26 	beq	r2,zero,91a4 <memp_malloc+0x1c0>
    913c:	010000f4 	movhi	r4,3
    9140:	213d1e04 	addi	r4,r4,-2952
    9144:	014000f4 	movhi	r5,3
    9148:	297d3604 	addi	r5,r5,-2856
    914c:	01806804 	movi	r6,416
    9150:	01c000f4 	movhi	r7,3
    9154:	39fd3004 	addi	r7,r7,-2880
    9158:	0017c440 	call	17c44 <printf>
    915c:	003fff06 	br	915c <memp_malloc+0x178>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
    9160:	00c00134 	movhi	r3,4
    9164:	18d32304 	addi	r3,r3,19596
    9168:	e0bfff17 	ldw	r2,-4(fp)
    916c:	108002a4 	muli	r2,r2,10
    9170:	1885883a 	add	r2,r3,r2
    9174:	10802e04 	addi	r2,r2,184
    9178:	1080000b 	ldhu	r2,0(r2)
    917c:	10800044 	addi	r2,r2,1
    9180:	1007883a 	mov	r3,r2
    9184:	01000134 	movhi	r4,4
    9188:	21132304 	addi	r4,r4,19596
    918c:	e0bfff17 	ldw	r2,-4(fp)
    9190:	108002a4 	muli	r2,r2,10
    9194:	2085883a 	add	r2,r4,r2
    9198:	10802e04 	addi	r2,r2,184
    919c:	10c0000d 	sth	r3,0(r2)
    91a0:	00000106 	br	91a8 <memp_malloc+0x1c4>
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
    91a4:	0001883a 	nop
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
    91a8:	e0bffe17 	ldw	r2,-8(fp)
}
    91ac:	e037883a 	mov	sp,fp
    91b0:	dfc00117 	ldw	ra,4(sp)
    91b4:	df000017 	ldw	fp,0(sp)
    91b8:	dec00204 	addi	sp,sp,8
    91bc:	f800283a 	ret

000091c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
    91c0:	defffb04 	addi	sp,sp,-20
    91c4:	dfc00415 	stw	ra,16(sp)
    91c8:	df000315 	stw	fp,12(sp)
    91cc:	df000304 	addi	fp,sp,12
    91d0:	e13ffe15 	stw	r4,-8(fp)
    91d4:	e17fff15 	stw	r5,-4(fp)
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    91d8:	e0bfff17 	ldw	r2,-4(fp)
    91dc:	10003026 	beq	r2,zero,92a0 <memp_free+0xe0>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
    91e0:	e0bfff17 	ldw	r2,-4(fp)
    91e4:	108000cc 	andi	r2,r2,3
    91e8:	10000926 	beq	r2,zero,9210 <memp_free+0x50>
    91ec:	010000f4 	movhi	r4,3
    91f0:	213d1e04 	addi	r4,r4,-2952
    91f4:	014000f4 	movhi	r5,3
    91f8:	297d3f04 	addi	r5,r5,-2820
    91fc:	01806f04 	movi	r6,444
    9200:	01c000f4 	movhi	r7,3
    9204:	39fd3004 	addi	r7,r7,-2880
    9208:	0017c440 	call	17c44 <printf>
    920c:	003fff06 	br	920c <memp_free+0x4c>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
    9210:	e0bfff17 	ldw	r2,-4(fp)
    9214:	e0bffd15 	stw	r2,-12(fp)
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
    9218:	00c00134 	movhi	r3,4
    921c:	18d32304 	addi	r3,r3,19596
    9220:	e0bffe17 	ldw	r2,-8(fp)
    9224:	108002a4 	muli	r2,r2,10
    9228:	1885883a 	add	r2,r3,r2
    922c:	10802d04 	addi	r2,r2,180
    9230:	1080000b 	ldhu	r2,0(r2)
    9234:	10bfffc4 	addi	r2,r2,-1
    9238:	1007883a 	mov	r3,r2
    923c:	01000134 	movhi	r4,4
    9240:	21132304 	addi	r4,r4,19596
    9244:	e0bffe17 	ldw	r2,-8(fp)
    9248:	108002a4 	muli	r2,r2,10
    924c:	2085883a 	add	r2,r4,r2
    9250:	10802d04 	addi	r2,r2,180
    9254:	10c0000d 	sth	r3,0(r2)
  
  memp->next = memp_tab[type]; 
    9258:	00c000f4 	movhi	r3,3
    925c:	18dd7e04 	addi	r3,r3,30200
    9260:	e0bffe17 	ldw	r2,-8(fp)
    9264:	1085883a 	add	r2,r2,r2
    9268:	1085883a 	add	r2,r2,r2
    926c:	1885883a 	add	r2,r3,r2
    9270:	10c00017 	ldw	r3,0(r2)
    9274:	e0bffd17 	ldw	r2,-12(fp)
    9278:	10c00015 	stw	r3,0(r2)
  memp_tab[type] = memp;
    927c:	00c000f4 	movhi	r3,3
    9280:	18dd7e04 	addi	r3,r3,30200
    9284:	e0bffe17 	ldw	r2,-8(fp)
    9288:	1085883a 	add	r2,r2,r2
    928c:	1085883a 	add	r2,r2,r2
    9290:	1885883a 	add	r2,r3,r2
    9294:	e0fffd17 	ldw	r3,-12(fp)
    9298:	10c00015 	stw	r3,0(r2)
    929c:	00000106 	br	92a4 <memp_free+0xe4>
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    return;
    92a0:	0001883a 	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
    92a4:	e037883a 	mov	sp,fp
    92a8:	dfc00117 	ldw	ra,4(sp)
    92ac:	df000017 	ldw	fp,0(sp)
    92b0:	dec00204 	addi	sp,sp,8
    92b4:	f800283a 	ret

000092b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
    92b8:	deffff04 	addi	sp,sp,-4
    92bc:	df000015 	stw	fp,0(sp)
    92c0:	d839883a 	mov	fp,sp
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
    92c4:	e037883a 	mov	sp,fp
    92c8:	df000017 	ldw	fp,0(sp)
    92cc:	dec00104 	addi	sp,sp,4
    92d0:	f800283a 	ret

000092d4 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
    92d4:	defffa04 	addi	sp,sp,-24
    92d8:	dfc00515 	stw	ra,20(sp)
    92dc:	df000415 	stw	fp,16(sp)
    92e0:	df000404 	addi	fp,sp,16
    92e4:	e13ffc15 	stw	r4,-16(fp)
    92e8:	e17ffd15 	stw	r5,-12(fp)
    92ec:	e1bffe15 	stw	r6,-8(fp)
    92f0:	e1ffff15 	stw	r7,-4(fp)

  LWIP_ASSERT("No init function given", init != NULL);
    92f4:	e0800317 	ldw	r2,12(fp)
    92f8:	1000091e 	bne	r2,zero,9320 <netif_add+0x4c>
    92fc:	010000f4 	movhi	r4,3
    9300:	213d4704 	addi	r4,r4,-2788
    9304:	014000f4 	movhi	r5,3
    9308:	297d5104 	addi	r5,r5,-2748
    930c:	018023c4 	movi	r6,143
    9310:	01c000f4 	movhi	r7,3
    9314:	39fd5704 	addi	r7,r7,-2724
    9318:	0017c440 	call	17c44 <printf>
    931c:	003fff06 	br	931c <netif_add+0x48>

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
    9320:	e0bffc17 	ldw	r2,-16(fp)
    9324:	10000115 	stw	zero,4(r2)
  ip_addr_set_zero(&netif->netmask);
    9328:	e0bffc17 	ldw	r2,-16(fp)
    932c:	10000215 	stw	zero,8(r2)
  ip_addr_set_zero(&netif->gw);
    9330:	e0bffc17 	ldw	r2,-16(fp)
    9334:	10000315 	stw	zero,12(r2)
  netif->flags = 0;
    9338:	e0bffc17 	ldw	r2,-16(fp)
    933c:	10000b45 	stb	zero,45(r2)
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
    9340:	e0bffc17 	ldw	r2,-16(fp)
    9344:	10000815 	stw	zero,32(r2)
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
    9348:	e0bffc17 	ldw	r2,-16(fp)
    934c:	e0c00217 	ldw	r3,8(fp)
    9350:	10c00715 	stw	r3,28(r2)
  netif->num = netif_num++;
    9354:	d0a8b103 	ldbu	r2,-23868(gp)
    9358:	e0fffc17 	ldw	r3,-16(fp)
    935c:	18800c05 	stb	r2,48(r3)
    9360:	10800044 	addi	r2,r2,1
    9364:	d0a8b105 	stb	r2,-23868(gp)
  netif->input = input;
    9368:	e0bffc17 	ldw	r2,-16(fp)
    936c:	e0c00417 	ldw	r3,16(fp)
    9370:	10c00415 	stw	r3,16(r2)
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
    9374:	e13ffc17 	ldw	r4,-16(fp)
    9378:	e17ffd17 	ldw	r5,-12(fp)
    937c:	e1bffe17 	ldw	r6,-8(fp)
    9380:	e1ffff17 	ldw	r7,-4(fp)
    9384:	00093d80 	call	93d8 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    9388:	e0800317 	ldw	r2,12(fp)
    938c:	e13ffc17 	ldw	r4,-16(fp)
    9390:	103ee83a 	callr	r2
    9394:	10803fcc 	andi	r2,r2,255
    9398:	1080201c 	xori	r2,r2,128
    939c:	10bfe004 	addi	r2,r2,-128
    93a0:	10000226 	beq	r2,zero,93ac <netif_add+0xd8>
    return NULL;
    93a4:	0005883a 	mov	r2,zero
    93a8:	00000606 	br	93c4 <netif_add+0xf0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
    93ac:	d0e8b217 	ldw	r3,-23864(gp)
    93b0:	e0bffc17 	ldw	r2,-16(fp)
    93b4:	10c00015 	stw	r3,0(r2)
  netif_list = netif;
    93b8:	e0bffc17 	ldw	r2,-16(fp)
    93bc:	d0a8b215 	stw	r2,-23864(gp)
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
    93c0:	e0bffc17 	ldw	r2,-16(fp)
}
    93c4:	e037883a 	mov	sp,fp
    93c8:	dfc00117 	ldw	ra,4(sp)
    93cc:	df000017 	ldw	fp,0(sp)
    93d0:	dec00204 	addi	sp,sp,8
    93d4:	f800283a 	ret

000093d8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
    93d8:	defffa04 	addi	sp,sp,-24
    93dc:	dfc00515 	stw	ra,20(sp)
    93e0:	df000415 	stw	fp,16(sp)
    93e4:	df000404 	addi	fp,sp,16
    93e8:	e13ffc15 	stw	r4,-16(fp)
    93ec:	e17ffd15 	stw	r5,-12(fp)
    93f0:	e1bffe15 	stw	r6,-8(fp)
    93f4:	e1ffff15 	stw	r7,-4(fp)
  netif_set_ipaddr(netif, ipaddr);
    93f8:	e13ffc17 	ldw	r4,-16(fp)
    93fc:	e17ffd17 	ldw	r5,-12(fp)
    9400:	00095e80 	call	95e8 <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
    9404:	e13ffc17 	ldw	r4,-16(fp)
    9408:	e17ffe17 	ldw	r5,-8(fp)
    940c:	00097600 	call	9760 <netif_set_netmask>
  netif_set_gw(netif, gw);
    9410:	e13ffc17 	ldw	r4,-16(fp)
    9414:	e17fff17 	ldw	r5,-4(fp)
    9418:	000971c0 	call	971c <netif_set_gw>
}
    941c:	e037883a 	mov	sp,fp
    9420:	dfc00117 	ldw	ra,4(sp)
    9424:	df000017 	ldw	fp,0(sp)
    9428:	dec00204 	addi	sp,sp,8
    942c:	f800283a 	ret

00009430 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
    9430:	defffc04 	addi	sp,sp,-16
    9434:	dfc00315 	stw	ra,12(sp)
    9438:	df000215 	stw	fp,8(sp)
    943c:	df000204 	addi	fp,sp,8
    9440:	e13fff15 	stw	r4,-4(fp)
  if (netif == NULL) {
    9444:	e0bfff17 	ldw	r2,-4(fp)
    9448:	10002726 	beq	r2,zero,94e8 <netif_remove+0xb8>
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_stop(netif);
  }
#endif /* LWIP_IGMP */
  if (netif_is_up(netif)) {
    944c:	e0bfff17 	ldw	r2,-4(fp)
    9450:	10800b43 	ldbu	r2,45(r2)
    9454:	10803fcc 	andi	r2,r2,255
    9458:	1080004c 	andi	r2,r2,1
    945c:	10000226 	beq	r2,zero,9468 <netif_remove+0x38>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
    9460:	e13fff17 	ldw	r4,-4(fp)
    9464:	000985c0 	call	985c <netif_set_down>
  }

  snmp_delete_ipaddridx_tree(netif);

  /*  is it the first netif? */
  if (netif_list == netif) {
    9468:	d0e8b217 	ldw	r3,-23864(gp)
    946c:	e0bfff17 	ldw	r2,-4(fp)
    9470:	1880041e 	bne	r3,r2,9484 <netif_remove+0x54>
    netif_list = netif->next;
    9474:	e0bfff17 	ldw	r2,-4(fp)
    9478:	10800017 	ldw	r2,0(r2)
    947c:	d0a8b215 	stw	r2,-23864(gp)
    9480:	00001306 	br	94d0 <netif_remove+0xa0>
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
    9484:	d0a8b217 	ldw	r2,-23864(gp)
    9488:	e0bffe15 	stw	r2,-8(fp)
    948c:	00000c06 	br	94c0 <netif_remove+0x90>
      if (tmpNetif->next == netif) {
    9490:	e0bffe17 	ldw	r2,-8(fp)
    9494:	10c00017 	ldw	r3,0(r2)
    9498:	e0bfff17 	ldw	r2,-4(fp)
    949c:	1880051e 	bne	r3,r2,94b4 <netif_remove+0x84>
        tmpNetif->next = netif->next;
    94a0:	e0bfff17 	ldw	r2,-4(fp)
    94a4:	10c00017 	ldw	r3,0(r2)
    94a8:	e0bffe17 	ldw	r2,-8(fp)
    94ac:	10c00015 	stw	r3,0(r2)
        break;
    94b0:	00000506 	br	94c8 <netif_remove+0x98>
  if (netif_list == netif) {
    netif_list = netif->next;
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
    94b4:	e0bffe17 	ldw	r2,-8(fp)
    94b8:	10800017 	ldw	r2,0(r2)
    94bc:	e0bffe15 	stw	r2,-8(fp)
    94c0:	e0bffe17 	ldw	r2,-8(fp)
    94c4:	103ff21e 	bne	r2,zero,9490 <netif_remove+0x60>
      if (tmpNetif->next == netif) {
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
    94c8:	e0bffe17 	ldw	r2,-8(fp)
    94cc:	10000826 	beq	r2,zero,94f0 <netif_remove+0xc0>
      return; /*  we didn't find any netif today */
  }
  snmp_dec_iflist();
  /* this netif is default? */
  if (netif_default == netif) {
    94d0:	d0e8b317 	ldw	r3,-23860(gp)
    94d4:	e0bfff17 	ldw	r2,-4(fp)
    94d8:	1880061e 	bne	r3,r2,94f4 <netif_remove+0xc4>
    /* reset default netif */
    netif_set_default(NULL);
    94dc:	0009883a 	mov	r4,zero
    94e0:	00097a40 	call	97a4 <netif_set_default>
    94e4:	00000306 	br	94f4 <netif_remove+0xc4>
 */
void
netif_remove(struct netif *netif)
{
  if (netif == NULL) {
    return;
    94e8:	0001883a 	nop
    94ec:	00000106 	br	94f4 <netif_remove+0xc4>
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
      return; /*  we didn't find any netif today */
    94f0:	0001883a 	nop
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
    94f4:	e037883a 	mov	sp,fp
    94f8:	dfc00117 	ldw	ra,4(sp)
    94fc:	df000017 	ldw	fp,0(sp)
    9500:	dec00204 	addi	sp,sp,8
    9504:	f800283a 	ret

00009508 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(char *name)
{
    9508:	defffc04 	addi	sp,sp,-16
    950c:	df000315 	stw	fp,12(sp)
    9510:	df000304 	addi	fp,sp,12
    9514:	e13fff15 	stw	r4,-4(fp)
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
    9518:	e0bfff17 	ldw	r2,-4(fp)
    951c:	1000021e 	bne	r2,zero,9528 <netif_find+0x20>
    return NULL;
    9520:	0005883a 	mov	r2,zero
    9524:	00002c06 	br	95d8 <netif_find+0xd0>
  }

  num = name[2] - '0';
    9528:	e0bfff17 	ldw	r2,-4(fp)
    952c:	10800084 	addi	r2,r2,2
    9530:	10800003 	ldbu	r2,0(r2)
    9534:	10bff404 	addi	r2,r2,-48
    9538:	e0bffe05 	stb	r2,-8(fp)

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    953c:	d0a8b217 	ldw	r2,-23864(gp)
    9540:	e0bffd15 	stw	r2,-12(fp)
    9544:	00002106 	br	95cc <netif_find+0xc4>
    if (num == netif->num &&
    9548:	e0bffd17 	ldw	r2,-12(fp)
    954c:	10800c03 	ldbu	r2,48(r2)
    9550:	10c03fcc 	andi	r3,r2,255
    9554:	e0bffe03 	ldbu	r2,-8(fp)
    9558:	1880191e 	bne	r3,r2,95c0 <netif_find+0xb8>
       name[0] == netif->name[0] &&
    955c:	e0bfff17 	ldw	r2,-4(fp)
    9560:	10c00003 	ldbu	r3,0(r2)
    9564:	e0bffd17 	ldw	r2,-12(fp)
    9568:	10800b83 	ldbu	r2,46(r2)
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
    956c:	18c03fcc 	andi	r3,r3,255
    9570:	18c0201c 	xori	r3,r3,128
    9574:	18ffe004 	addi	r3,r3,-128
    9578:	10803fcc 	andi	r2,r2,255
    957c:	1080201c 	xori	r2,r2,128
    9580:	10bfe004 	addi	r2,r2,-128
    9584:	18800e1e 	bne	r3,r2,95c0 <netif_find+0xb8>
       name[0] == netif->name[0] &&
       name[1] == netif->name[1]) {
    9588:	e0bfff17 	ldw	r2,-4(fp)
    958c:	10800044 	addi	r2,r2,1
    9590:	10c00003 	ldbu	r3,0(r2)
    9594:	e0bffd17 	ldw	r2,-12(fp)
    9598:	10800bc3 	ldbu	r2,47(r2)

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
       name[0] == netif->name[0] &&
    959c:	18c03fcc 	andi	r3,r3,255
    95a0:	18c0201c 	xori	r3,r3,128
    95a4:	18ffe004 	addi	r3,r3,-128
    95a8:	10803fcc 	andi	r2,r2,255
    95ac:	1080201c 	xori	r2,r2,128
    95b0:	10bfe004 	addi	r2,r2,-128
    95b4:	1880021e 	bne	r3,r2,95c0 <netif_find+0xb8>
       name[1] == netif->name[1]) {
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
    95b8:	e0bffd17 	ldw	r2,-12(fp)
    95bc:	00000606 	br	95d8 <netif_find+0xd0>
    return NULL;
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    95c0:	e0bffd17 	ldw	r2,-12(fp)
    95c4:	10800017 	ldw	r2,0(r2)
    95c8:	e0bffd15 	stw	r2,-12(fp)
    95cc:	e0bffd17 	ldw	r2,-12(fp)
    95d0:	103fdd1e 	bne	r2,zero,9548 <netif_find+0x40>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
    95d4:	0005883a 	mov	r2,zero
}
    95d8:	e037883a 	mov	sp,fp
    95dc:	df000017 	ldw	fp,0(sp)
    95e0:	dec00104 	addi	sp,sp,4
    95e4:	f800283a 	ret

000095e8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
    95e8:	defff904 	addi	sp,sp,-28
    95ec:	dfc00615 	stw	ra,24(sp)
    95f0:	df000515 	stw	fp,20(sp)
    95f4:	df000504 	addi	fp,sp,20
    95f8:	e13ffe15 	stw	r4,-8(fp)
    95fc:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    9600:	e0bfff17 	ldw	r2,-4(fp)
    9604:	10003826 	beq	r2,zero,96e8 <netif_set_ipaddr+0x100>
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	10c00017 	ldw	r3,0(r2)
    9610:	e0bffe17 	ldw	r2,-8(fp)
    9614:	10800117 	ldw	r2,4(r2)
    9618:	18803326 	beq	r3,r2,96e8 <netif_set_ipaddr+0x100>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    961c:	008000f4 	movhi	r2,3
    9620:	109bdf04 	addi	r2,r2,28540
    9624:	10800017 	ldw	r2,0(r2)
    9628:	e0bffb15 	stw	r2,-20(fp)
    while (pcb != NULL) {
    962c:	00001006 	br	9670 <netif_set_ipaddr+0x88>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
    9630:	e0bffb17 	ldw	r2,-20(fp)
    9634:	10c00017 	ldw	r3,0(r2)
    9638:	e0bffe17 	ldw	r2,-8(fp)
    963c:	10800117 	ldw	r2,4(r2)
    9640:	1880081e 	bne	r3,r2,9664 <netif_set_ipaddr+0x7c>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
    9644:	e0bffb17 	ldw	r2,-20(fp)
    9648:	10800317 	ldw	r2,12(r2)
    964c:	e0bffd15 	stw	r2,-12(fp)
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
    9650:	e13ffb17 	ldw	r4,-20(fp)
    9654:	000bf140 	call	bf14 <tcp_abort>
        pcb = next;
    9658:	e0bffd17 	ldw	r2,-12(fp)
    965c:	e0bffb15 	stw	r2,-20(fp)
    9660:	00000306 	br	9670 <netif_set_ipaddr+0x88>
      } else {
        pcb = pcb->next;
    9664:	e0bffb17 	ldw	r2,-20(fp)
    9668:	10800317 	ldw	r2,12(r2)
    966c:	e0bffb15 	stw	r2,-20(fp)
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
    9670:	e0bffb17 	ldw	r2,-20(fp)
    9674:	103fee1e 	bne	r2,zero,9630 <netif_set_ipaddr+0x48>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    9678:	008000f4 	movhi	r2,3
    967c:	109be104 	addi	r2,r2,28548
    9680:	10800017 	ldw	r2,0(r2)
    9684:	e0bffc15 	stw	r2,-16(fp)
    9688:	00001506 	br	96e0 <netif_set_ipaddr+0xf8>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
    968c:	e0bffc17 	ldw	r2,-16(fp)
    9690:	10001026 	beq	r2,zero,96d4 <netif_set_ipaddr+0xec>
    9694:	e0bffc17 	ldw	r2,-16(fp)
    9698:	10800017 	ldw	r2,0(r2)
    969c:	10000d26 	beq	r2,zero,96d4 <netif_set_ipaddr+0xec>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
    96a0:	e0bffc17 	ldw	r2,-16(fp)
    96a4:	10c00017 	ldw	r3,0(r2)
    96a8:	e0bffe17 	ldw	r2,-8(fp)
    96ac:	10800117 	ldw	r2,4(r2)
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
    96b0:	1880081e 	bne	r3,r2,96d4 <netif_set_ipaddr+0xec>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
    96b4:	e0bfff17 	ldw	r2,-4(fp)
    96b8:	10000326 	beq	r2,zero,96c8 <netif_set_ipaddr+0xe0>
    96bc:	e0bfff17 	ldw	r2,-4(fp)
    96c0:	10800017 	ldw	r2,0(r2)
    96c4:	00000106 	br	96cc <netif_set_ipaddr+0xe4>
    96c8:	0005883a 	mov	r2,zero
    96cc:	e0fffc17 	ldw	r3,-16(fp)
    96d0:	18800015 	stw	r2,0(r3)
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    96d4:	e0bffc17 	ldw	r2,-16(fp)
    96d8:	10800317 	ldw	r2,12(r2)
    96dc:	e0bffc15 	stw	r2,-16(fp)
    96e0:	e0bffc17 	ldw	r2,-16(fp)
    96e4:	103fe91e 	bne	r2,zero,968c <netif_set_ipaddr+0xa4>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
    96e8:	e0bfff17 	ldw	r2,-4(fp)
    96ec:	10000326 	beq	r2,zero,96fc <netif_set_ipaddr+0x114>
    96f0:	e0bfff17 	ldw	r2,-4(fp)
    96f4:	10800017 	ldw	r2,0(r2)
    96f8:	00000106 	br	9700 <netif_set_ipaddr+0x118>
    96fc:	0005883a 	mov	r2,zero
    9700:	e0fffe17 	ldw	r3,-8(fp)
    9704:	18800115 	stw	r2,4(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
    9708:	e037883a 	mov	sp,fp
    970c:	dfc00117 	ldw	ra,4(sp)
    9710:	df000017 	ldw	fp,0(sp)
    9714:	dec00204 	addi	sp,sp,8
    9718:	f800283a 	ret

0000971c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
    971c:	defffd04 	addi	sp,sp,-12
    9720:	df000215 	stw	fp,8(sp)
    9724:	df000204 	addi	fp,sp,8
    9728:	e13ffe15 	stw	r4,-8(fp)
    972c:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&(netif->gw), gw);
    9730:	e0bfff17 	ldw	r2,-4(fp)
    9734:	10000326 	beq	r2,zero,9744 <netif_set_gw+0x28>
    9738:	e0bfff17 	ldw	r2,-4(fp)
    973c:	10800017 	ldw	r2,0(r2)
    9740:	00000106 	br	9748 <netif_set_gw+0x2c>
    9744:	0005883a 	mov	r2,zero
    9748:	e0fffe17 	ldw	r3,-8(fp)
    974c:	18800315 	stw	r2,12(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
    9750:	e037883a 	mov	sp,fp
    9754:	df000017 	ldw	fp,0(sp)
    9758:	dec00104 	addi	sp,sp,4
    975c:	f800283a 	ret

00009760 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
    9760:	defffd04 	addi	sp,sp,-12
    9764:	df000215 	stw	fp,8(sp)
    9768:	df000204 	addi	fp,sp,8
    976c:	e13ffe15 	stw	r4,-8(fp)
    9770:	e17fff15 	stw	r5,-4(fp)
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
    9774:	e0bfff17 	ldw	r2,-4(fp)
    9778:	10000326 	beq	r2,zero,9788 <netif_set_netmask+0x28>
    977c:	e0bfff17 	ldw	r2,-4(fp)
    9780:	10800017 	ldw	r2,0(r2)
    9784:	00000106 	br	978c <netif_set_netmask+0x2c>
    9788:	0005883a 	mov	r2,zero
    978c:	e0fffe17 	ldw	r3,-8(fp)
    9790:	18800215 	stw	r2,8(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
    9794:	e037883a 	mov	sp,fp
    9798:	df000017 	ldw	fp,0(sp)
    979c:	dec00104 	addi	sp,sp,4
    97a0:	f800283a 	ret

000097a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
    97a4:	defffe04 	addi	sp,sp,-8
    97a8:	df000115 	stw	fp,4(sp)
    97ac:	df000104 	addi	fp,sp,4
    97b0:	e13fff15 	stw	r4,-4(fp)
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
    97b4:	e0bfff17 	ldw	r2,-4(fp)
    97b8:	d0a8b315 	stw	r2,-23860(gp)
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
    97bc:	e037883a 	mov	sp,fp
    97c0:	df000017 	ldw	fp,0(sp)
    97c4:	dec00104 	addi	sp,sp,4
    97c8:	f800283a 	ret

000097cc <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
    97cc:	defffd04 	addi	sp,sp,-12
    97d0:	dfc00215 	stw	ra,8(sp)
    97d4:	df000115 	stw	fp,4(sp)
    97d8:	df000104 	addi	fp,sp,4
    97dc:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_UP)) {
    97e0:	e0bfff17 	ldw	r2,-4(fp)
    97e4:	10800b43 	ldbu	r2,45(r2)
    97e8:	10803fcc 	andi	r2,r2,255
    97ec:	1080004c 	andi	r2,r2,1
    97f0:	1000151e 	bne	r2,zero,9848 <netif_set_up+0x7c>
    netif->flags |= NETIF_FLAG_UP;
    97f4:	e0bfff17 	ldw	r2,-4(fp)
    97f8:	10800b43 	ldbu	r2,45(r2)
    97fc:	10800054 	ori	r2,r2,1
    9800:	1007883a 	mov	r3,r2
    9804:	e0bfff17 	ldw	r2,-4(fp)
    9808:	10c00b45 	stb	r3,45(r2)
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
    980c:	e0bfff17 	ldw	r2,-4(fp)
    9810:	10800b43 	ldbu	r2,45(r2)
    9814:	10803fcc 	andi	r2,r2,255
    9818:	1080040c 	andi	r2,r2,16
    981c:	10000a26 	beq	r2,zero,9848 <netif_set_up+0x7c>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
    9820:	e0bfff17 	ldw	r2,-4(fp)
    9824:	10800b43 	ldbu	r2,45(r2)
    9828:	10803fcc 	andi	r2,r2,255
    982c:	1080080c 	andi	r2,r2,32
    9830:	10000526 	beq	r2,zero,9848 <netif_set_up+0x7c>
        etharp_gratuitous(netif);
    9834:	e0bfff17 	ldw	r2,-4(fp)
    9838:	10800104 	addi	r2,r2,4
    983c:	e13fff17 	ldw	r4,-4(fp)
    9840:	100b883a 	mov	r5,r2
    9844:	00173f80 	call	173f8 <etharp_request>
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
    9848:	e037883a 	mov	sp,fp
    984c:	dfc00117 	ldw	ra,4(sp)
    9850:	df000017 	ldw	fp,0(sp)
    9854:	dec00204 	addi	sp,sp,8
    9858:	f800283a 	ret

0000985c <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
    985c:	defffd04 	addi	sp,sp,-12
    9860:	dfc00215 	stw	ra,8(sp)
    9864:	df000115 	stw	fp,4(sp)
    9868:	df000104 	addi	fp,sp,4
    986c:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_UP) {
    9870:	e0bfff17 	ldw	r2,-4(fp)
    9874:	10800b43 	ldbu	r2,45(r2)
    9878:	10803fcc 	andi	r2,r2,255
    987c:	1080004c 	andi	r2,r2,1
    9880:	10000e26 	beq	r2,zero,98bc <netif_set_down+0x60>
    netif->flags &= ~NETIF_FLAG_UP;
    9884:	e0bfff17 	ldw	r2,-4(fp)
    9888:	10c00b43 	ldbu	r3,45(r2)
    988c:	00bfff84 	movi	r2,-2
    9890:	1884703a 	and	r2,r3,r2
    9894:	1007883a 	mov	r3,r2
    9898:	e0bfff17 	ldw	r2,-4(fp)
    989c:	10c00b45 	stb	r3,45(r2)
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
    98a0:	e0bfff17 	ldw	r2,-4(fp)
    98a4:	10800b43 	ldbu	r2,45(r2)
    98a8:	10803fcc 	andi	r2,r2,255
    98ac:	1080080c 	andi	r2,r2,32
    98b0:	10000226 	beq	r2,zero,98bc <netif_set_down+0x60>
      etharp_cleanup_netif(netif);
    98b4:	e13fff17 	ldw	r4,-4(fp)
    98b8:	00162640 	call	16264 <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
    98bc:	e037883a 	mov	sp,fp
    98c0:	dfc00117 	ldw	ra,4(sp)
    98c4:	df000017 	ldw	fp,0(sp)
    98c8:	dec00204 	addi	sp,sp,8
    98cc:	f800283a 	ret

000098d0 <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
    98d0:	defffd04 	addi	sp,sp,-12
    98d4:	dfc00215 	stw	ra,8(sp)
    98d8:	df000115 	stw	fp,4(sp)
    98dc:	df000104 	addi	fp,sp,4
    98e0:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
    98e4:	e0bfff17 	ldw	r2,-4(fp)
    98e8:	10800b43 	ldbu	r2,45(r2)
    98ec:	10803fcc 	andi	r2,r2,255
    98f0:	1080040c 	andi	r2,r2,16
    98f4:	10001a1e 	bne	r2,zero,9960 <netif_set_link_up+0x90>
    netif->flags |= NETIF_FLAG_LINK_UP;
    98f8:	e0bfff17 	ldw	r2,-4(fp)
    98fc:	10800b43 	ldbu	r2,45(r2)
    9900:	10800414 	ori	r2,r2,16
    9904:	1007883a 	mov	r3,r2
    9908:	e0bfff17 	ldw	r2,-4(fp)
    990c:	10c00b45 	stb	r3,45(r2)

#if LWIP_DHCP
    if (netif->dhcp) {
    9910:	e0bfff17 	ldw	r2,-4(fp)
    9914:	10800817 	ldw	r2,32(r2)
    9918:	10000226 	beq	r2,zero,9924 <netif_set_link_up+0x54>
      dhcp_network_changed(netif);
    991c:	e13fff17 	ldw	r4,-4(fp)
    9920:	00028d40 	call	28d4 <dhcp_network_changed>
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
    9924:	e0bfff17 	ldw	r2,-4(fp)
    9928:	10800b43 	ldbu	r2,45(r2)
    992c:	10803fcc 	andi	r2,r2,255
    9930:	1080004c 	andi	r2,r2,1
    9934:	10000a26 	beq	r2,zero,9960 <netif_set_link_up+0x90>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
    9938:	e0bfff17 	ldw	r2,-4(fp)
    993c:	10800b43 	ldbu	r2,45(r2)
    9940:	10803fcc 	andi	r2,r2,255
    9944:	1080080c 	andi	r2,r2,32
    9948:	10000526 	beq	r2,zero,9960 <netif_set_link_up+0x90>
        etharp_gratuitous(netif);
    994c:	e0bfff17 	ldw	r2,-4(fp)
    9950:	10800104 	addi	r2,r2,4
    9954:	e13fff17 	ldw	r4,-4(fp)
    9958:	100b883a 	mov	r5,r2
    995c:	00173f80 	call	173f8 <etharp_request>
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
    9960:	e037883a 	mov	sp,fp
    9964:	dfc00117 	ldw	ra,4(sp)
    9968:	df000017 	ldw	fp,0(sp)
    996c:	dec00204 	addi	sp,sp,8
    9970:	f800283a 	ret

00009974 <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
    9974:	defffe04 	addi	sp,sp,-8
    9978:	df000115 	stw	fp,4(sp)
    997c:	df000104 	addi	fp,sp,4
    9980:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_LINK_UP) {
    9984:	e0bfff17 	ldw	r2,-4(fp)
    9988:	10800b43 	ldbu	r2,45(r2)
    998c:	10803fcc 	andi	r2,r2,255
    9990:	1080040c 	andi	r2,r2,16
    9994:	10000726 	beq	r2,zero,99b4 <netif_set_link_down+0x40>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
    9998:	e0bfff17 	ldw	r2,-4(fp)
    999c:	10c00b43 	ldbu	r3,45(r2)
    99a0:	00bffbc4 	movi	r2,-17
    99a4:	1884703a 	and	r2,r3,r2
    99a8:	1007883a 	mov	r3,r2
    99ac:	e0bfff17 	ldw	r2,-4(fp)
    99b0:	10c00b45 	stb	r3,45(r2)
    NETIF_LINK_CALLBACK(netif);
  }
}
    99b4:	e037883a 	mov	sp,fp
    99b8:	df000017 	ldw	fp,0(sp)
    99bc:	dec00104 	addi	sp,sp,4
    99c0:	f800283a 	ret

000099c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
    99c4:	defffd04 	addi	sp,sp,-12
    99c8:	dfc00215 	stw	ra,8(sp)
    99cc:	df000115 	stw	fp,4(sp)
    99d0:	df000104 	addi	fp,sp,4
  struct tcp_pcb* pcb;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 0;
    99d4:	d028b405 	stb	zero,-23856(gp)
  SYS_ARCH_UNPROTECT(old_level);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    99d8:	008000f4 	movhi	r2,3
    99dc:	109bdf04 	addi	r2,r2,28540
    99e0:	10800017 	ldw	r2,0(r2)
    99e4:	e0bfff15 	stw	r2,-4(fp)
    99e8:	00000d06 	br	9a20 <pbuf_free_ooseq+0x5c>
    if (NULL != pcb->ooseq) {
    99ec:	e0bfff17 	ldw	r2,-4(fp)
    99f0:	10801e17 	ldw	r2,120(r2)
    99f4:	10000726 	beq	r2,zero,9a14 <pbuf_free_ooseq+0x50>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
    99f8:	e0bfff17 	ldw	r2,-4(fp)
    99fc:	10801e17 	ldw	r2,120(r2)
    9a00:	1009883a 	mov	r4,r2
    9a04:	000d3a40 	call	d3a4 <tcp_segs_free>
      pcb->ooseq = NULL;
    9a08:	e0bfff17 	ldw	r2,-4(fp)
    9a0c:	10001e15 	stw	zero,120(r2)
      return;
    9a10:	00000506 	br	9a28 <pbuf_free_ooseq+0x64>

  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 0;
  SYS_ARCH_UNPROTECT(old_level);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    9a14:	e0bfff17 	ldw	r2,-4(fp)
    9a18:	10800317 	ldw	r2,12(r2)
    9a1c:	e0bfff15 	stw	r2,-4(fp)
    9a20:	e0bfff17 	ldw	r2,-4(fp)
    9a24:	103ff11e 	bne	r2,zero,99ec <pbuf_free_ooseq+0x28>
      tcp_segs_free(pcb->ooseq);
      pcb->ooseq = NULL;
      return;
    }
  }
}
    9a28:	e037883a 	mov	sp,fp
    9a2c:	dfc00117 	ldw	ra,4(sp)
    9a30:	df000017 	ldw	fp,0(sp)
    9a34:	dec00204 	addi	sp,sp,8
    9a38:	f800283a 	ret

00009a3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
    9a3c:	deffff04 	addi	sp,sp,-4
    9a40:	df000015 	stw	fp,0(sp)
    9a44:	d839883a 	mov	fp,sp
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
    9a48:	00800044 	movi	r2,1
    9a4c:	d0a8b405 	stb	r2,-23856(gp)
  if(!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
    9a50:	e037883a 	mov	sp,fp
    9a54:	df000017 	ldw	fp,0(sp)
    9a58:	dec00104 	addi	sp,sp,4
    9a5c:	f800283a 	ret

00009a60 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
    9a60:	defff604 	addi	sp,sp,-40
    9a64:	dfc00915 	stw	ra,36(sp)
    9a68:	df000815 	stw	fp,32(sp)
    9a6c:	df000804 	addi	fp,sp,32
    9a70:	e13ffd15 	stw	r4,-12(fp)
    9a74:	2805883a 	mov	r2,r5
    9a78:	e1bfff15 	stw	r6,-4(fp)
    9a7c:	e0bffe0d 	sth	r2,-8(fp)
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
    9a80:	e0bffd17 	ldw	r2,-12(fp)
    9a84:	10c00060 	cmpeqi	r3,r2,1
    9a88:	1800091e 	bne	r3,zero,9ab0 <pbuf_alloc+0x50>
    9a8c:	0080052e 	bgeu	zero,r2,9aa4 <pbuf_alloc+0x44>
    9a90:	10c000a0 	cmpeqi	r3,r2,2
    9a94:	1800091e 	bne	r3,zero,9abc <pbuf_alloc+0x5c>
    9a98:	108000e0 	cmpeqi	r2,r2,3
    9a9c:	10000a1e 	bne	r2,zero,9ac8 <pbuf_alloc+0x68>
    9aa0:	00000b06 	br	9ad0 <pbuf_alloc+0x70>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    9aa4:	00800d84 	movi	r2,54
    9aa8:	e0bffa0d 	sth	r2,-24(fp)
    break;
    9aac:	00001106 	br	9af4 <pbuf_alloc+0x94>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
    9ab0:	00800884 	movi	r2,34
    9ab4:	e0bffa0d 	sth	r2,-24(fp)
    break;
    9ab8:	00000e06 	br	9af4 <pbuf_alloc+0x94>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
    9abc:	00800384 	movi	r2,14
    9ac0:	e0bffa0d 	sth	r2,-24(fp)
    break;
    9ac4:	00000b06 	br	9af4 <pbuf_alloc+0x94>
  case PBUF_RAW:
    offset = 0;
    9ac8:	e03ffa0d 	sth	zero,-24(fp)
    break;
    9acc:	00000906 	br	9af4 <pbuf_alloc+0x94>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    9ad0:	010000f4 	movhi	r4,3
    9ad4:	213d5d04 	addi	r4,r4,-2700
    9ad8:	014000f4 	movhi	r5,3
    9adc:	297d6704 	addi	r5,r5,-2660
    9ae0:	01803a04 	movi	r6,232
    9ae4:	01c000f4 	movhi	r7,3
    9ae8:	39fd6e04 	addi	r7,r7,-2632
    9aec:	0017c440 	call	17c44 <printf>
    9af0:	003fff06 	br	9af0 <pbuf_alloc+0x90>
    return NULL;
  }

  switch (type) {
    9af4:	e0bfff17 	ldw	r2,-4(fp)
    9af8:	10c000e8 	cmpgeui	r3,r2,3
    9afc:	1800021e 	bne	r3,zero,9b08 <pbuf_alloc+0xa8>
    9b00:	0080fc36 	bltu	zero,r2,9ef4 <pbuf_alloc+0x494>
    9b04:	0000c306 	br	9e14 <pbuf_alloc+0x3b4>
    9b08:	108000e0 	cmpeqi	r2,r2,3
    9b0c:	10011026 	beq	r2,zero,9f50 <pbuf_alloc+0x4f0>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    9b10:	01000204 	movi	r4,8
    9b14:	0008fe40 	call	8fe4 <memp_malloc>
    9b18:	e0bff815 	stw	r2,-32(fp)
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
    9b1c:	e0bff817 	ldw	r2,-32(fp)
    9b20:	1000031e 	bne	r2,zero,9b30 <pbuf_alloc+0xd0>
      PBUF_POOL_IS_EMPTY();
    9b24:	0009a3c0 	call	9a3c <pbuf_pool_is_empty>
      return NULL;
    9b28:	0005883a 	mov	r2,zero
    9b2c:	00011806 	br	9f90 <pbuf_alloc+0x530>
    }
    p->type = type;
    9b30:	e0bfff17 	ldw	r2,-4(fp)
    9b34:	1007883a 	mov	r3,r2
    9b38:	e0bff817 	ldw	r2,-32(fp)
    9b3c:	10c00305 	stb	r3,12(r2)
    p->next = NULL;
    9b40:	e0bff817 	ldw	r2,-32(fp)
    9b44:	10000015 	stw	zero,0(r2)

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    9b48:	e0bffa0b 	ldhu	r2,-24(fp)
    9b4c:	10800404 	addi	r2,r2,16
    9b50:	e0fff817 	ldw	r3,-32(fp)
    9b54:	1885883a 	add	r2,r3,r2
    9b58:	10c000c4 	addi	r3,r2,3
    9b5c:	00bfff04 	movi	r2,-4
    9b60:	1884703a 	and	r2,r3,r2
    9b64:	1007883a 	mov	r3,r2
    9b68:	e0bff817 	ldw	r2,-32(fp)
    9b6c:	10c00115 	stw	r3,4(r2)
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
    9b70:	e0bff817 	ldw	r2,-32(fp)
    9b74:	10800117 	ldw	r2,4(r2)
    9b78:	108000cc 	andi	r2,r2,3
    9b7c:	10000926 	beq	r2,zero,9ba4 <pbuf_alloc+0x144>
    9b80:	010000f4 	movhi	r4,3
    9b84:	213d5d04 	addi	r4,r4,-2700
    9b88:	014000f4 	movhi	r5,3
    9b8c:	297d7404 	addi	r5,r5,-2608
    9b90:	01803ec4 	movi	r6,251
    9b94:	01c000f4 	movhi	r7,3
    9b98:	39fd6e04 	addi	r7,r7,-2632
    9b9c:	0017c440 	call	17c44 <printf>
    9ba0:	003fff06 	br	9ba0 <pbuf_alloc+0x140>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    9ba4:	e0bff817 	ldw	r2,-32(fp)
    9ba8:	e0fffe0b 	ldhu	r3,-8(fp)
    9bac:	10c0020d 	sth	r3,8(r2)
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
    9bb0:	e0bffa0b 	ldhu	r2,-24(fp)
    9bb4:	10c000c4 	addi	r3,r2,3
    9bb8:	00bfff04 	movi	r2,-4
    9bbc:	1884703a 	and	r2,r3,r2
    9bc0:	00c17b04 	movi	r3,1516
    9bc4:	1885c83a 	sub	r2,r3,r2
    9bc8:	e0fffe0b 	ldhu	r3,-8(fp)
    9bcc:	1880010e 	bge	r3,r2,9bd4 <pbuf_alloc+0x174>
    9bd0:	1805883a 	mov	r2,r3
    9bd4:	1007883a 	mov	r3,r2
    9bd8:	e0bff817 	ldw	r2,-32(fp)
    9bdc:	10c0028d 	sth	r3,10(r2)
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
    9be0:	e0bff817 	ldw	r2,-32(fp)
    9be4:	10c00117 	ldw	r3,4(r2)
    9be8:	e0bff817 	ldw	r2,-32(fp)
    9bec:	1080028b 	ldhu	r2,10(r2)
    9bf0:	10bfffcc 	andi	r2,r2,65535
    9bf4:	1885883a 	add	r2,r3,r2
    9bf8:	e0fff817 	ldw	r3,-32(fp)
    9bfc:	18c17f04 	addi	r3,r3,1532
    9c00:	1880092e 	bgeu	r3,r2,9c28 <pbuf_alloc+0x1c8>
    9c04:	010000f4 	movhi	r4,3
    9c08:	213d5d04 	addi	r4,r4,-2700
    9c0c:	014000f4 	movhi	r5,3
    9c10:	297d8004 	addi	r5,r5,-2560
    9c14:	01804084 	movi	r6,258
    9c18:	01c000f4 	movhi	r7,3
    9c1c:	39fd6e04 	addi	r7,r7,-2632
    9c20:	0017c440 	call	17c44 <printf>
    9c24:	003fff06 	br	9c24 <pbuf_alloc+0x1c4>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
    9c28:	e0bffa0b 	ldhu	r2,-24(fp)
    9c2c:	10c000c4 	addi	r3,r2,3
    9c30:	00bfff04 	movi	r2,-4
    9c34:	1884703a 	and	r2,r3,r2
    9c38:	00c17b04 	movi	r3,1516
    9c3c:	1885c83a 	sub	r2,r3,r2
    9c40:	00800916 	blt	zero,r2,9c68 <pbuf_alloc+0x208>
    9c44:	010000f4 	movhi	r4,3
    9c48:	213d5d04 	addi	r4,r4,-2700
    9c4c:	014000f4 	movhi	r5,3
    9c50:	297d8d04 	addi	r5,r5,-2508
    9c54:	01804104 	movi	r6,260
    9c58:	01c000f4 	movhi	r7,3
    9c5c:	39fd6e04 	addi	r7,r7,-2632
    9c60:	0017c440 	call	17c44 <printf>
    9c64:	003fff06 	br	9c64 <pbuf_alloc+0x204>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
    9c68:	e0bff817 	ldw	r2,-32(fp)
    9c6c:	00c00044 	movi	r3,1
    9c70:	10c0038d 	sth	r3,14(r2)

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    9c74:	e0bff817 	ldw	r2,-32(fp)
    9c78:	e0bff915 	stw	r2,-28(fp)
    /* remaining length to be allocated */
    rem_len = length - p->len;
    9c7c:	e0fffe0b 	ldhu	r3,-8(fp)
    9c80:	e0bff817 	ldw	r2,-32(fp)
    9c84:	1080028b 	ldhu	r2,10(r2)
    9c88:	10bfffcc 	andi	r2,r2,65535
    9c8c:	1885c83a 	sub	r2,r3,r2
    9c90:	e0bffb15 	stw	r2,-20(fp)
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
    9c94:	00005c06 	br	9e08 <pbuf_alloc+0x3a8>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    9c98:	01000204 	movi	r4,8
    9c9c:	0008fe40 	call	8fe4 <memp_malloc>
    9ca0:	e0bffc15 	stw	r2,-16(fp)
      if (q == NULL) {
    9ca4:	e0bffc17 	ldw	r2,-16(fp)
    9ca8:	1000051e 	bne	r2,zero,9cc0 <pbuf_alloc+0x260>
        PBUF_POOL_IS_EMPTY();
    9cac:	0009a3c0 	call	9a3c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
    9cb0:	e13ff817 	ldw	r4,-32(fp)
    9cb4:	000a4200 	call	a420 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
    9cb8:	0005883a 	mov	r2,zero
    9cbc:	0000b406 	br	9f90 <pbuf_alloc+0x530>
      }
      q->type = type;
    9cc0:	e0bfff17 	ldw	r2,-4(fp)
    9cc4:	1007883a 	mov	r3,r2
    9cc8:	e0bffc17 	ldw	r2,-16(fp)
    9ccc:	10c00305 	stb	r3,12(r2)
      q->flags = 0;
    9cd0:	e0bffc17 	ldw	r2,-16(fp)
    9cd4:	10000345 	stb	zero,13(r2)
      q->next = NULL;
    9cd8:	e0bffc17 	ldw	r2,-16(fp)
    9cdc:	10000015 	stw	zero,0(r2)
      /* make previous pbuf point to this pbuf */
      r->next = q;
    9ce0:	e0bff917 	ldw	r2,-28(fp)
    9ce4:	e0fffc17 	ldw	r3,-16(fp)
    9ce8:	10c00015 	stw	r3,0(r2)
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
    9cec:	e0bffb17 	ldw	r2,-20(fp)
    9cf0:	00ffff94 	movui	r3,65534
    9cf4:	1880090e 	bge	r3,r2,9d1c <pbuf_alloc+0x2bc>
    9cf8:	010000f4 	movhi	r4,3
    9cfc:	213d5d04 	addi	r4,r4,-2700
    9d00:	014000f4 	movhi	r5,3
    9d04:	297d9a04 	addi	r5,r5,-2456
    9d08:	01804784 	movi	r6,286
    9d0c:	01c000f4 	movhi	r7,3
    9d10:	39fd6e04 	addi	r7,r7,-2632
    9d14:	0017c440 	call	17c44 <printf>
    9d18:	003fff06 	br	9d18 <pbuf_alloc+0x2b8>
      q->tot_len = (u16_t)rem_len;
    9d1c:	e0bffb17 	ldw	r2,-20(fp)
    9d20:	1007883a 	mov	r3,r2
    9d24:	e0bffc17 	ldw	r2,-16(fp)
    9d28:	10c0020d 	sth	r3,8(r2)
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
    9d2c:	e0bffb17 	ldw	r2,-20(fp)
    9d30:	10bfffcc 	andi	r2,r2,65535
    9d34:	10817b28 	cmpgeui	r2,r2,1516
    9d38:	1000021e 	bne	r2,zero,9d44 <pbuf_alloc+0x2e4>
    9d3c:	e0bffb17 	ldw	r2,-20(fp)
    9d40:	00000106 	br	9d48 <pbuf_alloc+0x2e8>
    9d44:	00817b04 	movi	r2,1516
    9d48:	e0fffc17 	ldw	r3,-16(fp)
    9d4c:	1880028d 	sth	r2,10(r3)
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
    9d50:	e0bffc17 	ldw	r2,-16(fp)
    9d54:	10c00404 	addi	r3,r2,16
    9d58:	e0bffc17 	ldw	r2,-16(fp)
    9d5c:	10c00115 	stw	r3,4(r2)
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
    9d60:	e0bffc17 	ldw	r2,-16(fp)
    9d64:	10800117 	ldw	r2,4(r2)
    9d68:	108000cc 	andi	r2,r2,3
    9d6c:	10000926 	beq	r2,zero,9d94 <pbuf_alloc+0x334>
    9d70:	010000f4 	movhi	r4,3
    9d74:	213d5d04 	addi	r4,r4,-2700
    9d78:	014000f4 	movhi	r5,3
    9d7c:	297d9f04 	addi	r5,r5,-2436
    9d80:	01804904 	movi	r6,292
    9d84:	01c000f4 	movhi	r7,3
    9d88:	39fd6e04 	addi	r7,r7,-2632
    9d8c:	0017c440 	call	17c44 <printf>
    9d90:	003fff06 	br	9d90 <pbuf_alloc+0x330>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
    9d94:	e0bff817 	ldw	r2,-32(fp)
    9d98:	10c00117 	ldw	r3,4(r2)
    9d9c:	e0bff817 	ldw	r2,-32(fp)
    9da0:	1080028b 	ldhu	r2,10(r2)
    9da4:	10bfffcc 	andi	r2,r2,65535
    9da8:	1885883a 	add	r2,r3,r2
    9dac:	e0fff817 	ldw	r3,-32(fp)
    9db0:	18c17f04 	addi	r3,r3,1532
    9db4:	1880092e 	bgeu	r3,r2,9ddc <pbuf_alloc+0x37c>
    9db8:	010000f4 	movhi	r4,3
    9dbc:	213d5d04 	addi	r4,r4,-2700
    9dc0:	014000f4 	movhi	r5,3
    9dc4:	297d8004 	addi	r5,r5,-2560
    9dc8:	018049c4 	movi	r6,295
    9dcc:	01c000f4 	movhi	r7,3
    9dd0:	39fd6e04 	addi	r7,r7,-2632
    9dd4:	0017c440 	call	17c44 <printf>
    9dd8:	003fff06 	br	9dd8 <pbuf_alloc+0x378>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
    9ddc:	e0bffc17 	ldw	r2,-16(fp)
    9de0:	00c00044 	movi	r3,1
    9de4:	10c0038d 	sth	r3,14(r2)
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
    9de8:	e0bffc17 	ldw	r2,-16(fp)
    9dec:	1080028b 	ldhu	r2,10(r2)
    9df0:	10bfffcc 	andi	r2,r2,65535
    9df4:	e0fffb17 	ldw	r3,-20(fp)
    9df8:	1885c83a 	sub	r2,r3,r2
    9dfc:	e0bffb15 	stw	r2,-20(fp)
      /* remember this pbuf for linkage in next iteration */
      r = q;
    9e00:	e0bffc17 	ldw	r2,-16(fp)
    9e04:	e0bff915 	stw	r2,-28(fp)
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
    9e08:	e0bffb17 	ldw	r2,-20(fp)
    9e0c:	00bfa216 	blt	zero,r2,9c98 <pbuf_alloc+0x238>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
    9e10:	00005906 	br	9f78 <pbuf_alloc+0x518>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    9e14:	e0bffa0b 	ldhu	r2,-24(fp)
    9e18:	108004c4 	addi	r2,r2,19
    9e1c:	1007883a 	mov	r3,r2
    9e20:	00bfff04 	movi	r2,-4
    9e24:	1884703a 	and	r2,r3,r2
    9e28:	1007883a 	mov	r3,r2
    9e2c:	e0bffe0b 	ldhu	r2,-8(fp)
    9e30:	108000c4 	addi	r2,r2,3
    9e34:	1009883a 	mov	r4,r2
    9e38:	00bfff04 	movi	r2,-4
    9e3c:	2084703a 	and	r2,r4,r2
    9e40:	1885883a 	add	r2,r3,r2
    9e44:	10bfffcc 	andi	r2,r2,65535
    9e48:	1009883a 	mov	r4,r2
    9e4c:	00089b80 	call	89b8 <mem_malloc>
    9e50:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
    9e54:	e0bff817 	ldw	r2,-32(fp)
    9e58:	1000021e 	bne	r2,zero,9e64 <pbuf_alloc+0x404>
      return NULL;
    9e5c:	0005883a 	mov	r2,zero
    9e60:	00004b06 	br	9f90 <pbuf_alloc+0x530>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
    9e64:	e0bffa0b 	ldhu	r2,-24(fp)
    9e68:	10800404 	addi	r2,r2,16
    9e6c:	e0fff817 	ldw	r3,-32(fp)
    9e70:	1885883a 	add	r2,r3,r2
    9e74:	10c000c4 	addi	r3,r2,3
    9e78:	00bfff04 	movi	r2,-4
    9e7c:	1884703a 	and	r2,r3,r2
    9e80:	1007883a 	mov	r3,r2
    9e84:	e0bff817 	ldw	r2,-32(fp)
    9e88:	10c00115 	stw	r3,4(r2)
    p->len = p->tot_len = length;
    9e8c:	e0bff817 	ldw	r2,-32(fp)
    9e90:	e0fffe0b 	ldhu	r3,-8(fp)
    9e94:	10c0020d 	sth	r3,8(r2)
    9e98:	e0bff817 	ldw	r2,-32(fp)
    9e9c:	10c0020b 	ldhu	r3,8(r2)
    9ea0:	e0bff817 	ldw	r2,-32(fp)
    9ea4:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
    9ea8:	e0bff817 	ldw	r2,-32(fp)
    9eac:	10000015 	stw	zero,0(r2)
    p->type = type;
    9eb0:	e0bfff17 	ldw	r2,-4(fp)
    9eb4:	1007883a 	mov	r3,r2
    9eb8:	e0bff817 	ldw	r2,-32(fp)
    9ebc:	10c00305 	stb	r3,12(r2)

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
    9ec0:	e0bff817 	ldw	r2,-32(fp)
    9ec4:	10800117 	ldw	r2,4(r2)
    9ec8:	108000cc 	andi	r2,r2,3
    9ecc:	10002926 	beq	r2,zero,9f74 <pbuf_alloc+0x514>
    9ed0:	010000f4 	movhi	r4,3
    9ed4:	213d5d04 	addi	r4,r4,-2700
    9ed8:	014000f4 	movhi	r5,3
    9edc:	297dab04 	addi	r5,r5,-2388
    9ee0:	01804fc4 	movi	r6,319
    9ee4:	01c000f4 	movhi	r7,3
    9ee8:	39fd6e04 	addi	r7,r7,-2632
    9eec:	0017c440 	call	17c44 <printf>
    9ef0:	003fff06 	br	9ef0 <pbuf_alloc+0x490>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    9ef4:	010001c4 	movi	r4,7
    9ef8:	0008fe40 	call	8fe4 <memp_malloc>
    9efc:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
    9f00:	e0bff817 	ldw	r2,-32(fp)
    9f04:	1000021e 	bne	r2,zero,9f10 <pbuf_alloc+0x4b0>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    9f08:	0005883a 	mov	r2,zero
    9f0c:	00002006 	br	9f90 <pbuf_alloc+0x530>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
    9f10:	e0bff817 	ldw	r2,-32(fp)
    9f14:	10000115 	stw	zero,4(r2)
    p->len = p->tot_len = length;
    9f18:	e0bff817 	ldw	r2,-32(fp)
    9f1c:	e0fffe0b 	ldhu	r3,-8(fp)
    9f20:	10c0020d 	sth	r3,8(r2)
    9f24:	e0bff817 	ldw	r2,-32(fp)
    9f28:	10c0020b 	ldhu	r3,8(r2)
    9f2c:	e0bff817 	ldw	r2,-32(fp)
    9f30:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
    9f34:	e0bff817 	ldw	r2,-32(fp)
    9f38:	10000015 	stw	zero,0(r2)
    p->type = type;
    9f3c:	e0bfff17 	ldw	r2,-4(fp)
    9f40:	1007883a 	mov	r3,r2
    9f44:	e0bff817 	ldw	r2,-32(fp)
    9f48:	10c00305 	stb	r3,12(r2)
    break;
    9f4c:	00000a06 	br	9f78 <pbuf_alloc+0x518>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    9f50:	010000f4 	movhi	r4,3
    9f54:	213d5d04 	addi	r4,r4,-2700
    9f58:	014000f4 	movhi	r5,3
    9f5c:	297db604 	addi	r5,r5,-2344
    9f60:	01805504 	movi	r6,340
    9f64:	01c000f4 	movhi	r7,3
    9f68:	39fd6e04 	addi	r7,r7,-2632
    9f6c:	0017c440 	call	17c44 <printf>
    9f70:	003fff06 	br	9f70 <pbuf_alloc+0x510>
    p->next = NULL;
    p->type = type;

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
    9f74:	0001883a 	nop
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
    9f78:	e0bff817 	ldw	r2,-32(fp)
    9f7c:	00c00044 	movi	r3,1
    9f80:	10c0038d 	sth	r3,14(r2)
  /* set flags */
  p->flags = 0;
    9f84:	e0bff817 	ldw	r2,-32(fp)
    9f88:	10000345 	stb	zero,13(r2)
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
    9f8c:	e0bff817 	ldw	r2,-32(fp)
}
    9f90:	e037883a 	mov	sp,fp
    9f94:	dfc00117 	ldw	ra,4(sp)
    9f98:	df000017 	ldw	fp,0(sp)
    9f9c:	dec00204 	addi	sp,sp,8
    9fa0:	f800283a 	ret

00009fa4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
    9fa4:	defff904 	addi	sp,sp,-28
    9fa8:	dfc00615 	stw	ra,24(sp)
    9fac:	df000515 	stw	fp,20(sp)
    9fb0:	df000504 	addi	fp,sp,20
    9fb4:	e13ffe15 	stw	r4,-8(fp)
    9fb8:	2805883a 	mov	r2,r5
    9fbc:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
    9fc0:	e0bffe17 	ldw	r2,-8(fp)
    9fc4:	1000091e 	bne	r2,zero,9fec <pbuf_realloc+0x48>
    9fc8:	010000f4 	movhi	r4,3
    9fcc:	213d5d04 	addi	r4,r4,-2700
    9fd0:	014000f4 	movhi	r5,3
    9fd4:	297dbd04 	addi	r5,r5,-2316
    9fd8:	01806d04 	movi	r6,436
    9fdc:	01c000f4 	movhi	r7,3
    9fe0:	39fd6e04 	addi	r7,r7,-2632
    9fe4:	0017c440 	call	17c44 <printf>
    9fe8:	003fff06 	br	9fe8 <pbuf_realloc+0x44>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
    9fec:	e0bffe17 	ldw	r2,-8(fp)
    9ff0:	10800303 	ldbu	r2,12(r2)
    9ff4:	10803fcc 	andi	r2,r2,255
    9ff8:	108000e0 	cmpeqi	r2,r2,3
    9ffc:	1000171e 	bne	r2,zero,a05c <pbuf_realloc+0xb8>
    a000:	e0bffe17 	ldw	r2,-8(fp)
    a004:	10800303 	ldbu	r2,12(r2)
    a008:	10803fcc 	andi	r2,r2,255
    a00c:	10800060 	cmpeqi	r2,r2,1
    a010:	1000121e 	bne	r2,zero,a05c <pbuf_realloc+0xb8>
    a014:	e0bffe17 	ldw	r2,-8(fp)
    a018:	10800303 	ldbu	r2,12(r2)
    a01c:	10803fcc 	andi	r2,r2,255
    a020:	10000e26 	beq	r2,zero,a05c <pbuf_realloc+0xb8>
    a024:	e0bffe17 	ldw	r2,-8(fp)
    a028:	10800303 	ldbu	r2,12(r2)
    a02c:	10803fcc 	andi	r2,r2,255
    a030:	108000a0 	cmpeqi	r2,r2,2
    a034:	1000091e 	bne	r2,zero,a05c <pbuf_realloc+0xb8>
    a038:	010000f4 	movhi	r4,3
    a03c:	213d5d04 	addi	r4,r4,-2700
    a040:	014000f4 	movhi	r5,3
    a044:	297dc304 	addi	r5,r5,-2292
    a048:	01806e04 	movi	r6,440
    a04c:	01c000f4 	movhi	r7,3
    a050:	39fd6e04 	addi	r7,r7,-2632
    a054:	0017c440 	call	17c44 <printf>
    a058:	003fff06 	br	a058 <pbuf_realloc+0xb4>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    a05c:	e0bffe17 	ldw	r2,-8(fp)
    a060:	1080020b 	ldhu	r2,8(r2)
    a064:	10bfffcc 	andi	r2,r2,65535
    a068:	e0ffff0b 	ldhu	r3,-4(fp)
    a06c:	1880682e 	bgeu	r3,r2,a210 <pbuf_realloc+0x26c>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
    a070:	e0ffff0b 	ldhu	r3,-4(fp)
    a074:	e0bffe17 	ldw	r2,-8(fp)
    a078:	1080020b 	ldhu	r2,8(r2)
    a07c:	10bfffcc 	andi	r2,r2,65535
    a080:	1885c83a 	sub	r2,r3,r2
    a084:	e0bffd15 	stw	r2,-12(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
    a088:	e0bfff0b 	ldhu	r2,-4(fp)
    a08c:	e0bffc0d 	sth	r2,-16(fp)
  q = p;
    a090:	e0bffe17 	ldw	r2,-8(fp)
    a094:	e0bffb15 	stw	r2,-20(fp)
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    a098:	00002606 	br	a134 <pbuf_realloc+0x190>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
    a09c:	e0bffb17 	ldw	r2,-20(fp)
    a0a0:	1080028b 	ldhu	r2,10(r2)
    a0a4:	e0fffc0b 	ldhu	r3,-16(fp)
    a0a8:	1885c83a 	sub	r2,r3,r2
    a0ac:	e0bffc0d 	sth	r2,-16(fp)
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    a0b0:	e0bffd17 	ldw	r2,-12(fp)
    a0b4:	00ffff94 	movui	r3,65534
    a0b8:	1880090e 	bge	r3,r2,a0e0 <pbuf_realloc+0x13c>
    a0bc:	010000f4 	movhi	r4,3
    a0c0:	213d5d04 	addi	r4,r4,-2700
    a0c4:	014000f4 	movhi	r5,3
    a0c8:	297dca04 	addi	r5,r5,-2264
    a0cc:	01807304 	movi	r6,460
    a0d0:	01c000f4 	movhi	r7,3
    a0d4:	39fd6e04 	addi	r7,r7,-2632
    a0d8:	0017c440 	call	17c44 <printf>
    a0dc:	003fff06 	br	a0dc <pbuf_realloc+0x138>
    q->tot_len += (u16_t)grow;
    a0e0:	e0bffb17 	ldw	r2,-20(fp)
    a0e4:	10c0020b 	ldhu	r3,8(r2)
    a0e8:	e0bffd17 	ldw	r2,-12(fp)
    a0ec:	1885883a 	add	r2,r3,r2
    a0f0:	1007883a 	mov	r3,r2
    a0f4:	e0bffb17 	ldw	r2,-20(fp)
    a0f8:	10c0020d 	sth	r3,8(r2)
    /* proceed to next pbuf in chain */
    q = q->next;
    a0fc:	e0bffb17 	ldw	r2,-20(fp)
    a100:	10800017 	ldw	r2,0(r2)
    a104:	e0bffb15 	stw	r2,-20(fp)
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
    a108:	e0bffb17 	ldw	r2,-20(fp)
    a10c:	1000091e 	bne	r2,zero,a134 <pbuf_realloc+0x190>
    a110:	010000f4 	movhi	r4,3
    a114:	213d5d04 	addi	r4,r4,-2700
    a118:	014000f4 	movhi	r5,3
    a11c:	297dcf04 	addi	r5,r5,-2244
    a120:	01807404 	movi	r6,464
    a124:	01c000f4 	movhi	r7,3
    a128:	39fd6e04 	addi	r7,r7,-2632
    a12c:	0017c440 	call	17c44 <printf>
    a130:	003fff06 	br	a130 <pbuf_realloc+0x18c>

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    a134:	e0bffb17 	ldw	r2,-20(fp)
    a138:	1080028b 	ldhu	r2,10(r2)
    a13c:	10ffffcc 	andi	r3,r2,65535
    a140:	e0bffc0b 	ldhu	r2,-16(fp)
    a144:	18bfd536 	bltu	r3,r2,a09c <pbuf_realloc+0xf8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
    a148:	e0bffb17 	ldw	r2,-20(fp)
    a14c:	10800303 	ldbu	r2,12(r2)
    a150:	10803fcc 	andi	r2,r2,255
    a154:	10001d1e 	bne	r2,zero,a1cc <pbuf_realloc+0x228>
    a158:	e0bffb17 	ldw	r2,-20(fp)
    a15c:	1080028b 	ldhu	r2,10(r2)
    a160:	10ffffcc 	andi	r3,r2,65535
    a164:	e0bffc0b 	ldhu	r2,-16(fp)
    a168:	18801826 	beq	r3,r2,a1cc <pbuf_realloc+0x228>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    a16c:	e0bffb17 	ldw	r2,-20(fp)
    a170:	10800117 	ldw	r2,4(r2)
    a174:	1007883a 	mov	r3,r2
    a178:	e0bffb17 	ldw	r2,-20(fp)
    a17c:	1885c83a 	sub	r2,r3,r2
    a180:	1007883a 	mov	r3,r2
    a184:	e0bffc0b 	ldhu	r2,-16(fp)
    a188:	1885883a 	add	r2,r3,r2
    a18c:	10bfffcc 	andi	r2,r2,65535
    a190:	e13ffb17 	ldw	r4,-20(fp)
    a194:	100b883a 	mov	r5,r2
    a198:	00086680 	call	8668 <mem_trim>
    a19c:	e0bffb15 	stw	r2,-20(fp)
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
    a1a0:	e0bffb17 	ldw	r2,-20(fp)
    a1a4:	1000091e 	bne	r2,zero,a1cc <pbuf_realloc+0x228>
    a1a8:	010000f4 	movhi	r4,3
    a1ac:	213d5d04 	addi	r4,r4,-2700
    a1b0:	014000f4 	movhi	r5,3
    a1b4:	297dd504 	addi	r5,r5,-2220
    a1b8:	01807684 	movi	r6,474
    a1bc:	01c000f4 	movhi	r7,3
    a1c0:	39fd6e04 	addi	r7,r7,-2632
    a1c4:	0017c440 	call	17c44 <printf>
    a1c8:	003fff06 	br	a1c8 <pbuf_realloc+0x224>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
    a1cc:	e0bffb17 	ldw	r2,-20(fp)
    a1d0:	e0fffc0b 	ldhu	r3,-16(fp)
    a1d4:	10c0028d 	sth	r3,10(r2)
  q->tot_len = q->len;
    a1d8:	e0bffb17 	ldw	r2,-20(fp)
    a1dc:	10c0028b 	ldhu	r3,10(r2)
    a1e0:	e0bffb17 	ldw	r2,-20(fp)
    a1e4:	10c0020d 	sth	r3,8(r2)

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
    a1e8:	e0bffb17 	ldw	r2,-20(fp)
    a1ec:	10800017 	ldw	r2,0(r2)
    a1f0:	10000426 	beq	r2,zero,a204 <pbuf_realloc+0x260>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
    a1f4:	e0bffb17 	ldw	r2,-20(fp)
    a1f8:	10800017 	ldw	r2,0(r2)
    a1fc:	1009883a 	mov	r4,r2
    a200:	000a4200 	call	a420 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
    a204:	e0bffb17 	ldw	r2,-20(fp)
    a208:	10000015 	stw	zero,0(r2)
    a20c:	00000106 	br	a214 <pbuf_realloc+0x270>
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    /* enlarging not yet supported */
    return;
    a210:	0001883a 	nop
    pbuf_free(q->next);
  }
  /* q is last packet in chain */
  q->next = NULL;

}
    a214:	e037883a 	mov	sp,fp
    a218:	dfc00117 	ldw	ra,4(sp)
    a21c:	df000017 	ldw	fp,0(sp)
    a220:	dec00204 	addi	sp,sp,8
    a224:	f800283a 	ret

0000a228 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
    a228:	defffa04 	addi	sp,sp,-24
    a22c:	dfc00515 	stw	ra,20(sp)
    a230:	df000415 	stw	fp,16(sp)
    a234:	df000404 	addi	fp,sp,16
    a238:	e13ffe15 	stw	r4,-8(fp)
    a23c:	2805883a 	mov	r2,r5
    a240:	e0bfff0d 	sth	r2,-4(fp)
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
    a244:	e0bffe17 	ldw	r2,-8(fp)
    a248:	1000091e 	bne	r2,zero,a270 <pbuf_header+0x48>
    a24c:	010000f4 	movhi	r4,3
    a250:	213d5d04 	addi	r4,r4,-2700
    a254:	014000f4 	movhi	r5,3
    a258:	297ddc04 	addi	r5,r5,-2192
    a25c:	01808144 	movi	r6,517
    a260:	01c000f4 	movhi	r7,3
    a264:	39fd6e04 	addi	r7,r7,-2632
    a268:	0017c440 	call	17c44 <printf>
    a26c:	003fff06 	br	a26c <pbuf_header+0x44>
  if ((header_size_increment == 0) || (p == NULL)) {
    a270:	e0bfff0f 	ldh	r2,-4(fp)
    a274:	10000226 	beq	r2,zero,a280 <pbuf_header+0x58>
    a278:	e0bffe17 	ldw	r2,-8(fp)
    a27c:	1000021e 	bne	r2,zero,a288 <pbuf_header+0x60>
    return 0;
    a280:	0005883a 	mov	r2,zero
    a284:	00006106 	br	a40c <pbuf_header+0x1e4>
  }
 
  if (header_size_increment < 0){
    a288:	e0bfff0f 	ldh	r2,-4(fp)
    a28c:	1000110e 	bge	r2,zero,a2d4 <pbuf_header+0xac>
    increment_magnitude = -header_size_increment;
    a290:	e0bfff0b 	ldhu	r2,-4(fp)
    a294:	0085c83a 	sub	r2,zero,r2
    a298:	e0bffc0d 	sth	r2,-16(fp)
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
    a29c:	e0bffe17 	ldw	r2,-8(fp)
    a2a0:	1080028b 	ldhu	r2,10(r2)
    a2a4:	10ffffcc 	andi	r3,r2,65535
    a2a8:	e0bffc0b 	ldhu	r2,-16(fp)
    a2ac:	18800b2e 	bgeu	r3,r2,a2dc <pbuf_header+0xb4>
    a2b0:	010000f4 	movhi	r4,3
    a2b4:	213d5d04 	addi	r4,r4,-2700
    a2b8:	014000f4 	movhi	r5,3
    a2bc:	297ddf04 	addi	r5,r5,-2180
    a2c0:	01808344 	movi	r6,525
    a2c4:	01c000f4 	movhi	r7,3
    a2c8:	39fd6e04 	addi	r7,r7,-2632
    a2cc:	0017c440 	call	17c44 <printf>
    a2d0:	003fff06 	br	a2d0 <pbuf_header+0xa8>
  } else {
    increment_magnitude = header_size_increment;
    a2d4:	e0bfff0b 	ldhu	r2,-4(fp)
    a2d8:	e0bffc0d 	sth	r2,-16(fp)
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
    a2dc:	e0bffe17 	ldw	r2,-8(fp)
    a2e0:	10800303 	ldbu	r2,12(r2)
    a2e4:	10803fcc 	andi	r2,r2,255
    a2e8:	e0bffc8d 	sth	r2,-14(fp)
  /* remember current payload pointer */
  payload = p->payload;
    a2ec:	e0bffe17 	ldw	r2,-8(fp)
    a2f0:	10800117 	ldw	r2,4(r2)
    a2f4:	e0bffd15 	stw	r2,-12(fp)

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    a2f8:	e0bffc8b 	ldhu	r2,-14(fp)
    a2fc:	10000326 	beq	r2,zero,a30c <pbuf_header+0xe4>
    a300:	e0bffc8b 	ldhu	r2,-14(fp)
    a304:	108000d8 	cmpnei	r2,r2,3
    a308:	1000111e 	bne	r2,zero,a350 <pbuf_header+0x128>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
    a30c:	e0bffe17 	ldw	r2,-8(fp)
    a310:	10c00117 	ldw	r3,4(r2)
    a314:	e0bfff0f 	ldh	r2,-4(fp)
    a318:	0085c83a 	sub	r2,zero,r2
    a31c:	1887883a 	add	r3,r3,r2
    a320:	e0bffe17 	ldw	r2,-8(fp)
    a324:	10c00115 	stw	r3,4(r2)
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
    a328:	e0bffe17 	ldw	r2,-8(fp)
    a32c:	10c00117 	ldw	r3,4(r2)
    a330:	e0bffe17 	ldw	r2,-8(fp)
    a334:	10800404 	addi	r2,r2,16
    a338:	1880252e 	bgeu	r3,r2,a3d0 <pbuf_header+0x1a8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
    a33c:	e0bffe17 	ldw	r2,-8(fp)
    a340:	e0fffd17 	ldw	r3,-12(fp)
    a344:	10c00115 	stw	r3,4(r2)
      /* bail out unsuccesfully */
      return 1;
    a348:	00800044 	movi	r2,1
    a34c:	00002f06 	br	a40c <pbuf_header+0x1e4>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    a350:	e0bffc8b 	ldhu	r2,-14(fp)
    a354:	108000a0 	cmpeqi	r2,r2,2
    a358:	1000031e 	bne	r2,zero,a368 <pbuf_header+0x140>
    a35c:	e0bffc8b 	ldhu	r2,-14(fp)
    a360:	10800058 	cmpnei	r2,r2,1
    a364:	1000111e 	bne	r2,zero,a3ac <pbuf_header+0x184>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    a368:	e0bfff0f 	ldh	r2,-4(fp)
    a36c:	10000d0e 	bge	r2,zero,a3a4 <pbuf_header+0x17c>
    a370:	e0bffe17 	ldw	r2,-8(fp)
    a374:	1080028b 	ldhu	r2,10(r2)
    a378:	10ffffcc 	andi	r3,r2,65535
    a37c:	e0bffc0b 	ldhu	r2,-16(fp)
    a380:	18800836 	bltu	r3,r2,a3a4 <pbuf_header+0x17c>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    a384:	e0bffe17 	ldw	r2,-8(fp)
    a388:	10c00117 	ldw	r3,4(r2)
    a38c:	e0bfff0f 	ldh	r2,-4(fp)
    a390:	0085c83a 	sub	r2,zero,r2
    a394:	1887883a 	add	r3,r3,r2
    a398:	e0bffe17 	ldw	r2,-8(fp)
    a39c:	10c00115 	stw	r3,4(r2)
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    a3a0:	00000b06 	br	a3d0 <pbuf_header+0x1a8>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
    a3a4:	00800044 	movi	r2,1
    a3a8:	00001806 	br	a40c <pbuf_header+0x1e4>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    a3ac:	010000f4 	movhi	r4,3
    a3b0:	213d5d04 	addi	r4,r4,-2700
    a3b4:	014000f4 	movhi	r5,3
    a3b8:	297de704 	addi	r5,r5,-2148
    a3bc:	01808ec4 	movi	r6,571
    a3c0:	01c000f4 	movhi	r7,3
    a3c4:	39fd6e04 	addi	r7,r7,-2632
    a3c8:	0017c440 	call	17c44 <printf>
    a3cc:	003fff06 	br	a3cc <pbuf_header+0x1a4>
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
    a3d0:	e0bffe17 	ldw	r2,-8(fp)
    a3d4:	10c0028b 	ldhu	r3,10(r2)
    a3d8:	e0bfff0b 	ldhu	r2,-4(fp)
    a3dc:	1885883a 	add	r2,r3,r2
    a3e0:	1007883a 	mov	r3,r2
    a3e4:	e0bffe17 	ldw	r2,-8(fp)
    a3e8:	10c0028d 	sth	r3,10(r2)
  p->tot_len += header_size_increment;
    a3ec:	e0bffe17 	ldw	r2,-8(fp)
    a3f0:	10c0020b 	ldhu	r3,8(r2)
    a3f4:	e0bfff0b 	ldhu	r2,-4(fp)
    a3f8:	1885883a 	add	r2,r3,r2
    a3fc:	1007883a 	mov	r3,r2
    a400:	e0bffe17 	ldw	r2,-8(fp)
    a404:	10c0020d 	sth	r3,8(r2)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
    a408:	0005883a 	mov	r2,zero
}
    a40c:	e037883a 	mov	sp,fp
    a410:	dfc00117 	ldw	ra,4(sp)
    a414:	df000017 	ldw	fp,0(sp)
    a418:	dec00204 	addi	sp,sp,8
    a41c:	f800283a 	ret

0000a420 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
    a420:	defffa04 	addi	sp,sp,-24
    a424:	dfc00515 	stw	ra,20(sp)
    a428:	df000415 	stw	fp,16(sp)
    a42c:	df000404 	addi	fp,sp,16
    a430:	e13fff15 	stw	r4,-4(fp)
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
    a434:	e0bfff17 	ldw	r2,-4(fp)
    a438:	10000d1e 	bne	r2,zero,a470 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
    a43c:	e0bfff17 	ldw	r2,-4(fp)
    a440:	1000091e 	bne	r2,zero,a468 <pbuf_free+0x48>
    a444:	010000f4 	movhi	r4,3
    a448:	213d5d04 	addi	r4,r4,-2700
    a44c:	014000f4 	movhi	r5,3
    a450:	297ddc04 	addi	r5,r5,-2192
    a454:	01809c44 	movi	r6,625
    a458:	01c000f4 	movhi	r7,3
    a45c:	39fd6e04 	addi	r7,r7,-2632
    a460:	0017c440 	call	17c44 <printf>
    a464:	003fff06 	br	a464 <pbuf_free+0x44>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
    a468:	0005883a 	mov	r2,zero
    a46c:	00005a06 	br	a5d8 <pbuf_free+0x1b8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
    a470:	e0bfff17 	ldw	r2,-4(fp)
    a474:	10800303 	ldbu	r2,12(r2)
    a478:	10803fcc 	andi	r2,r2,255
    a47c:	10001826 	beq	r2,zero,a4e0 <pbuf_free+0xc0>
    a480:	e0bfff17 	ldw	r2,-4(fp)
    a484:	10800303 	ldbu	r2,12(r2)
    a488:	10803fcc 	andi	r2,r2,255
    a48c:	10800060 	cmpeqi	r2,r2,1
    a490:	1000131e 	bne	r2,zero,a4e0 <pbuf_free+0xc0>
    a494:	e0bfff17 	ldw	r2,-4(fp)
    a498:	10800303 	ldbu	r2,12(r2)
    a49c:	10803fcc 	andi	r2,r2,255
    a4a0:	108000a0 	cmpeqi	r2,r2,2
    a4a4:	10000e1e 	bne	r2,zero,a4e0 <pbuf_free+0xc0>
    a4a8:	e0bfff17 	ldw	r2,-4(fp)
    a4ac:	10800303 	ldbu	r2,12(r2)
    a4b0:	10803fcc 	andi	r2,r2,255
    a4b4:	108000e0 	cmpeqi	r2,r2,3
    a4b8:	1000091e 	bne	r2,zero,a4e0 <pbuf_free+0xc0>
    a4bc:	010000f4 	movhi	r4,3
    a4c0:	213d5d04 	addi	r4,r4,-2700
    a4c4:	014000f4 	movhi	r5,3
    a4c8:	297deb04 	addi	r5,r5,-2132
    a4cc:	01809f44 	movi	r6,637
    a4d0:	01c000f4 	movhi	r7,3
    a4d4:	39fd6e04 	addi	r7,r7,-2632
    a4d8:	0017c440 	call	17c44 <printf>
    a4dc:	003fff06 	br	a4dc <pbuf_free+0xbc>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
    a4e0:	e03ffc05 	stb	zero,-16(fp)
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
    a4e4:	00003906 	br	a5cc <pbuf_free+0x1ac>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    a4e8:	e0bfff17 	ldw	r2,-4(fp)
    a4ec:	1080038b 	ldhu	r2,14(r2)
    a4f0:	10bfffcc 	andi	r2,r2,65535
    a4f4:	1000091e 	bne	r2,zero,a51c <pbuf_free+0xfc>
    a4f8:	010000f4 	movhi	r4,3
    a4fc:	213d5d04 	addi	r4,r4,-2700
    a500:	014000f4 	movhi	r5,3
    a504:	297df104 	addi	r5,r5,-2108
    a508:	0180a284 	movi	r6,650
    a50c:	01c000f4 	movhi	r7,3
    a510:	39fd6e04 	addi	r7,r7,-2632
    a514:	0017c440 	call	17c44 <printf>
    a518:	003fff06 	br	a518 <pbuf_free+0xf8>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
    a51c:	e0bfff17 	ldw	r2,-4(fp)
    a520:	1080038b 	ldhu	r2,14(r2)
    a524:	10bfffc4 	addi	r2,r2,-1
    a528:	1007883a 	mov	r3,r2
    a52c:	e0bfff17 	ldw	r2,-4(fp)
    a530:	10c0038d 	sth	r3,14(r2)
    a534:	e0bfff17 	ldw	r2,-4(fp)
    a538:	1080038b 	ldhu	r2,14(r2)
    a53c:	e0bffc8d 	sth	r2,-14(fp)
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
    a540:	e0bffc8b 	ldhu	r2,-14(fp)
    a544:	1000201e 	bne	r2,zero,a5c8 <pbuf_free+0x1a8>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
    a548:	e0bfff17 	ldw	r2,-4(fp)
    a54c:	10800017 	ldw	r2,0(r2)
    a550:	e0bffd15 	stw	r2,-12(fp)
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
    a554:	e0bfff17 	ldw	r2,-4(fp)
    a558:	10800303 	ldbu	r2,12(r2)
    a55c:	10803fcc 	andi	r2,r2,255
    a560:	e0bffe0d 	sth	r2,-8(fp)
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
    a564:	e0bffe0b 	ldhu	r2,-8(fp)
    a568:	108000d8 	cmpnei	r2,r2,3
    a56c:	1000041e 	bne	r2,zero,a580 <pbuf_free+0x160>
          memp_free(MEMP_PBUF_POOL, p);
    a570:	01000204 	movi	r4,8
    a574:	e17fff17 	ldw	r5,-4(fp)
    a578:	00091c00 	call	91c0 <memp_free>
    a57c:	00000c06 	br	a5b0 <pbuf_free+0x190>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
    a580:	e0bffe0b 	ldhu	r2,-8(fp)
    a584:	10800060 	cmpeqi	r2,r2,1
    a588:	1000031e 	bne	r2,zero,a598 <pbuf_free+0x178>
    a58c:	e0bffe0b 	ldhu	r2,-8(fp)
    a590:	10800098 	cmpnei	r2,r2,2
    a594:	1000041e 	bne	r2,zero,a5a8 <pbuf_free+0x188>
          memp_free(MEMP_PBUF, p);
    a598:	010001c4 	movi	r4,7
    a59c:	e17fff17 	ldw	r5,-4(fp)
    a5a0:	00091c00 	call	91c0 <memp_free>
    a5a4:	00000206 	br	a5b0 <pbuf_free+0x190>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
    a5a8:	e13fff17 	ldw	r4,-4(fp)
    a5ac:	00084e80 	call	84e8 <mem_free>
        }
      }
      count++;
    a5b0:	e0bffc03 	ldbu	r2,-16(fp)
    a5b4:	10800044 	addi	r2,r2,1
    a5b8:	e0bffc05 	stb	r2,-16(fp)
      /* proceed to next pbuf */
      p = q;
    a5bc:	e0bffd17 	ldw	r2,-12(fp)
    a5c0:	e0bfff15 	stw	r2,-4(fp)
    a5c4:	00000106 	br	a5cc <pbuf_free+0x1ac>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
    a5c8:	e03fff15 	stw	zero,-4(fp)
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
    a5cc:	e0bfff17 	ldw	r2,-4(fp)
    a5d0:	103fc51e 	bne	r2,zero,a4e8 <pbuf_free+0xc8>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
    a5d4:	e0bffc03 	ldbu	r2,-16(fp)
}
    a5d8:	e037883a 	mov	sp,fp
    a5dc:	dfc00117 	ldw	ra,4(sp)
    a5e0:	df000017 	ldw	fp,0(sp)
    a5e4:	dec00204 	addi	sp,sp,8
    a5e8:	f800283a 	ret

0000a5ec <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
    a5ec:	defffd04 	addi	sp,sp,-12
    a5f0:	df000215 	stw	fp,8(sp)
    a5f4:	df000204 	addi	fp,sp,8
    a5f8:	e13fff15 	stw	r4,-4(fp)
  u8_t len;

  len = 0;
    a5fc:	e03ffe05 	stb	zero,-8(fp)
  while (p != NULL) {
    a600:	00000606 	br	a61c <pbuf_clen+0x30>
    ++len;
    a604:	e0bffe03 	ldbu	r2,-8(fp)
    a608:	10800044 	addi	r2,r2,1
    a60c:	e0bffe05 	stb	r2,-8(fp)
    p = p->next;
    a610:	e0bfff17 	ldw	r2,-4(fp)
    a614:	10800017 	ldw	r2,0(r2)
    a618:	e0bfff15 	stw	r2,-4(fp)
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
    a61c:	e0bfff17 	ldw	r2,-4(fp)
    a620:	103ff81e 	bne	r2,zero,a604 <pbuf_clen+0x18>
    ++len;
    p = p->next;
  }
  return len;
    a624:	e0bffe03 	ldbu	r2,-8(fp)
}
    a628:	e037883a 	mov	sp,fp
    a62c:	df000017 	ldw	fp,0(sp)
    a630:	dec00104 	addi	sp,sp,4
    a634:	f800283a 	ret

0000a638 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
    a638:	defffe04 	addi	sp,sp,-8
    a63c:	df000115 	stw	fp,4(sp)
    a640:	df000104 	addi	fp,sp,4
    a644:	e13fff15 	stw	r4,-4(fp)
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
    a648:	e0bfff17 	ldw	r2,-4(fp)
    a64c:	10000626 	beq	r2,zero,a668 <pbuf_ref+0x30>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
    a650:	e0bfff17 	ldw	r2,-4(fp)
    a654:	1080038b 	ldhu	r2,14(r2)
    a658:	10800044 	addi	r2,r2,1
    a65c:	1007883a 	mov	r3,r2
    a660:	e0bfff17 	ldw	r2,-4(fp)
    a664:	10c0038d 	sth	r3,14(r2)
    SYS_ARCH_UNPROTECT(old_level);
  }
}
    a668:	e037883a 	mov	sp,fp
    a66c:	df000017 	ldw	fp,0(sp)
    a670:	dec00104 	addi	sp,sp,4
    a674:	f800283a 	ret

0000a678 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
    a678:	defffb04 	addi	sp,sp,-20
    a67c:	dfc00415 	stw	ra,16(sp)
    a680:	df000315 	stw	fp,12(sp)
    a684:	df000304 	addi	fp,sp,12
    a688:	e13ffe15 	stw	r4,-8(fp)
    a68c:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
    a690:	e0bffe17 	ldw	r2,-8(fp)
    a694:	10000226 	beq	r2,zero,a6a0 <pbuf_cat+0x28>
    a698:	e0bfff17 	ldw	r2,-4(fp)
    a69c:	1000091e 	bne	r2,zero,a6c4 <pbuf_cat+0x4c>
    a6a0:	010000f4 	movhi	r4,3
    a6a4:	213d5d04 	addi	r4,r4,-2700
    a6a8:	014000f4 	movhi	r5,3
    a6ac:	297df704 	addi	r5,r5,-2084
    a6b0:	0180bb84 	movi	r6,750
    a6b4:	01c000f4 	movhi	r7,3
    a6b8:	39fd6e04 	addi	r7,r7,-2632
    a6bc:	0017c440 	call	17c44 <printf>
    a6c0:	003fff06 	br	a6c0 <pbuf_cat+0x48>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    a6c4:	e0bffe17 	ldw	r2,-8(fp)
    a6c8:	e0bffd15 	stw	r2,-12(fp)
    a6cc:	00000b06 	br	a6fc <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
    a6d0:	e0bffd17 	ldw	r2,-12(fp)
    a6d4:	10c0020b 	ldhu	r3,8(r2)
    a6d8:	e0bfff17 	ldw	r2,-4(fp)
    a6dc:	1080020b 	ldhu	r2,8(r2)
    a6e0:	1885883a 	add	r2,r3,r2
    a6e4:	1007883a 	mov	r3,r2
    a6e8:	e0bffd17 	ldw	r2,-12(fp)
    a6ec:	10c0020d 	sth	r3,8(r2)

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    a6f0:	e0bffd17 	ldw	r2,-12(fp)
    a6f4:	10800017 	ldw	r2,0(r2)
    a6f8:	e0bffd15 	stw	r2,-12(fp)
    a6fc:	e0bffd17 	ldw	r2,-12(fp)
    a700:	10800017 	ldw	r2,0(r2)
    a704:	103ff21e 	bne	r2,zero,a6d0 <pbuf_cat+0x58>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
    a708:	e0bffd17 	ldw	r2,-12(fp)
    a70c:	10c0020b 	ldhu	r3,8(r2)
    a710:	e0bffd17 	ldw	r2,-12(fp)
    a714:	1080028b 	ldhu	r2,10(r2)
    a718:	18ffffcc 	andi	r3,r3,65535
    a71c:	10bfffcc 	andi	r2,r2,65535
    a720:	18800926 	beq	r3,r2,a748 <pbuf_cat+0xd0>
    a724:	010000f4 	movhi	r4,3
    a728:	213d5d04 	addi	r4,r4,-2700
    a72c:	014000f4 	movhi	r5,3
    a730:	297e0504 	addi	r5,r5,-2028
    a734:	0180bd84 	movi	r6,758
    a738:	01c000f4 	movhi	r7,3
    a73c:	39fd6e04 	addi	r7,r7,-2632
    a740:	0017c440 	call	17c44 <printf>
    a744:	003fff06 	br	a744 <pbuf_cat+0xcc>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
    a748:	e0bffd17 	ldw	r2,-12(fp)
    a74c:	10800017 	ldw	r2,0(r2)
    a750:	10000926 	beq	r2,zero,a778 <pbuf_cat+0x100>
    a754:	010000f4 	movhi	r4,3
    a758:	213d5d04 	addi	r4,r4,-2700
    a75c:	014000f4 	movhi	r5,3
    a760:	297e1104 	addi	r5,r5,-1980
    a764:	0180bdc4 	movi	r6,759
    a768:	01c000f4 	movhi	r7,3
    a76c:	39fd6e04 	addi	r7,r7,-2632
    a770:	0017c440 	call	17c44 <printf>
    a774:	003fff06 	br	a774 <pbuf_cat+0xfc>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
    a778:	e0bffd17 	ldw	r2,-12(fp)
    a77c:	10c0020b 	ldhu	r3,8(r2)
    a780:	e0bfff17 	ldw	r2,-4(fp)
    a784:	1080020b 	ldhu	r2,8(r2)
    a788:	1885883a 	add	r2,r3,r2
    a78c:	1007883a 	mov	r3,r2
    a790:	e0bffd17 	ldw	r2,-12(fp)
    a794:	10c0020d 	sth	r3,8(r2)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
    a798:	e0bffd17 	ldw	r2,-12(fp)
    a79c:	e0ffff17 	ldw	r3,-4(fp)
    a7a0:	10c00015 	stw	r3,0(r2)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
    a7a4:	e037883a 	mov	sp,fp
    a7a8:	dfc00117 	ldw	ra,4(sp)
    a7ac:	df000017 	ldw	fp,0(sp)
    a7b0:	dec00204 	addi	sp,sp,8
    a7b4:	f800283a 	ret

0000a7b8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
    a7b8:	defffc04 	addi	sp,sp,-16
    a7bc:	dfc00315 	stw	ra,12(sp)
    a7c0:	df000215 	stw	fp,8(sp)
    a7c4:	df000204 	addi	fp,sp,8
    a7c8:	e13ffe15 	stw	r4,-8(fp)
    a7cc:	e17fff15 	stw	r5,-4(fp)
  pbuf_cat(h, t);
    a7d0:	e13ffe17 	ldw	r4,-8(fp)
    a7d4:	e17fff17 	ldw	r5,-4(fp)
    a7d8:	000a6780 	call	a678 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
    a7dc:	e13fff17 	ldw	r4,-4(fp)
    a7e0:	000a6380 	call	a638 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
    a7e4:	e037883a 	mov	sp,fp
    a7e8:	dfc00117 	ldw	ra,4(sp)
    a7ec:	df000017 	ldw	fp,0(sp)
    a7f0:	dec00204 	addi	sp,sp,8
    a7f4:	f800283a 	ret

0000a7f8 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
    a7f8:	defffb04 	addi	sp,sp,-20
    a7fc:	dfc00415 	stw	ra,16(sp)
    a800:	df000315 	stw	fp,12(sp)
    a804:	df000304 	addi	fp,sp,12
    a808:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q;
  u8_t tail_gone = 1;
    a80c:	00800044 	movi	r2,1
    a810:	e0bffd05 	stb	r2,-12(fp)
  /* tail */
  q = p->next;
    a814:	e0bfff17 	ldw	r2,-4(fp)
    a818:	10800017 	ldw	r2,0(r2)
    a81c:	e0bffe15 	stw	r2,-8(fp)
  /* pbuf has successor in chain? */
  if (q != NULL) {
    a820:	e0bffe17 	ldw	r2,-8(fp)
    a824:	10002526 	beq	r2,zero,a8bc <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    a828:	e0bffe17 	ldw	r2,-8(fp)
    a82c:	1080020b 	ldhu	r2,8(r2)
    a830:	10ffffcc 	andi	r3,r2,65535
    a834:	e0bfff17 	ldw	r2,-4(fp)
    a838:	1080020b 	ldhu	r2,8(r2)
    a83c:	113fffcc 	andi	r4,r2,65535
    a840:	e0bfff17 	ldw	r2,-4(fp)
    a844:	1080028b 	ldhu	r2,10(r2)
    a848:	10bfffcc 	andi	r2,r2,65535
    a84c:	2085c83a 	sub	r2,r4,r2
    a850:	18800926 	beq	r3,r2,a878 <pbuf_dechain+0x80>
    a854:	010000f4 	movhi	r4,3
    a858:	213d5d04 	addi	r4,r4,-2700
    a85c:	014000f4 	movhi	r5,3
    a860:	297e1504 	addi	r5,r5,-1964
    a864:	0180cb04 	movi	r6,812
    a868:	01c000f4 	movhi	r7,3
    a86c:	39fd6e04 	addi	r7,r7,-2632
    a870:	0017c440 	call	17c44 <printf>
    a874:	003fff06 	br	a874 <pbuf_dechain+0x7c>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
    a878:	e0bfff17 	ldw	r2,-4(fp)
    a87c:	10c0020b 	ldhu	r3,8(r2)
    a880:	e0bfff17 	ldw	r2,-4(fp)
    a884:	1080028b 	ldhu	r2,10(r2)
    a888:	1885c83a 	sub	r2,r3,r2
    a88c:	1007883a 	mov	r3,r2
    a890:	e0bffe17 	ldw	r2,-8(fp)
    a894:	10c0020d 	sth	r3,8(r2)
    /* decouple pbuf from remainder */
    p->next = NULL;
    a898:	e0bfff17 	ldw	r2,-4(fp)
    a89c:	10000015 	stw	zero,0(r2)
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
    a8a0:	e0bfff17 	ldw	r2,-4(fp)
    a8a4:	10c0028b 	ldhu	r3,10(r2)
    a8a8:	e0bfff17 	ldw	r2,-4(fp)
    a8ac:	10c0020d 	sth	r3,8(r2)
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
    a8b0:	e13ffe17 	ldw	r4,-8(fp)
    a8b4:	000a4200 	call	a420 <pbuf_free>
    a8b8:	e0bffd05 	stb	r2,-12(fp)
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
    a8bc:	e0bfff17 	ldw	r2,-4(fp)
    a8c0:	10c0020b 	ldhu	r3,8(r2)
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	1080028b 	ldhu	r2,10(r2)
    a8cc:	18ffffcc 	andi	r3,r3,65535
    a8d0:	10bfffcc 	andi	r2,r2,65535
    a8d4:	18800926 	beq	r3,r2,a8fc <pbuf_dechain+0x104>
    a8d8:	010000f4 	movhi	r4,3
    a8dc:	213d5d04 	addi	r4,r4,-2700
    a8e0:	014000f4 	movhi	r5,3
    a8e4:	297e1e04 	addi	r5,r5,-1928
    a8e8:	0180cf44 	movi	r6,829
    a8ec:	01c000f4 	movhi	r7,3
    a8f0:	39fd6e04 	addi	r7,r7,-2632
    a8f4:	0017c440 	call	17c44 <printf>
    a8f8:	003fff06 	br	a8f8 <pbuf_dechain+0x100>
  return ((tail_gone > 0) ? NULL : q);
    a8fc:	e0bffd03 	ldbu	r2,-12(fp)
    a900:	1000021e 	bne	r2,zero,a90c <pbuf_dechain+0x114>
    a904:	e0bffe17 	ldw	r2,-8(fp)
    a908:	00000106 	br	a910 <pbuf_dechain+0x118>
    a90c:	0005883a 	mov	r2,zero
}
    a910:	e037883a 	mov	sp,fp
    a914:	dfc00117 	ldw	ra,4(sp)
    a918:	df000017 	ldw	fp,0(sp)
    a91c:	dec00204 	addi	sp,sp,8
    a920:	f800283a 	ret

0000a924 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
    a924:	defffa04 	addi	sp,sp,-24
    a928:	dfc00515 	stw	ra,20(sp)
    a92c:	df000415 	stw	fp,16(sp)
    a930:	df000404 	addi	fp,sp,16
    a934:	e13ffe15 	stw	r4,-8(fp)
    a938:	e17fff15 	stw	r5,-4(fp)
  u16_t offset_to=0, offset_from=0, len;
    a93c:	e03ffc0d 	sth	zero,-16(fp)
    a940:	e03ffc8d 	sth	zero,-14(fp)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
    a944:	e0bffe17 	ldw	r2,-8(fp)
    a948:	10000926 	beq	r2,zero,a970 <pbuf_copy+0x4c>
    a94c:	e0bfff17 	ldw	r2,-4(fp)
    a950:	10000726 	beq	r2,zero,a970 <pbuf_copy+0x4c>
    a954:	e0bffe17 	ldw	r2,-8(fp)
    a958:	10c0020b 	ldhu	r3,8(r2)
    a95c:	e0bfff17 	ldw	r2,-4(fp)
    a960:	1080020b 	ldhu	r2,8(r2)
    a964:	18ffffcc 	andi	r3,r3,65535
    a968:	10bfffcc 	andi	r2,r2,65535
    a96c:	1880092e 	bgeu	r3,r2,a994 <pbuf_copy+0x70>
    a970:	010000f4 	movhi	r4,3
    a974:	213d5d04 	addi	r4,r4,-2700
    a978:	014000f4 	movhi	r5,3
    a97c:	297e2404 	addi	r5,r5,-1904
    a980:	0180d744 	movi	r6,861
    a984:	01c000f4 	movhi	r7,3
    a988:	39fd6e04 	addi	r7,r7,-2632
    a98c:	0017c440 	call	17c44 <printf>
    a990:	003fff06 	br	a990 <pbuf_copy+0x6c>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
    a994:	e0bffe17 	ldw	r2,-8(fp)
    a998:	1080028b 	ldhu	r2,10(r2)
    a99c:	10ffffcc 	andi	r3,r2,65535
    a9a0:	e0bffc0b 	ldhu	r2,-16(fp)
    a9a4:	1887c83a 	sub	r3,r3,r2
    a9a8:	e0bfff17 	ldw	r2,-4(fp)
    a9ac:	1080028b 	ldhu	r2,10(r2)
    a9b0:	113fffcc 	andi	r4,r2,65535
    a9b4:	e0bffc8b 	ldhu	r2,-14(fp)
    a9b8:	2085c83a 	sub	r2,r4,r2
    a9bc:	18800616 	blt	r3,r2,a9d8 <pbuf_copy+0xb4>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    a9c0:	e0bfff17 	ldw	r2,-4(fp)
    a9c4:	10c0028b 	ldhu	r3,10(r2)
    a9c8:	e0bffc8b 	ldhu	r2,-14(fp)
    a9cc:	1885c83a 	sub	r2,r3,r2
    a9d0:	e0bffd0d 	sth	r2,-12(fp)
    a9d4:	00000506 	br	a9ec <pbuf_copy+0xc8>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    a9d8:	e0bffe17 	ldw	r2,-8(fp)
    a9dc:	10c0028b 	ldhu	r3,10(r2)
    a9e0:	e0bffc0b 	ldhu	r2,-16(fp)
    a9e4:	1885c83a 	sub	r2,r3,r2
    a9e8:	e0bffd0d 	sth	r2,-12(fp)
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    a9ec:	e0bffe17 	ldw	r2,-8(fp)
    a9f0:	10c00117 	ldw	r3,4(r2)
    a9f4:	e0bffc0b 	ldhu	r2,-16(fp)
    a9f8:	1889883a 	add	r4,r3,r2
    a9fc:	e0bfff17 	ldw	r2,-4(fp)
    aa00:	10c00117 	ldw	r3,4(r2)
    aa04:	e0bffc8b 	ldhu	r2,-14(fp)
    aa08:	1887883a 	add	r3,r3,r2
    aa0c:	e0bffd0b 	ldhu	r2,-12(fp)
    aa10:	180b883a 	mov	r5,r3
    aa14:	100d883a 	mov	r6,r2
    aa18:	0017a440 	call	17a44 <memcpy>
    offset_to += len;
    aa1c:	e0fffc0b 	ldhu	r3,-16(fp)
    aa20:	e0bffd0b 	ldhu	r2,-12(fp)
    aa24:	1885883a 	add	r2,r3,r2
    aa28:	e0bffc0d 	sth	r2,-16(fp)
    offset_from += len;
    aa2c:	e0fffc8b 	ldhu	r3,-14(fp)
    aa30:	e0bffd0b 	ldhu	r2,-12(fp)
    aa34:	1885883a 	add	r2,r3,r2
    aa38:	e0bffc8d 	sth	r2,-14(fp)
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    aa3c:	e0bffe17 	ldw	r2,-8(fp)
    aa40:	1080028b 	ldhu	r2,10(r2)
    aa44:	10ffffcc 	andi	r3,r2,65535
    aa48:	e0bffc0b 	ldhu	r2,-16(fp)
    aa4c:	1880092e 	bgeu	r3,r2,aa74 <pbuf_copy+0x150>
    aa50:	010000f4 	movhi	r4,3
    aa54:	213d5d04 	addi	r4,r4,-2700
    aa58:	014000f4 	movhi	r5,3
    aa5c:	297e3004 	addi	r5,r5,-1856
    aa60:	0180db44 	movi	r6,877
    aa64:	01c000f4 	movhi	r7,3
    aa68:	39fd6e04 	addi	r7,r7,-2632
    aa6c:	0017c440 	call	17c44 <printf>
    aa70:	003fff06 	br	aa70 <pbuf_copy+0x14c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    aa74:	e0bfff17 	ldw	r2,-4(fp)
    aa78:	1080028b 	ldhu	r2,10(r2)
    aa7c:	10ffffcc 	andi	r3,r2,65535
    aa80:	e0bffc8b 	ldhu	r2,-14(fp)
    aa84:	1880092e 	bgeu	r3,r2,aaac <pbuf_copy+0x188>
    aa88:	010000f4 	movhi	r4,3
    aa8c:	213d5d04 	addi	r4,r4,-2700
    aa90:	014000f4 	movhi	r5,3
    aa94:	297e3604 	addi	r5,r5,-1832
    aa98:	0180db84 	movi	r6,878
    aa9c:	01c000f4 	movhi	r7,3
    aaa0:	39fd6e04 	addi	r7,r7,-2632
    aaa4:	0017c440 	call	17c44 <printf>
    aaa8:	003fff06 	br	aaa8 <pbuf_copy+0x184>
    if (offset_from >= p_from->len) {
    aaac:	e0bfff17 	ldw	r2,-4(fp)
    aab0:	1080028b 	ldhu	r2,10(r2)
    aab4:	10bfffcc 	andi	r2,r2,65535
    aab8:	e0fffc8b 	ldhu	r3,-14(fp)
    aabc:	18800436 	bltu	r3,r2,aad0 <pbuf_copy+0x1ac>
      /* on to next p_from (if any) */
      offset_from = 0;
    aac0:	e03ffc8d 	sth	zero,-14(fp)
      p_from = p_from->next;
    aac4:	e0bfff17 	ldw	r2,-4(fp)
    aac8:	10800017 	ldw	r2,0(r2)
    aacc:	e0bfff15 	stw	r2,-4(fp)
    }
    if (offset_to == p_to->len) {
    aad0:	e0bffe17 	ldw	r2,-8(fp)
    aad4:	1080028b 	ldhu	r2,10(r2)
    aad8:	10ffffcc 	andi	r3,r2,65535
    aadc:	e0bffc0b 	ldhu	r2,-16(fp)
    aae0:	1880111e 	bne	r3,r2,ab28 <pbuf_copy+0x204>
      /* on to next p_to (if any) */
      offset_to = 0;
    aae4:	e03ffc0d 	sth	zero,-16(fp)
      p_to = p_to->next;
    aae8:	e0bffe17 	ldw	r2,-8(fp)
    aaec:	10800017 	ldw	r2,0(r2)
    aaf0:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    aaf4:	e0bffe17 	ldw	r2,-8(fp)
    aaf8:	10000b1e 	bne	r2,zero,ab28 <pbuf_copy+0x204>
    aafc:	e0bfff17 	ldw	r2,-4(fp)
    ab00:	10000926 	beq	r2,zero,ab28 <pbuf_copy+0x204>
    ab04:	010000f4 	movhi	r4,3
    ab08:	213d5d04 	addi	r4,r4,-2700
    ab0c:	014000f4 	movhi	r5,3
    ab10:	297e3d04 	addi	r5,r5,-1804
    ab14:	0180de04 	movi	r6,888
    ab18:	01c000f4 	movhi	r7,3
    ab1c:	39fd6e04 	addi	r7,r7,-2632
    ab20:	0017c440 	call	17c44 <printf>
    ab24:	003fff06 	br	ab24 <pbuf_copy+0x200>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
    ab28:	e0bfff17 	ldw	r2,-4(fp)
    ab2c:	10001326 	beq	r2,zero,ab7c <pbuf_copy+0x258>
    ab30:	e0bfff17 	ldw	r2,-4(fp)
    ab34:	10c0028b 	ldhu	r3,10(r2)
    ab38:	e0bfff17 	ldw	r2,-4(fp)
    ab3c:	1080020b 	ldhu	r2,8(r2)
    ab40:	18ffffcc 	andi	r3,r3,65535
    ab44:	10bfffcc 	andi	r2,r2,65535
    ab48:	18800c1e 	bne	r3,r2,ab7c <pbuf_copy+0x258>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
    ab4c:	e0bfff17 	ldw	r2,-4(fp)
    ab50:	10800017 	ldw	r2,0(r2)
    ab54:	10000926 	beq	r2,zero,ab7c <pbuf_copy+0x258>
    ab58:	010000f4 	movhi	r4,3
    ab5c:	213d5d04 	addi	r4,r4,-2700
    ab60:	014000f4 	movhi	r5,3
    ab64:	297e4104 	addi	r5,r5,-1788
    ab68:	0180df84 	movi	r6,894
    ab6c:	01c000f4 	movhi	r7,3
    ab70:	39fd6e04 	addi	r7,r7,-2632
    ab74:	0017c440 	call	17c44 <printf>
    ab78:	003fff06 	br	ab78 <pbuf_copy+0x254>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
    ab7c:	e0bffe17 	ldw	r2,-8(fp)
    ab80:	10001326 	beq	r2,zero,abd0 <pbuf_copy+0x2ac>
    ab84:	e0bffe17 	ldw	r2,-8(fp)
    ab88:	10c0028b 	ldhu	r3,10(r2)
    ab8c:	e0bffe17 	ldw	r2,-8(fp)
    ab90:	1080020b 	ldhu	r2,8(r2)
    ab94:	18ffffcc 	andi	r3,r3,65535
    ab98:	10bfffcc 	andi	r2,r2,65535
    ab9c:	18800c1e 	bne	r3,r2,abd0 <pbuf_copy+0x2ac>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
    aba0:	e0bffe17 	ldw	r2,-8(fp)
    aba4:	10800017 	ldw	r2,0(r2)
    aba8:	10000926 	beq	r2,zero,abd0 <pbuf_copy+0x2ac>
    abac:	010000f4 	movhi	r4,3
    abb0:	213d5d04 	addi	r4,r4,-2700
    abb4:	014000f4 	movhi	r5,3
    abb8:	297e4104 	addi	r5,r5,-1788
    abbc:	0180e0c4 	movi	r6,899
    abc0:	01c000f4 	movhi	r7,3
    abc4:	39fd6e04 	addi	r7,r7,-2632
    abc8:	0017c440 	call	17c44 <printf>
    abcc:	003fff06 	br	abcc <pbuf_copy+0x2a8>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
    abd0:	e0bfff17 	ldw	r2,-4(fp)
    abd4:	103f6f1e 	bne	r2,zero,a994 <pbuf_copy+0x70>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
    abd8:	0005883a 	mov	r2,zero
}
    abdc:	e037883a 	mov	sp,fp
    abe0:	dfc00117 	ldw	ra,4(sp)
    abe4:	df000017 	ldw	fp,0(sp)
    abe8:	dec00204 	addi	sp,sp,8
    abec:	f800283a 	ret

0000abf0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
    abf0:	defff704 	addi	sp,sp,-36
    abf4:	dfc00815 	stw	ra,32(sp)
    abf8:	df000715 	stw	fp,28(sp)
    abfc:	df000704 	addi	fp,sp,28
    ac00:	e13ffc15 	stw	r4,-16(fp)
    ac04:	e17ffd15 	stw	r5,-12(fp)
    ac08:	3007883a 	mov	r3,r6
    ac0c:	3805883a 	mov	r2,r7
    ac10:	e0fffe0d 	sth	r3,-8(fp)
    ac14:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
    ac18:	e03ffb0d 	sth	zero,-20(fp)

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
    ac1c:	e0bffc17 	ldw	r2,-16(fp)
    ac20:	1000091e 	bne	r2,zero,ac48 <pbuf_copy_partial+0x58>
    ac24:	010000f4 	movhi	r4,3
    ac28:	213d5d04 	addi	r4,r4,-2700
    ac2c:	014000f4 	movhi	r5,3
    ac30:	297e4c04 	addi	r5,r5,-1744
    ac34:	0180e744 	movi	r6,925
    ac38:	01c000f4 	movhi	r7,3
    ac3c:	39fd6e04 	addi	r7,r7,-2632
    ac40:	0017c440 	call	17c44 <printf>
    ac44:	003fff06 	br	ac44 <pbuf_copy_partial+0x54>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
    ac48:	e0bffd17 	ldw	r2,-12(fp)
    ac4c:	1000091e 	bne	r2,zero,ac74 <pbuf_copy_partial+0x84>
    ac50:	010000f4 	movhi	r4,3
    ac54:	213d5d04 	addi	r4,r4,-2700
    ac58:	014000f4 	movhi	r5,3
    ac5c:	297e5404 	addi	r5,r5,-1712
    ac60:	0180e784 	movi	r6,926
    ac64:	01c000f4 	movhi	r7,3
    ac68:	39fd6e04 	addi	r7,r7,-2632
    ac6c:	0017c440 	call	17c44 <printf>
    ac70:	003fff06 	br	ac70 <pbuf_copy_partial+0x80>

  left = 0;
    ac74:	e03ffa0d 	sth	zero,-24(fp)

  if((buf == NULL) || (dataptr == NULL)) {
    ac78:	e0bffc17 	ldw	r2,-16(fp)
    ac7c:	10000226 	beq	r2,zero,ac88 <pbuf_copy_partial+0x98>
    ac80:	e0bffd17 	ldw	r2,-12(fp)
    ac84:	1000021e 	bne	r2,zero,ac90 <pbuf_copy_partial+0xa0>
    return 0;
    ac88:	0005883a 	mov	r2,zero
    ac8c:	00003a06 	br	ad78 <pbuf_copy_partial+0x188>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    ac90:	e0bffc17 	ldw	r2,-16(fp)
    ac94:	e0bff915 	stw	r2,-28(fp)
    ac98:	00003206 	br	ad64 <pbuf_copy_partial+0x174>
    if ((offset != 0) && (offset >= p->len)) {
    ac9c:	e0bfff0b 	ldhu	r2,-4(fp)
    aca0:	10000b26 	beq	r2,zero,acd0 <pbuf_copy_partial+0xe0>
    aca4:	e0bff917 	ldw	r2,-28(fp)
    aca8:	1080028b 	ldhu	r2,10(r2)
    acac:	10bfffcc 	andi	r2,r2,65535
    acb0:	e0ffff0b 	ldhu	r3,-4(fp)
    acb4:	18800636 	bltu	r3,r2,acd0 <pbuf_copy_partial+0xe0>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    acb8:	e0bff917 	ldw	r2,-28(fp)
    acbc:	1080028b 	ldhu	r2,10(r2)
    acc0:	e0ffff0b 	ldhu	r3,-4(fp)
    acc4:	1885c83a 	sub	r2,r3,r2
    acc8:	e0bfff0d 	sth	r2,-4(fp)
    accc:	00002206 	br	ad58 <pbuf_copy_partial+0x168>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
    acd0:	e0bff917 	ldw	r2,-28(fp)
    acd4:	10c0028b 	ldhu	r3,10(r2)
    acd8:	e0bfff0b 	ldhu	r2,-4(fp)
    acdc:	1885c83a 	sub	r2,r3,r2
    ace0:	e0bffa8d 	sth	r2,-22(fp)
      if (buf_copy_len > len)
    ace4:	e0bffa8b 	ldhu	r2,-22(fp)
    ace8:	e0fffe0b 	ldhu	r3,-8(fp)
    acec:	1880022e 	bgeu	r3,r2,acf8 <pbuf_copy_partial+0x108>
          buf_copy_len = len;
    acf0:	e0bffe0b 	ldhu	r2,-8(fp)
    acf4:	e0bffa8d 	sth	r2,-22(fp)
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
    acf8:	e0bffa0b 	ldhu	r2,-24(fp)
    acfc:	e0fffd17 	ldw	r3,-12(fp)
    ad00:	1889883a 	add	r4,r3,r2
    ad04:	e0bff917 	ldw	r2,-28(fp)
    ad08:	10c00117 	ldw	r3,4(r2)
    ad0c:	e0bfff0b 	ldhu	r2,-4(fp)
    ad10:	1887883a 	add	r3,r3,r2
    ad14:	e0bffa8b 	ldhu	r2,-22(fp)
    ad18:	180b883a 	mov	r5,r3
    ad1c:	100d883a 	mov	r6,r2
    ad20:	0017a440 	call	17a44 <memcpy>
      copied_total += buf_copy_len;
    ad24:	e0fffb0b 	ldhu	r3,-20(fp)
    ad28:	e0bffa8b 	ldhu	r2,-22(fp)
    ad2c:	1885883a 	add	r2,r3,r2
    ad30:	e0bffb0d 	sth	r2,-20(fp)
      left += buf_copy_len;
    ad34:	e0fffa0b 	ldhu	r3,-24(fp)
    ad38:	e0bffa8b 	ldhu	r2,-22(fp)
    ad3c:	1885883a 	add	r2,r3,r2
    ad40:	e0bffa0d 	sth	r2,-24(fp)
      len -= buf_copy_len;
    ad44:	e0fffe0b 	ldhu	r3,-8(fp)
    ad48:	e0bffa8b 	ldhu	r2,-22(fp)
    ad4c:	1885c83a 	sub	r2,r3,r2
    ad50:	e0bffe0d 	sth	r2,-8(fp)
      offset = 0;
    ad54:	e03fff0d 	sth	zero,-4(fp)
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
    ad58:	e0bff917 	ldw	r2,-28(fp)
    ad5c:	10800017 	ldw	r2,0(r2)
    ad60:	e0bff915 	stw	r2,-28(fp)
    ad64:	e0bffe0b 	ldhu	r2,-8(fp)
    ad68:	10000226 	beq	r2,zero,ad74 <pbuf_copy_partial+0x184>
    ad6c:	e0bff917 	ldw	r2,-28(fp)
    ad70:	103fca1e 	bne	r2,zero,ac9c <pbuf_copy_partial+0xac>
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
    ad74:	e0bffb0b 	ldhu	r2,-20(fp)
}
    ad78:	e037883a 	mov	sp,fp
    ad7c:	dfc00117 	ldw	ra,4(sp)
    ad80:	df000017 	ldw	fp,0(sp)
    ad84:	dec00204 	addi	sp,sp,8
    ad88:	f800283a 	ret

0000ad8c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
    ad8c:	defff804 	addi	sp,sp,-32
    ad90:	dfc00715 	stw	ra,28(sp)
    ad94:	df000615 	stw	fp,24(sp)
    ad98:	df000604 	addi	fp,sp,24
    ad9c:	e13ffd15 	stw	r4,-12(fp)
    ada0:	e17ffe15 	stw	r5,-8(fp)
    ada4:	3005883a 	mov	r2,r6
    ada8:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
    adac:	e0bfff0b 	ldhu	r2,-4(fp)
    adb0:	e0bffb8d 	sth	r2,-18(fp)
  u16_t copied_total = 0;
    adb4:	e03ffc0d 	sth	zero,-16(fp)

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return 0;);
    adb8:	e0bffd17 	ldw	r2,-12(fp)
    adbc:	1000091e 	bne	r2,zero,ade4 <pbuf_take+0x58>
    adc0:	010000f4 	movhi	r4,3
    adc4:	213d5d04 	addi	r4,r4,-2700
    adc8:	014000f4 	movhi	r5,3
    adcc:	297e5d04 	addi	r5,r5,-1676
    add0:	0180f344 	movi	r6,973
    add4:	01c000f4 	movhi	r7,3
    add8:	39fd6e04 	addi	r7,r7,-2632
    addc:	0017c440 	call	17c44 <printf>
    ade0:	003fff06 	br	ade0 <pbuf_take+0x54>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return 0;);
    ade4:	e0bffe17 	ldw	r2,-8(fp)
    ade8:	1000091e 	bne	r2,zero,ae10 <pbuf_take+0x84>
    adec:	010000f4 	movhi	r4,3
    adf0:	213d5d04 	addi	r4,r4,-2700
    adf4:	014000f4 	movhi	r5,3
    adf8:	297e6304 	addi	r5,r5,-1652
    adfc:	0180f384 	movi	r6,974
    ae00:	01c000f4 	movhi	r7,3
    ae04:	39fd6e04 	addi	r7,r7,-2632
    ae08:	0017c440 	call	17c44 <printf>
    ae0c:	003fff06 	br	ae0c <pbuf_take+0x80>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    ae10:	e0bffd17 	ldw	r2,-12(fp)
    ae14:	10000726 	beq	r2,zero,ae34 <pbuf_take+0xa8>
    ae18:	e0bffe17 	ldw	r2,-8(fp)
    ae1c:	10000526 	beq	r2,zero,ae34 <pbuf_take+0xa8>
    ae20:	e0bffd17 	ldw	r2,-12(fp)
    ae24:	1080020b 	ldhu	r2,8(r2)
    ae28:	10ffffcc 	andi	r3,r2,65535
    ae2c:	e0bfff0b 	ldhu	r2,-4(fp)
    ae30:	1880022e 	bgeu	r3,r2,ae3c <pbuf_take+0xb0>
    return ERR_ARG;
    ae34:	00bffc84 	movi	r2,-14
    ae38:	00003d06 	br	af30 <pbuf_take+0x1a4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
    ae3c:	e0bffd17 	ldw	r2,-12(fp)
    ae40:	e0bffa15 	stw	r2,-24(fp)
    ae44:	00002906 	br	aeec <pbuf_take+0x160>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    ae48:	e0bffa17 	ldw	r2,-24(fp)
    ae4c:	1000091e 	bne	r2,zero,ae74 <pbuf_take+0xe8>
    ae50:	010000f4 	movhi	r4,3
    ae54:	213d5d04 	addi	r4,r4,-2700
    ae58:	014000f4 	movhi	r5,3
    ae5c:	297e6a04 	addi	r5,r5,-1624
    ae60:	0180f584 	movi	r6,982
    ae64:	01c000f4 	movhi	r7,3
    ae68:	39fd6e04 	addi	r7,r7,-2632
    ae6c:	0017c440 	call	17c44 <printf>
    ae70:	003fff06 	br	ae70 <pbuf_take+0xe4>
    buf_copy_len = total_copy_len;
    ae74:	e0bffb8b 	ldhu	r2,-18(fp)
    ae78:	e0bffb0d 	sth	r2,-20(fp)
    if (buf_copy_len > p->len) {
    ae7c:	e0bffa17 	ldw	r2,-24(fp)
    ae80:	1080028b 	ldhu	r2,10(r2)
    ae84:	10ffffcc 	andi	r3,r2,65535
    ae88:	e0bffb0b 	ldhu	r2,-20(fp)
    ae8c:	1880032e 	bgeu	r3,r2,ae9c <pbuf_take+0x110>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    ae90:	e0bffa17 	ldw	r2,-24(fp)
    ae94:	1080028b 	ldhu	r2,10(r2)
    ae98:	e0bffb0d 	sth	r2,-20(fp)
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
    ae9c:	e0bffa17 	ldw	r2,-24(fp)
    aea0:	11000117 	ldw	r4,4(r2)
    aea4:	e0bffc0b 	ldhu	r2,-16(fp)
    aea8:	e0fffe17 	ldw	r3,-8(fp)
    aeac:	1887883a 	add	r3,r3,r2
    aeb0:	e0bffb0b 	ldhu	r2,-20(fp)
    aeb4:	180b883a 	mov	r5,r3
    aeb8:	100d883a 	mov	r6,r2
    aebc:	0017a440 	call	17a44 <memcpy>
    total_copy_len -= buf_copy_len;
    aec0:	e0fffb8b 	ldhu	r3,-18(fp)
    aec4:	e0bffb0b 	ldhu	r2,-20(fp)
    aec8:	1885c83a 	sub	r2,r3,r2
    aecc:	e0bffb8d 	sth	r2,-18(fp)
    copied_total += buf_copy_len;
    aed0:	e0fffc0b 	ldhu	r3,-16(fp)
    aed4:	e0bffb0b 	ldhu	r2,-20(fp)
    aed8:	1885883a 	add	r2,r3,r2
    aedc:	e0bffc0d 	sth	r2,-16(fp)
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
    aee0:	e0bffa17 	ldw	r2,-24(fp)
    aee4:	10800017 	ldw	r2,0(r2)
    aee8:	e0bffa15 	stw	r2,-24(fp)
    aeec:	e0bffb8b 	ldhu	r2,-18(fp)
    aef0:	103fd51e 	bne	r2,zero,ae48 <pbuf_take+0xbc>
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
    aef4:	e0bffb8b 	ldhu	r2,-18(fp)
    aef8:	1000031e 	bne	r2,zero,af08 <pbuf_take+0x17c>
    aefc:	e0fffc0b 	ldhu	r3,-16(fp)
    af00:	e0bfff0b 	ldhu	r2,-4(fp)
    af04:	18800926 	beq	r3,r2,af2c <pbuf_take+0x1a0>
    af08:	010000f4 	movhi	r4,3
    af0c:	213d5d04 	addi	r4,r4,-2700
    af10:	014000f4 	movhi	r5,3
    af14:	297e7004 	addi	r5,r5,-1600
    af18:	0180f844 	movi	r6,993
    af1c:	01c000f4 	movhi	r7,3
    af20:	39fd6e04 	addi	r7,r7,-2632
    af24:	0017c440 	call	17c44 <printf>
    af28:	003fff06 	br	af28 <pbuf_take+0x19c>
  return ERR_OK;
    af2c:	0005883a 	mov	r2,zero
}
    af30:	e037883a 	mov	sp,fp
    af34:	dfc00117 	ldw	ra,4(sp)
    af38:	df000017 	ldw	fp,0(sp)
    af3c:	dec00204 	addi	sp,sp,8
    af40:	f800283a 	ret

0000af44 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
    af44:	defffa04 	addi	sp,sp,-24
    af48:	dfc00515 	stw	ra,20(sp)
    af4c:	df000415 	stw	fp,16(sp)
    af50:	df000404 	addi	fp,sp,16
    af54:	e13ffe15 	stw	r4,-8(fp)
    af58:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
    af5c:	e0bffe17 	ldw	r2,-8(fp)
    af60:	10800017 	ldw	r2,0(r2)
    af64:	1000021e 	bne	r2,zero,af70 <pbuf_coalesce+0x2c>
    return p;
    af68:	e0bffe17 	ldw	r2,-8(fp)
    af6c:	00001e06 	br	afe8 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
    af70:	e0bffe17 	ldw	r2,-8(fp)
    af74:	1080020b 	ldhu	r2,8(r2)
    af78:	10bfffcc 	andi	r2,r2,65535
    af7c:	e13fff17 	ldw	r4,-4(fp)
    af80:	100b883a 	mov	r5,r2
    af84:	000d883a 	mov	r6,zero
    af88:	0009a600 	call	9a60 <pbuf_alloc>
    af8c:	e0bffc15 	stw	r2,-16(fp)
  if (q == NULL) {
    af90:	e0bffc17 	ldw	r2,-16(fp)
    af94:	1000021e 	bne	r2,zero,afa0 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
    af98:	e0bffe17 	ldw	r2,-8(fp)
    af9c:	00001206 	br	afe8 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
    afa0:	e13ffc17 	ldw	r4,-16(fp)
    afa4:	e17ffe17 	ldw	r5,-8(fp)
    afa8:	000a9240 	call	a924 <pbuf_copy>
    afac:	e0bffd05 	stb	r2,-12(fp)
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
    afb0:	e0bffd07 	ldb	r2,-12(fp)
    afb4:	10000926 	beq	r2,zero,afdc <pbuf_coalesce+0x98>
    afb8:	010000f4 	movhi	r4,3
    afbc:	213d5d04 	addi	r4,r4,-2700
    afc0:	014000f4 	movhi	r5,3
    afc4:	297e7604 	addi	r5,r5,-1576
    afc8:	0180ffc4 	movi	r6,1023
    afcc:	01c000f4 	movhi	r7,3
    afd0:	39fd6e04 	addi	r7,r7,-2632
    afd4:	0017c440 	call	17c44 <printf>
    afd8:	003fff06 	br	afd8 <pbuf_coalesce+0x94>
  pbuf_free(p);
    afdc:	e13ffe17 	ldw	r4,-8(fp)
    afe0:	000a4200 	call	a420 <pbuf_free>
  return q;
    afe4:	e0bffc17 	ldw	r2,-16(fp)
}
    afe8:	e037883a 	mov	sp,fp
    afec:	dfc00117 	ldw	ra,4(sp)
    aff0:	df000017 	ldw	fp,0(sp)
    aff4:	dec00204 	addi	sp,sp,8
    aff8:	f800283a 	ret

0000affc <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(struct pbuf* p, u16_t offset)
{
    affc:	defffb04 	addi	sp,sp,-20
    b000:	df000415 	stw	fp,16(sp)
    b004:	df000404 	addi	fp,sp,16
    b008:	e13ffe15 	stw	r4,-8(fp)
    b00c:	2805883a 	mov	r2,r5
    b010:	e0bfff0d 	sth	r2,-4(fp)
  u16_t copy_from = offset;
    b014:	e0bfff0b 	ldhu	r2,-4(fp)
    b018:	e0bffc0d 	sth	r2,-16(fp)
  struct pbuf* q = p;
    b01c:	e0bffe17 	ldw	r2,-8(fp)
    b020:	e0bffd15 	stw	r2,-12(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
    b024:	00000806 	br	b048 <pbuf_get_at+0x4c>
    copy_from -= q->len;
    b028:	e0bffd17 	ldw	r2,-12(fp)
    b02c:	1080028b 	ldhu	r2,10(r2)
    b030:	e0fffc0b 	ldhu	r3,-16(fp)
    b034:	1885c83a 	sub	r2,r3,r2
    b038:	e0bffc0d 	sth	r2,-16(fp)
    q = q->next;
    b03c:	e0bffd17 	ldw	r2,-12(fp)
    b040:	10800017 	ldw	r2,0(r2)
    b044:	e0bffd15 	stw	r2,-12(fp)
{
  u16_t copy_from = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
    b048:	e0bffd17 	ldw	r2,-12(fp)
    b04c:	10000526 	beq	r2,zero,b064 <pbuf_get_at+0x68>
    b050:	e0bffd17 	ldw	r2,-12(fp)
    b054:	1080028b 	ldhu	r2,10(r2)
    b058:	10bfffcc 	andi	r2,r2,65535
    b05c:	e0fffc0b 	ldhu	r3,-16(fp)
    b060:	18bff12e 	bgeu	r3,r2,b028 <pbuf_get_at+0x2c>
    copy_from -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > copy_from)) {
    b064:	e0bffd17 	ldw	r2,-12(fp)
    b068:	10000b26 	beq	r2,zero,b098 <pbuf_get_at+0x9c>
    b06c:	e0bffd17 	ldw	r2,-12(fp)
    b070:	1080028b 	ldhu	r2,10(r2)
    b074:	10bfffcc 	andi	r2,r2,65535
    b078:	e0fffc0b 	ldhu	r3,-16(fp)
    b07c:	1880062e 	bgeu	r3,r2,b098 <pbuf_get_at+0x9c>
    return ((u8_t*)q->payload)[copy_from];
    b080:	e0bffd17 	ldw	r2,-12(fp)
    b084:	10c00117 	ldw	r3,4(r2)
    b088:	e0bffc0b 	ldhu	r2,-16(fp)
    b08c:	1885883a 	add	r2,r3,r2
    b090:	10800003 	ldbu	r2,0(r2)
    b094:	00000106 	br	b09c <pbuf_get_at+0xa0>
  }
  return 0;
    b098:	0005883a 	mov	r2,zero
}
    b09c:	e037883a 	mov	sp,fp
    b0a0:	df000017 	ldw	fp,0(sp)
    b0a4:	dec00104 	addi	sp,sp,4
    b0a8:	f800283a 	ret

0000b0ac <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
    b0ac:	defff704 	addi	sp,sp,-36
    b0b0:	dfc00815 	stw	ra,32(sp)
    b0b4:	df000715 	stw	fp,28(sp)
    b0b8:	df000704 	addi	fp,sp,28
    b0bc:	e13ffc15 	stw	r4,-16(fp)
    b0c0:	2807883a 	mov	r3,r5
    b0c4:	e1bffe15 	stw	r6,-8(fp)
    b0c8:	3805883a 	mov	r2,r7
    b0cc:	e0fffd0d 	sth	r3,-12(fp)
    b0d0:	e0bfff0d 	sth	r2,-4(fp)
  u16_t start = offset;
    b0d4:	e0bffd0b 	ldhu	r2,-12(fp)
    b0d8:	e0bff90d 	sth	r2,-28(fp)
  struct pbuf* q = p;
    b0dc:	e0bffc17 	ldw	r2,-16(fp)
    b0e0:	e0bffa15 	stw	r2,-24(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
    b0e4:	00000806 	br	b108 <pbuf_memcmp+0x5c>
    start -= q->len;
    b0e8:	e0bffa17 	ldw	r2,-24(fp)
    b0ec:	1080028b 	ldhu	r2,10(r2)
    b0f0:	e0fff90b 	ldhu	r3,-28(fp)
    b0f4:	1885c83a 	sub	r2,r3,r2
    b0f8:	e0bff90d 	sth	r2,-28(fp)
    q = q->next;
    b0fc:	e0bffa17 	ldw	r2,-24(fp)
    b100:	10800017 	ldw	r2,0(r2)
    b104:	e0bffa15 	stw	r2,-24(fp)
{
  u16_t start = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
    b108:	e0bffa17 	ldw	r2,-24(fp)
    b10c:	10000526 	beq	r2,zero,b124 <pbuf_memcmp+0x78>
    b110:	e0bffa17 	ldw	r2,-24(fp)
    b114:	1080028b 	ldhu	r2,10(r2)
    b118:	10bfffcc 	andi	r2,r2,65535
    b11c:	e0fff90b 	ldhu	r3,-28(fp)
    b120:	18bff12e 	bgeu	r3,r2,b0e8 <pbuf_memcmp+0x3c>
    start -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    b124:	e0bffa17 	ldw	r2,-24(fp)
    b128:	10002226 	beq	r2,zero,b1b4 <pbuf_memcmp+0x108>
    b12c:	e0bffa17 	ldw	r2,-24(fp)
    b130:	1080028b 	ldhu	r2,10(r2)
    b134:	10bfffcc 	andi	r2,r2,65535
    b138:	e0fff90b 	ldhu	r3,-28(fp)
    b13c:	18801d2e 	bgeu	r3,r2,b1b4 <pbuf_memcmp+0x108>
    u16_t i;
    for(i = 0; i < n; i++) {
    b140:	e03ffb0d 	sth	zero,-20(fp)
    b144:	00001606 	br	b1a0 <pbuf_memcmp+0xf4>
      u8_t a = pbuf_get_at(q, start + i);
    b148:	e0fff90b 	ldhu	r3,-28(fp)
    b14c:	e0bffb0b 	ldhu	r2,-20(fp)
    b150:	1885883a 	add	r2,r3,r2
    b154:	10bfffcc 	andi	r2,r2,65535
    b158:	e13ffa17 	ldw	r4,-24(fp)
    b15c:	100b883a 	mov	r5,r2
    b160:	000affc0 	call	affc <pbuf_get_at>
    b164:	e0bffb85 	stb	r2,-18(fp)
      u8_t b = ((u8_t*)s2)[i];
    b168:	e0bffb0b 	ldhu	r2,-20(fp)
    b16c:	e0fffe17 	ldw	r3,-8(fp)
    b170:	1885883a 	add	r2,r3,r2
    b174:	10800003 	ldbu	r2,0(r2)
    b178:	e0bffbc5 	stb	r2,-17(fp)
      if (a != b) {
    b17c:	e0fffb83 	ldbu	r3,-18(fp)
    b180:	e0bffbc3 	ldbu	r2,-17(fp)
    b184:	18800326 	beq	r3,r2,b194 <pbuf_memcmp+0xe8>
        return i+1;
    b188:	e0bffb0b 	ldhu	r2,-20(fp)
    b18c:	10800044 	addi	r2,r2,1
    b190:	00000906 	br	b1b8 <pbuf_memcmp+0x10c>
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
    b194:	e0bffb0b 	ldhu	r2,-20(fp)
    b198:	10800044 	addi	r2,r2,1
    b19c:	e0bffb0d 	sth	r2,-20(fp)
    b1a0:	e0fffb0b 	ldhu	r3,-20(fp)
    b1a4:	e0bfff0b 	ldhu	r2,-4(fp)
    b1a8:	18bfe736 	bltu	r3,r2,b148 <pbuf_memcmp+0x9c>
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
        return i+1;
      }
    }
    return 0;
    b1ac:	0005883a 	mov	r2,zero
    b1b0:	00000106 	br	b1b8 <pbuf_memcmp+0x10c>
  }
  return 0xffff;
    b1b4:	00bfffc4 	movi	r2,-1
}
    b1b8:	e037883a 	mov	sp,fp
    b1bc:	dfc00117 	ldw	ra,4(sp)
    b1c0:	df000017 	ldw	fp,0(sp)
    b1c4:	dec00204 	addi	sp,sp,8
    b1c8:	f800283a 	ret

0000b1cc <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
    b1cc:	defff804 	addi	sp,sp,-32
    b1d0:	dfc00715 	stw	ra,28(sp)
    b1d4:	df000615 	stw	fp,24(sp)
    b1d8:	df000604 	addi	fp,sp,24
    b1dc:	e13ffc15 	stw	r4,-16(fp)
    b1e0:	e17ffd15 	stw	r5,-12(fp)
    b1e4:	3007883a 	mov	r3,r6
    b1e8:	3805883a 	mov	r2,r7
    b1ec:	e0fffe0d 	sth	r3,-8(fp)
    b1f0:	e0bfff0d 	sth	r2,-4(fp)
  u16_t i;
  u16_t max = p->tot_len - mem_len;
    b1f4:	e0bffc17 	ldw	r2,-16(fp)
    b1f8:	10c0020b 	ldhu	r3,8(r2)
    b1fc:	e0bffe0b 	ldhu	r2,-8(fp)
    b200:	1885c83a 	sub	r2,r3,r2
    b204:	e0bffa8d 	sth	r2,-22(fp)
  if (p->tot_len >= mem_len + start_offset) {
    b208:	e0bffc17 	ldw	r2,-16(fp)
    b20c:	1080020b 	ldhu	r2,8(r2)
    b210:	10ffffcc 	andi	r3,r2,65535
    b214:	e13ffe0b 	ldhu	r4,-8(fp)
    b218:	e0bfff0b 	ldhu	r2,-4(fp)
    b21c:	2085883a 	add	r2,r4,r2
    b220:	18801616 	blt	r3,r2,b27c <pbuf_memfind+0xb0>
    for(i = start_offset; i <= max; ) {
    b224:	e0bfff0b 	ldhu	r2,-4(fp)
    b228:	e0bffa0d 	sth	r2,-24(fp)
    b22c:	00001006 	br	b270 <pbuf_memfind+0xa4>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
    b230:	e0fffa0b 	ldhu	r3,-24(fp)
    b234:	e0bffe0b 	ldhu	r2,-8(fp)
    b238:	e13ffc17 	ldw	r4,-16(fp)
    b23c:	180b883a 	mov	r5,r3
    b240:	e1bffd17 	ldw	r6,-12(fp)
    b244:	100f883a 	mov	r7,r2
    b248:	000b0ac0 	call	b0ac <pbuf_memcmp>
    b24c:	e0bffb0d 	sth	r2,-20(fp)
      if (plus == 0) {
    b250:	e0bffb0b 	ldhu	r2,-20(fp)
    b254:	1000021e 	bne	r2,zero,b260 <pbuf_memfind+0x94>
        return i;
    b258:	e0bffa0b 	ldhu	r2,-24(fp)
    b25c:	00000806 	br	b280 <pbuf_memfind+0xb4>
      } else {
        i += plus;
    b260:	e0fffa0b 	ldhu	r3,-24(fp)
    b264:	e0bffb0b 	ldhu	r2,-20(fp)
    b268:	1885883a 	add	r2,r3,r2
    b26c:	e0bffa0d 	sth	r2,-24(fp)
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  if (p->tot_len >= mem_len + start_offset) {
    for(i = start_offset; i <= max; ) {
    b270:	e0bffa0b 	ldhu	r2,-24(fp)
    b274:	e0fffa8b 	ldhu	r3,-22(fp)
    b278:	18bfed2e 	bgeu	r3,r2,b230 <pbuf_memfind+0x64>
      } else {
        i += plus;
      }
    }
  }
  return 0xFFFF;
    b27c:	00bfffc4 	movi	r2,-1
}
    b280:	e037883a 	mov	sp,fp
    b284:	dfc00117 	ldw	ra,4(sp)
    b288:	df000017 	ldw	fp,0(sp)
    b28c:	dec00204 	addi	sp,sp,8
    b290:	f800283a 	ret

0000b294 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(struct pbuf* p, const char* substr)
{
    b294:	defffb04 	addi	sp,sp,-20
    b298:	dfc00415 	stw	ra,16(sp)
    b29c:	df000315 	stw	fp,12(sp)
    b2a0:	df000304 	addi	fp,sp,12
    b2a4:	e13ffe15 	stw	r4,-8(fp)
    b2a8:	e17fff15 	stw	r5,-4(fp)
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
    b2ac:	e0bfff17 	ldw	r2,-4(fp)
    b2b0:	10000b26 	beq	r2,zero,b2e0 <pbuf_strstr+0x4c>
    b2b4:	e0bfff17 	ldw	r2,-4(fp)
    b2b8:	10800003 	ldbu	r2,0(r2)
    b2bc:	10803fcc 	andi	r2,r2,255
    b2c0:	1080201c 	xori	r2,r2,128
    b2c4:	10bfe004 	addi	r2,r2,-128
    b2c8:	10000526 	beq	r2,zero,b2e0 <pbuf_strstr+0x4c>
    b2cc:	e0bffe17 	ldw	r2,-8(fp)
    b2d0:	1080020b 	ldhu	r2,8(r2)
    b2d4:	10ffffcc 	andi	r3,r2,65535
    b2d8:	00bfffd4 	movui	r2,65535
    b2dc:	1880021e 	bne	r3,r2,b2e8 <pbuf_strstr+0x54>
    return 0xFFFF;
    b2e0:	00bfffc4 	movi	r2,-1
    b2e4:	00000f06 	br	b324 <pbuf_strstr+0x90>
  }
  substr_len = strlen(substr);
    b2e8:	e13fff17 	ldw	r4,-4(fp)
    b2ec:	0017f680 	call	17f68 <strlen>
    b2f0:	e0bffd15 	stw	r2,-12(fp)
  if (substr_len >= 0xFFFF) {
    b2f4:	e0bffd17 	ldw	r2,-12(fp)
    b2f8:	10bffff0 	cmpltui	r2,r2,65535
    b2fc:	1000021e 	bne	r2,zero,b308 <pbuf_strstr+0x74>
    return 0xFFFF;
    b300:	00bfffc4 	movi	r2,-1
    b304:	00000706 	br	b324 <pbuf_strstr+0x90>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
    b308:	e0bffd17 	ldw	r2,-12(fp)
    b30c:	10bfffcc 	andi	r2,r2,65535
    b310:	e13ffe17 	ldw	r4,-8(fp)
    b314:	e17fff17 	ldw	r5,-4(fp)
    b318:	100d883a 	mov	r6,r2
    b31c:	000f883a 	mov	r7,zero
    b320:	000b1cc0 	call	b1cc <pbuf_memfind>
}
    b324:	e037883a 	mov	sp,fp
    b328:	dfc00117 	ldw	ra,4(sp)
    b32c:	df000017 	ldw	fp,0(sp)
    b330:	dec00204 	addi	sp,sp,8
    b334:	f800283a 	ret

0000b338 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
    b338:	defff704 	addi	sp,sp,-36
    b33c:	dfc00815 	stw	ra,32(sp)
    b340:	df000715 	stw	fp,28(sp)
    b344:	df000704 	addi	fp,sp,28
    b348:	e13ffe15 	stw	r4,-8(fp)
    b34c:	e17fff15 	stw	r5,-4(fp)
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
    b350:	e03ffb05 	stb	zero,-20(fp)

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
    b354:	e0bffe17 	ldw	r2,-8(fp)
    b358:	10800117 	ldw	r2,4(r2)
    b35c:	e0bffc15 	stw	r2,-16(fp)
  proto = IPH_PROTO(iphdr);
    b360:	e0bffc17 	ldw	r2,-16(fp)
    b364:	10800243 	ldbu	r2,9(r2)
    b368:	10803fcc 	andi	r2,r2,255
    b36c:	e0bffd0d 	sth	r2,-12(fp)

  prev = NULL;
    b370:	e03ffa15 	stw	zero,-24(fp)
  pcb = raw_pcbs;
    b374:	d0a8b517 	ldw	r2,-23852(gp)
    b378:	e0bff915 	stw	r2,-28(fp)
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    b37c:	00003206 	br	b448 <raw_input+0x110>
    if ((pcb->protocol == proto) &&
    b380:	e0bff917 	ldw	r2,-28(fp)
    b384:	10800403 	ldbu	r2,16(r2)
    b388:	10c03fcc 	andi	r3,r2,255
    b38c:	e0bffd0f 	ldh	r2,-12(fp)
    b390:	1880281e 	bne	r3,r2,b434 <raw_input+0xfc>
        (ip_addr_isany(&pcb->local_ip) ||
    b394:	e0bff917 	ldw	r2,-28(fp)
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
    b398:	10000926 	beq	r2,zero,b3c0 <raw_input+0x88>
        (ip_addr_isany(&pcb->local_ip) ||
    b39c:	e0bff917 	ldw	r2,-28(fp)
    b3a0:	10800017 	ldw	r2,0(r2)
    b3a4:	10000626 	beq	r2,zero,b3c0 <raw_input+0x88>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
    b3a8:	e0bff917 	ldw	r2,-28(fp)
    b3ac:	10c00017 	ldw	r3,0(r2)
    b3b0:	008000f4 	movhi	r2,3
    b3b4:	109bd204 	addi	r2,r2,28488
    b3b8:	10800017 	ldw	r2,0(r2)
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
    b3bc:	18801d1e 	bne	r3,r2,b434 <raw_input+0xfc>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
    b3c0:	e0bff917 	ldw	r2,-28(fp)
    b3c4:	10800517 	ldw	r2,20(r2)
    b3c8:	10001a26 	beq	r2,zero,b434 <raw_input+0xfc>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
    b3cc:	e0bff917 	ldw	r2,-28(fp)
    b3d0:	10c00517 	ldw	r3,20(r2)
    b3d4:	e0bff917 	ldw	r2,-28(fp)
    b3d8:	10800617 	ldw	r2,24(r2)
    b3dc:	1009883a 	mov	r4,r2
    b3e0:	e17ff917 	ldw	r5,-28(fp)
    b3e4:	e1bffe17 	ldw	r6,-8(fp)
    b3e8:	01c000f4 	movhi	r7,3
    b3ec:	39dbd004 	addi	r7,r7,28480
    b3f0:	183ee83a 	callr	r3
    b3f4:	10803fcc 	andi	r2,r2,255
    b3f8:	10000e26 	beq	r2,zero,b434 <raw_input+0xfc>
            /* receive function ate the packet */
            p = NULL;
    b3fc:	e03ffe15 	stw	zero,-8(fp)
            eaten = 1;
    b400:	00800044 	movi	r2,1
    b404:	e0bffb05 	stb	r2,-20(fp)
            if (prev != NULL) {
    b408:	e0bffa17 	ldw	r2,-24(fp)
    b40c:	10000926 	beq	r2,zero,b434 <raw_input+0xfc>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
    b410:	e0bff917 	ldw	r2,-28(fp)
    b414:	10c00317 	ldw	r3,12(r2)
    b418:	e0bffa17 	ldw	r2,-24(fp)
    b41c:	10c00315 	stw	r3,12(r2)
              pcb->next = raw_pcbs;
    b420:	d0e8b517 	ldw	r3,-23852(gp)
    b424:	e0bff917 	ldw	r2,-28(fp)
    b428:	10c00315 	stw	r3,12(r2)
              raw_pcbs = pcb;
    b42c:	e0bff917 	ldw	r2,-28(fp)
    b430:	d0a8b515 	stw	r2,-23852(gp)
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    b434:	e0bff917 	ldw	r2,-28(fp)
    b438:	e0bffa15 	stw	r2,-24(fp)
    pcb = pcb->next;
    b43c:	e0bff917 	ldw	r2,-28(fp)
    b440:	10800317 	ldw	r2,12(r2)
    b444:	e0bff915 	stw	r2,-28(fp)

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    b448:	e0bffb03 	ldbu	r2,-20(fp)
    b44c:	1000021e 	bne	r2,zero,b458 <raw_input+0x120>
    b450:	e0bff917 	ldw	r2,-28(fp)
    b454:	103fca1e 	bne	r2,zero,b380 <raw_input+0x48>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
    b458:	e0bffb03 	ldbu	r2,-20(fp)
}
    b45c:	e037883a 	mov	sp,fp
    b460:	dfc00117 	ldw	ra,4(sp)
    b464:	df000017 	ldw	fp,0(sp)
    b468:	dec00204 	addi	sp,sp,8
    b46c:	f800283a 	ret

0000b470 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
    b470:	defffd04 	addi	sp,sp,-12
    b474:	df000215 	stw	fp,8(sp)
    b478:	df000204 	addi	fp,sp,8
    b47c:	e13ffe15 	stw	r4,-8(fp)
    b480:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->local_ip, ipaddr);
    b484:	e0bfff17 	ldw	r2,-4(fp)
    b488:	10000326 	beq	r2,zero,b498 <raw_bind+0x28>
    b48c:	e0bfff17 	ldw	r2,-4(fp)
    b490:	10800017 	ldw	r2,0(r2)
    b494:	00000106 	br	b49c <raw_bind+0x2c>
    b498:	0005883a 	mov	r2,zero
    b49c:	e0fffe17 	ldw	r3,-8(fp)
    b4a0:	18800015 	stw	r2,0(r3)
  return ERR_OK;
    b4a4:	0005883a 	mov	r2,zero
}
    b4a8:	e037883a 	mov	sp,fp
    b4ac:	df000017 	ldw	fp,0(sp)
    b4b0:	dec00104 	addi	sp,sp,4
    b4b4:	f800283a 	ret

0000b4b8 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
    b4b8:	defffd04 	addi	sp,sp,-12
    b4bc:	df000215 	stw	fp,8(sp)
    b4c0:	df000204 	addi	fp,sp,8
    b4c4:	e13ffe15 	stw	r4,-8(fp)
    b4c8:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->remote_ip, ipaddr);
    b4cc:	e0bfff17 	ldw	r2,-4(fp)
    b4d0:	10000326 	beq	r2,zero,b4e0 <raw_connect+0x28>
    b4d4:	e0bfff17 	ldw	r2,-4(fp)
    b4d8:	10800017 	ldw	r2,0(r2)
    b4dc:	00000106 	br	b4e4 <raw_connect+0x2c>
    b4e0:	0005883a 	mov	r2,zero
    b4e4:	e0fffe17 	ldw	r3,-8(fp)
    b4e8:	18800115 	stw	r2,4(r3)
  return ERR_OK;
    b4ec:	0005883a 	mov	r2,zero
}
    b4f0:	e037883a 	mov	sp,fp
    b4f4:	df000017 	ldw	fp,0(sp)
    b4f8:	dec00104 	addi	sp,sp,4
    b4fc:	f800283a 	ret

0000b500 <raw_recv>:
 * @return non-zero if the packet was free()d, zero if the packet remains
 * available for others.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
    b500:	defffc04 	addi	sp,sp,-16
    b504:	df000315 	stw	fp,12(sp)
    b508:	df000304 	addi	fp,sp,12
    b50c:	e13ffd15 	stw	r4,-12(fp)
    b510:	e17ffe15 	stw	r5,-8(fp)
    b514:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
    b518:	e0bffd17 	ldw	r2,-12(fp)
    b51c:	e0fffe17 	ldw	r3,-8(fp)
    b520:	10c00515 	stw	r3,20(r2)
  pcb->recv_arg = recv_arg;
    b524:	e0bffd17 	ldw	r2,-12(fp)
    b528:	e0ffff17 	ldw	r3,-4(fp)
    b52c:	10c00615 	stw	r3,24(r2)
}
    b530:	e037883a 	mov	sp,fp
    b534:	df000017 	ldw	fp,0(sp)
    b538:	dec00104 	addi	sp,sp,4
    b53c:	f800283a 	ret

0000b540 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *ipaddr)
{
    b540:	defff404 	addi	sp,sp,-48
    b544:	dfc00b15 	stw	ra,44(sp)
    b548:	df000a15 	stw	fp,40(sp)
    b54c:	df000a04 	addi	fp,sp,40
    b550:	e13ffd15 	stw	r4,-12(fp)
    b554:	e17ffe15 	stw	r5,-8(fp)
    b558:	e1bfff15 	stw	r6,-4(fp)
  struct pbuf *q; /* q will be sent down the stack */
  
  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));
  
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, IP_HLEN)) {
    b55c:	e13ffe17 	ldw	r4,-8(fp)
    b560:	01400504 	movi	r5,20
    b564:	000a2280 	call	a228 <pbuf_header>
    b568:	10803fcc 	andi	r2,r2,255
    b56c:	10001126 	beq	r2,zero,b5b4 <raw_sendto+0x74>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
    b570:	01000044 	movi	r4,1
    b574:	000b883a 	mov	r5,zero
    b578:	000d883a 	mov	r6,zero
    b57c:	0009a600 	call	9a60 <pbuf_alloc>
    b580:	e0bffa15 	stw	r2,-24(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
    b584:	e0bffa17 	ldw	r2,-24(fp)
    b588:	1000021e 	bne	r2,zero,b594 <raw_sendto+0x54>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
    b58c:	00bfffc4 	movi	r2,-1
    b590:	00004806 	br	b6b4 <raw_sendto+0x174>
    }
    if (p->tot_len != 0) {
    b594:	e0bffe17 	ldw	r2,-8(fp)
    b598:	1080020b 	ldhu	r2,8(r2)
    b59c:	10bfffcc 	andi	r2,r2,65535
    b5a0:	10001426 	beq	r2,zero,b5f4 <raw_sendto+0xb4>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
    b5a4:	e13ffa17 	ldw	r4,-24(fp)
    b5a8:	e17ffe17 	ldw	r5,-8(fp)
    b5ac:	000a7b80 	call	a7b8 <pbuf_chain>
    b5b0:	00001006 	br	b5f4 <raw_sendto+0xb4>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
    b5b4:	e0bffe17 	ldw	r2,-8(fp)
    b5b8:	e0bffa15 	stw	r2,-24(fp)
    if(pbuf_header(q, -IP_HLEN)) {
    b5bc:	e13ffa17 	ldw	r4,-24(fp)
    b5c0:	017ffb04 	movi	r5,-20
    b5c4:	000a2280 	call	a228 <pbuf_header>
    b5c8:	10803fcc 	andi	r2,r2,255
    b5cc:	10000926 	beq	r2,zero,b5f4 <raw_sendto+0xb4>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
    b5d0:	010000f4 	movhi	r4,3
    b5d4:	213e7b04 	addi	r4,r4,-1556
    b5d8:	014000f4 	movhi	r5,3
    b5dc:	297e8504 	addi	r5,r5,-1516
    b5e0:	018039c4 	movi	r6,231
    b5e4:	01c000f4 	movhi	r7,3
    b5e8:	39fe8f04 	addi	r7,r7,-1476
    b5ec:	0017c440 	call	17c44 <printf>
    b5f0:	003fff06 	br	b5f0 <raw_sendto+0xb0>
      return ERR_MEM;
    }
  }

  if ((netif = ip_route(ipaddr)) == NULL) {
    b5f4:	e13fff17 	ldw	r4,-4(fp)
    b5f8:	0005c4c0 	call	5c4c <ip_route>
    b5fc:	e0bffb15 	stw	r2,-20(fp)
    b600:	e0bffb17 	ldw	r2,-20(fp)
    b604:	1000071e 	bne	r2,zero,b624 <raw_sendto+0xe4>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
    b608:	e0fffa17 	ldw	r3,-24(fp)
    b60c:	e0bffe17 	ldw	r2,-8(fp)
    b610:	18800226 	beq	r3,r2,b61c <raw_sendto+0xdc>
      pbuf_free(q);
    b614:	e13ffa17 	ldw	r4,-24(fp)
    b618:	000a4200 	call	a420 <pbuf_free>
    }
    return ERR_RTE;
    b61c:	00bfff04 	movi	r2,-4
    b620:	00002406 	br	b6b4 <raw_sendto+0x174>
    }
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
    b624:	e0bffd17 	ldw	r2,-12(fp)
    b628:	10000326 	beq	r2,zero,b638 <raw_sendto+0xf8>
    b62c:	e0bffd17 	ldw	r2,-12(fp)
    b630:	10800017 	ldw	r2,0(r2)
    b634:	1000041e 	bne	r2,zero,b648 <raw_sendto+0x108>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
    b638:	e0bffb17 	ldw	r2,-20(fp)
    b63c:	10800104 	addi	r2,r2,4
    b640:	e0bff915 	stw	r2,-28(fp)
    b644:	00000206 	br	b650 <raw_sendto+0x110>
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
    b648:	e0bffd17 	ldw	r2,-12(fp)
    b64c:	e0bff915 	stw	r2,-28(fp)
  }

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
    b650:	e0bffd17 	ldw	r2,-12(fp)
    b654:	10800283 	ldbu	r2,10(r2)
    b658:	10803fcc 	andi	r2,r2,255
    b65c:	e0fffd17 	ldw	r3,-12(fp)
    b660:	18c00243 	ldbu	r3,9(r3)
    b664:	19003fcc 	andi	r4,r3,255
    b668:	e0fffd17 	ldw	r3,-12(fp)
    b66c:	18c00403 	ldbu	r3,16(r3)
    b670:	18c03fcc 	andi	r3,r3,255
    b674:	d9000015 	stw	r4,0(sp)
    b678:	d8c00115 	stw	r3,4(sp)
    b67c:	e0fffb17 	ldw	r3,-20(fp)
    b680:	d8c00215 	stw	r3,8(sp)
    b684:	e13ffa17 	ldw	r4,-24(fp)
    b688:	e17ff917 	ldw	r5,-28(fp)
    b68c:	e1bfff17 	ldw	r6,-4(fp)
    b690:	100f883a 	mov	r7,r2
    b694:	00062400 	call	6240 <ip_output_if>
    b698:	e0bffc05 	stb	r2,-16(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
    b69c:	e0fffa17 	ldw	r3,-24(fp)
    b6a0:	e0bffe17 	ldw	r2,-8(fp)
    b6a4:	18800226 	beq	r3,r2,b6b0 <raw_sendto+0x170>
    /* free the header */
    pbuf_free(q);
    b6a8:	e13ffa17 	ldw	r4,-24(fp)
    b6ac:	000a4200 	call	a420 <pbuf_free>
  }
  return err;
    b6b0:	e0bffc03 	ldbu	r2,-16(fp)
}
    b6b4:	e037883a 	mov	sp,fp
    b6b8:	dfc00117 	ldw	ra,4(sp)
    b6bc:	df000017 	ldw	fp,0(sp)
    b6c0:	dec00204 	addi	sp,sp,8
    b6c4:	f800283a 	ret

0000b6c8 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
    b6c8:	defffc04 	addi	sp,sp,-16
    b6cc:	dfc00315 	stw	ra,12(sp)
    b6d0:	df000215 	stw	fp,8(sp)
    b6d4:	df000204 	addi	fp,sp,8
    b6d8:	e13ffe15 	stw	r4,-8(fp)
    b6dc:	e17fff15 	stw	r5,-4(fp)
  return raw_sendto(pcb, p, &pcb->remote_ip);
    b6e0:	e0bffe17 	ldw	r2,-8(fp)
    b6e4:	10800104 	addi	r2,r2,4
    b6e8:	e13ffe17 	ldw	r4,-8(fp)
    b6ec:	e17fff17 	ldw	r5,-4(fp)
    b6f0:	100d883a 	mov	r6,r2
    b6f4:	000b5400 	call	b540 <raw_sendto>
}
    b6f8:	e037883a 	mov	sp,fp
    b6fc:	dfc00117 	ldw	ra,4(sp)
    b700:	df000017 	ldw	fp,0(sp)
    b704:	dec00204 	addi	sp,sp,8
    b708:	f800283a 	ret

0000b70c <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
    b70c:	defffc04 	addi	sp,sp,-16
    b710:	dfc00315 	stw	ra,12(sp)
    b714:	df000215 	stw	fp,8(sp)
    b718:	df000204 	addi	fp,sp,8
    b71c:	e13fff15 	stw	r4,-4(fp)
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
    b720:	d0e8b517 	ldw	r3,-23852(gp)
    b724:	e0bfff17 	ldw	r2,-4(fp)
    b728:	1880041e 	bne	r3,r2,b73c <raw_remove+0x30>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    b72c:	d0a8b517 	ldw	r2,-23852(gp)
    b730:	10800317 	ldw	r2,12(r2)
    b734:	d0a8b515 	stw	r2,-23852(gp)
    b738:	00001306 	br	b788 <raw_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
    b73c:	d0a8b517 	ldw	r2,-23852(gp)
    b740:	e0bffe15 	stw	r2,-8(fp)
    b744:	00000e06 	br	b780 <raw_remove+0x74>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
    b748:	e0bffe17 	ldw	r2,-8(fp)
    b74c:	10800317 	ldw	r2,12(r2)
    b750:	10000826 	beq	r2,zero,b774 <raw_remove+0x68>
    b754:	e0bffe17 	ldw	r2,-8(fp)
    b758:	10c00317 	ldw	r3,12(r2)
    b75c:	e0bfff17 	ldw	r2,-4(fp)
    b760:	1880041e 	bne	r3,r2,b774 <raw_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
    b764:	e0bfff17 	ldw	r2,-4(fp)
    b768:	10c00317 	ldw	r3,12(r2)
    b76c:	e0bffe17 	ldw	r2,-8(fp)
    b770:	10c00315 	stw	r3,12(r2)
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
    b774:	e0bffe17 	ldw	r2,-8(fp)
    b778:	10800317 	ldw	r2,12(r2)
    b77c:	e0bffe15 	stw	r2,-8(fp)
    b780:	e0bffe17 	ldw	r2,-8(fp)
    b784:	103ff01e 	bne	r2,zero,b748 <raw_remove+0x3c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
    b788:	0009883a 	mov	r4,zero
    b78c:	e17fff17 	ldw	r5,-4(fp)
    b790:	00091c00 	call	91c0 <memp_free>
}
    b794:	e037883a 	mov	sp,fp
    b798:	dfc00117 	ldw	ra,4(sp)
    b79c:	df000017 	ldw	fp,0(sp)
    b7a0:	dec00204 	addi	sp,sp,8
    b7a4:	f800283a 	ret

0000b7a8 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
    b7a8:	defffc04 	addi	sp,sp,-16
    b7ac:	dfc00315 	stw	ra,12(sp)
    b7b0:	df000215 	stw	fp,8(sp)
    b7b4:	df000204 	addi	fp,sp,8
    b7b8:	2005883a 	mov	r2,r4
    b7bc:	e0bfff05 	stb	r2,-4(fp)
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
    b7c0:	0009883a 	mov	r4,zero
    b7c4:	0008fe40 	call	8fe4 <memp_malloc>
    b7c8:	e0bffe15 	stw	r2,-8(fp)
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
    b7cc:	e0bffe17 	ldw	r2,-8(fp)
    b7d0:	10000f26 	beq	r2,zero,b810 <raw_new+0x68>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
    b7d4:	e13ffe17 	ldw	r4,-8(fp)
    b7d8:	000b883a 	mov	r5,zero
    b7dc:	01800704 	movi	r6,28
    b7e0:	0017b3c0 	call	17b3c <memset>
    pcb->protocol = proto;
    b7e4:	e0bffe17 	ldw	r2,-8(fp)
    b7e8:	e0ffff03 	ldbu	r3,-4(fp)
    b7ec:	10c00405 	stb	r3,16(r2)
    pcb->ttl = RAW_TTL;
    b7f0:	e0bffe17 	ldw	r2,-8(fp)
    b7f4:	00ffffc4 	movi	r3,-1
    b7f8:	10c00285 	stb	r3,10(r2)
    pcb->next = raw_pcbs;
    b7fc:	d0e8b517 	ldw	r3,-23852(gp)
    b800:	e0bffe17 	ldw	r2,-8(fp)
    b804:	10c00315 	stw	r3,12(r2)
    raw_pcbs = pcb;
    b808:	e0bffe17 	ldw	r2,-8(fp)
    b80c:	d0a8b515 	stw	r2,-23852(gp)
  }
  return pcb;
    b810:	e0bffe17 	ldw	r2,-8(fp)
}
    b814:	e037883a 	mov	sp,fp
    b818:	dfc00117 	ldw	ra,4(sp)
    b81c:	df000017 	ldw	fp,0(sp)
    b820:	dec00204 	addi	sp,sp,8
    b824:	f800283a 	ret

0000b828 <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
    b828:	deffff04 	addi	sp,sp,-4
    b82c:	df000015 	stw	fp,0(sp)
    b830:	d839883a 	mov	fp,sp
#endif /* MEMP_STATS */
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
    b834:	e037883a 	mov	sp,fp
    b838:	df000017 	ldw	fp,0(sp)
    b83c:	dec00104 	addi	sp,sp,4
    b840:	f800283a 	ret

0000b844 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
    b844:	deffff04 	addi	sp,sp,-4
    b848:	df000015 	stw	fp,0(sp)
    b84c:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
    b850:	e037883a 	mov	sp,fp
    b854:	df000017 	ldw	fp,0(sp)
    b858:	dec00104 	addi	sp,sp,4
    b85c:	f800283a 	ret

0000b860 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
    b860:	defffe04 	addi	sp,sp,-8
    b864:	dfc00115 	stw	ra,4(sp)
    b868:	df000015 	stw	fp,0(sp)
    b86c:	d839883a 	mov	fp,sp
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
    b870:	000d15c0 	call	d15c <tcp_fasttmr>

  if (++tcp_timer & 1) {
    b874:	d0a8b603 	ldbu	r2,-23848(gp)
    b878:	10800044 	addi	r2,r2,1
    b87c:	d0a8b605 	stb	r2,-23848(gp)
    b880:	d0a8b603 	ldbu	r2,-23848(gp)
    b884:	10803fcc 	andi	r2,r2,255
    b888:	1080004c 	andi	r2,r2,1
    b88c:	10000126 	beq	r2,zero,b894 <tcp_tmr+0x34>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
    b890:	000c8b00 	call	c8b0 <tcp_slowtmr>
  }
}
    b894:	e037883a 	mov	sp,fp
    b898:	dfc00117 	ldw	ra,4(sp)
    b89c:	df000017 	ldw	fp,0(sp)
    b8a0:	dec00204 	addi	sp,sp,8
    b8a4:	f800283a 	ret

0000b8a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
    b8a8:	defff904 	addi	sp,sp,-28
    b8ac:	dfc00615 	stw	ra,24(sp)
    b8b0:	df000515 	stw	fp,20(sp)
    b8b4:	df000504 	addi	fp,sp,20
    b8b8:	e13ffe15 	stw	r4,-8(fp)
    b8bc:	2805883a 	mov	r2,r5
    b8c0:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
    b8c4:	e0bfff03 	ldbu	r2,-4(fp)
    b8c8:	10006126 	beq	r2,zero,ba50 <tcp_close_shutdown+0x1a8>
    b8cc:	e0bffe17 	ldw	r2,-8(fp)
    b8d0:	10800617 	ldw	r2,24(r2)
    b8d4:	10800120 	cmpeqi	r2,r2,4
    b8d8:	1000041e 	bne	r2,zero,b8ec <tcp_close_shutdown+0x44>
    b8dc:	e0bffe17 	ldw	r2,-8(fp)
    b8e0:	10800617 	ldw	r2,24(r2)
    b8e4:	108001d8 	cmpnei	r2,r2,7
    b8e8:	1000591e 	bne	r2,zero,ba50 <tcp_close_shutdown+0x1a8>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
    b8ec:	e0bffe17 	ldw	r2,-8(fp)
    b8f0:	10801f17 	ldw	r2,124(r2)
    b8f4:	1000051e 	bne	r2,zero,b90c <tcp_close_shutdown+0x64>
    b8f8:	e0bffe17 	ldw	r2,-8(fp)
    b8fc:	10800c0b 	ldhu	r2,48(r2)
    b900:	10bfffcc 	andi	r2,r2,65535
    b904:	10820020 	cmpeqi	r2,r2,2048
    b908:	1000511e 	bne	r2,zero,ba50 <tcp_close_shutdown+0x1a8>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
    b90c:	e0bffe17 	ldw	r2,-8(fp)
    b910:	10800883 	ldbu	r2,34(r2)
    b914:	10803fcc 	andi	r2,r2,255
    b918:	1080040c 	andi	r2,r2,16
    b91c:	1000091e 	bne	r2,zero,b944 <tcp_close_shutdown+0x9c>
    b920:	010000f4 	movhi	r4,3
    b924:	213ec504 	addi	r4,r4,-1260
    b928:	014000f4 	movhi	r5,3
    b92c:	297ecf04 	addi	r5,r5,-1220
    b930:	01802c84 	movi	r6,178
    b934:	01c000f4 	movhi	r7,3
    b938:	39fed604 	addi	r7,r7,-1192
    b93c:	0017c440 	call	17c44 <printf>
    b940:	003fff06 	br	b940 <tcp_close_shutdown+0x98>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    b944:	e0bffe17 	ldw	r2,-8(fp)
    b948:	11001517 	ldw	r4,84(r2)
    b94c:	e0bffe17 	ldw	r2,-8(fp)
    b950:	11400b17 	ldw	r5,44(r2)
    b954:	e0fffe17 	ldw	r3,-8(fp)
    b958:	e0bffe17 	ldw	r2,-8(fp)
    b95c:	10800104 	addi	r2,r2,4
        pcb->local_port, pcb->remote_port);
    b960:	e1bffe17 	ldw	r6,-8(fp)
    b964:	3180078b 	ldhu	r6,30(r6)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    b968:	31ffffcc 	andi	r7,r6,65535
        pcb->local_port, pcb->remote_port);
    b96c:	e1bffe17 	ldw	r6,-8(fp)
    b970:	3180080b 	ldhu	r6,32(r6)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    b974:	31bfffcc 	andi	r6,r6,65535
    b978:	d9c00015 	stw	r7,0(sp)
    b97c:	d9800115 	stw	r6,4(sp)
    b980:	180d883a 	mov	r6,r3
    b984:	100f883a 	mov	r7,r2
    b988:	00140540 	call	14054 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
    b98c:	e13ffe17 	ldw	r4,-8(fp)
    b990:	000db040 	call	db04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
    b994:	d0e8b717 	ldw	r3,-23844(gp)
    b998:	e0bffe17 	ldw	r2,-8(fp)
    b99c:	1880041e 	bne	r3,r2,b9b0 <tcp_close_shutdown+0x108>
    b9a0:	d0a8b717 	ldw	r2,-23844(gp)
    b9a4:	10800317 	ldw	r2,12(r2)
    b9a8:	d0a8b715 	stw	r2,-23844(gp)
    b9ac:	00001106 	br	b9f4 <tcp_close_shutdown+0x14c>
    b9b0:	d0a8b717 	ldw	r2,-23844(gp)
    b9b4:	d0a8ba15 	stw	r2,-23832(gp)
    b9b8:	00000c06 	br	b9ec <tcp_close_shutdown+0x144>
    b9bc:	d0a8ba17 	ldw	r2,-23832(gp)
    b9c0:	10c00317 	ldw	r3,12(r2)
    b9c4:	e0bffe17 	ldw	r2,-8(fp)
    b9c8:	1880051e 	bne	r3,r2,b9e0 <tcp_close_shutdown+0x138>
    b9cc:	d0a8ba17 	ldw	r2,-23832(gp)
    b9d0:	e0fffe17 	ldw	r3,-8(fp)
    b9d4:	18c00317 	ldw	r3,12(r3)
    b9d8:	10c00315 	stw	r3,12(r2)
    b9dc:	00000506 	br	b9f4 <tcp_close_shutdown+0x14c>
    b9e0:	d0a8ba17 	ldw	r2,-23832(gp)
    b9e4:	10800317 	ldw	r2,12(r2)
    b9e8:	d0a8ba15 	stw	r2,-23832(gp)
    b9ec:	d0a8ba17 	ldw	r2,-23832(gp)
    b9f0:	103ff21e 	bne	r2,zero,b9bc <tcp_close_shutdown+0x114>
    b9f4:	e0bffe17 	ldw	r2,-8(fp)
    b9f8:	10000315 	stw	zero,12(r2)
    b9fc:	00800044 	movi	r2,1
    ba00:	d0a8b685 	stb	r2,-23846(gp)
      if (pcb->state == ESTABLISHED) {
    ba04:	e0bffe17 	ldw	r2,-8(fp)
    ba08:	10800617 	ldw	r2,24(r2)
    ba0c:	10800118 	cmpnei	r2,r2,4
    ba10:	10000a1e 	bne	r2,zero,ba3c <tcp_close_shutdown+0x194>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
    ba14:	e0bffe17 	ldw	r2,-8(fp)
    ba18:	00c00284 	movi	r3,10
    ba1c:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
    ba20:	d0e8bc17 	ldw	r3,-23824(gp)
    ba24:	e0bffe17 	ldw	r2,-8(fp)
    ba28:	10c00315 	stw	r3,12(r2)
    ba2c:	e0bffe17 	ldw	r2,-8(fp)
    ba30:	d0a8bc15 	stw	r2,-23824(gp)
    ba34:	00149c40 	call	149c4 <tcp_timer_needed>
    ba38:	00000306 	br	ba48 <tcp_close_shutdown+0x1a0>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
    ba3c:	01000084 	movi	r4,2
    ba40:	e17ffe17 	ldw	r5,-8(fp)
    ba44:	00091c00 	call	91c0 <memp_free>
      }
      return ERR_OK;
    ba48:	0005883a 	mov	r2,zero
    ba4c:	00007506 	br	bc24 <tcp_close_shutdown+0x37c>
    }
  }

  switch (pcb->state) {
    ba50:	e0bffe17 	ldw	r2,-8(fp)
    ba54:	10800617 	ldw	r2,24(r2)
    ba58:	10c00228 	cmpgeui	r3,r2,8
    ba5c:	1800621e 	bne	r3,zero,bbe8 <tcp_close_shutdown+0x340>
    ba60:	1085883a 	add	r2,r2,r2
    ba64:	1087883a 	add	r3,r2,r2
    ba68:	00800074 	movhi	r2,1
    ba6c:	10ae9f04 	addi	r2,r2,-17796
    ba70:	1885883a 	add	r2,r3,r2
    ba74:	10800017 	ldw	r2,0(r2)
    ba78:	1000683a 	jmp	r2
    ba7c:	0000ba9c 	xori	zero,zero,746
    ba80:	0000bb2c 	andhi	zero,zero,748
    ba84:	0000bb50 	cmplti	zero,zero,749
    ba88:	0000bb7c 	xorhi	zero,zero,749
    ba8c:	0000bba0 	cmpeqi	zero,zero,750
    ba90:	0000bbe8 	cmpgeui	zero,zero,751
    ba94:	0000bbe8 	cmpgeui	zero,zero,751
    ba98:	0000bbc4 	movi	zero,751
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    ba9c:	e03ffd05 	stb	zero,-12(fp)
    if (pcb->local_port != 0) {
    baa0:	e0bffe17 	ldw	r2,-8(fp)
    baa4:	1080078b 	ldhu	r2,30(r2)
    baa8:	10bfffcc 	andi	r2,r2,65535
    baac:	10001a26 	beq	r2,zero,bb18 <tcp_close_shutdown+0x270>
      TCP_RMV(&tcp_bound_pcbs, pcb);
    bab0:	d0e8bb17 	ldw	r3,-23828(gp)
    bab4:	e0bffe17 	ldw	r2,-8(fp)
    bab8:	1880041e 	bne	r3,r2,bacc <tcp_close_shutdown+0x224>
    babc:	d0a8bb17 	ldw	r2,-23828(gp)
    bac0:	10800317 	ldw	r2,12(r2)
    bac4:	d0a8bb15 	stw	r2,-23828(gp)
    bac8:	00001106 	br	bb10 <tcp_close_shutdown+0x268>
    bacc:	d0a8bb17 	ldw	r2,-23828(gp)
    bad0:	d0a8ba15 	stw	r2,-23832(gp)
    bad4:	00000c06 	br	bb08 <tcp_close_shutdown+0x260>
    bad8:	d0a8ba17 	ldw	r2,-23832(gp)
    badc:	10c00317 	ldw	r3,12(r2)
    bae0:	e0bffe17 	ldw	r2,-8(fp)
    bae4:	1880051e 	bne	r3,r2,bafc <tcp_close_shutdown+0x254>
    bae8:	d0a8ba17 	ldw	r2,-23832(gp)
    baec:	e0fffe17 	ldw	r3,-8(fp)
    baf0:	18c00317 	ldw	r3,12(r3)
    baf4:	10c00315 	stw	r3,12(r2)
    baf8:	00000506 	br	bb10 <tcp_close_shutdown+0x268>
    bafc:	d0a8ba17 	ldw	r2,-23832(gp)
    bb00:	10800317 	ldw	r2,12(r2)
    bb04:	d0a8ba15 	stw	r2,-23832(gp)
    bb08:	d0a8ba17 	ldw	r2,-23832(gp)
    bb0c:	103ff21e 	bne	r2,zero,bad8 <tcp_close_shutdown+0x230>
    bb10:	e0bffe17 	ldw	r2,-8(fp)
    bb14:	10000315 	stw	zero,12(r2)
    }
    memp_free(MEMP_TCP_PCB, pcb);
    bb18:	01000084 	movi	r4,2
    bb1c:	e17ffe17 	ldw	r5,-8(fp)
    bb20:	00091c00 	call	91c0 <memp_free>
    pcb = NULL;
    bb24:	e03ffe15 	stw	zero,-8(fp)
    break;
    bb28:	00003706 	br	bc08 <tcp_close_shutdown+0x360>
  case LISTEN:
    err = ERR_OK;
    bb2c:	e03ffd05 	stb	zero,-12(fp)
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
    bb30:	d128b904 	addi	r4,gp,-23836
    bb34:	e17ffe17 	ldw	r5,-8(fp)
    bb38:	000dbe00 	call	dbe0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    bb3c:	010000c4 	movi	r4,3
    bb40:	e17ffe17 	ldw	r5,-8(fp)
    bb44:	00091c00 	call	91c0 <memp_free>
    pcb = NULL;
    bb48:	e03ffe15 	stw	zero,-8(fp)
    break;
    bb4c:	00002e06 	br	bc08 <tcp_close_shutdown+0x360>
  case SYN_SENT:
    err = ERR_OK;
    bb50:	e03ffd05 	stb	zero,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
    bb54:	d128b704 	addi	r4,gp,-23844
    bb58:	e17ffe17 	ldw	r5,-8(fp)
    bb5c:	000dbe00 	call	dbe0 <tcp_pcb_remove>
    bb60:	00800044 	movi	r2,1
    bb64:	d0a8b685 	stb	r2,-23846(gp)
    memp_free(MEMP_TCP_PCB, pcb);
    bb68:	01000084 	movi	r4,2
    bb6c:	e17ffe17 	ldw	r5,-8(fp)
    bb70:	00091c00 	call	91c0 <memp_free>
    pcb = NULL;
    bb74:	e03ffe15 	stw	zero,-8(fp)
    snmp_inc_tcpattemptfails();
    break;
    bb78:	00002306 	br	bc08 <tcp_close_shutdown+0x360>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
    bb7c:	e13ffe17 	ldw	r4,-8(fp)
    bb80:	0011f8c0 	call	11f8c <tcp_send_fin>
    bb84:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
    bb88:	e0bffd07 	ldb	r2,-12(fp)
    bb8c:	1000191e 	bne	r2,zero,bbf4 <tcp_close_shutdown+0x34c>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    bb90:	e0bffe17 	ldw	r2,-8(fp)
    bb94:	00c00144 	movi	r3,5
    bb98:	10c00615 	stw	r3,24(r2)
    }
    break;
    bb9c:	00001506 	br	bbf4 <tcp_close_shutdown+0x34c>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
    bba0:	e13ffe17 	ldw	r4,-8(fp)
    bba4:	0011f8c0 	call	11f8c <tcp_send_fin>
    bba8:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
    bbac:	e0bffd07 	ldb	r2,-12(fp)
    bbb0:	1000121e 	bne	r2,zero,bbfc <tcp_close_shutdown+0x354>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
    bbb8:	00c00144 	movi	r3,5
    bbbc:	10c00615 	stw	r3,24(r2)
    }
    break;
    bbc0:	00000e06 	br	bbfc <tcp_close_shutdown+0x354>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    bbc4:	e13ffe17 	ldw	r4,-8(fp)
    bbc8:	0011f8c0 	call	11f8c <tcp_send_fin>
    bbcc:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
    bbd0:	e0bffd07 	ldb	r2,-12(fp)
    bbd4:	10000b1e 	bne	r2,zero,bc04 <tcp_close_shutdown+0x35c>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    bbd8:	e0bffe17 	ldw	r2,-8(fp)
    bbdc:	00c00244 	movi	r3,9
    bbe0:	10c00615 	stw	r3,24(r2)
    }
    break;
    bbe4:	00000706 	br	bc04 <tcp_close_shutdown+0x35c>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
    bbe8:	e03ffd05 	stb	zero,-12(fp)
    pcb = NULL;
    bbec:	e03ffe15 	stw	zero,-8(fp)
    break;
    bbf0:	00000506 	br	bc08 <tcp_close_shutdown+0x360>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    }
    break;
    bbf4:	0001883a 	nop
    bbf8:	00000306 	br	bc08 <tcp_close_shutdown+0x360>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
    bbfc:	0001883a 	nop
    bc00:	00000106 	br	bc08 <tcp_close_shutdown+0x360>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    }
    break;
    bc04:	0001883a 	nop
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
    bc08:	e0bffe17 	ldw	r2,-8(fp)
    bc0c:	10000426 	beq	r2,zero,bc20 <tcp_close_shutdown+0x378>
    bc10:	e0bffd07 	ldb	r2,-12(fp)
    bc14:	1000021e 	bne	r2,zero,bc20 <tcp_close_shutdown+0x378>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
    bc18:	e13ffe17 	ldw	r4,-8(fp)
    bc1c:	00134600 	call	13460 <tcp_output>
  }
  return err;
    bc20:	e0bffd03 	ldbu	r2,-12(fp)
}
    bc24:	e037883a 	mov	sp,fp
    bc28:	dfc00117 	ldw	ra,4(sp)
    bc2c:	df000017 	ldw	fp,0(sp)
    bc30:	dec00204 	addi	sp,sp,8
    bc34:	f800283a 	ret

0000bc38 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
    bc38:	defffd04 	addi	sp,sp,-12
    bc3c:	dfc00215 	stw	ra,8(sp)
    bc40:	df000115 	stw	fp,4(sp)
    bc44:	df000104 	addi	fp,sp,4
    bc48:	e13fff15 	stw	r4,-4(fp)
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
    bc4c:	e0bfff17 	ldw	r2,-4(fp)
    bc50:	10800617 	ldw	r2,24(r2)
    bc54:	10800060 	cmpeqi	r2,r2,1
    bc58:	1000061e 	bne	r2,zero,bc74 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
    bc5c:	e0bfff17 	ldw	r2,-4(fp)
    bc60:	10800883 	ldbu	r2,34(r2)
    bc64:	10800414 	ori	r2,r2,16
    bc68:	1007883a 	mov	r3,r2
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	10c00885 	stb	r3,34(r2)
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
    bc74:	e13fff17 	ldw	r4,-4(fp)
    bc78:	01400044 	movi	r5,1
    bc7c:	000b8a80 	call	b8a8 <tcp_close_shutdown>
}
    bc80:	e037883a 	mov	sp,fp
    bc84:	dfc00117 	ldw	ra,4(sp)
    bc88:	df000017 	ldw	fp,0(sp)
    bc8c:	dec00204 	addi	sp,sp,8
    bc90:	f800283a 	ret

0000bc94 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
    bc94:	defffb04 	addi	sp,sp,-20
    bc98:	dfc00415 	stw	ra,16(sp)
    bc9c:	df000315 	stw	fp,12(sp)
    bca0:	df000304 	addi	fp,sp,12
    bca4:	e13ffd15 	stw	r4,-12(fp)
    bca8:	e17ffe15 	stw	r5,-8(fp)
    bcac:	e1bfff15 	stw	r6,-4(fp)
  if (pcb->state == LISTEN) {
    bcb0:	e0bffd17 	ldw	r2,-12(fp)
    bcb4:	10800617 	ldw	r2,24(r2)
    bcb8:	10800058 	cmpnei	r2,r2,1
    bcbc:	1000021e 	bne	r2,zero,bcc8 <tcp_shutdown+0x34>
    return ERR_CONN;
    bcc0:	00bffcc4 	movi	r2,-13
    bcc4:	00002a06 	br	bd70 <tcp_shutdown+0xdc>
  }
  if (shut_rx) {
    bcc8:	e0bffe17 	ldw	r2,-8(fp)
    bccc:	10001526 	beq	r2,zero,bd24 <tcp_shutdown+0x90>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
    bcd0:	e0bffd17 	ldw	r2,-12(fp)
    bcd4:	10800883 	ldbu	r2,34(r2)
    bcd8:	10800414 	ori	r2,r2,16
    bcdc:	1007883a 	mov	r3,r2
    bce0:	e0bffd17 	ldw	r2,-12(fp)
    bce4:	10c00885 	stb	r3,34(r2)
    if (shut_tx) {
    bce8:	e0bfff17 	ldw	r2,-4(fp)
    bcec:	10000426 	beq	r2,zero,bd00 <tcp_shutdown+0x6c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
    bcf0:	e13ffd17 	ldw	r4,-12(fp)
    bcf4:	01400044 	movi	r5,1
    bcf8:	000b8a80 	call	b8a8 <tcp_close_shutdown>
    bcfc:	00001c06 	br	bd70 <tcp_shutdown+0xdc>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
    bd00:	e0bffd17 	ldw	r2,-12(fp)
    bd04:	10801f17 	ldw	r2,124(r2)
    bd08:	10000626 	beq	r2,zero,bd24 <tcp_shutdown+0x90>
      pbuf_free(pcb->refused_data);
    bd0c:	e0bffd17 	ldw	r2,-12(fp)
    bd10:	10801f17 	ldw	r2,124(r2)
    bd14:	1009883a 	mov	r4,r2
    bd18:	000a4200 	call	a420 <pbuf_free>
      pcb->refused_data = NULL;
    bd1c:	e0bffd17 	ldw	r2,-12(fp)
    bd20:	10001f15 	stw	zero,124(r2)
    }
  }
  if (shut_tx) {
    bd24:	e0bfff17 	ldw	r2,-4(fp)
    bd28:	10001026 	beq	r2,zero,bd6c <tcp_shutdown+0xd8>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
    bd2c:	e0bffd17 	ldw	r2,-12(fp)
    bd30:	10800617 	ldw	r2,24(r2)
    bd34:	10c000f0 	cmpltui	r3,r2,3
    bd38:	18000a1e 	bne	r3,zero,bd64 <tcp_shutdown+0xd0>
    bd3c:	10c00170 	cmpltui	r3,r2,5
    bd40:	1800021e 	bne	r3,zero,bd4c <tcp_shutdown+0xb8>
    bd44:	108001e0 	cmpeqi	r2,r2,7
    bd48:	10000626 	beq	r2,zero,bd64 <tcp_shutdown+0xd0>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, shut_rx);
    bd4c:	e0bffe17 	ldw	r2,-8(fp)
    bd50:	10803fcc 	andi	r2,r2,255
    bd54:	e13ffd17 	ldw	r4,-12(fp)
    bd58:	100b883a 	mov	r5,r2
    bd5c:	000b8a80 	call	b8a8 <tcp_close_shutdown>
    bd60:	00000306 	br	bd70 <tcp_shutdown+0xdc>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
    bd64:	00bffcc4 	movi	r2,-13
    bd68:	00000106 	br	bd70 <tcp_shutdown+0xdc>
    }
  }
  return ERR_OK;
    bd6c:	0005883a 	mov	r2,zero
}
    bd70:	e037883a 	mov	sp,fp
    bd74:	dfc00117 	ldw	ra,4(sp)
    bd78:	df000017 	ldw	fp,0(sp)
    bd7c:	dec00204 	addi	sp,sp,8
    bd80:	f800283a 	ret

0000bd84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
    bd84:	defff604 	addi	sp,sp,-40
    bd88:	dfc00915 	stw	ra,36(sp)
    bd8c:	df000815 	stw	fp,32(sp)
    bd90:	df000804 	addi	fp,sp,32
    bd94:	e13ffe15 	stw	r4,-8(fp)
    bd98:	e17fff15 	stw	r5,-4(fp)
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    bd9c:	e0bffe17 	ldw	r2,-8(fp)
    bda0:	10800617 	ldw	r2,24(r2)
    bda4:	10800058 	cmpnei	r2,r2,1
    bda8:	1000091e 	bne	r2,zero,bdd0 <tcp_abandon+0x4c>
    bdac:	010000f4 	movhi	r4,3
    bdb0:	213ec504 	addi	r4,r4,-1260
    bdb4:	014000f4 	movhi	r5,3
    bdb8:	297edb04 	addi	r5,r5,-1172
    bdbc:	01805bc4 	movi	r6,367
    bdc0:	01c000f4 	movhi	r7,3
    bdc4:	39fed604 	addi	r7,r7,-1192
    bdc8:	0017c440 	call	17c44 <printf>
    bdcc:	003fff06 	br	bdcc <tcp_abandon+0x48>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    bdd0:	e0bffe17 	ldw	r2,-8(fp)
    bdd4:	10800617 	ldw	r2,24(r2)
    bdd8:	10800298 	cmpnei	r2,r2,10
    bddc:	1000071e 	bne	r2,zero,bdfc <tcp_abandon+0x78>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    bde0:	d128bc04 	addi	r4,gp,-23824
    bde4:	e17ffe17 	ldw	r5,-8(fp)
    bde8:	000dbe00 	call	dbe0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
    bdec:	01000084 	movi	r4,2
    bdf0:	e17ffe17 	ldw	r5,-8(fp)
    bdf4:	00091c00 	call	91c0 <memp_free>
    bdf8:	00004106 	br	bf00 <tcp_abandon+0x17c>
  } else {
    seqno = pcb->snd_nxt;
    bdfc:	e0bffe17 	ldw	r2,-8(fp)
    be00:	10801517 	ldw	r2,84(r2)
    be04:	e0bffa15 	stw	r2,-24(fp)
    ackno = pcb->rcv_nxt;
    be08:	e0bffe17 	ldw	r2,-8(fp)
    be0c:	10800b17 	ldw	r2,44(r2)
    be10:	e0bffb15 	stw	r2,-20(fp)
#if LWIP_CALLBACK_API
    errf = pcb->errf;
    be14:	e0bffe17 	ldw	r2,-8(fp)
    be18:	10802417 	ldw	r2,144(r2)
    be1c:	e0bffc15 	stw	r2,-16(fp)
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
    be20:	e0bffe17 	ldw	r2,-8(fp)
    be24:	10800417 	ldw	r2,16(r2)
    be28:	e0bffd15 	stw	r2,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
    be2c:	d128b704 	addi	r4,gp,-23844
    be30:	e17ffe17 	ldw	r5,-8(fp)
    be34:	000dbe00 	call	dbe0 <tcp_pcb_remove>
    be38:	00800044 	movi	r2,1
    be3c:	d0a8b685 	stb	r2,-23846(gp)
    if (pcb->unacked != NULL) {
    be40:	e0bffe17 	ldw	r2,-8(fp)
    be44:	10801d17 	ldw	r2,116(r2)
    be48:	10000426 	beq	r2,zero,be5c <tcp_abandon+0xd8>
      tcp_segs_free(pcb->unacked);
    be4c:	e0bffe17 	ldw	r2,-8(fp)
    be50:	10801d17 	ldw	r2,116(r2)
    be54:	1009883a 	mov	r4,r2
    be58:	000d3a40 	call	d3a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
    be5c:	e0bffe17 	ldw	r2,-8(fp)
    be60:	10801c17 	ldw	r2,112(r2)
    be64:	10000426 	beq	r2,zero,be78 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unsent);
    be68:	e0bffe17 	ldw	r2,-8(fp)
    be6c:	10801c17 	ldw	r2,112(r2)
    be70:	1009883a 	mov	r4,r2
    be74:	000d3a40 	call	d3a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
    be78:	e0bffe17 	ldw	r2,-8(fp)
    be7c:	10801e17 	ldw	r2,120(r2)
    be80:	10000426 	beq	r2,zero,be94 <tcp_abandon+0x110>
      tcp_segs_free(pcb->ooseq);
    be84:	e0bffe17 	ldw	r2,-8(fp)
    be88:	10801e17 	ldw	r2,120(r2)
    be8c:	1009883a 	mov	r4,r2
    be90:	000d3a40 	call	d3a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
    be94:	e0bfff17 	ldw	r2,-4(fp)
    be98:	10001026 	beq	r2,zero,bedc <tcp_abandon+0x158>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    be9c:	e0fffe17 	ldw	r3,-8(fp)
    bea0:	e0bffe17 	ldw	r2,-8(fp)
    bea4:	10800104 	addi	r2,r2,4
    bea8:	e13ffe17 	ldw	r4,-8(fp)
    beac:	2100078b 	ldhu	r4,30(r4)
    beb0:	217fffcc 	andi	r5,r4,65535
    beb4:	e13ffe17 	ldw	r4,-8(fp)
    beb8:	2100080b 	ldhu	r4,32(r4)
    bebc:	213fffcc 	andi	r4,r4,65535
    bec0:	d9400015 	stw	r5,0(sp)
    bec4:	d9000115 	stw	r4,4(sp)
    bec8:	e13ffa17 	ldw	r4,-24(fp)
    becc:	e17ffb17 	ldw	r5,-20(fp)
    bed0:	180d883a 	mov	r6,r3
    bed4:	100f883a 	mov	r7,r2
    bed8:	00140540 	call	14054 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
    bedc:	01000084 	movi	r4,2
    bee0:	e17ffe17 	ldw	r5,-8(fp)
    bee4:	00091c00 	call	91c0 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
    bee8:	e0bffc17 	ldw	r2,-16(fp)
    beec:	10000426 	beq	r2,zero,bf00 <tcp_abandon+0x17c>
    bef0:	e0bffc17 	ldw	r2,-16(fp)
    bef4:	e13ffd17 	ldw	r4,-12(fp)
    bef8:	017ffd84 	movi	r5,-10
    befc:	103ee83a 	callr	r2
  }
}
    bf00:	e037883a 	mov	sp,fp
    bf04:	dfc00117 	ldw	ra,4(sp)
    bf08:	df000017 	ldw	fp,0(sp)
    bf0c:	dec00204 	addi	sp,sp,8
    bf10:	f800283a 	ret

0000bf14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
    bf14:	defffd04 	addi	sp,sp,-12
    bf18:	dfc00215 	stw	ra,8(sp)
    bf1c:	df000115 	stw	fp,4(sp)
    bf20:	df000104 	addi	fp,sp,4
    bf24:	e13fff15 	stw	r4,-4(fp)
  tcp_abandon(pcb, 1);
    bf28:	e13fff17 	ldw	r4,-4(fp)
    bf2c:	01400044 	movi	r5,1
    bf30:	000bd840 	call	bd84 <tcp_abandon>
}
    bf34:	e037883a 	mov	sp,fp
    bf38:	dfc00117 	ldw	ra,4(sp)
    bf3c:	df000017 	ldw	fp,0(sp)
    bf40:	dec00204 	addi	sp,sp,8
    bf44:	f800283a 	ret

0000bf48 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
    bf48:	defff804 	addi	sp,sp,-32
    bf4c:	dfc00715 	stw	ra,28(sp)
    bf50:	df000615 	stw	fp,24(sp)
    bf54:	df000604 	addi	fp,sp,24
    bf58:	e13ffd15 	stw	r4,-12(fp)
    bf5c:	e17ffe15 	stw	r5,-8(fp)
    bf60:	3005883a 	mov	r2,r6
    bf64:	e0bfff0d 	sth	r2,-4(fp)
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
    bf68:	00800104 	movi	r2,4
    bf6c:	e0bffc15 	stw	r2,-16(fp)
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
    bf70:	e0bffd17 	ldw	r2,-12(fp)
    bf74:	10800617 	ldw	r2,24(r2)
    bf78:	10000926 	beq	r2,zero,bfa0 <tcp_bind+0x58>
    bf7c:	010000f4 	movhi	r4,3
    bf80:	213ec504 	addi	r4,r4,-1260
    bf84:	014000f4 	movhi	r5,3
    bf88:	297ee804 	addi	r5,r5,-1120
    bf8c:	01806dc4 	movi	r6,439
    bf90:	01c000f4 	movhi	r7,3
    bf94:	39fed604 	addi	r7,r7,-1192
    bf98:	0017c440 	call	17c44 <printf>
    bf9c:	003fff06 	br	bf9c <tcp_bind+0x54>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
    bfa0:	e0bfff0b 	ldhu	r2,-4(fp)
    bfa4:	1000061e 	bne	r2,zero,bfc0 <tcp_bind+0x78>
    port = tcp_new_port();
    bfa8:	000c51c0 	call	c51c <tcp_new_port>
    bfac:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
    bfb0:	e0bfff0b 	ldhu	r2,-4(fp)
    bfb4:	1000021e 	bne	r2,zero,bfc0 <tcp_bind+0x78>
      return ERR_BUF;
    bfb8:	00bfff84 	movi	r2,-2
    bfbc:	00004006 	br	c0c0 <tcp_bind+0x178>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    bfc0:	e03ffa15 	stw	zero,-24(fp)
    bfc4:	00002806 	br	c068 <tcp_bind+0x120>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
    bfc8:	00c000f4 	movhi	r3,3
    bfcc:	18fec104 	addi	r3,r3,-1276
    bfd0:	e0bffa17 	ldw	r2,-24(fp)
    bfd4:	1085883a 	add	r2,r2,r2
    bfd8:	1085883a 	add	r2,r2,r2
    bfdc:	1885883a 	add	r2,r3,r2
    bfe0:	10800017 	ldw	r2,0(r2)
    bfe4:	10800017 	ldw	r2,0(r2)
    bfe8:	e0bffb15 	stw	r2,-20(fp)
    bfec:	00001906 	br	c054 <tcp_bind+0x10c>
      if (cpcb->local_port == port) {
    bff0:	e0bffb17 	ldw	r2,-20(fp)
    bff4:	1080078b 	ldhu	r2,30(r2)
    bff8:	10ffffcc 	andi	r3,r2,65535
    bffc:	e0bfff0b 	ldhu	r2,-4(fp)
    c000:	1880111e 	bne	r3,r2,c048 <tcp_bind+0x100>
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
    c004:	e0bffb17 	ldw	r2,-20(fp)
    c008:	10000d26 	beq	r2,zero,c040 <tcp_bind+0xf8>
    c00c:	e0bffb17 	ldw	r2,-20(fp)
    c010:	10800017 	ldw	r2,0(r2)
    c014:	10000a26 	beq	r2,zero,c040 <tcp_bind+0xf8>
    c018:	e0bffe17 	ldw	r2,-8(fp)
    c01c:	10000826 	beq	r2,zero,c040 <tcp_bind+0xf8>
              ip_addr_isany(ipaddr) ||
    c020:	e0bffe17 	ldw	r2,-8(fp)
    c024:	10800017 	ldw	r2,0(r2)
    c028:	10000526 	beq	r2,zero,c040 <tcp_bind+0xf8>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
    c02c:	e0bffb17 	ldw	r2,-20(fp)
    c030:	10c00017 	ldw	r3,0(r2)
    c034:	e0bffe17 	ldw	r2,-8(fp)
    c038:	10800017 	ldw	r2,0(r2)
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
    c03c:	1880021e 	bne	r3,r2,c048 <tcp_bind+0x100>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
    c040:	00bffe04 	movi	r2,-8
    c044:	00001e06 	br	c0c0 <tcp_bind+0x178>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
    c048:	e0bffb17 	ldw	r2,-20(fp)
    c04c:	10800317 	ldw	r2,12(r2)
    c050:	e0bffb15 	stw	r2,-20(fp)
    c054:	e0bffb17 	ldw	r2,-20(fp)
    c058:	103fe51e 	bne	r2,zero,bff0 <tcp_bind+0xa8>
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    c05c:	e0bffa17 	ldw	r2,-24(fp)
    c060:	10800044 	addi	r2,r2,1
    c064:	e0bffa15 	stw	r2,-24(fp)
    c068:	e0fffa17 	ldw	r3,-24(fp)
    c06c:	e0bffc17 	ldw	r2,-16(fp)
    c070:	18bfd516 	blt	r3,r2,bfc8 <tcp_bind+0x80>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
    c074:	e0bffe17 	ldw	r2,-8(fp)
    c078:	10000726 	beq	r2,zero,c098 <tcp_bind+0x150>
    c07c:	e0bffe17 	ldw	r2,-8(fp)
    c080:	10800017 	ldw	r2,0(r2)
    c084:	10000426 	beq	r2,zero,c098 <tcp_bind+0x150>
    pcb->local_ip = *ipaddr;
    c088:	e0bffd17 	ldw	r2,-12(fp)
    c08c:	e0fffe17 	ldw	r3,-8(fp)
    c090:	18c00017 	ldw	r3,0(r3)
    c094:	10c00015 	stw	r3,0(r2)
  }
  pcb->local_port = port;
    c098:	e0bffd17 	ldw	r2,-12(fp)
    c09c:	e0ffff0b 	ldhu	r3,-4(fp)
    c0a0:	10c0078d 	sth	r3,30(r2)
  TCP_REG(&tcp_bound_pcbs, pcb);
    c0a4:	d0e8bb17 	ldw	r3,-23828(gp)
    c0a8:	e0bffd17 	ldw	r2,-12(fp)
    c0ac:	10c00315 	stw	r3,12(r2)
    c0b0:	e0bffd17 	ldw	r2,-12(fp)
    c0b4:	d0a8bb15 	stw	r2,-23828(gp)
    c0b8:	00149c40 	call	149c4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
    c0bc:	0005883a 	mov	r2,zero
}
    c0c0:	e037883a 	mov	sp,fp
    c0c4:	dfc00117 	ldw	ra,4(sp)
    c0c8:	df000017 	ldw	fp,0(sp)
    c0cc:	dec00204 	addi	sp,sp,8
    c0d0:	f800283a 	ret

0000c0d4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
    c0d4:	defffc04 	addi	sp,sp,-16
    c0d8:	df000315 	stw	fp,12(sp)
    c0dc:	df000304 	addi	fp,sp,12
    c0e0:	e13ffd15 	stw	r4,-12(fp)
    c0e4:	e17ffe15 	stw	r5,-8(fp)
    c0e8:	3005883a 	mov	r2,r6
    c0ec:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
    c0f0:	00bffd84 	movi	r2,-10
}
    c0f4:	e037883a 	mov	sp,fp
    c0f8:	df000017 	ldw	fp,0(sp)
    c0fc:	dec00104 	addi	sp,sp,4
    c100:	f800283a 	ret

0000c104 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
    c104:	defffb04 	addi	sp,sp,-20
    c108:	dfc00415 	stw	ra,16(sp)
    c10c:	df000315 	stw	fp,12(sp)
    c110:	df000304 	addi	fp,sp,12
    c114:	e13ffe15 	stw	r4,-8(fp)
    c118:	2805883a 	mov	r2,r5
    c11c:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
    c120:	e0bffe17 	ldw	r2,-8(fp)
    c124:	10800617 	ldw	r2,24(r2)
    c128:	10000926 	beq	r2,zero,c150 <tcp_listen_with_backlog+0x4c>
    c12c:	010000f4 	movhi	r4,3
    c130:	213ec504 	addi	r4,r4,-1260
    c134:	014000f4 	movhi	r5,3
    c138:	297ef204 	addi	r5,r5,-1080
    c13c:	01808304 	movi	r6,524
    c140:	01c000f4 	movhi	r7,3
    c144:	39fed604 	addi	r7,r7,-1192
    c148:	0017c440 	call	17c44 <printf>
    c14c:	003fff06 	br	c14c <tcp_listen_with_backlog+0x48>

  /* already listening? */
  if (pcb->state == LISTEN) {
    c150:	e0bffe17 	ldw	r2,-8(fp)
    c154:	10800617 	ldw	r2,24(r2)
    c158:	10800058 	cmpnei	r2,r2,1
    c15c:	1000021e 	bne	r2,zero,c168 <tcp_listen_with_backlog+0x64>
    return pcb;
    c160:	e0bffe17 	ldw	r2,-8(fp)
    c164:	00005806 	br	c2c8 <tcp_listen_with_backlog+0x1c4>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
    c168:	010000c4 	movi	r4,3
    c16c:	0008fe40 	call	8fe4 <memp_malloc>
    c170:	e0bffd15 	stw	r2,-12(fp)
  if (lpcb == NULL) {
    c174:	e0bffd17 	ldw	r2,-12(fp)
    c178:	1000021e 	bne	r2,zero,c184 <tcp_listen_with_backlog+0x80>
    return NULL;
    c17c:	0005883a 	mov	r2,zero
    c180:	00005106 	br	c2c8 <tcp_listen_with_backlog+0x1c4>
  }
  lpcb->callback_arg = pcb->callback_arg;
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	10c00417 	ldw	r3,16(r2)
    c18c:	e0bffd17 	ldw	r2,-12(fp)
    c190:	10c00415 	stw	r3,16(r2)
  lpcb->local_port = pcb->local_port;
    c194:	e0bffe17 	ldw	r2,-8(fp)
    c198:	10c0078b 	ldhu	r3,30(r2)
    c19c:	e0bffd17 	ldw	r2,-12(fp)
    c1a0:	10c0078d 	sth	r3,30(r2)
  lpcb->state = LISTEN;
    c1a4:	e0bffd17 	ldw	r2,-12(fp)
    c1a8:	00c00044 	movi	r3,1
    c1ac:	10c00615 	stw	r3,24(r2)
  lpcb->prio = pcb->prio;
    c1b0:	e0bffe17 	ldw	r2,-8(fp)
    c1b4:	10c00703 	ldbu	r3,28(r2)
    c1b8:	e0bffd17 	ldw	r2,-12(fp)
    c1bc:	10c00705 	stb	r3,28(r2)
  lpcb->so_options = pcb->so_options;
    c1c0:	e0bffe17 	ldw	r2,-8(fp)
    c1c4:	10c00203 	ldbu	r3,8(r2)
    c1c8:	e0bffd17 	ldw	r2,-12(fp)
    c1cc:	10c00205 	stb	r3,8(r2)
  ip_set_option(lpcb, SOF_ACCEPTCONN);
    c1d0:	e0bffd17 	ldw	r2,-12(fp)
    c1d4:	10800203 	ldbu	r2,8(r2)
    c1d8:	10800094 	ori	r2,r2,2
    c1dc:	1007883a 	mov	r3,r2
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	10c00205 	stb	r3,8(r2)
  lpcb->ttl = pcb->ttl;
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	10c00283 	ldbu	r3,10(r2)
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	10c00285 	stb	r3,10(r2)
  lpcb->tos = pcb->tos;
    c1f8:	e0bffe17 	ldw	r2,-8(fp)
    c1fc:	10c00243 	ldbu	r3,9(r2)
    c200:	e0bffd17 	ldw	r2,-12(fp)
    c204:	10c00245 	stb	r3,9(r2)
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
    c208:	e0bffe17 	ldw	r2,-8(fp)
    c20c:	10c00017 	ldw	r3,0(r2)
    c210:	e0bffd17 	ldw	r2,-12(fp)
    c214:	10c00015 	stw	r3,0(r2)
  if (pcb->local_port != 0) {
    c218:	e0bffe17 	ldw	r2,-8(fp)
    c21c:	1080078b 	ldhu	r2,30(r2)
    c220:	10bfffcc 	andi	r2,r2,65535
    c224:	10001a26 	beq	r2,zero,c290 <tcp_listen_with_backlog+0x18c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
    c228:	d0e8bb17 	ldw	r3,-23828(gp)
    c22c:	e0bffe17 	ldw	r2,-8(fp)
    c230:	1880041e 	bne	r3,r2,c244 <tcp_listen_with_backlog+0x140>
    c234:	d0a8bb17 	ldw	r2,-23828(gp)
    c238:	10800317 	ldw	r2,12(r2)
    c23c:	d0a8bb15 	stw	r2,-23828(gp)
    c240:	00001106 	br	c288 <tcp_listen_with_backlog+0x184>
    c244:	d0a8bb17 	ldw	r2,-23828(gp)
    c248:	d0a8ba15 	stw	r2,-23832(gp)
    c24c:	00000c06 	br	c280 <tcp_listen_with_backlog+0x17c>
    c250:	d0a8ba17 	ldw	r2,-23832(gp)
    c254:	10c00317 	ldw	r3,12(r2)
    c258:	e0bffe17 	ldw	r2,-8(fp)
    c25c:	1880051e 	bne	r3,r2,c274 <tcp_listen_with_backlog+0x170>
    c260:	d0a8ba17 	ldw	r2,-23832(gp)
    c264:	e0fffe17 	ldw	r3,-8(fp)
    c268:	18c00317 	ldw	r3,12(r3)
    c26c:	10c00315 	stw	r3,12(r2)
    c270:	00000506 	br	c288 <tcp_listen_with_backlog+0x184>
    c274:	d0a8ba17 	ldw	r2,-23832(gp)
    c278:	10800317 	ldw	r2,12(r2)
    c27c:	d0a8ba15 	stw	r2,-23832(gp)
    c280:	d0a8ba17 	ldw	r2,-23832(gp)
    c284:	103ff21e 	bne	r2,zero,c250 <tcp_listen_with_backlog+0x14c>
    c288:	e0bffe17 	ldw	r2,-8(fp)
    c28c:	10000315 	stw	zero,12(r2)
  }
  memp_free(MEMP_TCP_PCB, pcb);
    c290:	01000084 	movi	r4,2
    c294:	e17ffe17 	ldw	r5,-8(fp)
    c298:	00091c00 	call	91c0 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
    c29c:	e0bffd17 	ldw	r2,-12(fp)
    c2a0:	00c00074 	movhi	r3,1
    c2a4:	18f03504 	addi	r3,r3,-16172
    c2a8:	10c00515 	stw	r3,20(r2)
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
    c2ac:	d0e8b917 	ldw	r3,-23836(gp)
    c2b0:	e0bffd17 	ldw	r2,-12(fp)
    c2b4:	10c00315 	stw	r3,12(r2)
    c2b8:	e0bffd17 	ldw	r2,-12(fp)
    c2bc:	d0a8b915 	stw	r2,-23836(gp)
    c2c0:	00149c40 	call	149c4 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
    c2c4:	e0bffd17 	ldw	r2,-12(fp)
}
    c2c8:	e037883a 	mov	sp,fp
    c2cc:	dfc00117 	ldw	ra,4(sp)
    c2d0:	df000017 	ldw	fp,0(sp)
    c2d4:	dec00204 	addi	sp,sp,8
    c2d8:	f800283a 	ret

0000c2dc <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
    c2dc:	defffb04 	addi	sp,sp,-20
    c2e0:	dfc00415 	stw	ra,16(sp)
    c2e4:	df000315 	stw	fp,12(sp)
    c2e8:	df000304 	addi	fp,sp,12
    c2ec:	e13fff15 	stw	r4,-4(fp)
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
    c2f0:	e0bfff17 	ldw	r2,-4(fp)
    c2f4:	10c00b17 	ldw	r3,44(r2)
    c2f8:	e0bfff17 	ldw	r2,-4(fp)
    c2fc:	10800c0b 	ldhu	r2,48(r2)
    c300:	10bfffcc 	andi	r2,r2,65535
    c304:	1885883a 	add	r2,r3,r2
    c308:	e0bffd15 	stw	r2,-12(fp)

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
    c30c:	e0bfff17 	ldw	r2,-4(fp)
    c310:	10c00d17 	ldw	r3,52(r2)
    c314:	e0bfff17 	ldw	r2,-4(fp)
    c318:	10800e8b 	ldhu	r2,58(r2)
    c31c:	10bfffcc 	andi	r2,r2,65535
    c320:	10810068 	cmpgeui	r2,r2,1025
    c324:	1000041e 	bne	r2,zero,c338 <tcp_update_rcv_ann_wnd+0x5c>
    c328:	e0bfff17 	ldw	r2,-4(fp)
    c32c:	10800e8b 	ldhu	r2,58(r2)
    c330:	10bfffcc 	andi	r2,r2,65535
    c334:	00000106 	br	c33c <tcp_update_rcv_ann_wnd+0x60>
    c338:	00810004 	movi	r2,1024
    c33c:	1885883a 	add	r2,r3,r2
    c340:	e0fffd17 	ldw	r3,-12(fp)
    c344:	1885c83a 	sub	r2,r3,r2
    c348:	10000916 	blt	r2,zero,c370 <tcp_update_rcv_ann_wnd+0x94>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
    c34c:	e0bfff17 	ldw	r2,-4(fp)
    c350:	10c00c0b 	ldhu	r3,48(r2)
    c354:	e0bfff17 	ldw	r2,-4(fp)
    c358:	10c00c8d 	sth	r3,50(r2)
    return new_right_edge - pcb->rcv_ann_right_edge;
    c35c:	e0bfff17 	ldw	r2,-4(fp)
    c360:	10800d17 	ldw	r2,52(r2)
    c364:	e0fffd17 	ldw	r3,-12(fp)
    c368:	1885c83a 	sub	r2,r3,r2
    c36c:	00002006 	br	c3f0 <tcp_update_rcv_ann_wnd+0x114>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
    c370:	e0bfff17 	ldw	r2,-4(fp)
    c374:	10c00b17 	ldw	r3,44(r2)
    c378:	e0bfff17 	ldw	r2,-4(fp)
    c37c:	10800d17 	ldw	r2,52(r2)
    c380:	1885c83a 	sub	r2,r3,r2
    c384:	0080030e 	bge	zero,r2,c394 <tcp_update_rcv_ann_wnd+0xb8>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
    c388:	e0bfff17 	ldw	r2,-4(fp)
    c38c:	10000c8d 	sth	zero,50(r2)
    c390:	00001606 	br	c3ec <tcp_update_rcv_ann_wnd+0x110>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
    c394:	e0bfff17 	ldw	r2,-4(fp)
    c398:	10c00d17 	ldw	r3,52(r2)
    c39c:	e0bfff17 	ldw	r2,-4(fp)
    c3a0:	10800b17 	ldw	r2,44(r2)
    c3a4:	1885c83a 	sub	r2,r3,r2
    c3a8:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
    c3ac:	e0bffe17 	ldw	r2,-8(fp)
    c3b0:	00ffffd4 	movui	r3,65535
    c3b4:	1880092e 	bgeu	r3,r2,c3dc <tcp_update_rcv_ann_wnd+0x100>
    c3b8:	010000f4 	movhi	r4,3
    c3bc:	213ec504 	addi	r4,r4,-1260
    c3c0:	014000f4 	movhi	r5,3
    c3c4:	297efb04 	addi	r5,r5,-1044
    c3c8:	018094c4 	movi	r6,595
    c3cc:	01c000f4 	movhi	r7,3
    c3d0:	39fed604 	addi	r7,r7,-1192
    c3d4:	0017c440 	call	17c44 <printf>
    c3d8:	003fff06 	br	c3d8 <tcp_update_rcv_ann_wnd+0xfc>
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
    c3dc:	e0bffe17 	ldw	r2,-8(fp)
    c3e0:	1007883a 	mov	r3,r2
    c3e4:	e0bfff17 	ldw	r2,-4(fp)
    c3e8:	10c00c8d 	sth	r3,50(r2)
    }
    return 0;
    c3ec:	0005883a 	mov	r2,zero
  }
}
    c3f0:	e037883a 	mov	sp,fp
    c3f4:	dfc00117 	ldw	ra,4(sp)
    c3f8:	df000017 	ldw	fp,0(sp)
    c3fc:	dec00204 	addi	sp,sp,8
    c400:	f800283a 	ret

0000c404 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
    c404:	defffb04 	addi	sp,sp,-20
    c408:	dfc00415 	stw	ra,16(sp)
    c40c:	df000315 	stw	fp,12(sp)
    c410:	df000304 	addi	fp,sp,12
    c414:	e13ffe15 	stw	r4,-8(fp)
    c418:	2805883a 	mov	r2,r5
    c41c:	e0bfff0d 	sth	r2,-4(fp)
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    c420:	e0bffe17 	ldw	r2,-8(fp)
    c424:	10800617 	ldw	r2,24(r2)
    c428:	10800058 	cmpnei	r2,r2,1
    c42c:	1000091e 	bne	r2,zero,c454 <tcp_recved+0x50>
    c430:	010000f4 	movhi	r4,3
    c434:	213ec504 	addi	r4,r4,-1260
    c438:	014000f4 	movhi	r5,3
    c43c:	297f0204 	addi	r5,r5,-1016
    c440:	01809a44 	movi	r6,617
    c444:	01c000f4 	movhi	r7,3
    c448:	39fed604 	addi	r7,r7,-1192
    c44c:	0017c440 	call	17c44 <printf>
    c450:	003fff06 	br	c450 <tcp_recved+0x4c>
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
    c454:	e0bfff0b 	ldhu	r2,-4(fp)
    c458:	e0fffe17 	ldw	r3,-8(fp)
    c45c:	18c00c0b 	ldhu	r3,48(r3)
    c460:	18ffffcc 	andi	r3,r3,65535
    c464:	013fffd4 	movui	r4,65535
    c468:	20c7c83a 	sub	r3,r4,r3
    c46c:	1880090e 	bge	r3,r2,c494 <tcp_recved+0x90>
    c470:	010000f4 	movhi	r4,3
    c474:	213ec504 	addi	r4,r4,-1260
    c478:	014000f4 	movhi	r5,3
    c47c:	297f0c04 	addi	r5,r5,-976
    c480:	01809ac4 	movi	r6,619
    c484:	01c000f4 	movhi	r7,3
    c488:	39fed604 	addi	r7,r7,-1192
    c48c:	0017c440 	call	17c44 <printf>
    c490:	003fff06 	br	c490 <tcp_recved+0x8c>
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
    c494:	e0bffe17 	ldw	r2,-8(fp)
    c498:	10c00c0b 	ldhu	r3,48(r2)
    c49c:	e0bfff0b 	ldhu	r2,-4(fp)
    c4a0:	1885883a 	add	r2,r3,r2
    c4a4:	1007883a 	mov	r3,r2
    c4a8:	e0bffe17 	ldw	r2,-8(fp)
    c4ac:	10c00c0d 	sth	r3,48(r2)
  if (pcb->rcv_wnd > TCP_WND) {
    c4b0:	e0bffe17 	ldw	r2,-8(fp)
    c4b4:	10800c0b 	ldhu	r2,48(r2)
    c4b8:	10bfffcc 	andi	r2,r2,65535
    c4bc:	10820070 	cmpltui	r2,r2,2049
    c4c0:	1000031e 	bne	r2,zero,c4d0 <tcp_recved+0xcc>
    pcb->rcv_wnd = TCP_WND;
    c4c4:	e0bffe17 	ldw	r2,-8(fp)
    c4c8:	00c20004 	movi	r3,2048
    c4cc:	10c00c0d 	sth	r3,48(r2)
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
    c4d0:	e13ffe17 	ldw	r4,-8(fp)
    c4d4:	000c2dc0 	call	c2dc <tcp_update_rcv_ann_wnd>
    c4d8:	e0bffd15 	stw	r2,-12(fp)

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    c4dc:	e0bffd17 	ldw	r2,-12(fp)
    c4e0:	10808010 	cmplti	r2,r2,512
    c4e4:	1000081e 	bne	r2,zero,c508 <tcp_recved+0x104>
    tcp_ack_now(pcb);
    c4e8:	e0bffe17 	ldw	r2,-8(fp)
    c4ec:	10800883 	ldbu	r2,34(r2)
    c4f0:	10800094 	ori	r2,r2,2
    c4f4:	1007883a 	mov	r3,r2
    c4f8:	e0bffe17 	ldw	r2,-8(fp)
    c4fc:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
    c500:	e13ffe17 	ldw	r4,-8(fp)
    c504:	00134600 	call	13460 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
    c508:	e037883a 	mov	sp,fp
    c50c:	dfc00117 	ldw	ra,4(sp)
    c510:	df000017 	ldw	fp,0(sp)
    c514:	dec00204 	addi	sp,sp,8
    c518:	f800283a 	ret

0000c51c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
    c51c:	defffd04 	addi	sp,sp,-12
    c520:	df000215 	stw	fp,8(sp)
    c524:	df000204 	addi	fp,sp,8
  u8_t i;
  u16_t n = 0;
    c528:	e03ffe8d 	sth	zero,-6(fp)
    c52c:	00000106 	br	c534 <tcp_new_port+0x18>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
          return 0;
        }
        goto again;
    c530:	0001883a 	nop
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    c534:	d0a0030b 	ldhu	r2,-32756(gp)
    c538:	113fffcc 	andi	r4,r2,65535
    c53c:	00ffffd4 	movui	r3,65535
    c540:	20c7003a 	cmpeq	r3,r4,r3
    c544:	10800044 	addi	r2,r2,1
    c548:	d0a0030d 	sth	r2,-32756(gp)
    c54c:	18803fcc 	andi	r2,r3,255
    c550:	10000226 	beq	r2,zero,c55c <tcp_new_port+0x40>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
    c554:	00b00004 	movi	r2,-16384
    c558:	d0a0030d 	sth	r2,-32756(gp)
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    c55c:	e03ffe05 	stb	zero,-8(fp)
    c560:	00002006 	br	c5e4 <tcp_new_port+0xc8>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    c564:	e0bffe03 	ldbu	r2,-8(fp)
    c568:	00c000f4 	movhi	r3,3
    c56c:	18fec104 	addi	r3,r3,-1276
    c570:	1085883a 	add	r2,r2,r2
    c574:	1085883a 	add	r2,r2,r2
    c578:	1885883a 	add	r2,r3,r2
    c57c:	10800017 	ldw	r2,0(r2)
    c580:	10800017 	ldw	r2,0(r2)
    c584:	e0bfff15 	stw	r2,-4(fp)
    c588:	00001106 	br	c5d0 <tcp_new_port+0xb4>
      if (pcb->local_port == tcp_port) {
    c58c:	e0bfff17 	ldw	r2,-4(fp)
    c590:	10c0078b 	ldhu	r3,30(r2)
    c594:	d0a0030b 	ldhu	r2,-32756(gp)
    c598:	18ffffcc 	andi	r3,r3,65535
    c59c:	10bfffcc 	andi	r2,r2,65535
    c5a0:	1880081e 	bne	r3,r2,c5c4 <tcp_new_port+0xa8>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
    c5a4:	e0bffe8b 	ldhu	r2,-6(fp)
    c5a8:	10800044 	addi	r2,r2,1
    c5ac:	e0bffe8d 	sth	r2,-6(fp)
    c5b0:	e0bffe8b 	ldhu	r2,-6(fp)
    c5b4:	10900030 	cmpltui	r2,r2,16384
    c5b8:	103fdd1e 	bne	r2,zero,c530 <tcp_new_port+0x14>
          return 0;
    c5bc:	0005883a 	mov	r2,zero
    c5c0:	00000c06 	br	c5f4 <tcp_new_port+0xd8>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    c5c4:	e0bfff17 	ldw	r2,-4(fp)
    c5c8:	10800317 	ldw	r2,12(r2)
    c5cc:	e0bfff15 	stw	r2,-4(fp)
    c5d0:	e0bfff17 	ldw	r2,-4(fp)
    c5d4:	103fed1e 	bne	r2,zero,c58c <tcp_new_port+0x70>
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    c5d8:	e0bffe03 	ldbu	r2,-8(fp)
    c5dc:	10800044 	addi	r2,r2,1
    c5e0:	e0bffe05 	stb	r2,-8(fp)
    c5e4:	e0bffe03 	ldbu	r2,-8(fp)
    c5e8:	10800130 	cmpltui	r2,r2,4
    c5ec:	103fdd1e 	bne	r2,zero,c564 <tcp_new_port+0x48>
        }
        goto again;
      }
    }
  }
  return tcp_port;
    c5f0:	d0a0030b 	ldhu	r2,-32756(gp)
}
    c5f4:	e037883a 	mov	sp,fp
    c5f8:	df000017 	ldw	fp,0(sp)
    c5fc:	dec00104 	addi	sp,sp,4
    c600:	f800283a 	ret

0000c604 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
    c604:	defff604 	addi	sp,sp,-40
    c608:	dfc00915 	stw	ra,36(sp)
    c60c:	df000815 	stw	fp,32(sp)
    c610:	df000804 	addi	fp,sp,32
    c614:	e13ffc15 	stw	r4,-16(fp)
    c618:	e17ffd15 	stw	r5,-12(fp)
    c61c:	3005883a 	mov	r2,r6
    c620:	e1ffff15 	stw	r7,-4(fp)
    c624:	e0bffe0d 	sth	r2,-8(fp)
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
    c628:	e0bffc17 	ldw	r2,-16(fp)
    c62c:	10800617 	ldw	r2,24(r2)
    c630:	10000926 	beq	r2,zero,c658 <tcp_connect+0x54>
    c634:	010000f4 	movhi	r4,3
    c638:	213ec504 	addi	r4,r4,-1260
    c63c:	014000f4 	movhi	r5,3
    c640:	297f1504 	addi	r5,r5,-940
    c644:	0180acc4 	movi	r6,691
    c648:	01c000f4 	movhi	r7,3
    c64c:	39fed604 	addi	r7,r7,-1192
    c650:	0017c440 	call	17c44 <printf>
    c654:	003fff06 	br	c654 <tcp_connect+0x50>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    c658:	e0bffd17 	ldw	r2,-12(fp)
    c65c:	10000a26 	beq	r2,zero,c688 <tcp_connect+0x84>
    pcb->remote_ip = *ipaddr;
    c660:	e0bffc17 	ldw	r2,-16(fp)
    c664:	e0fffd17 	ldw	r3,-12(fp)
    c668:	18c00017 	ldw	r3,0(r3)
    c66c:	10c00115 	stw	r3,4(r2)
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
    c670:	e0bffc17 	ldw	r2,-16(fp)
    c674:	e0fffe0b 	ldhu	r3,-8(fp)
    c678:	10c0080d 	sth	r3,32(r2)

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
    c67c:	e0bffc17 	ldw	r2,-16(fp)
    c680:	10000626 	beq	r2,zero,c69c <tcp_connect+0x98>
    c684:	00000206 	br	c690 <tcp_connect+0x8c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
    c688:	00bffe84 	movi	r2,-6
    c68c:	00008306 	br	c89c <tcp_connect+0x298>
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
    c690:	e0bffc17 	ldw	r2,-16(fp)
    c694:	10800017 	ldw	r2,0(r2)
    c698:	10000d1e 	bne	r2,zero,c6d0 <tcp_connect+0xcc>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->remote_ip));
    c69c:	e0bffc17 	ldw	r2,-16(fp)
    c6a0:	10800104 	addi	r2,r2,4
    c6a4:	1009883a 	mov	r4,r2
    c6a8:	0005c4c0 	call	5c4c <ip_route>
    c6ac:	e0bff815 	stw	r2,-32(fp)
    if (netif == NULL) {
    c6b0:	e0bff817 	ldw	r2,-32(fp)
    c6b4:	1000021e 	bne	r2,zero,c6c0 <tcp_connect+0xbc>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
    c6b8:	00bfff04 	movi	r2,-4
    c6bc:	00007706 	br	c89c <tcp_connect+0x298>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
    c6c0:	e0bff817 	ldw	r2,-32(fp)
    c6c4:	10c00117 	ldw	r3,4(r2)
    c6c8:	e0bffc17 	ldw	r2,-16(fp)
    c6cc:	10c00015 	stw	r3,0(r2)
  }

  old_local_port = pcb->local_port;
    c6d0:	e0bffc17 	ldw	r2,-16(fp)
    c6d4:	1080078b 	ldhu	r2,30(r2)
    c6d8:	e0bff90d 	sth	r2,-28(fp)
  if (pcb->local_port == 0) {
    c6dc:	e0bffc17 	ldw	r2,-16(fp)
    c6e0:	1080078b 	ldhu	r2,30(r2)
    c6e4:	10bfffcc 	andi	r2,r2,65535
    c6e8:	1000091e 	bne	r2,zero,c710 <tcp_connect+0x10c>
    pcb->local_port = tcp_new_port();
    c6ec:	000c51c0 	call	c51c <tcp_new_port>
    c6f0:	e0fffc17 	ldw	r3,-16(fp)
    c6f4:	1880078d 	sth	r2,30(r3)
    if (pcb->local_port == 0) {
    c6f8:	e0bffc17 	ldw	r2,-16(fp)
    c6fc:	1080078b 	ldhu	r2,30(r2)
    c700:	10bfffcc 	andi	r2,r2,65535
    c704:	1000021e 	bne	r2,zero,c710 <tcp_connect+0x10c>
      return ERR_BUF;
    c708:	00bfff84 	movi	r2,-2
    c70c:	00006306 	br	c89c <tcp_connect+0x298>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
    c710:	000dd880 	call	dd88 <tcp_next_iss>
    c714:	e0bffa15 	stw	r2,-24(fp)
  pcb->rcv_nxt = 0;
    c718:	e0bffc17 	ldw	r2,-16(fp)
    c71c:	10000b15 	stw	zero,44(r2)
  pcb->snd_nxt = iss;
    c720:	e0bffc17 	ldw	r2,-16(fp)
    c724:	e0fffa17 	ldw	r3,-24(fp)
    c728:	10c01515 	stw	r3,84(r2)
  pcb->lastack = iss - 1;
    c72c:	e0bffa17 	ldw	r2,-24(fp)
    c730:	10ffffc4 	addi	r3,r2,-1
    c734:	e0bffc17 	ldw	r2,-16(fp)
    c738:	10c01315 	stw	r3,76(r2)
  pcb->snd_lbb = iss - 1;
    c73c:	e0bffa17 	ldw	r2,-24(fp)
    c740:	10ffffc4 	addi	r3,r2,-1
    c744:	e0bffc17 	ldw	r2,-16(fp)
    c748:	10c01815 	stw	r3,96(r2)
  pcb->rcv_wnd = TCP_WND;
    c74c:	e0bffc17 	ldw	r2,-16(fp)
    c750:	00c20004 	movi	r3,2048
    c754:	10c00c0d 	sth	r3,48(r2)
  pcb->rcv_ann_wnd = TCP_WND;
    c758:	e0bffc17 	ldw	r2,-16(fp)
    c75c:	00c20004 	movi	r3,2048
    c760:	10c00c8d 	sth	r3,50(r2)
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    c764:	e0bffc17 	ldw	r2,-16(fp)
    c768:	10c00b17 	ldw	r3,44(r2)
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	10c00d15 	stw	r3,52(r2)
  pcb->snd_wnd = TCP_WND;
    c774:	e0bffc17 	ldw	r2,-16(fp)
    c778:	00c20004 	movi	r3,2048
    c77c:	10c0190d 	sth	r3,100(r2)
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    c780:	e0bffc17 	ldw	r2,-16(fp)
    c784:	00c08604 	movi	r3,536
    c788:	10c00e8d 	sth	r3,58(r2)
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
    c78c:	e0bffc17 	ldw	r2,-16(fp)
    c790:	10800e8b 	ldhu	r2,58(r2)
    c794:	10bfffcc 	andi	r2,r2,65535
    c798:	1009883a 	mov	r4,r2
    c79c:	e17ffd17 	ldw	r5,-12(fp)
    c7a0:	000ddb80 	call	ddb8 <tcp_eff_send_mss>
    c7a4:	e0fffc17 	ldw	r3,-16(fp)
    c7a8:	18800e8d 	sth	r2,58(r3)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
    c7ac:	e0bffc17 	ldw	r2,-16(fp)
    c7b0:	00c00044 	movi	r3,1
    c7b4:	10c0140d 	sth	r3,80(r2)
  pcb->ssthresh = pcb->mss * 10;
    c7b8:	e0bffc17 	ldw	r2,-16(fp)
    c7bc:	10800e8b 	ldhu	r2,58(r2)
    c7c0:	108002a4 	muli	r2,r2,10
    c7c4:	1007883a 	mov	r3,r2
    c7c8:	e0bffc17 	ldw	r2,-16(fp)
    c7cc:	10c0148d 	sth	r3,82(r2)
#if LWIP_CALLBACK_API
  pcb->connected = connected;
    c7d0:	e0bffc17 	ldw	r2,-16(fp)
    c7d4:	e0ffff17 	ldw	r3,-4(fp)
    c7d8:	10c02215 	stw	r3,136(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
    c7dc:	e13ffc17 	ldw	r4,-16(fp)
    c7e0:	01400084 	movi	r5,2
    c7e4:	0012efc0 	call	12efc <tcp_enqueue_flags>
    c7e8:	e0bffb05 	stb	r2,-20(fp)
  if (ret == ERR_OK) {
    c7ec:	e0bffb07 	ldb	r2,-20(fp)
    c7f0:	1000291e 	bne	r2,zero,c898 <tcp_connect+0x294>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
    c7f4:	e0bffc17 	ldw	r2,-16(fp)
    c7f8:	00c00084 	movi	r3,2
    c7fc:	10c00615 	stw	r3,24(r2)
    if (old_local_port != 0) {
    c800:	e0bff90b 	ldhu	r2,-28(fp)
    c804:	10001a26 	beq	r2,zero,c870 <tcp_connect+0x26c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
    c808:	d0e8bb17 	ldw	r3,-23828(gp)
    c80c:	e0bffc17 	ldw	r2,-16(fp)
    c810:	1880041e 	bne	r3,r2,c824 <tcp_connect+0x220>
    c814:	d0a8bb17 	ldw	r2,-23828(gp)
    c818:	10800317 	ldw	r2,12(r2)
    c81c:	d0a8bb15 	stw	r2,-23828(gp)
    c820:	00001106 	br	c868 <tcp_connect+0x264>
    c824:	d0a8bb17 	ldw	r2,-23828(gp)
    c828:	d0a8ba15 	stw	r2,-23832(gp)
    c82c:	00000c06 	br	c860 <tcp_connect+0x25c>
    c830:	d0a8ba17 	ldw	r2,-23832(gp)
    c834:	10c00317 	ldw	r3,12(r2)
    c838:	e0bffc17 	ldw	r2,-16(fp)
    c83c:	1880051e 	bne	r3,r2,c854 <tcp_connect+0x250>
    c840:	d0a8ba17 	ldw	r2,-23832(gp)
    c844:	e0fffc17 	ldw	r3,-16(fp)
    c848:	18c00317 	ldw	r3,12(r3)
    c84c:	10c00315 	stw	r3,12(r2)
    c850:	00000506 	br	c868 <tcp_connect+0x264>
    c854:	d0a8ba17 	ldw	r2,-23832(gp)
    c858:	10800317 	ldw	r2,12(r2)
    c85c:	d0a8ba15 	stw	r2,-23832(gp)
    c860:	d0a8ba17 	ldw	r2,-23832(gp)
    c864:	103ff21e 	bne	r2,zero,c830 <tcp_connect+0x22c>
    c868:	e0bffc17 	ldw	r2,-16(fp)
    c86c:	10000315 	stw	zero,12(r2)
    }
    TCP_REG_ACTIVE(pcb);
    c870:	d0e8b717 	ldw	r3,-23844(gp)
    c874:	e0bffc17 	ldw	r2,-16(fp)
    c878:	10c00315 	stw	r3,12(r2)
    c87c:	e0bffc17 	ldw	r2,-16(fp)
    c880:	d0a8b715 	stw	r2,-23844(gp)
    c884:	00149c40 	call	149c4 <tcp_timer_needed>
    c888:	00800044 	movi	r2,1
    c88c:	d0a8b685 	stb	r2,-23846(gp)
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
    c890:	e13ffc17 	ldw	r4,-16(fp)
    c894:	00134600 	call	13460 <tcp_output>
  }
  return ret;
    c898:	e0bffb03 	ldbu	r2,-20(fp)
}
    c89c:	e037883a 	mov	sp,fp
    c8a0:	dfc00117 	ldw	ra,4(sp)
    c8a4:	df000017 	ldw	fp,0(sp)
    c8a8:	dec00204 	addi	sp,sp,8
    c8ac:	f800283a 	ret

0000c8b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
    c8b0:	defff404 	addi	sp,sp,-48
    c8b4:	dfc00b15 	stw	ra,44(sp)
    c8b8:	df000a15 	stw	fp,40(sp)
    c8bc:	df000a04 	addi	fp,sp,40
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
    c8c0:	e03ffa85 	stb	zero,-22(fp)

  ++tcp_ticks;
    c8c4:	d0a8b817 	ldw	r2,-23840(gp)
    c8c8:	10800044 	addi	r2,r2,1
    c8cc:	d0a8b815 	stw	r2,-23840(gp)
  ++tcp_timer_ctr;
    c8d0:	d0a8b643 	ldbu	r2,-23847(gp)
    c8d4:	10800044 	addi	r2,r2,1
    c8d8:	d0a8b645 	stb	r2,-23847(gp)
    c8dc:	00000106 	br	c8e4 <tcp_slowtmr+0x34>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
    c8e0:	0001883a 	nop
  ++tcp_ticks;
  ++tcp_timer_ctr;

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
    c8e4:	e03ff915 	stw	zero,-28(fp)
  pcb = tcp_active_pcbs;
    c8e8:	d0a8b717 	ldw	r2,-23844(gp)
    c8ec:	e0bff815 	stw	r2,-32(fp)
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    c8f0:	0001c206 	br	cffc <tcp_slowtmr+0x74c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    c8f4:	e0bff817 	ldw	r2,-32(fp)
    c8f8:	10800617 	ldw	r2,24(r2)
    c8fc:	1000091e 	bne	r2,zero,c924 <tcp_slowtmr+0x74>
    c900:	010000f4 	movhi	r4,3
    c904:	213ec504 	addi	r4,r4,-1260
    c908:	014000f4 	movhi	r5,3
    c90c:	297f2104 	addi	r5,r5,-892
    c910:	0180ca84 	movi	r6,810
    c914:	01c000f4 	movhi	r7,3
    c918:	39fed604 	addi	r7,r7,-1192
    c91c:	0017c440 	call	17c44 <printf>
    c920:	003fff06 	br	c920 <tcp_slowtmr+0x70>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    c924:	e0bff817 	ldw	r2,-32(fp)
    c928:	10800617 	ldw	r2,24(r2)
    c92c:	10800058 	cmpnei	r2,r2,1
    c930:	1000091e 	bne	r2,zero,c958 <tcp_slowtmr+0xa8>
    c934:	010000f4 	movhi	r4,3
    c938:	213ec504 	addi	r4,r4,-1260
    c93c:	014000f4 	movhi	r5,3
    c940:	297f2c04 	addi	r5,r5,-848
    c944:	0180cac4 	movi	r6,811
    c948:	01c000f4 	movhi	r7,3
    c94c:	39fed604 	addi	r7,r7,-1192
    c950:	0017c440 	call	17c44 <printf>
    c954:	003fff06 	br	c954 <tcp_slowtmr+0xa4>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    c958:	e0bff817 	ldw	r2,-32(fp)
    c95c:	10800617 	ldw	r2,24(r2)
    c960:	10800298 	cmpnei	r2,r2,10
    c964:	1000091e 	bne	r2,zero,c98c <tcp_slowtmr+0xdc>
    c968:	010000f4 	movhi	r4,3
    c96c:	213ec504 	addi	r4,r4,-1260
    c970:	014000f4 	movhi	r5,3
    c974:	297f3704 	addi	r5,r5,-804
    c978:	0180cb04 	movi	r6,812
    c97c:	01c000f4 	movhi	r7,3
    c980:	39fed604 	addi	r7,r7,-1192
    c984:	0017c440 	call	17c44 <printf>
    c988:	003fff06 	br	c988 <tcp_slowtmr+0xd8>
    if (pcb->last_timer == tcp_timer_ctr) {
    c98c:	e0bff817 	ldw	r2,-32(fp)
    c990:	10c00943 	ldbu	r3,37(r2)
    c994:	d0a8b643 	ldbu	r2,-23847(gp)
    c998:	18c03fcc 	andi	r3,r3,255
    c99c:	10803fcc 	andi	r2,r2,255
    c9a0:	1880041e 	bne	r3,r2,c9b4 <tcp_slowtmr+0x104>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
    c9a4:	e0bff817 	ldw	r2,-32(fp)
    c9a8:	10800317 	ldw	r2,12(r2)
    c9ac:	e0bff815 	stw	r2,-32(fp)
      continue;
    c9b0:	00019206 	br	cffc <tcp_slowtmr+0x74c>
    }
    pcb->last_timer = tcp_timer_ctr;
    c9b4:	d0e8b643 	ldbu	r3,-23847(gp)
    c9b8:	e0bff817 	ldw	r2,-32(fp)
    c9bc:	10c00945 	stb	r3,37(r2)

    pcb_remove = 0;
    c9c0:	e03ffa05 	stb	zero,-24(fp)
    pcb_reset = 0;
    c9c4:	e03ffa45 	stb	zero,-23(fp)

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
    c9c8:	e0bff817 	ldw	r2,-32(fp)
    c9cc:	10800617 	ldw	r2,24(r2)
    c9d0:	10800098 	cmpnei	r2,r2,2
    c9d4:	1000091e 	bne	r2,zero,c9fc <tcp_slowtmr+0x14c>
    c9d8:	e0bff817 	ldw	r2,-32(fp)
    c9dc:	10801283 	ldbu	r2,74(r2)
    c9e0:	10803fcc 	andi	r2,r2,255
    c9e4:	10800198 	cmpnei	r2,r2,6
    c9e8:	1000041e 	bne	r2,zero,c9fc <tcp_slowtmr+0x14c>
      ++pcb_remove;
    c9ec:	e0bffa03 	ldbu	r2,-24(fp)
    c9f0:	10800044 	addi	r2,r2,1
    c9f4:	e0bffa05 	stb	r2,-24(fp)
    c9f8:	00008c06 	br	cc2c <tcp_slowtmr+0x37c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
    c9fc:	e0bff817 	ldw	r2,-32(fp)
    ca00:	10801283 	ldbu	r2,74(r2)
    ca04:	10803fcc 	andi	r2,r2,255
    ca08:	10800318 	cmpnei	r2,r2,12
    ca0c:	1000041e 	bne	r2,zero,ca20 <tcp_slowtmr+0x170>
      ++pcb_remove;
    ca10:	e0bffa03 	ldbu	r2,-24(fp)
    ca14:	10800044 	addi	r2,r2,1
    ca18:	e0bffa05 	stb	r2,-24(fp)
    ca1c:	00008306 	br	cc2c <tcp_slowtmr+0x37c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
    ca20:	e0bff817 	ldw	r2,-32(fp)
    ca24:	10802643 	ldbu	r2,153(r2)
    ca28:	10803fcc 	andi	r2,r2,255
    ca2c:	10002226 	beq	r2,zero,cab8 <tcp_slowtmr+0x208>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
    ca30:	e0bff817 	ldw	r2,-32(fp)
    ca34:	10802603 	ldbu	r2,152(r2)
    ca38:	10800044 	addi	r2,r2,1
    ca3c:	1007883a 	mov	r3,r2
    ca40:	e0bff817 	ldw	r2,-32(fp)
    ca44:	10c02605 	stb	r3,152(r2)
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
    ca48:	e0bff817 	ldw	r2,-32(fp)
    ca4c:	10c02603 	ldbu	r3,152(r2)
    ca50:	e0bff817 	ldw	r2,-32(fp)
    ca54:	10802643 	ldbu	r2,153(r2)
    ca58:	10803fcc 	andi	r2,r2,255
    ca5c:	113fffc4 	addi	r4,r2,-1
    ca60:	d0a00384 	addi	r2,gp,-32754
    ca64:	2085883a 	add	r2,r4,r2
    ca68:	10800003 	ldbu	r2,0(r2)
    ca6c:	18c03fcc 	andi	r3,r3,255
    ca70:	10803fcc 	andi	r2,r2,255
    ca74:	18806d36 	bltu	r3,r2,cc2c <tcp_slowtmr+0x37c>
          pcb->persist_cnt = 0;
    ca78:	e0bff817 	ldw	r2,-32(fp)
    ca7c:	10002605 	stb	zero,152(r2)
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
    ca80:	e0bff817 	ldw	r2,-32(fp)
    ca84:	10802643 	ldbu	r2,153(r2)
    ca88:	10803fcc 	andi	r2,r2,255
    ca8c:	108001e8 	cmpgeui	r2,r2,7
    ca90:	1000061e 	bne	r2,zero,caac <tcp_slowtmr+0x1fc>
            pcb->persist_backoff++;
    ca94:	e0bff817 	ldw	r2,-32(fp)
    ca98:	10802643 	ldbu	r2,153(r2)
    ca9c:	10800044 	addi	r2,r2,1
    caa0:	1007883a 	mov	r3,r2
    caa4:	e0bff817 	ldw	r2,-32(fp)
    caa8:	10c02645 	stb	r3,153(r2)
          }
          tcp_zero_window_probe(pcb);
    caac:	e13ff817 	ldw	r4,-32(fp)
    cab0:	00147a80 	call	147a8 <tcp_zero_window_probe>
    cab4:	00005d06 	br	cc2c <tcp_slowtmr+0x37c>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
    cab8:	e0bff817 	ldw	r2,-32(fp)
    cabc:	10800e0b 	ldhu	r2,56(r2)
    cac0:	10bfffcc 	andi	r2,r2,65535
    cac4:	10a0001c 	xori	r2,r2,32768
    cac8:	10a00004 	addi	r2,r2,-32768
    cacc:	10000616 	blt	r2,zero,cae8 <tcp_slowtmr+0x238>
          ++pcb->rtime;
    cad0:	e0bff817 	ldw	r2,-32(fp)
    cad4:	10800e0b 	ldhu	r2,56(r2)
    cad8:	10800044 	addi	r2,r2,1
    cadc:	1007883a 	mov	r3,r2
    cae0:	e0bff817 	ldw	r2,-32(fp)
    cae4:	10c00e0d 	sth	r3,56(r2)
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
    cae8:	e0bff817 	ldw	r2,-32(fp)
    caec:	10801d17 	ldw	r2,116(r2)
    caf0:	10004e26 	beq	r2,zero,cc2c <tcp_slowtmr+0x37c>
    caf4:	e0bff817 	ldw	r2,-32(fp)
    caf8:	10c00e0b 	ldhu	r3,56(r2)
    cafc:	e0bff817 	ldw	r2,-32(fp)
    cb00:	1080120b 	ldhu	r2,72(r2)
    cb04:	18ffffcc 	andi	r3,r3,65535
    cb08:	18e0001c 	xori	r3,r3,32768
    cb0c:	18e00004 	addi	r3,r3,-32768
    cb10:	10bfffcc 	andi	r2,r2,65535
    cb14:	10a0001c 	xori	r2,r2,32768
    cb18:	10a00004 	addi	r2,r2,-32768
    cb1c:	18804316 	blt	r3,r2,cc2c <tcp_slowtmr+0x37c>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
    cb20:	e0bff817 	ldw	r2,-32(fp)
    cb24:	10800617 	ldw	r2,24(r2)
    cb28:	108000a0 	cmpeqi	r2,r2,2
    cb2c:	10001b1e 	bne	r2,zero,cb9c <tcp_slowtmr+0x2ec>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
    cb30:	e0bff817 	ldw	r2,-32(fp)
    cb34:	1080110b 	ldhu	r2,68(r2)
    cb38:	10bfffcc 	andi	r2,r2,65535
    cb3c:	10a0001c 	xori	r2,r2,32768
    cb40:	10a00004 	addi	r2,r2,-32768
    cb44:	1005d0fa 	srai	r2,r2,3
    cb48:	10ffffcc 	andi	r3,r2,65535
    cb4c:	18e0001c 	xori	r3,r3,32768
    cb50:	18e00004 	addi	r3,r3,-32768
    cb54:	e0bff817 	ldw	r2,-32(fp)
    cb58:	1080118b 	ldhu	r2,70(r2)
    cb5c:	10bfffcc 	andi	r2,r2,65535
    cb60:	10a0001c 	xori	r2,r2,32768
    cb64:	10a00004 	addi	r2,r2,-32768
    cb68:	1887883a 	add	r3,r3,r2
    cb6c:	e0bff817 	ldw	r2,-32(fp)
    cb70:	10801283 	ldbu	r2,74(r2)
    cb74:	10803fcc 	andi	r2,r2,255
    cb78:	010000f4 	movhi	r4,3
    cb7c:	213ebd04 	addi	r4,r4,-1292
    cb80:	2085883a 	add	r2,r4,r2
    cb84:	10800003 	ldbu	r2,0(r2)
    cb88:	10803fcc 	andi	r2,r2,255
    cb8c:	1884983a 	sll	r2,r3,r2
    cb90:	1007883a 	mov	r3,r2
    cb94:	e0bff817 	ldw	r2,-32(fp)
    cb98:	10c0120d 	sth	r3,72(r2)
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
    cb9c:	e0bff817 	ldw	r2,-32(fp)
    cba0:	10000e0d 	sth	zero,56(r2)

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
    cba4:	e0bff817 	ldw	r2,-32(fp)
    cba8:	1080190b 	ldhu	r2,100(r2)
    cbac:	e0fff817 	ldw	r3,-32(fp)
    cbb0:	18c0140b 	ldhu	r3,80(r3)
    cbb4:	113fffcc 	andi	r4,r2,65535
    cbb8:	197fffcc 	andi	r5,r3,65535
    cbbc:	2900012e 	bgeu	r5,r4,cbc4 <tcp_slowtmr+0x314>
    cbc0:	1805883a 	mov	r2,r3
    cbc4:	e0bffb0d 	sth	r2,-20(fp)
          pcb->ssthresh = eff_wnd >> 1;
    cbc8:	e0bffb0b 	ldhu	r2,-20(fp)
    cbcc:	1004d07a 	srli	r2,r2,1
    cbd0:	1007883a 	mov	r3,r2
    cbd4:	e0bff817 	ldw	r2,-32(fp)
    cbd8:	10c0148d 	sth	r3,82(r2)
          if (pcb->ssthresh < (pcb->mss << 1)) {
    cbdc:	e0bff817 	ldw	r2,-32(fp)
    cbe0:	1080148b 	ldhu	r2,82(r2)
    cbe4:	10ffffcc 	andi	r3,r2,65535
    cbe8:	e0bff817 	ldw	r2,-32(fp)
    cbec:	10800e8b 	ldhu	r2,58(r2)
    cbf0:	10bfffcc 	andi	r2,r2,65535
    cbf4:	1085883a 	add	r2,r2,r2
    cbf8:	1880060e 	bge	r3,r2,cc14 <tcp_slowtmr+0x364>
            pcb->ssthresh = (pcb->mss << 1);
    cbfc:	e0bff817 	ldw	r2,-32(fp)
    cc00:	10800e8b 	ldhu	r2,58(r2)
    cc04:	1085883a 	add	r2,r2,r2
    cc08:	1007883a 	mov	r3,r2
    cc0c:	e0bff817 	ldw	r2,-32(fp)
    cc10:	10c0148d 	sth	r3,82(r2)
          }
          pcb->cwnd = pcb->mss;
    cc14:	e0bff817 	ldw	r2,-32(fp)
    cc18:	10c00e8b 	ldhu	r3,58(r2)
    cc1c:	e0bff817 	ldw	r2,-32(fp)
    cc20:	10c0140d 	sth	r3,80(r2)
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
    cc24:	e13ff817 	ldw	r4,-32(fp)
    cc28:	00142a40 	call	142a4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
    cc2c:	e0bff817 	ldw	r2,-32(fp)
    cc30:	10800617 	ldw	r2,24(r2)
    cc34:	10800198 	cmpnei	r2,r2,6
    cc38:	10000e1e 	bne	r2,zero,cc74 <tcp_slowtmr+0x3c4>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
    cc3c:	e0bff817 	ldw	r2,-32(fp)
    cc40:	10800883 	ldbu	r2,34(r2)
    cc44:	10803fcc 	andi	r2,r2,255
    cc48:	1080040c 	andi	r2,r2,16
    cc4c:	10000926 	beq	r2,zero,cc74 <tcp_slowtmr+0x3c4>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
    cc50:	d0e8b817 	ldw	r3,-23840(gp)
    cc54:	e0bff817 	ldw	r2,-32(fp)
    cc58:	10800a17 	ldw	r2,40(r2)
    cc5c:	1885c83a 	sub	r2,r3,r2
    cc60:	10800a70 	cmpltui	r2,r2,41
    cc64:	1000031e 	bne	r2,zero,cc74 <tcp_slowtmr+0x3c4>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
    cc68:	e0bffa03 	ldbu	r2,-24(fp)
    cc6c:	10800044 	addi	r2,r2,1
    cc70:	e0bffa05 	stb	r2,-24(fp)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
    cc74:	e0bff817 	ldw	r2,-32(fp)
    cc78:	10800203 	ldbu	r2,8(r2)
    cc7c:	10803fcc 	andi	r2,r2,255
    cc80:	1080020c 	andi	r2,r2,8
    cc84:	10003326 	beq	r2,zero,cd54 <tcp_slowtmr+0x4a4>
       ((pcb->state == ESTABLISHED) ||
    cc88:	e0bff817 	ldw	r2,-32(fp)
    cc8c:	10800617 	ldw	r2,24(r2)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
    cc90:	10800120 	cmpeqi	r2,r2,4
    cc94:	1000041e 	bne	r2,zero,cca8 <tcp_slowtmr+0x3f8>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
    cc98:	e0bff817 	ldw	r2,-32(fp)
    cc9c:	10800617 	ldw	r2,24(r2)
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
    cca0:	108001d8 	cmpnei	r2,r2,7
    cca4:	10002b1e 	bne	r2,zero,cd54 <tcp_slowtmr+0x4a4>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
    cca8:	d0e8b817 	ldw	r3,-23840(gp)
    ccac:	e0bff817 	ldw	r2,-32(fp)
    ccb0:	10800a17 	ldw	r2,40(r2)
    ccb4:	1885c83a 	sub	r2,r3,r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
    ccb8:	e0fff817 	ldw	r3,-32(fp)
    ccbc:	19002517 	ldw	r4,148(r3)
    ccc0:	00c002b4 	movhi	r3,10
    ccc4:	18d32e04 	addi	r3,r3,19640
    ccc8:	20c9883a 	add	r4,r4,r3
    cccc:	00c07d04 	movi	r3,500
    ccd0:	20c7203a 	divu	r3,r4,r3

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
    ccd4:	1880072e 	bgeu	r3,r2,ccf4 <tcp_slowtmr+0x444>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
    ccd8:	e0bffa03 	ldbu	r2,-24(fp)
    ccdc:	10800044 	addi	r2,r2,1
    cce0:	e0bffa05 	stb	r2,-24(fp)
        ++pcb_reset;
    cce4:	e0bffa43 	ldbu	r2,-23(fp)
    cce8:	10800044 	addi	r2,r2,1
    ccec:	e0bffa45 	stb	r2,-23(fp)
    ccf0:	00001806 	br	cd54 <tcp_slowtmr+0x4a4>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
    ccf4:	d0e8b817 	ldw	r3,-23840(gp)
    ccf8:	e0bff817 	ldw	r2,-32(fp)
    ccfc:	10800a17 	ldw	r2,40(r2)
    cd00:	1885c83a 	sub	r2,r3,r2
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
    cd04:	e0fff817 	ldw	r3,-32(fp)
    cd08:	19002517 	ldw	r4,148(r3)
    cd0c:	e0fff817 	ldw	r3,-32(fp)
    cd10:	18c02683 	ldbu	r3,154(r3)
    cd14:	19403fcc 	andi	r5,r3,255
    cd18:	00c00074 	movhi	r3,1
    cd1c:	18c93e04 	addi	r3,r3,9464
    cd20:	28c7383a 	mul	r3,r5,r3
    cd24:	20c9883a 	add	r4,r4,r3
              / TCP_SLOW_INTERVAL)
    cd28:	00c07d04 	movi	r3,500
    cd2c:	20c7203a 	divu	r3,r4,r3
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
        ++pcb_reset;
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
    cd30:	1880082e 	bgeu	r3,r2,cd54 <tcp_slowtmr+0x4a4>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
    cd34:	e13ff817 	ldw	r4,-32(fp)
    cd38:	00146640 	call	14664 <tcp_keepalive>
        pcb->keep_cnt_sent++;
    cd3c:	e0bff817 	ldw	r2,-32(fp)
    cd40:	10802683 	ldbu	r2,154(r2)
    cd44:	10800044 	addi	r2,r2,1
    cd48:	1007883a 	mov	r3,r2
    cd4c:	e0bff817 	ldw	r2,-32(fp)
    cd50:	10c02685 	stb	r3,154(r2)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
    cd54:	e0bff817 	ldw	r2,-32(fp)
    cd58:	10801e17 	ldw	r2,120(r2)
    cd5c:	10001126 	beq	r2,zero,cda4 <tcp_slowtmr+0x4f4>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
    cd60:	d0e8b817 	ldw	r3,-23840(gp)
    cd64:	e0bff817 	ldw	r2,-32(fp)
    cd68:	10800a17 	ldw	r2,40(r2)
    cd6c:	1887c83a 	sub	r3,r3,r2
    cd70:	e0bff817 	ldw	r2,-32(fp)
    cd74:	1080120b 	ldhu	r2,72(r2)
    cd78:	10bfffcc 	andi	r2,r2,65535
    cd7c:	10a0001c 	xori	r2,r2,32768
    cd80:	10a00004 	addi	r2,r2,-32768
    cd84:	108001a4 	muli	r2,r2,6

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
    cd88:	18800636 	bltu	r3,r2,cda4 <tcp_slowtmr+0x4f4>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
    cd8c:	e0bff817 	ldw	r2,-32(fp)
    cd90:	10801e17 	ldw	r2,120(r2)
    cd94:	1009883a 	mov	r4,r2
    cd98:	000d3a40 	call	d3a4 <tcp_segs_free>
      pcb->ooseq = NULL;
    cd9c:	e0bff817 	ldw	r2,-32(fp)
    cda0:	10001e15 	stw	zero,120(r2)
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
    cda4:	e0bff817 	ldw	r2,-32(fp)
    cda8:	10800617 	ldw	r2,24(r2)
    cdac:	108000d8 	cmpnei	r2,r2,3
    cdb0:	1000091e 	bne	r2,zero,cdd8 <tcp_slowtmr+0x528>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
    cdb4:	d0e8b817 	ldw	r3,-23840(gp)
    cdb8:	e0bff817 	ldw	r2,-32(fp)
    cdbc:	10800a17 	ldw	r2,40(r2)
    cdc0:	1885c83a 	sub	r2,r3,r2
    cdc4:	10800a70 	cmpltui	r2,r2,41
    cdc8:	1000031e 	bne	r2,zero,cdd8 <tcp_slowtmr+0x528>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
    cdcc:	e0bffa03 	ldbu	r2,-24(fp)
    cdd0:	10800044 	addi	r2,r2,1
    cdd4:	e0bffa05 	stb	r2,-24(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
    cdd8:	e0bff817 	ldw	r2,-32(fp)
    cddc:	10800617 	ldw	r2,24(r2)
    cde0:	10800258 	cmpnei	r2,r2,9
    cde4:	1000091e 	bne	r2,zero,ce0c <tcp_slowtmr+0x55c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    cde8:	d0e8b817 	ldw	r3,-23840(gp)
    cdec:	e0bff817 	ldw	r2,-32(fp)
    cdf0:	10800a17 	ldw	r2,40(r2)
    cdf4:	1885c83a 	sub	r2,r3,r2
    cdf8:	10803c70 	cmpltui	r2,r2,241
    cdfc:	1000031e 	bne	r2,zero,ce0c <tcp_slowtmr+0x55c>
        ++pcb_remove;
    ce00:	e0bffa03 	ldbu	r2,-24(fp)
    ce04:	10800044 	addi	r2,r2,1
    ce08:	e0bffa05 	stb	r2,-24(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
    ce0c:	e0bffa03 	ldbu	r2,-24(fp)
    ce10:	10005126 	beq	r2,zero,cf58 <tcp_slowtmr+0x6a8>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
    ce14:	e13ff817 	ldw	r4,-32(fp)
    ce18:	000db040 	call	db04 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
    ce1c:	e0bff917 	ldw	r2,-28(fp)
    ce20:	10001126 	beq	r2,zero,ce68 <tcp_slowtmr+0x5b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
    ce24:	d0a8b717 	ldw	r2,-23844(gp)
    ce28:	e0fff817 	ldw	r3,-32(fp)
    ce2c:	1880091e 	bne	r3,r2,ce54 <tcp_slowtmr+0x5a4>
    ce30:	010000f4 	movhi	r4,3
    ce34:	213ec504 	addi	r4,r4,-1260
    ce38:	014000f4 	movhi	r5,3
    ce3c:	297f4304 	addi	r5,r5,-756
    ce40:	0180ee84 	movi	r6,954
    ce44:	01c000f4 	movhi	r7,3
    ce48:	39fed604 	addi	r7,r7,-1192
    ce4c:	0017c440 	call	17c44 <printf>
    ce50:	003fff06 	br	ce50 <tcp_slowtmr+0x5a0>
        prev->next = pcb->next;
    ce54:	e0bff817 	ldw	r2,-32(fp)
    ce58:	10c00317 	ldw	r3,12(r2)
    ce5c:	e0bff917 	ldw	r2,-28(fp)
    ce60:	10c00315 	stw	r3,12(r2)
    ce64:	00000f06 	br	cea4 <tcp_slowtmr+0x5f4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
    ce68:	d0e8b717 	ldw	r3,-23844(gp)
    ce6c:	e0bff817 	ldw	r2,-32(fp)
    ce70:	18800926 	beq	r3,r2,ce98 <tcp_slowtmr+0x5e8>
    ce74:	010000f4 	movhi	r4,3
    ce78:	213ec504 	addi	r4,r4,-1260
    ce7c:	014000f4 	movhi	r5,3
    ce80:	297f4e04 	addi	r5,r5,-712
    ce84:	0180ef84 	movi	r6,958
    ce88:	01c000f4 	movhi	r7,3
    ce8c:	39fed604 	addi	r7,r7,-1192
    ce90:	0017c440 	call	17c44 <printf>
    ce94:	003fff06 	br	ce94 <tcp_slowtmr+0x5e4>
        tcp_active_pcbs = pcb->next;
    ce98:	e0bff817 	ldw	r2,-32(fp)
    ce9c:	10800317 	ldw	r2,12(r2)
    cea0:	d0a8b715 	stw	r2,-23844(gp)
      }

      if (pcb_reset) {
    cea4:	e0bffa43 	ldbu	r2,-23(fp)
    cea8:	10001226 	beq	r2,zero,cef4 <tcp_slowtmr+0x644>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    ceac:	e0bff817 	ldw	r2,-32(fp)
    ceb0:	11001517 	ldw	r4,84(r2)
    ceb4:	e0bff817 	ldw	r2,-32(fp)
    ceb8:	11400b17 	ldw	r5,44(r2)
    cebc:	e0fff817 	ldw	r3,-32(fp)
    cec0:	e0bff817 	ldw	r2,-32(fp)
    cec4:	10800104 	addi	r2,r2,4
          pcb->local_port, pcb->remote_port);
    cec8:	e1bff817 	ldw	r6,-32(fp)
    cecc:	3180078b 	ldhu	r6,30(r6)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    ced0:	31ffffcc 	andi	r7,r6,65535
          pcb->local_port, pcb->remote_port);
    ced4:	e1bff817 	ldw	r6,-32(fp)
    ced8:	3180080b 	ldhu	r6,32(r6)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
    cedc:	31bfffcc 	andi	r6,r6,65535
    cee0:	d9c00015 	stw	r7,0(sp)
    cee4:	d9800115 	stw	r6,4(sp)
    cee8:	180d883a 	mov	r6,r3
    ceec:	100f883a 	mov	r7,r2
    cef0:	00140540 	call	14054 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
    cef4:	e0bff817 	ldw	r2,-32(fp)
    cef8:	10802417 	ldw	r2,144(r2)
    cefc:	e0bffc15 	stw	r2,-16(fp)
      err_arg = pcb->callback_arg;
    cf00:	e0bff817 	ldw	r2,-32(fp)
    cf04:	10800417 	ldw	r2,16(r2)
    cf08:	e0bffd15 	stw	r2,-12(fp)
      pcb2 = pcb;
    cf0c:	e0bff817 	ldw	r2,-32(fp)
    cf10:	e0bffe15 	stw	r2,-8(fp)
      pcb = pcb->next;
    cf14:	e0bff817 	ldw	r2,-32(fp)
    cf18:	10800317 	ldw	r2,12(r2)
    cf1c:	e0bff815 	stw	r2,-32(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
    cf20:	01000084 	movi	r4,2
    cf24:	e17ffe17 	ldw	r5,-8(fp)
    cf28:	00091c00 	call	91c0 <memp_free>

      tcp_active_pcbs_changed = 0;
    cf2c:	d028b685 	stb	zero,-23846(gp)
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
    cf30:	e0bffc17 	ldw	r2,-16(fp)
    cf34:	10000426 	beq	r2,zero,cf48 <tcp_slowtmr+0x698>
    cf38:	e0bffc17 	ldw	r2,-16(fp)
    cf3c:	e13ffd17 	ldw	r4,-12(fp)
    cf40:	017ffd84 	movi	r5,-10
    cf44:	103ee83a 	callr	r2
      if (tcp_active_pcbs_changed) {
    cf48:	d0a8b683 	ldbu	r2,-23846(gp)
    cf4c:	10803fcc 	andi	r2,r2,255
    cf50:	10002a26 	beq	r2,zero,cffc <tcp_slowtmr+0x74c>
        goto tcp_slowtmr_start;
    cf54:	003e6306 	br	c8e4 <tcp_slowtmr+0x34>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
    cf58:	e0bff817 	ldw	r2,-32(fp)
    cf5c:	e0bff915 	stw	r2,-28(fp)
      pcb = pcb->next;
    cf60:	e0bff817 	ldw	r2,-32(fp)
    cf64:	10800317 	ldw	r2,12(r2)
    cf68:	e0bff815 	stw	r2,-32(fp)

      /* We check if we should poll the connection. */
      ++prev->polltmr;
    cf6c:	e0bff917 	ldw	r2,-28(fp)
    cf70:	108008c3 	ldbu	r2,35(r2)
    cf74:	10800044 	addi	r2,r2,1
    cf78:	1007883a 	mov	r3,r2
    cf7c:	e0bff917 	ldw	r2,-28(fp)
    cf80:	10c008c5 	stb	r3,35(r2)
      if (prev->polltmr >= prev->pollinterval) {
    cf84:	e0bff917 	ldw	r2,-28(fp)
    cf88:	10c008c3 	ldbu	r3,35(r2)
    cf8c:	e0bff917 	ldw	r2,-28(fp)
    cf90:	10800903 	ldbu	r2,36(r2)
    cf94:	18c03fcc 	andi	r3,r3,255
    cf98:	10803fcc 	andi	r2,r2,255
    cf9c:	18801736 	bltu	r3,r2,cffc <tcp_slowtmr+0x74c>
        prev->polltmr = 0;
    cfa0:	e0bff917 	ldw	r2,-28(fp)
    cfa4:	100008c5 	stb	zero,35(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
    cfa8:	d028b685 	stb	zero,-23846(gp)
        TCP_EVENT_POLL(prev, err);
    cfac:	e0bff917 	ldw	r2,-28(fp)
    cfb0:	10802317 	ldw	r2,140(r2)
    cfb4:	10000926 	beq	r2,zero,cfdc <tcp_slowtmr+0x72c>
    cfb8:	e0bff917 	ldw	r2,-28(fp)
    cfbc:	10c02317 	ldw	r3,140(r2)
    cfc0:	e0bff917 	ldw	r2,-28(fp)
    cfc4:	10800417 	ldw	r2,16(r2)
    cfc8:	1009883a 	mov	r4,r2
    cfcc:	e17ff917 	ldw	r5,-28(fp)
    cfd0:	183ee83a 	callr	r3
    cfd4:	e0bffa85 	stb	r2,-22(fp)
    cfd8:	00000106 	br	cfe0 <tcp_slowtmr+0x730>
    cfdc:	e03ffa85 	stb	zero,-22(fp)
        if (tcp_active_pcbs_changed) {
    cfe0:	d0a8b683 	ldbu	r2,-23846(gp)
    cfe4:	10803fcc 	andi	r2,r2,255
    cfe8:	103e3d1e 	bne	r2,zero,c8e0 <tcp_slowtmr+0x30>
          goto tcp_slowtmr_start;
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
    cfec:	e0bffa87 	ldb	r2,-22(fp)
    cff0:	1000021e 	bne	r2,zero,cffc <tcp_slowtmr+0x74c>
          tcp_output(prev);
    cff4:	e13ff917 	ldw	r4,-28(fp)
    cff8:	00134600 	call	13460 <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    cffc:	e0bff817 	ldw	r2,-32(fp)
    d000:	103e3c1e 	bne	r2,zero,c8f4 <tcp_slowtmr+0x44>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
    d004:	e03ff915 	stw	zero,-28(fp)
  pcb = tcp_tw_pcbs;
    d008:	d0a8bc17 	ldw	r2,-23824(gp)
    d00c:	e0bff815 	stw	r2,-32(fp)
  while (pcb != NULL) {
    d010:	00004b06 	br	d140 <tcp_slowtmr+0x890>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    d014:	e0bff817 	ldw	r2,-32(fp)
    d018:	10800617 	ldw	r2,24(r2)
    d01c:	108002a0 	cmpeqi	r2,r2,10
    d020:	1000091e 	bne	r2,zero,d048 <tcp_slowtmr+0x798>
    d024:	010000f4 	movhi	r4,3
    d028:	213ec504 	addi	r4,r4,-1260
    d02c:	014000f4 	movhi	r5,3
    d030:	297f5904 	addi	r5,r5,-668
    d034:	0180fb84 	movi	r6,1006
    d038:	01c000f4 	movhi	r7,3
    d03c:	39fed604 	addi	r7,r7,-1192
    d040:	0017c440 	call	17c44 <printf>
    d044:	003fff06 	br	d044 <tcp_slowtmr+0x794>
    pcb_remove = 0;
    d048:	e03ffa05 	stb	zero,-24(fp)

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    d04c:	d0e8b817 	ldw	r3,-23840(gp)
    d050:	e0bff817 	ldw	r2,-32(fp)
    d054:	10800a17 	ldw	r2,40(r2)
    d058:	1885c83a 	sub	r2,r3,r2
    d05c:	10803c70 	cmpltui	r2,r2,241
    d060:	1000031e 	bne	r2,zero,d070 <tcp_slowtmr+0x7c0>
      ++pcb_remove;
    d064:	e0bffa03 	ldbu	r2,-24(fp)
    d068:	10800044 	addi	r2,r2,1
    d06c:	e0bffa05 	stb	r2,-24(fp)
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
    d070:	e0bffa03 	ldbu	r2,-24(fp)
    d074:	10002d26 	beq	r2,zero,d12c <tcp_slowtmr+0x87c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
    d078:	e13ff817 	ldw	r4,-32(fp)
    d07c:	000db040 	call	db04 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
    d080:	e0bff917 	ldw	r2,-28(fp)
    d084:	10001126 	beq	r2,zero,d0cc <tcp_slowtmr+0x81c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
    d088:	d0a8bc17 	ldw	r2,-23824(gp)
    d08c:	e0fff817 	ldw	r3,-32(fp)
    d090:	1880091e 	bne	r3,r2,d0b8 <tcp_slowtmr+0x808>
    d094:	010000f4 	movhi	r4,3
    d098:	213ec504 	addi	r4,r4,-1260
    d09c:	014000f4 	movhi	r5,3
    d0a0:	297f6504 	addi	r5,r5,-620
    d0a4:	0180ff84 	movi	r6,1022
    d0a8:	01c000f4 	movhi	r7,3
    d0ac:	39fed604 	addi	r7,r7,-1192
    d0b0:	0017c440 	call	17c44 <printf>
    d0b4:	003fff06 	br	d0b4 <tcp_slowtmr+0x804>
        prev->next = pcb->next;
    d0b8:	e0bff817 	ldw	r2,-32(fp)
    d0bc:	10c00317 	ldw	r3,12(r2)
    d0c0:	e0bff917 	ldw	r2,-28(fp)
    d0c4:	10c00315 	stw	r3,12(r2)
    d0c8:	00000f06 	br	d108 <tcp_slowtmr+0x858>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
    d0cc:	d0e8bc17 	ldw	r3,-23824(gp)
    d0d0:	e0bff817 	ldw	r2,-32(fp)
    d0d4:	18800926 	beq	r3,r2,d0fc <tcp_slowtmr+0x84c>
    d0d8:	010000f4 	movhi	r4,3
    d0dc:	213ec504 	addi	r4,r4,-1260
    d0e0:	014000f4 	movhi	r5,3
    d0e4:	297f6f04 	addi	r5,r5,-580
    d0e8:	01810084 	movi	r6,1026
    d0ec:	01c000f4 	movhi	r7,3
    d0f0:	39fed604 	addi	r7,r7,-1192
    d0f4:	0017c440 	call	17c44 <printf>
    d0f8:	003fff06 	br	d0f8 <tcp_slowtmr+0x848>
        tcp_tw_pcbs = pcb->next;
    d0fc:	e0bff817 	ldw	r2,-32(fp)
    d100:	10800317 	ldw	r2,12(r2)
    d104:	d0a8bc15 	stw	r2,-23824(gp)
      }
      pcb2 = pcb;
    d108:	e0bff817 	ldw	r2,-32(fp)
    d10c:	e0bfff15 	stw	r2,-4(fp)
      pcb = pcb->next;
    d110:	e0bff817 	ldw	r2,-32(fp)
    d114:	10800317 	ldw	r2,12(r2)
    d118:	e0bff815 	stw	r2,-32(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
    d11c:	01000084 	movi	r4,2
    d120:	e17fff17 	ldw	r5,-4(fp)
    d124:	00091c00 	call	91c0 <memp_free>
    d128:	00000506 	br	d140 <tcp_slowtmr+0x890>
    } else {
      prev = pcb;
    d12c:	e0bff817 	ldw	r2,-32(fp)
    d130:	e0bff915 	stw	r2,-28(fp)
      pcb = pcb->next;
    d134:	e0bff817 	ldw	r2,-32(fp)
    d138:	10800317 	ldw	r2,12(r2)
    d13c:	e0bff815 	stw	r2,-32(fp)

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
    d140:	e0bff817 	ldw	r2,-32(fp)
    d144:	103fb31e 	bne	r2,zero,d014 <tcp_slowtmr+0x764>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
    d148:	e037883a 	mov	sp,fp
    d14c:	dfc00117 	ldw	ra,4(sp)
    d150:	df000017 	ldw	fp,0(sp)
    d154:	dec00204 	addi	sp,sp,8
    d158:	f800283a 	ret

0000d15c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
    d15c:	defffc04 	addi	sp,sp,-16
    d160:	dfc00315 	stw	ra,12(sp)
    d164:	df000215 	stw	fp,8(sp)
    d168:	df000204 	addi	fp,sp,8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
    d16c:	d0a8b643 	ldbu	r2,-23847(gp)
    d170:	10800044 	addi	r2,r2,1
    d174:	d0a8b645 	stb	r2,-23847(gp)
    d178:	00000106 	br	d180 <tcp_fasttmr+0x24>
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
        tcp_process_refused_data(pcb);
        if (tcp_active_pcbs_changed) {
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
    d17c:	0001883a 	nop
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
    d180:	d0a8b717 	ldw	r2,-23844(gp)
    d184:	e0bffe15 	stw	r2,-8(fp)

  while(pcb != NULL) {
    d188:	00002b06 	br	d238 <tcp_fasttmr+0xdc>
    if (pcb->last_timer != tcp_timer_ctr) {
    d18c:	e0bffe17 	ldw	r2,-8(fp)
    d190:	10c00943 	ldbu	r3,37(r2)
    d194:	d0a8b643 	ldbu	r2,-23847(gp)
    d198:	18c03fcc 	andi	r3,r3,255
    d19c:	10803fcc 	andi	r2,r2,255
    d1a0:	18802526 	beq	r3,r2,d238 <tcp_fasttmr+0xdc>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
    d1a4:	d0e8b643 	ldbu	r3,-23847(gp)
    d1a8:	e0bffe17 	ldw	r2,-8(fp)
    d1ac:	10c00945 	stb	r3,37(r2)
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
    d1b0:	e0bffe17 	ldw	r2,-8(fp)
    d1b4:	10800883 	ldbu	r2,34(r2)
    d1b8:	10803fcc 	andi	r2,r2,255
    d1bc:	1080004c 	andi	r2,r2,1
    d1c0:	10000f26 	beq	r2,zero,d200 <tcp_fasttmr+0xa4>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
    d1c4:	e0bffe17 	ldw	r2,-8(fp)
    d1c8:	10800883 	ldbu	r2,34(r2)
    d1cc:	10800094 	ori	r2,r2,2
    d1d0:	1007883a 	mov	r3,r2
    d1d4:	e0bffe17 	ldw	r2,-8(fp)
    d1d8:	10c00885 	stb	r3,34(r2)
        tcp_output(pcb);
    d1dc:	e13ffe17 	ldw	r4,-8(fp)
    d1e0:	00134600 	call	13460 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    d1e4:	e0bffe17 	ldw	r2,-8(fp)
    d1e8:	10c00883 	ldbu	r3,34(r2)
    d1ec:	00bfff04 	movi	r2,-4
    d1f0:	1884703a 	and	r2,r3,r2
    d1f4:	1007883a 	mov	r3,r2
    d1f8:	e0bffe17 	ldw	r2,-8(fp)
    d1fc:	10c00885 	stb	r3,34(r2)
      }

      next = pcb->next;
    d200:	e0bffe17 	ldw	r2,-8(fp)
    d204:	10800317 	ldw	r2,12(r2)
    d208:	e0bfff15 	stw	r2,-4(fp)

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
    d20c:	e0bffe17 	ldw	r2,-8(fp)
    d210:	10801f17 	ldw	r2,124(r2)
    d214:	10000626 	beq	r2,zero,d230 <tcp_fasttmr+0xd4>
        tcp_active_pcbs_changed = 0;
    d218:	d028b685 	stb	zero,-23846(gp)
        tcp_process_refused_data(pcb);
    d21c:	e13ffe17 	ldw	r4,-8(fp)
    d220:	000d2540 	call	d254 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
    d224:	d0a8b683 	ldbu	r2,-23846(gp)
    d228:	10803fcc 	andi	r2,r2,255
    d22c:	103fd31e 	bne	r2,zero,d17c <tcp_fasttmr+0x20>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
        }
      }
      pcb = next;
    d230:	e0bfff17 	ldw	r2,-4(fp)
    d234:	e0bffe15 	stw	r2,-8(fp)
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
    d238:	e0bffe17 	ldw	r2,-8(fp)
    d23c:	103fd31e 	bne	r2,zero,d18c <tcp_fasttmr+0x30>
        }
      }
      pcb = next;
    }
  }
}
    d240:	e037883a 	mov	sp,fp
    d244:	dfc00117 	ldw	ra,4(sp)
    d248:	df000017 	ldw	fp,0(sp)
    d24c:	dec00204 	addi	sp,sp,8
    d250:	f800283a 	ret

0000d254 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
    d254:	defffb04 	addi	sp,sp,-20
    d258:	dfc00415 	stw	ra,16(sp)
    d25c:	df000315 	stw	fp,12(sp)
    d260:	df000304 	addi	fp,sp,12
    d264:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
    d268:	e0bfff17 	ldw	r2,-4(fp)
    d26c:	10801f17 	ldw	r2,124(r2)
    d270:	10800343 	ldbu	r2,13(r2)
    d274:	e0bffd45 	stb	r2,-11(fp)
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
    d278:	e0bfff17 	ldw	r2,-4(fp)
    d27c:	10801f17 	ldw	r2,124(r2)
    d280:	e0bffe15 	stw	r2,-8(fp)
  pcb->refused_data = NULL;
    d284:	e0bfff17 	ldw	r2,-4(fp)
    d288:	10001f15 	stw	zero,124(r2)
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
    d28c:	e0bfff17 	ldw	r2,-4(fp)
    d290:	10802117 	ldw	r2,132(r2)
    d294:	10000b26 	beq	r2,zero,d2c4 <tcp_process_refused_data+0x70>
    d298:	e0bfff17 	ldw	r2,-4(fp)
    d29c:	10c02117 	ldw	r3,132(r2)
    d2a0:	e0bfff17 	ldw	r2,-4(fp)
    d2a4:	10800417 	ldw	r2,16(r2)
    d2a8:	1009883a 	mov	r4,r2
    d2ac:	e17fff17 	ldw	r5,-4(fp)
    d2b0:	e1bffe17 	ldw	r6,-8(fp)
    d2b4:	000f883a 	mov	r7,zero
    d2b8:	183ee83a 	callr	r3
    d2bc:	e0bffd05 	stb	r2,-12(fp)
    d2c0:	00000606 	br	d2dc <tcp_process_refused_data+0x88>
    d2c4:	0009883a 	mov	r4,zero
    d2c8:	e17fff17 	ldw	r5,-4(fp)
    d2cc:	e1bffe17 	ldw	r6,-8(fp)
    d2d0:	000f883a 	mov	r7,zero
    d2d4:	000d4e80 	call	d4e8 <tcp_recv_null>
    d2d8:	e0bffd05 	stb	r2,-12(fp)
  if (err == ERR_OK) {
    d2dc:	e0bffd07 	ldb	r2,-12(fp)
    d2e0:	1000221e 	bne	r2,zero,d36c <tcp_process_refused_data+0x118>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
    d2e4:	e0bffd43 	ldbu	r2,-11(fp)
    d2e8:	1080080c 	andi	r2,r2,32
    d2ec:	10002726 	beq	r2,zero,d38c <tcp_process_refused_data+0x138>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
    d2f0:	e0bfff17 	ldw	r2,-4(fp)
    d2f4:	10800c0b 	ldhu	r2,48(r2)
    d2f8:	10bfffcc 	andi	r2,r2,65535
    d2fc:	10820020 	cmpeqi	r2,r2,2048
    d300:	1000061e 	bne	r2,zero,d31c <tcp_process_refused_data+0xc8>
        pcb->rcv_wnd++;
    d304:	e0bfff17 	ldw	r2,-4(fp)
    d308:	10800c0b 	ldhu	r2,48(r2)
    d30c:	10800044 	addi	r2,r2,1
    d310:	1007883a 	mov	r3,r2
    d314:	e0bfff17 	ldw	r2,-4(fp)
    d318:	10c00c0d 	sth	r3,48(r2)
      }
      TCP_EVENT_CLOSED(pcb, err);
    d31c:	e0bfff17 	ldw	r2,-4(fp)
    d320:	10802117 	ldw	r2,132(r2)
    d324:	10000b26 	beq	r2,zero,d354 <tcp_process_refused_data+0x100>
    d328:	e0bfff17 	ldw	r2,-4(fp)
    d32c:	10c02117 	ldw	r3,132(r2)
    d330:	e0bfff17 	ldw	r2,-4(fp)
    d334:	10800417 	ldw	r2,16(r2)
    d338:	1009883a 	mov	r4,r2
    d33c:	e17fff17 	ldw	r5,-4(fp)
    d340:	000d883a 	mov	r6,zero
    d344:	000f883a 	mov	r7,zero
    d348:	183ee83a 	callr	r3
    d34c:	e0bffd05 	stb	r2,-12(fp)
    d350:	00000106 	br	d358 <tcp_process_refused_data+0x104>
    d354:	e03ffd05 	stb	zero,-12(fp)
      if (err == ERR_ABRT) {
    d358:	e0bffd07 	ldb	r2,-12(fp)
    d35c:	10bffd98 	cmpnei	r2,r2,-10
    d360:	10000a1e 	bne	r2,zero,d38c <tcp_process_refused_data+0x138>
        return ERR_ABRT;
    d364:	00bffd84 	movi	r2,-10
    d368:	00000906 	br	d390 <tcp_process_refused_data+0x13c>
      }
    }
  } else if (err == ERR_ABRT) {
    d36c:	e0bffd07 	ldb	r2,-12(fp)
    d370:	10bffd98 	cmpnei	r2,r2,-10
    d374:	1000021e 	bne	r2,zero,d380 <tcp_process_refused_data+0x12c>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
    d378:	00bffd84 	movi	r2,-10
    d37c:	00000406 	br	d390 <tcp_process_refused_data+0x13c>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
    d380:	e0bfff17 	ldw	r2,-4(fp)
    d384:	e0fffe17 	ldw	r3,-8(fp)
    d388:	10c01f15 	stw	r3,124(r2)
  }
  return ERR_OK;
    d38c:	0005883a 	mov	r2,zero
}
    d390:	e037883a 	mov	sp,fp
    d394:	dfc00117 	ldw	ra,4(sp)
    d398:	df000017 	ldw	fp,0(sp)
    d39c:	dec00204 	addi	sp,sp,8
    d3a0:	f800283a 	ret

0000d3a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
    d3a4:	defffc04 	addi	sp,sp,-16
    d3a8:	dfc00315 	stw	ra,12(sp)
    d3ac:	df000215 	stw	fp,8(sp)
    d3b0:	df000204 	addi	fp,sp,8
    d3b4:	e13fff15 	stw	r4,-4(fp)
  while (seg != NULL) {
    d3b8:	00000706 	br	d3d8 <tcp_segs_free+0x34>
    struct tcp_seg *next = seg->next;
    d3bc:	e0bfff17 	ldw	r2,-4(fp)
    d3c0:	10800017 	ldw	r2,0(r2)
    d3c4:	e0bffe15 	stw	r2,-8(fp)
    tcp_seg_free(seg);
    d3c8:	e13fff17 	ldw	r4,-4(fp)
    d3cc:	000d3f40 	call	d3f4 <tcp_seg_free>
    seg = next;
    d3d0:	e0bffe17 	ldw	r2,-8(fp)
    d3d4:	e0bfff15 	stw	r2,-4(fp)
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
    d3d8:	e0bfff17 	ldw	r2,-4(fp)
    d3dc:	103ff71e 	bne	r2,zero,d3bc <tcp_segs_free+0x18>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
    d3e0:	e037883a 	mov	sp,fp
    d3e4:	dfc00117 	ldw	ra,4(sp)
    d3e8:	df000017 	ldw	fp,0(sp)
    d3ec:	dec00204 	addi	sp,sp,8
    d3f0:	f800283a 	ret

0000d3f4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
    d3f4:	defffd04 	addi	sp,sp,-12
    d3f8:	dfc00215 	stw	ra,8(sp)
    d3fc:	df000115 	stw	fp,4(sp)
    d400:	df000104 	addi	fp,sp,4
    d404:	e13fff15 	stw	r4,-4(fp)
  if (seg != NULL) {
    d408:	e0bfff17 	ldw	r2,-4(fp)
    d40c:	10000a26 	beq	r2,zero,d438 <tcp_seg_free+0x44>
    if (seg->p != NULL) {
    d410:	e0bfff17 	ldw	r2,-4(fp)
    d414:	10800117 	ldw	r2,4(r2)
    d418:	10000426 	beq	r2,zero,d42c <tcp_seg_free+0x38>
      pbuf_free(seg->p);
    d41c:	e0bfff17 	ldw	r2,-4(fp)
    d420:	10800117 	ldw	r2,4(r2)
    d424:	1009883a 	mov	r4,r2
    d428:	000a4200 	call	a420 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
    d42c:	01000104 	movi	r4,4
    d430:	e17fff17 	ldw	r5,-4(fp)
    d434:	00091c00 	call	91c0 <memp_free>
  }
}
    d438:	e037883a 	mov	sp,fp
    d43c:	dfc00117 	ldw	ra,4(sp)
    d440:	df000017 	ldw	fp,0(sp)
    d444:	dec00204 	addi	sp,sp,8
    d448:	f800283a 	ret

0000d44c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
    d44c:	defffd04 	addi	sp,sp,-12
    d450:	df000215 	stw	fp,8(sp)
    d454:	df000204 	addi	fp,sp,8
    d458:	e13ffe15 	stw	r4,-8(fp)
    d45c:	2805883a 	mov	r2,r5
    d460:	e0bfff05 	stb	r2,-4(fp)
  pcb->prio = prio;
    d464:	e0bffe17 	ldw	r2,-8(fp)
    d468:	e0ffff03 	ldbu	r3,-4(fp)
    d46c:	10c00705 	stb	r3,28(r2)
}
    d470:	e037883a 	mov	sp,fp
    d474:	df000017 	ldw	fp,0(sp)
    d478:	dec00104 	addi	sp,sp,4
    d47c:	f800283a 	ret

0000d480 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
    d480:	defffc04 	addi	sp,sp,-16
    d484:	dfc00315 	stw	ra,12(sp)
    d488:	df000215 	stw	fp,8(sp)
    d48c:	df000204 	addi	fp,sp,8
    d490:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
    d494:	01000104 	movi	r4,4
    d498:	0008fe40 	call	8fe4 <memp_malloc>
    d49c:	e0bffe15 	stw	r2,-8(fp)
  if (cseg == NULL) {
    d4a0:	e0bffe17 	ldw	r2,-8(fp)
    d4a4:	1000021e 	bne	r2,zero,d4b0 <tcp_seg_copy+0x30>
    return NULL;
    d4a8:	0005883a 	mov	r2,zero
    d4ac:	00000906 	br	d4d4 <tcp_seg_copy+0x54>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
    d4b0:	e13ffe17 	ldw	r4,-8(fp)
    d4b4:	e17fff17 	ldw	r5,-4(fp)
    d4b8:	01800404 	movi	r6,16
    d4bc:	0017a440 	call	17a44 <memcpy>
  pbuf_ref(cseg->p);
    d4c0:	e0bffe17 	ldw	r2,-8(fp)
    d4c4:	10800117 	ldw	r2,4(r2)
    d4c8:	1009883a 	mov	r4,r2
    d4cc:	000a6380 	call	a638 <pbuf_ref>
  return cseg;
    d4d0:	e0bffe17 	ldw	r2,-8(fp)
}
    d4d4:	e037883a 	mov	sp,fp
    d4d8:	dfc00117 	ldw	ra,4(sp)
    d4dc:	df000017 	ldw	fp,0(sp)
    d4e0:	dec00204 	addi	sp,sp,8
    d4e4:	f800283a 	ret

0000d4e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
    d4e8:	defffa04 	addi	sp,sp,-24
    d4ec:	dfc00515 	stw	ra,20(sp)
    d4f0:	df000415 	stw	fp,16(sp)
    d4f4:	df000404 	addi	fp,sp,16
    d4f8:	e13ffc15 	stw	r4,-16(fp)
    d4fc:	e17ffd15 	stw	r5,-12(fp)
    d500:	e1bffe15 	stw	r6,-8(fp)
    d504:	3805883a 	mov	r2,r7
    d508:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    d50c:	e0bffe17 	ldw	r2,-8(fp)
    d510:	10000926 	beq	r2,zero,d538 <tcp_recv_null+0x50>
    tcp_recved(pcb, p->tot_len);
    d514:	e0bffe17 	ldw	r2,-8(fp)
    d518:	1080020b 	ldhu	r2,8(r2)
    d51c:	10bfffcc 	andi	r2,r2,65535
    d520:	e13ffd17 	ldw	r4,-12(fp)
    d524:	100b883a 	mov	r5,r2
    d528:	000c4040 	call	c404 <tcp_recved>
    pbuf_free(p);
    d52c:	e13ffe17 	ldw	r4,-8(fp)
    d530:	000a4200 	call	a420 <pbuf_free>
    d534:	00000506 	br	d54c <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
    d538:	e0bfff07 	ldb	r2,-4(fp)
    d53c:	1000031e 	bne	r2,zero,d54c <tcp_recv_null+0x64>
    return tcp_close(pcb);
    d540:	e13ffd17 	ldw	r4,-12(fp)
    d544:	000bc380 	call	bc38 <tcp_close>
    d548:	00000106 	br	d550 <tcp_recv_null+0x68>
  }
  return ERR_OK;
    d54c:	0005883a 	mov	r2,zero
}
    d550:	e037883a 	mov	sp,fp
    d554:	dfc00117 	ldw	ra,4(sp)
    d558:	df000017 	ldw	fp,0(sp)
    d55c:	dec00204 	addi	sp,sp,8
    d560:	f800283a 	ret

0000d564 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
    d564:	defff904 	addi	sp,sp,-28
    d568:	dfc00615 	stw	ra,24(sp)
    d56c:	df000515 	stw	fp,20(sp)
    d570:	df000504 	addi	fp,sp,20
    d574:	2005883a 	mov	r2,r4
    d578:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
    d57c:	00801fc4 	movi	r2,127
    d580:	e0bffe05 	stb	r2,-8(fp)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
    d584:	e03ffd15 	stw	zero,-12(fp)
  inactive = NULL;
    d588:	e03ffc15 	stw	zero,-16(fp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    d58c:	d0a8b717 	ldw	r2,-23844(gp)
    d590:	e0bffb15 	stw	r2,-20(fp)
    d594:	00001d06 	br	d60c <tcp_kill_prio+0xa8>
    if (pcb->prio <= prio &&
    d598:	e0bffb17 	ldw	r2,-20(fp)
    d59c:	10800703 	ldbu	r2,28(r2)
    d5a0:	10803fcc 	andi	r2,r2,255
    d5a4:	e0ffff03 	ldbu	r3,-4(fp)
    d5a8:	18801536 	bltu	r3,r2,d600 <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
    d5ac:	e0bffb17 	ldw	r2,-20(fp)
    d5b0:	10800703 	ldbu	r2,28(r2)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
    d5b4:	10803fcc 	andi	r2,r2,255
    d5b8:	e0fffe03 	ldbu	r3,-8(fp)
    d5bc:	18801036 	bltu	r3,r2,d600 <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    d5c0:	d0e8b817 	ldw	r3,-23840(gp)
    d5c4:	e0bffb17 	ldw	r2,-20(fp)
    d5c8:	10800a17 	ldw	r2,40(r2)
    d5cc:	1887c83a 	sub	r3,r3,r2
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
    d5d0:	e0bffd17 	ldw	r2,-12(fp)
    d5d4:	18800a36 	bltu	r3,r2,d600 <tcp_kill_prio+0x9c>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
    d5d8:	d0e8b817 	ldw	r3,-23840(gp)
    d5dc:	e0bffb17 	ldw	r2,-20(fp)
    d5e0:	10800a17 	ldw	r2,40(r2)
    d5e4:	1885c83a 	sub	r2,r3,r2
    d5e8:	e0bffd15 	stw	r2,-12(fp)
      inactive = pcb;
    d5ec:	e0bffb17 	ldw	r2,-20(fp)
    d5f0:	e0bffc15 	stw	r2,-16(fp)
      mprio = pcb->prio;
    d5f4:	e0bffb17 	ldw	r2,-20(fp)
    d5f8:	10800703 	ldbu	r2,28(r2)
    d5fc:	e0bffe05 	stb	r2,-8(fp)
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    d600:	e0bffb17 	ldw	r2,-20(fp)
    d604:	10800317 	ldw	r2,12(r2)
    d608:	e0bffb15 	stw	r2,-20(fp)
    d60c:	e0bffb17 	ldw	r2,-20(fp)
    d610:	103fe11e 	bne	r2,zero,d598 <tcp_kill_prio+0x34>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
    d614:	e0bffc17 	ldw	r2,-16(fp)
    d618:	10000226 	beq	r2,zero,d624 <tcp_kill_prio+0xc0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
    d61c:	e13ffc17 	ldw	r4,-16(fp)
    d620:	000bf140 	call	bf14 <tcp_abort>
  }
}
    d624:	e037883a 	mov	sp,fp
    d628:	dfc00117 	ldw	ra,4(sp)
    d62c:	df000017 	ldw	fp,0(sp)
    d630:	dec00204 	addi	sp,sp,8
    d634:	f800283a 	ret

0000d638 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
    d638:	defffb04 	addi	sp,sp,-20
    d63c:	dfc00415 	stw	ra,16(sp)
    d640:	df000315 	stw	fp,12(sp)
    d644:	df000304 	addi	fp,sp,12
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
    d648:	e03fff15 	stw	zero,-4(fp)
  inactive = NULL;
    d64c:	e03ffe15 	stw	zero,-8(fp)
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    d650:	d0a8bc17 	ldw	r2,-23824(gp)
    d654:	e0bffd15 	stw	r2,-12(fp)
    d658:	00001006 	br	d69c <tcp_kill_timewait+0x64>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    d65c:	d0e8b817 	ldw	r3,-23840(gp)
    d660:	e0bffd17 	ldw	r2,-12(fp)
    d664:	10800a17 	ldw	r2,40(r2)
    d668:	1887c83a 	sub	r3,r3,r2
    d66c:	e0bfff17 	ldw	r2,-4(fp)
    d670:	18800736 	bltu	r3,r2,d690 <tcp_kill_timewait+0x58>
      inactivity = tcp_ticks - pcb->tmr;
    d674:	d0e8b817 	ldw	r3,-23840(gp)
    d678:	e0bffd17 	ldw	r2,-12(fp)
    d67c:	10800a17 	ldw	r2,40(r2)
    d680:	1885c83a 	sub	r2,r3,r2
    d684:	e0bfff15 	stw	r2,-4(fp)
      inactive = pcb;
    d688:	e0bffd17 	ldw	r2,-12(fp)
    d68c:	e0bffe15 	stw	r2,-8(fp)
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    d690:	e0bffd17 	ldw	r2,-12(fp)
    d694:	10800317 	ldw	r2,12(r2)
    d698:	e0bffd15 	stw	r2,-12(fp)
    d69c:	e0bffd17 	ldw	r2,-12(fp)
    d6a0:	103fee1e 	bne	r2,zero,d65c <tcp_kill_timewait+0x24>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
    d6a4:	e0bffe17 	ldw	r2,-8(fp)
    d6a8:	10000226 	beq	r2,zero,d6b4 <tcp_kill_timewait+0x7c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
    d6ac:	e13ffe17 	ldw	r4,-8(fp)
    d6b0:	000bf140 	call	bf14 <tcp_abort>
  }
}
    d6b4:	e037883a 	mov	sp,fp
    d6b8:	dfc00117 	ldw	ra,4(sp)
    d6bc:	df000017 	ldw	fp,0(sp)
    d6c0:	dec00204 	addi	sp,sp,8
    d6c4:	f800283a 	ret

0000d6c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
    d6c8:	defffb04 	addi	sp,sp,-20
    d6cc:	dfc00415 	stw	ra,16(sp)
    d6d0:	df000315 	stw	fp,12(sp)
    d6d4:	df000304 	addi	fp,sp,12
    d6d8:	2005883a 	mov	r2,r4
    d6dc:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    d6e0:	01000084 	movi	r4,2
    d6e4:	0008fe40 	call	8fe4 <memp_malloc>
    d6e8:	e0bffd15 	stw	r2,-12(fp)
  if (pcb == NULL) {
    d6ec:	e0bffd17 	ldw	r2,-12(fp)
    d6f0:	1000201e 	bne	r2,zero,d774 <tcp_alloc+0xac>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    d6f4:	000d6380 	call	d638 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    d6f8:	01000084 	movi	r4,2
    d6fc:	0008fe40 	call	8fe4 <memp_malloc>
    d700:	e0bffd15 	stw	r2,-12(fp)
    if (pcb == NULL) {
    d704:	e0bffd17 	ldw	r2,-12(fp)
    d708:	1000101e 	bne	r2,zero,d74c <tcp_alloc+0x84>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
    d70c:	e0bfff03 	ldbu	r2,-4(fp)
    d710:	1009883a 	mov	r4,r2
    d714:	000d5640 	call	d564 <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    d718:	01000084 	movi	r4,2
    d71c:	0008fe40 	call	8fe4 <memp_malloc>
    d720:	e0bffd15 	stw	r2,-12(fp)
      if (pcb != NULL) {
    d724:	e0bffd17 	ldw	r2,-12(fp)
    d728:	10000826 	beq	r2,zero,d74c <tcp_alloc+0x84>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    d72c:	00800134 	movhi	r2,4
    d730:	10932304 	addi	r2,r2,19596
    d734:	1080330b 	ldhu	r2,204(r2)
    d738:	10bfffc4 	addi	r2,r2,-1
    d73c:	1007883a 	mov	r3,r2
    d740:	00800134 	movhi	r2,4
    d744:	10932304 	addi	r2,r2,19596
    d748:	10c0330d 	sth	r3,204(r2)
      }
    }
    if (pcb != NULL) {
    d74c:	e0bffd17 	ldw	r2,-12(fp)
    d750:	10000826 	beq	r2,zero,d774 <tcp_alloc+0xac>
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    d754:	00800134 	movhi	r2,4
    d758:	10932304 	addi	r2,r2,19596
    d75c:	1080330b 	ldhu	r2,204(r2)
    d760:	10bfffc4 	addi	r2,r2,-1
    d764:	1007883a 	mov	r3,r2
    d768:	00800134 	movhi	r2,4
    d76c:	10932304 	addi	r2,r2,19596
    d770:	10c0330d 	sth	r3,204(r2)
    }
  }
  if (pcb != NULL) {
    d774:	e0bffd17 	ldw	r2,-12(fp)
    d778:	10004826 	beq	r2,zero,d89c <tcp_alloc+0x1d4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
    d77c:	e13ffd17 	ldw	r4,-12(fp)
    d780:	000b883a 	mov	r5,zero
    d784:	01802704 	movi	r6,156
    d788:	0017b3c0 	call	17b3c <memset>
    pcb->prio = prio;
    d78c:	e0bffd17 	ldw	r2,-12(fp)
    d790:	e0ffff03 	ldbu	r3,-4(fp)
    d794:	10c00705 	stb	r3,28(r2)
    pcb->snd_buf = TCP_SND_BUF;
    d798:	e0bffd17 	ldw	r2,-12(fp)
    d79c:	00d00004 	movi	r3,16384
    d7a0:	10c01a8d 	sth	r3,106(r2)
    pcb->snd_queuelen = 0;
    d7a4:	e0bffd17 	ldw	r2,-12(fp)
    d7a8:	10001b0d 	sth	zero,108(r2)
    pcb->rcv_wnd = TCP_WND;
    d7ac:	e0bffd17 	ldw	r2,-12(fp)
    d7b0:	00c20004 	movi	r3,2048
    d7b4:	10c00c0d 	sth	r3,48(r2)
    pcb->rcv_ann_wnd = TCP_WND;
    d7b8:	e0bffd17 	ldw	r2,-12(fp)
    d7bc:	00c20004 	movi	r3,2048
    d7c0:	10c00c8d 	sth	r3,50(r2)
    pcb->tos = 0;
    d7c4:	e0bffd17 	ldw	r2,-12(fp)
    d7c8:	10000245 	stb	zero,9(r2)
    pcb->ttl = TCP_TTL;
    d7cc:	e0bffd17 	ldw	r2,-12(fp)
    d7d0:	00ffffc4 	movi	r3,-1
    d7d4:	10c00285 	stb	r3,10(r2)
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    d7d8:	e0bffd17 	ldw	r2,-12(fp)
    d7dc:	00c08604 	movi	r3,536
    d7e0:	10c00e8d 	sth	r3,58(r2)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    d7e4:	e0bffd17 	ldw	r2,-12(fp)
    d7e8:	00c00184 	movi	r3,6
    d7ec:	10c0120d 	sth	r3,72(r2)
    pcb->sa = 0;
    d7f0:	e0bffd17 	ldw	r2,-12(fp)
    d7f4:	1000110d 	sth	zero,68(r2)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    d7f8:	e0bffd17 	ldw	r2,-12(fp)
    d7fc:	00c00184 	movi	r3,6
    d800:	10c0118d 	sth	r3,70(r2)
    pcb->rtime = -1;
    d804:	e0bffd17 	ldw	r2,-12(fp)
    d808:	00ffffc4 	movi	r3,-1
    d80c:	10c00e0d 	sth	r3,56(r2)
    pcb->cwnd = 1;
    d810:	e0bffd17 	ldw	r2,-12(fp)
    d814:	00c00044 	movi	r3,1
    d818:	10c0140d 	sth	r3,80(r2)
    iss = tcp_next_iss();
    d81c:	000dd880 	call	dd88 <tcp_next_iss>
    d820:	e0bffe15 	stw	r2,-8(fp)
    pcb->snd_wl2 = iss;
    d824:	e0bffd17 	ldw	r2,-12(fp)
    d828:	e0fffe17 	ldw	r3,-8(fp)
    d82c:	10c01715 	stw	r3,92(r2)
    pcb->snd_nxt = iss;
    d830:	e0bffd17 	ldw	r2,-12(fp)
    d834:	e0fffe17 	ldw	r3,-8(fp)
    d838:	10c01515 	stw	r3,84(r2)
    pcb->lastack = iss;
    d83c:	e0bffd17 	ldw	r2,-12(fp)
    d840:	e0fffe17 	ldw	r3,-8(fp)
    d844:	10c01315 	stw	r3,76(r2)
    pcb->snd_lbb = iss;   
    d848:	e0bffd17 	ldw	r2,-12(fp)
    d84c:	e0fffe17 	ldw	r3,-8(fp)
    d850:	10c01815 	stw	r3,96(r2)
    pcb->tmr = tcp_ticks;
    d854:	d0e8b817 	ldw	r3,-23840(gp)
    d858:	e0bffd17 	ldw	r2,-12(fp)
    d85c:	10c00a15 	stw	r3,40(r2)
    pcb->last_timer = tcp_timer_ctr;
    d860:	d0e8b643 	ldbu	r3,-23847(gp)
    d864:	e0bffd17 	ldw	r2,-12(fp)
    d868:	10c00945 	stb	r3,37(r2)

    pcb->polltmr = 0;
    d86c:	e0bffd17 	ldw	r2,-12(fp)
    d870:	100008c5 	stb	zero,35(r2)

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
    d874:	e0bffd17 	ldw	r2,-12(fp)
    d878:	00c00074 	movhi	r3,1
    d87c:	18f53a04 	addi	r3,r3,-11032
    d880:	10c02115 	stw	r3,132(r2)
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
    d884:	e0bffd17 	ldw	r2,-12(fp)
    d888:	00c01bb4 	movhi	r3,110
    d88c:	18f74004 	addi	r3,r3,-8960
    d890:	10c02515 	stw	r3,148(r2)
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
    d894:	e0bffd17 	ldw	r2,-12(fp)
    d898:	10002685 	stb	zero,154(r2)
  }
  return pcb;
    d89c:	e0bffd17 	ldw	r2,-12(fp)
}
    d8a0:	e037883a 	mov	sp,fp
    d8a4:	dfc00117 	ldw	ra,4(sp)
    d8a8:	df000017 	ldw	fp,0(sp)
    d8ac:	dec00204 	addi	sp,sp,8
    d8b0:	f800283a 	ret

0000d8b4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
    d8b4:	defffe04 	addi	sp,sp,-8
    d8b8:	dfc00115 	stw	ra,4(sp)
    d8bc:	df000015 	stw	fp,0(sp)
    d8c0:	d839883a 	mov	fp,sp
  return tcp_alloc(TCP_PRIO_NORMAL);
    d8c4:	01001004 	movi	r4,64
    d8c8:	000d6c80 	call	d6c8 <tcp_alloc>
}
    d8cc:	e037883a 	mov	sp,fp
    d8d0:	dfc00117 	ldw	ra,4(sp)
    d8d4:	df000017 	ldw	fp,0(sp)
    d8d8:	dec00204 	addi	sp,sp,8
    d8dc:	f800283a 	ret

0000d8e0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
    d8e0:	defffd04 	addi	sp,sp,-12
    d8e4:	df000215 	stw	fp,8(sp)
    d8e8:	df000204 	addi	fp,sp,8
    d8ec:	e13ffe15 	stw	r4,-8(fp)
    d8f0:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
    d8f4:	e0bffe17 	ldw	r2,-8(fp)
    d8f8:	e0ffff17 	ldw	r3,-4(fp)
    d8fc:	10c00415 	stw	r3,16(r2)
}
    d900:	e037883a 	mov	sp,fp
    d904:	df000017 	ldw	fp,0(sp)
    d908:	dec00104 	addi	sp,sp,4
    d90c:	f800283a 	ret

0000d910 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
    d910:	defffc04 	addi	sp,sp,-16
    d914:	dfc00315 	stw	ra,12(sp)
    d918:	df000215 	stw	fp,8(sp)
    d91c:	df000204 	addi	fp,sp,8
    d920:	e13ffe15 	stw	r4,-8(fp)
    d924:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    d928:	e0bffe17 	ldw	r2,-8(fp)
    d92c:	10800617 	ldw	r2,24(r2)
    d930:	10800058 	cmpnei	r2,r2,1
    d934:	1000091e 	bne	r2,zero,d95c <tcp_recv+0x4c>
    d938:	010000f4 	movhi	r4,3
    d93c:	213ec504 	addi	r4,r4,-1260
    d940:	014000f4 	movhi	r5,3
    d944:	297f7904 	addi	r5,r5,-540
    d948:	01815c84 	movi	r6,1394
    d94c:	01c000f4 	movhi	r7,3
    d950:	39fed604 	addi	r7,r7,-1192
    d954:	0017c440 	call	17c44 <printf>
    d958:	003fff06 	br	d958 <tcp_recv+0x48>
  pcb->recv = recv;
    d95c:	e0bffe17 	ldw	r2,-8(fp)
    d960:	e0ffff17 	ldw	r3,-4(fp)
    d964:	10c02115 	stw	r3,132(r2)
}
    d968:	e037883a 	mov	sp,fp
    d96c:	dfc00117 	ldw	ra,4(sp)
    d970:	df000017 	ldw	fp,0(sp)
    d974:	dec00204 	addi	sp,sp,8
    d978:	f800283a 	ret

0000d97c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
    d97c:	defffc04 	addi	sp,sp,-16
    d980:	dfc00315 	stw	ra,12(sp)
    d984:	df000215 	stw	fp,8(sp)
    d988:	df000204 	addi	fp,sp,8
    d98c:	e13ffe15 	stw	r4,-8(fp)
    d990:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    d994:	e0bffe17 	ldw	r2,-8(fp)
    d998:	10800617 	ldw	r2,24(r2)
    d99c:	10800058 	cmpnei	r2,r2,1
    d9a0:	1000091e 	bne	r2,zero,d9c8 <tcp_sent+0x4c>
    d9a4:	010000f4 	movhi	r4,3
    d9a8:	213ec504 	addi	r4,r4,-1260
    d9ac:	014000f4 	movhi	r5,3
    d9b0:	297f8304 	addi	r5,r5,-500
    d9b4:	01816004 	movi	r6,1408
    d9b8:	01c000f4 	movhi	r7,3
    d9bc:	39fed604 	addi	r7,r7,-1192
    d9c0:	0017c440 	call	17c44 <printf>
    d9c4:	003fff06 	br	d9c4 <tcp_sent+0x48>
  pcb->sent = sent;
    d9c8:	e0bffe17 	ldw	r2,-8(fp)
    d9cc:	e0ffff17 	ldw	r3,-4(fp)
    d9d0:	10c02015 	stw	r3,128(r2)
}
    d9d4:	e037883a 	mov	sp,fp
    d9d8:	dfc00117 	ldw	ra,4(sp)
    d9dc:	df000017 	ldw	fp,0(sp)
    d9e0:	dec00204 	addi	sp,sp,8
    d9e4:	f800283a 	ret

0000d9e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
    d9e8:	defffc04 	addi	sp,sp,-16
    d9ec:	dfc00315 	stw	ra,12(sp)
    d9f0:	df000215 	stw	fp,8(sp)
    d9f4:	df000204 	addi	fp,sp,8
    d9f8:	e13ffe15 	stw	r4,-8(fp)
    d9fc:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
    da00:	e0bffe17 	ldw	r2,-8(fp)
    da04:	10800617 	ldw	r2,24(r2)
    da08:	10800058 	cmpnei	r2,r2,1
    da0c:	1000091e 	bne	r2,zero,da34 <tcp_err+0x4c>
    da10:	010000f4 	movhi	r4,3
    da14:	213ec504 	addi	r4,r4,-1260
    da18:	014000f4 	movhi	r5,3
    da1c:	297f8d04 	addi	r5,r5,-460
    da20:	018163c4 	movi	r6,1423
    da24:	01c000f4 	movhi	r7,3
    da28:	39fed604 	addi	r7,r7,-1192
    da2c:	0017c440 	call	17c44 <printf>
    da30:	003fff06 	br	da30 <tcp_err+0x48>
  pcb->errf = err;
    da34:	e0bffe17 	ldw	r2,-8(fp)
    da38:	e0ffff17 	ldw	r3,-4(fp)
    da3c:	10c02415 	stw	r3,144(r2)
}
    da40:	e037883a 	mov	sp,fp
    da44:	dfc00117 	ldw	ra,4(sp)
    da48:	df000017 	ldw	fp,0(sp)
    da4c:	dec00204 	addi	sp,sp,8
    da50:	f800283a 	ret

0000da54 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
    da54:	defffd04 	addi	sp,sp,-12
    da58:	df000215 	stw	fp,8(sp)
    da5c:	df000204 	addi	fp,sp,8
    da60:	e13ffe15 	stw	r4,-8(fp)
    da64:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
    da68:	e0bffe17 	ldw	r2,-8(fp)
    da6c:	e0ffff17 	ldw	r3,-4(fp)
    da70:	10c00515 	stw	r3,20(r2)
}
    da74:	e037883a 	mov	sp,fp
    da78:	df000017 	ldw	fp,0(sp)
    da7c:	dec00104 	addi	sp,sp,4
    da80:	f800283a 	ret

0000da84 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
    da84:	defffb04 	addi	sp,sp,-20
    da88:	dfc00415 	stw	ra,16(sp)
    da8c:	df000315 	stw	fp,12(sp)
    da90:	df000304 	addi	fp,sp,12
    da94:	e13ffd15 	stw	r4,-12(fp)
    da98:	e17ffe15 	stw	r5,-8(fp)
    da9c:	3005883a 	mov	r2,r6
    daa0:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
    daa4:	e0bffd17 	ldw	r2,-12(fp)
    daa8:	10800617 	ldw	r2,24(r2)
    daac:	10800058 	cmpnei	r2,r2,1
    dab0:	1000091e 	bne	r2,zero,dad8 <tcp_poll+0x54>
    dab4:	010000f4 	movhi	r4,3
    dab8:	213ec504 	addi	r4,r4,-1260
    dabc:	014000f4 	movhi	r5,3
    dac0:	297f9704 	addi	r5,r5,-420
    dac4:	01816b84 	movi	r6,1454
    dac8:	01c000f4 	movhi	r7,3
    dacc:	39fed604 	addi	r7,r7,-1192
    dad0:	0017c440 	call	17c44 <printf>
    dad4:	003fff06 	br	dad4 <tcp_poll+0x50>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
    dad8:	e0bffd17 	ldw	r2,-12(fp)
    dadc:	e0fffe17 	ldw	r3,-8(fp)
    dae0:	10c02315 	stw	r3,140(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
    dae4:	e0bffd17 	ldw	r2,-12(fp)
    dae8:	e0ffff03 	ldbu	r3,-4(fp)
    daec:	10c00905 	stb	r3,36(r2)
}
    daf0:	e037883a 	mov	sp,fp
    daf4:	dfc00117 	ldw	ra,4(sp)
    daf8:	df000017 	ldw	fp,0(sp)
    dafc:	dec00204 	addi	sp,sp,8
    db00:	f800283a 	ret

0000db04 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
    db04:	defffd04 	addi	sp,sp,-12
    db08:	dfc00215 	stw	ra,8(sp)
    db0c:	df000115 	stw	fp,4(sp)
    db10:	df000104 	addi	fp,sp,4
    db14:	e13fff15 	stw	r4,-4(fp)
  if (pcb->state != CLOSED &&
    db18:	e0bfff17 	ldw	r2,-4(fp)
    db1c:	10800617 	ldw	r2,24(r2)
    db20:	10002a26 	beq	r2,zero,dbcc <tcp_pcb_purge+0xc8>
     pcb->state != TIME_WAIT &&
    db24:	e0bfff17 	ldw	r2,-4(fp)
    db28:	10800617 	ldw	r2,24(r2)
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
    db2c:	108002a0 	cmpeqi	r2,r2,10
    db30:	1000261e 	bne	r2,zero,dbcc <tcp_pcb_purge+0xc8>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {
    db34:	e0bfff17 	ldw	r2,-4(fp)
    db38:	10800617 	ldw	r2,24(r2)
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
    db3c:	10800060 	cmpeqi	r2,r2,1
    db40:	1000221e 	bne	r2,zero,dbcc <tcp_pcb_purge+0xc8>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
    db44:	e0bfff17 	ldw	r2,-4(fp)
    db48:	10801f17 	ldw	r2,124(r2)
    db4c:	10000626 	beq	r2,zero,db68 <tcp_pcb_purge+0x64>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
    db50:	e0bfff17 	ldw	r2,-4(fp)
    db54:	10801f17 	ldw	r2,124(r2)
    db58:	1009883a 	mov	r4,r2
    db5c:	000a4200 	call	a420 <pbuf_free>
      pcb->refused_data = NULL;
    db60:	e0bfff17 	ldw	r2,-4(fp)
    db64:	10001f15 	stw	zero,124(r2)
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
    db68:	e0bfff17 	ldw	r2,-4(fp)
    db6c:	10801e17 	ldw	r2,120(r2)
    db70:	1009883a 	mov	r4,r2
    db74:	000d3a40 	call	d3a4 <tcp_segs_free>
    pcb->ooseq = NULL;
    db78:	e0bfff17 	ldw	r2,-4(fp)
    db7c:	10001e15 	stw	zero,120(r2)
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
    db80:	e0bfff17 	ldw	r2,-4(fp)
    db84:	00ffffc4 	movi	r3,-1
    db88:	10c00e0d 	sth	r3,56(r2)

    tcp_segs_free(pcb->unsent);
    db8c:	e0bfff17 	ldw	r2,-4(fp)
    db90:	10801c17 	ldw	r2,112(r2)
    db94:	1009883a 	mov	r4,r2
    db98:	000d3a40 	call	d3a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
    db9c:	e0bfff17 	ldw	r2,-4(fp)
    dba0:	10801d17 	ldw	r2,116(r2)
    dba4:	1009883a 	mov	r4,r2
    dba8:	000d3a40 	call	d3a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
    dbac:	e0bfff17 	ldw	r2,-4(fp)
    dbb0:	10001c15 	stw	zero,112(r2)
    dbb4:	e0bfff17 	ldw	r2,-4(fp)
    dbb8:	10c01c17 	ldw	r3,112(r2)
    dbbc:	e0bfff17 	ldw	r2,-4(fp)
    dbc0:	10c01d15 	stw	r3,116(r2)
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
    dbc4:	e0bfff17 	ldw	r2,-4(fp)
    dbc8:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */
  }
}
    dbcc:	e037883a 	mov	sp,fp
    dbd0:	dfc00117 	ldw	ra,4(sp)
    dbd4:	df000017 	ldw	fp,0(sp)
    dbd8:	dec00204 	addi	sp,sp,8
    dbdc:	f800283a 	ret

0000dbe0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
    dbe0:	defffc04 	addi	sp,sp,-16
    dbe4:	dfc00315 	stw	ra,12(sp)
    dbe8:	df000215 	stw	fp,8(sp)
    dbec:	df000204 	addi	fp,sp,8
    dbf0:	e13ffe15 	stw	r4,-8(fp)
    dbf4:	e17fff15 	stw	r5,-4(fp)
  TCP_RMV(pcblist, pcb);
    dbf8:	e0bffe17 	ldw	r2,-8(fp)
    dbfc:	10c00017 	ldw	r3,0(r2)
    dc00:	e0bfff17 	ldw	r2,-4(fp)
    dc04:	1880061e 	bne	r3,r2,dc20 <tcp_pcb_remove+0x40>
    dc08:	e0bffe17 	ldw	r2,-8(fp)
    dc0c:	10800017 	ldw	r2,0(r2)
    dc10:	10c00317 	ldw	r3,12(r2)
    dc14:	e0bffe17 	ldw	r2,-8(fp)
    dc18:	10c00015 	stw	r3,0(r2)
    dc1c:	00001206 	br	dc68 <tcp_pcb_remove+0x88>
    dc20:	e0bffe17 	ldw	r2,-8(fp)
    dc24:	10800017 	ldw	r2,0(r2)
    dc28:	d0a8ba15 	stw	r2,-23832(gp)
    dc2c:	00000c06 	br	dc60 <tcp_pcb_remove+0x80>
    dc30:	d0a8ba17 	ldw	r2,-23832(gp)
    dc34:	10c00317 	ldw	r3,12(r2)
    dc38:	e0bfff17 	ldw	r2,-4(fp)
    dc3c:	1880051e 	bne	r3,r2,dc54 <tcp_pcb_remove+0x74>
    dc40:	d0a8ba17 	ldw	r2,-23832(gp)
    dc44:	e0ffff17 	ldw	r3,-4(fp)
    dc48:	18c00317 	ldw	r3,12(r3)
    dc4c:	10c00315 	stw	r3,12(r2)
    dc50:	00000506 	br	dc68 <tcp_pcb_remove+0x88>
    dc54:	d0a8ba17 	ldw	r2,-23832(gp)
    dc58:	10800317 	ldw	r2,12(r2)
    dc5c:	d0a8ba15 	stw	r2,-23832(gp)
    dc60:	d0a8ba17 	ldw	r2,-23832(gp)
    dc64:	103ff21e 	bne	r2,zero,dc30 <tcp_pcb_remove+0x50>
    dc68:	e0bfff17 	ldw	r2,-4(fp)
    dc6c:	10000315 	stw	zero,12(r2)

  tcp_pcb_purge(pcb);
    dc70:	e13fff17 	ldw	r4,-4(fp)
    dc74:	000db040 	call	db04 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
    dc78:	e0bfff17 	ldw	r2,-4(fp)
    dc7c:	10800617 	ldw	r2,24(r2)
    dc80:	108002a0 	cmpeqi	r2,r2,10
    dc84:	1000111e 	bne	r2,zero,dccc <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
    dc88:	e0bfff17 	ldw	r2,-4(fp)
    dc8c:	10800617 	ldw	r2,24(r2)
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
    dc90:	10800060 	cmpeqi	r2,r2,1
    dc94:	10000d1e 	bne	r2,zero,dccc <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
    dc98:	e0bfff17 	ldw	r2,-4(fp)
    dc9c:	10800883 	ldbu	r2,34(r2)
    dca0:	10803fcc 	andi	r2,r2,255
    dca4:	1080004c 	andi	r2,r2,1

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
    dca8:	10000826 	beq	r2,zero,dccc <tcp_pcb_remove+0xec>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
    dcac:	e0bfff17 	ldw	r2,-4(fp)
    dcb0:	10800883 	ldbu	r2,34(r2)
    dcb4:	10800094 	ori	r2,r2,2
    dcb8:	1007883a 	mov	r3,r2
    dcbc:	e0bfff17 	ldw	r2,-4(fp)
    dcc0:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
    dcc4:	e13fff17 	ldw	r4,-4(fp)
    dcc8:	00134600 	call	13460 <tcp_output>
  }

  if (pcb->state != LISTEN) {
    dccc:	e0bfff17 	ldw	r2,-4(fp)
    dcd0:	10800617 	ldw	r2,24(r2)
    dcd4:	10800060 	cmpeqi	r2,r2,1
    dcd8:	1000241e 	bne	r2,zero,dd6c <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
    dcdc:	e0bfff17 	ldw	r2,-4(fp)
    dce0:	10801c17 	ldw	r2,112(r2)
    dce4:	10000926 	beq	r2,zero,dd0c <tcp_pcb_remove+0x12c>
    dce8:	010000f4 	movhi	r4,3
    dcec:	213ec504 	addi	r4,r4,-1260
    dcf0:	014000f4 	movhi	r5,3
    dcf4:	297f9f04 	addi	r5,r5,-388
    dcf8:	01818444 	movi	r6,1553
    dcfc:	01c000f4 	movhi	r7,3
    dd00:	39fed604 	addi	r7,r7,-1192
    dd04:	0017c440 	call	17c44 <printf>
    dd08:	003fff06 	br	dd08 <tcp_pcb_remove+0x128>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
    dd0c:	e0bfff17 	ldw	r2,-4(fp)
    dd10:	10801d17 	ldw	r2,116(r2)
    dd14:	10000926 	beq	r2,zero,dd3c <tcp_pcb_remove+0x15c>
    dd18:	010000f4 	movhi	r4,3
    dd1c:	213ec504 	addi	r4,r4,-1260
    dd20:	014000f4 	movhi	r5,3
    dd24:	297fa504 	addi	r5,r5,-364
    dd28:	01818484 	movi	r6,1554
    dd2c:	01c000f4 	movhi	r7,3
    dd30:	39fed604 	addi	r7,r7,-1192
    dd34:	0017c440 	call	17c44 <printf>
    dd38:	003fff06 	br	dd38 <tcp_pcb_remove+0x158>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
    dd3c:	e0bfff17 	ldw	r2,-4(fp)
    dd40:	10801e17 	ldw	r2,120(r2)
    dd44:	10000926 	beq	r2,zero,dd6c <tcp_pcb_remove+0x18c>
    dd48:	010000f4 	movhi	r4,3
    dd4c:	213ec504 	addi	r4,r4,-1260
    dd50:	014000f4 	movhi	r5,3
    dd54:	297fac04 	addi	r5,r5,-336
    dd58:	01818504 	movi	r6,1556
    dd5c:	01c000f4 	movhi	r7,3
    dd60:	39fed604 	addi	r7,r7,-1192
    dd64:	0017c440 	call	17c44 <printf>
    dd68:	003fff06 	br	dd68 <tcp_pcb_remove+0x188>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
    dd6c:	e0bfff17 	ldw	r2,-4(fp)
    dd70:	10000615 	stw	zero,24(r2)

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
    dd74:	e037883a 	mov	sp,fp
    dd78:	dfc00117 	ldw	ra,4(sp)
    dd7c:	df000017 	ldw	fp,0(sp)
    dd80:	dec00204 	addi	sp,sp,8
    dd84:	f800283a 	ret

0000dd88 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
    dd88:	deffff04 	addi	sp,sp,-4
    dd8c:	df000015 	stw	fp,0(sp)
    dd90:	d839883a 	mov	fp,sp
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
    dd94:	d0e00617 	ldw	r3,-32744(gp)
    dd98:	d0a8b817 	ldw	r2,-23840(gp)
    dd9c:	1885883a 	add	r2,r3,r2
    dda0:	d0a00615 	stw	r2,-32744(gp)
  return iss;
    dda4:	d0a00617 	ldw	r2,-32744(gp)
}
    dda8:	e037883a 	mov	sp,fp
    ddac:	df000017 	ldw	fp,0(sp)
    ddb0:	dec00104 	addi	sp,sp,4
    ddb4:	f800283a 	ret

0000ddb8 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
    ddb8:	defffa04 	addi	sp,sp,-24
    ddbc:	dfc00515 	stw	ra,20(sp)
    ddc0:	df000415 	stw	fp,16(sp)
    ddc4:	df000404 	addi	fp,sp,16
    ddc8:	2005883a 	mov	r2,r4
    ddcc:	e17fff15 	stw	r5,-4(fp)
    ddd0:	e0bffe0d 	sth	r2,-8(fp)
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
    ddd4:	e13fff17 	ldw	r4,-4(fp)
    ddd8:	0005c4c0 	call	5c4c <ip_route>
    dddc:	e0bffc15 	stw	r2,-16(fp)
  if ((outif != NULL) && (outif->mtu != 0)) {
    dde0:	e0bffc17 	ldw	r2,-16(fp)
    dde4:	10000f26 	beq	r2,zero,de24 <tcp_eff_send_mss+0x6c>
    dde8:	e0bffc17 	ldw	r2,-16(fp)
    ddec:	1080090b 	ldhu	r2,36(r2)
    ddf0:	10bfffcc 	andi	r2,r2,65535
    ddf4:	10000b26 	beq	r2,zero,de24 <tcp_eff_send_mss+0x6c>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    ddf8:	e0bffc17 	ldw	r2,-16(fp)
    ddfc:	1080090b 	ldhu	r2,36(r2)
    de00:	10bff604 	addi	r2,r2,-40
    de04:	e0bffd0d 	sth	r2,-12(fp)
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
    de08:	e0fffe0b 	ldhu	r3,-8(fp)
    de0c:	e0bffd0b 	ldhu	r2,-12(fp)
    de10:	113fffcc 	andi	r4,r2,65535
    de14:	197fffcc 	andi	r5,r3,65535
    de18:	2900012e 	bgeu	r5,r4,de20 <tcp_eff_send_mss+0x68>
    de1c:	1805883a 	mov	r2,r3
    de20:	e0bffe0d 	sth	r2,-8(fp)
  }
  return sendmss;
    de24:	e0bffe0b 	ldhu	r2,-8(fp)
}
    de28:	e037883a 	mov	sp,fp
    de2c:	dfc00117 	ldw	ra,4(sp)
    de30:	df000017 	ldw	fp,0(sp)
    de34:	dec00204 	addi	sp,sp,8
    de38:	f800283a 	ret

0000de3c <tcp_debug_state_str>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

const char*
tcp_debug_state_str(enum tcp_state s)
{
    de3c:	defffe04 	addi	sp,sp,-8
    de40:	df000115 	stw	fp,4(sp)
    de44:	df000104 	addi	fp,sp,4
    de48:	e13fff15 	stw	r4,-4(fp)
  return tcp_state_str[s];
    de4c:	00c000f4 	movhi	r3,3
    de50:	18feb204 	addi	r3,r3,-1336
    de54:	e0bfff17 	ldw	r2,-4(fp)
    de58:	1085883a 	add	r2,r2,r2
    de5c:	1085883a 	add	r2,r2,r2
    de60:	1885883a 	add	r2,r3,r2
    de64:	10800017 	ldw	r2,0(r2)
}
    de68:	e037883a 	mov	sp,fp
    de6c:	df000017 	ldw	fp,0(sp)
    de70:	dec00104 	addi	sp,sp,4
    de74:	f800283a 	ret

0000de78 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
    de78:	defff604 	addi	sp,sp,-40
    de7c:	dfc00915 	stw	ra,36(sp)
    de80:	df000815 	stw	fp,32(sp)
    de84:	df000804 	addi	fp,sp,32
    de88:	e13ffe15 	stw	r4,-8(fp)
    de8c:	e17fff15 	stw	r5,-4(fp)
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
    de90:	00800134 	movhi	r2,4
    de94:	10932304 	addi	r2,r2,19596
    de98:	1080248b 	ldhu	r2,146(r2)
    de9c:	10800044 	addi	r2,r2,1
    dea0:	1007883a 	mov	r3,r2
    dea4:	00800134 	movhi	r2,4
    dea8:	10932304 	addi	r2,r2,19596
    deac:	10c0248d 	sth	r3,146(r2)
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
    deb0:	e0bffe17 	ldw	r2,-8(fp)
    deb4:	10800117 	ldw	r2,4(r2)
    deb8:	d0a8be15 	stw	r2,-23816(gp)
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
    debc:	e0bffe17 	ldw	r2,-8(fp)
    dec0:	10c00117 	ldw	r3,4(r2)
    dec4:	d0a8be17 	ldw	r2,-23816(gp)
    dec8:	10800003 	ldbu	r2,0(r2)
    decc:	10803fcc 	andi	r2,r2,255
    ded0:	108003cc 	andi	r2,r2,15
    ded4:	1085883a 	add	r2,r2,r2
    ded8:	1085883a 	add	r2,r2,r2
    dedc:	1885883a 	add	r2,r3,r2
    dee0:	d0a8bd15 	stw	r2,-23820(gp)
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
    dee4:	d0a8be17 	ldw	r2,-23816(gp)
    dee8:	10800003 	ldbu	r2,0(r2)
    deec:	10803fcc 	andi	r2,r2,255
    def0:	108003cc 	andi	r2,r2,15
    def4:	1085883a 	add	r2,r2,r2
    def8:	1085883a 	add	r2,r2,r2
    defc:	0085c83a 	sub	r2,zero,r2
    df00:	10bfffcc 	andi	r2,r2,65535
    df04:	10a0001c 	xori	r2,r2,32768
    df08:	10a00004 	addi	r2,r2,-32768
    df0c:	e13ffe17 	ldw	r4,-8(fp)
    df10:	100b883a 	mov	r5,r2
    df14:	000a2280 	call	a228 <pbuf_header>
    df18:	10803fcc 	andi	r2,r2,255
    df1c:	1000051e 	bne	r2,zero,df34 <tcp_input+0xbc>
    df20:	e0bffe17 	ldw	r2,-8(fp)
    df24:	1080020b 	ldhu	r2,8(r2)
    df28:	10bfffcc 	andi	r2,r2,65535
    df2c:	10800528 	cmpgeui	r2,r2,20
    df30:	1000091e 	bne	r2,zero,df58 <tcp_input+0xe0>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
    df34:	00800134 	movhi	r2,4
    df38:	10932304 	addi	r2,r2,19596
    df3c:	1080268b 	ldhu	r2,154(r2)
    df40:	10800044 	addi	r2,r2,1
    df44:	1007883a 	mov	r3,r2
    df48:	00800134 	movhi	r2,4
    df4c:	10932304 	addi	r2,r2,19596
    df50:	10c0268d 	sth	r3,154(r2)
    goto dropped;
    df54:	0002fd06 	br	eb4c <tcp_input+0xcd4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
    df58:	008000f4 	movhi	r2,3
    df5c:	109bd204 	addi	r2,r2,28488
    df60:	10800017 	ldw	r2,0(r2)
    df64:	1009883a 	mov	r4,r2
    df68:	e17fff17 	ldw	r5,-4(fp)
    df6c:	00067940 	call	6794 <ip4_addr_isbroadcast>
    df70:	10803fcc 	andi	r2,r2,255
    df74:	1000061e 	bne	r2,zero,df90 <tcp_input+0x118>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    df78:	008000f4 	movhi	r2,3
    df7c:	109bd204 	addi	r2,r2,28488
    df80:	10800017 	ldw	r2,0(r2)
    df84:	10803c0c 	andi	r2,r2,240
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
    df88:	10803818 	cmpnei	r2,r2,224
    df8c:	1000091e 	bne	r2,zero,dfb4 <tcp_input+0x13c>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    TCP_STATS_INC(tcp.proterr);
    df90:	00800134 	movhi	r2,4
    df94:	10932304 	addi	r2,r2,19596
    df98:	1080280b 	ldhu	r2,160(r2)
    df9c:	10800044 	addi	r2,r2,1
    dfa0:	1007883a 	mov	r3,r2
    dfa4:	00800134 	movhi	r2,4
    dfa8:	10932304 	addi	r2,r2,19596
    dfac:	10c0280d 	sth	r3,160(r2)
    goto dropped;
    dfb0:	0002e606 	br	eb4c <tcp_input+0xcd4>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len) != 0) {
    dfb4:	e0bffe17 	ldw	r2,-8(fp)
    dfb8:	1080020b 	ldhu	r2,8(r2)
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
    dfbc:	10bfffcc 	andi	r2,r2,65535
    dfc0:	d8800015 	stw	r2,0(sp)
    dfc4:	e13ffe17 	ldw	r4,-8(fp)
    dfc8:	014000f4 	movhi	r5,3
    dfcc:	295bd004 	addi	r5,r5,28480
    dfd0:	018000f4 	movhi	r6,3
    dfd4:	319bd204 	addi	r6,r6,28488
    dfd8:	01c00184 	movi	r7,6
    dfdc:	00056a40 	call	56a4 <inet_chksum_pseudo>
    dfe0:	10bfffcc 	andi	r2,r2,65535
    dfe4:	10000926 	beq	r2,zero,e00c <tcp_input+0x194>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
    dfe8:	00800134 	movhi	r2,4
    dfec:	10932304 	addi	r2,r2,19596
    dff0:	1080260b 	ldhu	r2,152(r2)
    dff4:	10800044 	addi	r2,r2,1
    dff8:	1007883a 	mov	r3,r2
    dffc:	00800134 	movhi	r2,4
    e000:	10932304 	addi	r2,r2,19596
    e004:	10c0260d 	sth	r3,152(r2)
    goto dropped;
    e008:	0002d006 	br	eb4c <tcp_input+0xcd4>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
    e00c:	d0a8bd17 	ldw	r2,-23820(gp)
    e010:	1080030b 	ldhu	r2,12(r2)
    e014:	10bfffcc 	andi	r2,r2,65535
    e018:	1004d23a 	srli	r2,r2,8
    e01c:	10ffffcc 	andi	r3,r2,65535
    e020:	d0a8bd17 	ldw	r2,-23820(gp)
    e024:	1080030b 	ldhu	r2,12(r2)
    e028:	10bfffcc 	andi	r2,r2,65535
    e02c:	1004923a 	slli	r2,r2,8
    e030:	10bfffcc 	andi	r2,r2,65535
    e034:	1884b03a 	or	r2,r3,r2
    e038:	1005d33a 	srai	r2,r2,12
    e03c:	e0bffd45 	stb	r2,-11(fp)
  if(pbuf_header(p, -(hdrlen * 4))){
    e040:	e0bffd43 	ldbu	r2,-11(fp)
    e044:	10bfff24 	muli	r2,r2,-4
    e048:	10bfffcc 	andi	r2,r2,65535
    e04c:	10a0001c 	xori	r2,r2,32768
    e050:	10a00004 	addi	r2,r2,-32768
    e054:	e13ffe17 	ldw	r4,-8(fp)
    e058:	100b883a 	mov	r5,r2
    e05c:	000a2280 	call	a228 <pbuf_header>
    e060:	10803fcc 	andi	r2,r2,255
    e064:	10000926 	beq	r2,zero,e08c <tcp_input+0x214>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
    e068:	00800134 	movhi	r2,4
    e06c:	10932304 	addi	r2,r2,19596
    e070:	1080268b 	ldhu	r2,154(r2)
    e074:	10800044 	addi	r2,r2,1
    e078:	1007883a 	mov	r3,r2
    e07c:	00800134 	movhi	r2,4
    e080:	10932304 	addi	r2,r2,19596
    e084:	10c0268d 	sth	r3,154(r2)
    goto dropped;
    e088:	0002b006 	br	eb4c <tcp_input+0xcd4>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
    e08c:	d0a8bd17 	ldw	r2,-23820(gp)
    e090:	d0e8bd17 	ldw	r3,-23820(gp)
    e094:	18c0000b 	ldhu	r3,0(r3)
    e098:	18ffffcc 	andi	r3,r3,65535
    e09c:	1806d23a 	srli	r3,r3,8
    e0a0:	1809883a 	mov	r4,r3
    e0a4:	d0e8bd17 	ldw	r3,-23820(gp)
    e0a8:	18c0000b 	ldhu	r3,0(r3)
    e0ac:	18ffffcc 	andi	r3,r3,65535
    e0b0:	1806923a 	slli	r3,r3,8
    e0b4:	20c6b03a 	or	r3,r4,r3
    e0b8:	10c0000d 	sth	r3,0(r2)
  tcphdr->dest = ntohs(tcphdr->dest);
    e0bc:	d0a8bd17 	ldw	r2,-23820(gp)
    e0c0:	d0e8bd17 	ldw	r3,-23820(gp)
    e0c4:	18c0008b 	ldhu	r3,2(r3)
    e0c8:	18ffffcc 	andi	r3,r3,65535
    e0cc:	1806d23a 	srli	r3,r3,8
    e0d0:	1809883a 	mov	r4,r3
    e0d4:	d0e8bd17 	ldw	r3,-23820(gp)
    e0d8:	18c0008b 	ldhu	r3,2(r3)
    e0dc:	18ffffcc 	andi	r3,r3,65535
    e0e0:	1806923a 	slli	r3,r3,8
    e0e4:	20c6b03a 	or	r3,r4,r3
    e0e8:	10c0008d 	sth	r3,2(r2)
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
    e0ec:	d0a8bd17 	ldw	r2,-23820(gp)
    e0f0:	d0e8bd17 	ldw	r3,-23820(gp)
    e0f4:	1900010b 	ldhu	r4,4(r3)
    e0f8:	18c0018b 	ldhu	r3,6(r3)
    e0fc:	1806943a 	slli	r3,r3,16
    e100:	1906b03a 	or	r3,r3,r4
    e104:	1808d63a 	srli	r4,r3,24
    e108:	d0e8bd17 	ldw	r3,-23820(gp)
    e10c:	1940010b 	ldhu	r5,4(r3)
    e110:	18c0018b 	ldhu	r3,6(r3)
    e114:	1806943a 	slli	r3,r3,16
    e118:	1946b03a 	or	r3,r3,r5
    e11c:	1806d23a 	srli	r3,r3,8
    e120:	18ffc00c 	andi	r3,r3,65280
    e124:	20c8b03a 	or	r4,r4,r3
    e128:	d0e8bd17 	ldw	r3,-23820(gp)
    e12c:	1940010b 	ldhu	r5,4(r3)
    e130:	18c0018b 	ldhu	r3,6(r3)
    e134:	1806943a 	slli	r3,r3,16
    e138:	1946b03a 	or	r3,r3,r5
    e13c:	18ffc00c 	andi	r3,r3,65280
    e140:	1806923a 	slli	r3,r3,8
    e144:	20c8b03a 	or	r4,r4,r3
    e148:	d0e8bd17 	ldw	r3,-23820(gp)
    e14c:	1940010b 	ldhu	r5,4(r3)
    e150:	18c0018b 	ldhu	r3,6(r3)
    e154:	1806943a 	slli	r3,r3,16
    e158:	1946b03a 	or	r3,r3,r5
    e15c:	1806963a 	slli	r3,r3,24
    e160:	20c6b03a 	or	r3,r4,r3
    e164:	193fffcc 	andi	r4,r3,65535
    e168:	1140010b 	ldhu	r5,4(r2)
    e16c:	280a703a 	and	r5,r5,zero
    e170:	2908b03a 	or	r4,r5,r4
    e174:	1100010d 	sth	r4,4(r2)
    e178:	1806d43a 	srli	r3,r3,16
    e17c:	1100018b 	ldhu	r4,6(r2)
    e180:	2008703a 	and	r4,r4,zero
    e184:	20c6b03a 	or	r3,r4,r3
    e188:	10c0018d 	sth	r3,6(r2)
    e18c:	10c0010b 	ldhu	r3,4(r2)
    e190:	1080018b 	ldhu	r2,6(r2)
    e194:	1004943a 	slli	r2,r2,16
    e198:	10c4b03a 	or	r2,r2,r3
    e19c:	d0a8bf15 	stw	r2,-23812(gp)
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
    e1a0:	d0a8bd17 	ldw	r2,-23820(gp)
    e1a4:	d0e8bd17 	ldw	r3,-23820(gp)
    e1a8:	1900020b 	ldhu	r4,8(r3)
    e1ac:	18c0028b 	ldhu	r3,10(r3)
    e1b0:	1806943a 	slli	r3,r3,16
    e1b4:	1906b03a 	or	r3,r3,r4
    e1b8:	1808d63a 	srli	r4,r3,24
    e1bc:	d0e8bd17 	ldw	r3,-23820(gp)
    e1c0:	1940020b 	ldhu	r5,8(r3)
    e1c4:	18c0028b 	ldhu	r3,10(r3)
    e1c8:	1806943a 	slli	r3,r3,16
    e1cc:	1946b03a 	or	r3,r3,r5
    e1d0:	1806d23a 	srli	r3,r3,8
    e1d4:	18ffc00c 	andi	r3,r3,65280
    e1d8:	20c8b03a 	or	r4,r4,r3
    e1dc:	d0e8bd17 	ldw	r3,-23820(gp)
    e1e0:	1940020b 	ldhu	r5,8(r3)
    e1e4:	18c0028b 	ldhu	r3,10(r3)
    e1e8:	1806943a 	slli	r3,r3,16
    e1ec:	1946b03a 	or	r3,r3,r5
    e1f0:	18ffc00c 	andi	r3,r3,65280
    e1f4:	1806923a 	slli	r3,r3,8
    e1f8:	20c8b03a 	or	r4,r4,r3
    e1fc:	d0e8bd17 	ldw	r3,-23820(gp)
    e200:	1940020b 	ldhu	r5,8(r3)
    e204:	18c0028b 	ldhu	r3,10(r3)
    e208:	1806943a 	slli	r3,r3,16
    e20c:	1946b03a 	or	r3,r3,r5
    e210:	1806963a 	slli	r3,r3,24
    e214:	20c6b03a 	or	r3,r4,r3
    e218:	193fffcc 	andi	r4,r3,65535
    e21c:	1140020b 	ldhu	r5,8(r2)
    e220:	280a703a 	and	r5,r5,zero
    e224:	2908b03a 	or	r4,r5,r4
    e228:	1100020d 	sth	r4,8(r2)
    e22c:	1806d43a 	srli	r3,r3,16
    e230:	1100028b 	ldhu	r4,10(r2)
    e234:	2008703a 	and	r4,r4,zero
    e238:	20c6b03a 	or	r3,r4,r3
    e23c:	10c0028d 	sth	r3,10(r2)
    e240:	10c0020b 	ldhu	r3,8(r2)
    e244:	1080028b 	ldhu	r2,10(r2)
    e248:	1004943a 	slli	r2,r2,16
    e24c:	10c4b03a 	or	r2,r2,r3
    e250:	d0a8c015 	stw	r2,-23808(gp)
  tcphdr->wnd = ntohs(tcphdr->wnd);
    e254:	d0a8bd17 	ldw	r2,-23820(gp)
    e258:	d0e8bd17 	ldw	r3,-23820(gp)
    e25c:	18c0038b 	ldhu	r3,14(r3)
    e260:	18ffffcc 	andi	r3,r3,65535
    e264:	1806d23a 	srli	r3,r3,8
    e268:	1809883a 	mov	r4,r3
    e26c:	d0e8bd17 	ldw	r3,-23820(gp)
    e270:	18c0038b 	ldhu	r3,14(r3)
    e274:	18ffffcc 	andi	r3,r3,65535
    e278:	1806923a 	slli	r3,r3,8
    e27c:	20c6b03a 	or	r3,r4,r3
    e280:	10c0038d 	sth	r3,14(r2)

  flags = TCPH_FLAGS(tcphdr);
    e284:	d0a8bd17 	ldw	r2,-23820(gp)
    e288:	1080030b 	ldhu	r2,12(r2)
    e28c:	10bfffcc 	andi	r2,r2,65535
    e290:	1004d23a 	srli	r2,r2,8
    e294:	1007883a 	mov	r3,r2
    e298:	d0a8bd17 	ldw	r2,-23820(gp)
    e29c:	1080030b 	ldhu	r2,12(r2)
    e2a0:	10bfffcc 	andi	r2,r2,65535
    e2a4:	1004923a 	slli	r2,r2,8
    e2a8:	1884b03a 	or	r2,r3,r2
    e2ac:	10800fcc 	andi	r2,r2,63
    e2b0:	d0a8c105 	stb	r2,-23804(gp)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
    e2b4:	e0bffe17 	ldw	r2,-8(fp)
    e2b8:	10c0020b 	ldhu	r3,8(r2)
    e2bc:	d0a8c103 	ldbu	r2,-23804(gp)
    e2c0:	10803fcc 	andi	r2,r2,255
    e2c4:	108000cc 	andi	r2,r2,3
    e2c8:	1004c03a 	cmpne	r2,r2,zero
    e2cc:	10803fcc 	andi	r2,r2,255
    e2d0:	1885883a 	add	r2,r3,r2
    e2d4:	d0a8c18d 	sth	r2,-23802(gp)

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
    e2d8:	e03ffb15 	stw	zero,-20(fp)

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    e2dc:	008000f4 	movhi	r2,3
    e2e0:	109bdf04 	addi	r2,r2,28540
    e2e4:	10800017 	ldw	r2,0(r2)
    e2e8:	e0bffa15 	stw	r2,-24(fp)
    e2ec:	00006e06 	br	e4a8 <tcp_input+0x630>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    e2f0:	e0bffa17 	ldw	r2,-24(fp)
    e2f4:	10800617 	ldw	r2,24(r2)
    e2f8:	1000091e 	bne	r2,zero,e320 <tcp_input+0x4a8>
    e2fc:	010000f4 	movhi	r4,3
    e300:	213fb204 	addi	r4,r4,-312
    e304:	014000f4 	movhi	r5,3
    e308:	297fbc04 	addi	r5,r5,-272
    e30c:	01802ac4 	movi	r6,171
    e310:	01c000f4 	movhi	r7,3
    e314:	39ffc604 	addi	r7,r7,-232
    e318:	0017c440 	call	17c44 <printf>
    e31c:	003fff06 	br	e31c <tcp_input+0x4a4>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    e320:	e0bffa17 	ldw	r2,-24(fp)
    e324:	10800617 	ldw	r2,24(r2)
    e328:	10800298 	cmpnei	r2,r2,10
    e32c:	1000091e 	bne	r2,zero,e354 <tcp_input+0x4dc>
    e330:	010000f4 	movhi	r4,3
    e334:	213fb204 	addi	r4,r4,-312
    e338:	014000f4 	movhi	r5,3
    e33c:	297fcc04 	addi	r5,r5,-208
    e340:	01802b04 	movi	r6,172
    e344:	01c000f4 	movhi	r7,3
    e348:	39ffc604 	addi	r7,r7,-232
    e34c:	0017c440 	call	17c44 <printf>
    e350:	003fff06 	br	e350 <tcp_input+0x4d8>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    e354:	e0bffa17 	ldw	r2,-24(fp)
    e358:	10800617 	ldw	r2,24(r2)
    e35c:	10800058 	cmpnei	r2,r2,1
    e360:	1000091e 	bne	r2,zero,e388 <tcp_input+0x510>
    e364:	010000f4 	movhi	r4,3
    e368:	213fb204 	addi	r4,r4,-312
    e36c:	014000f4 	movhi	r5,3
    e370:	297fd704 	addi	r5,r5,-164
    e374:	01802b44 	movi	r6,173
    e378:	01c000f4 	movhi	r7,3
    e37c:	39ffc604 	addi	r7,r7,-232
    e380:	0017c440 	call	17c44 <printf>
    e384:	003fff06 	br	e384 <tcp_input+0x50c>
    if (pcb->remote_port == tcphdr->src &&
    e388:	e0bffa17 	ldw	r2,-24(fp)
    e38c:	10c0080b 	ldhu	r3,32(r2)
    e390:	d0a8bd17 	ldw	r2,-23820(gp)
    e394:	1080000b 	ldhu	r2,0(r2)
    e398:	18ffffcc 	andi	r3,r3,65535
    e39c:	10bfffcc 	andi	r2,r2,65535
    e3a0:	18803c1e 	bne	r3,r2,e494 <tcp_input+0x61c>
       pcb->local_port == tcphdr->dest &&
    e3a4:	e0bffa17 	ldw	r2,-24(fp)
    e3a8:	10c0078b 	ldhu	r3,30(r2)
    e3ac:	d0a8bd17 	ldw	r2,-23820(gp)
    e3b0:	1080008b 	ldhu	r2,2(r2)
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
    e3b4:	18ffffcc 	andi	r3,r3,65535
    e3b8:	10bfffcc 	andi	r2,r2,65535
    e3bc:	1880351e 	bne	r3,r2,e494 <tcp_input+0x61c>
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    e3c0:	e0bffa17 	ldw	r2,-24(fp)
    e3c4:	10c00117 	ldw	r3,4(r2)
    e3c8:	008000f4 	movhi	r2,3
    e3cc:	109bd004 	addi	r2,r2,28480
    e3d0:	10800017 	ldw	r2,0(r2)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
    e3d4:	18802f1e 	bne	r3,r2,e494 <tcp_input+0x61c>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    e3d8:	e0bffa17 	ldw	r2,-24(fp)
    e3dc:	10c00017 	ldw	r3,0(r2)
    e3e0:	008000f4 	movhi	r2,3
    e3e4:	109bd204 	addi	r2,r2,28488
    e3e8:	10800017 	ldw	r2,0(r2)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    e3ec:	1880291e 	bne	r3,r2,e494 <tcp_input+0x61c>
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
    e3f0:	e0bffa17 	ldw	r2,-24(fp)
    e3f4:	10c00317 	ldw	r3,12(r2)
    e3f8:	e0bffa17 	ldw	r2,-24(fp)
    e3fc:	1880091e 	bne	r3,r2,e424 <tcp_input+0x5ac>
    e400:	010000f4 	movhi	r4,3
    e404:	213fb204 	addi	r4,r4,-312
    e408:	014000f4 	movhi	r5,3
    e40c:	297fe104 	addi	r5,r5,-124
    e410:	01802d84 	movi	r6,182
    e414:	01c000f4 	movhi	r7,3
    e418:	39ffc604 	addi	r7,r7,-232
    e41c:	0017c440 	call	17c44 <printf>
    e420:	003fff06 	br	e420 <tcp_input+0x5a8>
      if (prev != NULL) {
    e424:	e0bffb17 	ldw	r2,-20(fp)
    e428:	10000d26 	beq	r2,zero,e460 <tcp_input+0x5e8>
        prev->next = pcb->next;
    e42c:	e0bffa17 	ldw	r2,-24(fp)
    e430:	10c00317 	ldw	r3,12(r2)
    e434:	e0bffb17 	ldw	r2,-20(fp)
    e438:	10c00315 	stw	r3,12(r2)
        pcb->next = tcp_active_pcbs;
    e43c:	008000f4 	movhi	r2,3
    e440:	109bdf04 	addi	r2,r2,28540
    e444:	10c00017 	ldw	r3,0(r2)
    e448:	e0bffa17 	ldw	r2,-24(fp)
    e44c:	10c00315 	stw	r3,12(r2)
        tcp_active_pcbs = pcb;
    e450:	008000f4 	movhi	r2,3
    e454:	109bdf04 	addi	r2,r2,28540
    e458:	e0fffa17 	ldw	r3,-24(fp)
    e45c:	10c00015 	stw	r3,0(r2)
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
    e460:	e0bffa17 	ldw	r2,-24(fp)
    e464:	10c00317 	ldw	r3,12(r2)
    e468:	e0bffa17 	ldw	r2,-24(fp)
    e46c:	1880111e 	bne	r3,r2,e4b4 <tcp_input+0x63c>
    e470:	010000f4 	movhi	r4,3
    e474:	213fb204 	addi	r4,r4,-312
    e478:	014000f4 	movhi	r5,3
    e47c:	297fec04 	addi	r5,r5,-80
    e480:	01802f04 	movi	r6,188
    e484:	01c000f4 	movhi	r7,3
    e488:	39ffc604 	addi	r7,r7,-232
    e48c:	0017c440 	call	17c44 <printf>
    e490:	003fff06 	br	e490 <tcp_input+0x618>
      break;
    }
    prev = pcb;
    e494:	e0bffa17 	ldw	r2,-24(fp)
    e498:	e0bffb15 	stw	r2,-20(fp)
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    e49c:	e0bffa17 	ldw	r2,-24(fp)
    e4a0:	10800317 	ldw	r2,12(r2)
    e4a4:	e0bffa15 	stw	r2,-24(fp)
    e4a8:	e0bffa17 	ldw	r2,-24(fp)
    e4ac:	103f901e 	bne	r2,zero,e2f0 <tcp_input+0x478>
    e4b0:	00000106 	br	e4b8 <tcp_input+0x640>
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
    e4b4:	0001883a 	nop
    }
    prev = pcb;
  }

  if (pcb == NULL) {
    e4b8:	e0bffa17 	ldw	r2,-24(fp)
    e4bc:	10006b1e 	bne	r2,zero,e66c <tcp_input+0x7f4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    e4c0:	008000f4 	movhi	r2,3
    e4c4:	109be404 	addi	r2,r2,28560
    e4c8:	10800017 	ldw	r2,0(r2)
    e4cc:	e0bffa15 	stw	r2,-24(fp)
    e4d0:	00002f06 	br	e590 <tcp_input+0x718>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    e4d4:	e0bffa17 	ldw	r2,-24(fp)
    e4d8:	10800617 	ldw	r2,24(r2)
    e4dc:	108002a0 	cmpeqi	r2,r2,10
    e4e0:	1000091e 	bne	r2,zero,e508 <tcp_input+0x690>
    e4e4:	010000f4 	movhi	r4,3
    e4e8:	213fb204 	addi	r4,r4,-312
    e4ec:	014000f4 	movhi	r5,3
    e4f0:	297ff704 	addi	r5,r5,-36
    e4f4:	01803184 	movi	r6,198
    e4f8:	01c000f4 	movhi	r7,3
    e4fc:	39ffc604 	addi	r7,r7,-232
    e500:	0017c440 	call	17c44 <printf>
    e504:	003fff06 	br	e504 <tcp_input+0x68c>
      if (pcb->remote_port == tcphdr->src &&
    e508:	e0bffa17 	ldw	r2,-24(fp)
    e50c:	10c0080b 	ldhu	r3,32(r2)
    e510:	d0a8bd17 	ldw	r2,-23820(gp)
    e514:	1080000b 	ldhu	r2,0(r2)
    e518:	18ffffcc 	andi	r3,r3,65535
    e51c:	10bfffcc 	andi	r2,r2,65535
    e520:	1880181e 	bne	r3,r2,e584 <tcp_input+0x70c>
         pcb->local_port == tcphdr->dest &&
    e524:	e0bffa17 	ldw	r2,-24(fp)
    e528:	10c0078b 	ldhu	r3,30(r2)
    e52c:	d0a8bd17 	ldw	r2,-23820(gp)
    e530:	1080008b 	ldhu	r2,2(r2)
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
    e534:	18ffffcc 	andi	r3,r3,65535
    e538:	10bfffcc 	andi	r2,r2,65535
    e53c:	1880111e 	bne	r3,r2,e584 <tcp_input+0x70c>
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    e540:	e0bffa17 	ldw	r2,-24(fp)
    e544:	10c00117 	ldw	r3,4(r2)
    e548:	008000f4 	movhi	r2,3
    e54c:	109bd004 	addi	r2,r2,28480
    e550:	10800017 	ldw	r2,0(r2)
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
    e554:	18800b1e 	bne	r3,r2,e584 <tcp_input+0x70c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    e558:	e0bffa17 	ldw	r2,-24(fp)
    e55c:	10c00017 	ldw	r3,0(r2)
    e560:	008000f4 	movhi	r2,3
    e564:	109bd204 	addi	r2,r2,28488
    e568:	10800017 	ldw	r2,0(r2)
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
    e56c:	1880051e 	bne	r3,r2,e584 <tcp_input+0x70c>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
    e570:	e13ffa17 	ldw	r4,-24(fp)
    e574:	000ee200 	call	ee20 <tcp_timewait_input>
        pbuf_free(p);
    e578:	e13ffe17 	ldw	r4,-8(fp)
    e57c:	000a4200 	call	a420 <pbuf_free>
        return;
    e580:	00017e06 	br	eb7c <tcp_input+0xd04>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    e584:	e0bffa17 	ldw	r2,-24(fp)
    e588:	10800317 	ldw	r2,12(r2)
    e58c:	e0bffa15 	stw	r2,-24(fp)
    e590:	e0bffa17 	ldw	r2,-24(fp)
    e594:	103fcf1e 	bne	r2,zero,e4d4 <tcp_input+0x65c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    e598:	e03ffb15 	stw	zero,-20(fp)
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    e59c:	008000f4 	movhi	r2,3
    e5a0:	109be104 	addi	r2,r2,28548
    e5a4:	10800017 	ldw	r2,0(r2)
    e5a8:	e0bffc15 	stw	r2,-16(fp)
    e5ac:	00001706 	br	e60c <tcp_input+0x794>
      if (lpcb->local_port == tcphdr->dest) {
    e5b0:	e0bffc17 	ldw	r2,-16(fp)
    e5b4:	10c0078b 	ldhu	r3,30(r2)
    e5b8:	d0a8bd17 	ldw	r2,-23820(gp)
    e5bc:	1080008b 	ldhu	r2,2(r2)
    e5c0:	18ffffcc 	andi	r3,r3,65535
    e5c4:	10bfffcc 	andi	r2,r2,65535
    e5c8:	18800b1e 	bne	r3,r2,e5f8 <tcp_input+0x780>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
    e5cc:	e0bffc17 	ldw	r2,-16(fp)
    e5d0:	10c00017 	ldw	r3,0(r2)
    e5d4:	008000f4 	movhi	r2,3
    e5d8:	109bd204 	addi	r2,r2,28488
    e5dc:	10800017 	ldw	r2,0(r2)
    e5e0:	18800c26 	beq	r3,r2,e614 <tcp_input+0x79c>
            ip_addr_isany(&(lpcb->local_ip))) {
    e5e4:	e0bffc17 	ldw	r2,-16(fp)
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
    e5e8:	10000a26 	beq	r2,zero,e614 <tcp_input+0x79c>
            ip_addr_isany(&(lpcb->local_ip))) {
    e5ec:	e0bffc17 	ldw	r2,-16(fp)
    e5f0:	10800017 	ldw	r2,0(r2)
    e5f4:	10000726 	beq	r2,zero,e614 <tcp_input+0x79c>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
    e5f8:	e0bffc17 	ldw	r2,-16(fp)
    e5fc:	e0bffb15 	stw	r2,-20(fp)
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    e600:	e0bffc17 	ldw	r2,-16(fp)
    e604:	10800317 	ldw	r2,12(r2)
    e608:	e0bffc15 	stw	r2,-16(fp)
    e60c:	e0bffc17 	ldw	r2,-16(fp)
    e610:	103fe71e 	bne	r2,zero,e5b0 <tcp_input+0x738>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
    e614:	e0bffc17 	ldw	r2,-16(fp)
    e618:	10001426 	beq	r2,zero,e66c <tcp_input+0x7f4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
    e61c:	e0bffb17 	ldw	r2,-20(fp)
    e620:	10000d26 	beq	r2,zero,e658 <tcp_input+0x7e0>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
    e624:	e0bffc17 	ldw	r2,-16(fp)
    e628:	10c00317 	ldw	r3,12(r2)
    e62c:	e0bffb17 	ldw	r2,-20(fp)
    e630:	10c00315 	stw	r3,12(r2)
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
    e634:	008000f4 	movhi	r2,3
    e638:	109be104 	addi	r2,r2,28548
    e63c:	10c00017 	ldw	r3,0(r2)
    e640:	e0bffc17 	ldw	r2,-16(fp)
    e644:	10c00315 	stw	r3,12(r2)
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
    e648:	008000f4 	movhi	r2,3
    e64c:	109be104 	addi	r2,r2,28548
    e650:	e0fffc17 	ldw	r3,-16(fp)
    e654:	10c00015 	stw	r3,0(r2)
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
    e658:	e13ffc17 	ldw	r4,-16(fp)
    e65c:	000eb900 	call	eb90 <tcp_listen_input>
      pbuf_free(p);
    e660:	e13ffe17 	ldw	r4,-8(fp)
    e664:	000a4200 	call	a420 <pbuf_free>
      return;
    e668:	00014406 	br	eb7c <tcp_input+0xd04>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
    e66c:	e0bffa17 	ldw	r2,-24(fp)
    e670:	10010226 	beq	r2,zero,ea7c <tcp_input+0xc04>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    e674:	00800134 	movhi	r2,4
    e678:	1090fb04 	addi	r2,r2,17388
    e67c:	10000015 	stw	zero,0(r2)
    inseg.len = p->tot_len;
    e680:	e0bffe17 	ldw	r2,-8(fp)
    e684:	10c0020b 	ldhu	r3,8(r2)
    e688:	00800134 	movhi	r2,4
    e68c:	1090fb04 	addi	r2,r2,17388
    e690:	10c0020d 	sth	r3,8(r2)
    inseg.p = p;
    e694:	00800134 	movhi	r2,4
    e698:	1090fb04 	addi	r2,r2,17388
    e69c:	e0fffe17 	ldw	r3,-8(fp)
    e6a0:	10c00115 	stw	r3,4(r2)
    inseg.tcphdr = tcphdr;
    e6a4:	d0e8bd17 	ldw	r3,-23820(gp)
    e6a8:	00800134 	movhi	r2,4
    e6ac:	1090fb04 	addi	r2,r2,17388
    e6b0:	10c00315 	stw	r3,12(r2)

    recv_data = NULL;
    e6b4:	d028c315 	stw	zero,-23796(gp)
    recv_flags = 0;
    e6b8:	d028c205 	stb	zero,-23800(gp)

    if (flags & TCP_PSH) {
    e6bc:	d0a8c103 	ldbu	r2,-23804(gp)
    e6c0:	10803fcc 	andi	r2,r2,255
    e6c4:	1080020c 	andi	r2,r2,8
    e6c8:	10000626 	beq	r2,zero,e6e4 <tcp_input+0x86c>
      p->flags |= PBUF_FLAG_PUSH;
    e6cc:	e0bffe17 	ldw	r2,-8(fp)
    e6d0:	10800343 	ldbu	r2,13(r2)
    e6d4:	10800054 	ori	r2,r2,1
    e6d8:	1007883a 	mov	r3,r2
    e6dc:	e0bffe17 	ldw	r2,-8(fp)
    e6e0:	10c00345 	stb	r3,13(r2)
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
    e6e4:	e0bffa17 	ldw	r2,-24(fp)
    e6e8:	10801f17 	ldw	r2,124(r2)
    e6ec:	10001626 	beq	r2,zero,e748 <tcp_input+0x8d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
    e6f0:	e13ffa17 	ldw	r4,-24(fp)
    e6f4:	000d2540 	call	d254 <tcp_process_refused_data>
    e6f8:	10803fcc 	andi	r2,r2,255
    e6fc:	1080201c 	xori	r2,r2,128
    e700:	10bfe004 	addi	r2,r2,-128
    e704:	10bffda0 	cmpeqi	r2,r2,-10
    e708:	1000061e 	bne	r2,zero,e724 <tcp_input+0x8ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
    e70c:	e0bffa17 	ldw	r2,-24(fp)
    e710:	10801f17 	ldw	r2,124(r2)
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
    e714:	10000c26 	beq	r2,zero,e748 <tcp_input+0x8d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
    e718:	d0a8c18b 	ldhu	r2,-23802(gp)
    e71c:	10bfffcc 	andi	r2,r2,65535
    e720:	10000926 	beq	r2,zero,e748 <tcp_input+0x8d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        TCP_STATS_INC(tcp.drop);
    e724:	00800134 	movhi	r2,4
    e728:	10932304 	addi	r2,r2,19596
    e72c:	1080258b 	ldhu	r2,150(r2)
    e730:	10800044 	addi	r2,r2,1
    e734:	1007883a 	mov	r3,r2
    e738:	00800134 	movhi	r2,4
    e73c:	10932304 	addi	r2,r2,19596
    e740:	10c0258d 	sth	r3,150(r2)
        snmp_inc_tcpinerrs();
        goto aborted;
    e744:	0000be06 	br	ea40 <tcp_input+0xbc8>
      }
    }
    tcp_input_pcb = pcb;
    e748:	e0bffa17 	ldw	r2,-24(fp)
    e74c:	d0a8c415 	stw	r2,-23792(gp)
    err = tcp_process(pcb);
    e750:	e13ffa17 	ldw	r4,-24(fp)
    e754:	000ef580 	call	ef58 <tcp_process>
    e758:	e0bffd05 	stb	r2,-12(fp)
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
    e75c:	e0bffd07 	ldb	r2,-12(fp)
    e760:	10bffda0 	cmpeqi	r2,r2,-10
    e764:	1000b61e 	bne	r2,zero,ea40 <tcp_input+0xbc8>
      if (recv_flags & TF_RESET) {
    e768:	d0a8c203 	ldbu	r2,-23800(gp)
    e76c:	10803fcc 	andi	r2,r2,255
    e770:	1080020c 	andi	r2,r2,8
    e774:	10001226 	beq	r2,zero,e7c0 <tcp_input+0x948>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
    e778:	e0bffa17 	ldw	r2,-24(fp)
    e77c:	10802417 	ldw	r2,144(r2)
    e780:	10000726 	beq	r2,zero,e7a0 <tcp_input+0x928>
    e784:	e0bffa17 	ldw	r2,-24(fp)
    e788:	10c02417 	ldw	r3,144(r2)
    e78c:	e0bffa17 	ldw	r2,-24(fp)
    e790:	10800417 	ldw	r2,16(r2)
    e794:	1009883a 	mov	r4,r2
    e798:	017ffd44 	movi	r5,-11
    e79c:	183ee83a 	callr	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
    e7a0:	010000f4 	movhi	r4,3
    e7a4:	211bdf04 	addi	r4,r4,28540
    e7a8:	e17ffa17 	ldw	r5,-24(fp)
    e7ac:	000dbe00 	call	dbe0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
    e7b0:	01000084 	movi	r4,2
    e7b4:	e17ffa17 	ldw	r5,-24(fp)
    e7b8:	00091c00 	call	91c0 <memp_free>
    e7bc:	0000a006 	br	ea40 <tcp_input+0xbc8>
      } else if (recv_flags & TF_CLOSED) {
    e7c0:	d0a8c203 	ldbu	r2,-23800(gp)
    e7c4:	10803fcc 	andi	r2,r2,255
    e7c8:	1080040c 	andi	r2,r2,16
    e7cc:	10001726 	beq	r2,zero,e82c <tcp_input+0x9b4>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
    e7d0:	e0bffa17 	ldw	r2,-24(fp)
    e7d4:	10800883 	ldbu	r2,34(r2)
    e7d8:	10803fcc 	andi	r2,r2,255
    e7dc:	1080040c 	andi	r2,r2,16
    e7e0:	10000a1e 	bne	r2,zero,e80c <tcp_input+0x994>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
    e7e4:	e0bffa17 	ldw	r2,-24(fp)
    e7e8:	10802417 	ldw	r2,144(r2)
    e7ec:	10000726 	beq	r2,zero,e80c <tcp_input+0x994>
    e7f0:	e0bffa17 	ldw	r2,-24(fp)
    e7f4:	10c02417 	ldw	r3,144(r2)
    e7f8:	e0bffa17 	ldw	r2,-24(fp)
    e7fc:	10800417 	ldw	r2,16(r2)
    e800:	1009883a 	mov	r4,r2
    e804:	017ffd04 	movi	r5,-12
    e808:	183ee83a 	callr	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
    e80c:	010000f4 	movhi	r4,3
    e810:	211bdf04 	addi	r4,r4,28540
    e814:	e17ffa17 	ldw	r5,-24(fp)
    e818:	000dbe00 	call	dbe0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
    e81c:	01000084 	movi	r4,2
    e820:	e17ffa17 	ldw	r5,-24(fp)
    e824:	00091c00 	call	91c0 <memp_free>
    e828:	00008506 	br	ea40 <tcp_input+0xbc8>
      } else {
        err = ERR_OK;
    e82c:	e03ffd05 	stb	zero,-12(fp)
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
    e830:	e0bffa17 	ldw	r2,-24(fp)
    e834:	10801a0b 	ldhu	r2,104(r2)
    e838:	10bfffcc 	andi	r2,r2,65535
    e83c:	10001426 	beq	r2,zero,e890 <tcp_input+0xa18>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
    e840:	e0bffa17 	ldw	r2,-24(fp)
    e844:	10802017 	ldw	r2,128(r2)
    e848:	10000d26 	beq	r2,zero,e880 <tcp_input+0xa08>
    e84c:	e0bffa17 	ldw	r2,-24(fp)
    e850:	11c02017 	ldw	r7,128(r2)
    e854:	e0bffa17 	ldw	r2,-24(fp)
    e858:	10c00417 	ldw	r3,16(r2)
    e85c:	e0bffa17 	ldw	r2,-24(fp)
    e860:	10801a0b 	ldhu	r2,104(r2)
    e864:	10bfffcc 	andi	r2,r2,65535
    e868:	1809883a 	mov	r4,r3
    e86c:	e17ffa17 	ldw	r5,-24(fp)
    e870:	100d883a 	mov	r6,r2
    e874:	383ee83a 	callr	r7
    e878:	e0bffd05 	stb	r2,-12(fp)
    e87c:	00000106 	br	e884 <tcp_input+0xa0c>
    e880:	e03ffd05 	stb	zero,-12(fp)
          if (err == ERR_ABRT) {
    e884:	e0bffd07 	ldb	r2,-12(fp)
    e888:	10bffd98 	cmpnei	r2,r2,-10
    e88c:	10006726 	beq	r2,zero,ea2c <tcp_input+0xbb4>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
    e890:	d0a8c317 	ldw	r2,-23796(gp)
    e894:	10003526 	beq	r2,zero,e96c <tcp_input+0xaf4>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
    e898:	e0bffa17 	ldw	r2,-24(fp)
    e89c:	10801f17 	ldw	r2,124(r2)
    e8a0:	10000926 	beq	r2,zero,e8c8 <tcp_input+0xa50>
    e8a4:	010000f4 	movhi	r4,3
    e8a8:	213fb204 	addi	r4,r4,-312
    e8ac:	014000f4 	movhi	r5,3
    e8b0:	29400304 	addi	r5,r5,12
    e8b4:	01805504 	movi	r6,340
    e8b8:	01c000f4 	movhi	r7,3
    e8bc:	39ffc604 	addi	r7,r7,-232
    e8c0:	0017c440 	call	17c44 <printf>
    e8c4:	003fff06 	br	e8c4 <tcp_input+0xa4c>
          if (pcb->flags & TF_RXCLOSED) {
    e8c8:	e0bffa17 	ldw	r2,-24(fp)
    e8cc:	10800883 	ldbu	r2,34(r2)
    e8d0:	10803fcc 	andi	r2,r2,255
    e8d4:	1080040c 	andi	r2,r2,16
    e8d8:	10000626 	beq	r2,zero,e8f4 <tcp_input+0xa7c>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
    e8dc:	d0a8c317 	ldw	r2,-23796(gp)
    e8e0:	1009883a 	mov	r4,r2
    e8e4:	000a4200 	call	a420 <pbuf_free>
            tcp_abort(pcb);
    e8e8:	e13ffa17 	ldw	r4,-24(fp)
    e8ec:	000bf140 	call	bf14 <tcp_abort>
            goto aborted;
    e8f0:	00005306 	br	ea40 <tcp_input+0xbc8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
    e8f4:	e0bffa17 	ldw	r2,-24(fp)
    e8f8:	10802117 	ldw	r2,132(r2)
    e8fc:	10000c26 	beq	r2,zero,e930 <tcp_input+0xab8>
    e900:	e0bffa17 	ldw	r2,-24(fp)
    e904:	12002117 	ldw	r8,132(r2)
    e908:	e0bffa17 	ldw	r2,-24(fp)
    e90c:	10c00417 	ldw	r3,16(r2)
    e910:	d0a8c317 	ldw	r2,-23796(gp)
    e914:	1809883a 	mov	r4,r3
    e918:	e17ffa17 	ldw	r5,-24(fp)
    e91c:	100d883a 	mov	r6,r2
    e920:	000f883a 	mov	r7,zero
    e924:	403ee83a 	callr	r8
    e928:	e0bffd05 	stb	r2,-12(fp)
    e92c:	00000706 	br	e94c <tcp_input+0xad4>
    e930:	d0a8c317 	ldw	r2,-23796(gp)
    e934:	0009883a 	mov	r4,zero
    e938:	e17ffa17 	ldw	r5,-24(fp)
    e93c:	100d883a 	mov	r6,r2
    e940:	000f883a 	mov	r7,zero
    e944:	000d4e80 	call	d4e8 <tcp_recv_null>
    e948:	e0bffd05 	stb	r2,-12(fp)
          if (err == ERR_ABRT) {
    e94c:	e0bffd07 	ldb	r2,-12(fp)
    e950:	10bffd98 	cmpnei	r2,r2,-10
    e954:	10003726 	beq	r2,zero,ea34 <tcp_input+0xbbc>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
    e958:	e0bffd07 	ldb	r2,-12(fp)
    e95c:	10000326 	beq	r2,zero,e96c <tcp_input+0xaf4>
            pcb->refused_data = recv_data;
    e960:	d0e8c317 	ldw	r3,-23796(gp)
    e964:	e0bffa17 	ldw	r2,-24(fp)
    e968:	10c01f15 	stw	r3,124(r2)
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
    e96c:	d0a8c203 	ldbu	r2,-23800(gp)
    e970:	10803fcc 	andi	r2,r2,255
    e974:	1080080c 	andi	r2,r2,32
    e978:	10002826 	beq	r2,zero,ea1c <tcp_input+0xba4>
          if (pcb->refused_data != NULL) {
    e97c:	e0bffa17 	ldw	r2,-24(fp)
    e980:	10801f17 	ldw	r2,124(r2)
    e984:	10000826 	beq	r2,zero,e9a8 <tcp_input+0xb30>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
    e988:	e0bffa17 	ldw	r2,-24(fp)
    e98c:	10801f17 	ldw	r2,124(r2)
    e990:	e0fffa17 	ldw	r3,-24(fp)
    e994:	18c01f17 	ldw	r3,124(r3)
    e998:	18c00343 	ldbu	r3,13(r3)
    e99c:	18c00814 	ori	r3,r3,32
    e9a0:	10c00345 	stb	r3,13(r2)
    e9a4:	00001d06 	br	ea1c <tcp_input+0xba4>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
    e9a8:	e0bffa17 	ldw	r2,-24(fp)
    e9ac:	10800c0b 	ldhu	r2,48(r2)
    e9b0:	10bfffcc 	andi	r2,r2,65535
    e9b4:	10820020 	cmpeqi	r2,r2,2048
    e9b8:	1000061e 	bne	r2,zero,e9d4 <tcp_input+0xb5c>
              pcb->rcv_wnd++;
    e9bc:	e0bffa17 	ldw	r2,-24(fp)
    e9c0:	10800c0b 	ldhu	r2,48(r2)
    e9c4:	10800044 	addi	r2,r2,1
    e9c8:	1007883a 	mov	r3,r2
    e9cc:	e0bffa17 	ldw	r2,-24(fp)
    e9d0:	10c00c0d 	sth	r3,48(r2)
            }
            TCP_EVENT_CLOSED(pcb, err);
    e9d4:	e0bffa17 	ldw	r2,-24(fp)
    e9d8:	10802117 	ldw	r2,132(r2)
    e9dc:	10000b26 	beq	r2,zero,ea0c <tcp_input+0xb94>
    e9e0:	e0bffa17 	ldw	r2,-24(fp)
    e9e4:	10c02117 	ldw	r3,132(r2)
    e9e8:	e0bffa17 	ldw	r2,-24(fp)
    e9ec:	10800417 	ldw	r2,16(r2)
    e9f0:	1009883a 	mov	r4,r2
    e9f4:	e17ffa17 	ldw	r5,-24(fp)
    e9f8:	000d883a 	mov	r6,zero
    e9fc:	000f883a 	mov	r7,zero
    ea00:	183ee83a 	callr	r3
    ea04:	e0bffd05 	stb	r2,-12(fp)
    ea08:	00000106 	br	ea10 <tcp_input+0xb98>
    ea0c:	e03ffd05 	stb	zero,-12(fp)
            if (err == ERR_ABRT) {
    ea10:	e0bffd07 	ldb	r2,-12(fp)
    ea14:	10bffd98 	cmpnei	r2,r2,-10
    ea18:	10000826 	beq	r2,zero,ea3c <tcp_input+0xbc4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
    ea1c:	d028c415 	stw	zero,-23792(gp)
        /* Try to send something out. */
        tcp_output(pcb);
    ea20:	e13ffa17 	ldw	r4,-24(fp)
    ea24:	00134600 	call	13460 <tcp_output>
    ea28:	00000506 	br	ea40 <tcp_input+0xbc8>
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
          if (err == ERR_ABRT) {
            goto aborted;
    ea2c:	0001883a 	nop
    ea30:	00000306 	br	ea40 <tcp_input+0xbc8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
          if (err == ERR_ABRT) {
            goto aborted;
    ea34:	0001883a 	nop
    ea38:	00000106 	br	ea40 <tcp_input+0xbc8>
            if (pcb->rcv_wnd != TCP_WND) {
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
            if (err == ERR_ABRT) {
              goto aborted;
    ea3c:	0001883a 	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
    ea40:	d028c415 	stw	zero,-23792(gp)
    recv_data = NULL;
    ea44:	d028c315 	stw	zero,-23796(gp)

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
    ea48:	00800134 	movhi	r2,4
    ea4c:	1090fb04 	addi	r2,r2,17388
    ea50:	10800117 	ldw	r2,4(r2)
    ea54:	10004826 	beq	r2,zero,eb78 <tcp_input+0xd00>
    {
      pbuf_free(inseg.p);
    ea58:	00800134 	movhi	r2,4
    ea5c:	1090fb04 	addi	r2,r2,17388
    ea60:	10800117 	ldw	r2,4(r2)
    ea64:	1009883a 	mov	r4,r2
    ea68:	000a4200 	call	a420 <pbuf_free>
      inseg.p = NULL;
    ea6c:	00800134 	movhi	r2,4
    ea70:	1090fb04 	addi	r2,r2,17388
    ea74:	10000115 	stw	zero,4(r2)
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
    ea78:	00003f06 	br	eb78 <tcp_input+0xd00>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
    ea7c:	d0a8bd17 	ldw	r2,-23820(gp)
    ea80:	1080030b 	ldhu	r2,12(r2)
    ea84:	10bfffcc 	andi	r2,r2,65535
    ea88:	1004d23a 	srli	r2,r2,8
    ea8c:	10ffffcc 	andi	r3,r2,65535
    ea90:	d0a8bd17 	ldw	r2,-23820(gp)
    ea94:	1080030b 	ldhu	r2,12(r2)
    ea98:	10bfffcc 	andi	r2,r2,65535
    ea9c:	1004923a 	slli	r2,r2,8
    eaa0:	10bfffcc 	andi	r2,r2,65535
    eaa4:	1884b03a 	or	r2,r3,r2
    eaa8:	1080010c 	andi	r2,r2,4
    eaac:	1000241e 	bne	r2,zero,eb40 <tcp_input+0xcc8>
      TCP_STATS_INC(tcp.proterr);
    eab0:	00800134 	movhi	r2,4
    eab4:	10932304 	addi	r2,r2,19596
    eab8:	1080280b 	ldhu	r2,160(r2)
    eabc:	10800044 	addi	r2,r2,1
    eac0:	1007883a 	mov	r3,r2
    eac4:	00800134 	movhi	r2,4
    eac8:	10932304 	addi	r2,r2,19596
    eacc:	10c0280d 	sth	r3,160(r2)
      TCP_STATS_INC(tcp.drop);
    ead0:	00800134 	movhi	r2,4
    ead4:	10932304 	addi	r2,r2,19596
    ead8:	1080258b 	ldhu	r2,150(r2)
    eadc:	10800044 	addi	r2,r2,1
    eae0:	1007883a 	mov	r3,r2
    eae4:	00800134 	movhi	r2,4
    eae8:	10932304 	addi	r2,r2,19596
    eaec:	10c0258d 	sth	r3,150(r2)
      tcp_rst(ackno, seqno + tcplen,
    eaf0:	d0e8c017 	ldw	r3,-23808(gp)
    eaf4:	d0a8c18b 	ldhu	r2,-23802(gp)
    eaf8:	113fffcc 	andi	r4,r2,65535
    eafc:	d0a8bf17 	ldw	r2,-23812(gp)
    eb00:	2085883a 	add	r2,r4,r2
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    eb04:	d128bd17 	ldw	r4,-23820(gp)
    eb08:	2100008b 	ldhu	r4,2(r4)
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
    eb0c:	217fffcc 	andi	r5,r4,65535
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    eb10:	d128bd17 	ldw	r4,-23820(gp)
    eb14:	2100000b 	ldhu	r4,0(r4)
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
    eb18:	213fffcc 	andi	r4,r4,65535
    eb1c:	d9400015 	stw	r5,0(sp)
    eb20:	d9000115 	stw	r4,4(sp)
    eb24:	1809883a 	mov	r4,r3
    eb28:	100b883a 	mov	r5,r2
    eb2c:	018000f4 	movhi	r6,3
    eb30:	319bd204 	addi	r6,r6,28488
    eb34:	01c000f4 	movhi	r7,3
    eb38:	39dbd004 	addi	r7,r7,28480
    eb3c:	00140540 	call	14054 <tcp_rst>
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
    eb40:	e13ffe17 	ldw	r4,-8(fp)
    eb44:	000a4200 	call	a420 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
    eb48:	00000b06 	br	eb78 <tcp_input+0xd00>
dropped:
  TCP_STATS_INC(tcp.drop);
    eb4c:	00800134 	movhi	r2,4
    eb50:	10932304 	addi	r2,r2,19596
    eb54:	1080258b 	ldhu	r2,150(r2)
    eb58:	10800044 	addi	r2,r2,1
    eb5c:	1007883a 	mov	r3,r2
    eb60:	00800134 	movhi	r2,4
    eb64:	10932304 	addi	r2,r2,19596
    eb68:	10c0258d 	sth	r3,150(r2)
  snmp_inc_tcpinerrs();
  pbuf_free(p);
    eb6c:	e13ffe17 	ldw	r4,-8(fp)
    eb70:	000a4200 	call	a420 <pbuf_free>
    eb74:	00000106 	br	eb7c <tcp_input+0xd04>
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
    eb78:	0001883a 	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
    eb7c:	e037883a 	mov	sp,fp
    eb80:	dfc00117 	ldw	ra,4(sp)
    eb84:	df000017 	ldw	fp,0(sp)
    eb88:	dec00204 	addi	sp,sp,8
    eb8c:	f800283a 	ret

0000eb90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
    eb90:	defff904 	addi	sp,sp,-28
    eb94:	dfc00615 	stw	ra,24(sp)
    eb98:	df000515 	stw	fp,20(sp)
    eb9c:	df000504 	addi	fp,sp,20
    eba0:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
    eba4:	d0a8c103 	ldbu	r2,-23804(gp)
    eba8:	10803fcc 	andi	r2,r2,255
    ebac:	1080010c 	andi	r2,r2,4
    ebb0:	10000226 	beq	r2,zero,ebbc <tcp_listen_input+0x2c>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
    ebb4:	0005883a 	mov	r2,zero
    ebb8:	00009406 	br	ee0c <tcp_listen_input+0x27c>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    ebbc:	d0a8c103 	ldbu	r2,-23804(gp)
    ebc0:	10803fcc 	andi	r2,r2,255
    ebc4:	1080040c 	andi	r2,r2,16
    ebc8:	10001526 	beq	r2,zero,ec20 <tcp_listen_input+0x90>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
    ebcc:	d0e8c017 	ldw	r3,-23808(gp)
    ebd0:	d0a8c18b 	ldhu	r2,-23802(gp)
    ebd4:	113fffcc 	andi	r4,r2,65535
    ebd8:	d0a8bf17 	ldw	r2,-23812(gp)
    ebdc:	2085883a 	add	r2,r4,r2
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    ebe0:	d128bd17 	ldw	r4,-23820(gp)
    ebe4:	2100008b 	ldhu	r4,2(r4)
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
    ebe8:	217fffcc 	andi	r5,r4,65535
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    ebec:	d128bd17 	ldw	r4,-23820(gp)
    ebf0:	2100000b 	ldhu	r4,0(r4)
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
    ebf4:	213fffcc 	andi	r4,r4,65535
    ebf8:	d9400015 	stw	r5,0(sp)
    ebfc:	d9000115 	stw	r4,4(sp)
    ec00:	1809883a 	mov	r4,r3
    ec04:	100b883a 	mov	r5,r2
    ec08:	018000f4 	movhi	r6,3
    ec0c:	319bd204 	addi	r6,r6,28488
    ec10:	01c000f4 	movhi	r7,3
    ec14:	39dbd004 	addi	r7,r7,28480
    ec18:	00140540 	call	14054 <tcp_rst>
    ec1c:	00007a06 	br	ee08 <tcp_listen_input+0x278>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
    ec20:	d0a8c103 	ldbu	r2,-23804(gp)
    ec24:	10803fcc 	andi	r2,r2,255
    ec28:	1080008c 	andi	r2,r2,2
    ec2c:	10007626 	beq	r2,zero,ee08 <tcp_listen_input+0x278>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
    ec30:	e0bfff17 	ldw	r2,-4(fp)
    ec34:	10800703 	ldbu	r2,28(r2)
    ec38:	10803fcc 	andi	r2,r2,255
    ec3c:	1009883a 	mov	r4,r2
    ec40:	000d6c80 	call	d6c8 <tcp_alloc>
    ec44:	e0bffd15 	stw	r2,-12(fp)
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
    ec48:	e0bffd17 	ldw	r2,-12(fp)
    ec4c:	10000a1e 	bne	r2,zero,ec78 <tcp_listen_input+0xe8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
    ec50:	00800134 	movhi	r2,4
    ec54:	10932304 	addi	r2,r2,19596
    ec58:	1080270b 	ldhu	r2,156(r2)
    ec5c:	10800044 	addi	r2,r2,1
    ec60:	1007883a 	mov	r3,r2
    ec64:	00800134 	movhi	r2,4
    ec68:	10932304 	addi	r2,r2,19596
    ec6c:	10c0270d 	sth	r3,156(r2)
      return ERR_MEM;
    ec70:	00bfffc4 	movi	r2,-1
    ec74:	00006506 	br	ee0c <tcp_listen_input+0x27c>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
    ec78:	008000f4 	movhi	r2,3
    ec7c:	109bd204 	addi	r2,r2,28488
    ec80:	10c00017 	ldw	r3,0(r2)
    ec84:	e0bffd17 	ldw	r2,-12(fp)
    ec88:	10c00015 	stw	r3,0(r2)
    npcb->local_port = pcb->local_port;
    ec8c:	e0bfff17 	ldw	r2,-4(fp)
    ec90:	10c0078b 	ldhu	r3,30(r2)
    ec94:	e0bffd17 	ldw	r2,-12(fp)
    ec98:	10c0078d 	sth	r3,30(r2)
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
    ec9c:	008000f4 	movhi	r2,3
    eca0:	109bd004 	addi	r2,r2,28480
    eca4:	10c00017 	ldw	r3,0(r2)
    eca8:	e0bffd17 	ldw	r2,-12(fp)
    ecac:	10c00115 	stw	r3,4(r2)
    npcb->remote_port = tcphdr->src;
    ecb0:	d0a8bd17 	ldw	r2,-23820(gp)
    ecb4:	10c0000b 	ldhu	r3,0(r2)
    ecb8:	e0bffd17 	ldw	r2,-12(fp)
    ecbc:	10c0080d 	sth	r3,32(r2)
    npcb->state = SYN_RCVD;
    ecc0:	e0bffd17 	ldw	r2,-12(fp)
    ecc4:	00c000c4 	movi	r3,3
    ecc8:	10c00615 	stw	r3,24(r2)
    npcb->rcv_nxt = seqno + 1;
    eccc:	d0a8bf17 	ldw	r2,-23812(gp)
    ecd0:	10c00044 	addi	r3,r2,1
    ecd4:	e0bffd17 	ldw	r2,-12(fp)
    ecd8:	10c00b15 	stw	r3,44(r2)
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    ecdc:	e0bffd17 	ldw	r2,-12(fp)
    ece0:	10c00b17 	ldw	r3,44(r2)
    ece4:	e0bffd17 	ldw	r2,-12(fp)
    ece8:	10c00d15 	stw	r3,52(r2)
    npcb->snd_wnd = tcphdr->wnd;
    ecec:	d0a8bd17 	ldw	r2,-23820(gp)
    ecf0:	10c0038b 	ldhu	r3,14(r2)
    ecf4:	e0bffd17 	ldw	r2,-12(fp)
    ecf8:	10c0190d 	sth	r3,100(r2)
    npcb->snd_wnd_max = tcphdr->wnd;
    ecfc:	d0a8bd17 	ldw	r2,-23820(gp)
    ed00:	10c0038b 	ldhu	r3,14(r2)
    ed04:	e0bffd17 	ldw	r2,-12(fp)
    ed08:	10c0198d 	sth	r3,102(r2)
    npcb->ssthresh = npcb->snd_wnd;
    ed0c:	e0bffd17 	ldw	r2,-12(fp)
    ed10:	10c0190b 	ldhu	r3,100(r2)
    ed14:	e0bffd17 	ldw	r2,-12(fp)
    ed18:	10c0148d 	sth	r3,82(r2)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    ed1c:	d0a8bf17 	ldw	r2,-23812(gp)
    ed20:	10ffffc4 	addi	r3,r2,-1
    ed24:	e0bffd17 	ldw	r2,-12(fp)
    ed28:	10c01615 	stw	r3,88(r2)
    npcb->callback_arg = pcb->callback_arg;
    ed2c:	e0bfff17 	ldw	r2,-4(fp)
    ed30:	10c00417 	ldw	r3,16(r2)
    ed34:	e0bffd17 	ldw	r2,-12(fp)
    ed38:	10c00415 	stw	r3,16(r2)
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
    ed3c:	e0bfff17 	ldw	r2,-4(fp)
    ed40:	10c00517 	ldw	r3,20(r2)
    ed44:	e0bffd17 	ldw	r2,-12(fp)
    ed48:	10c00515 	stw	r3,20(r2)
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
    ed4c:	e0bfff17 	ldw	r2,-4(fp)
    ed50:	10c00203 	ldbu	r3,8(r2)
    ed54:	00bfe304 	movi	r2,-116
    ed58:	1884703a 	and	r2,r3,r2
    ed5c:	1007883a 	mov	r3,r2
    ed60:	e0bffd17 	ldw	r2,-12(fp)
    ed64:	10c00205 	stb	r3,8(r2)
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
    ed68:	008000f4 	movhi	r2,3
    ed6c:	109bdf04 	addi	r2,r2,28540
    ed70:	10c00017 	ldw	r3,0(r2)
    ed74:	e0bffd17 	ldw	r2,-12(fp)
    ed78:	10c00315 	stw	r3,12(r2)
    ed7c:	008000f4 	movhi	r2,3
    ed80:	109bdf04 	addi	r2,r2,28540
    ed84:	e0fffd17 	ldw	r3,-12(fp)
    ed88:	10c00015 	stw	r3,0(r2)
    ed8c:	00149c40 	call	149c4 <tcp_timer_needed>
    ed90:	008000f4 	movhi	r2,3
    ed94:	109bde84 	addi	r2,r2,28538
    ed98:	00c00044 	movi	r3,1
    ed9c:	10c00005 	stb	r3,0(r2)

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
    eda0:	e13ffd17 	ldw	r4,-12(fp)
    eda4:	0011b400 	call	11b40 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
    eda8:	e0bffd17 	ldw	r2,-12(fp)
    edac:	10800e8b 	ldhu	r2,58(r2)
    edb0:	10ffffcc 	andi	r3,r2,65535
    edb4:	e0bffd17 	ldw	r2,-12(fp)
    edb8:	10800104 	addi	r2,r2,4
    edbc:	1809883a 	mov	r4,r3
    edc0:	100b883a 	mov	r5,r2
    edc4:	000ddb80 	call	ddb8 <tcp_eff_send_mss>
    edc8:	e0fffd17 	ldw	r3,-12(fp)
    edcc:	18800e8d 	sth	r2,58(r3)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
    edd0:	e13ffd17 	ldw	r4,-12(fp)
    edd4:	01400484 	movi	r5,18
    edd8:	0012efc0 	call	12efc <tcp_enqueue_flags>
    eddc:	e0bffe05 	stb	r2,-8(fp)
    if (rc != ERR_OK) {
    ede0:	e0bffe07 	ldb	r2,-8(fp)
    ede4:	10000526 	beq	r2,zero,edfc <tcp_listen_input+0x26c>
      tcp_abandon(npcb, 0);
    ede8:	e13ffd17 	ldw	r4,-12(fp)
    edec:	000b883a 	mov	r5,zero
    edf0:	000bd840 	call	bd84 <tcp_abandon>
      return rc;
    edf4:	e0bffe03 	ldbu	r2,-8(fp)
    edf8:	00000406 	br	ee0c <tcp_listen_input+0x27c>
    }
    return tcp_output(npcb);
    edfc:	e13ffd17 	ldw	r4,-12(fp)
    ee00:	00134600 	call	13460 <tcp_output>
    ee04:	00000106 	br	ee0c <tcp_listen_input+0x27c>
  }
  return ERR_OK;
    ee08:	0005883a 	mov	r2,zero
}
    ee0c:	e037883a 	mov	sp,fp
    ee10:	dfc00117 	ldw	ra,4(sp)
    ee14:	df000017 	ldw	fp,0(sp)
    ee18:	dec00204 	addi	sp,sp,8
    ee1c:	f800283a 	ret

0000ee20 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
    ee20:	defffb04 	addi	sp,sp,-20
    ee24:	dfc00415 	stw	ra,16(sp)
    ee28:	df000315 	stw	fp,12(sp)
    ee2c:	df000304 	addi	fp,sp,12
    ee30:	e13fff15 	stw	r4,-4(fp)
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
    ee34:	d0a8c103 	ldbu	r2,-23804(gp)
    ee38:	10803fcc 	andi	r2,r2,255
    ee3c:	1080010c 	andi	r2,r2,4
    ee40:	10000226 	beq	r2,zero,ee4c <tcp_timewait_input+0x2c>
    return ERR_OK;
    ee44:	0005883a 	mov	r2,zero
    ee48:	00003e06 	br	ef44 <tcp_timewait_input+0x124>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
    ee4c:	d0a8c103 	ldbu	r2,-23804(gp)
    ee50:	10803fcc 	andi	r2,r2,255
    ee54:	1080008c 	andi	r2,r2,2
    ee58:	10002426 	beq	r2,zero,eeec <tcp_timewait_input+0xcc>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
    ee5c:	d0e8bf17 	ldw	r3,-23812(gp)
    ee60:	e0bfff17 	ldw	r2,-4(fp)
    ee64:	10800b17 	ldw	r2,44(r2)
    ee68:	1885c83a 	sub	r2,r3,r2
    ee6c:	10002816 	blt	r2,zero,ef10 <tcp_timewait_input+0xf0>
    ee70:	d0e8bf17 	ldw	r3,-23812(gp)
    ee74:	e0bfff17 	ldw	r2,-4(fp)
    ee78:	11000b17 	ldw	r4,44(r2)
    ee7c:	e0bfff17 	ldw	r2,-4(fp)
    ee80:	10800c0b 	ldhu	r2,48(r2)
    ee84:	10bfffcc 	andi	r2,r2,65535
    ee88:	2085883a 	add	r2,r4,r2
    ee8c:	1885c83a 	sub	r2,r3,r2
    ee90:	00801f16 	blt	zero,r2,ef10 <tcp_timewait_input+0xf0>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    ee94:	d0e8c017 	ldw	r3,-23808(gp)
    ee98:	d0a8c18b 	ldhu	r2,-23802(gp)
    ee9c:	113fffcc 	andi	r4,r2,65535
    eea0:	d0a8bf17 	ldw	r2,-23812(gp)
    eea4:	2085883a 	add	r2,r4,r2
        tcphdr->dest, tcphdr->src);
    eea8:	d128bd17 	ldw	r4,-23820(gp)
    eeac:	2100008b 	ldhu	r4,2(r4)
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    eeb0:	217fffcc 	andi	r5,r4,65535
        tcphdr->dest, tcphdr->src);
    eeb4:	d128bd17 	ldw	r4,-23820(gp)
    eeb8:	2100000b 	ldhu	r4,0(r4)
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    eebc:	213fffcc 	andi	r4,r4,65535
    eec0:	d9400015 	stw	r5,0(sp)
    eec4:	d9000115 	stw	r4,4(sp)
    eec8:	1809883a 	mov	r4,r3
    eecc:	100b883a 	mov	r5,r2
    eed0:	018000f4 	movhi	r6,3
    eed4:	319bd204 	addi	r6,r6,28488
    eed8:	01c000f4 	movhi	r7,3
    eedc:	39dbd004 	addi	r7,r7,28480
    eee0:	00140540 	call	14054 <tcp_rst>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
    eee4:	0005883a 	mov	r2,zero
    eee8:	00001606 	br	ef44 <tcp_timewait_input+0x124>
    }
  } else if (flags & TCP_FIN) {
    eeec:	d0a8c103 	ldbu	r2,-23804(gp)
    eef0:	10803fcc 	andi	r2,r2,255
    eef4:	1080004c 	andi	r2,r2,1
    eef8:	10000526 	beq	r2,zero,ef10 <tcp_timewait_input+0xf0>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
    eefc:	008000f4 	movhi	r2,3
    ef00:	109be004 	addi	r2,r2,28544
    ef04:	10c00017 	ldw	r3,0(r2)
    ef08:	e0bfff17 	ldw	r2,-4(fp)
    ef0c:	10c00a15 	stw	r3,40(r2)
  }

  if ((tcplen > 0))  {
    ef10:	d0a8c18b 	ldhu	r2,-23802(gp)
    ef14:	10bfffcc 	andi	r2,r2,65535
    ef18:	10000926 	beq	r2,zero,ef40 <tcp_timewait_input+0x120>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
    ef1c:	e0bfff17 	ldw	r2,-4(fp)
    ef20:	10800883 	ldbu	r2,34(r2)
    ef24:	10800094 	ori	r2,r2,2
    ef28:	1007883a 	mov	r3,r2
    ef2c:	e0bfff17 	ldw	r2,-4(fp)
    ef30:	10c00885 	stb	r3,34(r2)
    return tcp_output(pcb);
    ef34:	e13fff17 	ldw	r4,-4(fp)
    ef38:	00134600 	call	13460 <tcp_output>
    ef3c:	00000106 	br	ef44 <tcp_timewait_input+0x124>
  }
  return ERR_OK;
    ef40:	0005883a 	mov	r2,zero
}
    ef44:	e037883a 	mov	sp,fp
    ef48:	dfc00117 	ldw	ra,4(sp)
    ef4c:	df000017 	ldw	fp,0(sp)
    ef50:	dec00204 	addi	sp,sp,8
    ef54:	f800283a 	ret

0000ef58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
    ef58:	defff804 	addi	sp,sp,-32
    ef5c:	dfc00715 	stw	ra,28(sp)
    ef60:	df000615 	stw	fp,24(sp)
    ef64:	df000604 	addi	fp,sp,24
    ef68:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
    ef6c:	e03ffc05 	stb	zero,-16(fp)
  err_t err;

  err = ERR_OK;
    ef70:	e03ffc45 	stb	zero,-15(fp)

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
    ef74:	d0a8c103 	ldbu	r2,-23804(gp)
    ef78:	10803fcc 	andi	r2,r2,255
    ef7c:	1080010c 	andi	r2,r2,4
    ef80:	10003726 	beq	r2,zero,f060 <tcp_process+0x108>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
    ef84:	e0bfff17 	ldw	r2,-4(fp)
    ef88:	10800617 	ldw	r2,24(r2)
    ef8c:	10800098 	cmpnei	r2,r2,2
    ef90:	1000071e 	bne	r2,zero,efb0 <tcp_process+0x58>
      if (ackno == pcb->snd_nxt) {
    ef94:	e0bfff17 	ldw	r2,-4(fp)
    ef98:	10c01517 	ldw	r3,84(r2)
    ef9c:	d0a8c017 	ldw	r2,-23808(gp)
    efa0:	1880131e 	bne	r3,r2,eff0 <tcp_process+0x98>
        acceptable = 1;
    efa4:	00800044 	movi	r2,1
    efa8:	e0bffc05 	stb	r2,-16(fp)
    efac:	00001006 	br	eff0 <tcp_process+0x98>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
    efb0:	d0e8bf17 	ldw	r3,-23812(gp)
    efb4:	e0bfff17 	ldw	r2,-4(fp)
    efb8:	10800b17 	ldw	r2,44(r2)
    efbc:	1885c83a 	sub	r2,r3,r2
    efc0:	10000b16 	blt	r2,zero,eff0 <tcp_process+0x98>
    efc4:	d0e8bf17 	ldw	r3,-23812(gp)
    efc8:	e0bfff17 	ldw	r2,-4(fp)
    efcc:	11000b17 	ldw	r4,44(r2)
    efd0:	e0bfff17 	ldw	r2,-4(fp)
    efd4:	10800c0b 	ldhu	r2,48(r2)
    efd8:	10bfffcc 	andi	r2,r2,65535
    efdc:	2085883a 	add	r2,r4,r2
    efe0:	1885c83a 	sub	r2,r3,r2
    efe4:	00800216 	blt	zero,r2,eff0 <tcp_process+0x98>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
    efe8:	00800044 	movi	r2,1
    efec:	e0bffc05 	stb	r2,-16(fp)
      }
    }

    if (acceptable) {
    eff0:	e0bffc03 	ldbu	r2,-16(fp)
    eff4:	10001826 	beq	r2,zero,f058 <tcp_process+0x100>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
    eff8:	e0bfff17 	ldw	r2,-4(fp)
    effc:	10800617 	ldw	r2,24(r2)
    f000:	1000091e 	bne	r2,zero,f028 <tcp_process+0xd0>
    f004:	010000f4 	movhi	r4,3
    f008:	213fb204 	addi	r4,r4,-312
    f00c:	014000f4 	movhi	r5,3
    f010:	29400a04 	addi	r5,r5,40
    f014:	018095c4 	movi	r6,599
    f018:	01c000f4 	movhi	r7,3
    f01c:	39ffc604 	addi	r7,r7,-232
    f020:	0017c440 	call	17c44 <printf>
    f024:	003fff06 	br	f024 <tcp_process+0xcc>
      recv_flags |= TF_RESET;
    f028:	d0a8c203 	ldbu	r2,-23800(gp)
    f02c:	10800214 	ori	r2,r2,8
    f030:	d0a8c205 	stb	r2,-23800(gp)
      pcb->flags &= ~TF_ACK_DELAY;
    f034:	e0bfff17 	ldw	r2,-4(fp)
    f038:	10c00883 	ldbu	r3,34(r2)
    f03c:	00bfff84 	movi	r2,-2
    f040:	1884703a 	and	r2,r3,r2
    f044:	1007883a 	mov	r3,r2
    f048:	e0bfff17 	ldw	r2,-4(fp)
    f04c:	10c00885 	stb	r3,34(r2)
      return ERR_RST;
    f050:	00bffd44 	movi	r2,-11
    f054:	0002b506 	br	fb2c <tcp_process+0xbd4>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    f058:	0005883a 	mov	r2,zero
    f05c:	0002b306 	br	fb2c <tcp_process+0xbd4>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
    f060:	d0a8c103 	ldbu	r2,-23804(gp)
    f064:	10803fcc 	andi	r2,r2,255
    f068:	1080008c 	andi	r2,r2,2
    f06c:	10001026 	beq	r2,zero,f0b0 <tcp_process+0x158>
    f070:	e0bfff17 	ldw	r2,-4(fp)
    f074:	10800617 	ldw	r2,24(r2)
    f078:	108000a0 	cmpeqi	r2,r2,2
    f07c:	10000c1e 	bne	r2,zero,f0b0 <tcp_process+0x158>
    f080:	e0bfff17 	ldw	r2,-4(fp)
    f084:	10800617 	ldw	r2,24(r2)
    f088:	108000e0 	cmpeqi	r2,r2,3
    f08c:	1000081e 	bne	r2,zero,f0b0 <tcp_process+0x158>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
    f090:	e0bfff17 	ldw	r2,-4(fp)
    f094:	10800883 	ldbu	r2,34(r2)
    f098:	10800094 	ori	r2,r2,2
    f09c:	1007883a 	mov	r3,r2
    f0a0:	e0bfff17 	ldw	r2,-4(fp)
    f0a4:	10c00885 	stb	r3,34(r2)
    return ERR_OK;
    f0a8:	0005883a 	mov	r2,zero
    f0ac:	00029f06 	br	fb2c <tcp_process+0xbd4>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
    f0b0:	e0bfff17 	ldw	r2,-4(fp)
    f0b4:	10800883 	ldbu	r2,34(r2)
    f0b8:	10803fcc 	andi	r2,r2,255
    f0bc:	1080040c 	andi	r2,r2,16
    f0c0:	1000051e 	bne	r2,zero,f0d8 <tcp_process+0x180>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
    f0c4:	008000f4 	movhi	r2,3
    f0c8:	109be004 	addi	r2,r2,28544
    f0cc:	10c00017 	ldw	r3,0(r2)
    f0d0:	e0bfff17 	ldw	r2,-4(fp)
    f0d4:	10c00a15 	stw	r3,40(r2)
  }
  pcb->keep_cnt_sent = 0;
    f0d8:	e0bfff17 	ldw	r2,-4(fp)
    f0dc:	10002685 	stb	zero,154(r2)

  tcp_parseopt(pcb);
    f0e0:	e13fff17 	ldw	r4,-4(fp)
    f0e4:	0011b400 	call	11b40 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
    f0e8:	e0bfff17 	ldw	r2,-4(fp)
    f0ec:	10800617 	ldw	r2,24(r2)
    f0f0:	10c002a8 	cmpgeui	r3,r2,10
    f0f4:	18027d1e 	bne	r3,zero,faec <tcp_process+0xb94>
    f0f8:	1085883a 	add	r2,r2,r2
    f0fc:	1087883a 	add	r3,r2,r2
    f100:	00800074 	movhi	r2,1
    f104:	10bc4504 	addi	r2,r2,-3820
    f108:	1885883a 	add	r2,r3,r2
    f10c:	10800017 	ldw	r2,0(r2)
    f110:	1000683a 	jmp	r2
    f114:	0000faec 	andhi	zero,zero,1003
    f118:	0000faec 	andhi	zero,zero,1003
    f11c:	0000f13c 	xorhi	zero,zero,964
    f120:	0000f458 	cmpnei	zero,zero,977
    f124:	0000f65c 	xori	zero,zero,985
    f128:	0000f69c 	xori	zero,zero,986
    f12c:	0000f84c 	andi	zero,zero,993
    f130:	0000f65c 	xori	zero,zero,985
    f134:	0000f984 	movi	zero,998
    f138:	0000fab4 	movhi	zero,1002
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
    f13c:	d0a8c103 	ldbu	r2,-23804(gp)
    f140:	10803fcc 	andi	r2,r2,255
    f144:	1080040c 	andi	r2,r2,16
    f148:	1000aa26 	beq	r2,zero,f3f4 <tcp_process+0x49c>
    f14c:	d0a8c103 	ldbu	r2,-23804(gp)
    f150:	10803fcc 	andi	r2,r2,255
    f154:	1080008c 	andi	r2,r2,2
    f158:	1000a626 	beq	r2,zero,f3f4 <tcp_process+0x49c>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
    f15c:	e0bfff17 	ldw	r2,-4(fp)
    f160:	10801d17 	ldw	r2,116(r2)
    f164:	10800317 	ldw	r2,12(r2)
    f168:	10c0010b 	ldhu	r3,4(r2)
    f16c:	1080018b 	ldhu	r2,6(r2)
    f170:	1004943a 	slli	r2,r2,16
    f174:	10c4b03a 	or	r2,r2,r3
    f178:	1006d63a 	srli	r3,r2,24
    f17c:	e0bfff17 	ldw	r2,-4(fp)
    f180:	10801d17 	ldw	r2,116(r2)
    f184:	10800317 	ldw	r2,12(r2)
    f188:	1100010b 	ldhu	r4,4(r2)
    f18c:	1080018b 	ldhu	r2,6(r2)
    f190:	1004943a 	slli	r2,r2,16
    f194:	1104b03a 	or	r2,r2,r4
    f198:	1004d23a 	srli	r2,r2,8
    f19c:	10bfc00c 	andi	r2,r2,65280
    f1a0:	1886b03a 	or	r3,r3,r2
    f1a4:	e0bfff17 	ldw	r2,-4(fp)
    f1a8:	10801d17 	ldw	r2,116(r2)
    f1ac:	10800317 	ldw	r2,12(r2)
    f1b0:	1100010b 	ldhu	r4,4(r2)
    f1b4:	1080018b 	ldhu	r2,6(r2)
    f1b8:	1004943a 	slli	r2,r2,16
    f1bc:	1104b03a 	or	r2,r2,r4
    f1c0:	10bfc00c 	andi	r2,r2,65280
    f1c4:	1004923a 	slli	r2,r2,8
    f1c8:	1886b03a 	or	r3,r3,r2
    f1cc:	e0bfff17 	ldw	r2,-4(fp)
    f1d0:	10801d17 	ldw	r2,116(r2)
    f1d4:	10800317 	ldw	r2,12(r2)
    f1d8:	1100010b 	ldhu	r4,4(r2)
    f1dc:	1080018b 	ldhu	r2,6(r2)
    f1e0:	1004943a 	slli	r2,r2,16
    f1e4:	1104b03a 	or	r2,r2,r4
    f1e8:	1004963a 	slli	r2,r2,24
    f1ec:	1884b03a 	or	r2,r3,r2
    f1f0:	10c00044 	addi	r3,r2,1
    f1f4:	d0a8c017 	ldw	r2,-23808(gp)
    f1f8:	18807e1e 	bne	r3,r2,f3f4 <tcp_process+0x49c>
      pcb->snd_buf++;
    f1fc:	e0bfff17 	ldw	r2,-4(fp)
    f200:	10801a8b 	ldhu	r2,106(r2)
    f204:	10800044 	addi	r2,r2,1
    f208:	1007883a 	mov	r3,r2
    f20c:	e0bfff17 	ldw	r2,-4(fp)
    f210:	10c01a8d 	sth	r3,106(r2)
      pcb->rcv_nxt = seqno + 1;
    f214:	d0a8bf17 	ldw	r2,-23812(gp)
    f218:	10c00044 	addi	r3,r2,1
    f21c:	e0bfff17 	ldw	r2,-4(fp)
    f220:	10c00b15 	stw	r3,44(r2)
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    f224:	e0bfff17 	ldw	r2,-4(fp)
    f228:	10c00b17 	ldw	r3,44(r2)
    f22c:	e0bfff17 	ldw	r2,-4(fp)
    f230:	10c00d15 	stw	r3,52(r2)
      pcb->lastack = ackno;
    f234:	d0e8c017 	ldw	r3,-23808(gp)
    f238:	e0bfff17 	ldw	r2,-4(fp)
    f23c:	10c01315 	stw	r3,76(r2)
      pcb->snd_wnd = tcphdr->wnd;
    f240:	d0a8bd17 	ldw	r2,-23820(gp)
    f244:	10c0038b 	ldhu	r3,14(r2)
    f248:	e0bfff17 	ldw	r2,-4(fp)
    f24c:	10c0190d 	sth	r3,100(r2)
      pcb->snd_wnd_max = tcphdr->wnd;
    f250:	d0a8bd17 	ldw	r2,-23820(gp)
    f254:	10c0038b 	ldhu	r3,14(r2)
    f258:	e0bfff17 	ldw	r2,-4(fp)
    f25c:	10c0198d 	sth	r3,102(r2)
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
    f260:	d0a8bf17 	ldw	r2,-23812(gp)
    f264:	10ffffc4 	addi	r3,r2,-1
    f268:	e0bfff17 	ldw	r2,-4(fp)
    f26c:	10c01615 	stw	r3,88(r2)
      pcb->state = ESTABLISHED;
    f270:	e0bfff17 	ldw	r2,-4(fp)
    f274:	00c00104 	movi	r3,4
    f278:	10c00615 	stw	r3,24(r2)

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
    f27c:	e0bfff17 	ldw	r2,-4(fp)
    f280:	10800e8b 	ldhu	r2,58(r2)
    f284:	10ffffcc 	andi	r3,r2,65535
    f288:	e0bfff17 	ldw	r2,-4(fp)
    f28c:	10800104 	addi	r2,r2,4
    f290:	1809883a 	mov	r4,r3
    f294:	100b883a 	mov	r5,r2
    f298:	000ddb80 	call	ddb8 <tcp_eff_send_mss>
    f29c:	e0ffff17 	ldw	r3,-4(fp)
    f2a0:	18800e8d 	sth	r2,58(r3)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
    f2a4:	e0bfff17 	ldw	r2,-4(fp)
    f2a8:	10800e8b 	ldhu	r2,58(r2)
    f2ac:	108002a4 	muli	r2,r2,10
    f2b0:	1007883a 	mov	r3,r2
    f2b4:	e0bfff17 	ldw	r2,-4(fp)
    f2b8:	10c0148d 	sth	r3,82(r2)

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    f2bc:	e0bfff17 	ldw	r2,-4(fp)
    f2c0:	1080140b 	ldhu	r2,80(r2)
    f2c4:	10bfffcc 	andi	r2,r2,65535
    f2c8:	10800058 	cmpnei	r2,r2,1
    f2cc:	1000041e 	bne	r2,zero,f2e0 <tcp_process+0x388>
    f2d0:	e0bfff17 	ldw	r2,-4(fp)
    f2d4:	10800e8b 	ldhu	r2,58(r2)
    f2d8:	1085883a 	add	r2,r2,r2
    f2dc:	00000206 	br	f2e8 <tcp_process+0x390>
    f2e0:	e0bfff17 	ldw	r2,-4(fp)
    f2e4:	10800e8b 	ldhu	r2,58(r2)
    f2e8:	e0ffff17 	ldw	r3,-4(fp)
    f2ec:	1880140d 	sth	r2,80(r3)
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
    f2f0:	e0bfff17 	ldw	r2,-4(fp)
    f2f4:	10801b0b 	ldhu	r2,108(r2)
    f2f8:	10bfffcc 	andi	r2,r2,65535
    f2fc:	1000091e 	bne	r2,zero,f324 <tcp_process+0x3cc>
    f300:	010000f4 	movhi	r4,3
    f304:	213fb204 	addi	r4,r4,-312
    f308:	014000f4 	movhi	r5,3
    f30c:	29401204 	addi	r5,r5,72
    f310:	0180a304 	movi	r6,652
    f314:	01c000f4 	movhi	r7,3
    f318:	39ffc604 	addi	r7,r7,-232
    f31c:	0017c440 	call	17c44 <printf>
    f320:	003fff06 	br	f320 <tcp_process+0x3c8>
      --pcb->snd_queuelen;
    f324:	e0bfff17 	ldw	r2,-4(fp)
    f328:	10801b0b 	ldhu	r2,108(r2)
    f32c:	10bfffc4 	addi	r2,r2,-1
    f330:	1007883a 	mov	r3,r2
    f334:	e0bfff17 	ldw	r2,-4(fp)
    f338:	10c01b0d 	sth	r3,108(r2)
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
    f33c:	e0bfff17 	ldw	r2,-4(fp)
    f340:	10801d17 	ldw	r2,116(r2)
    f344:	e0bffd15 	stw	r2,-12(fp)
      pcb->unacked = rseg->next;
    f348:	e0bffd17 	ldw	r2,-12(fp)
    f34c:	10c00017 	ldw	r3,0(r2)
    f350:	e0bfff17 	ldw	r2,-4(fp)
    f354:	10c01d15 	stw	r3,116(r2)
      tcp_seg_free(rseg);
    f358:	e13ffd17 	ldw	r4,-12(fp)
    f35c:	000d3f40 	call	d3f4 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
    f360:	e0bfff17 	ldw	r2,-4(fp)
    f364:	10801d17 	ldw	r2,116(r2)
    f368:	1000041e 	bne	r2,zero,f37c <tcp_process+0x424>
        pcb->rtime = -1;
    f36c:	e0bfff17 	ldw	r2,-4(fp)
    f370:	00ffffc4 	movi	r3,-1
    f374:	10c00e0d 	sth	r3,56(r2)
    f378:	00000406 	br	f38c <tcp_process+0x434>
      else {
        pcb->rtime = 0;
    f37c:	e0bfff17 	ldw	r2,-4(fp)
    f380:	10000e0d 	sth	zero,56(r2)
        pcb->nrtx = 0;
    f384:	e0bfff17 	ldw	r2,-4(fp)
    f388:	10001285 	stb	zero,74(r2)
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    f38c:	e0bfff17 	ldw	r2,-4(fp)
    f390:	10802217 	ldw	r2,136(r2)
    f394:	10000a26 	beq	r2,zero,f3c0 <tcp_process+0x468>
    f398:	e0bfff17 	ldw	r2,-4(fp)
    f39c:	10c02217 	ldw	r3,136(r2)
    f3a0:	e0bfff17 	ldw	r2,-4(fp)
    f3a4:	10800417 	ldw	r2,16(r2)
    f3a8:	1009883a 	mov	r4,r2
    f3ac:	e17fff17 	ldw	r5,-4(fp)
    f3b0:	000d883a 	mov	r6,zero
    f3b4:	183ee83a 	callr	r3
    f3b8:	e0bffc45 	stb	r2,-15(fp)
    f3bc:	00000106 	br	f3c4 <tcp_process+0x46c>
    f3c0:	e03ffc45 	stb	zero,-15(fp)
      if (err == ERR_ABRT) {
    f3c4:	e0bffc47 	ldb	r2,-15(fp)
    f3c8:	10bffd98 	cmpnei	r2,r2,-10
    f3cc:	1000021e 	bne	r2,zero,f3d8 <tcp_process+0x480>
        return ERR_ABRT;
    f3d0:	00bffd84 	movi	r2,-10
    f3d4:	0001d506 	br	fb2c <tcp_process+0xbd4>
      }
      tcp_ack_now(pcb);
    f3d8:	e0bfff17 	ldw	r2,-4(fp)
    f3dc:	10800883 	ldbu	r2,34(r2)
    f3e0:	10800094 	ori	r2,r2,2
    f3e4:	1007883a 	mov	r3,r2
    f3e8:	e0bfff17 	ldw	r2,-4(fp)
    f3ec:	10c00885 	stb	r3,34(r2)
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
    f3f0:	0001c006 	br	faf4 <tcp_process+0xb9c>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
    f3f4:	d0a8c103 	ldbu	r2,-23804(gp)
    f3f8:	10803fcc 	andi	r2,r2,255
    f3fc:	1080040c 	andi	r2,r2,16
    f400:	1001bc26 	beq	r2,zero,faf4 <tcp_process+0xb9c>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    f404:	d0e8c017 	ldw	r3,-23808(gp)
    f408:	d0a8c18b 	ldhu	r2,-23802(gp)
    f40c:	113fffcc 	andi	r4,r2,65535
    f410:	d0a8bf17 	ldw	r2,-23812(gp)
    f414:	2085883a 	add	r2,r4,r2
        tcphdr->dest, tcphdr->src);
    f418:	d128bd17 	ldw	r4,-23820(gp)
    f41c:	2100008b 	ldhu	r4,2(r4)
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    f420:	217fffcc 	andi	r5,r4,65535
        tcphdr->dest, tcphdr->src);
    f424:	d128bd17 	ldw	r4,-23820(gp)
    f428:	2100000b 	ldhu	r4,0(r4)
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    f42c:	213fffcc 	andi	r4,r4,65535
    f430:	d9400015 	stw	r5,0(sp)
    f434:	d9000115 	stw	r4,4(sp)
    f438:	1809883a 	mov	r4,r3
    f43c:	100b883a 	mov	r5,r2
    f440:	018000f4 	movhi	r6,3
    f444:	319bd204 	addi	r6,r6,28488
    f448:	01c000f4 	movhi	r7,3
    f44c:	39dbd004 	addi	r7,r7,28480
    f450:	00140540 	call	14054 <tcp_rst>
        tcphdr->dest, tcphdr->src);
    }
    break;
    f454:	0001a706 	br	faf4 <tcp_process+0xb9c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
    f458:	d0a8c103 	ldbu	r2,-23804(gp)
    f45c:	10803fcc 	andi	r2,r2,255
    f460:	1080040c 	andi	r2,r2,16
    f464:	10007126 	beq	r2,zero,f62c <tcp_process+0x6d4>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
    f468:	e0bfff17 	ldw	r2,-4(fp)
    f46c:	10801317 	ldw	r2,76(r2)
    f470:	0086303a 	nor	r3,zero,r2
    f474:	d0a8c017 	ldw	r2,-23808(gp)
    f478:	1885883a 	add	r2,r3,r2
    f47c:	10005416 	blt	r2,zero,f5d0 <tcp_process+0x678>
    f480:	d0e8c017 	ldw	r3,-23808(gp)
    f484:	e0bfff17 	ldw	r2,-4(fp)
    f488:	10801517 	ldw	r2,84(r2)
    f48c:	1885c83a 	sub	r2,r3,r2
    f490:	00804f16 	blt	zero,r2,f5d0 <tcp_process+0x678>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
    f494:	e0bfff17 	ldw	r2,-4(fp)
    f498:	00c00104 	movi	r3,4
    f49c:	10c00615 	stw	r3,24(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
    f4a0:	e0bfff17 	ldw	r2,-4(fp)
    f4a4:	10800517 	ldw	r2,20(r2)
    f4a8:	1000091e 	bne	r2,zero,f4d0 <tcp_process+0x578>
    f4ac:	010000f4 	movhi	r4,3
    f4b0:	213fb204 	addi	r4,r4,-312
    f4b4:	014000f4 	movhi	r5,3
    f4b8:	29401804 	addi	r5,r5,96
    f4bc:	0180acc4 	movi	r6,691
    f4c0:	01c000f4 	movhi	r7,3
    f4c4:	39ffc604 	addi	r7,r7,-232
    f4c8:	0017c440 	call	17c44 <printf>
    f4cc:	003fff06 	br	f4cc <tcp_process+0x574>
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
    f4d0:	e0bfff17 	ldw	r2,-4(fp)
    f4d4:	10800517 	ldw	r2,20(r2)
    f4d8:	10000a26 	beq	r2,zero,f504 <tcp_process+0x5ac>
    f4dc:	e0bfff17 	ldw	r2,-4(fp)
    f4e0:	10c00517 	ldw	r3,20(r2)
    f4e4:	e0bfff17 	ldw	r2,-4(fp)
    f4e8:	10800417 	ldw	r2,16(r2)
    f4ec:	1009883a 	mov	r4,r2
    f4f0:	e17fff17 	ldw	r5,-4(fp)
    f4f4:	000d883a 	mov	r6,zero
    f4f8:	183ee83a 	callr	r3
    f4fc:	e0bffc45 	stb	r2,-15(fp)
    f500:	00000206 	br	f50c <tcp_process+0x5b4>
    f504:	00bffc84 	movi	r2,-14
    f508:	e0bffc45 	stb	r2,-15(fp)
        if (err != ERR_OK) {
    f50c:	e0bffc47 	ldb	r2,-15(fp)
    f510:	10000726 	beq	r2,zero,f530 <tcp_process+0x5d8>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
    f514:	e0bffc47 	ldb	r2,-15(fp)
    f518:	10bffda0 	cmpeqi	r2,r2,-10
    f51c:	1000021e 	bne	r2,zero,f528 <tcp_process+0x5d0>
            tcp_abort(pcb);
    f520:	e13fff17 	ldw	r4,-4(fp)
    f524:	000bf140 	call	bf14 <tcp_abort>
          }
          return ERR_ABRT;
    f528:	00bffd84 	movi	r2,-10
    f52c:	00017f06 	br	fb2c <tcp_process+0xbd4>
        }
        old_cwnd = pcb->cwnd;
    f530:	e0bfff17 	ldw	r2,-4(fp)
    f534:	1080140b 	ldhu	r2,80(r2)
    f538:	e0bffe0d 	sth	r2,-8(fp)
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
    f53c:	e13fff17 	ldw	r4,-4(fp)
    f540:	000fd140 	call	fd14 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
    f544:	e0bfff17 	ldw	r2,-4(fp)
    f548:	10801a0b 	ldhu	r2,104(r2)
    f54c:	10bfffcc 	andi	r2,r2,65535
    f550:	10000626 	beq	r2,zero,f56c <tcp_process+0x614>
          pcb->acked--;
    f554:	e0bfff17 	ldw	r2,-4(fp)
    f558:	10801a0b 	ldhu	r2,104(r2)
    f55c:	10bfffc4 	addi	r2,r2,-1
    f560:	1007883a 	mov	r3,r2
    f564:	e0bfff17 	ldw	r2,-4(fp)
    f568:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    f56c:	e0bffe0b 	ldhu	r2,-8(fp)
    f570:	10800058 	cmpnei	r2,r2,1
    f574:	1000041e 	bne	r2,zero,f588 <tcp_process+0x630>
    f578:	e0bfff17 	ldw	r2,-4(fp)
    f57c:	10800e8b 	ldhu	r2,58(r2)
    f580:	1085883a 	add	r2,r2,r2
    f584:	00000206 	br	f590 <tcp_process+0x638>
    f588:	e0bfff17 	ldw	r2,-4(fp)
    f58c:	10800e8b 	ldhu	r2,58(r2)
    f590:	e0ffff17 	ldw	r3,-4(fp)
    f594:	1880140d 	sth	r2,80(r3)

        if (recv_flags & TF_GOT_FIN) {
    f598:	d0a8c203 	ldbu	r2,-23800(gp)
    f59c:	10803fcc 	andi	r2,r2,255
    f5a0:	1080080c 	andi	r2,r2,32
    f5a4:	10001f26 	beq	r2,zero,f624 <tcp_process+0x6cc>
          tcp_ack_now(pcb);
    f5a8:	e0bfff17 	ldw	r2,-4(fp)
    f5ac:	10800883 	ldbu	r2,34(r2)
    f5b0:	10800094 	ori	r2,r2,2
    f5b4:	1007883a 	mov	r3,r2
    f5b8:	e0bfff17 	ldw	r2,-4(fp)
    f5bc:	10c00885 	stb	r3,34(r2)
          pcb->state = CLOSE_WAIT;
    f5c0:	e0bfff17 	ldw	r2,-4(fp)
    f5c4:	00c001c4 	movi	r3,7
    f5c8:	10c00615 	stw	r3,24(r2)
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
    f5cc:	00001506 	br	f624 <tcp_process+0x6cc>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    f5d0:	d0e8c017 	ldw	r3,-23808(gp)
    f5d4:	d0a8c18b 	ldhu	r2,-23802(gp)
    f5d8:	113fffcc 	andi	r4,r2,65535
    f5dc:	d0a8bf17 	ldw	r2,-23812(gp)
    f5e0:	2085883a 	add	r2,r4,r2
                tcphdr->dest, tcphdr->src);
    f5e4:	d128bd17 	ldw	r4,-23820(gp)
    f5e8:	2100008b 	ldhu	r4,2(r4)
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    f5ec:	217fffcc 	andi	r5,r4,65535
                tcphdr->dest, tcphdr->src);
    f5f0:	d128bd17 	ldw	r4,-23820(gp)
    f5f4:	2100000b 	ldhu	r4,0(r4)
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
    f5f8:	213fffcc 	andi	r4,r4,65535
    f5fc:	d9400015 	stw	r5,0(sp)
    f600:	d9000115 	stw	r4,4(sp)
    f604:	1809883a 	mov	r4,r3
    f608:	100b883a 	mov	r5,r2
    f60c:	018000f4 	movhi	r6,3
    f610:	319bd204 	addi	r6,r6,28488
    f614:	01c000f4 	movhi	r7,3
    f618:	39dbd004 	addi	r7,r7,28480
    f61c:	00140540 	call	14054 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
    f620:	00013606 	br	fafc <tcp_process+0xba4>
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
    f624:	0001883a 	nop
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
    f628:	00013406 	br	fafc <tcp_process+0xba4>
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
    f62c:	d0a8c103 	ldbu	r2,-23804(gp)
    f630:	10803fcc 	andi	r2,r2,255
    f634:	1080008c 	andi	r2,r2,2
    f638:	10013026 	beq	r2,zero,fafc <tcp_process+0xba4>
    f63c:	e0bfff17 	ldw	r2,-4(fp)
    f640:	10800b17 	ldw	r2,44(r2)
    f644:	10ffffc4 	addi	r3,r2,-1
    f648:	d0a8bf17 	ldw	r2,-23812(gp)
    f64c:	18812b1e 	bne	r3,r2,fafc <tcp_process+0xba4>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    f650:	e13fff17 	ldw	r4,-4(fp)
    f654:	00143580 	call	14358 <tcp_rexmit>
    }
    break;
    f658:	00012806 	br	fafc <tcp_process+0xba4>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
    f65c:	e13fff17 	ldw	r4,-4(fp)
    f660:	000fd140 	call	fd14 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
    f664:	d0a8c203 	ldbu	r2,-23800(gp)
    f668:	10803fcc 	andi	r2,r2,255
    f66c:	1080080c 	andi	r2,r2,32
    f670:	10012426 	beq	r2,zero,fb04 <tcp_process+0xbac>
      tcp_ack_now(pcb);
    f674:	e0bfff17 	ldw	r2,-4(fp)
    f678:	10800883 	ldbu	r2,34(r2)
    f67c:	10800094 	ori	r2,r2,2
    f680:	1007883a 	mov	r3,r2
    f684:	e0bfff17 	ldw	r2,-4(fp)
    f688:	10c00885 	stb	r3,34(r2)
      pcb->state = CLOSE_WAIT;
    f68c:	e0bfff17 	ldw	r2,-4(fp)
    f690:	00c001c4 	movi	r3,7
    f694:	10c00615 	stw	r3,24(r2)
    }
    break;
    f698:	00011a06 	br	fb04 <tcp_process+0xbac>
  case FIN_WAIT_1:
    tcp_receive(pcb);
    f69c:	e13fff17 	ldw	r4,-4(fp)
    f6a0:	000fd140 	call	fd14 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
    f6a4:	d0a8c203 	ldbu	r2,-23800(gp)
    f6a8:	10803fcc 	andi	r2,r2,255
    f6ac:	1080080c 	andi	r2,r2,32
    f6b0:	10005a26 	beq	r2,zero,f81c <tcp_process+0x8c4>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    f6b4:	d0a8c103 	ldbu	r2,-23804(gp)
    f6b8:	10803fcc 	andi	r2,r2,255
    f6bc:	1080040c 	andi	r2,r2,16
    f6c0:	10004c26 	beq	r2,zero,f7f4 <tcp_process+0x89c>
    f6c4:	e0bfff17 	ldw	r2,-4(fp)
    f6c8:	10c01517 	ldw	r3,84(r2)
    f6cc:	d0a8c017 	ldw	r2,-23808(gp)
    f6d0:	1880481e 	bne	r3,r2,f7f4 <tcp_process+0x89c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
    f6d4:	e0bfff17 	ldw	r2,-4(fp)
    f6d8:	10800883 	ldbu	r2,34(r2)
    f6dc:	10800094 	ori	r2,r2,2
    f6e0:	1007883a 	mov	r3,r2
    f6e4:	e0bfff17 	ldw	r2,-4(fp)
    f6e8:	10c00885 	stb	r3,34(r2)
        tcp_pcb_purge(pcb);
    f6ec:	e13fff17 	ldw	r4,-4(fp)
    f6f0:	000db040 	call	db04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
    f6f4:	008000f4 	movhi	r2,3
    f6f8:	109bdf04 	addi	r2,r2,28540
    f6fc:	10c00017 	ldw	r3,0(r2)
    f700:	e0bfff17 	ldw	r2,-4(fp)
    f704:	1880081e 	bne	r3,r2,f728 <tcp_process+0x7d0>
    f708:	008000f4 	movhi	r2,3
    f70c:	109bdf04 	addi	r2,r2,28540
    f710:	10800017 	ldw	r2,0(r2)
    f714:	10c00317 	ldw	r3,12(r2)
    f718:	008000f4 	movhi	r2,3
    f71c:	109bdf04 	addi	r2,r2,28540
    f720:	10c00015 	stw	r3,0(r2)
    f724:	00001f06 	br	f7a4 <tcp_process+0x84c>
    f728:	008000f4 	movhi	r2,3
    f72c:	109bdf04 	addi	r2,r2,28540
    f730:	10c00017 	ldw	r3,0(r2)
    f734:	008000f4 	movhi	r2,3
    f738:	109be204 	addi	r2,r2,28552
    f73c:	10c00015 	stw	r3,0(r2)
    f740:	00001406 	br	f794 <tcp_process+0x83c>
    f744:	008000f4 	movhi	r2,3
    f748:	109be204 	addi	r2,r2,28552
    f74c:	10800017 	ldw	r2,0(r2)
    f750:	10c00317 	ldw	r3,12(r2)
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	1880071e 	bne	r3,r2,f778 <tcp_process+0x820>
    f75c:	008000f4 	movhi	r2,3
    f760:	109be204 	addi	r2,r2,28552
    f764:	10800017 	ldw	r2,0(r2)
    f768:	e0ffff17 	ldw	r3,-4(fp)
    f76c:	18c00317 	ldw	r3,12(r3)
    f770:	10c00315 	stw	r3,12(r2)
    f774:	00000b06 	br	f7a4 <tcp_process+0x84c>
    f778:	008000f4 	movhi	r2,3
    f77c:	109be204 	addi	r2,r2,28552
    f780:	10800017 	ldw	r2,0(r2)
    f784:	10c00317 	ldw	r3,12(r2)
    f788:	008000f4 	movhi	r2,3
    f78c:	109be204 	addi	r2,r2,28552
    f790:	10c00015 	stw	r3,0(r2)
    f794:	008000f4 	movhi	r2,3
    f798:	109be204 	addi	r2,r2,28552
    f79c:	10800017 	ldw	r2,0(r2)
    f7a0:	103fe81e 	bne	r2,zero,f744 <tcp_process+0x7ec>
    f7a4:	e0bfff17 	ldw	r2,-4(fp)
    f7a8:	10000315 	stw	zero,12(r2)
    f7ac:	008000f4 	movhi	r2,3
    f7b0:	109bde84 	addi	r2,r2,28538
    f7b4:	00c00044 	movi	r3,1
    f7b8:	10c00005 	stb	r3,0(r2)
        pcb->state = TIME_WAIT;
    f7bc:	e0bfff17 	ldw	r2,-4(fp)
    f7c0:	00c00284 	movi	r3,10
    f7c4:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
    f7c8:	008000f4 	movhi	r2,3
    f7cc:	109be404 	addi	r2,r2,28560
    f7d0:	10c00017 	ldw	r3,0(r2)
    f7d4:	e0bfff17 	ldw	r2,-4(fp)
    f7d8:	10c00315 	stw	r3,12(r2)
    f7dc:	008000f4 	movhi	r2,3
    f7e0:	109be404 	addi	r2,r2,28560
    f7e4:	e0ffff17 	ldw	r3,-4(fp)
    f7e8:	10c00015 	stw	r3,0(r2)
    f7ec:	00149c40 	call	149c4 <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
    f7f0:	0000c606 	br	fb0c <tcp_process+0xbb4>
        tcp_pcb_purge(pcb);
        TCP_RMV_ACTIVE(pcb);
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
    f7f4:	e0bfff17 	ldw	r2,-4(fp)
    f7f8:	10800883 	ldbu	r2,34(r2)
    f7fc:	10800094 	ori	r2,r2,2
    f800:	1007883a 	mov	r3,r2
    f804:	e0bfff17 	ldw	r2,-4(fp)
    f808:	10c00885 	stb	r3,34(r2)
        pcb->state = CLOSING;
    f80c:	e0bfff17 	ldw	r2,-4(fp)
    f810:	00c00204 	movi	r3,8
    f814:	10c00615 	stw	r3,24(r2)
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
    f818:	0000bc06 	br	fb0c <tcp_process+0xbb4>
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    f81c:	d0a8c103 	ldbu	r2,-23804(gp)
    f820:	10803fcc 	andi	r2,r2,255
    f824:	1080040c 	andi	r2,r2,16
    f828:	1000b826 	beq	r2,zero,fb0c <tcp_process+0xbb4>
    f82c:	e0bfff17 	ldw	r2,-4(fp)
    f830:	10c01517 	ldw	r3,84(r2)
    f834:	d0a8c017 	ldw	r2,-23808(gp)
    f838:	1880b41e 	bne	r3,r2,fb0c <tcp_process+0xbb4>
      pcb->state = FIN_WAIT_2;
    f83c:	e0bfff17 	ldw	r2,-4(fp)
    f840:	00c00184 	movi	r3,6
    f844:	10c00615 	stw	r3,24(r2)
    }
    break;
    f848:	0000b006 	br	fb0c <tcp_process+0xbb4>
  case FIN_WAIT_2:
    tcp_receive(pcb);
    f84c:	e13fff17 	ldw	r4,-4(fp)
    f850:	000fd140 	call	fd14 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
    f854:	d0a8c203 	ldbu	r2,-23800(gp)
    f858:	10803fcc 	andi	r2,r2,255
    f85c:	1080080c 	andi	r2,r2,32
    f860:	1000ac26 	beq	r2,zero,fb14 <tcp_process+0xbbc>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
    f864:	e0bfff17 	ldw	r2,-4(fp)
    f868:	10800883 	ldbu	r2,34(r2)
    f86c:	10800094 	ori	r2,r2,2
    f870:	1007883a 	mov	r3,r2
    f874:	e0bfff17 	ldw	r2,-4(fp)
    f878:	10c00885 	stb	r3,34(r2)
      tcp_pcb_purge(pcb);
    f87c:	e13fff17 	ldw	r4,-4(fp)
    f880:	000db040 	call	db04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
    f884:	008000f4 	movhi	r2,3
    f888:	109bdf04 	addi	r2,r2,28540
    f88c:	10c00017 	ldw	r3,0(r2)
    f890:	e0bfff17 	ldw	r2,-4(fp)
    f894:	1880081e 	bne	r3,r2,f8b8 <tcp_process+0x960>
    f898:	008000f4 	movhi	r2,3
    f89c:	109bdf04 	addi	r2,r2,28540
    f8a0:	10800017 	ldw	r2,0(r2)
    f8a4:	10c00317 	ldw	r3,12(r2)
    f8a8:	008000f4 	movhi	r2,3
    f8ac:	109bdf04 	addi	r2,r2,28540
    f8b0:	10c00015 	stw	r3,0(r2)
    f8b4:	00001f06 	br	f934 <tcp_process+0x9dc>
    f8b8:	008000f4 	movhi	r2,3
    f8bc:	109bdf04 	addi	r2,r2,28540
    f8c0:	10c00017 	ldw	r3,0(r2)
    f8c4:	008000f4 	movhi	r2,3
    f8c8:	109be204 	addi	r2,r2,28552
    f8cc:	10c00015 	stw	r3,0(r2)
    f8d0:	00001406 	br	f924 <tcp_process+0x9cc>
    f8d4:	008000f4 	movhi	r2,3
    f8d8:	109be204 	addi	r2,r2,28552
    f8dc:	10800017 	ldw	r2,0(r2)
    f8e0:	10c00317 	ldw	r3,12(r2)
    f8e4:	e0bfff17 	ldw	r2,-4(fp)
    f8e8:	1880071e 	bne	r3,r2,f908 <tcp_process+0x9b0>
    f8ec:	008000f4 	movhi	r2,3
    f8f0:	109be204 	addi	r2,r2,28552
    f8f4:	10800017 	ldw	r2,0(r2)
    f8f8:	e0ffff17 	ldw	r3,-4(fp)
    f8fc:	18c00317 	ldw	r3,12(r3)
    f900:	10c00315 	stw	r3,12(r2)
    f904:	00000b06 	br	f934 <tcp_process+0x9dc>
    f908:	008000f4 	movhi	r2,3
    f90c:	109be204 	addi	r2,r2,28552
    f910:	10800017 	ldw	r2,0(r2)
    f914:	10c00317 	ldw	r3,12(r2)
    f918:	008000f4 	movhi	r2,3
    f91c:	109be204 	addi	r2,r2,28552
    f920:	10c00015 	stw	r3,0(r2)
    f924:	008000f4 	movhi	r2,3
    f928:	109be204 	addi	r2,r2,28552
    f92c:	10800017 	ldw	r2,0(r2)
    f930:	103fe81e 	bne	r2,zero,f8d4 <tcp_process+0x97c>
    f934:	e0bfff17 	ldw	r2,-4(fp)
    f938:	10000315 	stw	zero,12(r2)
    f93c:	008000f4 	movhi	r2,3
    f940:	109bde84 	addi	r2,r2,28538
    f944:	00c00044 	movi	r3,1
    f948:	10c00005 	stb	r3,0(r2)
      pcb->state = TIME_WAIT;
    f94c:	e0bfff17 	ldw	r2,-4(fp)
    f950:	00c00284 	movi	r3,10
    f954:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
    f958:	008000f4 	movhi	r2,3
    f95c:	109be404 	addi	r2,r2,28560
    f960:	10c00017 	ldw	r3,0(r2)
    f964:	e0bfff17 	ldw	r2,-4(fp)
    f968:	10c00315 	stw	r3,12(r2)
    f96c:	008000f4 	movhi	r2,3
    f970:	109be404 	addi	r2,r2,28560
    f974:	e0ffff17 	ldw	r3,-4(fp)
    f978:	10c00015 	stw	r3,0(r2)
    f97c:	00149c40 	call	149c4 <tcp_timer_needed>
    }
    break;
    f980:	00006406 	br	fb14 <tcp_process+0xbbc>
  case CLOSING:
    tcp_receive(pcb);
    f984:	e13fff17 	ldw	r4,-4(fp)
    f988:	000fd140 	call	fd14 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    f98c:	d0a8c103 	ldbu	r2,-23804(gp)
    f990:	10803fcc 	andi	r2,r2,255
    f994:	1080040c 	andi	r2,r2,16
    f998:	10006026 	beq	r2,zero,fb1c <tcp_process+0xbc4>
    f99c:	e0bfff17 	ldw	r2,-4(fp)
    f9a0:	10c01517 	ldw	r3,84(r2)
    f9a4:	d0a8c017 	ldw	r2,-23808(gp)
    f9a8:	18805c1e 	bne	r3,r2,fb1c <tcp_process+0xbc4>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
    f9ac:	e13fff17 	ldw	r4,-4(fp)
    f9b0:	000db040 	call	db04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
    f9b4:	008000f4 	movhi	r2,3
    f9b8:	109bdf04 	addi	r2,r2,28540
    f9bc:	10c00017 	ldw	r3,0(r2)
    f9c0:	e0bfff17 	ldw	r2,-4(fp)
    f9c4:	1880081e 	bne	r3,r2,f9e8 <tcp_process+0xa90>
    f9c8:	008000f4 	movhi	r2,3
    f9cc:	109bdf04 	addi	r2,r2,28540
    f9d0:	10800017 	ldw	r2,0(r2)
    f9d4:	10c00317 	ldw	r3,12(r2)
    f9d8:	008000f4 	movhi	r2,3
    f9dc:	109bdf04 	addi	r2,r2,28540
    f9e0:	10c00015 	stw	r3,0(r2)
    f9e4:	00001f06 	br	fa64 <tcp_process+0xb0c>
    f9e8:	008000f4 	movhi	r2,3
    f9ec:	109bdf04 	addi	r2,r2,28540
    f9f0:	10c00017 	ldw	r3,0(r2)
    f9f4:	008000f4 	movhi	r2,3
    f9f8:	109be204 	addi	r2,r2,28552
    f9fc:	10c00015 	stw	r3,0(r2)
    fa00:	00001406 	br	fa54 <tcp_process+0xafc>
    fa04:	008000f4 	movhi	r2,3
    fa08:	109be204 	addi	r2,r2,28552
    fa0c:	10800017 	ldw	r2,0(r2)
    fa10:	10c00317 	ldw	r3,12(r2)
    fa14:	e0bfff17 	ldw	r2,-4(fp)
    fa18:	1880071e 	bne	r3,r2,fa38 <tcp_process+0xae0>
    fa1c:	008000f4 	movhi	r2,3
    fa20:	109be204 	addi	r2,r2,28552
    fa24:	10800017 	ldw	r2,0(r2)
    fa28:	e0ffff17 	ldw	r3,-4(fp)
    fa2c:	18c00317 	ldw	r3,12(r3)
    fa30:	10c00315 	stw	r3,12(r2)
    fa34:	00000b06 	br	fa64 <tcp_process+0xb0c>
    fa38:	008000f4 	movhi	r2,3
    fa3c:	109be204 	addi	r2,r2,28552
    fa40:	10800017 	ldw	r2,0(r2)
    fa44:	10c00317 	ldw	r3,12(r2)
    fa48:	008000f4 	movhi	r2,3
    fa4c:	109be204 	addi	r2,r2,28552
    fa50:	10c00015 	stw	r3,0(r2)
    fa54:	008000f4 	movhi	r2,3
    fa58:	109be204 	addi	r2,r2,28552
    fa5c:	10800017 	ldw	r2,0(r2)
    fa60:	103fe81e 	bne	r2,zero,fa04 <tcp_process+0xaac>
    fa64:	e0bfff17 	ldw	r2,-4(fp)
    fa68:	10000315 	stw	zero,12(r2)
    fa6c:	008000f4 	movhi	r2,3
    fa70:	109bde84 	addi	r2,r2,28538
    fa74:	00c00044 	movi	r3,1
    fa78:	10c00005 	stb	r3,0(r2)
      pcb->state = TIME_WAIT;
    fa7c:	e0bfff17 	ldw	r2,-4(fp)
    fa80:	00c00284 	movi	r3,10
    fa84:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
    fa88:	008000f4 	movhi	r2,3
    fa8c:	109be404 	addi	r2,r2,28560
    fa90:	10c00017 	ldw	r3,0(r2)
    fa94:	e0bfff17 	ldw	r2,-4(fp)
    fa98:	10c00315 	stw	r3,12(r2)
    fa9c:	008000f4 	movhi	r2,3
    faa0:	109be404 	addi	r2,r2,28560
    faa4:	e0ffff17 	ldw	r3,-4(fp)
    faa8:	10c00015 	stw	r3,0(r2)
    faac:	00149c40 	call	149c4 <tcp_timer_needed>
    }
    break;
    fab0:	00001a06 	br	fb1c <tcp_process+0xbc4>
  case LAST_ACK:
    tcp_receive(pcb);
    fab4:	e13fff17 	ldw	r4,-4(fp)
    fab8:	000fd140 	call	fd14 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    fabc:	d0a8c103 	ldbu	r2,-23804(gp)
    fac0:	10803fcc 	andi	r2,r2,255
    fac4:	1080040c 	andi	r2,r2,16
    fac8:	10001626 	beq	r2,zero,fb24 <tcp_process+0xbcc>
    facc:	e0bfff17 	ldw	r2,-4(fp)
    fad0:	10c01517 	ldw	r3,84(r2)
    fad4:	d0a8c017 	ldw	r2,-23808(gp)
    fad8:	1880121e 	bne	r3,r2,fb24 <tcp_process+0xbcc>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    fadc:	d0a8c203 	ldbu	r2,-23800(gp)
    fae0:	10800414 	ori	r2,r2,16
    fae4:	d0a8c205 	stb	r2,-23800(gp)
    }
    break;
    fae8:	00000e06 	br	fb24 <tcp_process+0xbcc>
  default:
    break;
    faec:	0001883a 	nop
    faf0:	00000d06 	br	fb28 <tcp_process+0xbd0>
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
    faf4:	0001883a 	nop
    faf8:	00000b06 	br	fb28 <tcp_process+0xbd0>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
    fafc:	0001883a 	nop
    fb00:	00000906 	br	fb28 <tcp_process+0xbd0>
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) { /* passive close */
      tcp_ack_now(pcb);
      pcb->state = CLOSE_WAIT;
    }
    break;
    fb04:	0001883a 	nop
    fb08:	00000706 	br	fb28 <tcp_process+0xbd0>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
    fb0c:	0001883a 	nop
    fb10:	00000506 	br	fb28 <tcp_process+0xbd0>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
    fb14:	0001883a 	nop
    fb18:	00000306 	br	fb28 <tcp_process+0xbd0>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
    fb1c:	0001883a 	nop
    fb20:	00000106 	br	fb28 <tcp_process+0xbd0>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    }
    break;
    fb24:	0001883a 	nop
  default:
    break;
  }
  return ERR_OK;
    fb28:	0005883a 	mov	r2,zero
}
    fb2c:	e037883a 	mov	sp,fp
    fb30:	dfc00117 	ldw	ra,4(sp)
    fb34:	df000017 	ldw	fp,0(sp)
    fb38:	dec00204 	addi	sp,sp,8
    fb3c:	f800283a 	ret

0000fb40 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
    fb40:	defffb04 	addi	sp,sp,-20
    fb44:	dfc00415 	stw	ra,16(sp)
    fb48:	df000315 	stw	fp,12(sp)
    fb4c:	df000304 	addi	fp,sp,12
    fb50:	e13ffe15 	stw	r4,-8(fp)
    fb54:	e17fff15 	stw	r5,-4(fp)
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    fb58:	e0bffe17 	ldw	r2,-8(fp)
    fb5c:	10800317 	ldw	r2,12(r2)
    fb60:	1080030b 	ldhu	r2,12(r2)
    fb64:	10bfffcc 	andi	r2,r2,65535
    fb68:	1004d23a 	srli	r2,r2,8
    fb6c:	10ffffcc 	andi	r3,r2,65535
    fb70:	e0bffe17 	ldw	r2,-8(fp)
    fb74:	10800317 	ldw	r2,12(r2)
    fb78:	1080030b 	ldhu	r2,12(r2)
    fb7c:	10bfffcc 	andi	r2,r2,65535
    fb80:	1004923a 	slli	r2,r2,8
    fb84:	10bfffcc 	andi	r2,r2,65535
    fb88:	1884b03a 	or	r2,r3,r2
    fb8c:	1080004c 	andi	r2,r2,1
    fb90:	10002126 	beq	r2,zero,fc18 <tcp_oos_insert_segment+0xd8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
    fb94:	e13fff17 	ldw	r4,-4(fp)
    fb98:	000d3a40 	call	d3a4 <tcp_segs_free>
    next = NULL;
    fb9c:	e03fff15 	stw	zero,-4(fp)
    fba0:	00005406 	br	fcf4 <tcp_oos_insert_segment+0x1b4>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	10800317 	ldw	r2,12(r2)
    fbac:	1080030b 	ldhu	r2,12(r2)
    fbb0:	10bfffcc 	andi	r2,r2,65535
    fbb4:	1004d23a 	srli	r2,r2,8
    fbb8:	10ffffcc 	andi	r3,r2,65535
    fbbc:	e0bfff17 	ldw	r2,-4(fp)
    fbc0:	10800317 	ldw	r2,12(r2)
    fbc4:	1080030b 	ldhu	r2,12(r2)
    fbc8:	10bfffcc 	andi	r2,r2,65535
    fbcc:	1004923a 	slli	r2,r2,8
    fbd0:	10bfffcc 	andi	r2,r2,65535
    fbd4:	1884b03a 	or	r2,r3,r2
    fbd8:	1080004c 	andi	r2,r2,1
    fbdc:	10000726 	beq	r2,zero,fbfc <tcp_oos_insert_segment+0xbc>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
    fbe0:	e0bffe17 	ldw	r2,-8(fp)
    fbe4:	10800317 	ldw	r2,12(r2)
    fbe8:	e0fffe17 	ldw	r3,-8(fp)
    fbec:	18c00317 	ldw	r3,12(r3)
    fbf0:	18c0030b 	ldhu	r3,12(r3)
    fbf4:	18c04014 	ori	r3,r3,256
    fbf8:	10c0030d 	sth	r3,12(r2)
      }
      old_seg = next;
    fbfc:	e0bfff17 	ldw	r2,-4(fp)
    fc00:	e0bffd15 	stw	r2,-12(fp)
      next = next->next;
    fc04:	e0bfff17 	ldw	r2,-4(fp)
    fc08:	10800017 	ldw	r2,0(r2)
    fc0c:	e0bfff15 	stw	r2,-4(fp)
      tcp_seg_free(old_seg);
    fc10:	e13ffd17 	ldw	r4,-12(fp)
    fc14:	000d3f40 	call	d3f4 <tcp_seg_free>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
    fc18:	e0bfff17 	ldw	r2,-4(fp)
    fc1c:	10001226 	beq	r2,zero,fc68 <tcp_oos_insert_segment+0x128>
           TCP_SEQ_GEQ((seqno + cseg->len),
    fc20:	e0bffe17 	ldw	r2,-8(fp)
    fc24:	1080020b 	ldhu	r2,8(r2)
    fc28:	10ffffcc 	andi	r3,r2,65535
    fc2c:	d0a8bf17 	ldw	r2,-23812(gp)
    fc30:	1887883a 	add	r3,r3,r2
    fc34:	e0bfff17 	ldw	r2,-4(fp)
    fc38:	10800317 	ldw	r2,12(r2)
    fc3c:	1100010b 	ldhu	r4,4(r2)
    fc40:	1080018b 	ldhu	r2,6(r2)
    fc44:	1004943a 	slli	r2,r2,16
    fc48:	1104b03a 	or	r2,r2,r4
    fc4c:	1009883a 	mov	r4,r2
    fc50:	e0bfff17 	ldw	r2,-4(fp)
    fc54:	1080020b 	ldhu	r2,8(r2)
    fc58:	10bfffcc 	andi	r2,r2,65535
    fc5c:	2085883a 	add	r2,r4,r2
    fc60:	1885c83a 	sub	r2,r3,r2
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
    fc64:	103fcf0e 	bge	r2,zero,fba4 <tcp_oos_insert_segment+0x64>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
    fc68:	e0bfff17 	ldw	r2,-4(fp)
    fc6c:	10002126 	beq	r2,zero,fcf4 <tcp_oos_insert_segment+0x1b4>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
    fc70:	e0bffe17 	ldw	r2,-8(fp)
    fc74:	1080020b 	ldhu	r2,8(r2)
    fc78:	10ffffcc 	andi	r3,r2,65535
    fc7c:	d0a8bf17 	ldw	r2,-23812(gp)
    fc80:	1887883a 	add	r3,r3,r2
    fc84:	e0bfff17 	ldw	r2,-4(fp)
    fc88:	10800317 	ldw	r2,12(r2)
    fc8c:	1100010b 	ldhu	r4,4(r2)
    fc90:	1080018b 	ldhu	r2,6(r2)
    fc94:	1004943a 	slli	r2,r2,16
    fc98:	1104b03a 	or	r2,r2,r4
    fc9c:	1885c83a 	sub	r2,r3,r2
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
    fca0:	0080140e 	bge	zero,r2,fcf4 <tcp_oos_insert_segment+0x1b4>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
    fca4:	e0bfff17 	ldw	r2,-4(fp)
    fca8:	10800317 	ldw	r2,12(r2)
    fcac:	10c0010b 	ldhu	r3,4(r2)
    fcb0:	1080018b 	ldhu	r2,6(r2)
    fcb4:	1004943a 	slli	r2,r2,16
    fcb8:	10c4b03a 	or	r2,r2,r3
    fcbc:	1007883a 	mov	r3,r2
    fcc0:	d0a8bf17 	ldw	r2,-23812(gp)
    fcc4:	1885c83a 	sub	r2,r3,r2
    fcc8:	1007883a 	mov	r3,r2
    fccc:	e0bffe17 	ldw	r2,-8(fp)
    fcd0:	10c0020d 	sth	r3,8(r2)
      pbuf_realloc(cseg->p, cseg->len);
    fcd4:	e0bffe17 	ldw	r2,-8(fp)
    fcd8:	10c00117 	ldw	r3,4(r2)
    fcdc:	e0bffe17 	ldw	r2,-8(fp)
    fce0:	1080020b 	ldhu	r2,8(r2)
    fce4:	10bfffcc 	andi	r2,r2,65535
    fce8:	1809883a 	mov	r4,r3
    fcec:	100b883a 	mov	r5,r2
    fcf0:	0009fa40 	call	9fa4 <pbuf_realloc>
    }
  }
  cseg->next = next;
    fcf4:	e0bffe17 	ldw	r2,-8(fp)
    fcf8:	e0ffff17 	ldw	r3,-4(fp)
    fcfc:	10c00015 	stw	r3,0(r2)
}
    fd00:	e037883a 	mov	sp,fp
    fd04:	dfc00117 	ldw	ra,4(sp)
    fd08:	df000017 	ldw	fp,0(sp)
    fd0c:	dec00204 	addi	sp,sp,8
    fd10:	f800283a 	ret

0000fd14 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
    fd14:	defff204 	addi	sp,sp,-56
    fd18:	dfc00d15 	stw	ra,52(sp)
    fd1c:	df000c15 	stw	fp,48(sp)
    fd20:	dc000b15 	stw	r16,44(sp)
    fd24:	df000b04 	addi	fp,sp,44
    fd28:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
    fd2c:	e03ffa15 	stw	zero,-24(fp)
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
    fd30:	e0bfff17 	ldw	r2,-4(fp)
    fd34:	10800617 	ldw	r2,24(r2)
    fd38:	10800128 	cmpgeui	r2,r2,4
    fd3c:	1000091e 	bne	r2,zero,fd64 <tcp_receive+0x50>
    fd40:	010000f4 	movhi	r4,3
    fd44:	213fb204 	addi	r4,r4,-312
    fd48:	014000f4 	movhi	r5,3
    fd4c:	29401d04 	addi	r5,r5,116
    fd50:	0180d804 	movi	r6,864
    fd54:	01c000f4 	movhi	r7,3
    fd58:	39ffc604 	addi	r7,r7,-232
    fd5c:	0017c440 	call	17c44 <printf>
    fd60:	003fff06 	br	fd60 <tcp_receive+0x4c>

  if (flags & TCP_ACK) {
    fd64:	d0a8c103 	ldbu	r2,-23804(gp)
    fd68:	10803fcc 	andi	r2,r2,255
    fd6c:	1080040c 	andi	r2,r2,16
    fd70:	10029d26 	beq	r2,zero,107e8 <tcp_receive+0xad4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
    fd74:	e0bfff17 	ldw	r2,-4(fp)
    fd78:	1080190b 	ldhu	r2,100(r2)
    fd7c:	10ffffcc 	andi	r3,r2,65535
    fd80:	e0bfff17 	ldw	r2,-4(fp)
    fd84:	10801717 	ldw	r2,92(r2)
    fd88:	1885883a 	add	r2,r3,r2
    fd8c:	e0bffb15 	stw	r2,-20(fp)

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
    fd90:	e0bfff17 	ldw	r2,-4(fp)
    fd94:	10c01617 	ldw	r3,88(r2)
    fd98:	d0a8bf17 	ldw	r2,-23812(gp)
    fd9c:	1885c83a 	sub	r2,r3,r2
    fda0:	10001416 	blt	r2,zero,fdf4 <tcp_receive+0xe0>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    fda4:	e0bfff17 	ldw	r2,-4(fp)
    fda8:	10c01617 	ldw	r3,88(r2)
    fdac:	d0a8bf17 	ldw	r2,-23812(gp)

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
    fdb0:	1880051e 	bne	r3,r2,fdc8 <tcp_receive+0xb4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    fdb4:	e0bfff17 	ldw	r2,-4(fp)
    fdb8:	10c01717 	ldw	r3,92(r2)
    fdbc:	d0a8c017 	ldw	r2,-23808(gp)
    fdc0:	1885c83a 	sub	r2,r3,r2
    fdc4:	10000b16 	blt	r2,zero,fdf4 <tcp_receive+0xe0>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    fdc8:	e0bfff17 	ldw	r2,-4(fp)
    fdcc:	10c01717 	ldw	r3,92(r2)
    fdd0:	d0a8c017 	ldw	r2,-23808(gp)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
    fdd4:	1880301e 	bne	r3,r2,fe98 <tcp_receive+0x184>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    fdd8:	d0a8bd17 	ldw	r2,-23820(gp)
    fddc:	1080038b 	ldhu	r2,14(r2)
    fde0:	e0ffff17 	ldw	r3,-4(fp)
    fde4:	18c0190b 	ldhu	r3,100(r3)
    fde8:	10bfffcc 	andi	r2,r2,65535
    fdec:	18ffffcc 	andi	r3,r3,65535
    fdf0:	1880292e 	bgeu	r3,r2,fe98 <tcp_receive+0x184>
      pcb->snd_wnd = tcphdr->wnd;
    fdf4:	d0a8bd17 	ldw	r2,-23820(gp)
    fdf8:	10c0038b 	ldhu	r3,14(r2)
    fdfc:	e0bfff17 	ldw	r2,-4(fp)
    fe00:	10c0190d 	sth	r3,100(r2)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
    fe04:	e0bfff17 	ldw	r2,-4(fp)
    fe08:	10c0198b 	ldhu	r3,102(r2)
    fe0c:	d0a8bd17 	ldw	r2,-23820(gp)
    fe10:	1080038b 	ldhu	r2,14(r2)
    fe14:	18ffffcc 	andi	r3,r3,65535
    fe18:	10bfffcc 	andi	r2,r2,65535
    fe1c:	1880042e 	bgeu	r3,r2,fe30 <tcp_receive+0x11c>
        pcb->snd_wnd_max = tcphdr->wnd;
    fe20:	d0a8bd17 	ldw	r2,-23820(gp)
    fe24:	10c0038b 	ldhu	r3,14(r2)
    fe28:	e0bfff17 	ldw	r2,-4(fp)
    fe2c:	10c0198d 	sth	r3,102(r2)
      }
      pcb->snd_wl1 = seqno;
    fe30:	d0e8bf17 	ldw	r3,-23812(gp)
    fe34:	e0bfff17 	ldw	r2,-4(fp)
    fe38:	10c01615 	stw	r3,88(r2)
      pcb->snd_wl2 = ackno;
    fe3c:	d0e8c017 	ldw	r3,-23808(gp)
    fe40:	e0bfff17 	ldw	r2,-4(fp)
    fe44:	10c01715 	stw	r3,92(r2)
      if (pcb->snd_wnd == 0) {
    fe48:	e0bfff17 	ldw	r2,-4(fp)
    fe4c:	1080190b 	ldhu	r2,100(r2)
    fe50:	10bfffcc 	andi	r2,r2,65535
    fe54:	10000a1e 	bne	r2,zero,fe80 <tcp_receive+0x16c>
        if (pcb->persist_backoff == 0) {
    fe58:	e0bfff17 	ldw	r2,-4(fp)
    fe5c:	10802643 	ldbu	r2,153(r2)
    fe60:	10803fcc 	andi	r2,r2,255
    fe64:	10000c1e 	bne	r2,zero,fe98 <tcp_receive+0x184>
          /* start persist timer */
          pcb->persist_cnt = 0;
    fe68:	e0bfff17 	ldw	r2,-4(fp)
    fe6c:	10002605 	stb	zero,152(r2)
          pcb->persist_backoff = 1;
    fe70:	e0bfff17 	ldw	r2,-4(fp)
    fe74:	00c00044 	movi	r3,1
    fe78:	10c02645 	stb	r3,153(r2)
    fe7c:	00000606 	br	fe98 <tcp_receive+0x184>
        }
      } else if (pcb->persist_backoff > 0) {
    fe80:	e0bfff17 	ldw	r2,-4(fp)
    fe84:	10802643 	ldbu	r2,153(r2)
    fe88:	10803fcc 	andi	r2,r2,255
    fe8c:	10000226 	beq	r2,zero,fe98 <tcp_receive+0x184>
        /* stop persist timer */
          pcb->persist_backoff = 0;
    fe90:	e0bfff17 	ldw	r2,-4(fp)
    fe94:	10002645 	stb	zero,153(r2)
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
    fe98:	d0e8c017 	ldw	r3,-23808(gp)
    fe9c:	e0bfff17 	ldw	r2,-4(fp)
    fea0:	10801317 	ldw	r2,76(r2)
    fea4:	1885c83a 	sub	r2,r3,r2
    fea8:	00804b16 	blt	zero,r2,ffd8 <tcp_receive+0x2c4>
      pcb->acked = 0;
    feac:	e0bfff17 	ldw	r2,-4(fp)
    feb0:	10001a0d 	sth	zero,104(r2)
      /* Clause 2 */
      if (tcplen == 0) {
    feb4:	d0a8c18b 	ldhu	r2,-23802(gp)
    feb8:	10bfffcc 	andi	r2,r2,65535
    febc:	1000411e 	bne	r2,zero,ffc4 <tcp_receive+0x2b0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
    fec0:	e0bfff17 	ldw	r2,-4(fp)
    fec4:	10c01717 	ldw	r3,92(r2)
    fec8:	e0bfff17 	ldw	r2,-4(fp)
    fecc:	1080190b 	ldhu	r2,100(r2)
    fed0:	10bfffcc 	andi	r2,r2,65535
    fed4:	1887883a 	add	r3,r3,r2
    fed8:	e0bffb17 	ldw	r2,-20(fp)
    fedc:	1880391e 	bne	r3,r2,ffc4 <tcp_receive+0x2b0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
    fee0:	e0bfff17 	ldw	r2,-4(fp)
    fee4:	10800e0b 	ldhu	r2,56(r2)
    fee8:	10bfffcc 	andi	r2,r2,65535
    feec:	10a0001c 	xori	r2,r2,32768
    fef0:	10a00004 	addi	r2,r2,-32768
    fef4:	10003316 	blt	r2,zero,ffc4 <tcp_receive+0x2b0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
    fef8:	e0bfff17 	ldw	r2,-4(fp)
    fefc:	10c01317 	ldw	r3,76(r2)
    ff00:	d0a8c017 	ldw	r2,-23808(gp)
    ff04:	18802f1e 	bne	r3,r2,ffc4 <tcp_receive+0x2b0>
              found_dupack = 1;
    ff08:	00800044 	movi	r2,1
    ff0c:	e0bffa15 	stw	r2,-24(fp)
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
    ff10:	e0bfff17 	ldw	r2,-4(fp)
    ff14:	108012c3 	ldbu	r2,75(r2)
    ff18:	10800044 	addi	r2,r2,1
    ff1c:	e0ffff17 	ldw	r3,-4(fp)
    ff20:	18c012c3 	ldbu	r3,75(r3)
    ff24:	10803fcc 	andi	r2,r2,255
    ff28:	18c03fcc 	andi	r3,r3,255
    ff2c:	1880062e 	bgeu	r3,r2,ff48 <tcp_receive+0x234>
                ++pcb->dupacks;
    ff30:	e0bfff17 	ldw	r2,-4(fp)
    ff34:	108012c3 	ldbu	r2,75(r2)
    ff38:	10800044 	addi	r2,r2,1
    ff3c:	1007883a 	mov	r3,r2
    ff40:	e0bfff17 	ldw	r2,-4(fp)
    ff44:	10c012c5 	stb	r3,75(r2)
              }
              if (pcb->dupacks > 3) {
    ff48:	e0bfff17 	ldw	r2,-4(fp)
    ff4c:	108012c3 	ldbu	r2,75(r2)
    ff50:	10803fcc 	andi	r2,r2,255
    ff54:	10800130 	cmpltui	r2,r2,4
    ff58:	1000131e 	bne	r2,zero,ffa8 <tcp_receive+0x294>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    ff5c:	e0bfff17 	ldw	r2,-4(fp)
    ff60:	10c0140b 	ldhu	r3,80(r2)
    ff64:	e0bfff17 	ldw	r2,-4(fp)
    ff68:	10800e8b 	ldhu	r2,58(r2)
    ff6c:	1885883a 	add	r2,r3,r2
    ff70:	e0ffff17 	ldw	r3,-4(fp)
    ff74:	18c0140b 	ldhu	r3,80(r3)
    ff78:	10bfffcc 	andi	r2,r2,65535
    ff7c:	18ffffcc 	andi	r3,r3,65535
    ff80:	1880102e 	bgeu	r3,r2,ffc4 <tcp_receive+0x2b0>
                  pcb->cwnd += pcb->mss;
    ff84:	e0bfff17 	ldw	r2,-4(fp)
    ff88:	10c0140b 	ldhu	r3,80(r2)
    ff8c:	e0bfff17 	ldw	r2,-4(fp)
    ff90:	10800e8b 	ldhu	r2,58(r2)
    ff94:	1885883a 	add	r2,r3,r2
    ff98:	1007883a 	mov	r3,r2
    ff9c:	e0bfff17 	ldw	r2,-4(fp)
    ffa0:	10c0140d 	sth	r3,80(r2)
    ffa4:	00000706 	br	ffc4 <tcp_receive+0x2b0>
                }
              } else if (pcb->dupacks == 3) {
    ffa8:	e0bfff17 	ldw	r2,-4(fp)
    ffac:	108012c3 	ldbu	r2,75(r2)
    ffb0:	10803fcc 	andi	r2,r2,255
    ffb4:	108000d8 	cmpnei	r2,r2,3
    ffb8:	1000021e 	bne	r2,zero,ffc4 <tcp_receive+0x2b0>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
    ffbc:	e13fff17 	ldw	r4,-4(fp)
    ffc0:	00145400 	call	14540 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
    ffc4:	e0bffa17 	ldw	r2,-24(fp)
    ffc8:	1001781e 	bne	r2,zero,105ac <tcp_receive+0x898>
        pcb->dupacks = 0;
    ffcc:	e0bfff17 	ldw	r2,-4(fp)
    ffd0:	100012c5 	stb	zero,75(r2)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
    ffd4:	00017506 	br	105ac <tcp_receive+0x898>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
    ffd8:	e0bfff17 	ldw	r2,-4(fp)
    ffdc:	10801317 	ldw	r2,76(r2)
    ffe0:	0086303a 	nor	r3,zero,r2
    ffe4:	d0a8c017 	ldw	r2,-23808(gp)
    ffe8:	1885883a 	add	r2,r3,r2
    ffec:	10011316 	blt	r2,zero,1043c <tcp_receive+0x728>
    fff0:	d0e8c017 	ldw	r3,-23808(gp)
    fff4:	e0bfff17 	ldw	r2,-4(fp)
    fff8:	10801517 	ldw	r2,84(r2)
    fffc:	1885c83a 	sub	r2,r3,r2
   10000:	00810e16 	blt	zero,r2,1043c <tcp_receive+0x728>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
   10004:	e0bfff17 	ldw	r2,-4(fp)
   10008:	10800883 	ldbu	r2,34(r2)
   1000c:	10803fcc 	andi	r2,r2,255
   10010:	1080010c 	andi	r2,r2,4
   10014:	10000b26 	beq	r2,zero,10044 <tcp_receive+0x330>
        pcb->flags &= ~TF_INFR;
   10018:	e0bfff17 	ldw	r2,-4(fp)
   1001c:	10c00883 	ldbu	r3,34(r2)
   10020:	00bffec4 	movi	r2,-5
   10024:	1884703a 	and	r2,r3,r2
   10028:	1007883a 	mov	r3,r2
   1002c:	e0bfff17 	ldw	r2,-4(fp)
   10030:	10c00885 	stb	r3,34(r2)
        pcb->cwnd = pcb->ssthresh;
   10034:	e0bfff17 	ldw	r2,-4(fp)
   10038:	10c0148b 	ldhu	r3,82(r2)
   1003c:	e0bfff17 	ldw	r2,-4(fp)
   10040:	10c0140d 	sth	r3,80(r2)
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
   10044:	e0bfff17 	ldw	r2,-4(fp)
   10048:	10001285 	stb	zero,74(r2)

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
   1004c:	e0bfff17 	ldw	r2,-4(fp)
   10050:	1080110b 	ldhu	r2,68(r2)
   10054:	10bfffcc 	andi	r2,r2,65535
   10058:	10a0001c 	xori	r2,r2,32768
   1005c:	10a00004 	addi	r2,r2,-32768
   10060:	1005d0fa 	srai	r2,r2,3
   10064:	1007883a 	mov	r3,r2
   10068:	e0bfff17 	ldw	r2,-4(fp)
   1006c:	1080118b 	ldhu	r2,70(r2)
   10070:	1885883a 	add	r2,r3,r2
   10074:	1007883a 	mov	r3,r2
   10078:	e0bfff17 	ldw	r2,-4(fp)
   1007c:	10c0120d 	sth	r3,72(r2)

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
   10080:	d0a8c017 	ldw	r2,-23808(gp)
   10084:	1007883a 	mov	r3,r2
   10088:	e0bfff17 	ldw	r2,-4(fp)
   1008c:	10801317 	ldw	r2,76(r2)
   10090:	1885c83a 	sub	r2,r3,r2
   10094:	1007883a 	mov	r3,r2
   10098:	e0bfff17 	ldw	r2,-4(fp)
   1009c:	10c01a0d 	sth	r3,104(r2)

      pcb->snd_buf += pcb->acked;
   100a0:	e0bfff17 	ldw	r2,-4(fp)
   100a4:	10c01a8b 	ldhu	r3,106(r2)
   100a8:	e0bfff17 	ldw	r2,-4(fp)
   100ac:	10801a0b 	ldhu	r2,104(r2)
   100b0:	1885883a 	add	r2,r3,r2
   100b4:	1007883a 	mov	r3,r2
   100b8:	e0bfff17 	ldw	r2,-4(fp)
   100bc:	10c01a8d 	sth	r3,106(r2)

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
   100c0:	e0bfff17 	ldw	r2,-4(fp)
   100c4:	100012c5 	stb	zero,75(r2)
      pcb->lastack = ackno;
   100c8:	d0e8c017 	ldw	r3,-23808(gp)
   100cc:	e0bfff17 	ldw	r2,-4(fp)
   100d0:	10c01315 	stw	r3,76(r2)

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
   100d4:	e0bfff17 	ldw	r2,-4(fp)
   100d8:	10800617 	ldw	r2,24(r2)
   100dc:	10800130 	cmpltui	r2,r2,4
   100e0:	1000861e 	bne	r2,zero,102fc <tcp_receive+0x5e8>
        if (pcb->cwnd < pcb->ssthresh) {
   100e4:	e0bfff17 	ldw	r2,-4(fp)
   100e8:	10c0140b 	ldhu	r3,80(r2)
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	1080148b 	ldhu	r2,82(r2)
   100f4:	18ffffcc 	andi	r3,r3,65535
   100f8:	10bfffcc 	andi	r2,r2,65535
   100fc:	1880132e 	bgeu	r3,r2,1014c <tcp_receive+0x438>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
   10100:	e0bfff17 	ldw	r2,-4(fp)
   10104:	10c0140b 	ldhu	r3,80(r2)
   10108:	e0bfff17 	ldw	r2,-4(fp)
   1010c:	10800e8b 	ldhu	r2,58(r2)
   10110:	1885883a 	add	r2,r3,r2
   10114:	e0ffff17 	ldw	r3,-4(fp)
   10118:	18c0140b 	ldhu	r3,80(r3)
   1011c:	10bfffcc 	andi	r2,r2,65535
   10120:	18ffffcc 	andi	r3,r3,65535
   10124:	1880752e 	bgeu	r3,r2,102fc <tcp_receive+0x5e8>
            pcb->cwnd += pcb->mss;
   10128:	e0bfff17 	ldw	r2,-4(fp)
   1012c:	10c0140b 	ldhu	r3,80(r2)
   10130:	e0bfff17 	ldw	r2,-4(fp)
   10134:	10800e8b 	ldhu	r2,58(r2)
   10138:	1885883a 	add	r2,r3,r2
   1013c:	1007883a 	mov	r3,r2
   10140:	e0bfff17 	ldw	r2,-4(fp)
   10144:	10c0140d 	sth	r3,80(r2)
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
   10148:	00006c06 	br	102fc <tcp_receive+0x5e8>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
            pcb->cwnd += pcb->mss;
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
   1014c:	e0bfff17 	ldw	r2,-4(fp)
   10150:	10c0140b 	ldhu	r3,80(r2)
   10154:	e0bfff17 	ldw	r2,-4(fp)
   10158:	10800e8b 	ldhu	r2,58(r2)
   1015c:	113fffcc 	andi	r4,r2,65535
   10160:	e0bfff17 	ldw	r2,-4(fp)
   10164:	10800e8b 	ldhu	r2,58(r2)
   10168:	10bfffcc 	andi	r2,r2,65535
   1016c:	2089383a 	mul	r4,r4,r2
   10170:	e0bfff17 	ldw	r2,-4(fp)
   10174:	1080140b 	ldhu	r2,80(r2)
   10178:	10bfffcc 	andi	r2,r2,65535
   1017c:	2085283a 	div	r2,r4,r2
   10180:	1885883a 	add	r2,r3,r2
   10184:	e0bffc0d 	sth	r2,-16(fp)
          if (new_cwnd > pcb->cwnd) {
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	1080140b 	ldhu	r2,80(r2)
   10190:	10ffffcc 	andi	r3,r2,65535
   10194:	e0bffc0b 	ldhu	r2,-16(fp)
   10198:	1880582e 	bgeu	r3,r2,102fc <tcp_receive+0x5e8>
            pcb->cwnd = new_cwnd;
   1019c:	e0bfff17 	ldw	r2,-4(fp)
   101a0:	e0fffc0b 	ldhu	r3,-16(fp)
   101a4:	10c0140d 	sth	r3,80(r2)
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
   101a8:	00005406 	br	102fc <tcp_receive+0x5e8>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
   101ac:	e0bfff17 	ldw	r2,-4(fp)
   101b0:	10801d17 	ldw	r2,116(r2)
   101b4:	e0bff515 	stw	r2,-44(fp)
        pcb->unacked = pcb->unacked->next;
   101b8:	e0bfff17 	ldw	r2,-4(fp)
   101bc:	10801d17 	ldw	r2,116(r2)
   101c0:	10c00017 	ldw	r3,0(r2)
   101c4:	e0bfff17 	ldw	r2,-4(fp)
   101c8:	10c01d15 	stw	r3,116(r2)

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
   101cc:	e0bfff17 	ldw	r2,-4(fp)
   101d0:	14001b0b 	ldhu	r16,108(r2)
   101d4:	e0bff517 	ldw	r2,-44(fp)
   101d8:	10800117 	ldw	r2,4(r2)
   101dc:	1009883a 	mov	r4,r2
   101e0:	000a5ec0 	call	a5ec <pbuf_clen>
   101e4:	10803fcc 	andi	r2,r2,255
   101e8:	80ffffcc 	andi	r3,r16,65535
   101ec:	10bfffcc 	andi	r2,r2,65535
   101f0:	1880092e 	bgeu	r3,r2,10218 <tcp_receive+0x504>
   101f4:	010000f4 	movhi	r4,3
   101f8:	213fb204 	addi	r4,r4,-312
   101fc:	014000f4 	movhi	r5,3
   10200:	29402404 	addi	r5,r5,144
   10204:	0180ff04 	movi	r6,1020
   10208:	01c000f4 	movhi	r7,3
   1020c:	39ffc604 	addi	r7,r7,-232
   10210:	0017c440 	call	17c44 <printf>
   10214:	003fff06 	br	10214 <tcp_receive+0x500>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
   10218:	e0bfff17 	ldw	r2,-4(fp)
   1021c:	10801a0b 	ldhu	r2,104(r2)
   10220:	10bfffcc 	andi	r2,r2,65535
   10224:	10001526 	beq	r2,zero,1027c <tcp_receive+0x568>
   10228:	e0bff517 	ldw	r2,-44(fp)
   1022c:	10800317 	ldw	r2,12(r2)
   10230:	1080030b 	ldhu	r2,12(r2)
   10234:	10bfffcc 	andi	r2,r2,65535
   10238:	1004d23a 	srli	r2,r2,8
   1023c:	10ffffcc 	andi	r3,r2,65535
   10240:	e0bff517 	ldw	r2,-44(fp)
   10244:	10800317 	ldw	r2,12(r2)
   10248:	1080030b 	ldhu	r2,12(r2)
   1024c:	10bfffcc 	andi	r2,r2,65535
   10250:	1004923a 	slli	r2,r2,8
   10254:	10bfffcc 	andi	r2,r2,65535
   10258:	1884b03a 	or	r2,r3,r2
   1025c:	1080004c 	andi	r2,r2,1
   10260:	10000626 	beq	r2,zero,1027c <tcp_receive+0x568>
          pcb->acked--;
   10264:	e0bfff17 	ldw	r2,-4(fp)
   10268:	10801a0b 	ldhu	r2,104(r2)
   1026c:	10bfffc4 	addi	r2,r2,-1
   10270:	1007883a 	mov	r3,r2
   10274:	e0bfff17 	ldw	r2,-4(fp)
   10278:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
   1027c:	e0bfff17 	ldw	r2,-4(fp)
   10280:	14001b0b 	ldhu	r16,108(r2)
   10284:	e0bff517 	ldw	r2,-44(fp)
   10288:	10800117 	ldw	r2,4(r2)
   1028c:	1009883a 	mov	r4,r2
   10290:	000a5ec0 	call	a5ec <pbuf_clen>
   10294:	10803fcc 	andi	r2,r2,255
   10298:	8085c83a 	sub	r2,r16,r2
   1029c:	1007883a 	mov	r3,r2
   102a0:	e0bfff17 	ldw	r2,-4(fp)
   102a4:	10c01b0d 	sth	r3,108(r2)
        tcp_seg_free(next);
   102a8:	e13ff517 	ldw	r4,-44(fp)
   102ac:	000d3f40 	call	d3f4 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
   102b0:	e0bfff17 	ldw	r2,-4(fp)
   102b4:	10801b0b 	ldhu	r2,108(r2)
   102b8:	10bfffcc 	andi	r2,r2,65535
   102bc:	10001026 	beq	r2,zero,10300 <tcp_receive+0x5ec>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	10801d17 	ldw	r2,116(r2)
   102c8:	10000d1e 	bne	r2,zero,10300 <tcp_receive+0x5ec>
   102cc:	e0bfff17 	ldw	r2,-4(fp)
   102d0:	10801c17 	ldw	r2,112(r2)
   102d4:	10000a1e 	bne	r2,zero,10300 <tcp_receive+0x5ec>
   102d8:	010000f4 	movhi	r4,3
   102dc:	213fb204 	addi	r4,r4,-312
   102e0:	014000f4 	movhi	r5,3
   102e4:	29402e04 	addi	r5,r5,184
   102e8:	01810204 	movi	r6,1032
   102ec:	01c000f4 	movhi	r7,3
   102f0:	39ffc604 	addi	r7,r7,-232
   102f4:	0017c440 	call	17c44 <printf>
   102f8:	003fff06 	br	102f8 <tcp_receive+0x5e4>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
   102fc:	0001883a 	nop
   10300:	e0bfff17 	ldw	r2,-4(fp)
   10304:	10801d17 	ldw	r2,116(r2)
   10308:	10004026 	beq	r2,zero,1040c <tcp_receive+0x6f8>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
   1030c:	e0bfff17 	ldw	r2,-4(fp)
   10310:	10801d17 	ldw	r2,116(r2)
   10314:	10800317 	ldw	r2,12(r2)
   10318:	10c0010b 	ldhu	r3,4(r2)
   1031c:	1080018b 	ldhu	r2,6(r2)
   10320:	1004943a 	slli	r2,r2,16
   10324:	10c4b03a 	or	r2,r2,r3
   10328:	1006d63a 	srli	r3,r2,24
   1032c:	e0bfff17 	ldw	r2,-4(fp)
   10330:	10801d17 	ldw	r2,116(r2)
   10334:	10800317 	ldw	r2,12(r2)
   10338:	1100010b 	ldhu	r4,4(r2)
   1033c:	1080018b 	ldhu	r2,6(r2)
   10340:	1004943a 	slli	r2,r2,16
   10344:	1104b03a 	or	r2,r2,r4
   10348:	1004d23a 	srli	r2,r2,8
   1034c:	10bfc00c 	andi	r2,r2,65280
   10350:	1886b03a 	or	r3,r3,r2
   10354:	e0bfff17 	ldw	r2,-4(fp)
   10358:	10801d17 	ldw	r2,116(r2)
   1035c:	10800317 	ldw	r2,12(r2)
   10360:	1100010b 	ldhu	r4,4(r2)
   10364:	1080018b 	ldhu	r2,6(r2)
   10368:	1004943a 	slli	r2,r2,16
   1036c:	1104b03a 	or	r2,r2,r4
   10370:	10bfc00c 	andi	r2,r2,65280
   10374:	1004923a 	slli	r2,r2,8
   10378:	1886b03a 	or	r3,r3,r2
   1037c:	e0bfff17 	ldw	r2,-4(fp)
   10380:	10801d17 	ldw	r2,116(r2)
   10384:	10800317 	ldw	r2,12(r2)
   10388:	1100010b 	ldhu	r4,4(r2)
   1038c:	1080018b 	ldhu	r2,6(r2)
   10390:	1004943a 	slli	r2,r2,16
   10394:	1104b03a 	or	r2,r2,r4
   10398:	1004963a 	slli	r2,r2,24
   1039c:	1886b03a 	or	r3,r3,r2
   103a0:	e0bfff17 	ldw	r2,-4(fp)
   103a4:	10801d17 	ldw	r2,116(r2)
   103a8:	1080020b 	ldhu	r2,8(r2)
   103ac:	113fffcc 	andi	r4,r2,65535
   103b0:	e0bfff17 	ldw	r2,-4(fp)
   103b4:	10801d17 	ldw	r2,116(r2)
   103b8:	10800317 	ldw	r2,12(r2)
   103bc:	1080030b 	ldhu	r2,12(r2)
   103c0:	10bfffcc 	andi	r2,r2,65535
   103c4:	1004d23a 	srli	r2,r2,8
   103c8:	117fffcc 	andi	r5,r2,65535
   103cc:	e0bfff17 	ldw	r2,-4(fp)
   103d0:	10801d17 	ldw	r2,116(r2)
   103d4:	10800317 	ldw	r2,12(r2)
   103d8:	1080030b 	ldhu	r2,12(r2)
   103dc:	10bfffcc 	andi	r2,r2,65535
   103e0:	1004923a 	slli	r2,r2,8
   103e4:	10bfffcc 	andi	r2,r2,65535
   103e8:	2884b03a 	or	r2,r5,r2
   103ec:	108000cc 	andi	r2,r2,3
   103f0:	1004c03a 	cmpne	r2,r2,zero
   103f4:	10803fcc 	andi	r2,r2,255
   103f8:	2085883a 	add	r2,r4,r2
   103fc:	1887883a 	add	r3,r3,r2
   10400:	d0a8c017 	ldw	r2,-23808(gp)
   10404:	1885c83a 	sub	r2,r3,r2
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
   10408:	00bf680e 	bge	zero,r2,101ac <tcp_receive+0x498>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
   1040c:	e0bfff17 	ldw	r2,-4(fp)
   10410:	10801d17 	ldw	r2,116(r2)
   10414:	1000041e 	bne	r2,zero,10428 <tcp_receive+0x714>
        pcb->rtime = -1;
   10418:	e0bfff17 	ldw	r2,-4(fp)
   1041c:	00ffffc4 	movi	r3,-1
   10420:	10c00e0d 	sth	r3,56(r2)
   10424:	00000206 	br	10430 <tcp_receive+0x71c>
      else
        pcb->rtime = 0;
   10428:	e0bfff17 	ldw	r2,-4(fp)
   1042c:	10000e0d 	sth	zero,56(r2)

      pcb->polltmr = 0;
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	100008c5 	stb	zero,35(r2)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
   10438:	00005c06 	br	105ac <tcp_receive+0x898>
        pcb->rtime = 0;

      pcb->polltmr = 0;
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
   1043c:	e0bfff17 	ldw	r2,-4(fp)
   10440:	10001a0d 	sth	zero,104(r2)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
   10444:	00005906 	br	105ac <tcp_receive+0x898>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
   10448:	e0bfff17 	ldw	r2,-4(fp)
   1044c:	10801c17 	ldw	r2,112(r2)
   10450:	e0bff515 	stw	r2,-44(fp)
      pcb->unsent = pcb->unsent->next;
   10454:	e0bfff17 	ldw	r2,-4(fp)
   10458:	10801c17 	ldw	r2,112(r2)
   1045c:	10c00017 	ldw	r3,0(r2)
   10460:	e0bfff17 	ldw	r2,-4(fp)
   10464:	10c01c15 	stw	r3,112(r2)
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
   10468:	e0bfff17 	ldw	r2,-4(fp)
   1046c:	10801c17 	ldw	r2,112(r2)
   10470:	1000021e 	bne	r2,zero,1047c <tcp_receive+0x768>
        pcb->unsent_oversize = 0;
   10474:	e0bfff17 	ldw	r2,-4(fp)
   10478:	10001b8d 	sth	zero,110(r2)
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
   1047c:	e0bfff17 	ldw	r2,-4(fp)
   10480:	14001b0b 	ldhu	r16,108(r2)
   10484:	e0bff517 	ldw	r2,-44(fp)
   10488:	10800117 	ldw	r2,4(r2)
   1048c:	1009883a 	mov	r4,r2
   10490:	000a5ec0 	call	a5ec <pbuf_clen>
   10494:	10803fcc 	andi	r2,r2,255
   10498:	80ffffcc 	andi	r3,r16,65535
   1049c:	10bfffcc 	andi	r2,r2,65535
   104a0:	1880092e 	bgeu	r3,r2,104c8 <tcp_receive+0x7b4>
   104a4:	010000f4 	movhi	r4,3
   104a8:	213fb204 	addi	r4,r4,-312
   104ac:	014000f4 	movhi	r5,3
   104b0:	29402404 	addi	r5,r5,144
   104b4:	01810b84 	movi	r6,1070
   104b8:	01c000f4 	movhi	r7,3
   104bc:	39ffc604 	addi	r7,r7,-232
   104c0:	0017c440 	call	17c44 <printf>
   104c4:	003fff06 	br	104c4 <tcp_receive+0x7b0>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
   104c8:	e0bfff17 	ldw	r2,-4(fp)
   104cc:	10801a0b 	ldhu	r2,104(r2)
   104d0:	10bfffcc 	andi	r2,r2,65535
   104d4:	10001526 	beq	r2,zero,1052c <tcp_receive+0x818>
   104d8:	e0bff517 	ldw	r2,-44(fp)
   104dc:	10800317 	ldw	r2,12(r2)
   104e0:	1080030b 	ldhu	r2,12(r2)
   104e4:	10bfffcc 	andi	r2,r2,65535
   104e8:	1004d23a 	srli	r2,r2,8
   104ec:	10ffffcc 	andi	r3,r2,65535
   104f0:	e0bff517 	ldw	r2,-44(fp)
   104f4:	10800317 	ldw	r2,12(r2)
   104f8:	1080030b 	ldhu	r2,12(r2)
   104fc:	10bfffcc 	andi	r2,r2,65535
   10500:	1004923a 	slli	r2,r2,8
   10504:	10bfffcc 	andi	r2,r2,65535
   10508:	1884b03a 	or	r2,r3,r2
   1050c:	1080004c 	andi	r2,r2,1
   10510:	10000626 	beq	r2,zero,1052c <tcp_receive+0x818>
        pcb->acked--;
   10514:	e0bfff17 	ldw	r2,-4(fp)
   10518:	10801a0b 	ldhu	r2,104(r2)
   1051c:	10bfffc4 	addi	r2,r2,-1
   10520:	1007883a 	mov	r3,r2
   10524:	e0bfff17 	ldw	r2,-4(fp)
   10528:	10c01a0d 	sth	r3,104(r2)
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
   1052c:	e0bfff17 	ldw	r2,-4(fp)
   10530:	14001b0b 	ldhu	r16,108(r2)
   10534:	e0bff517 	ldw	r2,-44(fp)
   10538:	10800117 	ldw	r2,4(r2)
   1053c:	1009883a 	mov	r4,r2
   10540:	000a5ec0 	call	a5ec <pbuf_clen>
   10544:	10803fcc 	andi	r2,r2,255
   10548:	8085c83a 	sub	r2,r16,r2
   1054c:	1007883a 	mov	r3,r2
   10550:	e0bfff17 	ldw	r2,-4(fp)
   10554:	10c01b0d 	sth	r3,108(r2)
      tcp_seg_free(next);
   10558:	e13ff517 	ldw	r4,-44(fp)
   1055c:	000d3f40 	call	d3f4 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
   10560:	e0bfff17 	ldw	r2,-4(fp)
   10564:	10801b0b 	ldhu	r2,108(r2)
   10568:	10bfffcc 	andi	r2,r2,65535
   1056c:	10001026 	beq	r2,zero,105b0 <tcp_receive+0x89c>
        LWIP_ASSERT("tcp_receive: valid queue length",
   10570:	e0bfff17 	ldw	r2,-4(fp)
   10574:	10801d17 	ldw	r2,116(r2)
   10578:	10000d1e 	bne	r2,zero,105b0 <tcp_receive+0x89c>
   1057c:	e0bfff17 	ldw	r2,-4(fp)
   10580:	10801c17 	ldw	r2,112(r2)
   10584:	10000a1e 	bne	r2,zero,105b0 <tcp_receive+0x89c>
   10588:	010000f4 	movhi	r4,3
   1058c:	213fb204 	addi	r4,r4,-312
   10590:	014000f4 	movhi	r5,3
   10594:	29402e04 	addi	r5,r5,184
   10598:	01810e04 	movi	r6,1080
   1059c:	01c000f4 	movhi	r7,3
   105a0:	39ffc604 	addi	r7,r7,-232
   105a4:	0017c440 	call	17c44 <printf>
   105a8:	003fff06 	br	105a8 <tcp_receive+0x894>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
   105ac:	0001883a 	nop
   105b0:	e0bfff17 	ldw	r2,-4(fp)
   105b4:	10801c17 	ldw	r2,112(r2)
   105b8:	10004526 	beq	r2,zero,106d0 <tcp_receive+0x9bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
   105bc:	d0e8c017 	ldw	r3,-23808(gp)
   105c0:	e0bfff17 	ldw	r2,-4(fp)
   105c4:	10801c17 	ldw	r2,112(r2)
   105c8:	10800317 	ldw	r2,12(r2)
   105cc:	1100010b 	ldhu	r4,4(r2)
   105d0:	1080018b 	ldhu	r2,6(r2)
   105d4:	1004943a 	slli	r2,r2,16
   105d8:	1104b03a 	or	r2,r2,r4
   105dc:	1008d63a 	srli	r4,r2,24
   105e0:	e0bfff17 	ldw	r2,-4(fp)
   105e4:	10801c17 	ldw	r2,112(r2)
   105e8:	10800317 	ldw	r2,12(r2)
   105ec:	1140010b 	ldhu	r5,4(r2)
   105f0:	1080018b 	ldhu	r2,6(r2)
   105f4:	1004943a 	slli	r2,r2,16
   105f8:	1144b03a 	or	r2,r2,r5
   105fc:	1004d23a 	srli	r2,r2,8
   10600:	10bfc00c 	andi	r2,r2,65280
   10604:	2088b03a 	or	r4,r4,r2
   10608:	e0bfff17 	ldw	r2,-4(fp)
   1060c:	10801c17 	ldw	r2,112(r2)
   10610:	10800317 	ldw	r2,12(r2)
   10614:	1140010b 	ldhu	r5,4(r2)
   10618:	1080018b 	ldhu	r2,6(r2)
   1061c:	1004943a 	slli	r2,r2,16
   10620:	1144b03a 	or	r2,r2,r5
   10624:	10bfc00c 	andi	r2,r2,65280
   10628:	1004923a 	slli	r2,r2,8
   1062c:	2088b03a 	or	r4,r4,r2
   10630:	e0bfff17 	ldw	r2,-4(fp)
   10634:	10801c17 	ldw	r2,112(r2)
   10638:	10800317 	ldw	r2,12(r2)
   1063c:	1140010b 	ldhu	r5,4(r2)
   10640:	1080018b 	ldhu	r2,6(r2)
   10644:	1004943a 	slli	r2,r2,16
   10648:	1144b03a 	or	r2,r2,r5
   1064c:	1004963a 	slli	r2,r2,24
   10650:	2088b03a 	or	r4,r4,r2
   10654:	e0bfff17 	ldw	r2,-4(fp)
   10658:	10801c17 	ldw	r2,112(r2)
   1065c:	1080020b 	ldhu	r2,8(r2)
   10660:	117fffcc 	andi	r5,r2,65535
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	10801c17 	ldw	r2,112(r2)
   1066c:	10800317 	ldw	r2,12(r2)
   10670:	1080030b 	ldhu	r2,12(r2)
   10674:	10bfffcc 	andi	r2,r2,65535
   10678:	1004d23a 	srli	r2,r2,8
   1067c:	11bfffcc 	andi	r6,r2,65535
   10680:	e0bfff17 	ldw	r2,-4(fp)
   10684:	10801c17 	ldw	r2,112(r2)
   10688:	10800317 	ldw	r2,12(r2)
   1068c:	1080030b 	ldhu	r2,12(r2)
   10690:	10bfffcc 	andi	r2,r2,65535
   10694:	1004923a 	slli	r2,r2,8
   10698:	10bfffcc 	andi	r2,r2,65535
   1069c:	3084b03a 	or	r2,r6,r2
   106a0:	108000cc 	andi	r2,r2,3
   106a4:	1004c03a 	cmpne	r2,r2,zero
   106a8:	10803fcc 	andi	r2,r2,255
   106ac:	2885883a 	add	r2,r5,r2
   106b0:	2085883a 	add	r2,r4,r2
   106b4:	1885c83a 	sub	r2,r3,r2
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
   106b8:	10000516 	blt	r2,zero,106d0 <tcp_receive+0x9bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
   106bc:	d0e8c017 	ldw	r3,-23808(gp)
   106c0:	e0bfff17 	ldw	r2,-4(fp)
   106c4:	10801517 	ldw	r2,84(r2)
   106c8:	1885c83a 	sub	r2,r3,r2
   106cc:	00bf5e0e 	bge	zero,r2,10448 <tcp_receive+0x734>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
   106d0:	e0bfff17 	ldw	r2,-4(fp)
   106d4:	10800f17 	ldw	r2,60(r2)
   106d8:	10004326 	beq	r2,zero,107e8 <tcp_receive+0xad4>
   106dc:	e0bfff17 	ldw	r2,-4(fp)
   106e0:	10c01017 	ldw	r3,64(r2)
   106e4:	d0a8c017 	ldw	r2,-23808(gp)
   106e8:	1885c83a 	sub	r2,r3,r2
   106ec:	10003e0e 	bge	r2,zero,107e8 <tcp_receive+0xad4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
   106f0:	008000f4 	movhi	r2,3
   106f4:	109be004 	addi	r2,r2,28544
   106f8:	10800017 	ldw	r2,0(r2)
   106fc:	1007883a 	mov	r3,r2
   10700:	e0bfff17 	ldw	r2,-4(fp)
   10704:	10800f17 	ldw	r2,60(r2)
   10708:	1885c83a 	sub	r2,r3,r2
   1070c:	e0bff90d 	sth	r2,-28(fp)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
   10710:	e0fff90b 	ldhu	r3,-28(fp)
   10714:	e0bfff17 	ldw	r2,-4(fp)
   10718:	1080110b 	ldhu	r2,68(r2)
   1071c:	10bfffcc 	andi	r2,r2,65535
   10720:	10a0001c 	xori	r2,r2,32768
   10724:	10a00004 	addi	r2,r2,-32768
   10728:	1005d0fa 	srai	r2,r2,3
   1072c:	1885c83a 	sub	r2,r3,r2
   10730:	e0bff90d 	sth	r2,-28(fp)
      pcb->sa += m;
   10734:	e0bfff17 	ldw	r2,-4(fp)
   10738:	1080110b 	ldhu	r2,68(r2)
   1073c:	1007883a 	mov	r3,r2
   10740:	e0bff90b 	ldhu	r2,-28(fp)
   10744:	1885883a 	add	r2,r3,r2
   10748:	1007883a 	mov	r3,r2
   1074c:	e0bfff17 	ldw	r2,-4(fp)
   10750:	10c0110d 	sth	r3,68(r2)
      if (m < 0) {
   10754:	e0bff90f 	ldh	r2,-28(fp)
   10758:	1000030e 	bge	r2,zero,10768 <tcp_receive+0xa54>
        m = -m;
   1075c:	e0bff90b 	ldhu	r2,-28(fp)
   10760:	0085c83a 	sub	r2,zero,r2
   10764:	e0bff90d 	sth	r2,-28(fp)
      }
      m = m - (pcb->sv >> 2);
   10768:	e0fff90b 	ldhu	r3,-28(fp)
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	1080118b 	ldhu	r2,70(r2)
   10774:	10bfffcc 	andi	r2,r2,65535
   10778:	10a0001c 	xori	r2,r2,32768
   1077c:	10a00004 	addi	r2,r2,-32768
   10780:	1005d0ba 	srai	r2,r2,2
   10784:	1885c83a 	sub	r2,r3,r2
   10788:	e0bff90d 	sth	r2,-28(fp)
      pcb->sv += m;
   1078c:	e0bfff17 	ldw	r2,-4(fp)
   10790:	1080118b 	ldhu	r2,70(r2)
   10794:	1007883a 	mov	r3,r2
   10798:	e0bff90b 	ldhu	r2,-28(fp)
   1079c:	1885883a 	add	r2,r3,r2
   107a0:	1007883a 	mov	r3,r2
   107a4:	e0bfff17 	ldw	r2,-4(fp)
   107a8:	10c0118d 	sth	r3,70(r2)
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
   107ac:	e0bfff17 	ldw	r2,-4(fp)
   107b0:	1080110b 	ldhu	r2,68(r2)
   107b4:	10bfffcc 	andi	r2,r2,65535
   107b8:	10a0001c 	xori	r2,r2,32768
   107bc:	10a00004 	addi	r2,r2,-32768
   107c0:	1005d0fa 	srai	r2,r2,3
   107c4:	1007883a 	mov	r3,r2
   107c8:	e0bfff17 	ldw	r2,-4(fp)
   107cc:	1080118b 	ldhu	r2,70(r2)
   107d0:	1885883a 	add	r2,r3,r2
   107d4:	1007883a 	mov	r3,r2
   107d8:	e0bfff17 	ldw	r2,-4(fp)
   107dc:	10c0120d 	sth	r3,72(r2)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
   107e0:	e0bfff17 	ldw	r2,-4(fp)
   107e4:	10000f15 	stw	zero,60(r2)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
   107e8:	d0a8c18b 	ldhu	r2,-23802(gp)
   107ec:	10bfffcc 	andi	r2,r2,65535
   107f0:	1004b826 	beq	r2,zero,11ad4 <tcp_receive+0x1dc0>
   107f4:	e0bfff17 	ldw	r2,-4(fp)
   107f8:	10800617 	ldw	r2,24(r2)
   107fc:	108001e8 	cmpgeui	r2,r2,7
   10800:	1004b41e 	bne	r2,zero,11ad4 <tcp_receive+0x1dc0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
   10804:	e0bfff17 	ldw	r2,-4(fp)
   10808:	10c00b17 	ldw	r3,44(r2)
   1080c:	d0a8bf17 	ldw	r2,-23812(gp)
   10810:	0084303a 	nor	r2,zero,r2
   10814:	1885883a 	add	r2,r3,r2
   10818:	1000a516 	blt	r2,zero,10ab0 <tcp_receive+0xd9c>
   1081c:	e0bfff17 	ldw	r2,-4(fp)
   10820:	10c00b17 	ldw	r3,44(r2)
   10824:	d0a8c18b 	ldhu	r2,-23802(gp)
   10828:	113fffcc 	andi	r4,r2,65535
   1082c:	d0a8bf17 	ldw	r2,-23812(gp)
   10830:	2085883a 	add	r2,r4,r2
   10834:	1885c83a 	sub	r2,r3,r2
   10838:	10800044 	addi	r2,r2,1
   1083c:	00809c16 	blt	zero,r2,10ab0 <tcp_receive+0xd9c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
   10840:	e0bfff17 	ldw	r2,-4(fp)
   10844:	10c00b17 	ldw	r3,44(r2)
   10848:	d0a8bf17 	ldw	r2,-23812(gp)
   1084c:	1885c83a 	sub	r2,r3,r2
   10850:	e0bff815 	stw	r2,-32(fp)
      p = inseg.p;
   10854:	00800134 	movhi	r2,4
   10858:	1090fb04 	addi	r2,r2,17388
   1085c:	10800117 	ldw	r2,4(r2)
   10860:	e0bff715 	stw	r2,-36(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
   10864:	00800134 	movhi	r2,4
   10868:	1090fb04 	addi	r2,r2,17388
   1086c:	10800117 	ldw	r2,4(r2)
   10870:	1000091e 	bne	r2,zero,10898 <tcp_receive+0xb84>
   10874:	010000f4 	movhi	r4,3
   10878:	213fb204 	addi	r4,r4,-312
   1087c:	014000f4 	movhi	r5,3
   10880:	29403604 	addi	r5,r5,216
   10884:	01812584 	movi	r6,1174
   10888:	01c000f4 	movhi	r7,3
   1088c:	39ffc604 	addi	r7,r7,-232
   10890:	0017c440 	call	17c44 <printf>
   10894:	003fff06 	br	10894 <tcp_receive+0xb80>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
   10898:	e0bff817 	ldw	r2,-32(fp)
   1089c:	109fffd0 	cmplti	r2,r2,32767
   108a0:	1000091e 	bne	r2,zero,108c8 <tcp_receive+0xbb4>
   108a4:	010000f4 	movhi	r4,3
   108a8:	213fb204 	addi	r4,r4,-312
   108ac:	014000f4 	movhi	r5,3
   108b0:	29403a04 	addi	r5,r5,232
   108b4:	018125c4 	movi	r6,1175
   108b8:	01c000f4 	movhi	r7,3
   108bc:	39ffc604 	addi	r7,r7,-232
   108c0:	0017c440 	call	17c44 <printf>
   108c4:	003fff06 	br	108c4 <tcp_receive+0xbb0>
      if (inseg.p->len < off) {
   108c8:	00800134 	movhi	r2,4
   108cc:	1090fb04 	addi	r2,r2,17388
   108d0:	10800117 	ldw	r2,4(r2)
   108d4:	1080028b 	ldhu	r2,10(r2)
   108d8:	10ffffcc 	andi	r3,r2,65535
   108dc:	e0bff817 	ldw	r2,-32(fp)
   108e0:	18803e0e 	bge	r3,r2,109dc <tcp_receive+0xcc8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
   108e4:	00800134 	movhi	r2,4
   108e8:	1090fb04 	addi	r2,r2,17388
   108ec:	10800117 	ldw	r2,4(r2)
   108f0:	1080020b 	ldhu	r2,8(r2)
   108f4:	10ffffcc 	andi	r3,r2,65535
   108f8:	e0bff817 	ldw	r2,-32(fp)
   108fc:	1880090e 	bge	r3,r2,10924 <tcp_receive+0xc10>
   10900:	010000f4 	movhi	r4,3
   10904:	213fb204 	addi	r4,r4,-312
   10908:	014000f4 	movhi	r5,3
   1090c:	29403e04 	addi	r5,r5,248
   10910:	01812644 	movi	r6,1177
   10914:	01c000f4 	movhi	r7,3
   10918:	39ffc604 	addi	r7,r7,-232
   1091c:	0017c440 	call	17c44 <printf>
   10920:	003fff06 	br	10920 <tcp_receive+0xc0c>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
   10924:	00800134 	movhi	r2,4
   10928:	1090fb04 	addi	r2,r2,17388
   1092c:	10800117 	ldw	r2,4(r2)
   10930:	10c0020b 	ldhu	r3,8(r2)
   10934:	e0bff817 	ldw	r2,-32(fp)
   10938:	1885c83a 	sub	r2,r3,r2
   1093c:	e0bffc8d 	sth	r2,-14(fp)
        while (p->len < off) {
   10940:	00000e06 	br	1097c <tcp_receive+0xc68>
          off -= p->len;
   10944:	e0bff717 	ldw	r2,-36(fp)
   10948:	1080028b 	ldhu	r2,10(r2)
   1094c:	10bfffcc 	andi	r2,r2,65535
   10950:	e0fff817 	ldw	r3,-32(fp)
   10954:	1885c83a 	sub	r2,r3,r2
   10958:	e0bff815 	stw	r2,-32(fp)
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
   1095c:	e0bff717 	ldw	r2,-36(fp)
   10960:	e0fffc8b 	ldhu	r3,-14(fp)
   10964:	10c0020d 	sth	r3,8(r2)
          p->len = 0;
   10968:	e0bff717 	ldw	r2,-36(fp)
   1096c:	1000028d 	sth	zero,10(r2)
          p = p->next;
   10970:	e0bff717 	ldw	r2,-36(fp)
   10974:	10800017 	ldw	r2,0(r2)
   10978:	e0bff715 	stw	r2,-36(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
   1097c:	e0bff717 	ldw	r2,-36(fp)
   10980:	1080028b 	ldhu	r2,10(r2)
   10984:	10ffffcc 	andi	r3,r2,65535
   10988:	e0bff817 	ldw	r2,-32(fp)
   1098c:	18bfed16 	blt	r3,r2,10944 <tcp_receive+0xc30>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
   10990:	e0bff817 	ldw	r2,-32(fp)
   10994:	0085c83a 	sub	r2,zero,r2
   10998:	10bfffcc 	andi	r2,r2,65535
   1099c:	10a0001c 	xori	r2,r2,32768
   109a0:	10a00004 	addi	r2,r2,-32768
   109a4:	e13ff717 	ldw	r4,-36(fp)
   109a8:	100b883a 	mov	r5,r2
   109ac:	000a2280 	call	a228 <pbuf_header>
   109b0:	10803fcc 	andi	r2,r2,255
   109b4:	10001f26 	beq	r2,zero,10a34 <tcp_receive+0xd20>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
   109b8:	010000f4 	movhi	r4,3
   109bc:	213fb204 	addi	r4,r4,-312
   109c0:	014000f4 	movhi	r5,3
   109c4:	29404204 	addi	r5,r5,264
   109c8:	01812984 	movi	r6,1190
   109cc:	01c000f4 	movhi	r7,3
   109d0:	39ffc604 	addi	r7,r7,-232
   109d4:	0017c440 	call	17c44 <printf>
   109d8:	003fff06 	br	109d8 <tcp_receive+0xcc4>
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
   109dc:	00800134 	movhi	r2,4
   109e0:	1090fb04 	addi	r2,r2,17388
   109e4:	10c00117 	ldw	r3,4(r2)
   109e8:	e0bff817 	ldw	r2,-32(fp)
   109ec:	0085c83a 	sub	r2,zero,r2
   109f0:	10bfffcc 	andi	r2,r2,65535
   109f4:	10a0001c 	xori	r2,r2,32768
   109f8:	10a00004 	addi	r2,r2,-32768
   109fc:	1809883a 	mov	r4,r3
   10a00:	100b883a 	mov	r5,r2
   10a04:	000a2280 	call	a228 <pbuf_header>
   10a08:	10803fcc 	andi	r2,r2,255
   10a0c:	10000926 	beq	r2,zero,10a34 <tcp_receive+0xd20>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
   10a10:	010000f4 	movhi	r4,3
   10a14:	213fb204 	addi	r4,r4,-312
   10a18:	014000f4 	movhi	r5,3
   10a1c:	29404204 	addi	r5,r5,264
   10a20:	01812ac4 	movi	r6,1195
   10a24:	01c000f4 	movhi	r7,3
   10a28:	39ffc604 	addi	r7,r7,-232
   10a2c:	0017c440 	call	17c44 <printf>
   10a30:	003fff06 	br	10a30 <tcp_receive+0xd1c>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
   10a34:	00800134 	movhi	r2,4
   10a38:	1090fb04 	addi	r2,r2,17388
   10a3c:	10c0020b 	ldhu	r3,8(r2)
   10a40:	d0a8bf17 	ldw	r2,-23812(gp)
   10a44:	1009883a 	mov	r4,r2
   10a48:	e0bfff17 	ldw	r2,-4(fp)
   10a4c:	10800b17 	ldw	r2,44(r2)
   10a50:	2085c83a 	sub	r2,r4,r2
   10a54:	1885883a 	add	r2,r3,r2
   10a58:	1007883a 	mov	r3,r2
   10a5c:	00800134 	movhi	r2,4
   10a60:	1090fb04 	addi	r2,r2,17388
   10a64:	10c0020d 	sth	r3,8(r2)
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
   10a68:	00800134 	movhi	r2,4
   10a6c:	1090fb04 	addi	r2,r2,17388
   10a70:	10800317 	ldw	r2,12(r2)
   10a74:	e0ffff17 	ldw	r3,-4(fp)
   10a78:	18c00b17 	ldw	r3,44(r3)
   10a7c:	d0e8bf15 	stw	r3,-23812(gp)
   10a80:	d0e8bf17 	ldw	r3,-23812(gp)
   10a84:	193fffcc 	andi	r4,r3,65535
   10a88:	1140010b 	ldhu	r5,4(r2)
   10a8c:	280a703a 	and	r5,r5,zero
   10a90:	2908b03a 	or	r4,r5,r4
   10a94:	1100010d 	sth	r4,4(r2)
   10a98:	1806d43a 	srli	r3,r3,16
   10a9c:	1100018b 	ldhu	r4,6(r2)
   10aa0:	2008703a 	and	r4,r4,zero
   10aa4:	20c6b03a 	or	r3,r4,r3
   10aa8:	10c0018d 	sth	r3,6(r2)
   10aac:	00000b06 	br	10adc <tcp_receive+0xdc8>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
   10ab0:	d0e8bf17 	ldw	r3,-23812(gp)
   10ab4:	e0bfff17 	ldw	r2,-4(fp)
   10ab8:	10800b17 	ldw	r2,44(r2)
   10abc:	1885c83a 	sub	r2,r3,r2
   10ac0:	1000060e 	bge	r2,zero,10adc <tcp_receive+0xdc8>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
   10ac4:	e0bfff17 	ldw	r2,-4(fp)
   10ac8:	10800883 	ldbu	r2,34(r2)
   10acc:	10800094 	ori	r2,r2,2
   10ad0:	1007883a 	mov	r3,r2
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
   10ad8:	10c00885 	stb	r3,34(r2)
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
   10adc:	d0e8bf17 	ldw	r3,-23812(gp)
   10ae0:	e0bfff17 	ldw	r2,-4(fp)
   10ae4:	10800b17 	ldw	r2,44(r2)
   10ae8:	1885c83a 	sub	r2,r3,r2
   10aec:	1003f516 	blt	r2,zero,11ac4 <tcp_receive+0x1db0>
   10af0:	d0e8bf17 	ldw	r3,-23812(gp)
   10af4:	e0bfff17 	ldw	r2,-4(fp)
   10af8:	11000b17 	ldw	r4,44(r2)
   10afc:	e0bfff17 	ldw	r2,-4(fp)
   10b00:	10800c0b 	ldhu	r2,48(r2)
   10b04:	10bfffcc 	andi	r2,r2,65535
   10b08:	2085883a 	add	r2,r4,r2
   10b0c:	1885c83a 	sub	r2,r3,r2
   10b10:	10800044 	addi	r2,r2,1
   10b14:	0083eb16 	blt	zero,r2,11ac4 <tcp_receive+0x1db0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   10b18:	e0bfff17 	ldw	r2,-4(fp)
   10b1c:	10c00b17 	ldw	r3,44(r2)
   10b20:	d0a8bf17 	ldw	r2,-23812(gp)
   10b24:	1882861e 	bne	r3,r2,11540 <tcp_receive+0x182c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
   10b28:	00800134 	movhi	r2,4
   10b2c:	1090fb04 	addi	r2,r2,17388
   10b30:	10c0020b 	ldhu	r3,8(r2)
   10b34:	00800134 	movhi	r2,4
   10b38:	1090fb04 	addi	r2,r2,17388
   10b3c:	10800317 	ldw	r2,12(r2)
   10b40:	1080030b 	ldhu	r2,12(r2)
   10b44:	10bfffcc 	andi	r2,r2,65535
   10b48:	1004d23a 	srli	r2,r2,8
   10b4c:	113fffcc 	andi	r4,r2,65535
   10b50:	00800134 	movhi	r2,4
   10b54:	1090fb04 	addi	r2,r2,17388
   10b58:	10800317 	ldw	r2,12(r2)
   10b5c:	1080030b 	ldhu	r2,12(r2)
   10b60:	10bfffcc 	andi	r2,r2,65535
   10b64:	1004923a 	slli	r2,r2,8
   10b68:	10bfffcc 	andi	r2,r2,65535
   10b6c:	2084b03a 	or	r2,r4,r2
   10b70:	108000cc 	andi	r2,r2,3
   10b74:	1004c03a 	cmpne	r2,r2,zero
   10b78:	10803fcc 	andi	r2,r2,255
   10b7c:	1885883a 	add	r2,r3,r2
   10b80:	d0a8c18d 	sth	r2,-23802(gp)

        if (tcplen > pcb->rcv_wnd) {
   10b84:	e0bfff17 	ldw	r2,-4(fp)
   10b88:	10c00c0b 	ldhu	r3,48(r2)
   10b8c:	d0a8c18b 	ldhu	r2,-23802(gp)
   10b90:	18ffffcc 	andi	r3,r3,65535
   10b94:	10bfffcc 	andi	r2,r2,65535
   10b98:	1880802e 	bgeu	r3,r2,10d9c <tcp_receive+0x1088>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   10b9c:	00800134 	movhi	r2,4
   10ba0:	1090fb04 	addi	r2,r2,17388
   10ba4:	10800317 	ldw	r2,12(r2)
   10ba8:	1080030b 	ldhu	r2,12(r2)
   10bac:	10bfffcc 	andi	r2,r2,65535
   10bb0:	1004d23a 	srli	r2,r2,8
   10bb4:	10ffffcc 	andi	r3,r2,65535
   10bb8:	00800134 	movhi	r2,4
   10bbc:	1090fb04 	addi	r2,r2,17388
   10bc0:	10800317 	ldw	r2,12(r2)
   10bc4:	1080030b 	ldhu	r2,12(r2)
   10bc8:	10bfffcc 	andi	r2,r2,65535
   10bcc:	1004923a 	slli	r2,r2,8
   10bd0:	10bfffcc 	andi	r2,r2,65535
   10bd4:	1884b03a 	or	r2,r3,r2
   10bd8:	1080004c 	andi	r2,r2,1
   10bdc:	10001c26 	beq	r2,zero,10c50 <tcp_receive+0xf3c>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
   10be0:	00800134 	movhi	r2,4
   10be4:	1090fb04 	addi	r2,r2,17388
   10be8:	10800317 	ldw	r2,12(r2)
   10bec:	00c00134 	movhi	r3,4
   10bf0:	18d0fb04 	addi	r3,r3,17388
   10bf4:	18c00317 	ldw	r3,12(r3)
   10bf8:	1900030b 	ldhu	r4,12(r3)
   10bfc:	00f03fc4 	movi	r3,-16129
   10c00:	20c6703a 	and	r3,r4,r3
   10c04:	1809883a 	mov	r4,r3
   10c08:	00c00134 	movhi	r3,4
   10c0c:	18d0fb04 	addi	r3,r3,17388
   10c10:	18c00317 	ldw	r3,12(r3)
   10c14:	18c0030b 	ldhu	r3,12(r3)
   10c18:	18ffffcc 	andi	r3,r3,65535
   10c1c:	1806d23a 	srli	r3,r3,8
   10c20:	180b883a 	mov	r5,r3
   10c24:	00c00134 	movhi	r3,4
   10c28:	18d0fb04 	addi	r3,r3,17388
   10c2c:	18c00317 	ldw	r3,12(r3)
   10c30:	18c0030b 	ldhu	r3,12(r3)
   10c34:	18ffffcc 	andi	r3,r3,65535
   10c38:	1806923a 	slli	r3,r3,8
   10c3c:	28c6b03a 	or	r3,r5,r3
   10c40:	18c00f8c 	andi	r3,r3,62
   10c44:	1806923a 	slli	r3,r3,8
   10c48:	20c6b03a 	or	r3,r4,r3
   10c4c:	10c0030d 	sth	r3,12(r2)
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
   10c50:	e0bfff17 	ldw	r2,-4(fp)
   10c54:	10c00c0b 	ldhu	r3,48(r2)
   10c58:	00800134 	movhi	r2,4
   10c5c:	1090fb04 	addi	r2,r2,17388
   10c60:	10c0020d 	sth	r3,8(r2)
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   10c64:	00800134 	movhi	r2,4
   10c68:	1090fb04 	addi	r2,r2,17388
   10c6c:	10800317 	ldw	r2,12(r2)
   10c70:	1080030b 	ldhu	r2,12(r2)
   10c74:	10bfffcc 	andi	r2,r2,65535
   10c78:	1004d23a 	srli	r2,r2,8
   10c7c:	10ffffcc 	andi	r3,r2,65535
   10c80:	00800134 	movhi	r2,4
   10c84:	1090fb04 	addi	r2,r2,17388
   10c88:	10800317 	ldw	r2,12(r2)
   10c8c:	1080030b 	ldhu	r2,12(r2)
   10c90:	10bfffcc 	andi	r2,r2,65535
   10c94:	1004923a 	slli	r2,r2,8
   10c98:	10bfffcc 	andi	r2,r2,65535
   10c9c:	1884b03a 	or	r2,r3,r2
   10ca0:	1080008c 	andi	r2,r2,2
   10ca4:	10000826 	beq	r2,zero,10cc8 <tcp_receive+0xfb4>
            inseg.len -= 1;
   10ca8:	00800134 	movhi	r2,4
   10cac:	1090fb04 	addi	r2,r2,17388
   10cb0:	1080020b 	ldhu	r2,8(r2)
   10cb4:	10bfffc4 	addi	r2,r2,-1
   10cb8:	1007883a 	mov	r3,r2
   10cbc:	00800134 	movhi	r2,4
   10cc0:	1090fb04 	addi	r2,r2,17388
   10cc4:	10c0020d 	sth	r3,8(r2)
          }
          pbuf_realloc(inseg.p, inseg.len);
   10cc8:	00800134 	movhi	r2,4
   10ccc:	1090fb04 	addi	r2,r2,17388
   10cd0:	10c00117 	ldw	r3,4(r2)
   10cd4:	00800134 	movhi	r2,4
   10cd8:	1090fb04 	addi	r2,r2,17388
   10cdc:	1080020b 	ldhu	r2,8(r2)
   10ce0:	10bfffcc 	andi	r2,r2,65535
   10ce4:	1809883a 	mov	r4,r3
   10ce8:	100b883a 	mov	r5,r2
   10cec:	0009fa40 	call	9fa4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
   10cf0:	00800134 	movhi	r2,4
   10cf4:	1090fb04 	addi	r2,r2,17388
   10cf8:	10c0020b 	ldhu	r3,8(r2)
   10cfc:	00800134 	movhi	r2,4
   10d00:	1090fb04 	addi	r2,r2,17388
   10d04:	10800317 	ldw	r2,12(r2)
   10d08:	1080030b 	ldhu	r2,12(r2)
   10d0c:	10bfffcc 	andi	r2,r2,65535
   10d10:	1004d23a 	srli	r2,r2,8
   10d14:	113fffcc 	andi	r4,r2,65535
   10d18:	00800134 	movhi	r2,4
   10d1c:	1090fb04 	addi	r2,r2,17388
   10d20:	10800317 	ldw	r2,12(r2)
   10d24:	1080030b 	ldhu	r2,12(r2)
   10d28:	10bfffcc 	andi	r2,r2,65535
   10d2c:	1004923a 	slli	r2,r2,8
   10d30:	10bfffcc 	andi	r2,r2,65535
   10d34:	2084b03a 	or	r2,r4,r2
   10d38:	108000cc 	andi	r2,r2,3
   10d3c:	1004c03a 	cmpne	r2,r2,zero
   10d40:	10803fcc 	andi	r2,r2,255
   10d44:	1885883a 	add	r2,r3,r2
   10d48:	d0a8c18d 	sth	r2,-23802(gp)
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
   10d4c:	d0a8c18b 	ldhu	r2,-23802(gp)
   10d50:	10ffffcc 	andi	r3,r2,65535
   10d54:	d0a8bf17 	ldw	r2,-23812(gp)
   10d58:	1887883a 	add	r3,r3,r2
   10d5c:	e0bfff17 	ldw	r2,-4(fp)
   10d60:	11000b17 	ldw	r4,44(r2)
   10d64:	e0bfff17 	ldw	r2,-4(fp)
   10d68:	10800c0b 	ldhu	r2,48(r2)
   10d6c:	10bfffcc 	andi	r2,r2,65535
   10d70:	2085883a 	add	r2,r4,r2
   10d74:	18800926 	beq	r3,r2,10d9c <tcp_receive+0x1088>
   10d78:	010000f4 	movhi	r4,3
   10d7c:	213fb204 	addi	r4,r4,-312
   10d80:	014000f4 	movhi	r5,3
   10d84:	29404704 	addi	r5,r5,284
   10d88:	01813604 	movi	r6,1240
   10d8c:	01c000f4 	movhi	r7,3
   10d90:	39ffc604 	addi	r7,r7,-232
   10d94:	0017c440 	call	17c44 <printf>
   10d98:	003fff06 	br	10d98 <tcp_receive+0x1084>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
   10d9c:	e0bfff17 	ldw	r2,-4(fp)
   10da0:	10801e17 	ldw	r2,120(r2)
   10da4:	1000ea26 	beq	r2,zero,11150 <tcp_receive+0x143c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   10da8:	00800134 	movhi	r2,4
   10dac:	1090fb04 	addi	r2,r2,17388
   10db0:	10800317 	ldw	r2,12(r2)
   10db4:	1080030b 	ldhu	r2,12(r2)
   10db8:	10bfffcc 	andi	r2,r2,65535
   10dbc:	1004d23a 	srli	r2,r2,8
   10dc0:	10ffffcc 	andi	r3,r2,65535
   10dc4:	00800134 	movhi	r2,4
   10dc8:	1090fb04 	addi	r2,r2,17388
   10dcc:	10800317 	ldw	r2,12(r2)
   10dd0:	1080030b 	ldhu	r2,12(r2)
   10dd4:	10bfffcc 	andi	r2,r2,65535
   10dd8:	1004923a 	slli	r2,r2,8
   10ddc:	10bfffcc 	andi	r2,r2,65535
   10de0:	1884b03a 	or	r2,r3,r2
   10de4:	1080004c 	andi	r2,r2,1
   10de8:	10000f26 	beq	r2,zero,10e28 <tcp_receive+0x1114>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
   10dec:	00000a06 	br	10e18 <tcp_receive+0x1104>
              struct tcp_seg *old_ooseq = pcb->ooseq;
   10df0:	e0bfff17 	ldw	r2,-4(fp)
   10df4:	10801e17 	ldw	r2,120(r2)
   10df8:	e0bffd15 	stw	r2,-12(fp)
              pcb->ooseq = pcb->ooseq->next;
   10dfc:	e0bfff17 	ldw	r2,-4(fp)
   10e00:	10801e17 	ldw	r2,120(r2)
   10e04:	10c00017 	ldw	r3,0(r2)
   10e08:	e0bfff17 	ldw	r2,-4(fp)
   10e0c:	10c01e15 	stw	r3,120(r2)
              tcp_seg_free(old_ooseq);
   10e10:	e13ffd17 	ldw	r4,-12(fp)
   10e14:	000d3f40 	call	d3f4 <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
   10e18:	e0bfff17 	ldw	r2,-4(fp)
   10e1c:	10801e17 	ldw	r2,120(r2)
   10e20:	103ff31e 	bne	r2,zero,10df0 <tcp_receive+0x10dc>
   10e24:	0000ca06 	br	11150 <tcp_receive+0x143c>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
   10e28:	e0bfff17 	ldw	r2,-4(fp)
   10e2c:	10801e17 	ldw	r2,120(r2)
   10e30:	e0bff515 	stw	r2,-44(fp)
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
   10e34:	00004706 	br	10f54 <tcp_receive+0x1240>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
   10e38:	e0bff517 	ldw	r2,-44(fp)
   10e3c:	10800317 	ldw	r2,12(r2)
   10e40:	1080030b 	ldhu	r2,12(r2)
   10e44:	10bfffcc 	andi	r2,r2,65535
   10e48:	1004d23a 	srli	r2,r2,8
   10e4c:	10ffffcc 	andi	r3,r2,65535
   10e50:	e0bff517 	ldw	r2,-44(fp)
   10e54:	10800317 	ldw	r2,12(r2)
   10e58:	1080030b 	ldhu	r2,12(r2)
   10e5c:	10bfffcc 	andi	r2,r2,65535
   10e60:	1004923a 	slli	r2,r2,8
   10e64:	10bfffcc 	andi	r2,r2,65535
   10e68:	1884b03a 	or	r2,r3,r2
   10e6c:	1080004c 	andi	r2,r2,1
   10e70:	10003126 	beq	r2,zero,10f38 <tcp_receive+0x1224>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
   10e74:	00800134 	movhi	r2,4
   10e78:	1090fb04 	addi	r2,r2,17388
   10e7c:	10800317 	ldw	r2,12(r2)
   10e80:	1080030b 	ldhu	r2,12(r2)
   10e84:	10bfffcc 	andi	r2,r2,65535
   10e88:	1004d23a 	srli	r2,r2,8
   10e8c:	10ffffcc 	andi	r3,r2,65535
   10e90:	00800134 	movhi	r2,4
   10e94:	1090fb04 	addi	r2,r2,17388
   10e98:	10800317 	ldw	r2,12(r2)
   10e9c:	1080030b 	ldhu	r2,12(r2)
   10ea0:	10bfffcc 	andi	r2,r2,65535
   10ea4:	1004923a 	slli	r2,r2,8
   10ea8:	10bfffcc 	andi	r2,r2,65535
   10eac:	1884b03a 	or	r2,r3,r2
   10eb0:	1080008c 	andi	r2,r2,2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
   10eb4:	1000201e 	bne	r2,zero,10f38 <tcp_receive+0x1224>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
   10eb8:	00800134 	movhi	r2,4
   10ebc:	1090fb04 	addi	r2,r2,17388
   10ec0:	10800317 	ldw	r2,12(r2)
   10ec4:	00c00134 	movhi	r3,4
   10ec8:	18d0fb04 	addi	r3,r3,17388
   10ecc:	18c00317 	ldw	r3,12(r3)
   10ed0:	18c0030b 	ldhu	r3,12(r3)
   10ed4:	18c04014 	ori	r3,r3,256
   10ed8:	10c0030d 	sth	r3,12(r2)
                tcplen = TCP_TCPLEN(&inseg);
   10edc:	00800134 	movhi	r2,4
   10ee0:	1090fb04 	addi	r2,r2,17388
   10ee4:	10c0020b 	ldhu	r3,8(r2)
   10ee8:	00800134 	movhi	r2,4
   10eec:	1090fb04 	addi	r2,r2,17388
   10ef0:	10800317 	ldw	r2,12(r2)
   10ef4:	1080030b 	ldhu	r2,12(r2)
   10ef8:	10bfffcc 	andi	r2,r2,65535
   10efc:	1004d23a 	srli	r2,r2,8
   10f00:	113fffcc 	andi	r4,r2,65535
   10f04:	00800134 	movhi	r2,4
   10f08:	1090fb04 	addi	r2,r2,17388
   10f0c:	10800317 	ldw	r2,12(r2)
   10f10:	1080030b 	ldhu	r2,12(r2)
   10f14:	10bfffcc 	andi	r2,r2,65535
   10f18:	1004923a 	slli	r2,r2,8
   10f1c:	10bfffcc 	andi	r2,r2,65535
   10f20:	2084b03a 	or	r2,r4,r2
   10f24:	108000cc 	andi	r2,r2,3
   10f28:	1004c03a 	cmpne	r2,r2,zero
   10f2c:	10803fcc 	andi	r2,r2,255
   10f30:	1885883a 	add	r2,r3,r2
   10f34:	d0a8c18d 	sth	r2,-23802(gp)
              }
              prev = next;
   10f38:	e0bff517 	ldw	r2,-44(fp)
   10f3c:	e0bff615 	stw	r2,-40(fp)
              next = next->next;
   10f40:	e0bff517 	ldw	r2,-44(fp)
   10f44:	10800017 	ldw	r2,0(r2)
   10f48:	e0bff515 	stw	r2,-44(fp)
              tcp_seg_free(prev);
   10f4c:	e13ff617 	ldw	r4,-40(fp)
   10f50:	000d3f40 	call	d3f4 <tcp_seg_free>
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
   10f54:	e0bff517 	ldw	r2,-44(fp)
   10f58:	10001126 	beq	r2,zero,10fa0 <tcp_receive+0x128c>
                   TCP_SEQ_GEQ(seqno + tcplen,
   10f5c:	d0a8c18b 	ldhu	r2,-23802(gp)
   10f60:	10ffffcc 	andi	r3,r2,65535
   10f64:	d0a8bf17 	ldw	r2,-23812(gp)
   10f68:	1887883a 	add	r3,r3,r2
   10f6c:	e0bff517 	ldw	r2,-44(fp)
   10f70:	10800317 	ldw	r2,12(r2)
   10f74:	1100010b 	ldhu	r4,4(r2)
   10f78:	1080018b 	ldhu	r2,6(r2)
   10f7c:	1004943a 	slli	r2,r2,16
   10f80:	1104b03a 	or	r2,r2,r4
   10f84:	1009883a 	mov	r4,r2
   10f88:	e0bff517 	ldw	r2,-44(fp)
   10f8c:	1080020b 	ldhu	r2,8(r2)
   10f90:	10bfffcc 	andi	r2,r2,65535
   10f94:	2085883a 	add	r2,r4,r2
   10f98:	1885c83a 	sub	r2,r3,r2
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
   10f9c:	103fa60e 	bge	r2,zero,10e38 <tcp_receive+0x1124>
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
   10fa0:	e0bff517 	ldw	r2,-44(fp)
   10fa4:	10006726 	beq	r2,zero,11144 <tcp_receive+0x1430>
                TCP_SEQ_GT(seqno + tcplen,
   10fa8:	d0a8c18b 	ldhu	r2,-23802(gp)
   10fac:	10ffffcc 	andi	r3,r2,65535
   10fb0:	d0a8bf17 	ldw	r2,-23812(gp)
   10fb4:	1887883a 	add	r3,r3,r2
   10fb8:	e0bff517 	ldw	r2,-44(fp)
   10fbc:	10800317 	ldw	r2,12(r2)
   10fc0:	1100010b 	ldhu	r4,4(r2)
   10fc4:	1080018b 	ldhu	r2,6(r2)
   10fc8:	1004943a 	slli	r2,r2,16
   10fcc:	1104b03a 	or	r2,r2,r4
   10fd0:	1885c83a 	sub	r2,r3,r2
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
   10fd4:	00805b0e 	bge	zero,r2,11144 <tcp_receive+0x1430>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
   10fd8:	e0bff517 	ldw	r2,-44(fp)
   10fdc:	10800317 	ldw	r2,12(r2)
   10fe0:	10c0010b 	ldhu	r3,4(r2)
   10fe4:	1080018b 	ldhu	r2,6(r2)
   10fe8:	1004943a 	slli	r2,r2,16
   10fec:	10c4b03a 	or	r2,r2,r3
   10ff0:	1007883a 	mov	r3,r2
   10ff4:	d0a8bf17 	ldw	r2,-23812(gp)
   10ff8:	1885c83a 	sub	r2,r3,r2
   10ffc:	1007883a 	mov	r3,r2
   11000:	00800134 	movhi	r2,4
   11004:	1090fb04 	addi	r2,r2,17388
   11008:	10c0020d 	sth	r3,8(r2)
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
   1100c:	00800134 	movhi	r2,4
   11010:	1090fb04 	addi	r2,r2,17388
   11014:	10800317 	ldw	r2,12(r2)
   11018:	1080030b 	ldhu	r2,12(r2)
   1101c:	10bfffcc 	andi	r2,r2,65535
   11020:	1004d23a 	srli	r2,r2,8
   11024:	10ffffcc 	andi	r3,r2,65535
   11028:	00800134 	movhi	r2,4
   1102c:	1090fb04 	addi	r2,r2,17388
   11030:	10800317 	ldw	r2,12(r2)
   11034:	1080030b 	ldhu	r2,12(r2)
   11038:	10bfffcc 	andi	r2,r2,65535
   1103c:	1004923a 	slli	r2,r2,8
   11040:	10bfffcc 	andi	r2,r2,65535
   11044:	1884b03a 	or	r2,r3,r2
   11048:	1080008c 	andi	r2,r2,2
   1104c:	10000826 	beq	r2,zero,11070 <tcp_receive+0x135c>
                inseg.len -= 1;
   11050:	00800134 	movhi	r2,4
   11054:	1090fb04 	addi	r2,r2,17388
   11058:	1080020b 	ldhu	r2,8(r2)
   1105c:	10bfffc4 	addi	r2,r2,-1
   11060:	1007883a 	mov	r3,r2
   11064:	00800134 	movhi	r2,4
   11068:	1090fb04 	addi	r2,r2,17388
   1106c:	10c0020d 	sth	r3,8(r2)
              }
              pbuf_realloc(inseg.p, inseg.len);
   11070:	00800134 	movhi	r2,4
   11074:	1090fb04 	addi	r2,r2,17388
   11078:	10c00117 	ldw	r3,4(r2)
   1107c:	00800134 	movhi	r2,4
   11080:	1090fb04 	addi	r2,r2,17388
   11084:	1080020b 	ldhu	r2,8(r2)
   11088:	10bfffcc 	andi	r2,r2,65535
   1108c:	1809883a 	mov	r4,r3
   11090:	100b883a 	mov	r5,r2
   11094:	0009fa40 	call	9fa4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
   11098:	00800134 	movhi	r2,4
   1109c:	1090fb04 	addi	r2,r2,17388
   110a0:	10c0020b 	ldhu	r3,8(r2)
   110a4:	00800134 	movhi	r2,4
   110a8:	1090fb04 	addi	r2,r2,17388
   110ac:	10800317 	ldw	r2,12(r2)
   110b0:	1080030b 	ldhu	r2,12(r2)
   110b4:	10bfffcc 	andi	r2,r2,65535
   110b8:	1004d23a 	srli	r2,r2,8
   110bc:	113fffcc 	andi	r4,r2,65535
   110c0:	00800134 	movhi	r2,4
   110c4:	1090fb04 	addi	r2,r2,17388
   110c8:	10800317 	ldw	r2,12(r2)
   110cc:	1080030b 	ldhu	r2,12(r2)
   110d0:	10bfffcc 	andi	r2,r2,65535
   110d4:	1004923a 	slli	r2,r2,8
   110d8:	10bfffcc 	andi	r2,r2,65535
   110dc:	2084b03a 	or	r2,r4,r2
   110e0:	108000cc 	andi	r2,r2,3
   110e4:	1004c03a 	cmpne	r2,r2,zero
   110e8:	10803fcc 	andi	r2,r2,255
   110ec:	1885883a 	add	r2,r3,r2
   110f0:	d0a8c18d 	sth	r2,-23802(gp)
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
   110f4:	d0a8c18b 	ldhu	r2,-23802(gp)
   110f8:	10ffffcc 	andi	r3,r2,65535
   110fc:	d0a8bf17 	ldw	r2,-23812(gp)
   11100:	1887883a 	add	r3,r3,r2
   11104:	e0bff517 	ldw	r2,-44(fp)
   11108:	10800317 	ldw	r2,12(r2)
   1110c:	1100010b 	ldhu	r4,4(r2)
   11110:	1080018b 	ldhu	r2,6(r2)
   11114:	1004943a 	slli	r2,r2,16
   11118:	1104b03a 	or	r2,r2,r4
   1111c:	18800926 	beq	r3,r2,11144 <tcp_receive+0x1430>
   11120:	010000f4 	movhi	r4,3
   11124:	213fb204 	addi	r4,r4,-312
   11128:	014000f4 	movhi	r5,3
   1112c:	29405504 	addi	r5,r5,340
   11130:	01814204 	movi	r6,1288
   11134:	01c000f4 	movhi	r7,3
   11138:	39ffc604 	addi	r7,r7,-232
   1113c:	0017c440 	call	17c44 <printf>
   11140:	003fff06 	br	11140 <tcp_receive+0x142c>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
   11144:	e0bfff17 	ldw	r2,-4(fp)
   11148:	e0fff517 	ldw	r3,-44(fp)
   1114c:	10c01e15 	stw	r3,120(r2)
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
   11150:	d0a8c18b 	ldhu	r2,-23802(gp)
   11154:	10ffffcc 	andi	r3,r2,65535
   11158:	d0a8bf17 	ldw	r2,-23812(gp)
   1115c:	1887883a 	add	r3,r3,r2
   11160:	e0bfff17 	ldw	r2,-4(fp)
   11164:	10c00b15 	stw	r3,44(r2)

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
   11168:	e0bfff17 	ldw	r2,-4(fp)
   1116c:	10c00c0b 	ldhu	r3,48(r2)
   11170:	d0a8c18b 	ldhu	r2,-23802(gp)
   11174:	18ffffcc 	andi	r3,r3,65535
   11178:	10bfffcc 	andi	r2,r2,65535
   1117c:	1880092e 	bgeu	r3,r2,111a4 <tcp_receive+0x1490>
   11180:	010000f4 	movhi	r4,3
   11184:	213fb204 	addi	r4,r4,-312
   11188:	014000f4 	movhi	r5,3
   1118c:	29406404 	addi	r5,r5,400
   11190:	01814484 	movi	r6,1298
   11194:	01c000f4 	movhi	r7,3
   11198:	39ffc604 	addi	r7,r7,-232
   1119c:	0017c440 	call	17c44 <printf>
   111a0:	003fff06 	br	111a0 <tcp_receive+0x148c>
        pcb->rcv_wnd -= tcplen;
   111a4:	e0bfff17 	ldw	r2,-4(fp)
   111a8:	10c00c0b 	ldhu	r3,48(r2)
   111ac:	d0a8c18b 	ldhu	r2,-23802(gp)
   111b0:	1885c83a 	sub	r2,r3,r2
   111b4:	1007883a 	mov	r3,r2
   111b8:	e0bfff17 	ldw	r2,-4(fp)
   111bc:	10c00c0d 	sth	r3,48(r2)

        tcp_update_rcv_ann_wnd(pcb);
   111c0:	e13fff17 	ldw	r4,-4(fp)
   111c4:	000c2dc0 	call	c2dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
   111c8:	00800134 	movhi	r2,4
   111cc:	1090fb04 	addi	r2,r2,17388
   111d0:	10800117 	ldw	r2,4(r2)
   111d4:	1080020b 	ldhu	r2,8(r2)
   111d8:	10bfffcc 	andi	r2,r2,65535
   111dc:	10000726 	beq	r2,zero,111fc <tcp_receive+0x14e8>
          recv_data = inseg.p;
   111e0:	00800134 	movhi	r2,4
   111e4:	1090fb04 	addi	r2,r2,17388
   111e8:	10800117 	ldw	r2,4(r2)
   111ec:	d0a8c315 	stw	r2,-23796(gp)
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
   111f0:	00800134 	movhi	r2,4
   111f4:	1090fb04 	addi	r2,r2,17388
   111f8:	10000115 	stw	zero,4(r2)
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
   111fc:	00800134 	movhi	r2,4
   11200:	1090fb04 	addi	r2,r2,17388
   11204:	10800317 	ldw	r2,12(r2)
   11208:	1080030b 	ldhu	r2,12(r2)
   1120c:	10bfffcc 	andi	r2,r2,65535
   11210:	1004d23a 	srli	r2,r2,8
   11214:	10ffffcc 	andi	r3,r2,65535
   11218:	00800134 	movhi	r2,4
   1121c:	1090fb04 	addi	r2,r2,17388
   11220:	10800317 	ldw	r2,12(r2)
   11224:	1080030b 	ldhu	r2,12(r2)
   11228:	10bfffcc 	andi	r2,r2,65535
   1122c:	1004923a 	slli	r2,r2,8
   11230:	10bfffcc 	andi	r2,r2,65535
   11234:	1884b03a 	or	r2,r3,r2
   11238:	1080004c 	andi	r2,r2,1
   1123c:	10009726 	beq	r2,zero,1149c <tcp_receive+0x1788>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
   11240:	d0a8c203 	ldbu	r2,-23800(gp)
   11244:	10800814 	ori	r2,r2,32
   11248:	d0a8c205 	stb	r2,-23800(gp)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
   1124c:	00009306 	br	1149c <tcp_receive+0x1788>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
   11250:	e0bfff17 	ldw	r2,-4(fp)
   11254:	10801e17 	ldw	r2,120(r2)
   11258:	e0bffe15 	stw	r2,-8(fp)
          seqno = pcb->ooseq->tcphdr->seqno;
   1125c:	e0bfff17 	ldw	r2,-4(fp)
   11260:	10801e17 	ldw	r2,120(r2)
   11264:	10800317 	ldw	r2,12(r2)
   11268:	10c0010b 	ldhu	r3,4(r2)
   1126c:	1080018b 	ldhu	r2,6(r2)
   11270:	1004943a 	slli	r2,r2,16
   11274:	10c4b03a 	or	r2,r2,r3
   11278:	d0a8bf15 	stw	r2,-23812(gp)

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
   1127c:	e0bfff17 	ldw	r2,-4(fp)
   11280:	10c00b17 	ldw	r3,44(r2)
   11284:	e0bffe17 	ldw	r2,-8(fp)
   11288:	1080020b 	ldhu	r2,8(r2)
   1128c:	113fffcc 	andi	r4,r2,65535
   11290:	e0bffe17 	ldw	r2,-8(fp)
   11294:	10800317 	ldw	r2,12(r2)
   11298:	1080030b 	ldhu	r2,12(r2)
   1129c:	10bfffcc 	andi	r2,r2,65535
   112a0:	1004d23a 	srli	r2,r2,8
   112a4:	117fffcc 	andi	r5,r2,65535
   112a8:	e0bffe17 	ldw	r2,-8(fp)
   112ac:	10800317 	ldw	r2,12(r2)
   112b0:	1080030b 	ldhu	r2,12(r2)
   112b4:	10bfffcc 	andi	r2,r2,65535
   112b8:	1004923a 	slli	r2,r2,8
   112bc:	10bfffcc 	andi	r2,r2,65535
   112c0:	2884b03a 	or	r2,r5,r2
   112c4:	108000cc 	andi	r2,r2,3
   112c8:	1004c03a 	cmpne	r2,r2,zero
   112cc:	10803fcc 	andi	r2,r2,255
   112d0:	2085883a 	add	r2,r4,r2
   112d4:	1887883a 	add	r3,r3,r2
   112d8:	e0bfff17 	ldw	r2,-4(fp)
   112dc:	10c00b15 	stw	r3,44(r2)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
   112e0:	e0bfff17 	ldw	r2,-4(fp)
   112e4:	10800c0b 	ldhu	r2,48(r2)
   112e8:	10ffffcc 	andi	r3,r2,65535
   112ec:	e0bffe17 	ldw	r2,-8(fp)
   112f0:	1080020b 	ldhu	r2,8(r2)
   112f4:	113fffcc 	andi	r4,r2,65535
   112f8:	e0bffe17 	ldw	r2,-8(fp)
   112fc:	10800317 	ldw	r2,12(r2)
   11300:	1080030b 	ldhu	r2,12(r2)
   11304:	10bfffcc 	andi	r2,r2,65535
   11308:	1004d23a 	srli	r2,r2,8
   1130c:	117fffcc 	andi	r5,r2,65535
   11310:	e0bffe17 	ldw	r2,-8(fp)
   11314:	10800317 	ldw	r2,12(r2)
   11318:	1080030b 	ldhu	r2,12(r2)
   1131c:	10bfffcc 	andi	r2,r2,65535
   11320:	1004923a 	slli	r2,r2,8
   11324:	10bfffcc 	andi	r2,r2,65535
   11328:	2884b03a 	or	r2,r5,r2
   1132c:	108000cc 	andi	r2,r2,3
   11330:	1004c03a 	cmpne	r2,r2,zero
   11334:	10803fcc 	andi	r2,r2,255
   11338:	2085883a 	add	r2,r4,r2
   1133c:	1880090e 	bge	r3,r2,11364 <tcp_receive+0x1650>
   11340:	010000f4 	movhi	r4,3
   11344:	213fb204 	addi	r4,r4,-312
   11348:	014000f4 	movhi	r5,3
   1134c:	29406c04 	addi	r5,r5,432
   11350:	01814dc4 	movi	r6,1335
   11354:	01c000f4 	movhi	r7,3
   11358:	39ffc604 	addi	r7,r7,-232
   1135c:	0017c440 	call	17c44 <printf>
   11360:	003fff06 	br	11360 <tcp_receive+0x164c>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
   11364:	e0bfff17 	ldw	r2,-4(fp)
   11368:	10c00c0b 	ldhu	r3,48(r2)
   1136c:	e0bffe17 	ldw	r2,-8(fp)
   11370:	1100020b 	ldhu	r4,8(r2)
   11374:	e0bffe17 	ldw	r2,-8(fp)
   11378:	10800317 	ldw	r2,12(r2)
   1137c:	1080030b 	ldhu	r2,12(r2)
   11380:	10bfffcc 	andi	r2,r2,65535
   11384:	1004d23a 	srli	r2,r2,8
   11388:	117fffcc 	andi	r5,r2,65535
   1138c:	e0bffe17 	ldw	r2,-8(fp)
   11390:	10800317 	ldw	r2,12(r2)
   11394:	1080030b 	ldhu	r2,12(r2)
   11398:	10bfffcc 	andi	r2,r2,65535
   1139c:	1004923a 	slli	r2,r2,8
   113a0:	10bfffcc 	andi	r2,r2,65535
   113a4:	2884b03a 	or	r2,r5,r2
   113a8:	108000cc 	andi	r2,r2,3
   113ac:	1004c03a 	cmpne	r2,r2,zero
   113b0:	10803fcc 	andi	r2,r2,255
   113b4:	2085883a 	add	r2,r4,r2
   113b8:	1885c83a 	sub	r2,r3,r2
   113bc:	1007883a 	mov	r3,r2
   113c0:	e0bfff17 	ldw	r2,-4(fp)
   113c4:	10c00c0d 	sth	r3,48(r2)

          tcp_update_rcv_ann_wnd(pcb);
   113c8:	e13fff17 	ldw	r4,-4(fp)
   113cc:	000c2dc0 	call	c2dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
   113d0:	e0bffe17 	ldw	r2,-8(fp)
   113d4:	10800117 	ldw	r2,4(r2)
   113d8:	1080020b 	ldhu	r2,8(r2)
   113dc:	10bfffcc 	andi	r2,r2,65535
   113e0:	10000e26 	beq	r2,zero,1141c <tcp_receive+0x1708>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
   113e4:	d0a8c317 	ldw	r2,-23796(gp)
   113e8:	10000726 	beq	r2,zero,11408 <tcp_receive+0x16f4>
              pbuf_cat(recv_data, cseg->p);
   113ec:	d0e8c317 	ldw	r3,-23796(gp)
   113f0:	e0bffe17 	ldw	r2,-8(fp)
   113f4:	10800117 	ldw	r2,4(r2)
   113f8:	1809883a 	mov	r4,r3
   113fc:	100b883a 	mov	r5,r2
   11400:	000a6780 	call	a678 <pbuf_cat>
   11404:	00000306 	br	11414 <tcp_receive+0x1700>
            } else {
              recv_data = cseg->p;
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	10800117 	ldw	r2,4(r2)
   11410:	d0a8c315 	stw	r2,-23796(gp)
            }
            cseg->p = NULL;
   11414:	e0bffe17 	ldw	r2,-8(fp)
   11418:	10000115 	stw	zero,4(r2)
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
   1141c:	e0bffe17 	ldw	r2,-8(fp)
   11420:	10800317 	ldw	r2,12(r2)
   11424:	1080030b 	ldhu	r2,12(r2)
   11428:	10bfffcc 	andi	r2,r2,65535
   1142c:	1004d23a 	srli	r2,r2,8
   11430:	10ffffcc 	andi	r3,r2,65535
   11434:	e0bffe17 	ldw	r2,-8(fp)
   11438:	10800317 	ldw	r2,12(r2)
   1143c:	1080030b 	ldhu	r2,12(r2)
   11440:	10bfffcc 	andi	r2,r2,65535
   11444:	1004923a 	slli	r2,r2,8
   11448:	10bfffcc 	andi	r2,r2,65535
   1144c:	1884b03a 	or	r2,r3,r2
   11450:	1080004c 	andi	r2,r2,1
   11454:	10000a26 	beq	r2,zero,11480 <tcp_receive+0x176c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
   11458:	d0a8c203 	ldbu	r2,-23800(gp)
   1145c:	10800814 	ori	r2,r2,32
   11460:	d0a8c205 	stb	r2,-23800(gp)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
   11464:	e0bfff17 	ldw	r2,-4(fp)
   11468:	10800617 	ldw	r2,24(r2)
   1146c:	10800118 	cmpnei	r2,r2,4
   11470:	1000031e 	bne	r2,zero,11480 <tcp_receive+0x176c>
              pcb->state = CLOSE_WAIT;
   11474:	e0bfff17 	ldw	r2,-4(fp)
   11478:	00c001c4 	movi	r3,7
   1147c:	10c00615 	stw	r3,24(r2)
            } 
          }

          pcb->ooseq = cseg->next;
   11480:	e0bffe17 	ldw	r2,-8(fp)
   11484:	10c00017 	ldw	r3,0(r2)
   11488:	e0bfff17 	ldw	r2,-4(fp)
   1148c:	10c01e15 	stw	r3,120(r2)
          tcp_seg_free(cseg);
   11490:	e13ffe17 	ldw	r4,-8(fp)
   11494:	000d3f40 	call	d3f4 <tcp_seg_free>
   11498:	00000106 	br	114a0 <tcp_receive+0x178c>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
   1149c:	0001883a 	nop
   114a0:	e0bfff17 	ldw	r2,-4(fp)
   114a4:	10801e17 	ldw	r2,120(r2)
   114a8:	10000b26 	beq	r2,zero,114d8 <tcp_receive+0x17c4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
   114ac:	e0bfff17 	ldw	r2,-4(fp)
   114b0:	10801e17 	ldw	r2,120(r2)
   114b4:	10800317 	ldw	r2,12(r2)
   114b8:	10c0010b 	ldhu	r3,4(r2)
   114bc:	1080018b 	ldhu	r2,6(r2)
   114c0:	1004943a 	slli	r2,r2,16
   114c4:	10c4b03a 	or	r2,r2,r3
   114c8:	1007883a 	mov	r3,r2
   114cc:	e0bfff17 	ldw	r2,-4(fp)
   114d0:	10800b17 	ldw	r2,44(r2)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
   114d4:	18bf5e26 	beq	r3,r2,11250 <tcp_receive+0x153c>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
   114d8:	e0bfff17 	ldw	r2,-4(fp)
   114dc:	10800883 	ldbu	r2,34(r2)
   114e0:	10803fcc 	andi	r2,r2,255
   114e4:	1080004c 	andi	r2,r2,1
   114e8:	10000e26 	beq	r2,zero,11524 <tcp_receive+0x1810>
   114ec:	e0bfff17 	ldw	r2,-4(fp)
   114f0:	10c00883 	ldbu	r3,34(r2)
   114f4:	00bfff84 	movi	r2,-2
   114f8:	1884703a 	and	r2,r3,r2
   114fc:	1007883a 	mov	r3,r2
   11500:	e0bfff17 	ldw	r2,-4(fp)
   11504:	10c00885 	stb	r3,34(r2)
   11508:	e0bfff17 	ldw	r2,-4(fp)
   1150c:	10800883 	ldbu	r2,34(r2)
   11510:	10800094 	ori	r2,r2,2
   11514:	1007883a 	mov	r3,r2
   11518:	e0bfff17 	ldw	r2,-4(fp)
   1151c:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   11520:	00016b06 	br	11ad0 <tcp_receive+0x1dbc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
   11524:	e0bfff17 	ldw	r2,-4(fp)
   11528:	10800883 	ldbu	r2,34(r2)
   1152c:	10800054 	ori	r2,r2,1
   11530:	1007883a 	mov	r3,r2
   11534:	e0bfff17 	ldw	r2,-4(fp)
   11538:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   1153c:	00016406 	br	11ad0 <tcp_receive+0x1dbc>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
   11540:	e13fff17 	ldw	r4,-4(fp)
   11544:	00133180 	call	13318 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
   11548:	e0bfff17 	ldw	r2,-4(fp)
   1154c:	10801e17 	ldw	r2,120(r2)
   11550:	1000061e 	bne	r2,zero,1156c <tcp_receive+0x1858>
          pcb->ooseq = tcp_seg_copy(&inseg);
   11554:	01000134 	movhi	r4,4
   11558:	2110fb04 	addi	r4,r4,17388
   1155c:	000d4800 	call	d480 <tcp_seg_copy>
   11560:	e0ffff17 	ldw	r3,-4(fp)
   11564:	18801e15 	stw	r2,120(r3)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   11568:	00015906 	br	11ad0 <tcp_receive+0x1dbc>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
   1156c:	e03ff615 	stw	zero,-40(fp)
          for(next = pcb->ooseq; next != NULL; next = next->next) {
   11570:	e0bfff17 	ldw	r2,-4(fp)
   11574:	10801e17 	ldw	r2,120(r2)
   11578:	e0bff515 	stw	r2,-44(fp)
   1157c:	00014206 	br	11a88 <tcp_receive+0x1d74>
            if (seqno == next->tcphdr->seqno) {
   11580:	e0bff517 	ldw	r2,-44(fp)
   11584:	10800317 	ldw	r2,12(r2)
   11588:	10c0010b 	ldhu	r3,4(r2)
   1158c:	1080018b 	ldhu	r2,6(r2)
   11590:	1004943a 	slli	r2,r2,16
   11594:	10c4b03a 	or	r2,r2,r3
   11598:	1007883a 	mov	r3,r2
   1159c:	d0a8bf17 	ldw	r2,-23812(gp)
   115a0:	18801b1e 	bne	r3,r2,11610 <tcp_receive+0x18fc>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
   115a4:	00800134 	movhi	r2,4
   115a8:	1090fb04 	addi	r2,r2,17388
   115ac:	1080020b 	ldhu	r2,8(r2)
   115b0:	e0fff517 	ldw	r3,-44(fp)
   115b4:	18c0020b 	ldhu	r3,8(r3)
   115b8:	10bfffcc 	andi	r2,r2,65535
   115bc:	18ffffcc 	andi	r3,r3,65535
   115c0:	1881342e 	bgeu	r3,r2,11a94 <tcp_receive+0x1d80>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
   115c4:	01000134 	movhi	r4,4
   115c8:	2110fb04 	addi	r4,r4,17388
   115cc:	000d4800 	call	d480 <tcp_seg_copy>
   115d0:	e0bffe15 	stw	r2,-8(fp)
                if (cseg != NULL) {
   115d4:	e0bffe17 	ldw	r2,-8(fp)
   115d8:	10013026 	beq	r2,zero,11a9c <tcp_receive+0x1d88>
                  if (prev != NULL) {
   115dc:	e0bff617 	ldw	r2,-40(fp)
   115e0:	10000426 	beq	r2,zero,115f4 <tcp_receive+0x18e0>
                    prev->next = cseg;
   115e4:	e0bff617 	ldw	r2,-40(fp)
   115e8:	e0fffe17 	ldw	r3,-8(fp)
   115ec:	10c00015 	stw	r3,0(r2)
   115f0:	00000306 	br	11600 <tcp_receive+0x18ec>
                  } else {
                    pcb->ooseq = cseg;
   115f4:	e0bfff17 	ldw	r2,-4(fp)
   115f8:	e0fffe17 	ldw	r3,-8(fp)
   115fc:	10c01e15 	stw	r3,120(r2)
                  }
                  tcp_oos_insert_segment(cseg, next);
   11600:	e13ffe17 	ldw	r4,-8(fp)
   11604:	e17ff517 	ldw	r5,-44(fp)
   11608:	000fb400 	call	fb40 <tcp_oos_insert_segment>
                }
                break;
   1160c:	00012306 	br	11a9c <tcp_receive+0x1d88>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
   11610:	e0bff617 	ldw	r2,-40(fp)
   11614:	1000161e 	bne	r2,zero,11670 <tcp_receive+0x195c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
   11618:	d0e8bf17 	ldw	r3,-23812(gp)
   1161c:	e0bff517 	ldw	r2,-44(fp)
   11620:	10800317 	ldw	r2,12(r2)
   11624:	1100010b 	ldhu	r4,4(r2)
   11628:	1080018b 	ldhu	r2,6(r2)
   1162c:	1004943a 	slli	r2,r2,16
   11630:	1104b03a 	or	r2,r2,r4
   11634:	1885c83a 	sub	r2,r3,r2
   11638:	1000500e 	bge	r2,zero,1177c <tcp_receive+0x1a68>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
   1163c:	01000134 	movhi	r4,4
   11640:	2110fb04 	addi	r4,r4,17388
   11644:	000d4800 	call	d480 <tcp_seg_copy>
   11648:	e0bffe15 	stw	r2,-8(fp)
                  if (cseg != NULL) {
   1164c:	e0bffe17 	ldw	r2,-8(fp)
   11650:	10011426 	beq	r2,zero,11aa4 <tcp_receive+0x1d90>
                    pcb->ooseq = cseg;
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	e0fffe17 	ldw	r3,-8(fp)
   1165c:	10c01e15 	stw	r3,120(r2)
                    tcp_oos_insert_segment(cseg, next);
   11660:	e13ffe17 	ldw	r4,-8(fp)
   11664:	e17ff517 	ldw	r5,-44(fp)
   11668:	000fb400 	call	fb40 <tcp_oos_insert_segment>
                  }
                  break;
   1166c:	00010d06 	br	11aa4 <tcp_receive+0x1d90>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
   11670:	e0bff617 	ldw	r2,-40(fp)
   11674:	10800317 	ldw	r2,12(r2)
   11678:	10c0010b 	ldhu	r3,4(r2)
   1167c:	1080018b 	ldhu	r2,6(r2)
   11680:	1004943a 	slli	r2,r2,16
   11684:	10c4b03a 	or	r2,r2,r3
   11688:	0086303a 	nor	r3,zero,r2
   1168c:	d0a8bf17 	ldw	r2,-23812(gp)
   11690:	1885883a 	add	r2,r3,r2
   11694:	10003916 	blt	r2,zero,1177c <tcp_receive+0x1a68>
   11698:	d0e8bf17 	ldw	r3,-23812(gp)
   1169c:	e0bff517 	ldw	r2,-44(fp)
   116a0:	10800317 	ldw	r2,12(r2)
   116a4:	1100010b 	ldhu	r4,4(r2)
   116a8:	1080018b 	ldhu	r2,6(r2)
   116ac:	1004943a 	slli	r2,r2,16
   116b0:	1104b03a 	or	r2,r2,r4
   116b4:	1885c83a 	sub	r2,r3,r2
   116b8:	10800044 	addi	r2,r2,1
   116bc:	00802f16 	blt	zero,r2,1177c <tcp_receive+0x1a68>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
   116c0:	01000134 	movhi	r4,4
   116c4:	2110fb04 	addi	r4,r4,17388
   116c8:	000d4800 	call	d480 <tcp_seg_copy>
   116cc:	e0bffe15 	stw	r2,-8(fp)
                  if (cseg != NULL) {
   116d0:	e0bffe17 	ldw	r2,-8(fp)
   116d4:	1000f526 	beq	r2,zero,11aac <tcp_receive+0x1d98>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
   116d8:	e0bff617 	ldw	r2,-40(fp)
   116dc:	10800317 	ldw	r2,12(r2)
   116e0:	10c0010b 	ldhu	r3,4(r2)
   116e4:	1080018b 	ldhu	r2,6(r2)
   116e8:	1004943a 	slli	r2,r2,16
   116ec:	10c4b03a 	or	r2,r2,r3
   116f0:	1007883a 	mov	r3,r2
   116f4:	e0bff617 	ldw	r2,-40(fp)
   116f8:	1080020b 	ldhu	r2,8(r2)
   116fc:	10bfffcc 	andi	r2,r2,65535
   11700:	1887883a 	add	r3,r3,r2
   11704:	d0a8bf17 	ldw	r2,-23812(gp)
   11708:	1885c83a 	sub	r2,r3,r2
   1170c:	0080140e 	bge	zero,r2,11760 <tcp_receive+0x1a4c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
   11710:	d0a8bf17 	ldw	r2,-23812(gp)
   11714:	1007883a 	mov	r3,r2
   11718:	e0bff617 	ldw	r2,-40(fp)
   1171c:	10800317 	ldw	r2,12(r2)
   11720:	1100010b 	ldhu	r4,4(r2)
   11724:	1080018b 	ldhu	r2,6(r2)
   11728:	1004943a 	slli	r2,r2,16
   1172c:	1104b03a 	or	r2,r2,r4
   11730:	1885c83a 	sub	r2,r3,r2
   11734:	1007883a 	mov	r3,r2
   11738:	e0bff617 	ldw	r2,-40(fp)
   1173c:	10c0020d 	sth	r3,8(r2)
                      pbuf_realloc(prev->p, prev->len);
   11740:	e0bff617 	ldw	r2,-40(fp)
   11744:	10c00117 	ldw	r3,4(r2)
   11748:	e0bff617 	ldw	r2,-40(fp)
   1174c:	1080020b 	ldhu	r2,8(r2)
   11750:	10bfffcc 	andi	r2,r2,65535
   11754:	1809883a 	mov	r4,r3
   11758:	100b883a 	mov	r5,r2
   1175c:	0009fa40 	call	9fa4 <pbuf_realloc>
                    }
                    prev->next = cseg;
   11760:	e0bff617 	ldw	r2,-40(fp)
   11764:	e0fffe17 	ldw	r3,-8(fp)
   11768:	10c00015 	stw	r3,0(r2)
                    tcp_oos_insert_segment(cseg, next);
   1176c:	e13ffe17 	ldw	r4,-8(fp)
   11770:	e17ff517 	ldw	r5,-44(fp)
   11774:	000fb400 	call	fb40 <tcp_oos_insert_segment>
                  }
                  break;
   11778:	0000cc06 	br	11aac <tcp_receive+0x1d98>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
   1177c:	e0bff517 	ldw	r2,-44(fp)
   11780:	10800017 	ldw	r2,0(r2)
   11784:	1000bb1e 	bne	r2,zero,11a74 <tcp_receive+0x1d60>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
   11788:	d0e8bf17 	ldw	r3,-23812(gp)
   1178c:	e0bff517 	ldw	r2,-44(fp)
   11790:	10800317 	ldw	r2,12(r2)
   11794:	1100010b 	ldhu	r4,4(r2)
   11798:	1080018b 	ldhu	r2,6(r2)
   1179c:	1004943a 	slli	r2,r2,16
   117a0:	1104b03a 	or	r2,r2,r4
   117a4:	1885c83a 	sub	r2,r3,r2
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
   117a8:	0080b20e 	bge	zero,r2,11a74 <tcp_receive+0x1d60>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
   117ac:	e0bff517 	ldw	r2,-44(fp)
   117b0:	10800317 	ldw	r2,12(r2)
   117b4:	1080030b 	ldhu	r2,12(r2)
   117b8:	10bfffcc 	andi	r2,r2,65535
   117bc:	1004d23a 	srli	r2,r2,8
   117c0:	10ffffcc 	andi	r3,r2,65535
   117c4:	e0bff517 	ldw	r2,-44(fp)
   117c8:	10800317 	ldw	r2,12(r2)
   117cc:	1080030b 	ldhu	r2,12(r2)
   117d0:	10bfffcc 	andi	r2,r2,65535
   117d4:	1004923a 	slli	r2,r2,8
   117d8:	10bfffcc 	andi	r2,r2,65535
   117dc:	1884b03a 	or	r2,r3,r2
   117e0:	1080004c 	andi	r2,r2,1
   117e4:	1000b31e 	bne	r2,zero,11ab4 <tcp_receive+0x1da0>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
   117e8:	01000134 	movhi	r4,4
   117ec:	2110fb04 	addi	r4,r4,17388
   117f0:	000d4800 	call	d480 <tcp_seg_copy>
   117f4:	e0fff517 	ldw	r3,-44(fp)
   117f8:	18800015 	stw	r2,0(r3)
                if (next->next != NULL) {
   117fc:	e0bff517 	ldw	r2,-44(fp)
   11800:	10800017 	ldw	r2,0(r2)
   11804:	1000ad26 	beq	r2,zero,11abc <tcp_receive+0x1da8>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
   11808:	e0bff517 	ldw	r2,-44(fp)
   1180c:	10800317 	ldw	r2,12(r2)
   11810:	10c0010b 	ldhu	r3,4(r2)
   11814:	1080018b 	ldhu	r2,6(r2)
   11818:	1004943a 	slli	r2,r2,16
   1181c:	10c4b03a 	or	r2,r2,r3
   11820:	1007883a 	mov	r3,r2
   11824:	e0bff517 	ldw	r2,-44(fp)
   11828:	1080020b 	ldhu	r2,8(r2)
   1182c:	10bfffcc 	andi	r2,r2,65535
   11830:	1887883a 	add	r3,r3,r2
   11834:	d0a8bf17 	ldw	r2,-23812(gp)
   11838:	1885c83a 	sub	r2,r3,r2
   1183c:	0080140e 	bge	zero,r2,11890 <tcp_receive+0x1b7c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
   11840:	d0a8bf17 	ldw	r2,-23812(gp)
   11844:	1007883a 	mov	r3,r2
   11848:	e0bff517 	ldw	r2,-44(fp)
   1184c:	10800317 	ldw	r2,12(r2)
   11850:	1100010b 	ldhu	r4,4(r2)
   11854:	1080018b 	ldhu	r2,6(r2)
   11858:	1004943a 	slli	r2,r2,16
   1185c:	1104b03a 	or	r2,r2,r4
   11860:	1885c83a 	sub	r2,r3,r2
   11864:	1007883a 	mov	r3,r2
   11868:	e0bff517 	ldw	r2,-44(fp)
   1186c:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->p, next->len);
   11870:	e0bff517 	ldw	r2,-44(fp)
   11874:	10c00117 	ldw	r3,4(r2)
   11878:	e0bff517 	ldw	r2,-44(fp)
   1187c:	1080020b 	ldhu	r2,8(r2)
   11880:	10bfffcc 	andi	r2,r2,65535
   11884:	1809883a 	mov	r4,r3
   11888:	100b883a 	mov	r5,r2
   1188c:	0009fa40 	call	9fa4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
   11890:	d0a8c18b 	ldhu	r2,-23802(gp)
   11894:	10ffffcc 	andi	r3,r2,65535
   11898:	d0a8bf17 	ldw	r2,-23812(gp)
   1189c:	1885883a 	add	r2,r3,r2
   118a0:	e0ffff17 	ldw	r3,-4(fp)
   118a4:	19000b17 	ldw	r4,44(r3)
   118a8:	e0ffff17 	ldw	r3,-4(fp)
   118ac:	18c00c0b 	ldhu	r3,48(r3)
   118b0:	18ffffcc 	andi	r3,r3,65535
   118b4:	20c7883a 	add	r3,r4,r3
   118b8:	1880802e 	bgeu	r3,r2,11abc <tcp_receive+0x1da8>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
   118bc:	e0bff517 	ldw	r2,-44(fp)
   118c0:	10800017 	ldw	r2,0(r2)
   118c4:	10800317 	ldw	r2,12(r2)
   118c8:	1080030b 	ldhu	r2,12(r2)
   118cc:	10bfffcc 	andi	r2,r2,65535
   118d0:	1004d23a 	srli	r2,r2,8
   118d4:	10ffffcc 	andi	r3,r2,65535
   118d8:	e0bff517 	ldw	r2,-44(fp)
   118dc:	10800017 	ldw	r2,0(r2)
   118e0:	10800317 	ldw	r2,12(r2)
   118e4:	1080030b 	ldhu	r2,12(r2)
   118e8:	10bfffcc 	andi	r2,r2,65535
   118ec:	1004923a 	slli	r2,r2,8
   118f0:	10bfffcc 	andi	r2,r2,65535
   118f4:	1884b03a 	or	r2,r3,r2
   118f8:	1080004c 	andi	r2,r2,1
   118fc:	10001c26 	beq	r2,zero,11970 <tcp_receive+0x1c5c>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
   11900:	e0bff517 	ldw	r2,-44(fp)
   11904:	10800017 	ldw	r2,0(r2)
   11908:	10800317 	ldw	r2,12(r2)
   1190c:	e0fff517 	ldw	r3,-44(fp)
   11910:	18c00017 	ldw	r3,0(r3)
   11914:	18c00317 	ldw	r3,12(r3)
   11918:	1900030b 	ldhu	r4,12(r3)
   1191c:	00f03fc4 	movi	r3,-16129
   11920:	20c6703a 	and	r3,r4,r3
   11924:	1809883a 	mov	r4,r3
   11928:	e0fff517 	ldw	r3,-44(fp)
   1192c:	18c00017 	ldw	r3,0(r3)
   11930:	18c00317 	ldw	r3,12(r3)
   11934:	18c0030b 	ldhu	r3,12(r3)
   11938:	18ffffcc 	andi	r3,r3,65535
   1193c:	1806d23a 	srli	r3,r3,8
   11940:	180b883a 	mov	r5,r3
   11944:	e0fff517 	ldw	r3,-44(fp)
   11948:	18c00017 	ldw	r3,0(r3)
   1194c:	18c00317 	ldw	r3,12(r3)
   11950:	18c0030b 	ldhu	r3,12(r3)
   11954:	18ffffcc 	andi	r3,r3,65535
   11958:	1806923a 	slli	r3,r3,8
   1195c:	28c6b03a 	or	r3,r5,r3
   11960:	18c00f8c 	andi	r3,r3,62
   11964:	1806923a 	slli	r3,r3,8
   11968:	20c6b03a 	or	r3,r4,r3
   1196c:	10c0030d 	sth	r3,12(r2)
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
   11970:	e0bff517 	ldw	r2,-44(fp)
   11974:	10800017 	ldw	r2,0(r2)
   11978:	e0ffff17 	ldw	r3,-4(fp)
   1197c:	18c00b17 	ldw	r3,44(r3)
   11980:	1809883a 	mov	r4,r3
   11984:	e0ffff17 	ldw	r3,-4(fp)
   11988:	18c00c0b 	ldhu	r3,48(r3)
   1198c:	20c7883a 	add	r3,r4,r3
   11990:	1809883a 	mov	r4,r3
   11994:	d0e8bf17 	ldw	r3,-23812(gp)
   11998:	20c7c83a 	sub	r3,r4,r3
   1199c:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->next->p, next->next->len);
   119a0:	e0bff517 	ldw	r2,-44(fp)
   119a4:	10800017 	ldw	r2,0(r2)
   119a8:	10c00117 	ldw	r3,4(r2)
   119ac:	e0bff517 	ldw	r2,-44(fp)
   119b0:	10800017 	ldw	r2,0(r2)
   119b4:	1080020b 	ldhu	r2,8(r2)
   119b8:	10bfffcc 	andi	r2,r2,65535
   119bc:	1809883a 	mov	r4,r3
   119c0:	100b883a 	mov	r5,r2
   119c4:	0009fa40 	call	9fa4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
   119c8:	e0bff517 	ldw	r2,-44(fp)
   119cc:	10800017 	ldw	r2,0(r2)
   119d0:	10c0020b 	ldhu	r3,8(r2)
   119d4:	e0bff517 	ldw	r2,-44(fp)
   119d8:	10800017 	ldw	r2,0(r2)
   119dc:	10800317 	ldw	r2,12(r2)
   119e0:	1080030b 	ldhu	r2,12(r2)
   119e4:	10bfffcc 	andi	r2,r2,65535
   119e8:	1004d23a 	srli	r2,r2,8
   119ec:	113fffcc 	andi	r4,r2,65535
   119f0:	e0bff517 	ldw	r2,-44(fp)
   119f4:	10800017 	ldw	r2,0(r2)
   119f8:	10800317 	ldw	r2,12(r2)
   119fc:	1080030b 	ldhu	r2,12(r2)
   11a00:	10bfffcc 	andi	r2,r2,65535
   11a04:	1004923a 	slli	r2,r2,8
   11a08:	10bfffcc 	andi	r2,r2,65535
   11a0c:	2084b03a 	or	r2,r4,r2
   11a10:	108000cc 	andi	r2,r2,3
   11a14:	1004c03a 	cmpne	r2,r2,zero
   11a18:	10803fcc 	andi	r2,r2,255
   11a1c:	1885883a 	add	r2,r3,r2
   11a20:	d0a8c18d 	sth	r2,-23802(gp)
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
   11a24:	d0a8c18b 	ldhu	r2,-23802(gp)
   11a28:	10ffffcc 	andi	r3,r2,65535
   11a2c:	d0a8bf17 	ldw	r2,-23812(gp)
   11a30:	1887883a 	add	r3,r3,r2
   11a34:	e0bfff17 	ldw	r2,-4(fp)
   11a38:	11000b17 	ldw	r4,44(r2)
   11a3c:	e0bfff17 	ldw	r2,-4(fp)
   11a40:	10800c0b 	ldhu	r2,48(r2)
   11a44:	10bfffcc 	andi	r2,r2,65535
   11a48:	2085883a 	add	r2,r4,r2
   11a4c:	18801b26 	beq	r3,r2,11abc <tcp_receive+0x1da8>
   11a50:	010000f4 	movhi	r4,3
   11a54:	213fb204 	addi	r4,r4,-312
   11a58:	014000f4 	movhi	r5,3
   11a5c:	29404704 	addi	r5,r5,284
   11a60:	01817284 	movi	r6,1482
   11a64:	01c000f4 	movhi	r7,3
   11a68:	39ffc604 	addi	r7,r7,-232
   11a6c:	0017c440 	call	17c44 <printf>
   11a70:	003fff06 	br	11a70 <tcp_receive+0x1d5c>
                  }
                }
                break;
              }
            }
            prev = next;
   11a74:	e0bff517 	ldw	r2,-44(fp)
   11a78:	e0bff615 	stw	r2,-40(fp)
             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
   11a7c:	e0bff517 	ldw	r2,-44(fp)
   11a80:	10800017 	ldw	r2,0(r2)
   11a84:	e0bff515 	stw	r2,-44(fp)
   11a88:	e0bff517 	ldw	r2,-44(fp)
   11a8c:	103ebc1e 	bne	r2,zero,11580 <tcp_receive+0x186c>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   11a90:	00000f06 	br	11ad0 <tcp_receive+0x1dbc>
                break;
              } else {
                /* Either the lenghts are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
   11a94:	0001883a 	nop
   11a98:	00000906 	br	11ac0 <tcp_receive+0x1dac>
                  } else {
                    pcb->ooseq = cseg;
                  }
                  tcp_oos_insert_segment(cseg, next);
                }
                break;
   11a9c:	0001883a 	nop
   11aa0:	00000706 	br	11ac0 <tcp_receive+0x1dac>
                  cseg = tcp_seg_copy(&inseg);
                  if (cseg != NULL) {
                    pcb->ooseq = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
   11aa4:	0001883a 	nop
   11aa8:	00000506 	br	11ac0 <tcp_receive+0x1dac>
                      pbuf_realloc(prev->p, prev->len);
                    }
                    prev->next = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
   11aac:	0001883a 	nop
   11ab0:	00000306 	br	11ac0 <tcp_receive+0x1dac>
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
                  /* segment "next" already contains all data */
                  break;
   11ab4:	0001883a 	nop
   11ab8:	00000106 	br	11ac0 <tcp_receive+0x1dac>
                    tcplen = TCP_TCPLEN(next->next);
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
   11abc:	0001883a 	nop
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
   11ac0:	00000306 	br	11ad0 <tcp_receive+0x1dbc>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
   11ac4:	e13fff17 	ldw	r4,-4(fp)
   11ac8:	00133180 	call	13318 <tcp_send_empty_ack>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
   11acc:	00001606 	br	11b28 <tcp_receive+0x1e14>
   11ad0:	00001506 	br	11b28 <tcp_receive+0x1e14>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
   11ad4:	d0e8bf17 	ldw	r3,-23812(gp)
   11ad8:	e0bfff17 	ldw	r2,-4(fp)
   11adc:	10800b17 	ldw	r2,44(r2)
   11ae0:	1885c83a 	sub	r2,r3,r2
   11ae4:	10000a16 	blt	r2,zero,11b10 <tcp_receive+0x1dfc>
   11ae8:	d0e8bf17 	ldw	r3,-23812(gp)
   11aec:	e0bfff17 	ldw	r2,-4(fp)
   11af0:	11000b17 	ldw	r4,44(r2)
   11af4:	e0bfff17 	ldw	r2,-4(fp)
   11af8:	10800c0b 	ldhu	r2,48(r2)
   11afc:	10bfffcc 	andi	r2,r2,65535
   11b00:	2085883a 	add	r2,r4,r2
   11b04:	1885c83a 	sub	r2,r3,r2
   11b08:	10800044 	addi	r2,r2,1
   11b0c:	0080060e 	bge	zero,r2,11b28 <tcp_receive+0x1e14>
      tcp_ack_now(pcb);
   11b10:	e0bfff17 	ldw	r2,-4(fp)
   11b14:	10800883 	ldbu	r2,34(r2)
   11b18:	10800094 	ori	r2,r2,2
   11b1c:	1007883a 	mov	r3,r2
   11b20:	e0bfff17 	ldw	r2,-4(fp)
   11b24:	10c00885 	stb	r3,34(r2)
    }
  }
}
   11b28:	e037883a 	mov	sp,fp
   11b2c:	dfc00217 	ldw	ra,8(sp)
   11b30:	df000117 	ldw	fp,4(sp)
   11b34:	dc000017 	ldw	r16,0(sp)
   11b38:	dec00304 	addi	sp,sp,12
   11b3c:	f800283a 	ret

00011b40 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
   11b40:	defffa04 	addi	sp,sp,-24
   11b44:	df000515 	stw	fp,20(sp)
   11b48:	df000504 	addi	fp,sp,20
   11b4c:	e13fff15 	stw	r4,-4(fp)
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
   11b50:	d0a8bd17 	ldw	r2,-23820(gp)
   11b54:	10800504 	addi	r2,r2,20
   11b58:	e0bffc15 	stw	r2,-16(fp)

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
   11b5c:	d0a8bd17 	ldw	r2,-23820(gp)
   11b60:	1080030b 	ldhu	r2,12(r2)
   11b64:	10bfffcc 	andi	r2,r2,65535
   11b68:	1004d23a 	srli	r2,r2,8
   11b6c:	10ffffcc 	andi	r3,r2,65535
   11b70:	d0a8bd17 	ldw	r2,-23820(gp)
   11b74:	1080030b 	ldhu	r2,12(r2)
   11b78:	10bfffcc 	andi	r2,r2,65535
   11b7c:	1004923a 	slli	r2,r2,8
   11b80:	10bfffcc 	andi	r2,r2,65535
   11b84:	1884b03a 	or	r2,r3,r2
   11b88:	1005d33a 	srai	r2,r2,12
   11b8c:	10800190 	cmplti	r2,r2,6
   11b90:	1000651e 	bne	r2,zero,11d28 <tcp_parseopt+0x1e8>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
   11b94:	d0a8bd17 	ldw	r2,-23820(gp)
   11b98:	1080030b 	ldhu	r2,12(r2)
   11b9c:	10bfffcc 	andi	r2,r2,65535
   11ba0:	1004d23a 	srli	r2,r2,8
   11ba4:	10ffffcc 	andi	r3,r2,65535
   11ba8:	d0a8bd17 	ldw	r2,-23820(gp)
   11bac:	1080030b 	ldhu	r2,12(r2)
   11bb0:	10bfffcc 	andi	r2,r2,65535
   11bb4:	1004923a 	slli	r2,r2,8
   11bb8:	10bfffcc 	andi	r2,r2,65535
   11bbc:	1884b03a 	or	r2,r3,r2
   11bc0:	1005d33a 	srai	r2,r2,12
   11bc4:	10bffec4 	addi	r2,r2,-5
   11bc8:	1085883a 	add	r2,r2,r2
   11bcc:	1085883a 	add	r2,r2,r2
   11bd0:	e0bffd0d 	sth	r2,-12(fp)
    for (c = 0; c < max_c; ) {
   11bd4:	e03ffb0d 	sth	zero,-20(fp)
   11bd8:	00004a06 	br	11d04 <tcp_parseopt+0x1c4>
      opt = opts[c];
   11bdc:	e0bffb0b 	ldhu	r2,-20(fp)
   11be0:	e0fffc17 	ldw	r3,-16(fp)
   11be4:	1885883a 	add	r2,r3,r2
   11be8:	10800003 	ldbu	r2,0(r2)
   11bec:	e0bffd85 	stb	r2,-10(fp)
      switch (opt) {
   11bf0:	e0bffd83 	ldbu	r2,-10(fp)
   11bf4:	10c00060 	cmpeqi	r3,r2,1
   11bf8:	1800041e 	bne	r3,zero,11c0c <tcp_parseopt+0xcc>
   11bfc:	10c000a0 	cmpeqi	r3,r2,2
   11c00:	1800061e 	bne	r3,zero,11c1c <tcp_parseopt+0xdc>
   11c04:	10004326 	beq	r2,zero,11d14 <tcp_parseopt+0x1d4>
   11c08:	00002e06 	br	11cc4 <tcp_parseopt+0x184>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
   11c0c:	e0bffb0b 	ldhu	r2,-20(fp)
   11c10:	10800044 	addi	r2,r2,1
   11c14:	e0bffb0d 	sth	r2,-20(fp)
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
   11c18:	00003a06 	br	11d04 <tcp_parseopt+0x1c4>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
   11c1c:	e0bffb0b 	ldhu	r2,-20(fp)
   11c20:	10800044 	addi	r2,r2,1
   11c24:	e0fffc17 	ldw	r3,-16(fp)
   11c28:	1885883a 	add	r2,r3,r2
   11c2c:	10800003 	ldbu	r2,0(r2)
   11c30:	10803fcc 	andi	r2,r2,255
   11c34:	10800118 	cmpnei	r2,r2,4
   11c38:	1000381e 	bne	r2,zero,11d1c <tcp_parseopt+0x1dc>
   11c3c:	e0bffb0b 	ldhu	r2,-20(fp)
   11c40:	10800104 	addi	r2,r2,4
   11c44:	e0fffd0b 	ldhu	r3,-12(fp)
   11c48:	18803416 	blt	r3,r2,11d1c <tcp_parseopt+0x1dc>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
   11c4c:	e0bffb0b 	ldhu	r2,-20(fp)
   11c50:	10800084 	addi	r2,r2,2
   11c54:	e0fffc17 	ldw	r3,-16(fp)
   11c58:	1885883a 	add	r2,r3,r2
   11c5c:	10800003 	ldbu	r2,0(r2)
   11c60:	10803fcc 	andi	r2,r2,255
   11c64:	1004923a 	slli	r2,r2,8
   11c68:	1007883a 	mov	r3,r2
   11c6c:	e0bffb0b 	ldhu	r2,-20(fp)
   11c70:	108000c4 	addi	r2,r2,3
   11c74:	e13ffc17 	ldw	r4,-16(fp)
   11c78:	2085883a 	add	r2,r4,r2
   11c7c:	10800003 	ldbu	r2,0(r2)
   11c80:	10803fcc 	andi	r2,r2,255
   11c84:	1884b03a 	or	r2,r3,r2
   11c88:	e0bffe0d 	sth	r2,-8(fp)
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
   11c8c:	e0bffe0b 	ldhu	r2,-8(fp)
   11c90:	10816d68 	cmpgeui	r2,r2,1461
   11c94:	1000041e 	bne	r2,zero,11ca8 <tcp_parseopt+0x168>
   11c98:	e0bffe0b 	ldhu	r2,-8(fp)
   11c9c:	10000226 	beq	r2,zero,11ca8 <tcp_parseopt+0x168>
   11ca0:	e0bffe0b 	ldhu	r2,-8(fp)
   11ca4:	00000106 	br	11cac <tcp_parseopt+0x16c>
   11ca8:	00816d04 	movi	r2,1460
   11cac:	e0ffff17 	ldw	r3,-4(fp)
   11cb0:	18800e8d 	sth	r2,58(r3)
        /* Advance to next option */
        c += 0x04;
   11cb4:	e0bffb0b 	ldhu	r2,-20(fp)
   11cb8:	10800104 	addi	r2,r2,4
   11cbc:	e0bffb0d 	sth	r2,-20(fp)
        break;
   11cc0:	00001006 	br	11d04 <tcp_parseopt+0x1c4>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
   11cc4:	e0bffb0b 	ldhu	r2,-20(fp)
   11cc8:	10800044 	addi	r2,r2,1
   11ccc:	e0fffc17 	ldw	r3,-16(fp)
   11cd0:	1885883a 	add	r2,r3,r2
   11cd4:	10800003 	ldbu	r2,0(r2)
   11cd8:	10803fcc 	andi	r2,r2,255
   11cdc:	10001126 	beq	r2,zero,11d24 <tcp_parseopt+0x1e4>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
   11ce0:	e0bffb0b 	ldhu	r2,-20(fp)
   11ce4:	10800044 	addi	r2,r2,1
   11ce8:	e0fffc17 	ldw	r3,-16(fp)
   11cec:	1885883a 	add	r2,r3,r2
   11cf0:	10800003 	ldbu	r2,0(r2)
   11cf4:	10c03fcc 	andi	r3,r2,255
   11cf8:	e0bffb0b 	ldhu	r2,-20(fp)
   11cfc:	1885883a 	add	r2,r3,r2
   11d00:	e0bffb0d 	sth	r2,-20(fp)
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
   11d04:	e0fffb0b 	ldhu	r3,-20(fp)
   11d08:	e0bffd0b 	ldhu	r2,-12(fp)
   11d0c:	18bfb336 	bltu	r3,r2,11bdc <tcp_parseopt+0x9c>
   11d10:	00000506 	br	11d28 <tcp_parseopt+0x1e8>
      opt = opts[c];
      switch (opt) {
      case 0x00:
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
   11d14:	0001883a 	nop
   11d18:	00000306 	br	11d28 <tcp_parseopt+0x1e8>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
   11d1c:	0001883a 	nop
   11d20:	00000106 	br	11d28 <tcp_parseopt+0x1e8>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          return;
   11d24:	0001883a 	nop
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
   11d28:	e037883a 	mov	sp,fp
   11d2c:	df000017 	ldw	fp,0(sp)
   11d30:	dec00104 	addi	sp,sp,4
   11d34:	f800283a 	ret

00011d38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
   11d38:	defff804 	addi	sp,sp,-32
   11d3c:	dfc00715 	stw	ra,28(sp)
   11d40:	df000615 	stw	fp,24(sp)
   11d44:	df000604 	addi	fp,sp,24
   11d48:	e13ffc15 	stw	r4,-16(fp)
   11d4c:	2807883a 	mov	r3,r5
   11d50:	3005883a 	mov	r2,r6
   11d54:	e1ffff15 	stw	r7,-4(fp)
   11d58:	e0fffd0d 	sth	r3,-12(fp)
   11d5c:	e0bffe0d 	sth	r2,-8(fp)
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
   11d60:	e0fffd0b 	ldhu	r3,-12(fp)
   11d64:	e0bffe0b 	ldhu	r2,-8(fp)
   11d68:	1885883a 	add	r2,r3,r2
   11d6c:	10800504 	addi	r2,r2,20
   11d70:	10bfffcc 	andi	r2,r2,65535
   11d74:	01000044 	movi	r4,1
   11d78:	100b883a 	mov	r5,r2
   11d7c:	000d883a 	mov	r6,zero
   11d80:	0009a600 	call	9a60 <pbuf_alloc>
   11d84:	e0bffa15 	stw	r2,-24(fp)
  if (p != NULL) {
   11d88:	e0bffa17 	ldw	r2,-24(fp)
   11d8c:	10007926 	beq	r2,zero,11f74 <tcp_output_alloc_header+0x23c>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
   11d90:	e0bffa17 	ldw	r2,-24(fp)
   11d94:	1080028b 	ldhu	r2,10(r2)
   11d98:	10ffffcc 	andi	r3,r2,65535
   11d9c:	e0bffd0b 	ldhu	r2,-12(fp)
   11da0:	10800504 	addi	r2,r2,20
   11da4:	1880090e 	bge	r3,r2,11dcc <tcp_output_alloc_header+0x94>
   11da8:	010000f4 	movhi	r4,3
   11dac:	21007604 	addi	r4,r4,472
   11db0:	014000f4 	movhi	r5,3
   11db4:	29408004 	addi	r5,r5,512
   11db8:	01801944 	movi	r6,101
   11dbc:	01c000f4 	movhi	r7,3
   11dc0:	39c08c04 	addi	r7,r7,560
   11dc4:	0017c440 	call	17c44 <printf>
   11dc8:	003fff06 	br	11dc8 <tcp_output_alloc_header+0x90>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
   11dcc:	e0bffa17 	ldw	r2,-24(fp)
   11dd0:	10800117 	ldw	r2,4(r2)
   11dd4:	e0bffb15 	stw	r2,-20(fp)
    tcphdr->src = htons(pcb->local_port);
   11dd8:	e0bffc17 	ldw	r2,-16(fp)
   11ddc:	1080078b 	ldhu	r2,30(r2)
   11de0:	10bfffcc 	andi	r2,r2,65535
   11de4:	1004d23a 	srli	r2,r2,8
   11de8:	1007883a 	mov	r3,r2
   11dec:	e0bffc17 	ldw	r2,-16(fp)
   11df0:	1080078b 	ldhu	r2,30(r2)
   11df4:	10bfffcc 	andi	r2,r2,65535
   11df8:	1004923a 	slli	r2,r2,8
   11dfc:	1884b03a 	or	r2,r3,r2
   11e00:	1007883a 	mov	r3,r2
   11e04:	e0bffb17 	ldw	r2,-20(fp)
   11e08:	10c0000d 	sth	r3,0(r2)
    tcphdr->dest = htons(pcb->remote_port);
   11e0c:	e0bffc17 	ldw	r2,-16(fp)
   11e10:	1080080b 	ldhu	r2,32(r2)
   11e14:	10bfffcc 	andi	r2,r2,65535
   11e18:	1004d23a 	srli	r2,r2,8
   11e1c:	1007883a 	mov	r3,r2
   11e20:	e0bffc17 	ldw	r2,-16(fp)
   11e24:	1080080b 	ldhu	r2,32(r2)
   11e28:	10bfffcc 	andi	r2,r2,65535
   11e2c:	1004923a 	slli	r2,r2,8
   11e30:	1884b03a 	or	r2,r3,r2
   11e34:	1007883a 	mov	r3,r2
   11e38:	e0bffb17 	ldw	r2,-20(fp)
   11e3c:	10c0008d 	sth	r3,2(r2)
    tcphdr->seqno = seqno_be;
   11e40:	e0bffb17 	ldw	r2,-20(fp)
   11e44:	e0ffff17 	ldw	r3,-4(fp)
   11e48:	18ffffcc 	andi	r3,r3,65535
   11e4c:	1100010b 	ldhu	r4,4(r2)
   11e50:	2008703a 	and	r4,r4,zero
   11e54:	20c6b03a 	or	r3,r4,r3
   11e58:	10c0010d 	sth	r3,4(r2)
   11e5c:	e0ffff17 	ldw	r3,-4(fp)
   11e60:	1806d43a 	srli	r3,r3,16
   11e64:	1100018b 	ldhu	r4,6(r2)
   11e68:	2008703a 	and	r4,r4,zero
   11e6c:	20c6b03a 	or	r3,r4,r3
   11e70:	10c0018d 	sth	r3,6(r2)
    tcphdr->ackno = htonl(pcb->rcv_nxt);
   11e74:	e0bffc17 	ldw	r2,-16(fp)
   11e78:	10800b17 	ldw	r2,44(r2)
   11e7c:	1006d63a 	srli	r3,r2,24
   11e80:	e0bffc17 	ldw	r2,-16(fp)
   11e84:	10800b17 	ldw	r2,44(r2)
   11e88:	1004d23a 	srli	r2,r2,8
   11e8c:	10bfc00c 	andi	r2,r2,65280
   11e90:	1886b03a 	or	r3,r3,r2
   11e94:	e0bffc17 	ldw	r2,-16(fp)
   11e98:	10800b17 	ldw	r2,44(r2)
   11e9c:	10bfc00c 	andi	r2,r2,65280
   11ea0:	1004923a 	slli	r2,r2,8
   11ea4:	1886b03a 	or	r3,r3,r2
   11ea8:	e0bffc17 	ldw	r2,-16(fp)
   11eac:	10800b17 	ldw	r2,44(r2)
   11eb0:	1004963a 	slli	r2,r2,24
   11eb4:	1886b03a 	or	r3,r3,r2
   11eb8:	e0bffb17 	ldw	r2,-20(fp)
   11ebc:	193fffcc 	andi	r4,r3,65535
   11ec0:	1140020b 	ldhu	r5,8(r2)
   11ec4:	280a703a 	and	r5,r5,zero
   11ec8:	2908b03a 	or	r4,r5,r4
   11ecc:	1100020d 	sth	r4,8(r2)
   11ed0:	1806d43a 	srli	r3,r3,16
   11ed4:	1100028b 	ldhu	r4,10(r2)
   11ed8:	2008703a 	and	r4,r4,zero
   11edc:	20c6b03a 	or	r3,r4,r3
   11ee0:	10c0028d 	sth	r3,10(r2)
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
   11ee4:	e0bffd0b 	ldhu	r2,-12(fp)
   11ee8:	1004d0ba 	srli	r2,r2,2
   11eec:	10bfffcc 	andi	r2,r2,65535
   11ef0:	10800144 	addi	r2,r2,5
   11ef4:	1004933a 	slli	r2,r2,12
   11ef8:	10bfffcc 	andi	r2,r2,65535
   11efc:	1004d23a 	srli	r2,r2,8
   11f00:	10840014 	ori	r2,r2,4096
   11f04:	1007883a 	mov	r3,r2
   11f08:	e0bffb17 	ldw	r2,-20(fp)
   11f0c:	10c0030d 	sth	r3,12(r2)
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
   11f10:	e0bffc17 	ldw	r2,-16(fp)
   11f14:	10800c8b 	ldhu	r2,50(r2)
   11f18:	10bfffcc 	andi	r2,r2,65535
   11f1c:	1004d23a 	srli	r2,r2,8
   11f20:	1007883a 	mov	r3,r2
   11f24:	e0bffc17 	ldw	r2,-16(fp)
   11f28:	10800c8b 	ldhu	r2,50(r2)
   11f2c:	10bfffcc 	andi	r2,r2,65535
   11f30:	1004923a 	slli	r2,r2,8
   11f34:	1884b03a 	or	r2,r3,r2
   11f38:	1007883a 	mov	r3,r2
   11f3c:	e0bffb17 	ldw	r2,-20(fp)
   11f40:	10c0038d 	sth	r3,14(r2)
    tcphdr->chksum = 0;
   11f44:	e0bffb17 	ldw	r2,-20(fp)
   11f48:	1000040d 	sth	zero,16(r2)
    tcphdr->urgp = 0;
   11f4c:	e0bffb17 	ldw	r2,-20(fp)
   11f50:	1000048d 	sth	zero,18(r2)

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   11f54:	e0bffc17 	ldw	r2,-16(fp)
   11f58:	10c00b17 	ldw	r3,44(r2)
   11f5c:	e0bffc17 	ldw	r2,-16(fp)
   11f60:	10800c8b 	ldhu	r2,50(r2)
   11f64:	10bfffcc 	andi	r2,r2,65535
   11f68:	1887883a 	add	r3,r3,r2
   11f6c:	e0bffc17 	ldw	r2,-16(fp)
   11f70:	10c00d15 	stw	r3,52(r2)
  }
  return p;
   11f74:	e0bffa17 	ldw	r2,-24(fp)
}
   11f78:	e037883a 	mov	sp,fp
   11f7c:	dfc00117 	ldw	ra,4(sp)
   11f80:	df000017 	ldw	fp,0(sp)
   11f84:	dec00204 	addi	sp,sp,8
   11f88:	f800283a 	ret

00011f8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
   11f8c:	defffc04 	addi	sp,sp,-16
   11f90:	dfc00315 	stw	ra,12(sp)
   11f94:	df000215 	stw	fp,8(sp)
   11f98:	df000204 	addi	fp,sp,8
   11f9c:	e13fff15 	stw	r4,-4(fp)
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
   11fa0:	e0bfff17 	ldw	r2,-4(fp)
   11fa4:	10801c17 	ldw	r2,112(r2)
   11fa8:	10002826 	beq	r2,zero,1204c <tcp_send_fin+0xc0>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   11fac:	e0bfff17 	ldw	r2,-4(fp)
   11fb0:	10801c17 	ldw	r2,112(r2)
   11fb4:	e0bffe15 	stw	r2,-8(fp)
   11fb8:	00000306 	br	11fc8 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
   11fbc:	e0bffe17 	ldw	r2,-8(fp)
   11fc0:	10800017 	ldw	r2,0(r2)
   11fc4:	e0bffe15 	stw	r2,-8(fp)
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   11fc8:	e0bffe17 	ldw	r2,-8(fp)
   11fcc:	10800017 	ldw	r2,0(r2)
   11fd0:	103ffa1e 	bne	r2,zero,11fbc <tcp_send_fin+0x30>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
   11fd4:	e0bffe17 	ldw	r2,-8(fp)
   11fd8:	10800317 	ldw	r2,12(r2)
   11fdc:	1080030b 	ldhu	r2,12(r2)
   11fe0:	10bfffcc 	andi	r2,r2,65535
   11fe4:	1004d23a 	srli	r2,r2,8
   11fe8:	10ffffcc 	andi	r3,r2,65535
   11fec:	e0bffe17 	ldw	r2,-8(fp)
   11ff0:	10800317 	ldw	r2,12(r2)
   11ff4:	1080030b 	ldhu	r2,12(r2)
   11ff8:	10bfffcc 	andi	r2,r2,65535
   11ffc:	1004923a 	slli	r2,r2,8
   12000:	10bfffcc 	andi	r2,r2,65535
   12004:	1884b03a 	or	r2,r3,r2
   12008:	108001cc 	andi	r2,r2,7
   1200c:	10000f1e 	bne	r2,zero,1204c <tcp_send_fin+0xc0>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
   12010:	e0bffe17 	ldw	r2,-8(fp)
   12014:	10800317 	ldw	r2,12(r2)
   12018:	e0fffe17 	ldw	r3,-8(fp)
   1201c:	18c00317 	ldw	r3,12(r3)
   12020:	18c0030b 	ldhu	r3,12(r3)
   12024:	18c04014 	ori	r3,r3,256
   12028:	10c0030d 	sth	r3,12(r2)
      pcb->flags |= TF_FIN;
   1202c:	e0bfff17 	ldw	r2,-4(fp)
   12030:	10800883 	ldbu	r2,34(r2)
   12034:	10800814 	ori	r2,r2,32
   12038:	1007883a 	mov	r3,r2
   1203c:	e0bfff17 	ldw	r2,-4(fp)
   12040:	10c00885 	stb	r3,34(r2)
      return ERR_OK;
   12044:	0005883a 	mov	r2,zero
   12048:	00000306 	br	12058 <tcp_send_fin+0xcc>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
   1204c:	e13fff17 	ldw	r4,-4(fp)
   12050:	01400044 	movi	r5,1
   12054:	0012efc0 	call	12efc <tcp_enqueue_flags>
}
   12058:	e037883a 	mov	sp,fp
   1205c:	dfc00117 	ldw	ra,4(sp)
   12060:	df000017 	ldw	fp,0(sp)
   12064:	dec00204 	addi	sp,sp,8
   12068:	f800283a 	ret

0001206c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
   1206c:	defff704 	addi	sp,sp,-36
   12070:	dfc00815 	stw	ra,32(sp)
   12074:	df000715 	stw	fp,28(sp)
   12078:	df000704 	addi	fp,sp,28
   1207c:	e13ffb15 	stw	r4,-20(fp)
   12080:	e17ffc15 	stw	r5,-16(fp)
   12084:	3005883a 	mov	r2,r6
   12088:	e1fffe15 	stw	r7,-8(fp)
   1208c:	e0c00217 	ldw	r3,8(fp)
   12090:	e0bffd05 	stb	r2,-12(fp)
   12094:	e0ffff05 	stb	r3,-4(fp)
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
   12098:	e0bfff03 	ldbu	r2,-4(fp)
   1209c:	1080004c 	andi	r2,r2,1
   120a0:	10000226 	beq	r2,zero,120ac <tcp_create_segment+0x40>
   120a4:	00c00104 	movi	r3,4
   120a8:	00000106 	br	120b0 <tcp_create_segment+0x44>
   120ac:	0007883a 	mov	r3,zero
   120b0:	e0bfff03 	ldbu	r2,-4(fp)
   120b4:	1080008c 	andi	r2,r2,2
   120b8:	10000226 	beq	r2,zero,120c4 <tcp_create_segment+0x58>
   120bc:	00800304 	movi	r2,12
   120c0:	00000106 	br	120c8 <tcp_create_segment+0x5c>
   120c4:	0005883a 	mov	r2,zero
   120c8:	1885883a 	add	r2,r3,r2
   120cc:	e0bff905 	stb	r2,-28(fp)

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
   120d0:	01000104 	movi	r4,4
   120d4:	0008fe40 	call	8fe4 <memp_malloc>
   120d8:	e0bffa15 	stw	r2,-24(fp)
   120dc:	e0bffa17 	ldw	r2,-24(fp)
   120e0:	1000041e 	bne	r2,zero,120f4 <tcp_create_segment+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
   120e4:	e13ffc17 	ldw	r4,-16(fp)
   120e8:	000a4200 	call	a420 <pbuf_free>
    return NULL;
   120ec:	0005883a 	mov	r2,zero
   120f0:	00007206 	br	122bc <tcp_create_segment+0x250>
  }
  seg->flags = optflags;
   120f4:	e0bffa17 	ldw	r2,-24(fp)
   120f8:	e0ffff03 	ldbu	r3,-4(fp)
   120fc:	10c00285 	stb	r3,10(r2)
  seg->next = NULL;
   12100:	e0bffa17 	ldw	r2,-24(fp)
   12104:	10000015 	stw	zero,0(r2)
  seg->p = p;
   12108:	e0bffa17 	ldw	r2,-24(fp)
   1210c:	e0fffc17 	ldw	r3,-16(fp)
   12110:	10c00115 	stw	r3,4(r2)
  seg->len = p->tot_len - optlen;
   12114:	e0bffc17 	ldw	r2,-16(fp)
   12118:	10c0020b 	ldhu	r3,8(r2)
   1211c:	e0bff903 	ldbu	r2,-28(fp)
   12120:	1885c83a 	sub	r2,r3,r2
   12124:	1007883a 	mov	r3,r2
   12128:	e0bffa17 	ldw	r2,-24(fp)
   1212c:	10c0020d 	sth	r3,8(r2)
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
   12130:	e13ffc17 	ldw	r4,-16(fp)
   12134:	01400504 	movi	r5,20
   12138:	000a2280 	call	a228 <pbuf_header>
   1213c:	10803fcc 	andi	r2,r2,255
   12140:	10000c26 	beq	r2,zero,12174 <tcp_create_segment+0x108>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
   12144:	00800134 	movhi	r2,4
   12148:	10932304 	addi	r2,r2,19596
   1214c:	1080290b 	ldhu	r2,164(r2)
   12150:	10800044 	addi	r2,r2,1
   12154:	1007883a 	mov	r3,r2
   12158:	00800134 	movhi	r2,4
   1215c:	10932304 	addi	r2,r2,19596
   12160:	10c0290d 	sth	r3,164(r2)
    tcp_seg_free(seg);
   12164:	e13ffa17 	ldw	r4,-24(fp)
   12168:	000d3f40 	call	d3f4 <tcp_seg_free>
    return NULL;
   1216c:	0005883a 	mov	r2,zero
   12170:	00005206 	br	122bc <tcp_create_segment+0x250>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
   12174:	e0bffa17 	ldw	r2,-24(fp)
   12178:	10800117 	ldw	r2,4(r2)
   1217c:	10c00117 	ldw	r3,4(r2)
   12180:	e0bffa17 	ldw	r2,-24(fp)
   12184:	10c00315 	stw	r3,12(r2)
  seg->tcphdr->src = htons(pcb->local_port);
   12188:	e0bffa17 	ldw	r2,-24(fp)
   1218c:	10800317 	ldw	r2,12(r2)
   12190:	e0fffb17 	ldw	r3,-20(fp)
   12194:	18c0078b 	ldhu	r3,30(r3)
   12198:	18ffffcc 	andi	r3,r3,65535
   1219c:	1806d23a 	srli	r3,r3,8
   121a0:	1809883a 	mov	r4,r3
   121a4:	e0fffb17 	ldw	r3,-20(fp)
   121a8:	18c0078b 	ldhu	r3,30(r3)
   121ac:	18ffffcc 	andi	r3,r3,65535
   121b0:	1806923a 	slli	r3,r3,8
   121b4:	20c6b03a 	or	r3,r4,r3
   121b8:	10c0000d 	sth	r3,0(r2)
  seg->tcphdr->dest = htons(pcb->remote_port);
   121bc:	e0bffa17 	ldw	r2,-24(fp)
   121c0:	10800317 	ldw	r2,12(r2)
   121c4:	e0fffb17 	ldw	r3,-20(fp)
   121c8:	18c0080b 	ldhu	r3,32(r3)
   121cc:	18ffffcc 	andi	r3,r3,65535
   121d0:	1806d23a 	srli	r3,r3,8
   121d4:	1809883a 	mov	r4,r3
   121d8:	e0fffb17 	ldw	r3,-20(fp)
   121dc:	18c0080b 	ldhu	r3,32(r3)
   121e0:	18ffffcc 	andi	r3,r3,65535
   121e4:	1806923a 	slli	r3,r3,8
   121e8:	20c6b03a 	or	r3,r4,r3
   121ec:	10c0008d 	sth	r3,2(r2)
  seg->tcphdr->seqno = htonl(seqno);
   121f0:	e0bffa17 	ldw	r2,-24(fp)
   121f4:	10800317 	ldw	r2,12(r2)
   121f8:	e0fffe17 	ldw	r3,-8(fp)
   121fc:	1808d63a 	srli	r4,r3,24
   12200:	e0fffe17 	ldw	r3,-8(fp)
   12204:	1806d23a 	srli	r3,r3,8
   12208:	18ffc00c 	andi	r3,r3,65280
   1220c:	20c8b03a 	or	r4,r4,r3
   12210:	e0fffe17 	ldw	r3,-8(fp)
   12214:	18ffc00c 	andi	r3,r3,65280
   12218:	1806923a 	slli	r3,r3,8
   1221c:	20c8b03a 	or	r4,r4,r3
   12220:	e0fffe17 	ldw	r3,-8(fp)
   12224:	1806963a 	slli	r3,r3,24
   12228:	20c6b03a 	or	r3,r4,r3
   1222c:	193fffcc 	andi	r4,r3,65535
   12230:	1140010b 	ldhu	r5,4(r2)
   12234:	280a703a 	and	r5,r5,zero
   12238:	2908b03a 	or	r4,r5,r4
   1223c:	1100010d 	sth	r4,4(r2)
   12240:	1806d43a 	srli	r3,r3,16
   12244:	1100018b 	ldhu	r4,6(r2)
   12248:	2008703a 	and	r4,r4,zero
   1224c:	20c6b03a 	or	r3,r4,r3
   12250:	10c0018d 	sth	r3,6(r2)
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
   12254:	e0bffa17 	ldw	r2,-24(fp)
   12258:	10800317 	ldw	r2,12(r2)
   1225c:	e0fff903 	ldbu	r3,-28(fp)
   12260:	1806d0ba 	srli	r3,r3,2
   12264:	18c03fcc 	andi	r3,r3,255
   12268:	18c00144 	addi	r3,r3,5
   1226c:	1808933a 	slli	r4,r3,12
   12270:	e0fffd03 	ldbu	r3,-12(fp)
   12274:	20c6b03a 	or	r3,r4,r3
   12278:	18ffc00c 	andi	r3,r3,65280
   1227c:	1807d23a 	srai	r3,r3,8
   12280:	1809883a 	mov	r4,r3
   12284:	e0fff903 	ldbu	r3,-28(fp)
   12288:	1806d0ba 	srli	r3,r3,2
   1228c:	18c03fcc 	andi	r3,r3,255
   12290:	18c00144 	addi	r3,r3,5
   12294:	180a933a 	slli	r5,r3,12
   12298:	e0fffd03 	ldbu	r3,-12(fp)
   1229c:	28c6b03a 	or	r3,r5,r3
   122a0:	1806923a 	slli	r3,r3,8
   122a4:	20c6b03a 	or	r3,r4,r3
   122a8:	10c0030d 	sth	r3,12(r2)
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
   122ac:	e0bffa17 	ldw	r2,-24(fp)
   122b0:	10800317 	ldw	r2,12(r2)
   122b4:	1000048d 	sth	zero,18(r2)
  return seg;
   122b8:	e0bffa17 	ldw	r2,-24(fp)
} 
   122bc:	e037883a 	mov	sp,fp
   122c0:	dfc00117 	ldw	ra,4(sp)
   122c4:	df000017 	ldw	fp,0(sp)
   122c8:	dec00204 	addi	sp,sp,8
   122cc:	f800283a 	ret

000122d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
   122d0:	defff604 	addi	sp,sp,-40
   122d4:	dfc00915 	stw	ra,36(sp)
   122d8:	df000815 	stw	fp,32(sp)
   122dc:	df000804 	addi	fp,sp,32
   122e0:	e13ffa15 	stw	r4,-24(fp)
   122e4:	2807883a 	mov	r3,r5
   122e8:	3005883a 	mov	r2,r6
   122ec:	e1fffd15 	stw	r7,-12(fp)
   122f0:	e1400317 	ldw	r5,12(fp)
   122f4:	e1000417 	ldw	r4,16(fp)
   122f8:	e0fffb0d 	sth	r3,-20(fp)
   122fc:	e0bffc0d 	sth	r2,-16(fp)
   12300:	e17ffe05 	stb	r5,-8(fp)
   12304:	e13fff05 	stb	r4,-4(fp)
  struct pbuf *p;
  u16_t alloc = length;
   12308:	e0bffb0b 	ldhu	r2,-20(fp)
   1230c:	e0bff80d 	sth	r2,-32(fp)
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
   12310:	e0fffb0b 	ldhu	r3,-20(fp)
   12314:	e0bffc0b 	ldhu	r2,-16(fp)
   12318:	1880182e 	bgeu	r3,r2,1237c <tcp_pbuf_prealloc+0xac>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
   1231c:	e0bffe03 	ldbu	r2,-8(fp)
   12320:	1080008c 	andi	r2,r2,2
   12324:	10000d1e 	bne	r2,zero,1235c <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
   12328:	e0800217 	ldw	r2,8(fp)
   1232c:	10800883 	ldbu	r2,34(r2)
   12330:	10803fcc 	andi	r2,r2,255
   12334:	1080100c 	andi	r2,r2,64
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
   12338:	1000101e 	bne	r2,zero,1237c <tcp_pbuf_prealloc+0xac>
        (!(pcb->flags & TF_NODELAY) &&
   1233c:	e0bfff03 	ldbu	r2,-4(fp)
   12340:	10000626 	beq	r2,zero,1235c <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
   12344:	e0800217 	ldw	r2,8(fp)
   12348:	10801c17 	ldw	r2,112(r2)
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
   1234c:	1000031e 	bne	r2,zero,1235c <tcp_pbuf_prealloc+0x8c>
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
   12350:	e0800217 	ldw	r2,8(fp)
   12354:	10801d17 	ldw	r2,116(r2)
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
   12358:	10000826 	beq	r2,zero,1237c <tcp_pbuf_prealloc+0xac>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
   1235c:	e0bffb0b 	ldhu	r2,-20(fp)
   12360:	10c16dc4 	addi	r3,r2,1463
   12364:	00bfff04 	movi	r2,-4
   12368:	1884703a 	and	r2,r3,r2
   1236c:	e0fffc0b 	ldhu	r3,-16(fp)
   12370:	1880010e 	bge	r3,r2,12378 <tcp_pbuf_prealloc+0xa8>
   12374:	1805883a 	mov	r2,r3
   12378:	e0bff80d 	sth	r2,-32(fp)
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
   1237c:	e0bff80b 	ldhu	r2,-32(fp)
   12380:	e13ffa17 	ldw	r4,-24(fp)
   12384:	100b883a 	mov	r5,r2
   12388:	000d883a 	mov	r6,zero
   1238c:	0009a600 	call	9a60 <pbuf_alloc>
   12390:	e0bff915 	stw	r2,-28(fp)
  if (p == NULL) {
   12394:	e0bff917 	ldw	r2,-28(fp)
   12398:	1000021e 	bne	r2,zero,123a4 <tcp_pbuf_prealloc+0xd4>
    return NULL;
   1239c:	0005883a 	mov	r2,zero
   123a0:	00001b06 	br	12410 <tcp_pbuf_prealloc+0x140>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
   123a4:	e0bff917 	ldw	r2,-28(fp)
   123a8:	10800017 	ldw	r2,0(r2)
   123ac:	10000926 	beq	r2,zero,123d4 <tcp_pbuf_prealloc+0x104>
   123b0:	010000f4 	movhi	r4,3
   123b4:	21007604 	addi	r4,r4,472
   123b8:	014000f4 	movhi	r5,3
   123bc:	29409204 	addi	r5,r5,584
   123c0:	018040c4 	movi	r6,259
   123c4:	01c000f4 	movhi	r7,3
   123c8:	39c08c04 	addi	r7,r7,560
   123cc:	0017c440 	call	17c44 <printf>
   123d0:	003fff06 	br	123d0 <tcp_pbuf_prealloc+0x100>
  *oversize = p->len - length;
   123d4:	e0bff917 	ldw	r2,-28(fp)
   123d8:	10c0028b 	ldhu	r3,10(r2)
   123dc:	e0bffb0b 	ldhu	r2,-20(fp)
   123e0:	1885c83a 	sub	r2,r3,r2
   123e4:	1007883a 	mov	r3,r2
   123e8:	e0bffd17 	ldw	r2,-12(fp)
   123ec:	10c0000d 	sth	r3,0(r2)
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
   123f0:	e0bff917 	ldw	r2,-28(fp)
   123f4:	e0fffb0b 	ldhu	r3,-20(fp)
   123f8:	10c0020d 	sth	r3,8(r2)
   123fc:	e0bff917 	ldw	r2,-28(fp)
   12400:	10c0020b 	ldhu	r3,8(r2)
   12404:	e0bff917 	ldw	r2,-28(fp)
   12408:	10c0028d 	sth	r3,10(r2)
  return p;
   1240c:	e0bff917 	ldw	r2,-28(fp)
}
   12410:	e037883a 	mov	sp,fp
   12414:	dfc00117 	ldw	ra,4(sp)
   12418:	df000017 	ldw	fp,0(sp)
   1241c:	dec00204 	addi	sp,sp,8
   12420:	f800283a 	ret

00012424 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
   12424:	defffc04 	addi	sp,sp,-16
   12428:	dfc00315 	stw	ra,12(sp)
   1242c:	df000215 	stw	fp,8(sp)
   12430:	df000204 	addi	fp,sp,8
   12434:	e13ffe15 	stw	r4,-8(fp)
   12438:	2805883a 	mov	r2,r5
   1243c:	e0bfff0d 	sth	r2,-4(fp)
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
   12440:	e0bffe17 	ldw	r2,-8(fp)
   12444:	10800617 	ldw	r2,24(r2)
   12448:	10800120 	cmpeqi	r2,r2,4
   1244c:	10000e1e 	bne	r2,zero,12488 <tcp_write_checks+0x64>
      (pcb->state != CLOSE_WAIT) &&
   12450:	e0bffe17 	ldw	r2,-8(fp)
   12454:	10800617 	ldw	r2,24(r2)
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
   12458:	108001e0 	cmpeqi	r2,r2,7
   1245c:	10000a1e 	bne	r2,zero,12488 <tcp_write_checks+0x64>
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
   12460:	e0bffe17 	ldw	r2,-8(fp)
   12464:	10800617 	ldw	r2,24(r2)
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
   12468:	108000a0 	cmpeqi	r2,r2,2
   1246c:	1000061e 	bne	r2,zero,12488 <tcp_write_checks+0x64>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
   12470:	e0bffe17 	ldw	r2,-8(fp)
   12474:	10800617 	ldw	r2,24(r2)
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
   12478:	108000e0 	cmpeqi	r2,r2,3
   1247c:	1000021e 	bne	r2,zero,12488 <tcp_write_checks+0x64>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
   12480:	00bffcc4 	movi	r2,-13
   12484:	00005006 	br	125c8 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
   12488:	e0bfff0b 	ldhu	r2,-4(fp)
   1248c:	1000021e 	bne	r2,zero,12498 <tcp_write_checks+0x74>
    return ERR_OK;
   12490:	0005883a 	mov	r2,zero
   12494:	00004c06 	br	125c8 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
   12498:	e0bffe17 	ldw	r2,-8(fp)
   1249c:	10801a8b 	ldhu	r2,106(r2)
   124a0:	10ffffcc 	andi	r3,r2,65535
   124a4:	e0bfff0b 	ldhu	r2,-4(fp)
   124a8:	1880092e 	bgeu	r3,r2,124d0 <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
   124ac:	e0bffe17 	ldw	r2,-8(fp)
   124b0:	10c00883 	ldbu	r3,34(r2)
   124b4:	00bfe004 	movi	r2,-128
   124b8:	1884b03a 	or	r2,r3,r2
   124bc:	1007883a 	mov	r3,r2
   124c0:	e0bffe17 	ldw	r2,-8(fp)
   124c4:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
   124c8:	00bfffc4 	movi	r2,-1
   124cc:	00003e06 	br	125c8 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
   124d0:	e0bffe17 	ldw	r2,-8(fp)
   124d4:	10801b0b 	ldhu	r2,108(r2)
   124d8:	10bfffcc 	andi	r2,r2,65535
   124dc:	10800b28 	cmpgeui	r2,r2,44
   124e0:	1000051e 	bne	r2,zero,124f8 <tcp_write_checks+0xd4>
   124e4:	e0bffe17 	ldw	r2,-8(fp)
   124e8:	10801b0b 	ldhu	r2,108(r2)
   124ec:	10bfffcc 	andi	r2,r2,65535
   124f0:	10bfff70 	cmpltui	r2,r2,65533
   124f4:	1000111e 	bne	r2,zero,1253c <tcp_write_checks+0x118>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
   124f8:	00800134 	movhi	r2,4
   124fc:	10932304 	addi	r2,r2,19596
   12500:	1080270b 	ldhu	r2,156(r2)
   12504:	10800044 	addi	r2,r2,1
   12508:	1007883a 	mov	r3,r2
   1250c:	00800134 	movhi	r2,4
   12510:	10932304 	addi	r2,r2,19596
   12514:	10c0270d 	sth	r3,156(r2)
    pcb->flags |= TF_NAGLEMEMERR;
   12518:	e0bffe17 	ldw	r2,-8(fp)
   1251c:	10c00883 	ldbu	r3,34(r2)
   12520:	00bfe004 	movi	r2,-128
   12524:	1884b03a 	or	r2,r3,r2
   12528:	1007883a 	mov	r3,r2
   1252c:	e0bffe17 	ldw	r2,-8(fp)
   12530:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
   12534:	00bfffc4 	movi	r2,-1
   12538:	00002306 	br	125c8 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
   1253c:	e0bffe17 	ldw	r2,-8(fp)
   12540:	10801b0b 	ldhu	r2,108(r2)
   12544:	10bfffcc 	andi	r2,r2,65535
   12548:	10000f26 	beq	r2,zero,12588 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
   1254c:	e0bffe17 	ldw	r2,-8(fp)
   12550:	10801d17 	ldw	r2,116(r2)
   12554:	10001b1e 	bne	r2,zero,125c4 <tcp_write_checks+0x1a0>
   12558:	e0bffe17 	ldw	r2,-8(fp)
   1255c:	10801c17 	ldw	r2,112(r2)
   12560:	1000181e 	bne	r2,zero,125c4 <tcp_write_checks+0x1a0>
   12564:	010000f4 	movhi	r4,3
   12568:	21007604 	addi	r4,r4,472
   1256c:	014000f4 	movhi	r5,3
   12570:	29409704 	addi	r5,r5,604
   12574:	01805244 	movi	r6,329
   12578:	01c000f4 	movhi	r7,3
   1257c:	39c08c04 	addi	r7,r7,560
   12580:	0017c440 	call	17c44 <printf>
   12584:	003fff06 	br	12584 <tcp_write_checks+0x160>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
   12588:	e0bffe17 	ldw	r2,-8(fp)
   1258c:	10801d17 	ldw	r2,116(r2)
   12590:	1000031e 	bne	r2,zero,125a0 <tcp_write_checks+0x17c>
   12594:	e0bffe17 	ldw	r2,-8(fp)
   12598:	10801c17 	ldw	r2,112(r2)
   1259c:	10000926 	beq	r2,zero,125c4 <tcp_write_checks+0x1a0>
   125a0:	010000f4 	movhi	r4,3
   125a4:	21007604 	addi	r4,r4,472
   125a8:	014000f4 	movhi	r5,3
   125ac:	2940a604 	addi	r5,r5,664
   125b0:	01805304 	movi	r6,332
   125b4:	01c000f4 	movhi	r7,3
   125b8:	39c08c04 	addi	r7,r7,560
   125bc:	0017c440 	call	17c44 <printf>
   125c0:	003fff06 	br	125c0 <tcp_write_checks+0x19c>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
   125c4:	0005883a 	mov	r2,zero
}
   125c8:	e037883a 	mov	sp,fp
   125cc:	dfc00117 	ldw	ra,4(sp)
   125d0:	df000017 	ldw	fp,0(sp)
   125d4:	dec00204 	addi	sp,sp,8
   125d8:	f800283a 	ret

000125dc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
   125dc:	deffe804 	addi	sp,sp,-96
   125e0:	dfc01715 	stw	ra,92(sp)
   125e4:	df001615 	stw	fp,88(sp)
   125e8:	df001604 	addi	fp,sp,88
   125ec:	e13ffc15 	stw	r4,-16(fp)
   125f0:	e17ffd15 	stw	r5,-12(fp)
   125f4:	3007883a 	mov	r3,r6
   125f8:	3805883a 	mov	r2,r7
   125fc:	e0fffe0d 	sth	r3,-8(fp)
   12600:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *concat_p = NULL;
   12604:	e03fed15 	stw	zero,-76(fp)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
   12608:	e03fee15 	stw	zero,-72(fp)
   1260c:	e03fef15 	stw	zero,-68(fp)
   12610:	e03ff015 	stw	zero,-64(fp)
   12614:	e03ff115 	stw	zero,-60(fp)
  u16_t pos = 0; /* position in 'arg' data */
   12618:	e03ff20d 	sth	zero,-56(fp)
  u16_t queuelen;
  u8_t optlen = 0;
   1261c:	e03ff605 	stb	zero,-40(fp)
  u8_t optflags = 0;
   12620:	e03ff645 	stb	zero,-39(fp)
#if TCP_OVERSIZE
  u16_t oversize = 0;
   12624:	e03ffb0d 	sth	zero,-20(fp)
  u16_t oversize_used = 0;
   12628:	e03ff30d 	sth	zero,-52(fp)
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
   1262c:	e0bffc17 	ldw	r2,-16(fp)
   12630:	1080198b 	ldhu	r2,102(r2)
   12634:	10bfffcc 	andi	r2,r2,65535
   12638:	1004d07a 	srli	r2,r2,1
   1263c:	e0fffc17 	ldw	r3,-16(fp)
   12640:	18c00e8b 	ldhu	r3,58(r3)
   12644:	113fffcc 	andi	r4,r2,65535
   12648:	197fffcc 	andi	r5,r3,65535
   1264c:	2900012e 	bgeu	r5,r4,12654 <tcp_write+0x78>
   12650:	1805883a 	mov	r2,r3
   12654:	e0bff68d 	sth	r2,-38(fp)
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
   12658:	e0bffd17 	ldw	r2,-12(fp)
   1265c:	1000091e 	bne	r2,zero,12684 <tcp_write+0xa8>
   12660:	010000f4 	movhi	r4,3
   12664:	21007604 	addi	r4,r4,472
   12668:	014000f4 	movhi	r5,3
   1266c:	2940b304 	addi	r5,r5,716
   12670:	01805fc4 	movi	r6,383
   12674:	01c000f4 	movhi	r7,3
   12678:	39c08c04 	addi	r7,r7,560
   1267c:	0017c440 	call	17c44 <printf>
   12680:	003fff06 	br	12680 <tcp_write+0xa4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
   12684:	e0bffe0b 	ldhu	r2,-8(fp)
   12688:	e13ffc17 	ldw	r4,-16(fp)
   1268c:	100b883a 	mov	r5,r2
   12690:	00124240 	call	12424 <tcp_write_checks>
   12694:	e0bff705 	stb	r2,-36(fp)
  if (err != ERR_OK) {
   12698:	e0bff707 	ldb	r2,-36(fp)
   1269c:	10000226 	beq	r2,zero,126a8 <tcp_write+0xcc>
    return err;
   126a0:	e0bff703 	ldbu	r2,-36(fp)
   126a4:	00021006 	br	12ee8 <tcp_write+0x90c>
  }
  queuelen = pcb->snd_queuelen;
   126a8:	e0bffc17 	ldw	r2,-16(fp)
   126ac:	10801b0b 	ldhu	r2,108(r2)
   126b0:	e0bff28d 	sth	r2,-54(fp)
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
   126b4:	e0bffc17 	ldw	r2,-16(fp)
   126b8:	10801c17 	ldw	r2,112(r2)
   126bc:	1000a026 	beq	r2,zero,12940 <tcp_write+0x364>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   126c0:	e0bffc17 	ldw	r2,-16(fp)
   126c4:	10801c17 	ldw	r2,112(r2)
   126c8:	e0bfee15 	stw	r2,-72(fp)
   126cc:	00000306 	br	126dc <tcp_write+0x100>
         last_unsent = last_unsent->next);
   126d0:	e0bfee17 	ldw	r2,-72(fp)
   126d4:	10800017 	ldw	r2,0(r2)
   126d8:	e0bfee15 	stw	r2,-72(fp)
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
   126dc:	e0bfee17 	ldw	r2,-72(fp)
   126e0:	10800017 	ldw	r2,0(r2)
   126e4:	103ffa1e 	bne	r2,zero,126d0 <tcp_write+0xf4>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
   126e8:	e0bfee17 	ldw	r2,-72(fp)
   126ec:	10800283 	ldbu	r2,10(r2)
   126f0:	10803fcc 	andi	r2,r2,255
   126f4:	1080004c 	andi	r2,r2,1
   126f8:	10000226 	beq	r2,zero,12704 <tcp_write+0x128>
   126fc:	00c00104 	movi	r3,4
   12700:	00000106 	br	12708 <tcp_write+0x12c>
   12704:	0007883a 	mov	r3,zero
   12708:	e0bfee17 	ldw	r2,-72(fp)
   1270c:	10800283 	ldbu	r2,10(r2)
   12710:	10803fcc 	andi	r2,r2,255
   12714:	1080008c 	andi	r2,r2,2
   12718:	10000226 	beq	r2,zero,12724 <tcp_write+0x148>
   1271c:	00800304 	movi	r2,12
   12720:	00000106 	br	12728 <tcp_write+0x14c>
   12724:	0005883a 	mov	r2,zero
   12728:	1885883a 	add	r2,r3,r2
   1272c:	e0bff78d 	sth	r2,-34(fp)
    space = mss_local - (last_unsent->len + unsent_optlen);
   12730:	e0bfee17 	ldw	r2,-72(fp)
   12734:	10c0020b 	ldhu	r3,8(r2)
   12738:	e0bff78b 	ldhu	r2,-34(fp)
   1273c:	1885883a 	add	r2,r3,r2
   12740:	e0fff68b 	ldhu	r3,-38(fp)
   12744:	1885c83a 	sub	r2,r3,r2
   12748:	e0bff38d 	sth	r2,-50(fp)
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
   1274c:	e0bffc17 	ldw	r2,-16(fp)
   12750:	10801b8b 	ldhu	r2,110(r2)
   12754:	e0bffb0d 	sth	r2,-20(fp)
    if (oversize > 0) {
   12758:	e0bffb0b 	ldhu	r2,-20(fp)
   1275c:	10bfffcc 	andi	r2,r2,65535
   12760:	10002126 	beq	r2,zero,127e8 <tcp_write+0x20c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
   12764:	e0bff30b 	ldhu	r2,-52(fp)
   12768:	e0fff38b 	ldhu	r3,-50(fp)
   1276c:	1880092e 	bgeu	r3,r2,12794 <tcp_write+0x1b8>
   12770:	010000f4 	movhi	r4,3
   12774:	21007604 	addi	r4,r4,472
   12778:	014000f4 	movhi	r5,3
   1277c:	2940c004 	addi	r5,r5,768
   12780:	01807044 	movi	r6,449
   12784:	01c000f4 	movhi	r7,3
   12788:	39c08c04 	addi	r7,r7,560
   1278c:	0017c440 	call	17c44 <printf>
   12790:	003fff06 	br	12790 <tcp_write+0x1b4>
      seg = last_unsent;
   12794:	e0bfee17 	ldw	r2,-72(fp)
   12798:	e0bfef15 	stw	r2,-68(fp)
      oversize_used = oversize < len ? oversize : len;
   1279c:	e0fffb0b 	ldhu	r3,-20(fp)
   127a0:	e0bffe0b 	ldhu	r2,-8(fp)
   127a4:	113fffcc 	andi	r4,r2,65535
   127a8:	197fffcc 	andi	r5,r3,65535
   127ac:	2900012e 	bgeu	r5,r4,127b4 <tcp_write+0x1d8>
   127b0:	1805883a 	mov	r2,r3
   127b4:	e0bff30d 	sth	r2,-52(fp)
      pos += oversize_used;
   127b8:	e0fff20b 	ldhu	r3,-56(fp)
   127bc:	e0bff30b 	ldhu	r2,-52(fp)
   127c0:	1885883a 	add	r2,r3,r2
   127c4:	e0bff20d 	sth	r2,-56(fp)
      oversize -= oversize_used;
   127c8:	e0fffb0b 	ldhu	r3,-20(fp)
   127cc:	e0bff30b 	ldhu	r2,-52(fp)
   127d0:	1885c83a 	sub	r2,r3,r2
   127d4:	e0bffb0d 	sth	r2,-20(fp)
      space -= oversize_used;
   127d8:	e0fff38b 	ldhu	r3,-50(fp)
   127dc:	e0bff30b 	ldhu	r2,-52(fp)
   127e0:	1885c83a 	sub	r2,r3,r2
   127e4:	e0bff38d 	sth	r2,-50(fp)
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistend oversize vs. len", (oversize == 0) || (pos == len));
   127e8:	e0bffb0b 	ldhu	r2,-20(fp)
   127ec:	10bfffcc 	andi	r2,r2,65535
   127f0:	10000c26 	beq	r2,zero,12824 <tcp_write+0x248>
   127f4:	e0fff20b 	ldhu	r3,-56(fp)
   127f8:	e0bffe0b 	ldhu	r2,-8(fp)
   127fc:	18800926 	beq	r3,r2,12824 <tcp_write+0x248>
   12800:	010000f4 	movhi	r4,3
   12804:	21007604 	addi	r4,r4,472
   12808:	014000f4 	movhi	r5,3
   1280c:	2940c804 	addi	r5,r5,800
   12810:	01807244 	movi	r6,457
   12814:	01c000f4 	movhi	r7,3
   12818:	39c08c04 	addi	r7,r7,560
   1281c:	0017c440 	call	17c44 <printf>
   12820:	003fff06 	br	12820 <tcp_write+0x244>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
   12824:	e0fff20b 	ldhu	r3,-56(fp)
   12828:	e0bffe0b 	ldhu	r2,-8(fp)
   1282c:	1880ef2e 	bgeu	r3,r2,12bec <tcp_write+0x610>
   12830:	e0bff38b 	ldhu	r2,-50(fp)
   12834:	1000ed26 	beq	r2,zero,12bec <tcp_write+0x610>
   12838:	e0bfee17 	ldw	r2,-72(fp)
   1283c:	1080020b 	ldhu	r2,8(r2)
   12840:	10bfffcc 	andi	r2,r2,65535
   12844:	1000e926 	beq	r2,zero,12bec <tcp_write+0x610>
      u16_t seglen = space < len - pos ? space : len - pos;
   12848:	e0fffe0b 	ldhu	r3,-8(fp)
   1284c:	e0bff20b 	ldhu	r2,-56(fp)
   12850:	1885c83a 	sub	r2,r3,r2
   12854:	e0fff38b 	ldhu	r3,-50(fp)
   12858:	1880010e 	bge	r3,r2,12860 <tcp_write+0x284>
   1285c:	1805883a 	mov	r2,r3
   12860:	e0bff80d 	sth	r2,-32(fp)
      seg = last_unsent;
   12864:	e0bfee17 	ldw	r2,-72(fp)
   12868:	e0bfef15 	stw	r2,-68(fp)

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
   1286c:	e0bfff03 	ldbu	r2,-4(fp)
   12870:	1080004c 	andi	r2,r2,1
   12874:	10001a26 	beq	r2,zero,128e0 <tcp_write+0x304>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
   12878:	e17ff80b 	ldhu	r5,-32(fp)
   1287c:	e0fff38b 	ldhu	r3,-50(fp)
   12880:	e13fff03 	ldbu	r4,-4(fp)
   12884:	e0bffb04 	addi	r2,fp,-20
   12888:	e1bffc17 	ldw	r6,-16(fp)
   1288c:	d9800015 	stw	r6,0(sp)
   12890:	d9000115 	stw	r4,4(sp)
   12894:	01000044 	movi	r4,1
   12898:	d9000215 	stw	r4,8(sp)
   1289c:	010000c4 	movi	r4,3
   128a0:	180d883a 	mov	r6,r3
   128a4:	100f883a 	mov	r7,r2
   128a8:	00122d00 	call	122d0 <tcp_pbuf_prealloc>
   128ac:	e0bfed15 	stw	r2,-76(fp)
   128b0:	e0bfed17 	ldw	r2,-76(fp)
   128b4:	10015826 	beq	r2,zero,12e18 <tcp_write+0x83c>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
   128b8:	e0bfed17 	ldw	r2,-76(fp)
   128bc:	11000117 	ldw	r4,4(r2)
   128c0:	e0bff20b 	ldhu	r2,-56(fp)
   128c4:	e0fffd17 	ldw	r3,-12(fp)
   128c8:	1887883a 	add	r3,r3,r2
   128cc:	e0bff80b 	ldhu	r2,-32(fp)
   128d0:	180b883a 	mov	r5,r3
   128d4:	100d883a 	mov	r6,r2
   128d8:	0017a440 	call	17a44 <memcpy>
   128dc:	00000d06 	br	12914 <tcp_write+0x338>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
   128e0:	e0bff80b 	ldhu	r2,-32(fp)
   128e4:	010000c4 	movi	r4,3
   128e8:	100b883a 	mov	r5,r2
   128ec:	01800044 	movi	r6,1
   128f0:	0009a600 	call	9a60 <pbuf_alloc>
   128f4:	e0bfed15 	stw	r2,-76(fp)
   128f8:	e0bfed17 	ldw	r2,-76(fp)
   128fc:	10014826 	beq	r2,zero,12e20 <tcp_write+0x844>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
   12900:	e0bff20b 	ldhu	r2,-56(fp)
   12904:	e0fffd17 	ldw	r3,-12(fp)
   12908:	1887883a 	add	r3,r3,r2
   1290c:	e0bfed17 	ldw	r2,-76(fp)
   12910:	10c00115 	stw	r3,4(r2)
      }

      pos += seglen;
   12914:	e0fff20b 	ldhu	r3,-56(fp)
   12918:	e0bff80b 	ldhu	r2,-32(fp)
   1291c:	1885883a 	add	r2,r3,r2
   12920:	e0bff20d 	sth	r2,-56(fp)
      queuelen += pbuf_clen(concat_p);
   12924:	e13fed17 	ldw	r4,-76(fp)
   12928:	000a5ec0 	call	a5ec <pbuf_clen>
   1292c:	10c03fcc 	andi	r3,r2,255
   12930:	e0bff28b 	ldhu	r2,-54(fp)
   12934:	1885883a 	add	r2,r3,r2
   12938:	e0bff28d 	sth	r2,-54(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
   1293c:	0000ab06 	br	12bec <tcp_write+0x610>
      pos += seglen;
      queuelen += pbuf_clen(concat_p);
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
   12940:	e0bffc17 	ldw	r2,-16(fp)
   12944:	10801b8b 	ldhu	r2,110(r2)
   12948:	10bfffcc 	andi	r2,r2,65535
   1294c:	1000a726 	beq	r2,zero,12bec <tcp_write+0x610>
   12950:	010000f4 	movhi	r4,3
   12954:	21007604 	addi	r4,r4,472
   12958:	014000f4 	movhi	r5,3
   1295c:	2940d004 	addi	r5,r5,832
   12960:	01808004 	movi	r6,512
   12964:	01c000f4 	movhi	r7,3
   12968:	39c08c04 	addi	r7,r7,560
   1296c:	0017c440 	call	17c44 <printf>
   12970:	003fff06 	br	12970 <tcp_write+0x394>
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
    struct pbuf *p;
    u16_t left = len - pos;
   12974:	e0fffe0b 	ldhu	r3,-8(fp)
   12978:	e0bff20b 	ldhu	r2,-56(fp)
   1297c:	1885c83a 	sub	r2,r3,r2
   12980:	e0bff88d 	sth	r2,-30(fp)
    u16_t max_len = mss_local - optlen;
   12984:	e0bff603 	ldbu	r2,-40(fp)
   12988:	e0fff68b 	ldhu	r3,-38(fp)
   1298c:	1885c83a 	sub	r2,r3,r2
   12990:	e0bff90d 	sth	r2,-28(fp)
    u16_t seglen = left > max_len ? max_len : left;
   12994:	e0fff90b 	ldhu	r3,-28(fp)
   12998:	e0bff88b 	ldhu	r2,-30(fp)
   1299c:	113fffcc 	andi	r4,r2,65535
   129a0:	197fffcc 	andi	r5,r3,65535
   129a4:	2900012e 	bgeu	r5,r4,129ac <tcp_write+0x3d0>
   129a8:	1805883a 	mov	r2,r3
   129ac:	e0bff98d 	sth	r2,-26(fp)
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
   129b0:	e0bfff03 	ldbu	r2,-4(fp)
   129b4:	1080004c 	andi	r2,r2,1
   129b8:	10002f26 	beq	r2,zero,12a78 <tcp_write+0x49c>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
   129bc:	e0fff603 	ldbu	r3,-40(fp)
   129c0:	e0bff98b 	ldhu	r2,-26(fp)
   129c4:	1885883a 	add	r2,r3,r2
   129c8:	117fffcc 	andi	r5,r2,65535
   129cc:	e0fff68b 	ldhu	r3,-38(fp)
   129d0:	e1bfff03 	ldbu	r6,-4(fp)
   129d4:	e0bff117 	ldw	r2,-60(fp)
   129d8:	1005003a 	cmpeq	r2,r2,zero
   129dc:	11003fcc 	andi	r4,r2,255
   129e0:	e0bffb04 	addi	r2,fp,-20
   129e4:	e1fffc17 	ldw	r7,-16(fp)
   129e8:	d9c00015 	stw	r7,0(sp)
   129ec:	d9800115 	stw	r6,4(sp)
   129f0:	d9000215 	stw	r4,8(sp)
   129f4:	0009883a 	mov	r4,zero
   129f8:	180d883a 	mov	r6,r3
   129fc:	100f883a 	mov	r7,r2
   12a00:	00122d00 	call	122d0 <tcp_pbuf_prealloc>
   12a04:	e0bff415 	stw	r2,-48(fp)
   12a08:	e0bff417 	ldw	r2,-48(fp)
   12a0c:	10010626 	beq	r2,zero,12e28 <tcp_write+0x84c>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
   12a10:	e0bff417 	ldw	r2,-48(fp)
   12a14:	1080028b 	ldhu	r2,10(r2)
   12a18:	10ffffcc 	andi	r3,r2,65535
   12a1c:	e0bff98b 	ldhu	r2,-26(fp)
   12a20:	1880092e 	bgeu	r3,r2,12a48 <tcp_write+0x46c>
   12a24:	010000f4 	movhi	r4,3
   12a28:	21007604 	addi	r4,r4,472
   12a2c:	014000f4 	movhi	r5,3
   12a30:	2940dc04 	addi	r5,r5,880
   12a34:	01808704 	movi	r6,540
   12a38:	01c000f4 	movhi	r7,3
   12a3c:	39c08c04 	addi	r7,r7,560
   12a40:	0017c440 	call	17c44 <printf>
   12a44:	003fff06 	br	12a44 <tcp_write+0x468>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
   12a48:	e0bff417 	ldw	r2,-48(fp)
   12a4c:	10c00117 	ldw	r3,4(r2)
   12a50:	e0bff603 	ldbu	r2,-40(fp)
   12a54:	1889883a 	add	r4,r3,r2
   12a58:	e0bff20b 	ldhu	r2,-56(fp)
   12a5c:	e0fffd17 	ldw	r3,-12(fp)
   12a60:	1887883a 	add	r3,r3,r2
   12a64:	e0bff98b 	ldhu	r2,-26(fp)
   12a68:	180b883a 	mov	r5,r3
   12a6c:	100d883a 	mov	r6,r2
   12a70:	0017a440 	call	17a44 <memcpy>
   12a74:	00002706 	br	12b14 <tcp_write+0x538>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
   12a78:	e0bffb0b 	ldhu	r2,-20(fp)
   12a7c:	10bfffcc 	andi	r2,r2,65535
   12a80:	10000926 	beq	r2,zero,12aa8 <tcp_write+0x4cc>
   12a84:	010000f4 	movhi	r4,3
   12a88:	21007604 	addi	r4,r4,472
   12a8c:	014000f4 	movhi	r5,3
   12a90:	2940ec04 	addi	r5,r5,944
   12a94:	01808984 	movi	r6,550
   12a98:	01c000f4 	movhi	r7,3
   12a9c:	39c08c04 	addi	r7,r7,560
   12aa0:	0017c440 	call	17c44 <printf>
   12aa4:	003fff06 	br	12aa4 <tcp_write+0x4c8>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
   12aa8:	e0bff98b 	ldhu	r2,-26(fp)
   12aac:	0009883a 	mov	r4,zero
   12ab0:	100b883a 	mov	r5,r2
   12ab4:	01800044 	movi	r6,1
   12ab8:	0009a600 	call	9a60 <pbuf_alloc>
   12abc:	e0bffa15 	stw	r2,-24(fp)
   12ac0:	e0bffa17 	ldw	r2,-24(fp)
   12ac4:	1000da26 	beq	r2,zero,12e30 <tcp_write+0x854>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
   12ac8:	e0bff20b 	ldhu	r2,-56(fp)
   12acc:	e0fffd17 	ldw	r3,-12(fp)
   12ad0:	1887883a 	add	r3,r3,r2
   12ad4:	e0bffa17 	ldw	r2,-24(fp)
   12ad8:	10c00115 	stw	r3,4(r2)

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   12adc:	e0bff603 	ldbu	r2,-40(fp)
   12ae0:	0009883a 	mov	r4,zero
   12ae4:	100b883a 	mov	r5,r2
   12ae8:	000d883a 	mov	r6,zero
   12aec:	0009a600 	call	9a60 <pbuf_alloc>
   12af0:	e0bff415 	stw	r2,-48(fp)
   12af4:	e0bff417 	ldw	r2,-48(fp)
   12af8:	1000031e 	bne	r2,zero,12b08 <tcp_write+0x52c>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
   12afc:	e13ffa17 	ldw	r4,-24(fp)
   12b00:	000a4200 	call	a420 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
   12b04:	0000cd06 	br	12e3c <tcp_write+0x860>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
   12b08:	e13ff417 	ldw	r4,-48(fp)
   12b0c:	e17ffa17 	ldw	r5,-24(fp)
   12b10:	000a6780 	call	a678 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
   12b14:	e13ff417 	ldw	r4,-48(fp)
   12b18:	000a5ec0 	call	a5ec <pbuf_clen>
   12b1c:	10c03fcc 	andi	r3,r2,255
   12b20:	e0bff28b 	ldhu	r2,-54(fp)
   12b24:	1885883a 	add	r2,r3,r2
   12b28:	e0bff28d 	sth	r2,-54(fp)

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
   12b2c:	e0bff28b 	ldhu	r2,-54(fp)
   12b30:	10800b68 	cmpgeui	r2,r2,45
   12b34:	1000031e 	bne	r2,zero,12b44 <tcp_write+0x568>
   12b38:	e0bff28b 	ldhu	r2,-54(fp)
   12b3c:	10bfff70 	cmpltui	r2,r2,65533
   12b40:	1000031e 	bne	r2,zero,12b50 <tcp_write+0x574>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
   12b44:	e13ff417 	ldw	r4,-48(fp)
   12b48:	000a4200 	call	a420 <pbuf_free>
      goto memerr;
   12b4c:	0000bb06 	br	12e3c <tcp_write+0x860>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
   12b50:	e0bffc17 	ldw	r2,-16(fp)
   12b54:	10c01817 	ldw	r3,96(r2)
   12b58:	e0bff20b 	ldhu	r2,-56(fp)
   12b5c:	1885883a 	add	r2,r3,r2
   12b60:	e0fff643 	ldbu	r3,-39(fp)
   12b64:	d8c00015 	stw	r3,0(sp)
   12b68:	e13ffc17 	ldw	r4,-16(fp)
   12b6c:	e17ff417 	ldw	r5,-48(fp)
   12b70:	000d883a 	mov	r6,zero
   12b74:	100f883a 	mov	r7,r2
   12b78:	001206c0 	call	1206c <tcp_create_segment>
   12b7c:	e0bfef15 	stw	r2,-68(fp)
   12b80:	e0bfef17 	ldw	r2,-68(fp)
   12b84:	1000ac26 	beq	r2,zero,12e38 <tcp_write+0x85c>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
   12b88:	e0bff117 	ldw	r2,-60(fp)
   12b8c:	1000031e 	bne	r2,zero,12b9c <tcp_write+0x5c0>
      queue = seg;
   12b90:	e0bfef17 	ldw	r2,-68(fp)
   12b94:	e0bff115 	stw	r2,-60(fp)
   12b98:	00000e06 	br	12bd4 <tcp_write+0x5f8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
   12b9c:	e0bff017 	ldw	r2,-64(fp)
   12ba0:	1000091e 	bne	r2,zero,12bc8 <tcp_write+0x5ec>
   12ba4:	010000f4 	movhi	r4,3
   12ba8:	21007604 	addi	r4,r4,472
   12bac:	014000f4 	movhi	r5,3
   12bb0:	2940f004 	addi	r5,r5,960
   12bb4:	018096c4 	movi	r6,603
   12bb8:	01c000f4 	movhi	r7,3
   12bbc:	39c08c04 	addi	r7,r7,560
   12bc0:	0017c440 	call	17c44 <printf>
   12bc4:	003fff06 	br	12bc4 <tcp_write+0x5e8>
      prev_seg->next = seg;
   12bc8:	e0bff017 	ldw	r2,-64(fp)
   12bcc:	e0ffef17 	ldw	r3,-68(fp)
   12bd0:	10c00015 	stw	r3,0(r2)
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
   12bd4:	e0bfef17 	ldw	r2,-68(fp)
   12bd8:	e0bff015 	stw	r2,-64(fp)

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
   12bdc:	e0fff20b 	ldhu	r3,-56(fp)
   12be0:	e0bff98b 	ldhu	r2,-26(fp)
   12be4:	1885883a 	add	r2,r3,r2
   12be8:	e0bff20d 	sth	r2,-56(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
   12bec:	e0fff20b 	ldhu	r3,-56(fp)
   12bf0:	e0bffe0b 	ldhu	r2,-8(fp)
   12bf4:	18bf5f36 	bltu	r3,r2,12974 <tcp_write+0x398>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
   12bf8:	e0bff30b 	ldhu	r2,-52(fp)
   12bfc:	10002c26 	beq	r2,zero,12cb0 <tcp_write+0x6d4>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
   12c00:	e0bfee17 	ldw	r2,-72(fp)
   12c04:	10800117 	ldw	r2,4(r2)
   12c08:	e0bff515 	stw	r2,-44(fp)
   12c0c:	00001f06 	br	12c8c <tcp_write+0x6b0>
      p->tot_len += oversize_used;
   12c10:	e0bff517 	ldw	r2,-44(fp)
   12c14:	10c0020b 	ldhu	r3,8(r2)
   12c18:	e0bff30b 	ldhu	r2,-52(fp)
   12c1c:	1885883a 	add	r2,r3,r2
   12c20:	1007883a 	mov	r3,r2
   12c24:	e0bff517 	ldw	r2,-44(fp)
   12c28:	10c0020d 	sth	r3,8(r2)
      if (p->next == NULL) {
   12c2c:	e0bff517 	ldw	r2,-44(fp)
   12c30:	10800017 	ldw	r2,0(r2)
   12c34:	1000121e 	bne	r2,zero,12c80 <tcp_write+0x6a4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
   12c38:	e0bff517 	ldw	r2,-44(fp)
   12c3c:	10c00117 	ldw	r3,4(r2)
   12c40:	e0bff517 	ldw	r2,-44(fp)
   12c44:	1080028b 	ldhu	r2,10(r2)
   12c48:	10bfffcc 	andi	r2,r2,65535
   12c4c:	1887883a 	add	r3,r3,r2
   12c50:	e0bff30b 	ldhu	r2,-52(fp)
   12c54:	1809883a 	mov	r4,r3
   12c58:	e17ffd17 	ldw	r5,-12(fp)
   12c5c:	100d883a 	mov	r6,r2
   12c60:	0017a440 	call	17a44 <memcpy>
        p->len += oversize_used;
   12c64:	e0bff517 	ldw	r2,-44(fp)
   12c68:	10c0028b 	ldhu	r3,10(r2)
   12c6c:	e0bff30b 	ldhu	r2,-52(fp)
   12c70:	1885883a 	add	r2,r3,r2
   12c74:	1007883a 	mov	r3,r2
   12c78:	e0bff517 	ldw	r2,-44(fp)
   12c7c:	10c0028d 	sth	r3,10(r2)
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
   12c80:	e0bff517 	ldw	r2,-44(fp)
   12c84:	10800017 	ldw	r2,0(r2)
   12c88:	e0bff515 	stw	r2,-44(fp)
   12c8c:	e0bff517 	ldw	r2,-44(fp)
   12c90:	103fdf1e 	bne	r2,zero,12c10 <tcp_write+0x634>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
   12c94:	e0bfee17 	ldw	r2,-72(fp)
   12c98:	10c0020b 	ldhu	r3,8(r2)
   12c9c:	e0bff30b 	ldhu	r2,-52(fp)
   12ca0:	1885883a 	add	r2,r3,r2
   12ca4:	1007883a 	mov	r3,r2
   12ca8:	e0bfee17 	ldw	r2,-72(fp)
   12cac:	10c0020d 	sth	r3,8(r2)
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
   12cb0:	e0fffb0b 	ldhu	r3,-20(fp)
   12cb4:	e0bffc17 	ldw	r2,-16(fp)
   12cb8:	10c01b8d 	sth	r3,110(r2)
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
   12cbc:	e0bfed17 	ldw	r2,-76(fp)
   12cc0:	10001826 	beq	r2,zero,12d24 <tcp_write+0x748>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
   12cc4:	e0bfee17 	ldw	r2,-72(fp)
   12cc8:	1000091e 	bne	r2,zero,12cf0 <tcp_write+0x714>
   12ccc:	010000f4 	movhi	r4,3
   12cd0:	21007604 	addi	r4,r4,472
   12cd4:	014000f4 	movhi	r5,3
   12cd8:	2940f504 	addi	r5,r5,980
   12cdc:	0180a2c4 	movi	r6,651
   12ce0:	01c000f4 	movhi	r7,3
   12ce4:	39c08c04 	addi	r7,r7,560
   12ce8:	0017c440 	call	17c44 <printf>
   12cec:	003fff06 	br	12cec <tcp_write+0x710>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
   12cf0:	e0bfee17 	ldw	r2,-72(fp)
   12cf4:	10800117 	ldw	r2,4(r2)
   12cf8:	1009883a 	mov	r4,r2
   12cfc:	e17fed17 	ldw	r5,-76(fp)
   12d00:	000a6780 	call	a678 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
   12d04:	e0bfee17 	ldw	r2,-72(fp)
   12d08:	10c0020b 	ldhu	r3,8(r2)
   12d0c:	e0bfed17 	ldw	r2,-76(fp)
   12d10:	1080020b 	ldhu	r2,8(r2)
   12d14:	1885883a 	add	r2,r3,r2
   12d18:	1007883a 	mov	r3,r2
   12d1c:	e0bfee17 	ldw	r2,-72(fp)
   12d20:	10c0020d 	sth	r3,8(r2)

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
   12d24:	e0bfee17 	ldw	r2,-72(fp)
   12d28:	1000041e 	bne	r2,zero,12d3c <tcp_write+0x760>
    pcb->unsent = queue;
   12d2c:	e0bffc17 	ldw	r2,-16(fp)
   12d30:	e0fff117 	ldw	r3,-60(fp)
   12d34:	10c01c15 	stw	r3,112(r2)
   12d38:	00000306 	br	12d48 <tcp_write+0x76c>
  } else {
    last_unsent->next = queue;
   12d3c:	e0bfee17 	ldw	r2,-72(fp)
   12d40:	e0fff117 	ldw	r3,-60(fp)
   12d44:	10c00015 	stw	r3,0(r2)
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
   12d48:	e0bffc17 	ldw	r2,-16(fp)
   12d4c:	10c01817 	ldw	r3,96(r2)
   12d50:	e0bffe0b 	ldhu	r2,-8(fp)
   12d54:	1887883a 	add	r3,r3,r2
   12d58:	e0bffc17 	ldw	r2,-16(fp)
   12d5c:	10c01815 	stw	r3,96(r2)
  pcb->snd_buf -= len;
   12d60:	e0bffc17 	ldw	r2,-16(fp)
   12d64:	10c01a8b 	ldhu	r3,106(r2)
   12d68:	e0bffe0b 	ldhu	r2,-8(fp)
   12d6c:	1885c83a 	sub	r2,r3,r2
   12d70:	1007883a 	mov	r3,r2
   12d74:	e0bffc17 	ldw	r2,-16(fp)
   12d78:	10c01a8d 	sth	r3,106(r2)
  pcb->snd_queuelen = queuelen;
   12d7c:	e0bffc17 	ldw	r2,-16(fp)
   12d80:	e0fff28b 	ldhu	r3,-54(fp)
   12d84:	10c01b0d 	sth	r3,108(r2)

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
   12d88:	e0bffc17 	ldw	r2,-16(fp)
   12d8c:	10801b0b 	ldhu	r2,108(r2)
   12d90:	10bfffcc 	andi	r2,r2,65535
   12d94:	10000f26 	beq	r2,zero,12dd4 <tcp_write+0x7f8>
    LWIP_ASSERT("tcp_write: valid queue length",
   12d98:	e0bffc17 	ldw	r2,-16(fp)
   12d9c:	10801d17 	ldw	r2,116(r2)
   12da0:	10000c1e 	bne	r2,zero,12dd4 <tcp_write+0x7f8>
   12da4:	e0bffc17 	ldw	r2,-16(fp)
   12da8:	10801c17 	ldw	r2,112(r2)
   12dac:	1000091e 	bne	r2,zero,12dd4 <tcp_write+0x7f8>
   12db0:	010000f4 	movhi	r4,3
   12db4:	21007604 	addi	r4,r4,472
   12db8:	014000f4 	movhi	r5,3
   12dbc:	29410304 	addi	r5,r5,1036
   12dc0:	0180ab04 	movi	r6,684
   12dc4:	01c000f4 	movhi	r7,3
   12dc8:	39c08c04 	addi	r7,r7,560
   12dcc:	0017c440 	call	17c44 <printf>
   12dd0:	003fff06 	br	12dd0 <tcp_write+0x7f4>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
   12dd4:	e0bfef17 	ldw	r2,-68(fp)
   12dd8:	10000d26 	beq	r2,zero,12e10 <tcp_write+0x834>
   12ddc:	e0bfef17 	ldw	r2,-68(fp)
   12de0:	10800317 	ldw	r2,12(r2)
   12de4:	10000a26 	beq	r2,zero,12e10 <tcp_write+0x834>
   12de8:	e0bfff03 	ldbu	r2,-4(fp)
   12dec:	1080008c 	andi	r2,r2,2
   12df0:	1000071e 	bne	r2,zero,12e10 <tcp_write+0x834>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
   12df4:	e0bfef17 	ldw	r2,-68(fp)
   12df8:	10800317 	ldw	r2,12(r2)
   12dfc:	e0ffef17 	ldw	r3,-68(fp)
   12e00:	18c00317 	ldw	r3,12(r3)
   12e04:	18c0030b 	ldhu	r3,12(r3)
   12e08:	18c20014 	ori	r3,r3,2048
   12e0c:	10c0030d 	sth	r3,12(r2)
  }

  return ERR_OK;
   12e10:	0005883a 	mov	r2,zero
   12e14:	00003406 	br	12ee8 <tcp_write+0x90c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
   12e18:	0001883a 	nop
   12e1c:	00000706 	br	12e3c <tcp_write+0x860>
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
   12e20:	0001883a 	nop
   12e24:	00000506 	br	12e3c <tcp_write+0x860>
    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
   12e28:	0001883a 	nop
   12e2c:	00000306 	br	12e3c <tcp_write+0x860>
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
   12e30:	0001883a 	nop
   12e34:	00000106 	br	12e3c <tcp_write+0x860>
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
      goto memerr;
   12e38:	0001883a 	nop
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
   12e3c:	e0bffc17 	ldw	r2,-16(fp)
   12e40:	10c00883 	ldbu	r3,34(r2)
   12e44:	00bfe004 	movi	r2,-128
   12e48:	1884b03a 	or	r2,r3,r2
   12e4c:	1007883a 	mov	r3,r2
   12e50:	e0bffc17 	ldw	r2,-16(fp)
   12e54:	10c00885 	stb	r3,34(r2)
  TCP_STATS_INC(tcp.memerr);
   12e58:	00800134 	movhi	r2,4
   12e5c:	10932304 	addi	r2,r2,19596
   12e60:	1080270b 	ldhu	r2,156(r2)
   12e64:	10800044 	addi	r2,r2,1
   12e68:	1007883a 	mov	r3,r2
   12e6c:	00800134 	movhi	r2,4
   12e70:	10932304 	addi	r2,r2,19596
   12e74:	10c0270d 	sth	r3,156(r2)

  if (concat_p != NULL) {
   12e78:	e0bfed17 	ldw	r2,-76(fp)
   12e7c:	10000226 	beq	r2,zero,12e88 <tcp_write+0x8ac>
    pbuf_free(concat_p);
   12e80:	e13fed17 	ldw	r4,-76(fp)
   12e84:	000a4200 	call	a420 <pbuf_free>
  }
  if (queue != NULL) {
   12e88:	e0bff117 	ldw	r2,-60(fp)
   12e8c:	10000226 	beq	r2,zero,12e98 <tcp_write+0x8bc>
    tcp_segs_free(queue);
   12e90:	e13ff117 	ldw	r4,-60(fp)
   12e94:	000d3a40 	call	d3a4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
   12e98:	e0bffc17 	ldw	r2,-16(fp)
   12e9c:	10801b0b 	ldhu	r2,108(r2)
   12ea0:	10bfffcc 	andi	r2,r2,65535
   12ea4:	10000f26 	beq	r2,zero,12ee4 <tcp_write+0x908>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
   12ea8:	e0bffc17 	ldw	r2,-16(fp)
   12eac:	10801d17 	ldw	r2,116(r2)
   12eb0:	10000c1e 	bne	r2,zero,12ee4 <tcp_write+0x908>
   12eb4:	e0bffc17 	ldw	r2,-16(fp)
   12eb8:	10801c17 	ldw	r2,112(r2)
   12ebc:	1000091e 	bne	r2,zero,12ee4 <tcp_write+0x908>
   12ec0:	010000f4 	movhi	r4,3
   12ec4:	21007604 	addi	r4,r4,472
   12ec8:	014000f4 	movhi	r5,3
   12ecc:	29410304 	addi	r5,r5,1036
   12ed0:	0180b044 	movi	r6,705
   12ed4:	01c000f4 	movhi	r7,3
   12ed8:	39c08c04 	addi	r7,r7,560
   12edc:	0017c440 	call	17c44 <printf>
   12ee0:	003fff06 	br	12ee0 <tcp_write+0x904>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
   12ee4:	00bfffc4 	movi	r2,-1
}
   12ee8:	e037883a 	mov	sp,fp
   12eec:	dfc00117 	ldw	ra,4(sp)
   12ef0:	df000017 	ldw	fp,0(sp)
   12ef4:	dec00204 	addi	sp,sp,8
   12ef8:	f800283a 	ret

00012efc <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
   12efc:	defff504 	addi	sp,sp,-44
   12f00:	dfc00a15 	stw	ra,40(sp)
   12f04:	df000915 	stw	fp,36(sp)
   12f08:	dc000815 	stw	r16,32(sp)
   12f0c:	df000804 	addi	fp,sp,32
   12f10:	e13ffe15 	stw	r4,-8(fp)
   12f14:	2805883a 	mov	r2,r5
   12f18:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
   12f1c:	e03ff905 	stb	zero,-28(fp)
  u8_t optlen = 0;
   12f20:	e03ffb05 	stb	zero,-20(fp)

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
   12f24:	e0bfff03 	ldbu	r2,-4(fp)
   12f28:	108000cc 	andi	r2,r2,3
   12f2c:	1000091e 	bne	r2,zero,12f54 <tcp_enqueue_flags+0x58>
   12f30:	010000f4 	movhi	r4,3
   12f34:	21007604 	addi	r4,r4,472
   12f38:	014000f4 	movhi	r5,3
   12f3c:	29410b04 	addi	r5,r5,1068
   12f40:	0180b704 	movi	r6,732
   12f44:	01c000f4 	movhi	r7,3
   12f48:	39c08c04 	addi	r7,r7,560
   12f4c:	0017c440 	call	17c44 <printf>
   12f50:	003fff06 	br	12f50 <tcp_enqueue_flags+0x54>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
   12f54:	e0bffe17 	ldw	r2,-8(fp)
   12f58:	10801b0b 	ldhu	r2,108(r2)
   12f5c:	10bfffcc 	andi	r2,r2,65535
   12f60:	10800b28 	cmpgeui	r2,r2,44
   12f64:	1000051e 	bne	r2,zero,12f7c <tcp_enqueue_flags+0x80>
   12f68:	e0bffe17 	ldw	r2,-8(fp)
   12f6c:	10801b0b 	ldhu	r2,108(r2)
   12f70:	10bfffcc 	andi	r2,r2,65535
   12f74:	10bfff70 	cmpltui	r2,r2,65533
   12f78:	1000111e 	bne	r2,zero,12fc0 <tcp_enqueue_flags+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
   12f7c:	00800134 	movhi	r2,4
   12f80:	10932304 	addi	r2,r2,19596
   12f84:	1080270b 	ldhu	r2,156(r2)
   12f88:	10800044 	addi	r2,r2,1
   12f8c:	1007883a 	mov	r3,r2
   12f90:	00800134 	movhi	r2,4
   12f94:	10932304 	addi	r2,r2,19596
   12f98:	10c0270d 	sth	r3,156(r2)
    pcb->flags |= TF_NAGLEMEMERR;
   12f9c:	e0bffe17 	ldw	r2,-8(fp)
   12fa0:	10c00883 	ldbu	r3,34(r2)
   12fa4:	00bfe004 	movi	r2,-128
   12fa8:	1884b03a 	or	r2,r3,r2
   12fac:	1007883a 	mov	r3,r2
   12fb0:	e0bffe17 	ldw	r2,-8(fp)
   12fb4:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
   12fb8:	00bfffc4 	movi	r2,-1
   12fbc:	0000d006 	br	13300 <tcp_enqueue_flags+0x404>
  }

  if (flags & TCP_SYN) {
   12fc0:	e0bfff03 	ldbu	r2,-4(fp)
   12fc4:	1080008c 	andi	r2,r2,2
   12fc8:	10000226 	beq	r2,zero,12fd4 <tcp_enqueue_flags+0xd8>
    optflags = TF_SEG_OPTS_MSS;
   12fcc:	00800044 	movi	r2,1
   12fd0:	e0bff905 	stb	r2,-28(fp)
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
   12fd4:	e0bff903 	ldbu	r2,-28(fp)
   12fd8:	1080004c 	andi	r2,r2,1
   12fdc:	10000226 	beq	r2,zero,12fe8 <tcp_enqueue_flags+0xec>
   12fe0:	00c00104 	movi	r3,4
   12fe4:	00000106 	br	12fec <tcp_enqueue_flags+0xf0>
   12fe8:	0007883a 	mov	r3,zero
   12fec:	e0bff903 	ldbu	r2,-28(fp)
   12ff0:	1080008c 	andi	r2,r2,2
   12ff4:	10000226 	beq	r2,zero,13000 <tcp_enqueue_flags+0x104>
   12ff8:	00800304 	movi	r2,12
   12ffc:	00000106 	br	13004 <tcp_enqueue_flags+0x108>
   13000:	0005883a 	mov	r2,zero
   13004:	1885883a 	add	r2,r3,r2
   13008:	e0bffb05 	stb	r2,-20(fp)

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
   1300c:	e0bffe17 	ldw	r2,-8(fp)
   13010:	10801a8b 	ldhu	r2,106(r2)
   13014:	10bfffcc 	andi	r2,r2,65535
   13018:	10000a1e 	bne	r2,zero,13044 <tcp_enqueue_flags+0x148>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
   1301c:	00800134 	movhi	r2,4
   13020:	10932304 	addi	r2,r2,19596
   13024:	1080270b 	ldhu	r2,156(r2)
   13028:	10800044 	addi	r2,r2,1
   1302c:	1007883a 	mov	r3,r2
   13030:	00800134 	movhi	r2,4
   13034:	10932304 	addi	r2,r2,19596
   13038:	10c0270d 	sth	r3,156(r2)
    return ERR_MEM;
   1303c:	00bfffc4 	movi	r2,-1
   13040:	0000af06 	br	13300 <tcp_enqueue_flags+0x404>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
   13044:	e0bffb03 	ldbu	r2,-20(fp)
   13048:	0009883a 	mov	r4,zero
   1304c:	100b883a 	mov	r5,r2
   13050:	000d883a 	mov	r6,zero
   13054:	0009a600 	call	9a60 <pbuf_alloc>
   13058:	e0bffc15 	stw	r2,-16(fp)
   1305c:	e0bffc17 	ldw	r2,-16(fp)
   13060:	1000111e 	bne	r2,zero,130a8 <tcp_enqueue_flags+0x1ac>
    pcb->flags |= TF_NAGLEMEMERR;
   13064:	e0bffe17 	ldw	r2,-8(fp)
   13068:	10c00883 	ldbu	r3,34(r2)
   1306c:	00bfe004 	movi	r2,-128
   13070:	1884b03a 	or	r2,r3,r2
   13074:	1007883a 	mov	r3,r2
   13078:	e0bffe17 	ldw	r2,-8(fp)
   1307c:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
   13080:	00800134 	movhi	r2,4
   13084:	10932304 	addi	r2,r2,19596
   13088:	1080270b 	ldhu	r2,156(r2)
   1308c:	10800044 	addi	r2,r2,1
   13090:	1007883a 	mov	r3,r2
   13094:	00800134 	movhi	r2,4
   13098:	10932304 	addi	r2,r2,19596
   1309c:	10c0270d 	sth	r3,156(r2)
    return ERR_MEM;
   130a0:	00bfffc4 	movi	r2,-1
   130a4:	00009606 	br	13300 <tcp_enqueue_flags+0x404>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
   130a8:	e0bffc17 	ldw	r2,-16(fp)
   130ac:	10c0028b 	ldhu	r3,10(r2)
   130b0:	e0bffb03 	ldbu	r2,-20(fp)
   130b4:	18ffffcc 	andi	r3,r3,65535
   130b8:	10bfffcc 	andi	r2,r2,65535
   130bc:	1880092e 	bgeu	r3,r2,130e4 <tcp_enqueue_flags+0x1e8>
   130c0:	010000f4 	movhi	r4,3
   130c4:	21007604 	addi	r4,r4,472
   130c8:	014000f4 	movhi	r5,3
   130cc:	29412104 	addi	r5,r5,1156
   130d0:	0180c084 	movi	r6,770
   130d4:	01c000f4 	movhi	r7,3
   130d8:	39c08c04 	addi	r7,r7,560
   130dc:	0017c440 	call	17c44 <printf>
   130e0:	003fff06 	br	130e0 <tcp_enqueue_flags+0x1e4>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
   130e4:	e0ffff03 	ldbu	r3,-4(fp)
   130e8:	e0bffe17 	ldw	r2,-8(fp)
   130ec:	10801817 	ldw	r2,96(r2)
   130f0:	e13ff903 	ldbu	r4,-28(fp)
   130f4:	d9000015 	stw	r4,0(sp)
   130f8:	e13ffe17 	ldw	r4,-8(fp)
   130fc:	e17ffc17 	ldw	r5,-16(fp)
   13100:	180d883a 	mov	r6,r3
   13104:	100f883a 	mov	r7,r2
   13108:	001206c0 	call	1206c <tcp_create_segment>
   1310c:	e0bffd15 	stw	r2,-12(fp)
   13110:	e0bffd17 	ldw	r2,-12(fp)
   13114:	1000111e 	bne	r2,zero,1315c <tcp_enqueue_flags+0x260>
    pcb->flags |= TF_NAGLEMEMERR;
   13118:	e0bffe17 	ldw	r2,-8(fp)
   1311c:	10c00883 	ldbu	r3,34(r2)
   13120:	00bfe004 	movi	r2,-128
   13124:	1884b03a 	or	r2,r3,r2
   13128:	1007883a 	mov	r3,r2
   1312c:	e0bffe17 	ldw	r2,-8(fp)
   13130:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
   13134:	00800134 	movhi	r2,4
   13138:	10932304 	addi	r2,r2,19596
   1313c:	1080270b 	ldhu	r2,156(r2)
   13140:	10800044 	addi	r2,r2,1
   13144:	1007883a 	mov	r3,r2
   13148:	00800134 	movhi	r2,4
   1314c:	10932304 	addi	r2,r2,19596
   13150:	10c0270d 	sth	r3,156(r2)
    return ERR_MEM;
   13154:	00bfffc4 	movi	r2,-1
   13158:	00006906 	br	13300 <tcp_enqueue_flags+0x404>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % MEM_ALIGNMENT) == 0);
   1315c:	e0bffd17 	ldw	r2,-12(fp)
   13160:	10800317 	ldw	r2,12(r2)
   13164:	108000cc 	andi	r2,r2,3
   13168:	10000926 	beq	r2,zero,13190 <tcp_enqueue_flags+0x294>
   1316c:	010000f4 	movhi	r4,3
   13170:	21007604 	addi	r4,r4,472
   13174:	014000f4 	movhi	r5,3
   13178:	29413004 	addi	r5,r5,1216
   1317c:	0180c284 	movi	r6,778
   13180:	01c000f4 	movhi	r7,3
   13184:	39c08c04 	addi	r7,r7,560
   13188:	0017c440 	call	17c44 <printf>
   1318c:	003fff06 	br	1318c <tcp_enqueue_flags+0x290>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
   13190:	e0bffd17 	ldw	r2,-12(fp)
   13194:	1080020b 	ldhu	r2,8(r2)
   13198:	10bfffcc 	andi	r2,r2,65535
   1319c:	10000926 	beq	r2,zero,131c4 <tcp_enqueue_flags+0x2c8>
   131a0:	010000f4 	movhi	r4,3
   131a4:	21007604 	addi	r4,r4,472
   131a8:	014000f4 	movhi	r5,3
   131ac:	29413604 	addi	r5,r5,1240
   131b0:	0180c2c4 	movi	r6,779
   131b4:	01c000f4 	movhi	r7,3
   131b8:	39c08c04 	addi	r7,r7,560
   131bc:	0017c440 	call	17c44 <printf>
   131c0:	003fff06 	br	131c0 <tcp_enqueue_flags+0x2c4>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
   131c4:	e0bffe17 	ldw	r2,-8(fp)
   131c8:	10801c17 	ldw	r2,112(r2)
   131cc:	1000041e 	bne	r2,zero,131e0 <tcp_enqueue_flags+0x2e4>
    pcb->unsent = seg;
   131d0:	e0bffe17 	ldw	r2,-8(fp)
   131d4:	e0fffd17 	ldw	r3,-12(fp)
   131d8:	10c01c15 	stw	r3,112(r2)
   131dc:	00000d06 	br	13214 <tcp_enqueue_flags+0x318>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
   131e0:	e0bffe17 	ldw	r2,-8(fp)
   131e4:	10801c17 	ldw	r2,112(r2)
   131e8:	e0bffa15 	stw	r2,-24(fp)
   131ec:	00000306 	br	131fc <tcp_enqueue_flags+0x300>
   131f0:	e0bffa17 	ldw	r2,-24(fp)
   131f4:	10800017 	ldw	r2,0(r2)
   131f8:	e0bffa15 	stw	r2,-24(fp)
   131fc:	e0bffa17 	ldw	r2,-24(fp)
   13200:	10800017 	ldw	r2,0(r2)
   13204:	103ffa1e 	bne	r2,zero,131f0 <tcp_enqueue_flags+0x2f4>
    useg->next = seg;
   13208:	e0bffa17 	ldw	r2,-24(fp)
   1320c:	e0fffd17 	ldw	r3,-12(fp)
   13210:	10c00015 	stw	r3,0(r2)
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
   13214:	e0bffe17 	ldw	r2,-8(fp)
   13218:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
   1321c:	e0bfff03 	ldbu	r2,-4(fp)
   13220:	1080008c 	andi	r2,r2,2
   13224:	1000031e 	bne	r2,zero,13234 <tcp_enqueue_flags+0x338>
   13228:	e0bfff03 	ldbu	r2,-4(fp)
   1322c:	1080004c 	andi	r2,r2,1
   13230:	10000b26 	beq	r2,zero,13260 <tcp_enqueue_flags+0x364>
    pcb->snd_lbb++;
   13234:	e0bffe17 	ldw	r2,-8(fp)
   13238:	10801817 	ldw	r2,96(r2)
   1323c:	10c00044 	addi	r3,r2,1
   13240:	e0bffe17 	ldw	r2,-8(fp)
   13244:	10c01815 	stw	r3,96(r2)
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
   13248:	e0bffe17 	ldw	r2,-8(fp)
   1324c:	10801a8b 	ldhu	r2,106(r2)
   13250:	10bfffc4 	addi	r2,r2,-1
   13254:	1007883a 	mov	r3,r2
   13258:	e0bffe17 	ldw	r2,-8(fp)
   1325c:	10c01a8d 	sth	r3,106(r2)
  }
  if (flags & TCP_FIN) {
   13260:	e0bfff03 	ldbu	r2,-4(fp)
   13264:	1080004c 	andi	r2,r2,1
   13268:	10000626 	beq	r2,zero,13284 <tcp_enqueue_flags+0x388>
    pcb->flags |= TF_FIN;
   1326c:	e0bffe17 	ldw	r2,-8(fp)
   13270:	10800883 	ldbu	r2,34(r2)
   13274:	10800814 	ori	r2,r2,32
   13278:	1007883a 	mov	r3,r2
   1327c:	e0bffe17 	ldw	r2,-8(fp)
   13280:	10c00885 	stb	r3,34(r2)
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
   13284:	e0bffe17 	ldw	r2,-8(fp)
   13288:	14001b0b 	ldhu	r16,108(r2)
   1328c:	e0bffd17 	ldw	r2,-12(fp)
   13290:	10800117 	ldw	r2,4(r2)
   13294:	1009883a 	mov	r4,r2
   13298:	000a5ec0 	call	a5ec <pbuf_clen>
   1329c:	10803fcc 	andi	r2,r2,255
   132a0:	8085883a 	add	r2,r16,r2
   132a4:	1007883a 	mov	r3,r2
   132a8:	e0bffe17 	ldw	r2,-8(fp)
   132ac:	10c01b0d 	sth	r3,108(r2)
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
   132b0:	e0bffe17 	ldw	r2,-8(fp)
   132b4:	10801b0b 	ldhu	r2,108(r2)
   132b8:	10bfffcc 	andi	r2,r2,65535
   132bc:	10000f26 	beq	r2,zero,132fc <tcp_enqueue_flags+0x400>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
   132c0:	e0bffe17 	ldw	r2,-8(fp)
   132c4:	10801d17 	ldw	r2,116(r2)
   132c8:	10000c1e 	bne	r2,zero,132fc <tcp_enqueue_flags+0x400>
   132cc:	e0bffe17 	ldw	r2,-8(fp)
   132d0:	10801c17 	ldw	r2,112(r2)
   132d4:	1000091e 	bne	r2,zero,132fc <tcp_enqueue_flags+0x400>
   132d8:	010000f4 	movhi	r4,3
   132dc:	21007604 	addi	r4,r4,472
   132e0:	014000f4 	movhi	r5,3
   132e4:	29414104 	addi	r5,r5,1284
   132e8:	0180cbc4 	movi	r6,815
   132ec:	01c000f4 	movhi	r7,3
   132f0:	39c08c04 	addi	r7,r7,560
   132f4:	0017c440 	call	17c44 <printf>
   132f8:	003fff06 	br	132f8 <tcp_enqueue_flags+0x3fc>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
   132fc:	0005883a 	mov	r2,zero
}
   13300:	e037883a 	mov	sp,fp
   13304:	dfc00217 	ldw	ra,8(sp)
   13308:	df000117 	ldw	fp,4(sp)
   1330c:	dc000017 	ldw	r16,0(sp)
   13310:	dec00304 	addi	sp,sp,12
   13314:	f800283a 	ret

00013318 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
   13318:	defff804 	addi	sp,sp,-32
   1331c:	dfc00715 	stw	ra,28(sp)
   13320:	df000615 	stw	fp,24(sp)
   13324:	df000604 	addi	fp,sp,24
   13328:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
   1332c:	e03ffc05 	stb	zero,-16(fp)
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
   13330:	e0fffc03 	ldbu	r3,-16(fp)
   13334:	e0bfff17 	ldw	r2,-4(fp)
   13338:	10801517 	ldw	r2,84(r2)
   1333c:	1008d63a 	srli	r4,r2,24
   13340:	e0bfff17 	ldw	r2,-4(fp)
   13344:	10801517 	ldw	r2,84(r2)
   13348:	1004d23a 	srli	r2,r2,8
   1334c:	10bfc00c 	andi	r2,r2,65280
   13350:	2088b03a 	or	r4,r4,r2
   13354:	e0bfff17 	ldw	r2,-4(fp)
   13358:	10801517 	ldw	r2,84(r2)
   1335c:	10bfc00c 	andi	r2,r2,65280
   13360:	1004923a 	slli	r2,r2,8
   13364:	2088b03a 	or	r4,r4,r2
   13368:	e0bfff17 	ldw	r2,-4(fp)
   1336c:	10801517 	ldw	r2,84(r2)
   13370:	1004963a 	slli	r2,r2,24
   13374:	2084b03a 	or	r2,r4,r2
   13378:	e13fff17 	ldw	r4,-4(fp)
   1337c:	180b883a 	mov	r5,r3
   13380:	000d883a 	mov	r6,zero
   13384:	100f883a 	mov	r7,r2
   13388:	0011d380 	call	11d38 <tcp_output_alloc_header>
   1338c:	e0bffd15 	stw	r2,-12(fp)
  if (p == NULL) {
   13390:	e0bffd17 	ldw	r2,-12(fp)
   13394:	1000021e 	bne	r2,zero,133a0 <tcp_send_empty_ack+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
   13398:	00bfff84 	movi	r2,-2
   1339c:	00002b06 	br	1344c <tcp_send_empty_ack+0x134>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   133a0:	e0bffd17 	ldw	r2,-12(fp)
   133a4:	10800117 	ldw	r2,4(r2)
   133a8:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	10c00883 	ldbu	r3,34(r2)
   133b4:	00bfff04 	movi	r2,-4
   133b8:	1884703a 	and	r2,r3,r2
   133bc:	1007883a 	mov	r3,r2
   133c0:	e0bfff17 	ldw	r2,-4(fp)
   133c4:	10c00885 	stb	r3,34(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
   133c8:	e0ffff17 	ldw	r3,-4(fp)
   133cc:	e0bfff17 	ldw	r2,-4(fp)
   133d0:	10800104 	addi	r2,r2,4
        IP_PROTO_TCP, p->tot_len);
   133d4:	e13ffd17 	ldw	r4,-12(fp)
   133d8:	2100020b 	ldhu	r4,8(r4)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
   133dc:	213fffcc 	andi	r4,r4,65535
   133e0:	d9000015 	stw	r4,0(sp)
   133e4:	e13ffd17 	ldw	r4,-12(fp)
   133e8:	180b883a 	mov	r5,r3
   133ec:	100d883a 	mov	r6,r2
   133f0:	01c00184 	movi	r7,6
   133f4:	00056a40 	call	56a4 <inet_chksum_pseudo>
   133f8:	e0fffe17 	ldw	r3,-8(fp)
   133fc:	1880040d 	sth	r2,16(r3)
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
   13400:	e17fff17 	ldw	r5,-4(fp)
   13404:	e0bfff17 	ldw	r2,-4(fp)
   13408:	10c00104 	addi	r3,r2,4
   1340c:	e0bfff17 	ldw	r2,-4(fp)
   13410:	10800283 	ldbu	r2,10(r2)
   13414:	10803fcc 	andi	r2,r2,255
   13418:	e13fff17 	ldw	r4,-4(fp)
   1341c:	21000243 	ldbu	r4,9(r4)
   13420:	21003fcc 	andi	r4,r4,255
   13424:	d9000015 	stw	r4,0(sp)
   13428:	01000184 	movi	r4,6
   1342c:	d9000115 	stw	r4,4(sp)
   13430:	e13ffd17 	ldw	r4,-12(fp)
   13434:	180d883a 	mov	r6,r3
   13438:	100f883a 	mov	r7,r2
   1343c:	00066a80 	call	66a8 <ip_output>
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
   13440:	e13ffd17 	ldw	r4,-12(fp)
   13444:	000a4200 	call	a420 <pbuf_free>

  return ERR_OK;
   13448:	0005883a 	mov	r2,zero
}
   1344c:	e037883a 	mov	sp,fp
   13450:	dfc00117 	ldw	ra,4(sp)
   13454:	df000017 	ldw	fp,0(sp)
   13458:	dec00204 	addi	sp,sp,8
   1345c:	f800283a 	ret

00013460 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
   13460:	defff804 	addi	sp,sp,-32
   13464:	dfc00715 	stw	ra,28(sp)
   13468:	df000615 	stw	fp,24(sp)
   1346c:	df000604 	addi	fp,sp,24
   13470:	e13fff15 	stw	r4,-4(fp)
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
   13474:	e0bfff17 	ldw	r2,-4(fp)
   13478:	10800617 	ldw	r2,24(r2)
   1347c:	10800058 	cmpnei	r2,r2,1
   13480:	1000091e 	bne	r2,zero,134a8 <tcp_output+0x48>
   13484:	010000f4 	movhi	r4,3
   13488:	21007604 	addi	r4,r4,472
   1348c:	014000f4 	movhi	r5,3
   13490:	29414b04 	addi	r5,r5,1324
   13494:	0180e304 	movi	r6,908
   13498:	01c000f4 	movhi	r7,3
   1349c:	39c08c04 	addi	r7,r7,560
   134a0:	0017c440 	call	17c44 <printf>
   134a4:	003fff06 	br	134a4 <tcp_output+0x44>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
   134a8:	008000f4 	movhi	r2,3
   134ac:	109bec04 	addi	r2,r2,28592
   134b0:	10c00017 	ldw	r3,0(r2)
   134b4:	e0bfff17 	ldw	r2,-4(fp)
   134b8:	1880021e 	bne	r3,r2,134c4 <tcp_output+0x64>
    return ERR_OK;
   134bc:	0005883a 	mov	r2,zero
   134c0:	0001eb06 	br	13c70 <tcp_output+0x810>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
   134c4:	e0bfff17 	ldw	r2,-4(fp)
   134c8:	1080140b 	ldhu	r2,80(r2)
   134cc:	e0ffff17 	ldw	r3,-4(fp)
   134d0:	18c0190b 	ldhu	r3,100(r3)
   134d4:	113fffcc 	andi	r4,r2,65535
   134d8:	197fffcc 	andi	r5,r3,65535
   134dc:	2900012e 	bgeu	r5,r4,134e4 <tcp_output+0x84>
   134e0:	1805883a 	mov	r2,r3
   134e4:	10bfffcc 	andi	r2,r2,65535
   134e8:	e0bffd15 	stw	r2,-12(fp)

  seg = pcb->unsent;
   134ec:	e0bfff17 	ldw	r2,-4(fp)
   134f0:	10801c17 	ldw	r2,112(r2)
   134f4:	e0bffa15 	stw	r2,-24(fp)
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
   134f8:	e0bfff17 	ldw	r2,-4(fp)
   134fc:	10800883 	ldbu	r2,34(r2)
   13500:	10803fcc 	andi	r2,r2,255
   13504:	1080008c 	andi	r2,r2,2
   13508:	10002f26 	beq	r2,zero,135c8 <tcp_output+0x168>
   1350c:	e0bffa17 	ldw	r2,-24(fp)
   13510:	10002a26 	beq	r2,zero,135bc <tcp_output+0x15c>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
   13514:	e0bffa17 	ldw	r2,-24(fp)
   13518:	10800317 	ldw	r2,12(r2)
   1351c:	10c0010b 	ldhu	r3,4(r2)
   13520:	1080018b 	ldhu	r2,6(r2)
   13524:	1004943a 	slli	r2,r2,16
   13528:	10c4b03a 	or	r2,r2,r3
   1352c:	1006d63a 	srli	r3,r2,24
   13530:	e0bffa17 	ldw	r2,-24(fp)
   13534:	10800317 	ldw	r2,12(r2)
   13538:	1100010b 	ldhu	r4,4(r2)
   1353c:	1080018b 	ldhu	r2,6(r2)
   13540:	1004943a 	slli	r2,r2,16
   13544:	1104b03a 	or	r2,r2,r4
   13548:	1004d23a 	srli	r2,r2,8
   1354c:	10bfc00c 	andi	r2,r2,65280
   13550:	1886b03a 	or	r3,r3,r2
   13554:	e0bffa17 	ldw	r2,-24(fp)
   13558:	10800317 	ldw	r2,12(r2)
   1355c:	1100010b 	ldhu	r4,4(r2)
   13560:	1080018b 	ldhu	r2,6(r2)
   13564:	1004943a 	slli	r2,r2,16
   13568:	1104b03a 	or	r2,r2,r4
   1356c:	10bfc00c 	andi	r2,r2,65280
   13570:	1004923a 	slli	r2,r2,8
   13574:	1886b03a 	or	r3,r3,r2
   13578:	e0bffa17 	ldw	r2,-24(fp)
   1357c:	10800317 	ldw	r2,12(r2)
   13580:	1100010b 	ldhu	r4,4(r2)
   13584:	1080018b 	ldhu	r2,6(r2)
   13588:	1004943a 	slli	r2,r2,16
   1358c:	1104b03a 	or	r2,r2,r4
   13590:	1004963a 	slli	r2,r2,24
   13594:	1886b03a 	or	r3,r3,r2
   13598:	e0bfff17 	ldw	r2,-4(fp)
   1359c:	10801317 	ldw	r2,76(r2)
   135a0:	1887c83a 	sub	r3,r3,r2
   135a4:	e0bffa17 	ldw	r2,-24(fp)
   135a8:	1080020b 	ldhu	r2,8(r2)
   135ac:	10bfffcc 	andi	r2,r2,65535
   135b0:	1885883a 	add	r2,r3,r2
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
   135b4:	e0fffd17 	ldw	r3,-12(fp)
   135b8:	1880032e 	bgeu	r3,r2,135c8 <tcp_output+0x168>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
   135bc:	e13fff17 	ldw	r4,-4(fp)
   135c0:	00133180 	call	13318 <tcp_send_empty_ack>
   135c4:	0001aa06 	br	13c70 <tcp_output+0x810>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
   135c8:	e0bfff17 	ldw	r2,-4(fp)
   135cc:	10801d17 	ldw	r2,116(r2)
   135d0:	e0bffb15 	stw	r2,-20(fp)
  if (useg != NULL) {
   135d4:	e0bffb17 	ldw	r2,-20(fp)
   135d8:	10016b26 	beq	r2,zero,13b88 <tcp_output+0x728>
    for (; useg->next != NULL; useg = useg->next);
   135dc:	00000306 	br	135ec <tcp_output+0x18c>
   135e0:	e0bffb17 	ldw	r2,-20(fp)
   135e4:	10800017 	ldw	r2,0(r2)
   135e8:	e0bffb15 	stw	r2,-20(fp)
   135ec:	e0bffb17 	ldw	r2,-20(fp)
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	103ffa1e 	bne	r2,zero,135e0 <tcp_output+0x180>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
   135f8:	00016306 	br	13b88 <tcp_output+0x728>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
   135fc:	e0bffa17 	ldw	r2,-24(fp)
   13600:	10800317 	ldw	r2,12(r2)
   13604:	1080030b 	ldhu	r2,12(r2)
   13608:	10bfffcc 	andi	r2,r2,65535
   1360c:	1004d23a 	srli	r2,r2,8
   13610:	10ffffcc 	andi	r3,r2,65535
   13614:	e0bffa17 	ldw	r2,-24(fp)
   13618:	10800317 	ldw	r2,12(r2)
   1361c:	1080030b 	ldhu	r2,12(r2)
   13620:	10bfffcc 	andi	r2,r2,65535
   13624:	1004923a 	slli	r2,r2,8
   13628:	10bfffcc 	andi	r2,r2,65535
   1362c:	1884b03a 	or	r2,r3,r2
   13630:	1080010c 	andi	r2,r2,4
   13634:	10000926 	beq	r2,zero,1365c <tcp_output+0x1fc>
   13638:	010000f4 	movhi	r4,3
   1363c:	21007604 	addi	r4,r4,472
   13640:	014000f4 	movhi	r5,3
   13644:	29415504 	addi	r5,r5,1364
   13648:	0180f144 	movi	r6,965
   1364c:	01c000f4 	movhi	r7,3
   13650:	39c08c04 	addi	r7,r7,560
   13654:	0017c440 	call	17c44 <printf>
   13658:	003fff06 	br	13658 <tcp_output+0x1f8>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
   1365c:	e0bfff17 	ldw	r2,-4(fp)
   13660:	10801d17 	ldw	r2,116(r2)
   13664:	10001d26 	beq	r2,zero,136dc <tcp_output+0x27c>
   13668:	e0bfff17 	ldw	r2,-4(fp)
   1366c:	10800883 	ldbu	r2,34(r2)
   13670:	10803fcc 	andi	r2,r2,255
   13674:	1080110c 	andi	r2,r2,68
   13678:	1000181e 	bne	r2,zero,136dc <tcp_output+0x27c>
   1367c:	e0bfff17 	ldw	r2,-4(fp)
   13680:	10801c17 	ldw	r2,112(r2)
   13684:	10000c26 	beq	r2,zero,136b8 <tcp_output+0x258>
   13688:	e0bfff17 	ldw	r2,-4(fp)
   1368c:	10801c17 	ldw	r2,112(r2)
   13690:	10800017 	ldw	r2,0(r2)
   13694:	1000111e 	bne	r2,zero,136dc <tcp_output+0x27c>
   13698:	e0bfff17 	ldw	r2,-4(fp)
   1369c:	10801c17 	ldw	r2,112(r2)
   136a0:	10c0020b 	ldhu	r3,8(r2)
   136a4:	e0bfff17 	ldw	r2,-4(fp)
   136a8:	10800e8b 	ldhu	r2,58(r2)
   136ac:	18ffffcc 	andi	r3,r3,65535
   136b0:	10bfffcc 	andi	r2,r2,65535
   136b4:	1880092e 	bgeu	r3,r2,136dc <tcp_output+0x27c>
   136b8:	e0bfff17 	ldw	r2,-4(fp)
   136bc:	10801a8b 	ldhu	r2,106(r2)
   136c0:	10bfffcc 	andi	r2,r2,65535
   136c4:	10000526 	beq	r2,zero,136dc <tcp_output+0x27c>
   136c8:	e0bfff17 	ldw	r2,-4(fp)
   136cc:	10801b0b 	ldhu	r2,108(r2)
   136d0:	10bfffcc 	andi	r2,r2,65535
   136d4:	10800b30 	cmpltui	r2,r2,44
   136d8:	1000021e 	bne	r2,zero,136e4 <tcp_output+0x284>
   136dc:	00800044 	movi	r2,1
   136e0:	00000106 	br	136e8 <tcp_output+0x288>
   136e4:	0005883a 	mov	r2,zero
   136e8:	1000051e 	bne	r2,zero,13700 <tcp_output+0x2a0>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
   136ec:	e0bfff17 	ldw	r2,-4(fp)
   136f0:	10800883 	ldbu	r2,34(r2)
   136f4:	10803fcc 	andi	r2,r2,255
   136f8:	1080280c 	andi	r2,r2,160
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
   136fc:	10014f26 	beq	r2,zero,13c3c <tcp_output+0x7dc>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
   13700:	e0bffa17 	ldw	r2,-24(fp)
   13704:	10c00017 	ldw	r3,0(r2)
   13708:	e0bfff17 	ldw	r2,-4(fp)
   1370c:	10c01c15 	stw	r3,112(r2)

    if (pcb->state != SYN_SENT) {
   13710:	e0bfff17 	ldw	r2,-4(fp)
   13714:	10800617 	ldw	r2,24(r2)
   13718:	108000a0 	cmpeqi	r2,r2,2
   1371c:	10000e1e 	bne	r2,zero,13758 <tcp_output+0x2f8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
   13720:	e0bffa17 	ldw	r2,-24(fp)
   13724:	10800317 	ldw	r2,12(r2)
   13728:	e0fffa17 	ldw	r3,-24(fp)
   1372c:	18c00317 	ldw	r3,12(r3)
   13730:	18c0030b 	ldhu	r3,12(r3)
   13734:	18c40014 	ori	r3,r3,4096
   13738:	10c0030d 	sth	r3,12(r2)
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
   1373c:	e0bfff17 	ldw	r2,-4(fp)
   13740:	10c00883 	ldbu	r3,34(r2)
   13744:	00bfff04 	movi	r2,-4
   13748:	1884703a 	and	r2,r3,r2
   1374c:	1007883a 	mov	r3,r2
   13750:	e0bfff17 	ldw	r2,-4(fp)
   13754:	10c00885 	stb	r3,34(r2)
    }

    tcp_output_segment(seg, pcb);
   13758:	e13ffa17 	ldw	r4,-24(fp)
   1375c:	e17fff17 	ldw	r5,-4(fp)
   13760:	0013c840 	call	13c84 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
   13764:	e0bffa17 	ldw	r2,-24(fp)
   13768:	10800317 	ldw	r2,12(r2)
   1376c:	10c0010b 	ldhu	r3,4(r2)
   13770:	1080018b 	ldhu	r2,6(r2)
   13774:	1004943a 	slli	r2,r2,16
   13778:	10c4b03a 	or	r2,r2,r3
   1377c:	1006d63a 	srli	r3,r2,24
   13780:	e0bffa17 	ldw	r2,-24(fp)
   13784:	10800317 	ldw	r2,12(r2)
   13788:	1100010b 	ldhu	r4,4(r2)
   1378c:	1080018b 	ldhu	r2,6(r2)
   13790:	1004943a 	slli	r2,r2,16
   13794:	1104b03a 	or	r2,r2,r4
   13798:	1004d23a 	srli	r2,r2,8
   1379c:	10bfc00c 	andi	r2,r2,65280
   137a0:	1886b03a 	or	r3,r3,r2
   137a4:	e0bffa17 	ldw	r2,-24(fp)
   137a8:	10800317 	ldw	r2,12(r2)
   137ac:	1100010b 	ldhu	r4,4(r2)
   137b0:	1080018b 	ldhu	r2,6(r2)
   137b4:	1004943a 	slli	r2,r2,16
   137b8:	1104b03a 	or	r2,r2,r4
   137bc:	10bfc00c 	andi	r2,r2,65280
   137c0:	1004923a 	slli	r2,r2,8
   137c4:	1886b03a 	or	r3,r3,r2
   137c8:	e0bffa17 	ldw	r2,-24(fp)
   137cc:	10800317 	ldw	r2,12(r2)
   137d0:	1100010b 	ldhu	r4,4(r2)
   137d4:	1080018b 	ldhu	r2,6(r2)
   137d8:	1004943a 	slli	r2,r2,16
   137dc:	1104b03a 	or	r2,r2,r4
   137e0:	1004963a 	slli	r2,r2,24
   137e4:	1886b03a 	or	r3,r3,r2
   137e8:	e0bffa17 	ldw	r2,-24(fp)
   137ec:	1080020b 	ldhu	r2,8(r2)
   137f0:	113fffcc 	andi	r4,r2,65535
   137f4:	e0bffa17 	ldw	r2,-24(fp)
   137f8:	10800317 	ldw	r2,12(r2)
   137fc:	1080030b 	ldhu	r2,12(r2)
   13800:	10bfffcc 	andi	r2,r2,65535
   13804:	1004d23a 	srli	r2,r2,8
   13808:	117fffcc 	andi	r5,r2,65535
   1380c:	e0bffa17 	ldw	r2,-24(fp)
   13810:	10800317 	ldw	r2,12(r2)
   13814:	1080030b 	ldhu	r2,12(r2)
   13818:	10bfffcc 	andi	r2,r2,65535
   1381c:	1004923a 	slli	r2,r2,8
   13820:	10bfffcc 	andi	r2,r2,65535
   13824:	2884b03a 	or	r2,r5,r2
   13828:	108000cc 	andi	r2,r2,3
   1382c:	1004c03a 	cmpne	r2,r2,zero
   13830:	10803fcc 	andi	r2,r2,255
   13834:	2085883a 	add	r2,r4,r2
   13838:	1885883a 	add	r2,r3,r2
   1383c:	e0bffe15 	stw	r2,-8(fp)
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
   13840:	e0bfff17 	ldw	r2,-4(fp)
   13844:	10c01517 	ldw	r3,84(r2)
   13848:	e0bffe17 	ldw	r2,-8(fp)
   1384c:	1885c83a 	sub	r2,r3,r2
   13850:	1000030e 	bge	r2,zero,13860 <tcp_output+0x400>
      pcb->snd_nxt = snd_nxt;
   13854:	e0bfff17 	ldw	r2,-4(fp)
   13858:	e0fffe17 	ldw	r3,-8(fp)
   1385c:	10c01515 	stw	r3,84(r2)
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
   13860:	e0bffa17 	ldw	r2,-24(fp)
   13864:	1080020b 	ldhu	r2,8(r2)
   13868:	10ffffcc 	andi	r3,r2,65535
   1386c:	e0bffa17 	ldw	r2,-24(fp)
   13870:	10800317 	ldw	r2,12(r2)
   13874:	1080030b 	ldhu	r2,12(r2)
   13878:	10bfffcc 	andi	r2,r2,65535
   1387c:	1004d23a 	srli	r2,r2,8
   13880:	113fffcc 	andi	r4,r2,65535
   13884:	e0bffa17 	ldw	r2,-24(fp)
   13888:	10800317 	ldw	r2,12(r2)
   1388c:	1080030b 	ldhu	r2,12(r2)
   13890:	10bfffcc 	andi	r2,r2,65535
   13894:	1004923a 	slli	r2,r2,8
   13898:	10bfffcc 	andi	r2,r2,65535
   1389c:	2084b03a 	or	r2,r4,r2
   138a0:	108000cc 	andi	r2,r2,3
   138a4:	1004c03a 	cmpne	r2,r2,zero
   138a8:	10803fcc 	andi	r2,r2,255
   138ac:	1885883a 	add	r2,r3,r2
   138b0:	0080b00e 	bge	zero,r2,13b74 <tcp_output+0x714>
      seg->next = NULL;
   138b4:	e0bffa17 	ldw	r2,-24(fp)
   138b8:	10000015 	stw	zero,0(r2)
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
   138bc:	e0bfff17 	ldw	r2,-4(fp)
   138c0:	10801d17 	ldw	r2,116(r2)
   138c4:	1000061e 	bne	r2,zero,138e0 <tcp_output+0x480>
        pcb->unacked = seg;
   138c8:	e0bfff17 	ldw	r2,-4(fp)
   138cc:	e0fffa17 	ldw	r3,-24(fp)
   138d0:	10c01d15 	stw	r3,116(r2)
        useg = seg;
   138d4:	e0bffa17 	ldw	r2,-24(fp)
   138d8:	e0bffb15 	stw	r2,-20(fp)
   138dc:	0000a706 	br	13b7c <tcp_output+0x71c>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
   138e0:	e0bffa17 	ldw	r2,-24(fp)
   138e4:	10800317 	ldw	r2,12(r2)
   138e8:	10c0010b 	ldhu	r3,4(r2)
   138ec:	1080018b 	ldhu	r2,6(r2)
   138f0:	1004943a 	slli	r2,r2,16
   138f4:	10c4b03a 	or	r2,r2,r3
   138f8:	1006d63a 	srli	r3,r2,24
   138fc:	e0bffa17 	ldw	r2,-24(fp)
   13900:	10800317 	ldw	r2,12(r2)
   13904:	1100010b 	ldhu	r4,4(r2)
   13908:	1080018b 	ldhu	r2,6(r2)
   1390c:	1004943a 	slli	r2,r2,16
   13910:	1104b03a 	or	r2,r2,r4
   13914:	1004d23a 	srli	r2,r2,8
   13918:	10bfc00c 	andi	r2,r2,65280
   1391c:	1886b03a 	or	r3,r3,r2
   13920:	e0bffa17 	ldw	r2,-24(fp)
   13924:	10800317 	ldw	r2,12(r2)
   13928:	1100010b 	ldhu	r4,4(r2)
   1392c:	1080018b 	ldhu	r2,6(r2)
   13930:	1004943a 	slli	r2,r2,16
   13934:	1104b03a 	or	r2,r2,r4
   13938:	10bfc00c 	andi	r2,r2,65280
   1393c:	1004923a 	slli	r2,r2,8
   13940:	1886b03a 	or	r3,r3,r2
   13944:	e0bffa17 	ldw	r2,-24(fp)
   13948:	10800317 	ldw	r2,12(r2)
   1394c:	1100010b 	ldhu	r4,4(r2)
   13950:	1080018b 	ldhu	r2,6(r2)
   13954:	1004943a 	slli	r2,r2,16
   13958:	1104b03a 	or	r2,r2,r4
   1395c:	1004963a 	slli	r2,r2,24
   13960:	1886b03a 	or	r3,r3,r2
   13964:	e0bffb17 	ldw	r2,-20(fp)
   13968:	10800317 	ldw	r2,12(r2)
   1396c:	1100010b 	ldhu	r4,4(r2)
   13970:	1080018b 	ldhu	r2,6(r2)
   13974:	1004943a 	slli	r2,r2,16
   13978:	1104b03a 	or	r2,r2,r4
   1397c:	1008d63a 	srli	r4,r2,24
   13980:	e0bffb17 	ldw	r2,-20(fp)
   13984:	10800317 	ldw	r2,12(r2)
   13988:	1140010b 	ldhu	r5,4(r2)
   1398c:	1080018b 	ldhu	r2,6(r2)
   13990:	1004943a 	slli	r2,r2,16
   13994:	1144b03a 	or	r2,r2,r5
   13998:	1004d23a 	srli	r2,r2,8
   1399c:	10bfc00c 	andi	r2,r2,65280
   139a0:	2088b03a 	or	r4,r4,r2
   139a4:	e0bffb17 	ldw	r2,-20(fp)
   139a8:	10800317 	ldw	r2,12(r2)
   139ac:	1140010b 	ldhu	r5,4(r2)
   139b0:	1080018b 	ldhu	r2,6(r2)
   139b4:	1004943a 	slli	r2,r2,16
   139b8:	1144b03a 	or	r2,r2,r5
   139bc:	10bfc00c 	andi	r2,r2,65280
   139c0:	1004923a 	slli	r2,r2,8
   139c4:	2088b03a 	or	r4,r4,r2
   139c8:	e0bffb17 	ldw	r2,-20(fp)
   139cc:	10800317 	ldw	r2,12(r2)
   139d0:	1140010b 	ldhu	r5,4(r2)
   139d4:	1080018b 	ldhu	r2,6(r2)
   139d8:	1004943a 	slli	r2,r2,16
   139dc:	1144b03a 	or	r2,r2,r5
   139e0:	1004963a 	slli	r2,r2,24
   139e4:	2084b03a 	or	r2,r4,r2
   139e8:	1885c83a 	sub	r2,r3,r2
   139ec:	10005a0e 	bge	r2,zero,13b58 <tcp_output+0x6f8>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
   139f0:	e0bfff17 	ldw	r2,-4(fp)
   139f4:	10801d04 	addi	r2,r2,116
   139f8:	e0bffc15 	stw	r2,-16(fp)
          while (*cur_seg &&
   139fc:	00000306 	br	13a0c <tcp_output+0x5ac>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
   13a00:	e0bffc17 	ldw	r2,-16(fp)
   13a04:	10800017 	ldw	r2,0(r2)
   13a08:	e0bffc15 	stw	r2,-16(fp)
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
   13a0c:	e0bffc17 	ldw	r2,-16(fp)
   13a10:	10800017 	ldw	r2,0(r2)
   13a14:	10004826 	beq	r2,zero,13b38 <tcp_output+0x6d8>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
   13a18:	e0bffc17 	ldw	r2,-16(fp)
   13a1c:	10800017 	ldw	r2,0(r2)
   13a20:	10800317 	ldw	r2,12(r2)
   13a24:	10c0010b 	ldhu	r3,4(r2)
   13a28:	1080018b 	ldhu	r2,6(r2)
   13a2c:	1004943a 	slli	r2,r2,16
   13a30:	10c4b03a 	or	r2,r2,r3
   13a34:	1006d63a 	srli	r3,r2,24
   13a38:	e0bffc17 	ldw	r2,-16(fp)
   13a3c:	10800017 	ldw	r2,0(r2)
   13a40:	10800317 	ldw	r2,12(r2)
   13a44:	1100010b 	ldhu	r4,4(r2)
   13a48:	1080018b 	ldhu	r2,6(r2)
   13a4c:	1004943a 	slli	r2,r2,16
   13a50:	1104b03a 	or	r2,r2,r4
   13a54:	1004d23a 	srli	r2,r2,8
   13a58:	10bfc00c 	andi	r2,r2,65280
   13a5c:	1886b03a 	or	r3,r3,r2
   13a60:	e0bffc17 	ldw	r2,-16(fp)
   13a64:	10800017 	ldw	r2,0(r2)
   13a68:	10800317 	ldw	r2,12(r2)
   13a6c:	1100010b 	ldhu	r4,4(r2)
   13a70:	1080018b 	ldhu	r2,6(r2)
   13a74:	1004943a 	slli	r2,r2,16
   13a78:	1104b03a 	or	r2,r2,r4
   13a7c:	10bfc00c 	andi	r2,r2,65280
   13a80:	1004923a 	slli	r2,r2,8
   13a84:	1886b03a 	or	r3,r3,r2
   13a88:	e0bffc17 	ldw	r2,-16(fp)
   13a8c:	10800017 	ldw	r2,0(r2)
   13a90:	10800317 	ldw	r2,12(r2)
   13a94:	1100010b 	ldhu	r4,4(r2)
   13a98:	1080018b 	ldhu	r2,6(r2)
   13a9c:	1004943a 	slli	r2,r2,16
   13aa0:	1104b03a 	or	r2,r2,r4
   13aa4:	1004963a 	slli	r2,r2,24
   13aa8:	1886b03a 	or	r3,r3,r2
   13aac:	e0bffa17 	ldw	r2,-24(fp)
   13ab0:	10800317 	ldw	r2,12(r2)
   13ab4:	1100010b 	ldhu	r4,4(r2)
   13ab8:	1080018b 	ldhu	r2,6(r2)
   13abc:	1004943a 	slli	r2,r2,16
   13ac0:	1104b03a 	or	r2,r2,r4
   13ac4:	1008d63a 	srli	r4,r2,24
   13ac8:	e0bffa17 	ldw	r2,-24(fp)
   13acc:	10800317 	ldw	r2,12(r2)
   13ad0:	1140010b 	ldhu	r5,4(r2)
   13ad4:	1080018b 	ldhu	r2,6(r2)
   13ad8:	1004943a 	slli	r2,r2,16
   13adc:	1144b03a 	or	r2,r2,r5
   13ae0:	1004d23a 	srli	r2,r2,8
   13ae4:	10bfc00c 	andi	r2,r2,65280
   13ae8:	2088b03a 	or	r4,r4,r2
   13aec:	e0bffa17 	ldw	r2,-24(fp)
   13af0:	10800317 	ldw	r2,12(r2)
   13af4:	1140010b 	ldhu	r5,4(r2)
   13af8:	1080018b 	ldhu	r2,6(r2)
   13afc:	1004943a 	slli	r2,r2,16
   13b00:	1144b03a 	or	r2,r2,r5
   13b04:	10bfc00c 	andi	r2,r2,65280
   13b08:	1004923a 	slli	r2,r2,8
   13b0c:	2088b03a 	or	r4,r4,r2
   13b10:	e0bffa17 	ldw	r2,-24(fp)
   13b14:	10800317 	ldw	r2,12(r2)
   13b18:	1140010b 	ldhu	r5,4(r2)
   13b1c:	1080018b 	ldhu	r2,6(r2)
   13b20:	1004943a 	slli	r2,r2,16
   13b24:	1144b03a 	or	r2,r2,r5
   13b28:	1004963a 	slli	r2,r2,24
   13b2c:	2084b03a 	or	r2,r4,r2
   13b30:	1885c83a 	sub	r2,r3,r2
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
   13b34:	103fb216 	blt	r2,zero,13a00 <tcp_output+0x5a0>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
   13b38:	e0bffc17 	ldw	r2,-16(fp)
   13b3c:	10c00017 	ldw	r3,0(r2)
   13b40:	e0bffa17 	ldw	r2,-24(fp)
   13b44:	10c00015 	stw	r3,0(r2)
          (*cur_seg) = seg;
   13b48:	e0bffc17 	ldw	r2,-16(fp)
   13b4c:	e0fffa17 	ldw	r3,-24(fp)
   13b50:	10c00015 	stw	r3,0(r2)
   13b54:	00000906 	br	13b7c <tcp_output+0x71c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
   13b58:	e0bffb17 	ldw	r2,-20(fp)
   13b5c:	e0fffa17 	ldw	r3,-24(fp)
   13b60:	10c00015 	stw	r3,0(r2)
          useg = useg->next;
   13b64:	e0bffb17 	ldw	r2,-20(fp)
   13b68:	10800017 	ldw	r2,0(r2)
   13b6c:	e0bffb15 	stw	r2,-20(fp)
   13b70:	00000206 	br	13b7c <tcp_output+0x71c>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
   13b74:	e13ffa17 	ldw	r4,-24(fp)
   13b78:	000d3f40 	call	d3f4 <tcp_seg_free>
    }
    seg = pcb->unsent;
   13b7c:	e0bfff17 	ldw	r2,-4(fp)
   13b80:	10801c17 	ldw	r2,112(r2)
   13b84:	e0bffa15 	stw	r2,-24(fp)
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
   13b88:	e0bffa17 	ldw	r2,-24(fp)
   13b8c:	10002c26 	beq	r2,zero,13c40 <tcp_output+0x7e0>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
   13b90:	e0bffa17 	ldw	r2,-24(fp)
   13b94:	10800317 	ldw	r2,12(r2)
   13b98:	10c0010b 	ldhu	r3,4(r2)
   13b9c:	1080018b 	ldhu	r2,6(r2)
   13ba0:	1004943a 	slli	r2,r2,16
   13ba4:	10c4b03a 	or	r2,r2,r3
   13ba8:	1006d63a 	srli	r3,r2,24
   13bac:	e0bffa17 	ldw	r2,-24(fp)
   13bb0:	10800317 	ldw	r2,12(r2)
   13bb4:	1100010b 	ldhu	r4,4(r2)
   13bb8:	1080018b 	ldhu	r2,6(r2)
   13bbc:	1004943a 	slli	r2,r2,16
   13bc0:	1104b03a 	or	r2,r2,r4
   13bc4:	1004d23a 	srli	r2,r2,8
   13bc8:	10bfc00c 	andi	r2,r2,65280
   13bcc:	1886b03a 	or	r3,r3,r2
   13bd0:	e0bffa17 	ldw	r2,-24(fp)
   13bd4:	10800317 	ldw	r2,12(r2)
   13bd8:	1100010b 	ldhu	r4,4(r2)
   13bdc:	1080018b 	ldhu	r2,6(r2)
   13be0:	1004943a 	slli	r2,r2,16
   13be4:	1104b03a 	or	r2,r2,r4
   13be8:	10bfc00c 	andi	r2,r2,65280
   13bec:	1004923a 	slli	r2,r2,8
   13bf0:	1886b03a 	or	r3,r3,r2
   13bf4:	e0bffa17 	ldw	r2,-24(fp)
   13bf8:	10800317 	ldw	r2,12(r2)
   13bfc:	1100010b 	ldhu	r4,4(r2)
   13c00:	1080018b 	ldhu	r2,6(r2)
   13c04:	1004943a 	slli	r2,r2,16
   13c08:	1104b03a 	or	r2,r2,r4
   13c0c:	1004963a 	slli	r2,r2,24
   13c10:	1886b03a 	or	r3,r3,r2
   13c14:	e0bfff17 	ldw	r2,-4(fp)
   13c18:	10801317 	ldw	r2,76(r2)
   13c1c:	1887c83a 	sub	r3,r3,r2
   13c20:	e0bffa17 	ldw	r2,-24(fp)
   13c24:	1080020b 	ldhu	r2,8(r2)
   13c28:	10bfffcc 	andi	r2,r2,65535
   13c2c:	1885883a 	add	r2,r3,r2
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
   13c30:	e0fffd17 	ldw	r3,-12(fp)
   13c34:	18be712e 	bgeu	r3,r2,135fc <tcp_output+0x19c>
   13c38:	00000106 	br	13c40 <tcp_output+0x7e0>
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
      break;
   13c3c:	0001883a 	nop
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
   13c40:	e0bfff17 	ldw	r2,-4(fp)
   13c44:	10801c17 	ldw	r2,112(r2)
   13c48:	1000021e 	bne	r2,zero,13c54 <tcp_output+0x7f4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
   13c4c:	e0bfff17 	ldw	r2,-4(fp)
   13c50:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
   13c54:	e0bfff17 	ldw	r2,-4(fp)
   13c58:	10800883 	ldbu	r2,34(r2)
   13c5c:	10801fcc 	andi	r2,r2,127
   13c60:	1007883a 	mov	r3,r2
   13c64:	e0bfff17 	ldw	r2,-4(fp)
   13c68:	10c00885 	stb	r3,34(r2)
  return ERR_OK;
   13c6c:	0005883a 	mov	r2,zero
}
   13c70:	e037883a 	mov	sp,fp
   13c74:	dfc00117 	ldw	ra,4(sp)
   13c78:	df000017 	ldw	fp,0(sp)
   13c7c:	dec00204 	addi	sp,sp,8
   13c80:	f800283a 	ret

00013c84 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
   13c84:	defff504 	addi	sp,sp,-44
   13c88:	dfc00a15 	stw	ra,40(sp)
   13c8c:	df000915 	stw	fp,36(sp)
   13c90:	dc000815 	stw	r16,32(sp)
   13c94:	df000804 	addi	fp,sp,32
   13c98:	e13ffe15 	stw	r4,-8(fp)
   13c9c:	e17fff15 	stw	r5,-4(fp)
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
   13ca0:	e0bffe17 	ldw	r2,-8(fp)
   13ca4:	10800317 	ldw	r2,12(r2)
   13ca8:	e0ffff17 	ldw	r3,-4(fp)
   13cac:	18c00b17 	ldw	r3,44(r3)
   13cb0:	1808d63a 	srli	r4,r3,24
   13cb4:	e0ffff17 	ldw	r3,-4(fp)
   13cb8:	18c00b17 	ldw	r3,44(r3)
   13cbc:	1806d23a 	srli	r3,r3,8
   13cc0:	18ffc00c 	andi	r3,r3,65280
   13cc4:	20c8b03a 	or	r4,r4,r3
   13cc8:	e0ffff17 	ldw	r3,-4(fp)
   13ccc:	18c00b17 	ldw	r3,44(r3)
   13cd0:	18ffc00c 	andi	r3,r3,65280
   13cd4:	1806923a 	slli	r3,r3,8
   13cd8:	20c8b03a 	or	r4,r4,r3
   13cdc:	e0ffff17 	ldw	r3,-4(fp)
   13ce0:	18c00b17 	ldw	r3,44(r3)
   13ce4:	1806963a 	slli	r3,r3,24
   13ce8:	20c6b03a 	or	r3,r4,r3
   13cec:	193fffcc 	andi	r4,r3,65535
   13cf0:	1140020b 	ldhu	r5,8(r2)
   13cf4:	280a703a 	and	r5,r5,zero
   13cf8:	2908b03a 	or	r4,r5,r4
   13cfc:	1100020d 	sth	r4,8(r2)
   13d00:	1806d43a 	srli	r3,r3,16
   13d04:	1100028b 	ldhu	r4,10(r2)
   13d08:	2008703a 	and	r4,r4,zero
   13d0c:	20c6b03a 	or	r3,r4,r3
   13d10:	10c0028d 	sth	r3,10(r2)

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
   13d14:	e0bffe17 	ldw	r2,-8(fp)
   13d18:	10800317 	ldw	r2,12(r2)
   13d1c:	e0ffff17 	ldw	r3,-4(fp)
   13d20:	18c00c8b 	ldhu	r3,50(r3)
   13d24:	18ffffcc 	andi	r3,r3,65535
   13d28:	1806d23a 	srli	r3,r3,8
   13d2c:	1809883a 	mov	r4,r3
   13d30:	e0ffff17 	ldw	r3,-4(fp)
   13d34:	18c00c8b 	ldhu	r3,50(r3)
   13d38:	18ffffcc 	andi	r3,r3,65535
   13d3c:	1806923a 	slli	r3,r3,8
   13d40:	20c6b03a 	or	r3,r4,r3
   13d44:	10c0038d 	sth	r3,14(r2)

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
   13d48:	e0bfff17 	ldw	r2,-4(fp)
   13d4c:	10c00b17 	ldw	r3,44(r2)
   13d50:	e0bfff17 	ldw	r2,-4(fp)
   13d54:	10800c8b 	ldhu	r2,50(r2)
   13d58:	10bfffcc 	andi	r2,r2,65535
   13d5c:	1887883a 	add	r3,r3,r2
   13d60:	e0bfff17 	ldw	r2,-4(fp)
   13d64:	10c00d15 	stw	r3,52(r2)

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
   13d68:	e0bffe17 	ldw	r2,-8(fp)
   13d6c:	10800317 	ldw	r2,12(r2)
   13d70:	10800504 	addi	r2,r2,20
   13d74:	e0bffa15 	stw	r2,-24(fp)
  if (seg->flags & TF_SEG_OPTS_MSS) {
   13d78:	e0bffe17 	ldw	r2,-8(fp)
   13d7c:	10800283 	ldbu	r2,10(r2)
   13d80:	10803fcc 	andi	r2,r2,255
   13d84:	1080004c 	andi	r2,r2,1
   13d88:	10001c26 	beq	r2,zero,13dfc <tcp_output_segment+0x178>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
   13d90:	10800104 	addi	r2,r2,4
   13d94:	01016d04 	movi	r4,1460
   13d98:	100b883a 	mov	r5,r2
   13d9c:	000ddb80 	call	ddb8 <tcp_eff_send_mss>
   13da0:	e0bffb0d 	sth	r2,-20(fp)
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
   13da4:	e0bffb0b 	ldhu	r2,-20(fp)
   13da8:	10808134 	orhi	r2,r2,516
   13dac:	1004d63a 	srli	r2,r2,24
   13db0:	1007883a 	mov	r3,r2
   13db4:	e0bffb0b 	ldhu	r2,-20(fp)
   13db8:	10808134 	orhi	r2,r2,516
   13dbc:	1005d23a 	srai	r2,r2,8
   13dc0:	10bfc00c 	andi	r2,r2,65280
   13dc4:	1886b03a 	or	r3,r3,r2
   13dc8:	e0bffb0b 	ldhu	r2,-20(fp)
   13dcc:	10bfc00c 	andi	r2,r2,65280
   13dd0:	1004923a 	slli	r2,r2,8
   13dd4:	1886b03a 	or	r3,r3,r2
   13dd8:	e0bffb0b 	ldhu	r2,-20(fp)
   13ddc:	1004963a 	slli	r2,r2,24
   13de0:	1884b03a 	or	r2,r3,r2
   13de4:	1007883a 	mov	r3,r2
   13de8:	e0bffa17 	ldw	r2,-24(fp)
   13dec:	10c00015 	stw	r3,0(r2)
    opts += 1;
   13df0:	e0bffa17 	ldw	r2,-24(fp)
   13df4:	10800104 	addi	r2,r2,4
   13df8:	e0bffa15 	stw	r2,-24(fp)
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
   13dfc:	e0bfff17 	ldw	r2,-4(fp)
   13e00:	10800e0b 	ldhu	r2,56(r2)
   13e04:	10bfffcc 	andi	r2,r2,65535
   13e08:	10a0001c 	xori	r2,r2,32768
   13e0c:	10a00004 	addi	r2,r2,-32768
   13e10:	10bfffd8 	cmpnei	r2,r2,-1
   13e14:	1000021e 	bne	r2,zero,13e20 <tcp_output_segment+0x19c>
    pcb->rtime = 0;
   13e18:	e0bfff17 	ldw	r2,-4(fp)
   13e1c:	10000e0d 	sth	zero,56(r2)
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
   13e20:	e0bfff17 	ldw	r2,-4(fp)
   13e24:	10000326 	beq	r2,zero,13e34 <tcp_output_segment+0x1b0>
   13e28:	e0bfff17 	ldw	r2,-4(fp)
   13e2c:	10800017 	ldw	r2,0(r2)
   13e30:	10000b1e 	bne	r2,zero,13e60 <tcp_output_segment+0x1dc>
    netif = ip_route(&(pcb->remote_ip));
   13e34:	e0bfff17 	ldw	r2,-4(fp)
   13e38:	10800104 	addi	r2,r2,4
   13e3c:	1009883a 	mov	r4,r2
   13e40:	0005c4c0 	call	5c4c <ip_route>
   13e44:	e0bffc15 	stw	r2,-16(fp)
    if (netif == NULL) {
   13e48:	e0bffc17 	ldw	r2,-16(fp)
   13e4c:	10007a26 	beq	r2,zero,14038 <tcp_output_segment+0x3b4>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
   13e50:	e0bffc17 	ldw	r2,-16(fp)
   13e54:	10c00117 	ldw	r3,4(r2)
   13e58:	e0bfff17 	ldw	r2,-4(fp)
   13e5c:	10c00015 	stw	r3,0(r2)
  }

  if (pcb->rttest == 0) {
   13e60:	e0bfff17 	ldw	r2,-4(fp)
   13e64:	10800f17 	ldw	r2,60(r2)
   13e68:	1000281e 	bne	r2,zero,13f0c <tcp_output_segment+0x288>
    pcb->rttest = tcp_ticks;
   13e6c:	008000f4 	movhi	r2,3
   13e70:	109be004 	addi	r2,r2,28544
   13e74:	10c00017 	ldw	r3,0(r2)
   13e78:	e0bfff17 	ldw	r2,-4(fp)
   13e7c:	10c00f15 	stw	r3,60(r2)
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
   13e80:	e0bffe17 	ldw	r2,-8(fp)
   13e84:	10800317 	ldw	r2,12(r2)
   13e88:	10c0010b 	ldhu	r3,4(r2)
   13e8c:	1080018b 	ldhu	r2,6(r2)
   13e90:	1004943a 	slli	r2,r2,16
   13e94:	10c4b03a 	or	r2,r2,r3
   13e98:	1006d63a 	srli	r3,r2,24
   13e9c:	e0bffe17 	ldw	r2,-8(fp)
   13ea0:	10800317 	ldw	r2,12(r2)
   13ea4:	1100010b 	ldhu	r4,4(r2)
   13ea8:	1080018b 	ldhu	r2,6(r2)
   13eac:	1004943a 	slli	r2,r2,16
   13eb0:	1104b03a 	or	r2,r2,r4
   13eb4:	1004d23a 	srli	r2,r2,8
   13eb8:	10bfc00c 	andi	r2,r2,65280
   13ebc:	1886b03a 	or	r3,r3,r2
   13ec0:	e0bffe17 	ldw	r2,-8(fp)
   13ec4:	10800317 	ldw	r2,12(r2)
   13ec8:	1100010b 	ldhu	r4,4(r2)
   13ecc:	1080018b 	ldhu	r2,6(r2)
   13ed0:	1004943a 	slli	r2,r2,16
   13ed4:	1104b03a 	or	r2,r2,r4
   13ed8:	10bfc00c 	andi	r2,r2,65280
   13edc:	1004923a 	slli	r2,r2,8
   13ee0:	1886b03a 	or	r3,r3,r2
   13ee4:	e0bffe17 	ldw	r2,-8(fp)
   13ee8:	10800317 	ldw	r2,12(r2)
   13eec:	1100010b 	ldhu	r4,4(r2)
   13ef0:	1080018b 	ldhu	r2,6(r2)
   13ef4:	1004943a 	slli	r2,r2,16
   13ef8:	1104b03a 	or	r2,r2,r4
   13efc:	1004963a 	slli	r2,r2,24
   13f00:	1886b03a 	or	r3,r3,r2
   13f04:	e0bfff17 	ldw	r2,-4(fp)
   13f08:	10c01015 	stw	r3,64(r2)
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
   13f0c:	e0bffe17 	ldw	r2,-8(fp)
   13f10:	10800317 	ldw	r2,12(r2)
   13f14:	1007883a 	mov	r3,r2
   13f18:	e0bffe17 	ldw	r2,-8(fp)
   13f1c:	10800117 	ldw	r2,4(r2)
   13f20:	10800117 	ldw	r2,4(r2)
   13f24:	1885c83a 	sub	r2,r3,r2
   13f28:	e0bffd0d 	sth	r2,-12(fp)

  seg->p->len -= len;
   13f2c:	e0bffe17 	ldw	r2,-8(fp)
   13f30:	10800117 	ldw	r2,4(r2)
   13f34:	e0fffe17 	ldw	r3,-8(fp)
   13f38:	18c00117 	ldw	r3,4(r3)
   13f3c:	1900028b 	ldhu	r4,10(r3)
   13f40:	e0fffd0b 	ldhu	r3,-12(fp)
   13f44:	20c7c83a 	sub	r3,r4,r3
   13f48:	10c0028d 	sth	r3,10(r2)
  seg->p->tot_len -= len;
   13f4c:	e0bffe17 	ldw	r2,-8(fp)
   13f50:	10800117 	ldw	r2,4(r2)
   13f54:	e0fffe17 	ldw	r3,-8(fp)
   13f58:	18c00117 	ldw	r3,4(r3)
   13f5c:	1900020b 	ldhu	r4,8(r3)
   13f60:	e0fffd0b 	ldhu	r3,-12(fp)
   13f64:	20c7c83a 	sub	r3,r4,r3
   13f68:	10c0020d 	sth	r3,8(r2)

  seg->p->payload = seg->tcphdr;
   13f6c:	e0bffe17 	ldw	r2,-8(fp)
   13f70:	10800117 	ldw	r2,4(r2)
   13f74:	e0fffe17 	ldw	r3,-8(fp)
   13f78:	18c00317 	ldw	r3,12(r3)
   13f7c:	10c00115 	stw	r3,4(r2)

  seg->tcphdr->chksum = 0;
   13f80:	e0bffe17 	ldw	r2,-8(fp)
   13f84:	10800317 	ldw	r2,12(r2)
   13f88:	1000040d 	sth	zero,16(r2)
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
   13f8c:	e0bffe17 	ldw	r2,-8(fp)
   13f90:	14000317 	ldw	r16,12(r2)
   13f94:	e0bffe17 	ldw	r2,-8(fp)
   13f98:	11000117 	ldw	r4,4(r2)
   13f9c:	e0ffff17 	ldw	r3,-4(fp)
   13fa0:	e0bfff17 	ldw	r2,-4(fp)
   13fa4:	10800104 	addi	r2,r2,4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
   13fa8:	e17ffe17 	ldw	r5,-8(fp)
   13fac:	29400117 	ldw	r5,4(r5)
   13fb0:	2940020b 	ldhu	r5,8(r5)
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
   13fb4:	297fffcc 	andi	r5,r5,65535
   13fb8:	d9400015 	stw	r5,0(sp)
   13fbc:	180b883a 	mov	r5,r3
   13fc0:	100d883a 	mov	r6,r2
   13fc4:	01c00184 	movi	r7,6
   13fc8:	00056a40 	call	56a4 <inet_chksum_pseudo>
   13fcc:	8080040d 	sth	r2,16(r16)
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
   13fd0:	00800134 	movhi	r2,4
   13fd4:	10932304 	addi	r2,r2,19596
   13fd8:	1080240b 	ldhu	r2,144(r2)
   13fdc:	10800044 	addi	r2,r2,1
   13fe0:	1007883a 	mov	r3,r2
   13fe4:	00800134 	movhi	r2,4
   13fe8:	10932304 	addi	r2,r2,19596
   13fec:	10c0240d 	sth	r3,144(r2)

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
   13ff0:	e0bffe17 	ldw	r2,-8(fp)
   13ff4:	11000117 	ldw	r4,4(r2)
   13ff8:	e17fff17 	ldw	r5,-4(fp)
   13ffc:	e0bfff17 	ldw	r2,-4(fp)
   14000:	10c00104 	addi	r3,r2,4
   14004:	e0bfff17 	ldw	r2,-4(fp)
   14008:	10800283 	ldbu	r2,10(r2)
   1400c:	10803fcc 	andi	r2,r2,255
   14010:	e1bfff17 	ldw	r6,-4(fp)
   14014:	31800243 	ldbu	r6,9(r6)
   14018:	31803fcc 	andi	r6,r6,255
   1401c:	d9800015 	stw	r6,0(sp)
   14020:	01800184 	movi	r6,6
   14024:	d9800115 	stw	r6,4(sp)
   14028:	180d883a 	mov	r6,r3
   1402c:	100f883a 	mov	r7,r2
   14030:	00066a80 	call	66a8 <ip_output>
   14034:	00000106 	br	1403c <tcp_output_segment+0x3b8>
  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->remote_ip));
    if (netif == NULL) {
      return;
   14038:	0001883a 	nop
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
   1403c:	e037883a 	mov	sp,fp
   14040:	dfc00217 	ldw	ra,8(sp)
   14044:	df000117 	ldw	fp,4(sp)
   14048:	dc000017 	ldw	r16,0(sp)
   1404c:	dec00304 	addi	sp,sp,12
   14050:	f800283a 	ret

00014054 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
   14054:	defff404 	addi	sp,sp,-48
   14058:	dfc00b15 	stw	ra,44(sp)
   1405c:	df000a15 	stw	fp,40(sp)
   14060:	df000a04 	addi	fp,sp,40
   14064:	e13ffa15 	stw	r4,-24(fp)
   14068:	e17ffb15 	stw	r5,-20(fp)
   1406c:	e1bffc15 	stw	r6,-16(fp)
   14070:	e1fffd15 	stw	r7,-12(fp)
   14074:	e0c00217 	ldw	r3,8(fp)
   14078:	e0800317 	ldw	r2,12(fp)
   1407c:	e0fffe0d 	sth	r3,-8(fp)
   14080:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
   14084:	01000044 	movi	r4,1
   14088:	01400504 	movi	r5,20
   1408c:	000d883a 	mov	r6,zero
   14090:	0009a600 	call	9a60 <pbuf_alloc>
   14094:	e0bff815 	stw	r2,-32(fp)
  if (p == NULL) {
   14098:	e0bff817 	ldw	r2,-32(fp)
   1409c:	10007b26 	beq	r2,zero,1428c <tcp_rst+0x238>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
   140a0:	e0bff817 	ldw	r2,-32(fp)
   140a4:	1080028b 	ldhu	r2,10(r2)
   140a8:	10bfffcc 	andi	r2,r2,65535
   140ac:	10800528 	cmpgeui	r2,r2,20
   140b0:	1000091e 	bne	r2,zero,140d8 <tcp_rst+0x84>
   140b4:	010000f4 	movhi	r4,3
   140b8:	21007604 	addi	r4,r4,472
   140bc:	014000f4 	movhi	r5,3
   140c0:	29408004 	addi	r5,r5,512
   140c4:	01812dc4 	movi	r6,1207
   140c8:	01c000f4 	movhi	r7,3
   140cc:	39c08c04 	addi	r7,r7,560
   140d0:	0017c440 	call	17c44 <printf>
   140d4:	003fff06 	br	140d4 <tcp_rst+0x80>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
   140d8:	e0bff817 	ldw	r2,-32(fp)
   140dc:	10800117 	ldw	r2,4(r2)
   140e0:	e0bff915 	stw	r2,-28(fp)
  tcphdr->src = htons(local_port);
   140e4:	e0bffe0b 	ldhu	r2,-8(fp)
   140e8:	1004d23a 	srli	r2,r2,8
   140ec:	1007883a 	mov	r3,r2
   140f0:	e0bffe0b 	ldhu	r2,-8(fp)
   140f4:	1004923a 	slli	r2,r2,8
   140f8:	1884b03a 	or	r2,r3,r2
   140fc:	1007883a 	mov	r3,r2
   14100:	e0bff917 	ldw	r2,-28(fp)
   14104:	10c0000d 	sth	r3,0(r2)
  tcphdr->dest = htons(remote_port);
   14108:	e0bfff0b 	ldhu	r2,-4(fp)
   1410c:	1004d23a 	srli	r2,r2,8
   14110:	1007883a 	mov	r3,r2
   14114:	e0bfff0b 	ldhu	r2,-4(fp)
   14118:	1004923a 	slli	r2,r2,8
   1411c:	1884b03a 	or	r2,r3,r2
   14120:	1007883a 	mov	r3,r2
   14124:	e0bff917 	ldw	r2,-28(fp)
   14128:	10c0008d 	sth	r3,2(r2)
  tcphdr->seqno = htonl(seqno);
   1412c:	e0bffa17 	ldw	r2,-24(fp)
   14130:	1006d63a 	srli	r3,r2,24
   14134:	e0bffa17 	ldw	r2,-24(fp)
   14138:	1004d23a 	srli	r2,r2,8
   1413c:	10bfc00c 	andi	r2,r2,65280
   14140:	1886b03a 	or	r3,r3,r2
   14144:	e0bffa17 	ldw	r2,-24(fp)
   14148:	10bfc00c 	andi	r2,r2,65280
   1414c:	1004923a 	slli	r2,r2,8
   14150:	1886b03a 	or	r3,r3,r2
   14154:	e0bffa17 	ldw	r2,-24(fp)
   14158:	1004963a 	slli	r2,r2,24
   1415c:	1886b03a 	or	r3,r3,r2
   14160:	e0bff917 	ldw	r2,-28(fp)
   14164:	193fffcc 	andi	r4,r3,65535
   14168:	1140010b 	ldhu	r5,4(r2)
   1416c:	280a703a 	and	r5,r5,zero
   14170:	2908b03a 	or	r4,r5,r4
   14174:	1100010d 	sth	r4,4(r2)
   14178:	1806d43a 	srli	r3,r3,16
   1417c:	1100018b 	ldhu	r4,6(r2)
   14180:	2008703a 	and	r4,r4,zero
   14184:	20c6b03a 	or	r3,r4,r3
   14188:	10c0018d 	sth	r3,6(r2)
  tcphdr->ackno = htonl(ackno);
   1418c:	e0bffb17 	ldw	r2,-20(fp)
   14190:	1006d63a 	srli	r3,r2,24
   14194:	e0bffb17 	ldw	r2,-20(fp)
   14198:	1004d23a 	srli	r2,r2,8
   1419c:	10bfc00c 	andi	r2,r2,65280
   141a0:	1886b03a 	or	r3,r3,r2
   141a4:	e0bffb17 	ldw	r2,-20(fp)
   141a8:	10bfc00c 	andi	r2,r2,65280
   141ac:	1004923a 	slli	r2,r2,8
   141b0:	1886b03a 	or	r3,r3,r2
   141b4:	e0bffb17 	ldw	r2,-20(fp)
   141b8:	1004963a 	slli	r2,r2,24
   141bc:	1886b03a 	or	r3,r3,r2
   141c0:	e0bff917 	ldw	r2,-28(fp)
   141c4:	193fffcc 	andi	r4,r3,65535
   141c8:	1140020b 	ldhu	r5,8(r2)
   141cc:	280a703a 	and	r5,r5,zero
   141d0:	2908b03a 	or	r4,r5,r4
   141d4:	1100020d 	sth	r4,8(r2)
   141d8:	1806d43a 	srli	r3,r3,16
   141dc:	1100028b 	ldhu	r4,10(r2)
   141e0:	2008703a 	and	r4,r4,zero
   141e4:	20c6b03a 	or	r3,r4,r3
   141e8:	10c0028d 	sth	r3,10(r2)
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
   141ec:	e0bff917 	ldw	r2,-28(fp)
   141f0:	00c51404 	movi	r3,5200
   141f4:	10c0030d 	sth	r3,12(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
   141f8:	e0bff917 	ldw	r2,-28(fp)
   141fc:	00c00204 	movi	r3,8
   14200:	10c0038d 	sth	r3,14(r2)
  tcphdr->chksum = 0;
   14204:	e0bff917 	ldw	r2,-28(fp)
   14208:	1000040d 	sth	zero,16(r2)
  tcphdr->urgp = 0;
   1420c:	e0bff917 	ldw	r2,-28(fp)
   14210:	1000048d 	sth	zero,18(r2)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
              IP_PROTO_TCP, p->tot_len);
   14214:	e0bff817 	ldw	r2,-32(fp)
   14218:	1080020b 	ldhu	r2,8(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
   1421c:	10bfffcc 	andi	r2,r2,65535
   14220:	d8800015 	stw	r2,0(sp)
   14224:	e13ff817 	ldw	r4,-32(fp)
   14228:	e17ffc17 	ldw	r5,-16(fp)
   1422c:	e1bffd17 	ldw	r6,-12(fp)
   14230:	01c00184 	movi	r7,6
   14234:	00056a40 	call	56a4 <inet_chksum_pseudo>
   14238:	e0fff917 	ldw	r3,-28(fp)
   1423c:	1880040d 	sth	r2,16(r3)
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
   14240:	00800134 	movhi	r2,4
   14244:	10932304 	addi	r2,r2,19596
   14248:	1080240b 	ldhu	r2,144(r2)
   1424c:	10800044 	addi	r2,r2,1
   14250:	1007883a 	mov	r3,r2
   14254:	00800134 	movhi	r2,4
   14258:	10932304 	addi	r2,r2,19596
   1425c:	10c0240d 	sth	r3,144(r2)
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
   14260:	d8000015 	stw	zero,0(sp)
   14264:	00800184 	movi	r2,6
   14268:	d8800115 	stw	r2,4(sp)
   1426c:	e13ff817 	ldw	r4,-32(fp)
   14270:	e17ffc17 	ldw	r5,-16(fp)
   14274:	e1bffd17 	ldw	r6,-12(fp)
   14278:	01c03fc4 	movi	r7,255
   1427c:	00066a80 	call	66a8 <ip_output>
  pbuf_free(p);
   14280:	e13ff817 	ldw	r4,-32(fp)
   14284:	000a4200 	call	a420 <pbuf_free>
   14288:	00000106 	br	14290 <tcp_rst+0x23c>
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  if (p == NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
   1428c:	0001883a 	nop
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
   14290:	e037883a 	mov	sp,fp
   14294:	dfc00117 	ldw	ra,4(sp)
   14298:	df000017 	ldw	fp,0(sp)
   1429c:	dec00204 	addi	sp,sp,8
   142a0:	f800283a 	ret

000142a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
   142a4:	defffc04 	addi	sp,sp,-16
   142a8:	dfc00315 	stw	ra,12(sp)
   142ac:	df000215 	stw	fp,8(sp)
   142b0:	df000204 	addi	fp,sp,8
   142b4:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
   142b8:	e0bfff17 	ldw	r2,-4(fp)
   142bc:	10801d17 	ldw	r2,116(r2)
   142c0:	10001f26 	beq	r2,zero,14340 <tcp_rexmit_rto+0x9c>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
   142c4:	e0bfff17 	ldw	r2,-4(fp)
   142c8:	10801d17 	ldw	r2,116(r2)
   142cc:	e0bffe15 	stw	r2,-8(fp)
   142d0:	00000306 	br	142e0 <tcp_rexmit_rto+0x3c>
   142d4:	e0bffe17 	ldw	r2,-8(fp)
   142d8:	10800017 	ldw	r2,0(r2)
   142dc:	e0bffe15 	stw	r2,-8(fp)
   142e0:	e0bffe17 	ldw	r2,-8(fp)
   142e4:	10800017 	ldw	r2,0(r2)
   142e8:	103ffa1e 	bne	r2,zero,142d4 <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
   142ec:	e0bfff17 	ldw	r2,-4(fp)
   142f0:	10c01c17 	ldw	r3,112(r2)
   142f4:	e0bffe17 	ldw	r2,-8(fp)
   142f8:	10c00015 	stw	r3,0(r2)
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
   142fc:	e0bfff17 	ldw	r2,-4(fp)
   14300:	10c01d17 	ldw	r3,116(r2)
   14304:	e0bfff17 	ldw	r2,-4(fp)
   14308:	10c01c15 	stw	r3,112(r2)
  /* unacked queue is now empty */
  pcb->unacked = NULL;
   1430c:	e0bfff17 	ldw	r2,-4(fp)
   14310:	10001d15 	stw	zero,116(r2)
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
   14314:	e0bfff17 	ldw	r2,-4(fp)
   14318:	10801283 	ldbu	r2,74(r2)
   1431c:	10800044 	addi	r2,r2,1
   14320:	1007883a 	mov	r3,r2
   14324:	e0bfff17 	ldw	r2,-4(fp)
   14328:	10c01285 	stb	r3,74(r2)

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
   1432c:	e0bfff17 	ldw	r2,-4(fp)
   14330:	10000f15 	stw	zero,60(r2)

  /* Do the actual retransmission */
  tcp_output(pcb);
   14334:	e13fff17 	ldw	r4,-4(fp)
   14338:	00134600 	call	13460 <tcp_output>
   1433c:	00000106 	br	14344 <tcp_rexmit_rto+0xa0>
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    return;
   14340:	0001883a 	nop
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
}
   14344:	e037883a 	mov	sp,fp
   14348:	dfc00117 	ldw	ra,4(sp)
   1434c:	df000017 	ldw	fp,0(sp)
   14350:	dec00204 	addi	sp,sp,8
   14354:	f800283a 	ret

00014358 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
   14358:	defffc04 	addi	sp,sp,-16
   1435c:	df000315 	stw	fp,12(sp)
   14360:	df000304 	addi	fp,sp,12
   14364:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
   14368:	e0bfff17 	ldw	r2,-4(fp)
   1436c:	10801d17 	ldw	r2,116(r2)
   14370:	10006e26 	beq	r2,zero,1452c <tcp_rexmit+0x1d4>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
   14374:	e0bfff17 	ldw	r2,-4(fp)
   14378:	10801d17 	ldw	r2,116(r2)
   1437c:	e0bffe15 	stw	r2,-8(fp)
  pcb->unacked = seg->next;
   14380:	e0bffe17 	ldw	r2,-8(fp)
   14384:	10c00017 	ldw	r3,0(r2)
   14388:	e0bfff17 	ldw	r2,-4(fp)
   1438c:	10c01d15 	stw	r3,116(r2)

  cur_seg = &(pcb->unsent);
   14390:	e0bfff17 	ldw	r2,-4(fp)
   14394:	10801c04 	addi	r2,r2,112
   14398:	e0bffd15 	stw	r2,-12(fp)
  while (*cur_seg &&
   1439c:	00000306 	br	143ac <tcp_rexmit+0x54>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
   143a0:	e0bffd17 	ldw	r2,-12(fp)
   143a4:	10800017 	ldw	r2,0(r2)
   143a8:	e0bffd15 	stw	r2,-12(fp)
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
   143ac:	e0bffd17 	ldw	r2,-12(fp)
   143b0:	10800017 	ldw	r2,0(r2)
   143b4:	10004826 	beq	r2,zero,144d8 <tcp_rexmit+0x180>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
   143b8:	e0bffd17 	ldw	r2,-12(fp)
   143bc:	10800017 	ldw	r2,0(r2)
   143c0:	10800317 	ldw	r2,12(r2)
   143c4:	10c0010b 	ldhu	r3,4(r2)
   143c8:	1080018b 	ldhu	r2,6(r2)
   143cc:	1004943a 	slli	r2,r2,16
   143d0:	10c4b03a 	or	r2,r2,r3
   143d4:	1006d63a 	srli	r3,r2,24
   143d8:	e0bffd17 	ldw	r2,-12(fp)
   143dc:	10800017 	ldw	r2,0(r2)
   143e0:	10800317 	ldw	r2,12(r2)
   143e4:	1100010b 	ldhu	r4,4(r2)
   143e8:	1080018b 	ldhu	r2,6(r2)
   143ec:	1004943a 	slli	r2,r2,16
   143f0:	1104b03a 	or	r2,r2,r4
   143f4:	1004d23a 	srli	r2,r2,8
   143f8:	10bfc00c 	andi	r2,r2,65280
   143fc:	1886b03a 	or	r3,r3,r2
   14400:	e0bffd17 	ldw	r2,-12(fp)
   14404:	10800017 	ldw	r2,0(r2)
   14408:	10800317 	ldw	r2,12(r2)
   1440c:	1100010b 	ldhu	r4,4(r2)
   14410:	1080018b 	ldhu	r2,6(r2)
   14414:	1004943a 	slli	r2,r2,16
   14418:	1104b03a 	or	r2,r2,r4
   1441c:	10bfc00c 	andi	r2,r2,65280
   14420:	1004923a 	slli	r2,r2,8
   14424:	1886b03a 	or	r3,r3,r2
   14428:	e0bffd17 	ldw	r2,-12(fp)
   1442c:	10800017 	ldw	r2,0(r2)
   14430:	10800317 	ldw	r2,12(r2)
   14434:	1100010b 	ldhu	r4,4(r2)
   14438:	1080018b 	ldhu	r2,6(r2)
   1443c:	1004943a 	slli	r2,r2,16
   14440:	1104b03a 	or	r2,r2,r4
   14444:	1004963a 	slli	r2,r2,24
   14448:	1886b03a 	or	r3,r3,r2
   1444c:	e0bffe17 	ldw	r2,-8(fp)
   14450:	10800317 	ldw	r2,12(r2)
   14454:	1100010b 	ldhu	r4,4(r2)
   14458:	1080018b 	ldhu	r2,6(r2)
   1445c:	1004943a 	slli	r2,r2,16
   14460:	1104b03a 	or	r2,r2,r4
   14464:	1008d63a 	srli	r4,r2,24
   14468:	e0bffe17 	ldw	r2,-8(fp)
   1446c:	10800317 	ldw	r2,12(r2)
   14470:	1140010b 	ldhu	r5,4(r2)
   14474:	1080018b 	ldhu	r2,6(r2)
   14478:	1004943a 	slli	r2,r2,16
   1447c:	1144b03a 	or	r2,r2,r5
   14480:	1004d23a 	srli	r2,r2,8
   14484:	10bfc00c 	andi	r2,r2,65280
   14488:	2088b03a 	or	r4,r4,r2
   1448c:	e0bffe17 	ldw	r2,-8(fp)
   14490:	10800317 	ldw	r2,12(r2)
   14494:	1140010b 	ldhu	r5,4(r2)
   14498:	1080018b 	ldhu	r2,6(r2)
   1449c:	1004943a 	slli	r2,r2,16
   144a0:	1144b03a 	or	r2,r2,r5
   144a4:	10bfc00c 	andi	r2,r2,65280
   144a8:	1004923a 	slli	r2,r2,8
   144ac:	2088b03a 	or	r4,r4,r2
   144b0:	e0bffe17 	ldw	r2,-8(fp)
   144b4:	10800317 	ldw	r2,12(r2)
   144b8:	1140010b 	ldhu	r5,4(r2)
   144bc:	1080018b 	ldhu	r2,6(r2)
   144c0:	1004943a 	slli	r2,r2,16
   144c4:	1144b03a 	or	r2,r2,r5
   144c8:	1004963a 	slli	r2,r2,24
   144cc:	2084b03a 	or	r2,r4,r2
   144d0:	1885c83a 	sub	r2,r3,r2
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
   144d4:	103fb216 	blt	r2,zero,143a0 <tcp_rexmit+0x48>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
   144d8:	e0bffd17 	ldw	r2,-12(fp)
   144dc:	10c00017 	ldw	r3,0(r2)
   144e0:	e0bffe17 	ldw	r2,-8(fp)
   144e4:	10c00015 	stw	r3,0(r2)
  *cur_seg = seg;
   144e8:	e0bffd17 	ldw	r2,-12(fp)
   144ec:	e0fffe17 	ldw	r3,-8(fp)
   144f0:	10c00015 	stw	r3,0(r2)
#if TCP_OVERSIZE
  if (seg->next == NULL) {
   144f4:	e0bffe17 	ldw	r2,-8(fp)
   144f8:	10800017 	ldw	r2,0(r2)
   144fc:	1000021e 	bne	r2,zero,14508 <tcp_rexmit+0x1b0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
   14500:	e0bfff17 	ldw	r2,-4(fp)
   14504:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
   14508:	e0bfff17 	ldw	r2,-4(fp)
   1450c:	10801283 	ldbu	r2,74(r2)
   14510:	10800044 	addi	r2,r2,1
   14514:	1007883a 	mov	r3,r2
   14518:	e0bfff17 	ldw	r2,-4(fp)
   1451c:	10c01285 	stb	r3,74(r2)

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
   14520:	e0bfff17 	ldw	r2,-4(fp)
   14524:	10000f15 	stw	zero,60(r2)
   14528:	00000106 	br	14530 <tcp_rexmit+0x1d8>
{
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    return;
   1452c:	0001883a 	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
   14530:	e037883a 	mov	sp,fp
   14534:	df000017 	ldw	fp,0(sp)
   14538:	dec00104 	addi	sp,sp,4
   1453c:	f800283a 	ret

00014540 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
   14540:	defffd04 	addi	sp,sp,-12
   14544:	dfc00215 	stw	ra,8(sp)
   14548:	df000115 	stw	fp,4(sp)
   1454c:	df000104 	addi	fp,sp,4
   14550:	e13fff15 	stw	r4,-4(fp)
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
   14554:	e0bfff17 	ldw	r2,-4(fp)
   14558:	10801d17 	ldw	r2,116(r2)
   1455c:	10003c26 	beq	r2,zero,14650 <tcp_rexmit_fast+0x110>
   14560:	e0bfff17 	ldw	r2,-4(fp)
   14564:	10800883 	ldbu	r2,34(r2)
   14568:	10803fcc 	andi	r2,r2,255
   1456c:	1080010c 	andi	r2,r2,4
   14570:	1000371e 	bne	r2,zero,14650 <tcp_rexmit_fast+0x110>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
   14574:	e13fff17 	ldw	r4,-4(fp)
   14578:	00143580 	call	14358 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
   1457c:	e0bfff17 	ldw	r2,-4(fp)
   14580:	1080140b 	ldhu	r2,80(r2)
   14584:	e0ffff17 	ldw	r3,-4(fp)
   14588:	18c0190b 	ldhu	r3,100(r3)
   1458c:	10bfffcc 	andi	r2,r2,65535
   14590:	18ffffcc 	andi	r3,r3,65535
   14594:	1880082e 	bgeu	r3,r2,145b8 <tcp_rexmit_fast+0x78>
      pcb->ssthresh = pcb->snd_wnd / 2;
   14598:	e0bfff17 	ldw	r2,-4(fp)
   1459c:	1080190b 	ldhu	r2,100(r2)
   145a0:	10bfffcc 	andi	r2,r2,65535
   145a4:	1004d07a 	srli	r2,r2,1
   145a8:	1007883a 	mov	r3,r2
   145ac:	e0bfff17 	ldw	r2,-4(fp)
   145b0:	10c0148d 	sth	r3,82(r2)
   145b4:	00000706 	br	145d4 <tcp_rexmit_fast+0x94>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
   145b8:	e0bfff17 	ldw	r2,-4(fp)
   145bc:	1080140b 	ldhu	r2,80(r2)
   145c0:	10bfffcc 	andi	r2,r2,65535
   145c4:	1004d07a 	srli	r2,r2,1
   145c8:	1007883a 	mov	r3,r2
   145cc:	e0bfff17 	ldw	r2,-4(fp)
   145d0:	10c0148d 	sth	r3,82(r2)
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
   145d4:	e0bfff17 	ldw	r2,-4(fp)
   145d8:	1080148b 	ldhu	r2,82(r2)
   145dc:	10ffffcc 	andi	r3,r2,65535
   145e0:	e0bfff17 	ldw	r2,-4(fp)
   145e4:	10800e8b 	ldhu	r2,58(r2)
   145e8:	10bfffcc 	andi	r2,r2,65535
   145ec:	1085883a 	add	r2,r2,r2
   145f0:	1880060e 	bge	r3,r2,1460c <tcp_rexmit_fast+0xcc>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
   145f4:	e0bfff17 	ldw	r2,-4(fp)
   145f8:	10800e8b 	ldhu	r2,58(r2)
   145fc:	1085883a 	add	r2,r2,r2
   14600:	1007883a 	mov	r3,r2
   14604:	e0bfff17 	ldw	r2,-4(fp)
   14608:	10c0148d 	sth	r3,82(r2)
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
   1460c:	e0bfff17 	ldw	r2,-4(fp)
   14610:	1100148b 	ldhu	r4,82(r2)
   14614:	e0bfff17 	ldw	r2,-4(fp)
   14618:	10c00e8b 	ldhu	r3,58(r2)
   1461c:	1805883a 	mov	r2,r3
   14620:	1085883a 	add	r2,r2,r2
   14624:	10c5883a 	add	r2,r2,r3
   14628:	2085883a 	add	r2,r4,r2
   1462c:	1007883a 	mov	r3,r2
   14630:	e0bfff17 	ldw	r2,-4(fp)
   14634:	10c0140d 	sth	r3,80(r2)
    pcb->flags |= TF_INFR;
   14638:	e0bfff17 	ldw	r2,-4(fp)
   1463c:	10800883 	ldbu	r2,34(r2)
   14640:	10800114 	ori	r2,r2,4
   14644:	1007883a 	mov	r3,r2
   14648:	e0bfff17 	ldw	r2,-4(fp)
   1464c:	10c00885 	stb	r3,34(r2)
  } 
}
   14650:	e037883a 	mov	sp,fp
   14654:	dfc00117 	ldw	ra,4(sp)
   14658:	df000017 	ldw	fp,0(sp)
   1465c:	dec00204 	addi	sp,sp,8
   14660:	f800283a 	ret

00014664 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
   14664:	defff904 	addi	sp,sp,-28
   14668:	dfc00615 	stw	ra,24(sp)
   1466c:	df000515 	stw	fp,20(sp)
   14670:	df000504 	addi	fp,sp,20
   14674:	e13fff15 	stw	r4,-4(fp)
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
   14678:	e0bfff17 	ldw	r2,-4(fp)
   1467c:	10801517 	ldw	r2,84(r2)
   14680:	10bfffc4 	addi	r2,r2,-1
   14684:	1006d63a 	srli	r3,r2,24
   14688:	e0bfff17 	ldw	r2,-4(fp)
   1468c:	10801517 	ldw	r2,84(r2)
   14690:	10bfffc4 	addi	r2,r2,-1
   14694:	1004d23a 	srli	r2,r2,8
   14698:	10bfc00c 	andi	r2,r2,65280
   1469c:	1886b03a 	or	r3,r3,r2
   146a0:	e0bfff17 	ldw	r2,-4(fp)
   146a4:	10801517 	ldw	r2,84(r2)
   146a8:	10bfffc4 	addi	r2,r2,-1
   146ac:	10bfc00c 	andi	r2,r2,65280
   146b0:	1004923a 	slli	r2,r2,8
   146b4:	1886b03a 	or	r3,r3,r2
   146b8:	e0bfff17 	ldw	r2,-4(fp)
   146bc:	10801517 	ldw	r2,84(r2)
   146c0:	10bfffc4 	addi	r2,r2,-1
   146c4:	1004963a 	slli	r2,r2,24
   146c8:	1884b03a 	or	r2,r3,r2
   146cc:	e13fff17 	ldw	r4,-4(fp)
   146d0:	000b883a 	mov	r5,zero
   146d4:	000d883a 	mov	r6,zero
   146d8:	100f883a 	mov	r7,r2
   146dc:	0011d380 	call	11d38 <tcp_output_alloc_header>
   146e0:	e0bffd15 	stw	r2,-12(fp)
  if(p == NULL) {
   146e4:	e0bffd17 	ldw	r2,-12(fp)
   146e8:	10002926 	beq	r2,zero,14790 <tcp_keepalive+0x12c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   146ec:	e0bffd17 	ldw	r2,-12(fp)
   146f0:	10800117 	ldw	r2,4(r2)
   146f4:	e0bffe15 	stw	r2,-8(fp)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
   146f8:	e0ffff17 	ldw	r3,-4(fp)
   146fc:	e0bfff17 	ldw	r2,-4(fp)
   14700:	10800104 	addi	r2,r2,4
                                      IP_PROTO_TCP, p->tot_len);
   14704:	e13ffd17 	ldw	r4,-12(fp)
   14708:	2100020b 	ldhu	r4,8(r4)
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
   1470c:	213fffcc 	andi	r4,r4,65535
   14710:	d9000015 	stw	r4,0(sp)
   14714:	e13ffd17 	ldw	r4,-12(fp)
   14718:	180b883a 	mov	r5,r3
   1471c:	100d883a 	mov	r6,r2
   14720:	01c00184 	movi	r7,6
   14724:	00056a40 	call	56a4 <inet_chksum_pseudo>
   14728:	e0fffe17 	ldw	r3,-8(fp)
   1472c:	1880040d 	sth	r2,16(r3)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
   14730:	00800134 	movhi	r2,4
   14734:	10932304 	addi	r2,r2,19596
   14738:	1080240b 	ldhu	r2,144(r2)
   1473c:	10800044 	addi	r2,r2,1
   14740:	1007883a 	mov	r3,r2
   14744:	00800134 	movhi	r2,4
   14748:	10932304 	addi	r2,r2,19596
   1474c:	10c0240d 	sth	r3,144(r2)
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
   14750:	e17fff17 	ldw	r5,-4(fp)
   14754:	e0bfff17 	ldw	r2,-4(fp)
   14758:	10c00104 	addi	r3,r2,4
   1475c:	e0bfff17 	ldw	r2,-4(fp)
   14760:	10800283 	ldbu	r2,10(r2)
   14764:	10803fcc 	andi	r2,r2,255
   14768:	d8000015 	stw	zero,0(sp)
   1476c:	01000184 	movi	r4,6
   14770:	d9000115 	stw	r4,4(sp)
   14774:	e13ffd17 	ldw	r4,-12(fp)
   14778:	180d883a 	mov	r6,r3
   1477c:	100f883a 	mov	r7,r2
   14780:	00066a80 	call	66a8 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
   14784:	e13ffd17 	ldw	r4,-12(fp)
   14788:	000a4200 	call	a420 <pbuf_free>
   1478c:	00000106 	br	14794 <tcp_keepalive+0x130>
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
   14790:	0001883a 	nop

  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
   14794:	e037883a 	mov	sp,fp
   14798:	dfc00117 	ldw	ra,4(sp)
   1479c:	df000017 	ldw	fp,0(sp)
   147a0:	dec00204 	addi	sp,sp,8
   147a4:	f800283a 	ret

000147a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
   147a8:	defff604 	addi	sp,sp,-40
   147ac:	dfc00915 	stw	ra,36(sp)
   147b0:	df000815 	stw	fp,32(sp)
   147b4:	df000804 	addi	fp,sp,32
   147b8:	e13fff15 	stw	r4,-4(fp)
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
   147bc:	e0bfff17 	ldw	r2,-4(fp)
   147c0:	10801d17 	ldw	r2,116(r2)
   147c4:	e0bffa15 	stw	r2,-24(fp)

  if(seg == NULL) {
   147c8:	e0bffa17 	ldw	r2,-24(fp)
   147cc:	1000031e 	bne	r2,zero,147dc <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
   147d0:	e0bfff17 	ldw	r2,-4(fp)
   147d4:	10801c17 	ldw	r2,112(r2)
   147d8:	e0bffa15 	stw	r2,-24(fp)
  }
  if(seg == NULL) {
   147dc:	e0bffa17 	ldw	r2,-24(fp)
   147e0:	10007026 	beq	r2,zero,149a4 <tcp_zero_window_probe+0x1fc>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
   147e4:	e0bffa17 	ldw	r2,-24(fp)
   147e8:	10800317 	ldw	r2,12(r2)
   147ec:	1080030b 	ldhu	r2,12(r2)
   147f0:	10bfffcc 	andi	r2,r2,65535
   147f4:	1004d23a 	srli	r2,r2,8
   147f8:	10ffffcc 	andi	r3,r2,65535
   147fc:	e0bffa17 	ldw	r2,-24(fp)
   14800:	10800317 	ldw	r2,12(r2)
   14804:	1080030b 	ldhu	r2,12(r2)
   14808:	10bfffcc 	andi	r2,r2,65535
   1480c:	1004923a 	slli	r2,r2,8
   14810:	10bfffcc 	andi	r2,r2,65535
   14814:	1884b03a 	or	r2,r3,r2
   14818:	1080004c 	andi	r2,r2,1
   1481c:	10000626 	beq	r2,zero,14838 <tcp_zero_window_probe+0x90>
   14820:	e0bffa17 	ldw	r2,-24(fp)
   14824:	1080020b 	ldhu	r2,8(r2)
   14828:	10bfffcc 	andi	r2,r2,65535
   1482c:	1000021e 	bne	r2,zero,14838 <tcp_zero_window_probe+0x90>
   14830:	00800044 	movi	r2,1
   14834:	00000106 	br	1483c <tcp_zero_window_probe+0x94>
   14838:	0005883a 	mov	r2,zero
   1483c:	e0bffb05 	stb	r2,-20(fp)
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
   14840:	e0bffb03 	ldbu	r2,-20(fp)
   14844:	1005003a 	cmpeq	r2,r2,zero
   14848:	10803fcc 	andi	r2,r2,255
   1484c:	e0bffb8d 	sth	r2,-18(fp)

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
   14850:	e0fffb8b 	ldhu	r3,-18(fp)
   14854:	e0bffa17 	ldw	r2,-24(fp)
   14858:	10800317 	ldw	r2,12(r2)
   1485c:	1100010b 	ldhu	r4,4(r2)
   14860:	1080018b 	ldhu	r2,6(r2)
   14864:	1004943a 	slli	r2,r2,16
   14868:	1104b03a 	or	r2,r2,r4
   1486c:	e13fff17 	ldw	r4,-4(fp)
   14870:	000b883a 	mov	r5,zero
   14874:	180d883a 	mov	r6,r3
   14878:	100f883a 	mov	r7,r2
   1487c:	0011d380 	call	11d38 <tcp_output_alloc_header>
   14880:	e0bffc15 	stw	r2,-16(fp)
  if(p == NULL) {
   14884:	e0bffc17 	ldw	r2,-16(fp)
   14888:	10004826 	beq	r2,zero,149ac <tcp_zero_window_probe+0x204>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
   1488c:	e0bffc17 	ldw	r2,-16(fp)
   14890:	10800117 	ldw	r2,4(r2)
   14894:	e0bffd15 	stw	r2,-12(fp)

  if (is_fin) {
   14898:	e0bffb03 	ldbu	r2,-20(fp)
   1489c:	10000926 	beq	r2,zero,148c4 <tcp_zero_window_probe+0x11c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
   148a0:	e0bffd17 	ldw	r2,-12(fp)
   148a4:	10c0030b 	ldhu	r3,12(r2)
   148a8:	00b03fc4 	movi	r2,-16129
   148ac:	1884703a 	and	r2,r3,r2
   148b0:	10844014 	ori	r2,r2,4352
   148b4:	1007883a 	mov	r3,r2
   148b8:	e0bffd17 	ldw	r2,-12(fp)
   148bc:	10c0030d 	sth	r3,12(r2)
   148c0:	00001206 	br	1490c <tcp_zero_window_probe+0x164>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
   148c4:	e0bffc17 	ldw	r2,-16(fp)
   148c8:	10800117 	ldw	r2,4(r2)
   148cc:	10800504 	addi	r2,r2,20
   148d0:	e0bffe15 	stw	r2,-8(fp)
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
   148d4:	e0bffa17 	ldw	r2,-24(fp)
   148d8:	10c00117 	ldw	r3,4(r2)
   148dc:	e0bffa17 	ldw	r2,-24(fp)
   148e0:	10800117 	ldw	r2,4(r2)
   148e4:	1100020b 	ldhu	r4,8(r2)
   148e8:	e0bffa17 	ldw	r2,-24(fp)
   148ec:	1080020b 	ldhu	r2,8(r2)
   148f0:	2085c83a 	sub	r2,r4,r2
   148f4:	10bfffcc 	andi	r2,r2,65535
   148f8:	1809883a 	mov	r4,r3
   148fc:	e17ffe17 	ldw	r5,-8(fp)
   14900:	01800044 	movi	r6,1
   14904:	100f883a 	mov	r7,r2
   14908:	000abf00 	call	abf0 <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
   1490c:	e0ffff17 	ldw	r3,-4(fp)
   14910:	e0bfff17 	ldw	r2,-4(fp)
   14914:	10800104 	addi	r2,r2,4
                                      IP_PROTO_TCP, p->tot_len);
   14918:	e13ffc17 	ldw	r4,-16(fp)
   1491c:	2100020b 	ldhu	r4,8(r4)
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
   14920:	213fffcc 	andi	r4,r4,65535
   14924:	d9000015 	stw	r4,0(sp)
   14928:	e13ffc17 	ldw	r4,-16(fp)
   1492c:	180b883a 	mov	r5,r3
   14930:	100d883a 	mov	r6,r2
   14934:	01c00184 	movi	r7,6
   14938:	00056a40 	call	56a4 <inet_chksum_pseudo>
   1493c:	e0fffd17 	ldw	r3,-12(fp)
   14940:	1880040d 	sth	r2,16(r3)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
   14944:	00800134 	movhi	r2,4
   14948:	10932304 	addi	r2,r2,19596
   1494c:	1080240b 	ldhu	r2,144(r2)
   14950:	10800044 	addi	r2,r2,1
   14954:	1007883a 	mov	r3,r2
   14958:	00800134 	movhi	r2,4
   1495c:	10932304 	addi	r2,r2,19596
   14960:	10c0240d 	sth	r3,144(r2)
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
   14964:	e17fff17 	ldw	r5,-4(fp)
   14968:	e0bfff17 	ldw	r2,-4(fp)
   1496c:	10c00104 	addi	r3,r2,4
   14970:	e0bfff17 	ldw	r2,-4(fp)
   14974:	10800283 	ldbu	r2,10(r2)
   14978:	10803fcc 	andi	r2,r2,255
   1497c:	d8000015 	stw	zero,0(sp)
   14980:	01000184 	movi	r4,6
   14984:	d9000115 	stw	r4,4(sp)
   14988:	e13ffc17 	ldw	r4,-16(fp)
   1498c:	180d883a 	mov	r6,r3
   14990:	100f883a 	mov	r7,r2
   14994:	00066a80 	call	66a8 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
   14998:	e13ffc17 	ldw	r4,-16(fp)
   1499c:	000a4200 	call	a420 <pbuf_free>
   149a0:	00000306 	br	149b0 <tcp_zero_window_probe+0x208>

  if(seg == NULL) {
    seg = pcb->unsent;
  }
  if(seg == NULL) {
    return;
   149a4:	0001883a 	nop
   149a8:	00000106 	br	149b0 <tcp_zero_window_probe+0x208>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
   149ac:	0001883a 	nop
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
   149b0:	e037883a 	mov	sp,fp
   149b4:	dfc00117 	ldw	ra,4(sp)
   149b8:	df000017 	ldw	fp,0(sp)
   149bc:	dec00204 	addi	sp,sp,8
   149c0:	f800283a 	ret

000149c4 <tcp_timer_needed>:

#else /* LWIP_TIMERS */
/* Satisfy the TCP code which calls this function */
void
tcp_timer_needed(void)
{
   149c4:	deffff04 	addi	sp,sp,-4
   149c8:	df000015 	stw	fp,0(sp)
   149cc:	d839883a 	mov	fp,sp
}
   149d0:	e037883a 	mov	sp,fp
   149d4:	df000017 	ldw	fp,0(sp)
   149d8:	dec00104 	addi	sp,sp,4
   149dc:	f800283a 	ret

000149e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
   149e0:	deffff04 	addi	sp,sp,-4
   149e4:	df000015 	stw	fp,0(sp)
   149e8:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
   149ec:	e037883a 	mov	sp,fp
   149f0:	df000017 	ldw	fp,0(sp)
   149f4:	dec00104 	addi	sp,sp,4
   149f8:	f800283a 	ret

000149fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
   149fc:	defffd04 	addi	sp,sp,-12
   14a00:	df000215 	stw	fp,8(sp)
   14a04:	df000204 	addi	fp,sp,8
  u16_t n = 0;
   14a08:	e03ffe0d 	sth	zero,-8(fp)
   14a0c:	00000106 	br	14a14 <udp_new_port+0x18>
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->local_port == udp_port) {
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
        return 0;
      }
      goto again;
   14a10:	0001883a 	nop
{
  u16_t n = 0;
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
   14a14:	d0a0070b 	ldhu	r2,-32740(gp)
   14a18:	113fffcc 	andi	r4,r2,65535
   14a1c:	00ffffd4 	movui	r3,65535
   14a20:	20c7003a 	cmpeq	r3,r4,r3
   14a24:	10800044 	addi	r2,r2,1
   14a28:	d0a0070d 	sth	r2,-32740(gp)
   14a2c:	18803fcc 	andi	r2,r3,255
   14a30:	10000226 	beq	r2,zero,14a3c <udp_new_port+0x40>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
   14a34:	00b00004 	movi	r2,-16384
   14a38:	d0a0070d 	sth	r2,-32740(gp)
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   14a3c:	d0a8c517 	ldw	r2,-23788(gp)
   14a40:	e0bfff15 	stw	r2,-4(fp)
   14a44:	00001106 	br	14a8c <udp_new_port+0x90>
    if (pcb->local_port == udp_port) {
   14a48:	e0bfff17 	ldw	r2,-4(fp)
   14a4c:	10c0048b 	ldhu	r3,18(r2)
   14a50:	d0a0070b 	ldhu	r2,-32740(gp)
   14a54:	18ffffcc 	andi	r3,r3,65535
   14a58:	10bfffcc 	andi	r2,r2,65535
   14a5c:	1880081e 	bne	r3,r2,14a80 <udp_new_port+0x84>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
   14a60:	e0bffe0b 	ldhu	r2,-8(fp)
   14a64:	10800044 	addi	r2,r2,1
   14a68:	e0bffe0d 	sth	r2,-8(fp)
   14a6c:	e0bffe0b 	ldhu	r2,-8(fp)
   14a70:	10900030 	cmpltui	r2,r2,16384
   14a74:	103fe61e 	bne	r2,zero,14a10 <udp_new_port+0x14>
        return 0;
   14a78:	0005883a 	mov	r2,zero
   14a7c:	00000606 	br	14a98 <udp_new_port+0x9c>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   14a80:	e0bfff17 	ldw	r2,-4(fp)
   14a84:	10800317 	ldw	r2,12(r2)
   14a88:	e0bfff15 	stw	r2,-4(fp)
   14a8c:	e0bfff17 	ldw	r2,-4(fp)
   14a90:	103fed1e 	bne	r2,zero,14a48 <udp_new_port+0x4c>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
   14a94:	d0a0070b 	ldhu	r2,-32740(gp)
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
   14a98:	e037883a 	mov	sp,fp
   14a9c:	df000017 	ldw	fp,0(sp)
   14aa0:	dec00104 	addi	sp,sp,4
   14aa4:	f800283a 	ret

00014aa8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
   14aa8:	defff304 	addi	sp,sp,-52
   14aac:	dfc00c15 	stw	ra,48(sp)
   14ab0:	df000b15 	stw	fp,44(sp)
   14ab4:	df000b04 	addi	fp,sp,44
   14ab8:	e13ffe15 	stw	r4,-8(fp)
   14abc:	e17fff15 	stw	r5,-4(fp)
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
   14ac0:	00800134 	movhi	r2,4
   14ac4:	10932304 	addi	r2,r2,19596
   14ac8:	10801e8b 	ldhu	r2,122(r2)
   14acc:	10800044 	addi	r2,r2,1
   14ad0:	1007883a 	mov	r3,r2
   14ad4:	00800134 	movhi	r2,4
   14ad8:	10932304 	addi	r2,r2,19596
   14adc:	10c01e8d 	sth	r3,122(r2)

  iphdr = (struct ip_hdr *)p->payload;
   14ae0:	e0bffe17 	ldw	r2,-8(fp)
   14ae4:	10800117 	ldw	r2,4(r2)
   14ae8:	e0bffa15 	stw	r2,-24(fp)

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
   14aec:	e0bffe17 	ldw	r2,-8(fp)
   14af0:	1080020b 	ldhu	r2,8(r2)
   14af4:	10ffffcc 	andi	r3,r2,65535
   14af8:	e0bffa17 	ldw	r2,-24(fp)
   14afc:	10800003 	ldbu	r2,0(r2)
   14b00:	10803fcc 	andi	r2,r2,255
   14b04:	108003cc 	andi	r2,r2,15
   14b08:	10800084 	addi	r2,r2,2
   14b0c:	1085883a 	add	r2,r2,r2
   14b10:	1085883a 	add	r2,r2,r2
   14b14:	18800f16 	blt	r3,r2,14b54 <udp_input+0xac>
   14b18:	e0bffa17 	ldw	r2,-24(fp)
   14b1c:	10800003 	ldbu	r2,0(r2)
   14b20:	10803fcc 	andi	r2,r2,255
   14b24:	108003cc 	andi	r2,r2,15
   14b28:	1085883a 	add	r2,r2,r2
   14b2c:	1085883a 	add	r2,r2,r2
   14b30:	0085c83a 	sub	r2,zero,r2
   14b34:	10bfffcc 	andi	r2,r2,65535
   14b38:	10a0001c 	xori	r2,r2,32768
   14b3c:	10a00004 	addi	r2,r2,-32768
   14b40:	e13ffe17 	ldw	r4,-8(fp)
   14b44:	100b883a 	mov	r5,r2
   14b48:	000a2280 	call	a228 <pbuf_header>
   14b4c:	10803fcc 	andi	r2,r2,255
   14b50:	10001326 	beq	r2,zero,14ba0 <udp_input+0xf8>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
   14b54:	00800134 	movhi	r2,4
   14b58:	10932304 	addi	r2,r2,19596
   14b5c:	1080208b 	ldhu	r2,130(r2)
   14b60:	10800044 	addi	r2,r2,1
   14b64:	1007883a 	mov	r3,r2
   14b68:	00800134 	movhi	r2,4
   14b6c:	10932304 	addi	r2,r2,19596
   14b70:	10c0208d 	sth	r3,130(r2)
    UDP_STATS_INC(udp.drop);
   14b74:	00800134 	movhi	r2,4
   14b78:	10932304 	addi	r2,r2,19596
   14b7c:	10801f8b 	ldhu	r2,126(r2)
   14b80:	10800044 	addi	r2,r2,1
   14b84:	1007883a 	mov	r3,r2
   14b88:	00800134 	movhi	r2,4
   14b8c:	10932304 	addi	r2,r2,19596
   14b90:	10c01f8d 	sth	r3,126(r2)
    snmp_inc_udpinerrors();
    pbuf_free(p);
   14b94:	e13ffe17 	ldw	r4,-8(fp)
   14b98:	000a4200 	call	a420 <pbuf_free>
    goto end;
   14b9c:	00013606 	br	15078 <udp_input+0x5d0>
  }

  udphdr = (struct udp_hdr *)p->payload;
   14ba0:	e0bffe17 	ldw	r2,-8(fp)
   14ba4:	10800117 	ldw	r2,4(r2)
   14ba8:	e0bffb15 	stw	r2,-20(fp)

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
   14bac:	008000f4 	movhi	r2,3
   14bb0:	109bd204 	addi	r2,r2,28488
   14bb4:	10800017 	ldw	r2,0(r2)
   14bb8:	1009883a 	mov	r4,r2
   14bbc:	e17fff17 	ldw	r5,-4(fp)
   14bc0:	00067940 	call	6794 <ip4_addr_isbroadcast>
   14bc4:	e0bffc05 	stb	r2,-16(fp)

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
   14bc8:	e0bffb17 	ldw	r2,-20(fp)
   14bcc:	1080000b 	ldhu	r2,0(r2)
   14bd0:	10bfffcc 	andi	r2,r2,65535
   14bd4:	1004d23a 	srli	r2,r2,8
   14bd8:	1007883a 	mov	r3,r2
   14bdc:	e0bffb17 	ldw	r2,-20(fp)
   14be0:	1080000b 	ldhu	r2,0(r2)
   14be4:	10bfffcc 	andi	r2,r2,65535
   14be8:	1004923a 	slli	r2,r2,8
   14bec:	1884b03a 	or	r2,r3,r2
   14bf0:	e0bffc8d 	sth	r2,-14(fp)
  dest = ntohs(udphdr->dest);
   14bf4:	e0bffb17 	ldw	r2,-20(fp)
   14bf8:	1080008b 	ldhu	r2,2(r2)
   14bfc:	10bfffcc 	andi	r2,r2,65535
   14c00:	1004d23a 	srli	r2,r2,8
   14c04:	1007883a 	mov	r3,r2
   14c08:	e0bffb17 	ldw	r2,-20(fp)
   14c0c:	1080008b 	ldhu	r2,2(r2)
   14c10:	10bfffcc 	andi	r2,r2,65535
   14c14:	1004923a 	slli	r2,r2,8
   14c18:	1884b03a 	or	r2,r3,r2
   14c1c:	e0bffd0d 	sth	r2,-12(fp)
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
   14c20:	e03ff615 	stw	zero,-40(fp)
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
   14c24:	e0bffd0b 	ldhu	r2,-12(fp)
   14c28:	10801118 	cmpnei	r2,r2,68
   14c2c:	1000211e 	bne	r2,zero,14cb4 <udp_input+0x20c>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
   14c30:	e0bffc8b 	ldhu	r2,-14(fp)
   14c34:	108010d8 	cmpnei	r2,r2,67
   14c38:	1000861e 	bne	r2,zero,14e54 <udp_input+0x3ac>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
   14c3c:	e0bfff17 	ldw	r2,-4(fp)
   14c40:	10800817 	ldw	r2,32(r2)
   14c44:	10008326 	beq	r2,zero,14e54 <udp_input+0x3ac>
   14c48:	e0bfff17 	ldw	r2,-4(fp)
   14c4c:	10800817 	ldw	r2,32(r2)
   14c50:	10800117 	ldw	r2,4(r2)
   14c54:	10007f26 	beq	r2,zero,14e54 <udp_input+0x3ac>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
   14c58:	e0bfff17 	ldw	r2,-4(fp)
   14c5c:	10800817 	ldw	r2,32(r2)
   14c60:	10800117 	ldw	r2,4(r2)
   14c64:	10800104 	addi	r2,r2,4
   14c68:	10000d26 	beq	r2,zero,14ca0 <udp_input+0x1f8>
   14c6c:	e0bfff17 	ldw	r2,-4(fp)
   14c70:	10800817 	ldw	r2,32(r2)
   14c74:	10800117 	ldw	r2,4(r2)
   14c78:	10800117 	ldw	r2,4(r2)
   14c7c:	10000826 	beq	r2,zero,14ca0 <udp_input+0x1f8>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	10800817 	ldw	r2,32(r2)
   14c88:	10800117 	ldw	r2,4(r2)
   14c8c:	10c00117 	ldw	r3,4(r2)
   14c90:	008000f4 	movhi	r2,3
   14c94:	109bd004 	addi	r2,r2,28480
   14c98:	10800017 	ldw	r2,0(r2)
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
   14c9c:	18806d1e 	bne	r3,r2,14e54 <udp_input+0x3ac>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
          pcb = inp->dhcp->pcb;
   14ca0:	e0bfff17 	ldw	r2,-4(fp)
   14ca4:	10800817 	ldw	r2,32(r2)
   14ca8:	10800117 	ldw	r2,4(r2)
   14cac:	e0bff615 	stw	r2,-40(fp)
   14cb0:	00006806 	br	14e54 <udp_input+0x3ac>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
   14cb4:	e03ff715 	stw	zero,-36(fp)
    local_match = 0;
   14cb8:	e03ff905 	stb	zero,-28(fp)
    uncon_pcb = NULL;
   14cbc:	e03ff815 	stw	zero,-32(fp)
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   14cc0:	d0a8c517 	ldw	r2,-23788(gp)
   14cc4:	e0bff615 	stw	r2,-40(fp)
   14cc8:	00005c06 	br	14e3c <udp_input+0x394>
      local_match = 0;
   14ccc:	e03ff905 	stb	zero,-28(fp)
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
   14cd0:	e0bff617 	ldw	r2,-40(fp)
   14cd4:	1080048b 	ldhu	r2,18(r2)
   14cd8:	10ffffcc 	andi	r3,r2,65535
   14cdc:	e0bffd0b 	ldhu	r2,-12(fp)
   14ce0:	1880291e 	bne	r3,r2,14d88 <udp_input+0x2e0>
        if (
   14ce4:	e0bffc03 	ldbu	r2,-16(fp)
   14ce8:	1000051e 	bne	r2,zero,14d00 <udp_input+0x258>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
   14cec:	e0bff617 	ldw	r2,-40(fp)
   14cf0:	10001a26 	beq	r2,zero,14d5c <udp_input+0x2b4>
   14cf4:	e0bff617 	ldw	r2,-40(fp)
   14cf8:	10800017 	ldw	r2,0(r2)
   14cfc:	10001726 	beq	r2,zero,14d5c <udp_input+0x2b4>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
   14d00:	e0bff617 	ldw	r2,-40(fp)
   14d04:	10c00017 	ldw	r3,0(r2)
   14d08:	008000f4 	movhi	r2,3
   14d0c:	109bd204 	addi	r2,r2,28488
   14d10:	10800017 	ldw	r2,0(r2)
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
   14d14:	18801126 	beq	r3,r2,14d5c <udp_input+0x2b4>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
   14d18:	e0bffc03 	ldbu	r2,-16(fp)
   14d1c:	10001a26 	beq	r2,zero,14d88 <udp_input+0x2e0>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
   14d20:	e0bff617 	ldw	r2,-40(fp)
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
   14d24:	10000d26 	beq	r2,zero,14d5c <udp_input+0x2b4>
             (ip_addr_isany(&pcb->local_ip) ||
   14d28:	e0bff617 	ldw	r2,-40(fp)
   14d2c:	10800017 	ldw	r2,0(r2)
   14d30:	10000a26 	beq	r2,zero,14d5c <udp_input+0x2b4>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
   14d34:	e0bff617 	ldw	r2,-40(fp)
   14d38:	10c00017 	ldw	r3,0(r2)
   14d3c:	008000f4 	movhi	r2,3
   14d40:	109bd204 	addi	r2,r2,28488
   14d44:	10800017 	ldw	r2,0(r2)
   14d48:	1886f03a 	xor	r3,r3,r2
   14d4c:	e0bfff17 	ldw	r2,-4(fp)
   14d50:	10800217 	ldw	r2,8(r2)
   14d54:	1884703a 	and	r2,r3,r2
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
   14d58:	10000b1e 	bne	r2,zero,14d88 <udp_input+0x2e0>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
   14d5c:	00800044 	movi	r2,1
   14d60:	e0bff905 	stb	r2,-28(fp)
          if ((uncon_pcb == NULL) && 
   14d64:	e0bff817 	ldw	r2,-32(fp)
   14d68:	1000071e 	bne	r2,zero,14d88 <udp_input+0x2e0>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
   14d6c:	e0bff617 	ldw	r2,-40(fp)
   14d70:	10800403 	ldbu	r2,16(r2)
   14d74:	10803fcc 	andi	r2,r2,255
   14d78:	1080010c 	andi	r2,r2,4
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
   14d7c:	1000021e 	bne	r2,zero,14d88 <udp_input+0x2e0>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
   14d80:	e0bff617 	ldw	r2,-40(fp)
   14d84:	e0bff815 	stw	r2,-32(fp)
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
   14d88:	e0bff903 	ldbu	r2,-28(fp)
   14d8c:	10002626 	beq	r2,zero,14e28 <udp_input+0x380>
          (pcb->remote_port == src) &&
   14d90:	e0bff617 	ldw	r2,-40(fp)
   14d94:	1080050b 	ldhu	r2,20(r2)
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
   14d98:	10ffffcc 	andi	r3,r2,65535
   14d9c:	e0bffc8b 	ldhu	r2,-14(fp)
   14da0:	1880211e 	bne	r3,r2,14e28 <udp_input+0x380>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
   14da4:	e0bff617 	ldw	r2,-40(fp)
   14da8:	10800104 	addi	r2,r2,4
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
   14dac:	10000926 	beq	r2,zero,14dd4 <udp_input+0x32c>
          (ip_addr_isany(&pcb->remote_ip) ||
   14db0:	e0bff617 	ldw	r2,-40(fp)
   14db4:	10800117 	ldw	r2,4(r2)
   14db8:	10000626 	beq	r2,zero,14dd4 <udp_input+0x32c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
   14dbc:	e0bff617 	ldw	r2,-40(fp)
   14dc0:	10c00117 	ldw	r3,4(r2)
   14dc4:	008000f4 	movhi	r2,3
   14dc8:	109bd004 	addi	r2,r2,28480
   14dcc:	10800017 	ldw	r2,0(r2)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
   14dd0:	1880151e 	bne	r3,r2,14e28 <udp_input+0x380>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
   14dd4:	e0bff717 	ldw	r2,-36(fp)
   14dd8:	10000a26 	beq	r2,zero,14e04 <udp_input+0x35c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
   14ddc:	e0bff617 	ldw	r2,-40(fp)
   14de0:	10c00317 	ldw	r3,12(r2)
   14de4:	e0bff717 	ldw	r2,-36(fp)
   14de8:	10c00315 	stw	r3,12(r2)
          pcb->next = udp_pcbs;
   14dec:	d0e8c517 	ldw	r3,-23788(gp)
   14df0:	e0bff617 	ldw	r2,-40(fp)
   14df4:	10c00315 	stw	r3,12(r2)
          udp_pcbs = pcb;
   14df8:	e0bff617 	ldw	r2,-40(fp)
   14dfc:	d0a8c515 	stw	r2,-23788(gp)
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
   14e00:	00001006 	br	14e44 <udp_input+0x39c>
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
        } else {
          UDP_STATS_INC(udp.cachehit);
   14e04:	00800134 	movhi	r2,4
   14e08:	10932304 	addi	r2,r2,19596
   14e0c:	1080238b 	ldhu	r2,142(r2)
   14e10:	10800044 	addi	r2,r2,1
   14e14:	1007883a 	mov	r3,r2
   14e18:	00800134 	movhi	r2,4
   14e1c:	10932304 	addi	r2,r2,19596
   14e20:	10c0238d 	sth	r3,142(r2)
        }
        break;
   14e24:	00000706 	br	14e44 <udp_input+0x39c>
      }
      prev = pcb;
   14e28:	e0bff617 	ldw	r2,-40(fp)
   14e2c:	e0bff715 	stw	r2,-36(fp)
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
   14e30:	e0bff617 	ldw	r2,-40(fp)
   14e34:	10800317 	ldw	r2,12(r2)
   14e38:	e0bff615 	stw	r2,-40(fp)
   14e3c:	e0bff617 	ldw	r2,-40(fp)
   14e40:	103fa21e 	bne	r2,zero,14ccc <udp_input+0x224>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
   14e44:	e0bff617 	ldw	r2,-40(fp)
   14e48:	1000021e 	bne	r2,zero,14e54 <udp_input+0x3ac>
      pcb = uncon_pcb;
   14e4c:	e0bff817 	ldw	r2,-32(fp)
   14e50:	e0bff615 	stw	r2,-40(fp)
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
   14e54:	e0bff617 	ldw	r2,-40(fp)
   14e58:	1000061e 	bne	r2,zero,14e74 <udp_input+0x3cc>
   14e5c:	e0bfff17 	ldw	r2,-4(fp)
   14e60:	10c00117 	ldw	r3,4(r2)
   14e64:	008000f4 	movhi	r2,3
   14e68:	109bd204 	addi	r2,r2,28488
   14e6c:	10800017 	ldw	r2,0(r2)
   14e70:	18807f1e 	bne	r3,r2,15070 <udp_input+0x5c8>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
   14e74:	e0bffb17 	ldw	r2,-20(fp)
   14e78:	1080018b 	ldhu	r2,6(r2)
   14e7c:	10bfffcc 	andi	r2,r2,65535
   14e80:	10002026 	beq	r2,zero,14f04 <udp_input+0x45c>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
                               IP_PROTO_UDP, p->tot_len) != 0) {
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	1080020b 	ldhu	r2,8(r2)
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
   14e8c:	10bfffcc 	andi	r2,r2,65535
   14e90:	d8800015 	stw	r2,0(sp)
   14e94:	e13ffe17 	ldw	r4,-8(fp)
   14e98:	014000f4 	movhi	r5,3
   14e9c:	295bd004 	addi	r5,r5,28480
   14ea0:	018000f4 	movhi	r6,3
   14ea4:	319bd204 	addi	r6,r6,28488
   14ea8:	01c00444 	movi	r7,17
   14eac:	00056a40 	call	56a4 <inet_chksum_pseudo>
   14eb0:	10bfffcc 	andi	r2,r2,65535
   14eb4:	10001326 	beq	r2,zero,14f04 <udp_input+0x45c>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
   14eb8:	00800134 	movhi	r2,4
   14ebc:	10932304 	addi	r2,r2,19596
   14ec0:	1080200b 	ldhu	r2,128(r2)
   14ec4:	10800044 	addi	r2,r2,1
   14ec8:	1007883a 	mov	r3,r2
   14ecc:	00800134 	movhi	r2,4
   14ed0:	10932304 	addi	r2,r2,19596
   14ed4:	10c0200d 	sth	r3,128(r2)
          UDP_STATS_INC(udp.drop);
   14ed8:	00800134 	movhi	r2,4
   14edc:	10932304 	addi	r2,r2,19596
   14ee0:	10801f8b 	ldhu	r2,126(r2)
   14ee4:	10800044 	addi	r2,r2,1
   14ee8:	1007883a 	mov	r3,r2
   14eec:	00800134 	movhi	r2,4
   14ef0:	10932304 	addi	r2,r2,19596
   14ef4:	10c01f8d 	sth	r3,126(r2)
          snmp_inc_udpinerrors();
          pbuf_free(p);
   14ef8:	e13ffe17 	ldw	r4,-8(fp)
   14efc:	000a4200 	call	a420 <pbuf_free>
          goto end;
   14f00:	00005d06 	br	15078 <udp_input+0x5d0>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
   14f04:	e13ffe17 	ldw	r4,-8(fp)
   14f08:	017ffe04 	movi	r5,-8
   14f0c:	000a2280 	call	a228 <pbuf_header>
   14f10:	10803fcc 	andi	r2,r2,255
   14f14:	10000926 	beq	r2,zero,14f3c <udp_input+0x494>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
   14f18:	010000f4 	movhi	r4,3
   14f1c:	21015b04 	addi	r4,r4,1388
   14f20:	014000f4 	movhi	r5,3
   14f24:	29416504 	addi	r5,r5,1428
   14f28:	01805604 	movi	r6,344
   14f2c:	01c000f4 	movhi	r7,3
   14f30:	39c16a04 	addi	r7,r7,1448
   14f34:	0017c440 	call	17c44 <printf>
   14f38:	003fff06 	br	14f38 <udp_input+0x490>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
   14f3c:	e0bff617 	ldw	r2,-40(fp)
   14f40:	10001326 	beq	r2,zero,14f90 <udp_input+0x4e8>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
   14f44:	e0bff617 	ldw	r2,-40(fp)
   14f48:	10800617 	ldw	r2,24(r2)
   14f4c:	10000d26 	beq	r2,zero,14f84 <udp_input+0x4dc>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
   14f50:	e0bff617 	ldw	r2,-40(fp)
   14f54:	10c00617 	ldw	r3,24(r2)
   14f58:	e0bff617 	ldw	r2,-40(fp)
   14f5c:	10800717 	ldw	r2,28(r2)
   14f60:	e13ffc8b 	ldhu	r4,-14(fp)
   14f64:	d9000015 	stw	r4,0(sp)
   14f68:	1009883a 	mov	r4,r2
   14f6c:	e17ff617 	ldw	r5,-40(fp)
   14f70:	e1bffe17 	ldw	r6,-8(fp)
   14f74:	01c000f4 	movhi	r7,3
   14f78:	39dbd004 	addi	r7,r7,28480
   14f7c:	183ee83a 	callr	r3
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
   14f80:	00003d06 	br	15078 <udp_input+0x5d0>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
   14f84:	e13ffe17 	ldw	r4,-8(fp)
   14f88:	000a4200 	call	a420 <pbuf_free>
        goto end;
   14f8c:	00003a06 	br	15078 <udp_input+0x5d0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
   14f90:	e0bffc03 	ldbu	r2,-16(fp)
   14f94:	1000231e 	bne	r2,zero,15024 <udp_input+0x57c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
   14f98:	008000f4 	movhi	r2,3
   14f9c:	109bd204 	addi	r2,r2,28488
   14fa0:	10800017 	ldw	r2,0(r2)
   14fa4:	10803c0c 	andi	r2,r2,240
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
   14fa8:	10803820 	cmpeqi	r2,r2,224
   14fac:	10001d1e 	bne	r2,zero,15024 <udp_input+0x57c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
   14fb0:	e0bffa17 	ldw	r2,-24(fp)
   14fb4:	10800003 	ldbu	r2,0(r2)
   14fb8:	10803fcc 	andi	r2,r2,255
   14fbc:	108003cc 	andi	r2,r2,15
   14fc0:	10800084 	addi	r2,r2,2
   14fc4:	1085883a 	add	r2,r2,r2
   14fc8:	1085883a 	add	r2,r2,r2
   14fcc:	10bfffcc 	andi	r2,r2,65535
   14fd0:	10a0001c 	xori	r2,r2,32768
   14fd4:	10a00004 	addi	r2,r2,-32768
   14fd8:	e13ffe17 	ldw	r4,-8(fp)
   14fdc:	100b883a 	mov	r5,r2
   14fe0:	000a2280 	call	a228 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
   14fe4:	e0bffe17 	ldw	r2,-8(fp)
   14fe8:	10c00117 	ldw	r3,4(r2)
   14fec:	e0bffa17 	ldw	r2,-24(fp)
   14ff0:	18800926 	beq	r3,r2,15018 <udp_input+0x570>
   14ff4:	010000f4 	movhi	r4,3
   14ff8:	21015b04 	addi	r4,r4,1388
   14ffc:	014000f4 	movhi	r5,3
   15000:	29416f04 	addi	r5,r5,1468
   15004:	018068c4 	movi	r6,419
   15008:	01c000f4 	movhi	r7,3
   1500c:	39c16a04 	addi	r7,r7,1448
   15010:	0017c440 	call	17c44 <printf>
   15014:	003fff06 	br	15014 <udp_input+0x56c>
        icmp_dest_unreach(p, ICMP_DUR_PORT);
   15018:	e13ffe17 	ldw	r4,-8(fp)
   1501c:	014000c4 	movi	r5,3
   15020:	00053540 	call	5354 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
   15024:	00800134 	movhi	r2,4
   15028:	10932304 	addi	r2,r2,19596
   1502c:	1080220b 	ldhu	r2,136(r2)
   15030:	10800044 	addi	r2,r2,1
   15034:	1007883a 	mov	r3,r2
   15038:	00800134 	movhi	r2,4
   1503c:	10932304 	addi	r2,r2,19596
   15040:	10c0220d 	sth	r3,136(r2)
      UDP_STATS_INC(udp.drop);
   15044:	00800134 	movhi	r2,4
   15048:	10932304 	addi	r2,r2,19596
   1504c:	10801f8b 	ldhu	r2,126(r2)
   15050:	10800044 	addi	r2,r2,1
   15054:	1007883a 	mov	r3,r2
   15058:	00800134 	movhi	r2,4
   1505c:	10932304 	addi	r2,r2,19596
   15060:	10c01f8d 	sth	r3,126(r2)
      snmp_inc_udpnoports();
      pbuf_free(p);
   15064:	e13ffe17 	ldw	r4,-8(fp)
   15068:	000a4200 	call	a420 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
   1506c:	00000206 	br	15078 <udp_input+0x5d0>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
   15070:	e13ffe17 	ldw	r4,-8(fp)
   15074:	000a4200 	call	a420 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
   15078:	e037883a 	mov	sp,fp
   1507c:	dfc00117 	ldw	ra,4(sp)
   15080:	df000017 	ldw	fp,0(sp)
   15084:	dec00204 	addi	sp,sp,8
   15088:	f800283a 	ret

0001508c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
   1508c:	defffc04 	addi	sp,sp,-16
   15090:	dfc00315 	stw	ra,12(sp)
   15094:	df000215 	stw	fp,8(sp)
   15098:	df000204 	addi	fp,sp,8
   1509c:	e13ffe15 	stw	r4,-8(fp)
   150a0:	e17fff15 	stw	r5,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
   150a4:	e0bffe17 	ldw	r2,-8(fp)
   150a8:	10c00104 	addi	r3,r2,4
   150ac:	e0bffe17 	ldw	r2,-8(fp)
   150b0:	1080050b 	ldhu	r2,20(r2)
   150b4:	10bfffcc 	andi	r2,r2,65535
   150b8:	e13ffe17 	ldw	r4,-8(fp)
   150bc:	e17fff17 	ldw	r5,-4(fp)
   150c0:	180d883a 	mov	r6,r3
   150c4:	100f883a 	mov	r7,r2
   150c8:	00150e00 	call	150e0 <udp_sendto>
}
   150cc:	e037883a 	mov	sp,fp
   150d0:	dfc00117 	ldw	ra,4(sp)
   150d4:	df000017 	ldw	fp,0(sp)
   150d8:	dec00204 	addi	sp,sp,8
   150dc:	f800283a 	ret

000150e0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
   150e0:	defff804 	addi	sp,sp,-32
   150e4:	dfc00715 	stw	ra,28(sp)
   150e8:	df000615 	stw	fp,24(sp)
   150ec:	df000604 	addi	fp,sp,24
   150f0:	e13ffc15 	stw	r4,-16(fp)
   150f4:	e17ffd15 	stw	r5,-12(fp)
   150f8:	e1bffe15 	stw	r6,-8(fp)
   150fc:	3805883a 	mov	r2,r7
   15100:	e0bfff0d 	sth	r2,-4(fp)

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(dst_ip);
   15104:	e13ffe17 	ldw	r4,-8(fp)
   15108:	0005c4c0 	call	5c4c <ip_route>
   1510c:	e0bffb15 	stw	r2,-20(fp)
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
   15110:	e0bffb17 	ldw	r2,-20(fp)
   15114:	10000a1e 	bne	r2,zero,15140 <udp_sendto+0x60>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
   15118:	00800134 	movhi	r2,4
   1511c:	10932304 	addi	r2,r2,19596
   15120:	1080218b 	ldhu	r2,134(r2)
   15124:	10800044 	addi	r2,r2,1
   15128:	1007883a 	mov	r3,r2
   1512c:	00800134 	movhi	r2,4
   15130:	10932304 	addi	r2,r2,19596
   15134:	10c0218d 	sth	r3,134(r2)
    return ERR_RTE;
   15138:	00bfff04 	movi	r2,-4
   1513c:	00000806 	br	15160 <udp_sendto+0x80>
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
   15140:	e0bfff0b 	ldhu	r2,-4(fp)
   15144:	e0fffb17 	ldw	r3,-20(fp)
   15148:	d8c00015 	stw	r3,0(sp)
   1514c:	e13ffc17 	ldw	r4,-16(fp)
   15150:	e17ffd17 	ldw	r5,-12(fp)
   15154:	e1bffe17 	ldw	r6,-8(fp)
   15158:	100f883a 	mov	r7,r2
   1515c:	00151740 	call	15174 <udp_sendto_if>
#endif /* LWIP_CHECKSUM_ON_COPY */
}
   15160:	e037883a 	mov	sp,fp
   15164:	dfc00117 	ldw	ra,4(sp)
   15168:	df000017 	ldw	fp,0(sp)
   1516c:	dec00204 	addi	sp,sp,8
   15170:	f800283a 	ret

00015174 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
   15174:	defff304 	addi	sp,sp,-52
   15178:	dfc00c15 	stw	ra,48(sp)
   1517c:	df000b15 	stw	fp,44(sp)
   15180:	df000b04 	addi	fp,sp,44
   15184:	e13ffc15 	stw	r4,-16(fp)
   15188:	e17ffd15 	stw	r5,-12(fp)
   1518c:	e1bffe15 	stw	r6,-8(fp)
   15190:	3805883a 	mov	r2,r7
   15194:	e0bfff0d 	sth	r2,-4(fp)
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
   15198:	e0bffc17 	ldw	r2,-16(fp)
   1519c:	1080048b 	ldhu	r2,18(r2)
   151a0:	10bfffcc 	andi	r2,r2,65535
   151a4:	10000d1e 	bne	r2,zero,151dc <udp_sendto_if+0x68>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
   151a8:	e0fffc17 	ldw	r3,-16(fp)
   151ac:	e0bffc17 	ldw	r2,-16(fp)
   151b0:	1080048b 	ldhu	r2,18(r2)
   151b4:	10bfffcc 	andi	r2,r2,65535
   151b8:	e13ffc17 	ldw	r4,-16(fp)
   151bc:	180b883a 	mov	r5,r3
   151c0:	100d883a 	mov	r6,r2
   151c4:	00154600 	call	15460 <udp_bind>
   151c8:	e0bffa85 	stb	r2,-22(fp)
    if (err != ERR_OK) {
   151cc:	e0bffa87 	ldb	r2,-22(fp)
   151d0:	10000226 	beq	r2,zero,151dc <udp_sendto_if+0x68>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
   151d4:	e0bffa83 	ldbu	r2,-22(fp)
   151d8:	00009c06 	br	1544c <udp_sendto_if+0x2d8>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
   151dc:	e13ffd17 	ldw	r4,-12(fp)
   151e0:	01400204 	movi	r5,8
   151e4:	000a2280 	call	a228 <pbuf_header>
   151e8:	10803fcc 	andi	r2,r2,255
   151ec:	10001126 	beq	r2,zero,15234 <udp_sendto_if+0xc0>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
   151f0:	01000044 	movi	r4,1
   151f4:	01400204 	movi	r5,8
   151f8:	000d883a 	mov	r6,zero
   151fc:	0009a600 	call	9a60 <pbuf_alloc>
   15200:	e0bff915 	stw	r2,-28(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
   15204:	e0bff917 	ldw	r2,-28(fp)
   15208:	1000021e 	bne	r2,zero,15214 <udp_sendto_if+0xa0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
   1520c:	00bfffc4 	movi	r2,-1
   15210:	00008e06 	br	1544c <udp_sendto_if+0x2d8>
    }
    if (p->tot_len != 0) {
   15214:	e0bffd17 	ldw	r2,-12(fp)
   15218:	1080020b 	ldhu	r2,8(r2)
   1521c:	10bfffcc 	andi	r2,r2,65535
   15220:	10000626 	beq	r2,zero,1523c <udp_sendto_if+0xc8>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
   15224:	e13ff917 	ldw	r4,-28(fp)
   15228:	e17ffd17 	ldw	r5,-12(fp)
   1522c:	000a7b80 	call	a7b8 <pbuf_chain>
   15230:	00000206 	br	1523c <udp_sendto_if+0xc8>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
   15234:	e0bffd17 	ldw	r2,-12(fp)
   15238:	e0bff915 	stw	r2,-28(fp)
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
   1523c:	e0bff917 	ldw	r2,-28(fp)
   15240:	1080028b 	ldhu	r2,10(r2)
   15244:	10bfffcc 	andi	r2,r2,65535
   15248:	10800228 	cmpgeui	r2,r2,8
   1524c:	1000091e 	bne	r2,zero,15274 <udp_sendto_if+0x100>
   15250:	010000f4 	movhi	r4,3
   15254:	21015b04 	addi	r4,r4,1388
   15258:	014000f4 	movhi	r5,3
   1525c:	29417404 	addi	r5,r5,1488
   15260:	01809884 	movi	r6,610
   15264:	01c000f4 	movhi	r7,3
   15268:	39c16a04 	addi	r7,r7,1448
   1526c:	0017c440 	call	17c44 <printf>
   15270:	003fff06 	br	15270 <udp_sendto_if+0xfc>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
   15274:	e0bff917 	ldw	r2,-28(fp)
   15278:	10800117 	ldw	r2,4(r2)
   1527c:	e0bffb15 	stw	r2,-20(fp)
  udphdr->src = htons(pcb->local_port);
   15280:	e0bffc17 	ldw	r2,-16(fp)
   15284:	1080048b 	ldhu	r2,18(r2)
   15288:	10bfffcc 	andi	r2,r2,65535
   1528c:	1004d23a 	srli	r2,r2,8
   15290:	1007883a 	mov	r3,r2
   15294:	e0bffc17 	ldw	r2,-16(fp)
   15298:	1080048b 	ldhu	r2,18(r2)
   1529c:	10bfffcc 	andi	r2,r2,65535
   152a0:	1004923a 	slli	r2,r2,8
   152a4:	1884b03a 	or	r2,r3,r2
   152a8:	1007883a 	mov	r3,r2
   152ac:	e0bffb17 	ldw	r2,-20(fp)
   152b0:	10c0000d 	sth	r3,0(r2)
  udphdr->dest = htons(dst_port);
   152b4:	e0bfff0b 	ldhu	r2,-4(fp)
   152b8:	1004d23a 	srli	r2,r2,8
   152bc:	1007883a 	mov	r3,r2
   152c0:	e0bfff0b 	ldhu	r2,-4(fp)
   152c4:	1004923a 	slli	r2,r2,8
   152c8:	1884b03a 	or	r2,r3,r2
   152cc:	1007883a 	mov	r3,r2
   152d0:	e0bffb17 	ldw	r2,-20(fp)
   152d4:	10c0008d 	sth	r3,2(r2)
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
   152d8:	e0bffb17 	ldw	r2,-20(fp)
   152dc:	1000018d 	sth	zero,6(r2)
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
   152e0:	e0bffc17 	ldw	r2,-16(fp)
   152e4:	10000326 	beq	r2,zero,152f4 <udp_sendto_if+0x180>
   152e8:	e0bffc17 	ldw	r2,-16(fp)
   152ec:	10800017 	ldw	r2,0(r2)
   152f0:	1000041e 	bne	r2,zero,15304 <udp_sendto_if+0x190>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
   152f4:	e0800217 	ldw	r2,8(fp)
   152f8:	10800104 	addi	r2,r2,4
   152fc:	e0bff815 	stw	r2,-32(fp)
   15300:	00000f06 	br	15340 <udp_sendto_if+0x1cc>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
   15304:	e0bffc17 	ldw	r2,-16(fp)
   15308:	10c00017 	ldw	r3,0(r2)
   1530c:	e0800217 	ldw	r2,8(fp)
   15310:	10800117 	ldw	r2,4(r2)
   15314:	18800826 	beq	r3,r2,15338 <udp_sendto_if+0x1c4>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
   15318:	e0fff917 	ldw	r3,-28(fp)
   1531c:	e0bffd17 	ldw	r2,-12(fp)
   15320:	18800326 	beq	r3,r2,15330 <udp_sendto_if+0x1bc>
        /* free the header pbuf */
        pbuf_free(q);
   15324:	e13ff917 	ldw	r4,-28(fp)
   15328:	000a4200 	call	a420 <pbuf_free>
        q = NULL;
   1532c:	e03ff915 	stw	zero,-28(fp)
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
   15330:	00bffe84 	movi	r2,-6
   15334:	00004506 	br	1544c <udp_sendto_if+0x2d8>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
   15338:	e0bffc17 	ldw	r2,-16(fp)
   1533c:	e0bff815 	stw	r2,-32(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
   15340:	e0bff917 	ldw	r2,-28(fp)
   15344:	1080020b 	ldhu	r2,8(r2)
   15348:	10bfffcc 	andi	r2,r2,65535
   1534c:	1004d23a 	srli	r2,r2,8
   15350:	1007883a 	mov	r3,r2
   15354:	e0bff917 	ldw	r2,-28(fp)
   15358:	1080020b 	ldhu	r2,8(r2)
   1535c:	10bfffcc 	andi	r2,r2,65535
   15360:	1004923a 	slli	r2,r2,8
   15364:	1884b03a 	or	r2,r3,r2
   15368:	1007883a 	mov	r3,r2
   1536c:	e0bffb17 	ldw	r2,-20(fp)
   15370:	10c0010d 	sth	r3,4(r2)
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
   15374:	e0bffc17 	ldw	r2,-16(fp)
   15378:	10800403 	ldbu	r2,16(r2)
   1537c:	10803fcc 	andi	r2,r2,255
   15380:	1080004c 	andi	r2,r2,1
   15384:	1000111e 	bne	r2,zero,153cc <udp_sendto_if+0x258>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
   15388:	e0bff917 	ldw	r2,-28(fp)
   1538c:	1080020b 	ldhu	r2,8(r2)
   15390:	10bfffcc 	andi	r2,r2,65535
   15394:	d8800015 	stw	r2,0(sp)
   15398:	e13ff917 	ldw	r4,-28(fp)
   1539c:	e17ff817 	ldw	r5,-32(fp)
   153a0:	e1bffe17 	ldw	r6,-8(fp)
   153a4:	01c00444 	movi	r7,17
   153a8:	00056a40 	call	56a4 <inet_chksum_pseudo>
   153ac:	e0bffa0d 	sth	r2,-24(fp)
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
   153b0:	e0bffa0b 	ldhu	r2,-24(fp)
   153b4:	1000021e 	bne	r2,zero,153c0 <udp_sendto_if+0x24c>
        udpchksum = 0xffff;
   153b8:	00bfffc4 	movi	r2,-1
   153bc:	e0bffa0d 	sth	r2,-24(fp)
      }
      udphdr->chksum = udpchksum;
   153c0:	e0bffb17 	ldw	r2,-20(fp)
   153c4:	e0fffa0b 	ldhu	r3,-24(fp)
   153c8:	10c0018d 	sth	r3,6(r2)
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
   153cc:	e0bffc17 	ldw	r2,-16(fp)
   153d0:	10800283 	ldbu	r2,10(r2)
   153d4:	10803fcc 	andi	r2,r2,255
   153d8:	e0fffc17 	ldw	r3,-16(fp)
   153dc:	18c00243 	ldbu	r3,9(r3)
   153e0:	18c03fcc 	andi	r3,r3,255
   153e4:	d8c00015 	stw	r3,0(sp)
   153e8:	00c00444 	movi	r3,17
   153ec:	d8c00115 	stw	r3,4(sp)
   153f0:	e0c00217 	ldw	r3,8(fp)
   153f4:	d8c00215 	stw	r3,8(sp)
   153f8:	e13ff917 	ldw	r4,-28(fp)
   153fc:	e17ff817 	ldw	r5,-32(fp)
   15400:	e1bffe17 	ldw	r6,-8(fp)
   15404:	100f883a 	mov	r7,r2
   15408:	00062400 	call	6240 <ip_output_if>
   1540c:	e0bffa85 	stb	r2,-22(fp)
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
   15410:	e0fff917 	ldw	r3,-28(fp)
   15414:	e0bffd17 	ldw	r2,-12(fp)
   15418:	18800326 	beq	r3,r2,15428 <udp_sendto_if+0x2b4>
    /* free the header pbuf */
    pbuf_free(q);
   1541c:	e13ff917 	ldw	r4,-28(fp)
   15420:	000a4200 	call	a420 <pbuf_free>
    q = NULL;
   15424:	e03ff915 	stw	zero,-28(fp)
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
   15428:	00800134 	movhi	r2,4
   1542c:	10932304 	addi	r2,r2,19596
   15430:	10801e0b 	ldhu	r2,120(r2)
   15434:	10800044 	addi	r2,r2,1
   15438:	1007883a 	mov	r3,r2
   1543c:	00800134 	movhi	r2,4
   15440:	10932304 	addi	r2,r2,19596
   15444:	10c01e0d 	sth	r3,120(r2)
  return err;
   15448:	e0bffa83 	ldbu	r2,-22(fp)
}
   1544c:	e037883a 	mov	sp,fp
   15450:	dfc00117 	ldw	ra,4(sp)
   15454:	df000017 	ldw	fp,0(sp)
   15458:	dec00204 	addi	sp,sp,8
   1545c:	f800283a 	ret

00015460 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
   15460:	defff904 	addi	sp,sp,-28
   15464:	dfc00615 	stw	ra,24(sp)
   15468:	df000515 	stw	fp,20(sp)
   1546c:	df000504 	addi	fp,sp,20
   15470:	e13ffd15 	stw	r4,-12(fp)
   15474:	e17ffe15 	stw	r5,-8(fp)
   15478:	3005883a 	mov	r2,r6
   1547c:	e0bfff0d 	sth	r2,-4(fp)

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
   15480:	e03ffc05 	stb	zero,-16(fp)
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   15484:	d0a8c517 	ldw	r2,-23788(gp)
   15488:	e0bffb15 	stw	r2,-20(fp)
   1548c:	00002a06 	br	15538 <udp_bind+0xd8>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
   15490:	e0fffd17 	ldw	r3,-12(fp)
   15494:	e0bffb17 	ldw	r2,-20(fp)
   15498:	18800e1e 	bne	r3,r2,154d4 <udp_bind+0x74>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
   1549c:	e0bffc03 	ldbu	r2,-16(fp)
   154a0:	10000926 	beq	r2,zero,154c8 <udp_bind+0x68>
   154a4:	010000f4 	movhi	r4,3
   154a8:	21015b04 	addi	r4,r4,1388
   154ac:	014000f4 	movhi	r5,3
   154b0:	29418004 	addi	r5,r5,1536
   154b4:	0180c344 	movi	r6,781
   154b8:	01c000f4 	movhi	r7,3
   154bc:	39c16a04 	addi	r7,r7,1448
   154c0:	0017c440 	call	17c44 <printf>
   154c4:	003fff06 	br	154c4 <udp_bind+0x64>
      /* pcb already in list, just rebind */
      rebind = 1;
   154c8:	00800044 	movi	r2,1
   154cc:	e0bffc05 	stb	r2,-16(fp)
   154d0:	00001606 	br	1552c <udp_bind+0xcc>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
   154d4:	e0bffb17 	ldw	r2,-20(fp)
   154d8:	1080048b 	ldhu	r2,18(r2)
   154dc:	10ffffcc 	andi	r3,r2,65535
   154e0:	e0bfff0b 	ldhu	r2,-4(fp)
   154e4:	1880111e 	bne	r3,r2,1552c <udp_bind+0xcc>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
   154e8:	e0bffb17 	ldw	r2,-20(fp)
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
   154ec:	10000d26 	beq	r2,zero,15524 <udp_bind+0xc4>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
   154f0:	e0bffb17 	ldw	r2,-20(fp)
   154f4:	10800017 	ldw	r2,0(r2)
   154f8:	10000a26 	beq	r2,zero,15524 <udp_bind+0xc4>
   154fc:	e0bffe17 	ldw	r2,-8(fp)
   15500:	10000826 	beq	r2,zero,15524 <udp_bind+0xc4>
           ip_addr_isany(ipaddr) ||
   15504:	e0bffe17 	ldw	r2,-8(fp)
   15508:	10800017 	ldw	r2,0(r2)
   1550c:	10000526 	beq	r2,zero,15524 <udp_bind+0xc4>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
   15510:	e0bffb17 	ldw	r2,-20(fp)
   15514:	10c00017 	ldw	r3,0(r2)
   15518:	e0bffe17 	ldw	r2,-8(fp)
   1551c:	10800017 	ldw	r2,0(r2)
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
   15520:	1880021e 	bne	r3,r2,1552c <udp_bind+0xcc>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
   15524:	00bffe04 	movi	r2,-8
   15528:	00002006 	br	155ac <udp_bind+0x14c>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   1552c:	e0bffb17 	ldw	r2,-20(fp)
   15530:	10800317 	ldw	r2,12(r2)
   15534:	e0bffb15 	stw	r2,-20(fp)
   15538:	e0bffb17 	ldw	r2,-20(fp)
   1553c:	103fd41e 	bne	r2,zero,15490 <udp_bind+0x30>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
   15540:	e0bffe17 	ldw	r2,-8(fp)
   15544:	10000326 	beq	r2,zero,15554 <udp_bind+0xf4>
   15548:	e0bffe17 	ldw	r2,-8(fp)
   1554c:	10800017 	ldw	r2,0(r2)
   15550:	00000106 	br	15558 <udp_bind+0xf8>
   15554:	0005883a 	mov	r2,zero
   15558:	e0fffd17 	ldw	r3,-12(fp)
   1555c:	18800015 	stw	r2,0(r3)

  /* no port specified? */
  if (port == 0) {
   15560:	e0bfff0b 	ldhu	r2,-4(fp)
   15564:	1000061e 	bne	r2,zero,15580 <udp_bind+0x120>
    port = udp_new_port();
   15568:	00149fc0 	call	149fc <udp_new_port>
   1556c:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
   15570:	e0bfff0b 	ldhu	r2,-4(fp)
   15574:	1000021e 	bne	r2,zero,15580 <udp_bind+0x120>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
   15578:	00bffe04 	movi	r2,-8
   1557c:	00000b06 	br	155ac <udp_bind+0x14c>
    }
  }
  pcb->local_port = port;
   15580:	e0bffd17 	ldw	r2,-12(fp)
   15584:	e0ffff0b 	ldhu	r3,-4(fp)
   15588:	10c0048d 	sth	r3,18(r2)
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
   1558c:	e0bffc03 	ldbu	r2,-16(fp)
   15590:	1000051e 	bne	r2,zero,155a8 <udp_bind+0x148>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
   15594:	d0e8c517 	ldw	r3,-23788(gp)
   15598:	e0bffd17 	ldw	r2,-12(fp)
   1559c:	10c00315 	stw	r3,12(r2)
    udp_pcbs = pcb;
   155a0:	e0bffd17 	ldw	r2,-12(fp)
   155a4:	d0a8c515 	stw	r2,-23788(gp)
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
   155a8:	0005883a 	mov	r2,zero
}
   155ac:	e037883a 	mov	sp,fp
   155b0:	dfc00117 	ldw	ra,4(sp)
   155b4:	df000017 	ldw	fp,0(sp)
   155b8:	dec00204 	addi	sp,sp,8
   155bc:	f800283a 	ret

000155c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
   155c0:	defff904 	addi	sp,sp,-28
   155c4:	dfc00615 	stw	ra,24(sp)
   155c8:	df000515 	stw	fp,20(sp)
   155cc:	df000504 	addi	fp,sp,20
   155d0:	e13ffd15 	stw	r4,-12(fp)
   155d4:	e17ffe15 	stw	r5,-8(fp)
   155d8:	3005883a 	mov	r2,r6
   155dc:	e0bfff0d 	sth	r2,-4(fp)
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
   155e0:	e0bffd17 	ldw	r2,-12(fp)
   155e4:	1080048b 	ldhu	r2,18(r2)
   155e8:	10bfffcc 	andi	r2,r2,65535
   155ec:	10000d1e 	bne	r2,zero,15624 <udp_connect+0x64>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
   155f0:	e0fffd17 	ldw	r3,-12(fp)
   155f4:	e0bffd17 	ldw	r2,-12(fp)
   155f8:	1080048b 	ldhu	r2,18(r2)
   155fc:	10bfffcc 	andi	r2,r2,65535
   15600:	e13ffd17 	ldw	r4,-12(fp)
   15604:	180b883a 	mov	r5,r3
   15608:	100d883a 	mov	r6,r2
   1560c:	00154600 	call	15460 <udp_bind>
   15610:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
   15614:	e0bffc07 	ldb	r2,-16(fp)
   15618:	10000226 	beq	r2,zero,15624 <udp_connect+0x64>
      return err;
   1561c:	e0bffc03 	ldbu	r2,-16(fp)
   15620:	00002406 	br	156b4 <udp_connect+0xf4>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
   15624:	e0bffe17 	ldw	r2,-8(fp)
   15628:	10000326 	beq	r2,zero,15638 <udp_connect+0x78>
   1562c:	e0bffe17 	ldw	r2,-8(fp)
   15630:	10800017 	ldw	r2,0(r2)
   15634:	00000106 	br	1563c <udp_connect+0x7c>
   15638:	0005883a 	mov	r2,zero
   1563c:	e0fffd17 	ldw	r3,-12(fp)
   15640:	18800115 	stw	r2,4(r3)
  pcb->remote_port = port;
   15644:	e0bffd17 	ldw	r2,-12(fp)
   15648:	e0ffff0b 	ldhu	r3,-4(fp)
   1564c:	10c0050d 	sth	r3,20(r2)
  pcb->flags |= UDP_FLAGS_CONNECTED;
   15650:	e0bffd17 	ldw	r2,-12(fp)
   15654:	10800403 	ldbu	r2,16(r2)
   15658:	10800114 	ori	r2,r2,4
   1565c:	1007883a 	mov	r3,r2
   15660:	e0bffd17 	ldw	r2,-12(fp)
   15664:	10c00405 	stb	r3,16(r2)
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   15668:	d0a8c517 	ldw	r2,-23788(gp)
   1566c:	e0bffb15 	stw	r2,-20(fp)
   15670:	00000806 	br	15694 <udp_connect+0xd4>
    if (pcb == ipcb) {
   15674:	e0fffd17 	ldw	r3,-12(fp)
   15678:	e0bffb17 	ldw	r2,-20(fp)
   1567c:	1880021e 	bne	r3,r2,15688 <udp_connect+0xc8>
      /* already on the list, just return */
      return ERR_OK;
   15680:	0005883a 	mov	r2,zero
   15684:	00000b06 	br	156b4 <udp_connect+0xf4>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
   15688:	e0bffb17 	ldw	r2,-20(fp)
   1568c:	10800317 	ldw	r2,12(r2)
   15690:	e0bffb15 	stw	r2,-20(fp)
   15694:	e0bffb17 	ldw	r2,-20(fp)
   15698:	103ff61e 	bne	r2,zero,15674 <udp_connect+0xb4>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
   1569c:	d0e8c517 	ldw	r3,-23788(gp)
   156a0:	e0bffd17 	ldw	r2,-12(fp)
   156a4:	10c00315 	stw	r3,12(r2)
  udp_pcbs = pcb;
   156a8:	e0bffd17 	ldw	r2,-12(fp)
   156ac:	d0a8c515 	stw	r2,-23788(gp)
  return ERR_OK;
   156b0:	0005883a 	mov	r2,zero
}
   156b4:	e037883a 	mov	sp,fp
   156b8:	dfc00117 	ldw	ra,4(sp)
   156bc:	df000017 	ldw	fp,0(sp)
   156c0:	dec00204 	addi	sp,sp,8
   156c4:	f800283a 	ret

000156c8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
   156c8:	defffe04 	addi	sp,sp,-8
   156cc:	df000115 	stw	fp,4(sp)
   156d0:	df000104 	addi	fp,sp,4
   156d4:	e13fff15 	stw	r4,-4(fp)
  /* reset remote address association */
  ip_addr_set_any(&pcb->remote_ip);
   156d8:	e0bfff17 	ldw	r2,-4(fp)
   156dc:	10000115 	stw	zero,4(r2)
  pcb->remote_port = 0;
   156e0:	e0bfff17 	ldw	r2,-4(fp)
   156e4:	1000050d 	sth	zero,20(r2)
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
   156e8:	e0bfff17 	ldw	r2,-4(fp)
   156ec:	10c00403 	ldbu	r3,16(r2)
   156f0:	00bffec4 	movi	r2,-5
   156f4:	1884703a 	and	r2,r3,r2
   156f8:	1007883a 	mov	r3,r2
   156fc:	e0bfff17 	ldw	r2,-4(fp)
   15700:	10c00405 	stb	r3,16(r2)
}
   15704:	e037883a 	mov	sp,fp
   15708:	df000017 	ldw	fp,0(sp)
   1570c:	dec00104 	addi	sp,sp,4
   15710:	f800283a 	ret

00015714 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
   15714:	defffc04 	addi	sp,sp,-16
   15718:	df000315 	stw	fp,12(sp)
   1571c:	df000304 	addi	fp,sp,12
   15720:	e13ffd15 	stw	r4,-12(fp)
   15724:	e17ffe15 	stw	r5,-8(fp)
   15728:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
   1572c:	e0bffd17 	ldw	r2,-12(fp)
   15730:	e0fffe17 	ldw	r3,-8(fp)
   15734:	10c00615 	stw	r3,24(r2)
  pcb->recv_arg = recv_arg;
   15738:	e0bffd17 	ldw	r2,-12(fp)
   1573c:	e0ffff17 	ldw	r3,-4(fp)
   15740:	10c00715 	stw	r3,28(r2)
}
   15744:	e037883a 	mov	sp,fp
   15748:	df000017 	ldw	fp,0(sp)
   1574c:	dec00104 	addi	sp,sp,4
   15750:	f800283a 	ret

00015754 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
   15754:	defffc04 	addi	sp,sp,-16
   15758:	dfc00315 	stw	ra,12(sp)
   1575c:	df000215 	stw	fp,8(sp)
   15760:	df000204 	addi	fp,sp,8
   15764:	e13fff15 	stw	r4,-4(fp)
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
   15768:	d0e8c517 	ldw	r3,-23788(gp)
   1576c:	e0bfff17 	ldw	r2,-4(fp)
   15770:	1880041e 	bne	r3,r2,15784 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
   15774:	d0a8c517 	ldw	r2,-23788(gp)
   15778:	10800317 	ldw	r2,12(r2)
   1577c:	d0a8c515 	stw	r2,-23788(gp)
   15780:	00001306 	br	157d0 <udp_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   15784:	d0a8c517 	ldw	r2,-23788(gp)
   15788:	e0bffe15 	stw	r2,-8(fp)
   1578c:	00000e06 	br	157c8 <udp_remove+0x74>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
   15790:	e0bffe17 	ldw	r2,-8(fp)
   15794:	10800317 	ldw	r2,12(r2)
   15798:	10000826 	beq	r2,zero,157bc <udp_remove+0x68>
   1579c:	e0bffe17 	ldw	r2,-8(fp)
   157a0:	10c00317 	ldw	r3,12(r2)
   157a4:	e0bfff17 	ldw	r2,-4(fp)
   157a8:	1880041e 	bne	r3,r2,157bc <udp_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
   157ac:	e0bfff17 	ldw	r2,-4(fp)
   157b0:	10c00317 	ldw	r3,12(r2)
   157b4:	e0bffe17 	ldw	r2,-8(fp)
   157b8:	10c00315 	stw	r3,12(r2)
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
   157bc:	e0bffe17 	ldw	r2,-8(fp)
   157c0:	10800317 	ldw	r2,12(r2)
   157c4:	e0bffe15 	stw	r2,-8(fp)
   157c8:	e0bffe17 	ldw	r2,-8(fp)
   157cc:	103ff01e 	bne	r2,zero,15790 <udp_remove+0x3c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
   157d0:	01000044 	movi	r4,1
   157d4:	e17fff17 	ldw	r5,-4(fp)
   157d8:	00091c00 	call	91c0 <memp_free>
}
   157dc:	e037883a 	mov	sp,fp
   157e0:	dfc00117 	ldw	ra,4(sp)
   157e4:	df000017 	ldw	fp,0(sp)
   157e8:	dec00204 	addi	sp,sp,8
   157ec:	f800283a 	ret

000157f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
   157f0:	defffd04 	addi	sp,sp,-12
   157f4:	dfc00215 	stw	ra,8(sp)
   157f8:	df000115 	stw	fp,4(sp)
   157fc:	df000104 	addi	fp,sp,4
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
   15800:	01000044 	movi	r4,1
   15804:	0008fe40 	call	8fe4 <memp_malloc>
   15808:	e0bfff15 	stw	r2,-4(fp)
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
   1580c:	e0bfff17 	ldw	r2,-4(fp)
   15810:	10000726 	beq	r2,zero,15830 <udp_new+0x40>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
   15814:	e13fff17 	ldw	r4,-4(fp)
   15818:	000b883a 	mov	r5,zero
   1581c:	01800804 	movi	r6,32
   15820:	0017b3c0 	call	17b3c <memset>
    pcb->ttl = UDP_TTL;
   15824:	e0bfff17 	ldw	r2,-4(fp)
   15828:	00ffffc4 	movi	r3,-1
   1582c:	10c00285 	stb	r3,10(r2)
  }
  return pcb;
   15830:	e0bfff17 	ldw	r2,-4(fp)
}
   15834:	e037883a 	mov	sp,fp
   15838:	dfc00117 	ldw	ra,4(sp)
   1583c:	df000017 	ldw	fp,0(sp)
   15840:	dec00204 	addi	sp,sp,8
   15844:	f800283a 	ret

00015848 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
   15848:	defffc04 	addi	sp,sp,-16
   1584c:	dfc00315 	stw	ra,12(sp)
   15850:	df000215 	stw	fp,8(sp)
   15854:	df000204 	addi	fp,sp,8
   15858:	e13fff15 	stw	r4,-4(fp)
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	1000091e 	bne	r2,zero,15888 <free_etharp_q+0x40>
   15864:	010000f4 	movhi	r4,3
   15868:	21018304 	addi	r4,r4,1548
   1586c:	014000f4 	movhi	r5,3
   15870:	29418d04 	addi	r5,r5,1588
   15874:	01802784 	movi	r6,158
   15878:	01c000f4 	movhi	r7,3
   1587c:	39c19004 	addi	r7,r7,1600
   15880:	0017c440 	call	17c44 <printf>
   15884:	003fff06 	br	15884 <free_etharp_q+0x3c>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
   15888:	e0bfff17 	ldw	r2,-4(fp)
   1588c:	10800117 	ldw	r2,4(r2)
   15890:	1000211e 	bne	r2,zero,15918 <free_etharp_q+0xd0>
   15894:	010000f4 	movhi	r4,3
   15898:	21018304 	addi	r4,r4,1548
   1589c:	014000f4 	movhi	r5,3
   158a0:	29419604 	addi	r5,r5,1624
   158a4:	018027c4 	movi	r6,159
   158a8:	01c000f4 	movhi	r7,3
   158ac:	39c19004 	addi	r7,r7,1600
   158b0:	0017c440 	call	17c44 <printf>
   158b4:	003fff06 	br	158b4 <free_etharp_q+0x6c>
  while (q) {
    r = q;
   158b8:	e0bfff17 	ldw	r2,-4(fp)
   158bc:	e0bffe15 	stw	r2,-8(fp)
    q = q->next;
   158c0:	e0bfff17 	ldw	r2,-4(fp)
   158c4:	10800017 	ldw	r2,0(r2)
   158c8:	e0bfff15 	stw	r2,-4(fp)
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
   158cc:	e0bffe17 	ldw	r2,-8(fp)
   158d0:	10800117 	ldw	r2,4(r2)
   158d4:	1000091e 	bne	r2,zero,158fc <free_etharp_q+0xb4>
   158d8:	010000f4 	movhi	r4,3
   158dc:	21018304 	addi	r4,r4,1548
   158e0:	014000f4 	movhi	r5,3
   158e4:	29419a04 	addi	r5,r5,1640
   158e8:	018028c4 	movi	r6,163
   158ec:	01c000f4 	movhi	r7,3
   158f0:	39c19004 	addi	r7,r7,1600
   158f4:	0017c440 	call	17c44 <printf>
   158f8:	003fff06 	br	158f8 <free_etharp_q+0xb0>
    pbuf_free(r->p);
   158fc:	e0bffe17 	ldw	r2,-8(fp)
   15900:	10800117 	ldw	r2,4(r2)
   15904:	1009883a 	mov	r4,r2
   15908:	000a4200 	call	a420 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
   1590c:	01000184 	movi	r4,6
   15910:	e17ffe17 	ldw	r5,-8(fp)
   15914:	00091c00 	call	91c0 <memp_free>
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
   15918:	e0bfff17 	ldw	r2,-4(fp)
   1591c:	103fe61e 	bne	r2,zero,158b8 <free_etharp_q+0x70>
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
    memp_free(MEMP_ARP_QUEUE, r);
  }
}
   15920:	e037883a 	mov	sp,fp
   15924:	dfc00117 	ldw	ra,4(sp)
   15928:	df000017 	ldw	fp,0(sp)
   1592c:	dec00204 	addi	sp,sp,8
   15930:	f800283a 	ret

00015934 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
   15934:	defffd04 	addi	sp,sp,-12
   15938:	dfc00215 	stw	ra,8(sp)
   1593c:	df000115 	stw	fp,4(sp)
   15940:	df000104 	addi	fp,sp,4
   15944:	e13fff15 	stw	r4,-4(fp)
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
   15948:	00c00134 	movhi	r3,4
   1594c:	18d0ff04 	addi	r3,r3,17404
   15950:	e0bfff17 	ldw	r2,-4(fp)
   15954:	10800524 	muli	r2,r2,20
   15958:	1885883a 	add	r2,r3,r2
   1595c:	10800017 	ldw	r2,0(r2)
   15960:	10000e26 	beq	r2,zero,1599c <etharp_free_entry+0x68>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
   15964:	00c00134 	movhi	r3,4
   15968:	18d0ff04 	addi	r3,r3,17404
   1596c:	e0bfff17 	ldw	r2,-4(fp)
   15970:	10800524 	muli	r2,r2,20
   15974:	1885883a 	add	r2,r3,r2
   15978:	10800017 	ldw	r2,0(r2)
   1597c:	1009883a 	mov	r4,r2
   15980:	00158480 	call	15848 <free_etharp_q>
    arp_table[i].q = NULL;
   15984:	00c00134 	movhi	r3,4
   15988:	18d0ff04 	addi	r3,r3,17404
   1598c:	e0bfff17 	ldw	r2,-4(fp)
   15990:	10800524 	muli	r2,r2,20
   15994:	1885883a 	add	r2,r3,r2
   15998:	10000015 	stw	zero,0(r2)
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
   1599c:	00c00134 	movhi	r3,4
   159a0:	18d0ff04 	addi	r3,r3,17404
   159a4:	e0bfff17 	ldw	r2,-4(fp)
   159a8:	10800524 	muli	r2,r2,20
   159ac:	1885883a 	add	r2,r3,r2
   159b0:	10800404 	addi	r2,r2,16
   159b4:	10000085 	stb	zero,2(r2)
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
   159b8:	e037883a 	mov	sp,fp
   159bc:	dfc00117 	ldw	ra,4(sp)
   159c0:	df000017 	ldw	fp,0(sp)
   159c4:	dec00204 	addi	sp,sp,8
   159c8:	f800283a 	ret

000159cc <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
   159cc:	defffd04 	addi	sp,sp,-12
   159d0:	dfc00215 	stw	ra,8(sp)
   159d4:	df000115 	stw	fp,4(sp)
   159d8:	df000104 	addi	fp,sp,4
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   159dc:	e03fff05 	stb	zero,-4(fp)
   159e0:	00004f06 	br	15b20 <etharp_tmr+0x154>
    u8_t state = arp_table[i].state;
   159e4:	e0bfff03 	ldbu	r2,-4(fp)
   159e8:	00c00134 	movhi	r3,4
   159ec:	18d0ff04 	addi	r3,r3,17404
   159f0:	10800524 	muli	r2,r2,20
   159f4:	1885883a 	add	r2,r3,r2
   159f8:	10800404 	addi	r2,r2,16
   159fc:	10800083 	ldbu	r2,2(r2)
   15a00:	e0bfff45 	stb	r2,-3(fp)
    if (state != ETHARP_STATE_EMPTY
   15a04:	e0bfff43 	ldbu	r2,-3(fp)
   15a08:	10004226 	beq	r2,zero,15b14 <etharp_tmr+0x148>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
   15a0c:	e0bfff03 	ldbu	r2,-4(fp)
   15a10:	01000134 	movhi	r4,4
   15a14:	2110ff04 	addi	r4,r4,17404
   15a18:	10c00524 	muli	r3,r2,20
   15a1c:	20c7883a 	add	r3,r4,r3
   15a20:	18c00404 	addi	r3,r3,16
   15a24:	18c000c3 	ldbu	r3,3(r3)
   15a28:	18c00044 	addi	r3,r3,1
   15a2c:	01000134 	movhi	r4,4
   15a30:	2110ff04 	addi	r4,r4,17404
   15a34:	10800524 	muli	r2,r2,20
   15a38:	2085883a 	add	r2,r4,r2
   15a3c:	10800404 	addi	r2,r2,16
   15a40:	10c000c5 	stb	r3,3(r2)
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
   15a44:	e0bfff03 	ldbu	r2,-4(fp)
   15a48:	00c00134 	movhi	r3,4
   15a4c:	18d0ff04 	addi	r3,r3,17404
   15a50:	10800524 	muli	r2,r2,20
   15a54:	1885883a 	add	r2,r3,r2
   15a58:	10800404 	addi	r2,r2,16
   15a5c:	108000c3 	ldbu	r2,3(r2)
   15a60:	10803fcc 	andi	r2,r2,255
   15a64:	10803c28 	cmpgeui	r2,r2,240
   15a68:	1000141e 	bne	r2,zero,15abc <etharp_tmr+0xf0>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
   15a6c:	e0bfff03 	ldbu	r2,-4(fp)
   15a70:	00c00134 	movhi	r3,4
   15a74:	18d0ff04 	addi	r3,r3,17404
   15a78:	10800524 	muli	r2,r2,20
   15a7c:	1885883a 	add	r2,r3,r2
   15a80:	10800404 	addi	r2,r2,16
   15a84:	10800083 	ldbu	r2,2(r2)
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
   15a88:	10803fcc 	andi	r2,r2,255
   15a8c:	10800058 	cmpnei	r2,r2,1
   15a90:	10000e1e 	bne	r2,zero,15acc <etharp_tmr+0x100>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
   15a94:	e0bfff03 	ldbu	r2,-4(fp)
   15a98:	00c00134 	movhi	r3,4
   15a9c:	18d0ff04 	addi	r3,r3,17404
   15aa0:	10800524 	muli	r2,r2,20
   15aa4:	1885883a 	add	r2,r3,r2
   15aa8:	10800404 	addi	r2,r2,16
   15aac:	108000c3 	ldbu	r2,3(r2)
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
   15ab0:	10803fcc 	andi	r2,r2,255
   15ab4:	108000b0 	cmpltui	r2,r2,2
   15ab8:	1000041e 	bne	r2,zero,15acc <etharp_tmr+0x100>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
   15abc:	e0bfff03 	ldbu	r2,-4(fp)
   15ac0:	1009883a 	mov	r4,r2
   15ac4:	00159340 	call	15934 <etharp_free_entry>
   15ac8:	00001206 	br	15b14 <etharp_tmr+0x148>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
   15acc:	e0bfff03 	ldbu	r2,-4(fp)
   15ad0:	00c00134 	movhi	r3,4
   15ad4:	18d0ff04 	addi	r3,r3,17404
   15ad8:	10800524 	muli	r2,r2,20
   15adc:	1885883a 	add	r2,r3,r2
   15ae0:	10800404 	addi	r2,r2,16
   15ae4:	10800083 	ldbu	r2,2(r2)
   15ae8:	10803fcc 	andi	r2,r2,255
   15aec:	108000d8 	cmpnei	r2,r2,3
   15af0:	1000081e 	bne	r2,zero,15b14 <etharp_tmr+0x148>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
   15af4:	e0bfff03 	ldbu	r2,-4(fp)
   15af8:	00c00134 	movhi	r3,4
   15afc:	18d0ff04 	addi	r3,r3,17404
   15b00:	10800524 	muli	r2,r2,20
   15b04:	1885883a 	add	r2,r3,r2
   15b08:	10800404 	addi	r2,r2,16
   15b0c:	00c00084 	movi	r3,2
   15b10:	10c00085 	stb	r3,2(r2)
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b14:	e0bfff03 	ldbu	r2,-4(fp)
   15b18:	10800044 	addi	r2,r2,1
   15b1c:	e0bfff05 	stb	r2,-4(fp)
   15b20:	e0bfff03 	ldbu	r2,-4(fp)
   15b24:	108002b0 	cmpltui	r2,r2,10
   15b28:	103fae1e 	bne	r2,zero,159e4 <etharp_tmr+0x18>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
   15b2c:	e037883a 	mov	sp,fp
   15b30:	dfc00117 	ldw	ra,4(sp)
   15b34:	df000017 	ldw	fp,0(sp)
   15b38:	dec00204 	addi	sp,sp,8
   15b3c:	f800283a 	ret

00015b40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
   15b40:	defff904 	addi	sp,sp,-28
   15b44:	dfc00615 	stw	ra,24(sp)
   15b48:	df000515 	stw	fp,20(sp)
   15b4c:	df000504 	addi	fp,sp,20
   15b50:	e13ffe15 	stw	r4,-8(fp)
   15b54:	2805883a 	mov	r2,r5
   15b58:	e0bfff05 	stb	r2,-4(fp)
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
   15b5c:	00800284 	movi	r2,10
   15b60:	e0bffb05 	stb	r2,-20(fp)
   15b64:	00800284 	movi	r2,10
   15b68:	e0bffb45 	stb	r2,-19(fp)
  s8_t empty = ARP_TABLE_SIZE;
   15b6c:	00800284 	movi	r2,10
   15b70:	e0bffb85 	stb	r2,-18(fp)
  u8_t i = 0, age_pending = 0, age_stable = 0;
   15b74:	e03ffbc5 	stb	zero,-17(fp)
   15b78:	e03ffc05 	stb	zero,-16(fp)
   15b7c:	e03ffc45 	stb	zero,-15(fp)
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
   15b80:	00800284 	movi	r2,10
   15b84:	e0bffc85 	stb	r2,-14(fp)
  /* its age */
  u8_t age_queue = 0;
   15b88:	e03ffcc5 	stb	zero,-13(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15b8c:	e03ffbc5 	stb	zero,-17(fp)
   15b90:	00007d06 	br	15d88 <etharp_find_entry+0x248>
    u8_t state = arp_table[i].state;
   15b94:	e0bffbc3 	ldbu	r2,-17(fp)
   15b98:	00c00134 	movhi	r3,4
   15b9c:	18d0ff04 	addi	r3,r3,17404
   15ba0:	10800524 	muli	r2,r2,20
   15ba4:	1885883a 	add	r2,r3,r2
   15ba8:	10800404 	addi	r2,r2,16
   15bac:	10800083 	ldbu	r2,2(r2)
   15bb0:	e0bffd05 	stb	r2,-12(fp)
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
   15bb4:	e0bffb87 	ldb	r2,-18(fp)
   15bb8:	10800298 	cmpnei	r2,r2,10
   15bbc:	1000051e 	bne	r2,zero,15bd4 <etharp_find_entry+0x94>
   15bc0:	e0bffd03 	ldbu	r2,-12(fp)
   15bc4:	1000031e 	bne	r2,zero,15bd4 <etharp_find_entry+0x94>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
   15bc8:	e0bffbc3 	ldbu	r2,-17(fp)
   15bcc:	e0bffb85 	stb	r2,-18(fp)
   15bd0:	00006a06 	br	15d7c <etharp_find_entry+0x23c>
    } else if (state != ETHARP_STATE_EMPTY) {
   15bd4:	e0bffd03 	ldbu	r2,-12(fp)
   15bd8:	10006826 	beq	r2,zero,15d7c <etharp_find_entry+0x23c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
   15bdc:	e0bffd03 	ldbu	r2,-12(fp)
   15be0:	10800060 	cmpeqi	r2,r2,1
   15be4:	10000c1e 	bne	r2,zero,15c18 <etharp_find_entry+0xd8>
   15be8:	e0bffd03 	ldbu	r2,-12(fp)
   15bec:	108000a8 	cmpgeui	r2,r2,2
   15bf0:	1000091e 	bne	r2,zero,15c18 <etharp_find_entry+0xd8>
   15bf4:	010000f4 	movhi	r4,3
   15bf8:	21018304 	addi	r4,r4,1548
   15bfc:	014000f4 	movhi	r5,3
   15c00:	29419e04 	addi	r5,r5,1656
   15c04:	01804b04 	movi	r6,300
   15c08:	01c000f4 	movhi	r7,3
   15c0c:	39c19004 	addi	r7,r7,1600
   15c10:	0017c440 	call	17c44 <printf>
   15c14:	003fff06 	br	15c14 <etharp_find_entry+0xd4>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
   15c18:	e0bffe17 	ldw	r2,-8(fp)
   15c1c:	10000c26 	beq	r2,zero,15c50 <etharp_find_entry+0x110>
   15c20:	e0bffe17 	ldw	r2,-8(fp)
   15c24:	10c00017 	ldw	r3,0(r2)
   15c28:	e0bffbc3 	ldbu	r2,-17(fp)
   15c2c:	01000134 	movhi	r4,4
   15c30:	2110ff04 	addi	r4,r4,17404
   15c34:	10800524 	muli	r2,r2,20
   15c38:	2085883a 	add	r2,r4,r2
   15c3c:	10800104 	addi	r2,r2,4
   15c40:	10800017 	ldw	r2,0(r2)
   15c44:	1880021e 	bne	r3,r2,15c50 <etharp_find_entry+0x110>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
   15c48:	e0bffbc3 	ldbu	r2,-17(fp)
   15c4c:	0000c506 	br	15f64 <etharp_find_entry+0x424>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
   15c50:	e0bffd03 	ldbu	r2,-12(fp)
   15c54:	10800058 	cmpnei	r2,r2,1
   15c58:	1000311e 	bne	r2,zero,15d20 <etharp_find_entry+0x1e0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
   15c5c:	e0bffbc3 	ldbu	r2,-17(fp)
   15c60:	00c00134 	movhi	r3,4
   15c64:	18d0ff04 	addi	r3,r3,17404
   15c68:	10800524 	muli	r2,r2,20
   15c6c:	1885883a 	add	r2,r3,r2
   15c70:	10800017 	ldw	r2,0(r2)
   15c74:	10001526 	beq	r2,zero,15ccc <etharp_find_entry+0x18c>
          if (arp_table[i].ctime >= age_queue) {
   15c78:	e0bffbc3 	ldbu	r2,-17(fp)
   15c7c:	00c00134 	movhi	r3,4
   15c80:	18d0ff04 	addi	r3,r3,17404
   15c84:	10800524 	muli	r2,r2,20
   15c88:	1885883a 	add	r2,r3,r2
   15c8c:	10800404 	addi	r2,r2,16
   15c90:	108000c3 	ldbu	r2,3(r2)
   15c94:	10c03fcc 	andi	r3,r2,255
   15c98:	e0bffcc3 	ldbu	r2,-13(fp)
   15c9c:	18803736 	bltu	r3,r2,15d7c <etharp_find_entry+0x23c>
            old_queue = i;
   15ca0:	e0bffbc3 	ldbu	r2,-17(fp)
   15ca4:	e0bffc85 	stb	r2,-14(fp)
            age_queue = arp_table[i].ctime;
   15ca8:	e0bffbc3 	ldbu	r2,-17(fp)
   15cac:	00c00134 	movhi	r3,4
   15cb0:	18d0ff04 	addi	r3,r3,17404
   15cb4:	10800524 	muli	r2,r2,20
   15cb8:	1885883a 	add	r2,r3,r2
   15cbc:	10800404 	addi	r2,r2,16
   15cc0:	108000c3 	ldbu	r2,3(r2)
   15cc4:	e0bffcc5 	stb	r2,-13(fp)
   15cc8:	00002c06 	br	15d7c <etharp_find_entry+0x23c>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
   15ccc:	e0bffbc3 	ldbu	r2,-17(fp)
   15cd0:	00c00134 	movhi	r3,4
   15cd4:	18d0ff04 	addi	r3,r3,17404
   15cd8:	10800524 	muli	r2,r2,20
   15cdc:	1885883a 	add	r2,r3,r2
   15ce0:	10800404 	addi	r2,r2,16
   15ce4:	108000c3 	ldbu	r2,3(r2)
   15ce8:	10c03fcc 	andi	r3,r2,255
   15cec:	e0bffc03 	ldbu	r2,-16(fp)
   15cf0:	18802236 	bltu	r3,r2,15d7c <etharp_find_entry+0x23c>
            old_pending = i;
   15cf4:	e0bffbc3 	ldbu	r2,-17(fp)
   15cf8:	e0bffb05 	stb	r2,-20(fp)
            age_pending = arp_table[i].ctime;
   15cfc:	e0bffbc3 	ldbu	r2,-17(fp)
   15d00:	00c00134 	movhi	r3,4
   15d04:	18d0ff04 	addi	r3,r3,17404
   15d08:	10800524 	muli	r2,r2,20
   15d0c:	1885883a 	add	r2,r3,r2
   15d10:	10800404 	addi	r2,r2,16
   15d14:	108000c3 	ldbu	r2,3(r2)
   15d18:	e0bffc05 	stb	r2,-16(fp)
   15d1c:	00001706 	br	15d7c <etharp_find_entry+0x23c>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
   15d20:	e0bffd03 	ldbu	r2,-12(fp)
   15d24:	108000b0 	cmpltui	r2,r2,2
   15d28:	1000141e 	bne	r2,zero,15d7c <etharp_find_entry+0x23c>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
   15d2c:	e0bffbc3 	ldbu	r2,-17(fp)
   15d30:	00c00134 	movhi	r3,4
   15d34:	18d0ff04 	addi	r3,r3,17404
   15d38:	10800524 	muli	r2,r2,20
   15d3c:	1885883a 	add	r2,r3,r2
   15d40:	10800404 	addi	r2,r2,16
   15d44:	108000c3 	ldbu	r2,3(r2)
   15d48:	10c03fcc 	andi	r3,r2,255
   15d4c:	e0bffc43 	ldbu	r2,-15(fp)
   15d50:	18800a36 	bltu	r3,r2,15d7c <etharp_find_entry+0x23c>
            old_stable = i;
   15d54:	e0bffbc3 	ldbu	r2,-17(fp)
   15d58:	e0bffb45 	stb	r2,-19(fp)
            age_stable = arp_table[i].ctime;
   15d5c:	e0bffbc3 	ldbu	r2,-17(fp)
   15d60:	00c00134 	movhi	r3,4
   15d64:	18d0ff04 	addi	r3,r3,17404
   15d68:	10800524 	muli	r2,r2,20
   15d6c:	1885883a 	add	r2,r3,r2
   15d70:	10800404 	addi	r2,r2,16
   15d74:	108000c3 	ldbu	r2,3(r2)
   15d78:	e0bffc45 	stb	r2,-15(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   15d7c:	e0bffbc3 	ldbu	r2,-17(fp)
   15d80:	10800044 	addi	r2,r2,1
   15d84:	e0bffbc5 	stb	r2,-17(fp)
   15d88:	e0bffbc3 	ldbu	r2,-17(fp)
   15d8c:	108002b0 	cmpltui	r2,r2,10
   15d90:	103f801e 	bne	r2,zero,15b94 <etharp_find_entry+0x54>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
   15d94:	e0bfff03 	ldbu	r2,-4(fp)
   15d98:	1080008c 	andi	r2,r2,2
   15d9c:	1000061e 	bne	r2,zero,15db8 <etharp_find_entry+0x278>
   15da0:	e0bffb87 	ldb	r2,-18(fp)
   15da4:	10800298 	cmpnei	r2,r2,10
   15da8:	1000051e 	bne	r2,zero,15dc0 <etharp_find_entry+0x280>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
   15dac:	e0bfff03 	ldbu	r2,-4(fp)
   15db0:	1080004c 	andi	r2,r2,1
   15db4:	1000021e 	bne	r2,zero,15dc0 <etharp_find_entry+0x280>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
   15db8:	00bfffc4 	movi	r2,-1
   15dbc:	00006906 	br	15f64 <etharp_find_entry+0x424>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
   15dc0:	e0bffb87 	ldb	r2,-18(fp)
   15dc4:	10800288 	cmpgei	r2,r2,10
   15dc8:	1000031e 	bne	r2,zero,15dd8 <etharp_find_entry+0x298>
    i = empty;
   15dcc:	e0bffb83 	ldbu	r2,-18(fp)
   15dd0:	e0bffbc5 	stb	r2,-17(fp)
   15dd4:	00003206 	br	15ea0 <etharp_find_entry+0x360>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
   15dd8:	e0bffb47 	ldb	r2,-19(fp)
   15ddc:	10800288 	cmpgei	r2,r2,10
   15de0:	1000121e 	bne	r2,zero,15e2c <etharp_find_entry+0x2ec>
      /* recycle oldest stable*/
      i = old_stable;
   15de4:	e0bffb43 	ldbu	r2,-19(fp)
   15de8:	e0bffbc5 	stb	r2,-17(fp)
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
   15dec:	e0bffbc3 	ldbu	r2,-17(fp)
   15df0:	00c00134 	movhi	r3,4
   15df4:	18d0ff04 	addi	r3,r3,17404
   15df8:	10800524 	muli	r2,r2,20
   15dfc:	1885883a 	add	r2,r3,r2
   15e00:	10800017 	ldw	r2,0(r2)
   15e04:	10001726 	beq	r2,zero,15e64 <etharp_find_entry+0x324>
   15e08:	010000f4 	movhi	r4,3
   15e0c:	21018304 	addi	r4,r4,1548
   15e10:	014000f4 	movhi	r5,3
   15e14:	2941ae04 	addi	r5,r5,1720
   15e18:	01805c44 	movi	r6,369
   15e1c:	01c000f4 	movhi	r7,3
   15e20:	39c19004 	addi	r7,r7,1600
   15e24:	0017c440 	call	17c44 <printf>
   15e28:	003fff06 	br	15e28 <etharp_find_entry+0x2e8>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
   15e2c:	e0bffb07 	ldb	r2,-20(fp)
   15e30:	10800288 	cmpgei	r2,r2,10
   15e34:	1000031e 	bne	r2,zero,15e44 <etharp_find_entry+0x304>
      /* recycle oldest pending */
      i = old_pending;
   15e38:	e0bffb03 	ldbu	r2,-20(fp)
   15e3c:	e0bffbc5 	stb	r2,-17(fp)
   15e40:	00000806 	br	15e64 <etharp_find_entry+0x324>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
   15e44:	e0bffc87 	ldb	r2,-14(fp)
   15e48:	10800288 	cmpgei	r2,r2,10
   15e4c:	1000031e 	bne	r2,zero,15e5c <etharp_find_entry+0x31c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
   15e50:	e0bffc83 	ldbu	r2,-14(fp)
   15e54:	e0bffbc5 	stb	r2,-17(fp)
   15e58:	00000206 	br	15e64 <etharp_find_entry+0x324>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
   15e5c:	00bfffc4 	movi	r2,-1
   15e60:	00004006 	br	15f64 <etharp_find_entry+0x424>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   15e64:	e0bffbc3 	ldbu	r2,-17(fp)
   15e68:	108002b0 	cmpltui	r2,r2,10
   15e6c:	1000091e 	bne	r2,zero,15e94 <etharp_find_entry+0x354>
   15e70:	010000f4 	movhi	r4,3
   15e74:	21018304 	addi	r4,r4,1548
   15e78:	014000f4 	movhi	r5,3
   15e7c:	2941b404 	addi	r5,r5,1744
   15e80:	018060c4 	movi	r6,387
   15e84:	01c000f4 	movhi	r7,3
   15e88:	39c19004 	addi	r7,r7,1600
   15e8c:	0017c440 	call	17c44 <printf>
   15e90:	003fff06 	br	15e90 <etharp_find_entry+0x350>
    etharp_free_entry(i);
   15e94:	e0bffbc3 	ldbu	r2,-17(fp)
   15e98:	1009883a 	mov	r4,r2
   15e9c:	00159340 	call	15934 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
   15ea0:	e0bffbc3 	ldbu	r2,-17(fp)
   15ea4:	108002b0 	cmpltui	r2,r2,10
   15ea8:	1000091e 	bne	r2,zero,15ed0 <etharp_find_entry+0x390>
   15eac:	010000f4 	movhi	r4,3
   15eb0:	21018304 	addi	r4,r4,1548
   15eb4:	014000f4 	movhi	r5,3
   15eb8:	2941b404 	addi	r5,r5,1744
   15ebc:	018061c4 	movi	r6,391
   15ec0:	01c000f4 	movhi	r7,3
   15ec4:	39c19004 	addi	r7,r7,1600
   15ec8:	0017c440 	call	17c44 <printf>
   15ecc:	003fff06 	br	15ecc <etharp_find_entry+0x38c>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
   15ed0:	e0bffbc3 	ldbu	r2,-17(fp)
   15ed4:	00c00134 	movhi	r3,4
   15ed8:	18d0ff04 	addi	r3,r3,17404
   15edc:	10800524 	muli	r2,r2,20
   15ee0:	1885883a 	add	r2,r3,r2
   15ee4:	10800404 	addi	r2,r2,16
   15ee8:	10800083 	ldbu	r2,2(r2)
   15eec:	10803fcc 	andi	r2,r2,255
   15ef0:	10000926 	beq	r2,zero,15f18 <etharp_find_entry+0x3d8>
   15ef4:	010000f4 	movhi	r4,3
   15ef8:	21018304 	addi	r4,r4,1548
   15efc:	014000f4 	movhi	r5,3
   15f00:	2941b904 	addi	r5,r5,1764
   15f04:	01806244 	movi	r6,393
   15f08:	01c000f4 	movhi	r7,3
   15f0c:	39c19004 	addi	r7,r7,1600
   15f10:	0017c440 	call	17c44 <printf>
   15f14:	003fff06 	br	15f14 <etharp_find_entry+0x3d4>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
   15f18:	e0bffe17 	ldw	r2,-8(fp)
   15f1c:	10000926 	beq	r2,zero,15f44 <etharp_find_entry+0x404>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
   15f20:	e0bffbc3 	ldbu	r2,-17(fp)
   15f24:	e0fffe17 	ldw	r3,-8(fp)
   15f28:	18c00017 	ldw	r3,0(r3)
   15f2c:	01000134 	movhi	r4,4
   15f30:	2110ff04 	addi	r4,r4,17404
   15f34:	10800524 	muli	r2,r2,20
   15f38:	2085883a 	add	r2,r4,r2
   15f3c:	10800104 	addi	r2,r2,4
   15f40:	10c00015 	stw	r3,0(r2)
  }
  arp_table[i].ctime = 0;
   15f44:	e0bffbc3 	ldbu	r2,-17(fp)
   15f48:	00c00134 	movhi	r3,4
   15f4c:	18d0ff04 	addi	r3,r3,17404
   15f50:	10800524 	muli	r2,r2,20
   15f54:	1885883a 	add	r2,r3,r2
   15f58:	10800404 	addi	r2,r2,16
   15f5c:	100000c5 	stb	zero,3(r2)
  return (err_t)i;
   15f60:	e0bffbc3 	ldbu	r2,-17(fp)
}
   15f64:	e037883a 	mov	sp,fp
   15f68:	dfc00117 	ldw	ra,4(sp)
   15f6c:	df000017 	ldw	fp,0(sp)
   15f70:	dec00204 	addi	sp,sp,8
   15f74:	f800283a 	ret

00015f78 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
   15f78:	defff904 	addi	sp,sp,-28
   15f7c:	dfc00615 	stw	ra,24(sp)
   15f80:	df000515 	stw	fp,20(sp)
   15f84:	df000504 	addi	fp,sp,20
   15f88:	e13ffc15 	stw	r4,-16(fp)
   15f8c:	e17ffd15 	stw	r5,-12(fp)
   15f90:	e1bffe15 	stw	r6,-8(fp)
   15f94:	e1ffff15 	stw	r7,-4(fp)
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
   15f98:	e0bffd17 	ldw	r2,-12(fp)
   15f9c:	10800117 	ldw	r2,4(r2)
   15fa0:	e0bffb15 	stw	r2,-20(fp)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
   15fa4:	e0bffc17 	ldw	r2,-16(fp)
   15fa8:	10800983 	ldbu	r2,38(r2)
   15fac:	10803fcc 	andi	r2,r2,255
   15fb0:	108001a0 	cmpeqi	r2,r2,6
   15fb4:	1000091e 	bne	r2,zero,15fdc <etharp_send_ip+0x64>
   15fb8:	010000f4 	movhi	r4,3
   15fbc:	21018304 	addi	r4,r4,1548
   15fc0:	014000f4 	movhi	r5,3
   15fc4:	2941c404 	addi	r5,r5,1808
   15fc8:	01806904 	movi	r6,420
   15fcc:	01c000f4 	movhi	r7,3
   15fd0:	39c19004 	addi	r7,r7,1600
   15fd4:	0017c440 	call	17c44 <printf>
   15fd8:	003fff06 	br	15fd8 <etharp_send_ip+0x60>
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
   15fdc:	e0bffb17 	ldw	r2,-20(fp)
   15fe0:	10800084 	addi	r2,r2,2
   15fe4:	1009883a 	mov	r4,r2
   15fe8:	e17fff17 	ldw	r5,-4(fp)
   15fec:	01800184 	movi	r6,6
   15ff0:	0017a440 	call	17a44 <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
   15ff4:	e0bffb17 	ldw	r2,-20(fp)
   15ff8:	10800204 	addi	r2,r2,8
   15ffc:	1009883a 	mov	r4,r2
   16000:	e17ffe17 	ldw	r5,-8(fp)
   16004:	01800184 	movi	r6,6
   16008:	0017a440 	call	17a44 <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
   1600c:	e0bffb17 	ldw	r2,-20(fp)
   16010:	00c00204 	movi	r3,8
   16014:	10c0038d 	sth	r3,14(r2)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
   16018:	e0bffc17 	ldw	r2,-16(fp)
   1601c:	10800617 	ldw	r2,24(r2)
   16020:	e13ffc17 	ldw	r4,-16(fp)
   16024:	e17ffd17 	ldw	r5,-12(fp)
   16028:	103ee83a 	callr	r2
}
   1602c:	e037883a 	mov	sp,fp
   16030:	dfc00117 	ldw	ra,4(sp)
   16034:	df000017 	ldw	fp,0(sp)
   16038:	dec00204 	addi	sp,sp,8
   1603c:	f800283a 	ret

00016040 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
   16040:	defff704 	addi	sp,sp,-36
   16044:	dfc00815 	stw	ra,32(sp)
   16048:	df000715 	stw	fp,28(sp)
   1604c:	df000704 	addi	fp,sp,28
   16050:	e13ffc15 	stw	r4,-16(fp)
   16054:	e17ffd15 	stw	r5,-12(fp)
   16058:	e1bffe15 	stw	r6,-8(fp)
   1605c:	3805883a 	mov	r2,r7
   16060:	e0bfff05 	stb	r2,-4(fp)
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETHARP_HWADDR_LEN", netif->hwaddr_len == ETHARP_HWADDR_LEN);
   16064:	e0bffc17 	ldw	r2,-16(fp)
   16068:	10800983 	ldbu	r2,38(r2)
   1606c:	10803fcc 	andi	r2,r2,255
   16070:	108001a0 	cmpeqi	r2,r2,6
   16074:	1000091e 	bne	r2,zero,1609c <etharp_update_arp_entry+0x5c>
   16078:	010000f4 	movhi	r4,3
   1607c:	21018304 	addi	r4,r4,1548
   16080:	014000f4 	movhi	r5,3
   16084:	2941d504 	addi	r5,r5,1876
   16088:	018070c4 	movi	r6,451
   1608c:	01c000f4 	movhi	r7,3
   16090:	39c19004 	addi	r7,r7,1600
   16094:	0017c440 	call	17c44 <printf>
   16098:	003fff06 	br	16098 <etharp_update_arp_entry+0x58>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
   1609c:	e0bffd17 	ldw	r2,-12(fp)
   160a0:	10000f26 	beq	r2,zero,160e0 <etharp_update_arp_entry+0xa0>
   160a4:	e0bffd17 	ldw	r2,-12(fp)
   160a8:	10800017 	ldw	r2,0(r2)
   160ac:	10000c26 	beq	r2,zero,160e0 <etharp_update_arp_entry+0xa0>
      ip_addr_isbroadcast(ipaddr, netif) ||
   160b0:	e0bffd17 	ldw	r2,-12(fp)
   160b4:	10800017 	ldw	r2,0(r2)
   160b8:	1009883a 	mov	r4,r2
   160bc:	e17ffc17 	ldw	r5,-16(fp)
   160c0:	00067940 	call	6794 <ip4_addr_isbroadcast>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
   160c4:	10803fcc 	andi	r2,r2,255
   160c8:	1000051e 	bne	r2,zero,160e0 <etharp_update_arp_entry+0xa0>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
   160cc:	e0bffd17 	ldw	r2,-12(fp)
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	10803c0c 	andi	r2,r2,240
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
   160d8:	10803818 	cmpnei	r2,r2,224
   160dc:	1000021e 	bne	r2,zero,160e8 <etharp_update_arp_entry+0xa8>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
   160e0:	00bffc84 	movi	r2,-14
   160e4:	00005a06 	br	16250 <etharp_update_arp_entry+0x210>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
   160e8:	e0bfff03 	ldbu	r2,-4(fp)
   160ec:	e13ffd17 	ldw	r4,-12(fp)
   160f0:	100b883a 	mov	r5,r2
   160f4:	0015b400 	call	15b40 <etharp_find_entry>
   160f8:	e0bff905 	stb	r2,-28(fp)
  /* bail out if no entry could be found */
  if (i < 0) {
   160fc:	e0bff907 	ldb	r2,-28(fp)
   16100:	1000020e 	bge	r2,zero,1610c <etharp_update_arp_entry+0xcc>
    return (err_t)i;
   16104:	e0bff903 	ldbu	r2,-28(fp)
   16108:	00005106 	br	16250 <etharp_update_arp_entry+0x210>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
   1610c:	e0bff907 	ldb	r2,-28(fp)
   16110:	00c00134 	movhi	r3,4
   16114:	18d0ff04 	addi	r3,r3,17404
   16118:	10800524 	muli	r2,r2,20
   1611c:	1885883a 	add	r2,r3,r2
   16120:	10800404 	addi	r2,r2,16
   16124:	00c00084 	movi	r3,2
   16128:	10c00085 	stb	r3,2(r2)
  }

  /* record network interface */
  arp_table[i].netif = netif;
   1612c:	e0bff907 	ldb	r2,-28(fp)
   16130:	00c00134 	movhi	r3,4
   16134:	18d0ff04 	addi	r3,r3,17404
   16138:	10800524 	muli	r2,r2,20
   1613c:	1885883a 	add	r2,r3,r2
   16140:	10800204 	addi	r2,r2,8
   16144:	e0fffc17 	ldw	r3,-16(fp)
   16148:	10c00015 	stw	r3,0(r2)
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
   1614c:	e0bff907 	ldb	r2,-28(fp)
   16150:	10800524 	muli	r2,r2,20
   16154:	10c00304 	addi	r3,r2,12
   16158:	00800134 	movhi	r2,4
   1615c:	1090ff04 	addi	r2,r2,17404
   16160:	1885883a 	add	r2,r3,r2
   16164:	e0fffe17 	ldw	r3,-8(fp)
   16168:	19000003 	ldbu	r4,0(r3)
   1616c:	11000005 	stb	r4,0(r2)
   16170:	19000043 	ldbu	r4,1(r3)
   16174:	11000045 	stb	r4,1(r2)
   16178:	19000083 	ldbu	r4,2(r3)
   1617c:	11000085 	stb	r4,2(r2)
   16180:	190000c3 	ldbu	r4,3(r3)
   16184:	110000c5 	stb	r4,3(r2)
   16188:	19000103 	ldbu	r4,4(r3)
   1618c:	11000105 	stb	r4,4(r2)
   16190:	18c00143 	ldbu	r3,5(r3)
   16194:	10c00145 	stb	r3,5(r2)
  /* reset time stamp */
  arp_table[i].ctime = 0;
   16198:	e0bff907 	ldb	r2,-28(fp)
   1619c:	00c00134 	movhi	r3,4
   161a0:	18d0ff04 	addi	r3,r3,17404
   161a4:	10800524 	muli	r2,r2,20
   161a8:	1885883a 	add	r2,r3,r2
   161ac:	10800404 	addi	r2,r2,16
   161b0:	100000c5 	stb	zero,3(r2)
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
   161b4:	00001e06 	br	16230 <etharp_update_arp_entry+0x1f0>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
   161b8:	e0bff907 	ldb	r2,-28(fp)
   161bc:	00c00134 	movhi	r3,4
   161c0:	18d0ff04 	addi	r3,r3,17404
   161c4:	10800524 	muli	r2,r2,20
   161c8:	1885883a 	add	r2,r3,r2
   161cc:	10800017 	ldw	r2,0(r2)
   161d0:	e0bffa15 	stw	r2,-24(fp)
    /* pop first item off the queue */
    arp_table[i].q = q->next;
   161d4:	e0bff907 	ldb	r2,-28(fp)
   161d8:	e0fffa17 	ldw	r3,-24(fp)
   161dc:	18c00017 	ldw	r3,0(r3)
   161e0:	01000134 	movhi	r4,4
   161e4:	2110ff04 	addi	r4,r4,17404
   161e8:	10800524 	muli	r2,r2,20
   161ec:	2085883a 	add	r2,r4,r2
   161f0:	10c00015 	stw	r3,0(r2)
    /* get the packet pointer */
    p = q->p;
   161f4:	e0bffa17 	ldw	r2,-24(fp)
   161f8:	10800117 	ldw	r2,4(r2)
   161fc:	e0bffb15 	stw	r2,-20(fp)
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
   16200:	01000184 	movi	r4,6
   16204:	e17ffa17 	ldw	r5,-24(fp)
   16208:	00091c00 	call	91c0 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
   1620c:	e0bffc17 	ldw	r2,-16(fp)
   16210:	108009c4 	addi	r2,r2,39
   16214:	e13ffc17 	ldw	r4,-16(fp)
   16218:	e17ffb17 	ldw	r5,-20(fp)
   1621c:	100d883a 	mov	r6,r2
   16220:	e1fffe17 	ldw	r7,-8(fp)
   16224:	0015f780 	call	15f78 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
   16228:	e13ffb17 	ldw	r4,-20(fp)
   1622c:	000a4200 	call	a420 <pbuf_free>
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
   16230:	e0bff907 	ldb	r2,-28(fp)
   16234:	00c00134 	movhi	r3,4
   16238:	18d0ff04 	addi	r3,r3,17404
   1623c:	10800524 	muli	r2,r2,20
   16240:	1885883a 	add	r2,r3,r2
   16244:	10800017 	ldw	r2,0(r2)
   16248:	103fdb1e 	bne	r2,zero,161b8 <etharp_update_arp_entry+0x178>
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
    /* free the queued IP packet */
    pbuf_free(p);
  }
  return ERR_OK;
   1624c:	0005883a 	mov	r2,zero
}
   16250:	e037883a 	mov	sp,fp
   16254:	dfc00117 	ldw	ra,4(sp)
   16258:	df000017 	ldw	fp,0(sp)
   1625c:	dec00204 	addi	sp,sp,8
   16260:	f800283a 	ret

00016264 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
   16264:	defffc04 	addi	sp,sp,-16
   16268:	dfc00315 	stw	ra,12(sp)
   1626c:	df000215 	stw	fp,8(sp)
   16270:	df000204 	addi	fp,sp,8
   16274:	e13fff15 	stw	r4,-4(fp)
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   16278:	e03ffe05 	stb	zero,-8(fp)
   1627c:	00001906 	br	162e4 <etharp_cleanup_netif+0x80>
    u8_t state = arp_table[i].state;
   16280:	e0bffe03 	ldbu	r2,-8(fp)
   16284:	00c00134 	movhi	r3,4
   16288:	18d0ff04 	addi	r3,r3,17404
   1628c:	10800524 	muli	r2,r2,20
   16290:	1885883a 	add	r2,r3,r2
   16294:	10800404 	addi	r2,r2,16
   16298:	10800083 	ldbu	r2,2(r2)
   1629c:	e0bffe45 	stb	r2,-7(fp)
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
   162a0:	e0bffe43 	ldbu	r2,-7(fp)
   162a4:	10000c26 	beq	r2,zero,162d8 <etharp_cleanup_netif+0x74>
   162a8:	e0bffe03 	ldbu	r2,-8(fp)
   162ac:	00c00134 	movhi	r3,4
   162b0:	18d0ff04 	addi	r3,r3,17404
   162b4:	10800524 	muli	r2,r2,20
   162b8:	1885883a 	add	r2,r3,r2
   162bc:	10800204 	addi	r2,r2,8
   162c0:	10c00017 	ldw	r3,0(r2)
   162c4:	e0bfff17 	ldw	r2,-4(fp)
   162c8:	1880031e 	bne	r3,r2,162d8 <etharp_cleanup_netif+0x74>
      etharp_free_entry(i);
   162cc:	e0bffe03 	ldbu	r2,-8(fp)
   162d0:	1009883a 	mov	r4,r2
   162d4:	00159340 	call	15934 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
   162d8:	e0bffe03 	ldbu	r2,-8(fp)
   162dc:	10800044 	addi	r2,r2,1
   162e0:	e0bffe05 	stb	r2,-8(fp)
   162e4:	e0bffe03 	ldbu	r2,-8(fp)
   162e8:	108002b0 	cmpltui	r2,r2,10
   162ec:	103fe41e 	bne	r2,zero,16280 <etharp_cleanup_netif+0x1c>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
   162f0:	e037883a 	mov	sp,fp
   162f4:	dfc00117 	ldw	ra,4(sp)
   162f8:	df000017 	ldw	fp,0(sp)
   162fc:	dec00204 	addi	sp,sp,8
   16300:	f800283a 	ret

00016304 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, ip_addr_t *ipaddr,
         struct eth_addr **eth_ret, ip_addr_t **ip_ret)
{
   16304:	defff904 	addi	sp,sp,-28
   16308:	dfc00615 	stw	ra,24(sp)
   1630c:	df000515 	stw	fp,20(sp)
   16310:	df000504 	addi	fp,sp,20
   16314:	e13ffc15 	stw	r4,-16(fp)
   16318:	e17ffd15 	stw	r5,-12(fp)
   1631c:	e1bffe15 	stw	r6,-8(fp)
   16320:	e1ffff15 	stw	r7,-4(fp)
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
   16324:	e0bffe17 	ldw	r2,-8(fp)
   16328:	10000226 	beq	r2,zero,16334 <etharp_find_addr+0x30>
   1632c:	e0bfff17 	ldw	r2,-4(fp)
   16330:	1000091e 	bne	r2,zero,16358 <etharp_find_addr+0x54>
   16334:	010000f4 	movhi	r4,3
   16338:	21018304 	addi	r4,r4,1548
   1633c:	014000f4 	movhi	r5,3
   16340:	2941df04 	addi	r5,r5,1916
   16344:	01809844 	movi	r6,609
   16348:	01c000f4 	movhi	r7,3
   1634c:	39c19004 	addi	r7,r7,1600
   16350:	0017c440 	call	17c44 <printf>
   16354:	003fff06 	br	16354 <etharp_find_addr+0x50>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY);
   16358:	e13ffd17 	ldw	r4,-12(fp)
   1635c:	01400084 	movi	r5,2
   16360:	0015b400 	call	15b40 <etharp_find_entry>
   16364:	e0bffb05 	stb	r2,-20(fp)
  if((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
   16368:	e0bffb07 	ldb	r2,-20(fp)
   1636c:	10001c16 	blt	r2,zero,163e0 <etharp_find_addr+0xdc>
   16370:	e0bffb07 	ldb	r2,-20(fp)
   16374:	00c00134 	movhi	r3,4
   16378:	18d0ff04 	addi	r3,r3,17404
   1637c:	10800524 	muli	r2,r2,20
   16380:	1885883a 	add	r2,r3,r2
   16384:	10800404 	addi	r2,r2,16
   16388:	10800083 	ldbu	r2,2(r2)
   1638c:	10803fcc 	andi	r2,r2,255
   16390:	108000b0 	cmpltui	r2,r2,2
   16394:	1000121e 	bne	r2,zero,163e0 <etharp_find_addr+0xdc>
      *eth_ret = &arp_table[i].ethaddr;
   16398:	e0bffb07 	ldb	r2,-20(fp)
   1639c:	10800524 	muli	r2,r2,20
   163a0:	10c00304 	addi	r3,r2,12
   163a4:	00800134 	movhi	r2,4
   163a8:	1090ff04 	addi	r2,r2,17404
   163ac:	1887883a 	add	r3,r3,r2
   163b0:	e0bffe17 	ldw	r2,-8(fp)
   163b4:	10c00015 	stw	r3,0(r2)
      *ip_ret = &arp_table[i].ipaddr;
   163b8:	e0bffb07 	ldb	r2,-20(fp)
   163bc:	10800524 	muli	r2,r2,20
   163c0:	10c00104 	addi	r3,r2,4
   163c4:	00800134 	movhi	r2,4
   163c8:	1090ff04 	addi	r2,r2,17404
   163cc:	1887883a 	add	r3,r3,r2
   163d0:	e0bfff17 	ldw	r2,-4(fp)
   163d4:	10c00015 	stw	r3,0(r2)
      return i;
   163d8:	e0bffb03 	ldbu	r2,-20(fp)
   163dc:	00000106 	br	163e4 <etharp_find_addr+0xe0>
  }
  return -1;
   163e0:	00bfffc4 	movi	r2,-1
}
   163e4:	e037883a 	mov	sp,fp
   163e8:	dfc00117 	ldw	ra,4(sp)
   163ec:	df000017 	ldw	fp,0(sp)
   163f0:	dec00204 	addi	sp,sp,8
   163f4:	f800283a 	ret

000163f8 <etharp_ip_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_ip_input(struct netif *netif, struct pbuf *p)
{
   163f8:	defff904 	addi	sp,sp,-28
   163fc:	dfc00615 	stw	ra,24(sp)
   16400:	df000515 	stw	fp,20(sp)
   16404:	df000504 	addi	fp,sp,20
   16408:	e13ffe15 	stw	r4,-8(fp)
   1640c:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr *ethhdr;
  struct ip_hdr *iphdr;
  ip_addr_t iphdr_src;
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
   16410:	e0bffe17 	ldw	r2,-8(fp)
   16414:	1000091e 	bne	r2,zero,1643c <etharp_ip_input+0x44>
   16418:	010000f4 	movhi	r4,3
   1641c:	21018304 	addi	r4,r4,1548
   16420:	014000f4 	movhi	r5,3
   16424:	2941e804 	addi	r5,r5,1952
   16428:	0180a104 	movi	r6,644
   1642c:	01c000f4 	movhi	r7,3
   16430:	39c19004 	addi	r7,r7,1600
   16434:	0017c440 	call	17c44 <printf>
   16438:	003fff06 	br	16438 <etharp_ip_input+0x40>

  /* Only insert an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  ethhdr = (struct eth_hdr *)p->payload;
   1643c:	e0bfff17 	ldw	r2,-4(fp)
   16440:	10800117 	ldw	r2,4(r2)
   16444:	e0bffb15 	stw	r2,-20(fp)
  iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
   16448:	e0bffb17 	ldw	r2,-20(fp)
   1644c:	10800404 	addi	r2,r2,16
   16450:	e0bffc15 	stw	r2,-16(fp)
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip_addr_copy(iphdr_src, iphdr->src);
   16454:	e0bffc17 	ldw	r2,-16(fp)
   16458:	10c0030b 	ldhu	r3,12(r2)
   1645c:	1080038b 	ldhu	r2,14(r2)
   16460:	1004943a 	slli	r2,r2,16
   16464:	10c4b03a 	or	r2,r2,r3
   16468:	e0bffd15 	stw	r2,-12(fp)

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
   1646c:	e0fffd17 	ldw	r3,-12(fp)
   16470:	e0bffe17 	ldw	r2,-8(fp)
   16474:	10800117 	ldw	r2,4(r2)
   16478:	1886f03a 	xor	r3,r3,r2
   1647c:	e0bffe17 	ldw	r2,-8(fp)
   16480:	10800217 	ldw	r2,8(r2)
   16484:	1884703a 	and	r2,r3,r2
   16488:	1000081e 	bne	r2,zero,164ac <etharp_ip_input+0xb4>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
   1648c:	e0bffb17 	ldw	r2,-20(fp)
   16490:	10800204 	addi	r2,r2,8
   16494:	e0fffd04 	addi	r3,fp,-12
   16498:	e13ffe17 	ldw	r4,-8(fp)
   1649c:	180b883a 	mov	r5,r3
   164a0:	100d883a 	mov	r6,r2
   164a4:	01c00084 	movi	r7,2
   164a8:	00160400 	call	16040 <etharp_update_arp_entry>
}
   164ac:	e037883a 	mov	sp,fp
   164b0:	dfc00117 	ldw	ra,4(sp)
   164b4:	df000017 	ldw	fp,0(sp)
   164b8:	dec00204 	addi	sp,sp,8
   164bc:	f800283a 	ret

000164c0 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
   164c0:	defff604 	addi	sp,sp,-40
   164c4:	dfc00915 	stw	ra,36(sp)
   164c8:	df000815 	stw	fp,32(sp)
   164cc:	df000804 	addi	fp,sp,32
   164d0:	e13ffd15 	stw	r4,-12(fp)
   164d4:	e17ffe15 	stw	r5,-8(fp)
   164d8:	e1bfff15 	stw	r6,-4(fp)
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
   164dc:	e0bffd17 	ldw	r2,-12(fp)
   164e0:	1000091e 	bne	r2,zero,16508 <etharp_arp_input+0x48>
   164e4:	010000f4 	movhi	r4,3
   164e8:	21018304 	addi	r4,r4,1548
   164ec:	014000f4 	movhi	r5,3
   164f0:	2941e804 	addi	r5,r5,1952
   164f4:	0180aec4 	movi	r6,699
   164f8:	01c000f4 	movhi	r7,3
   164fc:	39c19004 	addi	r7,r7,1600
   16500:	0017c440 	call	17c44 <printf>
   16504:	003fff06 	br	16504 <etharp_arp_input+0x44>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
   16508:	e0bfff17 	ldw	r2,-4(fp)
   1650c:	1080028b 	ldhu	r2,10(r2)
   16510:	10bfffcc 	andi	r2,r2,65535
   16514:	10800b28 	cmpgeui	r2,r2,44
   16518:	1000131e 	bne	r2,zero,16568 <etharp_arp_input+0xa8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
   1651c:	00800134 	movhi	r2,4
   16520:	10932304 	addi	r2,r2,19596
   16524:	1080088b 	ldhu	r2,34(r2)
   16528:	10800044 	addi	r2,r2,1
   1652c:	1007883a 	mov	r3,r2
   16530:	00800134 	movhi	r2,4
   16534:	10932304 	addi	r2,r2,19596
   16538:	10c0088d 	sth	r3,34(r2)
    ETHARP_STATS_INC(etharp.drop);
   1653c:	00800134 	movhi	r2,4
   16540:	10932304 	addi	r2,r2,19596
   16544:	1080078b 	ldhu	r2,30(r2)
   16548:	10800044 	addi	r2,r2,1
   1654c:	1007883a 	mov	r3,r2
   16550:	00800134 	movhi	r2,4
   16554:	10932304 	addi	r2,r2,19596
   16558:	10c0078d 	sth	r3,30(r2)
    pbuf_free(p);
   1655c:	e13fff17 	ldw	r4,-4(fp)
   16560:	000a4200 	call	a420 <pbuf_free>
   16564:	0000ba06 	br	16850 <etharp_arp_input+0x390>
    return;
  }

  ethhdr = (struct eth_hdr *)p->payload;
   16568:	e0bfff17 	ldw	r2,-4(fp)
   1656c:	10800117 	ldw	r2,4(r2)
   16570:	e0bff915 	stw	r2,-28(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
   16574:	e0bff917 	ldw	r2,-28(fp)
   16578:	10800404 	addi	r2,r2,16
   1657c:	e0bffa15 	stw	r2,-24(fp)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
   16580:	e0bffa17 	ldw	r2,-24(fp)
   16584:	1080000b 	ldhu	r2,0(r2)
   16588:	10bfffcc 	andi	r2,r2,65535
   1658c:	10804018 	cmpnei	r2,r2,256
   16590:	10000f1e 	bne	r2,zero,165d0 <etharp_arp_input+0x110>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
   16594:	e0bffa17 	ldw	r2,-24(fp)
   16598:	10800103 	ldbu	r2,4(r2)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
   1659c:	10803fcc 	andi	r2,r2,255
   165a0:	10800198 	cmpnei	r2,r2,6
   165a4:	10000a1e 	bne	r2,zero,165d0 <etharp_arp_input+0x110>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
   165a8:	e0bffa17 	ldw	r2,-24(fp)
   165ac:	10800143 	ldbu	r2,5(r2)
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
   165b0:	10803fcc 	andi	r2,r2,255
   165b4:	10800118 	cmpnei	r2,r2,4
   165b8:	1000051e 	bne	r2,zero,165d0 <etharp_arp_input+0x110>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
   165bc:	e0bffa17 	ldw	r2,-24(fp)
   165c0:	1080008b 	ldhu	r2,2(r2)
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
   165c4:	10bfffcc 	andi	r2,r2,65535
   165c8:	10800220 	cmpeqi	r2,r2,8
   165cc:	1000131e 	bne	r2,zero,1661c <etharp_arp_input+0x15c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
   165d0:	00800134 	movhi	r2,4
   165d4:	10932304 	addi	r2,r2,19596
   165d8:	10800a0b 	ldhu	r2,40(r2)
   165dc:	10800044 	addi	r2,r2,1
   165e0:	1007883a 	mov	r3,r2
   165e4:	00800134 	movhi	r2,4
   165e8:	10932304 	addi	r2,r2,19596
   165ec:	10c00a0d 	sth	r3,40(r2)
    ETHARP_STATS_INC(etharp.drop);
   165f0:	00800134 	movhi	r2,4
   165f4:	10932304 	addi	r2,r2,19596
   165f8:	1080078b 	ldhu	r2,30(r2)
   165fc:	10800044 	addi	r2,r2,1
   16600:	1007883a 	mov	r3,r2
   16604:	00800134 	movhi	r2,4
   16608:	10932304 	addi	r2,r2,19596
   1660c:	10c0078d 	sth	r3,30(r2)
    pbuf_free(p);
   16610:	e13fff17 	ldw	r4,-4(fp)
   16614:	000a4200 	call	a420 <pbuf_free>
   16618:	00008d06 	br	16850 <etharp_arp_input+0x390>
    return;
  }
  ETHARP_STATS_INC(etharp.recv);
   1661c:	00800134 	movhi	r2,4
   16620:	10932304 	addi	r2,r2,19596
   16624:	1080068b 	ldhu	r2,26(r2)
   16628:	10800044 	addi	r2,r2,1
   1662c:	1007883a 	mov	r3,r2
   16630:	00800134 	movhi	r2,4
   16634:	10932304 	addi	r2,r2,19596
   16638:	10c0068d 	sth	r3,26(r2)
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
   1663c:	e0bffa17 	ldw	r2,-24(fp)
   16640:	10800384 	addi	r2,r2,14
   16644:	e0fffb04 	addi	r3,fp,-20
   16648:	1809883a 	mov	r4,r3
   1664c:	100b883a 	mov	r5,r2
   16650:	01800104 	movi	r6,4
   16654:	0017a440 	call	17a44 <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
   16658:	e0bffa17 	ldw	r2,-24(fp)
   1665c:	10800604 	addi	r2,r2,24
   16660:	e0fffc04 	addi	r3,fp,-16
   16664:	1809883a 	mov	r4,r3
   16668:	100b883a 	mov	r5,r2
   1666c:	01800104 	movi	r6,4
   16670:	0017a440 	call	17a44 <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
   16674:	e0bffd17 	ldw	r2,-12(fp)
   16678:	10800104 	addi	r2,r2,4
   1667c:	10000326 	beq	r2,zero,1668c <etharp_arp_input+0x1cc>
   16680:	e0bffd17 	ldw	r2,-12(fp)
   16684:	10800117 	ldw	r2,4(r2)
   16688:	1000021e 	bne	r2,zero,16694 <etharp_arp_input+0x1d4>
    for_us = 0;
   1668c:	e03ff805 	stb	zero,-32(fp)
   16690:	00000506 	br	166a8 <etharp_arp_input+0x1e8>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
   16694:	e0fffc17 	ldw	r3,-16(fp)
   16698:	e0bffd17 	ldw	r2,-12(fp)
   1669c:	10800117 	ldw	r2,4(r2)
   166a0:	1885003a 	cmpeq	r2,r3,r2
   166a4:	e0bff805 	stb	r2,-32(fp)
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
   166a8:	e0bffa17 	ldw	r2,-24(fp)
   166ac:	10c00204 	addi	r3,r2,8
   166b0:	e0bff803 	ldbu	r2,-32(fp)
   166b4:	10000226 	beq	r2,zero,166c0 <etharp_arp_input+0x200>
   166b8:	00800044 	movi	r2,1
   166bc:	00000106 	br	166c4 <etharp_arp_input+0x204>
   166c0:	00800084 	movi	r2,2
   166c4:	e17ffb04 	addi	r5,fp,-20
   166c8:	e13ffd17 	ldw	r4,-12(fp)
   166cc:	180d883a 	mov	r6,r3
   166d0:	100f883a 	mov	r7,r2
   166d4:	00160400 	call	16040 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
   166d8:	e0bffa17 	ldw	r2,-24(fp)
   166dc:	1080018b 	ldhu	r2,6(r2)
   166e0:	10bfffcc 	andi	r2,r2,65535
   166e4:	10c04020 	cmpeqi	r3,r2,256
   166e8:	1800031e 	bne	r3,zero,166f8 <etharp_arp_input+0x238>
   166ec:	10808020 	cmpeqi	r2,r2,512
   166f0:	1000471e 	bne	r2,zero,16810 <etharp_arp_input+0x350>
   166f4:	00004b06 	br	16824 <etharp_arp_input+0x364>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
   166f8:	e0bff803 	ldbu	r2,-32(fp)
   166fc:	10004326 	beq	r2,zero,1680c <etharp_arp_input+0x34c>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
   16700:	e0bffa17 	ldw	r2,-24(fp)
   16704:	00c08004 	movi	r3,512
   16708:	10c0018d 	sth	r3,6(r2)

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
   1670c:	e0bffa17 	ldw	r2,-24(fp)
   16710:	10c00604 	addi	r3,r2,24
   16714:	e0bffa17 	ldw	r2,-24(fp)
   16718:	10800384 	addi	r2,r2,14
   1671c:	1809883a 	mov	r4,r3
   16720:	100b883a 	mov	r5,r2
   16724:	01800104 	movi	r6,4
   16728:	0017a440 	call	17a44 <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
   1672c:	e0bffa17 	ldw	r2,-24(fp)
   16730:	10c00384 	addi	r3,r2,14
   16734:	e0bffd17 	ldw	r2,-12(fp)
   16738:	10800104 	addi	r2,r2,4
   1673c:	1809883a 	mov	r4,r3
   16740:	100b883a 	mov	r5,r2
   16744:	01800104 	movi	r6,4
   16748:	0017a440 	call	17a44 <memcpy>

      LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
   1674c:	e0bffd17 	ldw	r2,-12(fp)
   16750:	10800983 	ldbu	r2,38(r2)
   16754:	10803fcc 	andi	r2,r2,255
   16758:	108001a0 	cmpeqi	r2,r2,6
   1675c:	1000091e 	bne	r2,zero,16784 <etharp_arp_input+0x2c4>
   16760:	010000f4 	movhi	r4,3
   16764:	21018304 	addi	r4,r4,1548
   16768:	014000f4 	movhi	r5,3
   1676c:	2941c404 	addi	r5,r5,1808
   16770:	0180c484 	movi	r6,786
   16774:	01c000f4 	movhi	r7,3
   16778:	39c19004 	addi	r7,r7,1600
   1677c:	0017c440 	call	17c44 <printf>
   16780:	003fff06 	br	16780 <etharp_arp_input+0x2c0>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
   16784:	e0bffa17 	ldw	r2,-24(fp)
   16788:	10c00484 	addi	r3,r2,18
   1678c:	e0bffa17 	ldw	r2,-24(fp)
   16790:	10800204 	addi	r2,r2,8
   16794:	1809883a 	mov	r4,r3
   16798:	100b883a 	mov	r5,r2
   1679c:	01800184 	movi	r6,6
   167a0:	0017a440 	call	17a44 <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
   167a4:	e0bff917 	ldw	r2,-28(fp)
   167a8:	10c00084 	addi	r3,r2,2
   167ac:	e0bffa17 	ldw	r2,-24(fp)
   167b0:	10800204 	addi	r2,r2,8
   167b4:	1809883a 	mov	r4,r3
   167b8:	100b883a 	mov	r5,r2
   167bc:	01800184 	movi	r6,6
   167c0:	0017a440 	call	17a44 <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
   167c4:	e0bffa17 	ldw	r2,-24(fp)
   167c8:	10800204 	addi	r2,r2,8
   167cc:	1009883a 	mov	r4,r2
   167d0:	e17ffe17 	ldw	r5,-8(fp)
   167d4:	01800184 	movi	r6,6
   167d8:	0017a440 	call	17a44 <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
   167dc:	e0bff917 	ldw	r2,-28(fp)
   167e0:	10800204 	addi	r2,r2,8
   167e4:	1009883a 	mov	r4,r2
   167e8:	e17ffe17 	ldw	r5,-8(fp)
   167ec:	01800184 	movi	r6,6
   167f0:	0017a440 	call	17a44 <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
   167f4:	e0bffd17 	ldw	r2,-12(fp)
   167f8:	10800617 	ldw	r2,24(r2)
   167fc:	e13ffd17 	ldw	r4,-12(fp)
   16800:	e17fff17 	ldw	r5,-4(fp)
   16804:	103ee83a 	callr	r2
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
   16808:	00000f06 	br	16848 <etharp_arp_input+0x388>
   1680c:	00000e06 	br	16848 <etharp_arp_input+0x388>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
   16810:	e0bffb04 	addi	r2,fp,-20
   16814:	e13ffd17 	ldw	r4,-12(fp)
   16818:	100b883a 	mov	r5,r2
   1681c:	000297c0 	call	297c <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
   16820:	00000906 	br	16848 <etharp_arp_input+0x388>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
   16824:	00800134 	movhi	r2,4
   16828:	10932304 	addi	r2,r2,19596
   1682c:	10800b0b 	ldhu	r2,44(r2)
   16830:	10800044 	addi	r2,r2,1
   16834:	1007883a 	mov	r3,r2
   16838:	00800134 	movhi	r2,4
   1683c:	10932304 	addi	r2,r2,19596
   16840:	10c00b0d 	sth	r3,44(r2)
    break;
   16844:	0001883a 	nop
  }
  /* free ARP packet */
  pbuf_free(p);
   16848:	e13fff17 	ldw	r4,-4(fp)
   1684c:	000a4200 	call	a420 <pbuf_free>
}
   16850:	e037883a 	mov	sp,fp
   16854:	dfc00117 	ldw	ra,4(sp)
   16858:	df000017 	ldw	fp,0(sp)
   1685c:	dec00204 	addi	sp,sp,8
   16860:	f800283a 	ret

00016864 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
   16864:	defffb04 	addi	sp,sp,-20
   16868:	dfc00415 	stw	ra,16(sp)
   1686c:	df000315 	stw	fp,12(sp)
   16870:	df000304 	addi	fp,sp,12
   16874:	e13ffd15 	stw	r4,-12(fp)
   16878:	e17ffe15 	stw	r5,-8(fp)
   1687c:	3005883a 	mov	r2,r6
   16880:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
   16884:	e0bfff03 	ldbu	r2,-4(fp)
   16888:	00c00134 	movhi	r3,4
   1688c:	18d0ff04 	addi	r3,r3,17404
   16890:	10800524 	muli	r2,r2,20
   16894:	1885883a 	add	r2,r3,r2
   16898:	10800404 	addi	r2,r2,16
   1689c:	10800083 	ldbu	r2,2(r2)
   168a0:	10803fcc 	andi	r2,r2,255
   168a4:	108000a8 	cmpgeui	r2,r2,2
   168a8:	1000091e 	bne	r2,zero,168d0 <etharp_output_to_arp_index+0x6c>
   168ac:	010000f4 	movhi	r4,3
   168b0:	21018304 	addi	r4,r4,1548
   168b4:	014000f4 	movhi	r5,3
   168b8:	2941ec04 	addi	r5,r5,1968
   168bc:	0180d344 	movi	r6,845
   168c0:	01c000f4 	movhi	r7,3
   168c4:	39c19004 	addi	r7,r7,1600
   168c8:	0017c440 	call	17c44 <printf>
   168cc:	003fff06 	br	168cc <etharp_output_to_arp_index+0x68>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
   168d0:	e0bfff03 	ldbu	r2,-4(fp)
   168d4:	00c00134 	movhi	r3,4
   168d8:	18d0ff04 	addi	r3,r3,17404
   168dc:	10800524 	muli	r2,r2,20
   168e0:	1885883a 	add	r2,r3,r2
   168e4:	10800404 	addi	r2,r2,16
   168e8:	10800083 	ldbu	r2,2(r2)
   168ec:	10803fcc 	andi	r2,r2,255
   168f0:	10800098 	cmpnei	r2,r2,2
   168f4:	10001f1e 	bne	r2,zero,16974 <etharp_output_to_arp_index+0x110>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
   168f8:	e0bfff03 	ldbu	r2,-4(fp)
   168fc:	00c00134 	movhi	r3,4
   16900:	18d0ff04 	addi	r3,r3,17404
   16904:	10800524 	muli	r2,r2,20
   16908:	1885883a 	add	r2,r3,r2
   1690c:	10800404 	addi	r2,r2,16
   16910:	108000c3 	ldbu	r2,3(r2)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
   16914:	10803fcc 	andi	r2,r2,255
   16918:	10803930 	cmpltui	r2,r2,228
   1691c:	1000151e 	bne	r2,zero,16974 <etharp_output_to_arp_index+0x110>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
   16920:	e0bfff03 	ldbu	r2,-4(fp)
   16924:	10800524 	muli	r2,r2,20
   16928:	10c00104 	addi	r3,r2,4
   1692c:	00800134 	movhi	r2,4
   16930:	1090ff04 	addi	r2,r2,17404
   16934:	1885883a 	add	r2,r3,r2
   16938:	e13ffd17 	ldw	r4,-12(fp)
   1693c:	100b883a 	mov	r5,r2
   16940:	00173f80 	call	173f8 <etharp_request>
   16944:	10803fcc 	andi	r2,r2,255
   16948:	1080201c 	xori	r2,r2,128
   1694c:	10bfe004 	addi	r2,r2,-128
   16950:	1000081e 	bne	r2,zero,16974 <etharp_output_to_arp_index+0x110>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
   16954:	e0bfff03 	ldbu	r2,-4(fp)
   16958:	00c00134 	movhi	r3,4
   1695c:	18d0ff04 	addi	r3,r3,17404
   16960:	10800524 	muli	r2,r2,20
   16964:	1885883a 	add	r2,r3,r2
   16968:	10800404 	addi	r2,r2,16
   1696c:	00c000c4 	movi	r3,3
   16970:	10c00085 	stb	r3,2(r2)
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
   16974:	e0bffd17 	ldw	r2,-12(fp)
   16978:	10c009c4 	addi	r3,r2,39
    &arp_table[arp_idx].ethaddr);
   1697c:	e0bfff03 	ldbu	r2,-4(fp)
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
   16980:	10800524 	muli	r2,r2,20
   16984:	11000304 	addi	r4,r2,12
   16988:	00800134 	movhi	r2,4
   1698c:	1090ff04 	addi	r2,r2,17404
   16990:	2085883a 	add	r2,r4,r2
   16994:	e13ffd17 	ldw	r4,-12(fp)
   16998:	e17ffe17 	ldw	r5,-8(fp)
   1699c:	180d883a 	mov	r6,r3
   169a0:	100f883a 	mov	r7,r2
   169a4:	0015f780 	call	15f78 <etharp_send_ip>
    &arp_table[arp_idx].ethaddr);
}
   169a8:	e037883a 	mov	sp,fp
   169ac:	dfc00117 	ldw	ra,4(sp)
   169b0:	df000017 	ldw	fp,0(sp)
   169b4:	dec00204 	addi	sp,sp,8
   169b8:	f800283a 	ret

000169bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
   169bc:	defff704 	addi	sp,sp,-36
   169c0:	dfc00815 	stw	ra,32(sp)
   169c4:	df000715 	stw	fp,28(sp)
   169c8:	df000704 	addi	fp,sp,28
   169cc:	e13ffd15 	stw	r4,-12(fp)
   169d0:	e17ffe15 	stw	r5,-8(fp)
   169d4:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
   169d8:	e0bfff17 	ldw	r2,-4(fp)
   169dc:	e0bffa15 	stw	r2,-24(fp)

  LWIP_ASSERT("netif != NULL", netif != NULL);
   169e0:	e0bffd17 	ldw	r2,-12(fp)
   169e4:	1000091e 	bne	r2,zero,16a0c <etharp_output+0x50>
   169e8:	010000f4 	movhi	r4,3
   169ec:	21018304 	addi	r4,r4,1548
   169f0:	014000f4 	movhi	r5,3
   169f4:	2941e804 	addi	r5,r5,1952
   169f8:	0180dd44 	movi	r6,885
   169fc:	01c000f4 	movhi	r7,3
   16a00:	39c19004 	addi	r7,r7,1600
   16a04:	0017c440 	call	17c44 <printf>
   16a08:	003fff06 	br	16a08 <etharp_output+0x4c>
  LWIP_ASSERT("q != NULL", q != NULL);
   16a0c:	e0bffe17 	ldw	r2,-8(fp)
   16a10:	1000091e 	bne	r2,zero,16a38 <etharp_output+0x7c>
   16a14:	010000f4 	movhi	r4,3
   16a18:	21018304 	addi	r4,r4,1548
   16a1c:	014000f4 	movhi	r5,3
   16a20:	29418d04 	addi	r5,r5,1588
   16a24:	0180dd84 	movi	r6,886
   16a28:	01c000f4 	movhi	r7,3
   16a2c:	39c19004 	addi	r7,r7,1600
   16a30:	0017c440 	call	17c44 <printf>
   16a34:	003fff06 	br	16a34 <etharp_output+0x78>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
   16a38:	e0bfff17 	ldw	r2,-4(fp)
   16a3c:	1000091e 	bne	r2,zero,16a64 <etharp_output+0xa8>
   16a40:	010000f4 	movhi	r4,3
   16a44:	21018304 	addi	r4,r4,1548
   16a48:	014000f4 	movhi	r5,3
   16a4c:	2941f804 	addi	r5,r5,2016
   16a50:	0180ddc4 	movi	r6,887
   16a54:	01c000f4 	movhi	r7,3
   16a58:	39c19004 	addi	r7,r7,1600
   16a5c:	0017c440 	call	17c44 <printf>
   16a60:	003fff06 	br	16a60 <etharp_output+0xa4>

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
   16a64:	e13ffe17 	ldw	r4,-8(fp)
   16a68:	01400404 	movi	r5,16
   16a6c:	000a2280 	call	a228 <pbuf_header>
   16a70:	10803fcc 	andi	r2,r2,255
   16a74:	10000a26 	beq	r2,zero,16aa0 <etharp_output+0xe4>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
   16a78:	00800134 	movhi	r2,4
   16a7c:	10932304 	addi	r2,r2,19596
   16a80:	1080028b 	ldhu	r2,10(r2)
   16a84:	10800044 	addi	r2,r2,1
   16a88:	1007883a 	mov	r3,r2
   16a8c:	00800134 	movhi	r2,4
   16a90:	10932304 	addi	r2,r2,19596
   16a94:	10c0028d 	sth	r3,10(r2)
    return ERR_BUF;
   16a98:	00bfff84 	movi	r2,-2
   16a9c:	00009206 	br	16ce8 <etharp_output+0x32c>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
   16aa0:	e0bfff17 	ldw	r2,-4(fp)
   16aa4:	10800017 	ldw	r2,0(r2)
   16aa8:	1009883a 	mov	r4,r2
   16aac:	e17ffd17 	ldw	r5,-12(fp)
   16ab0:	00067940 	call	6794 <ip4_addr_isbroadcast>
   16ab4:	10803fcc 	andi	r2,r2,255
   16ab8:	10000326 	beq	r2,zero,16ac8 <etharp_output+0x10c>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
   16abc:	d0a00784 	addi	r2,gp,-32738
   16ac0:	e0bff915 	stw	r2,-28(fp)
   16ac4:	00008106 	br	16ccc <etharp_output+0x310>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
   16ac8:	e0bfff17 	ldw	r2,-4(fp)
   16acc:	10800017 	ldw	r2,0(r2)
   16ad0:	10803c0c 	andi	r2,r2,240
   16ad4:	10803818 	cmpnei	r2,r2,224
   16ad8:	1000131e 	bne	r2,zero,16b28 <etharp_output+0x16c>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
   16adc:	00800044 	movi	r2,1
   16ae0:	e0bffb45 	stb	r2,-19(fp)
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
   16ae4:	e03ffb85 	stb	zero,-18(fp)
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
   16ae8:	00801784 	movi	r2,94
   16aec:	e0bffbc5 	stb	r2,-17(fp)
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
   16af0:	e0bfff17 	ldw	r2,-4(fp)
   16af4:	10800044 	addi	r2,r2,1
   16af8:	10800003 	ldbu	r2,0(r2)
   16afc:	10801fcc 	andi	r2,r2,127
   16b00:	e0bffc05 	stb	r2,-16(fp)
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
   16b04:	e0bfff17 	ldw	r2,-4(fp)
   16b08:	10800083 	ldbu	r2,2(r2)
   16b0c:	e0bffc45 	stb	r2,-15(fp)
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
   16b10:	e0bfff17 	ldw	r2,-4(fp)
   16b14:	108000c3 	ldbu	r2,3(r2)
   16b18:	e0bffc85 	stb	r2,-14(fp)
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
   16b1c:	e0bffb44 	addi	r2,fp,-19
   16b20:	e0bff915 	stw	r2,-28(fp)
   16b24:	00006906 	br	16ccc <etharp_output+0x310>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
   16b28:	e0bfff17 	ldw	r2,-4(fp)
   16b2c:	10c00017 	ldw	r3,0(r2)
   16b30:	e0bffd17 	ldw	r2,-12(fp)
   16b34:	10800117 	ldw	r2,4(r2)
   16b38:	1886f03a 	xor	r3,r3,r2
   16b3c:	e0bffd17 	ldw	r2,-12(fp)
   16b40:	10800217 	ldw	r2,8(r2)
   16b44:	1884703a 	and	r2,r3,r2
   16b48:	10001126 	beq	r2,zero,16b90 <etharp_output+0x1d4>
        !ip_addr_islinklocal(ipaddr)) {
   16b4c:	e0bfff17 	ldw	r2,-4(fp)
   16b50:	10800017 	ldw	r2,0(r2)
   16b54:	10ffffcc 	andi	r3,r2,65535
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
   16b58:	00bfaa54 	movui	r2,65193
   16b5c:	18800c26 	beq	r3,r2,16b90 <etharp_output+0x1d4>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
   16b60:	e0bffd17 	ldw	r2,-12(fp)
   16b64:	10800304 	addi	r2,r2,12
   16b68:	10000726 	beq	r2,zero,16b88 <etharp_output+0x1cc>
   16b6c:	e0bffd17 	ldw	r2,-12(fp)
   16b70:	10800317 	ldw	r2,12(r2)
   16b74:	10000426 	beq	r2,zero,16b88 <etharp_output+0x1cc>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
   16b78:	e0bffd17 	ldw	r2,-12(fp)
   16b7c:	10800304 	addi	r2,r2,12
   16b80:	e0bffa15 	stw	r2,-24(fp)
   16b84:	00000206 	br	16b90 <etharp_output+0x1d4>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
   16b88:	00bfff04 	movi	r2,-4
   16b8c:	00005606 	br	16ce8 <etharp_output+0x32c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
   16b90:	d0a8c603 	ldbu	r2,-23784(gp)
   16b94:	10803fcc 	andi	r2,r2,255
   16b98:	00c00134 	movhi	r3,4
   16b9c:	18d0ff04 	addi	r3,r3,17404
   16ba0:	10800524 	muli	r2,r2,20
   16ba4:	1885883a 	add	r2,r3,r2
   16ba8:	10800404 	addi	r2,r2,16
   16bac:	10800083 	ldbu	r2,2(r2)
   16bb0:	10803fcc 	andi	r2,r2,255
   16bb4:	108000b0 	cmpltui	r2,r2,2
   16bb8:	10001a1e 	bne	r2,zero,16c24 <etharp_output+0x268>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
   16bbc:	e0bffa17 	ldw	r2,-24(fp)
   16bc0:	10c00017 	ldw	r3,0(r2)
   16bc4:	d0a8c603 	ldbu	r2,-23784(gp)
   16bc8:	10803fcc 	andi	r2,r2,255
   16bcc:	01000134 	movhi	r4,4
   16bd0:	2110ff04 	addi	r4,r4,17404
   16bd4:	10800524 	muli	r2,r2,20
   16bd8:	2085883a 	add	r2,r4,r2
   16bdc:	10800104 	addi	r2,r2,4
   16be0:	10800017 	ldw	r2,0(r2)
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
   16be4:	18800f1e 	bne	r3,r2,16c24 <etharp_output+0x268>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
   16be8:	00800134 	movhi	r2,4
   16bec:	10932304 	addi	r2,r2,19596
   16bf0:	10800b8b 	ldhu	r2,46(r2)
   16bf4:	10800044 	addi	r2,r2,1
   16bf8:	1007883a 	mov	r3,r2
   16bfc:	00800134 	movhi	r2,4
   16c00:	10932304 	addi	r2,r2,19596
   16c04:	10c00b8d 	sth	r3,46(r2)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
   16c08:	d0a8c603 	ldbu	r2,-23784(gp)
   16c0c:	10803fcc 	andi	r2,r2,255
   16c10:	e13ffd17 	ldw	r4,-12(fp)
   16c14:	e17ffe17 	ldw	r5,-8(fp)
   16c18:	100d883a 	mov	r6,r2
   16c1c:	00168640 	call	16864 <etharp_output_to_arp_index>
   16c20:	00003106 	br	16ce8 <etharp_output+0x32c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16c24:	e03ffb05 	stb	zero,-20(fp)
   16c28:	00002006 	br	16cac <etharp_output+0x2f0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16c2c:	e0bffb07 	ldb	r2,-20(fp)
   16c30:	00c00134 	movhi	r3,4
   16c34:	18d0ff04 	addi	r3,r3,17404
   16c38:	10800524 	muli	r2,r2,20
   16c3c:	1885883a 	add	r2,r3,r2
   16c40:	10800404 	addi	r2,r2,16
   16c44:	10800083 	ldbu	r2,2(r2)
   16c48:	10803fcc 	andi	r2,r2,255
   16c4c:	108000b0 	cmpltui	r2,r2,2
   16c50:	1000131e 	bne	r2,zero,16ca0 <etharp_output+0x2e4>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
   16c54:	e0bffa17 	ldw	r2,-24(fp)
   16c58:	10c00017 	ldw	r3,0(r2)
   16c5c:	e0bffb07 	ldb	r2,-20(fp)
   16c60:	01000134 	movhi	r4,4
   16c64:	2110ff04 	addi	r4,r4,17404
   16c68:	10800524 	muli	r2,r2,20
   16c6c:	2085883a 	add	r2,r4,r2
   16c70:	10800104 	addi	r2,r2,4
   16c74:	10800017 	ldw	r2,0(r2)
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
   16c78:	1880091e 	bne	r3,r2,16ca0 <etharp_output+0x2e4>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
   16c7c:	e0bffb03 	ldbu	r2,-20(fp)
   16c80:	d0a8c605 	stb	r2,-23784(gp)
        return etharp_output_to_arp_index(netif, q, i);
   16c84:	e0bffb03 	ldbu	r2,-20(fp)
   16c88:	10803fcc 	andi	r2,r2,255
   16c8c:	e13ffd17 	ldw	r4,-12(fp)
   16c90:	e17ffe17 	ldw	r5,-8(fp)
   16c94:	100d883a 	mov	r6,r2
   16c98:	00168640 	call	16864 <etharp_output_to_arp_index>
   16c9c:	00001206 	br	16ce8 <etharp_output+0x32c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
   16ca0:	e0bffb03 	ldbu	r2,-20(fp)
   16ca4:	10800044 	addi	r2,r2,1
   16ca8:	e0bffb05 	stb	r2,-20(fp)
   16cac:	e0bffb07 	ldb	r2,-20(fp)
   16cb0:	10800290 	cmplti	r2,r2,10
   16cb4:	103fdd1e 	bne	r2,zero,16c2c <etharp_output+0x270>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
   16cb8:	e13ffd17 	ldw	r4,-12(fp)
   16cbc:	e17ffa17 	ldw	r5,-24(fp)
   16cc0:	e1bffe17 	ldw	r6,-8(fp)
   16cc4:	0016cfc0 	call	16cfc <etharp_query>
   16cc8:	00000706 	br	16ce8 <etharp_output+0x32c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
   16ccc:	e0bffd17 	ldw	r2,-12(fp)
   16cd0:	108009c4 	addi	r2,r2,39
   16cd4:	e13ffd17 	ldw	r4,-12(fp)
   16cd8:	e17ffe17 	ldw	r5,-8(fp)
   16cdc:	100d883a 	mov	r6,r2
   16ce0:	e1fff917 	ldw	r7,-28(fp)
   16ce4:	0015f780 	call	15f78 <etharp_send_ip>
}
   16ce8:	e037883a 	mov	sp,fp
   16cec:	dfc00117 	ldw	ra,4(sp)
   16cf0:	df000017 	ldw	fp,0(sp)
   16cf4:	dec00204 	addi	sp,sp,8
   16cf8:	f800283a 	ret

00016cfc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
   16cfc:	defff404 	addi	sp,sp,-48
   16d00:	dfc00b15 	stw	ra,44(sp)
   16d04:	df000a15 	stw	fp,40(sp)
   16d08:	df000a04 	addi	fp,sp,40
   16d0c:	e13ffd15 	stw	r4,-12(fp)
   16d10:	e17ffe15 	stw	r5,-8(fp)
   16d14:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
   16d18:	e0bffd17 	ldw	r2,-12(fp)
   16d1c:	108009c4 	addi	r2,r2,39
   16d20:	e0bffa15 	stw	r2,-24(fp)
  err_t result = ERR_MEM;
   16d24:	00bfffc4 	movi	r2,-1
   16d28:	e0bff605 	stb	r2,-40(fp)
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
   16d2c:	e0bffe17 	ldw	r2,-8(fp)
   16d30:	10800017 	ldw	r2,0(r2)
   16d34:	1009883a 	mov	r4,r2
   16d38:	e17ffd17 	ldw	r5,-12(fp)
   16d3c:	00067940 	call	6794 <ip4_addr_isbroadcast>
   16d40:	10803fcc 	andi	r2,r2,255
   16d44:	10000a1e 	bne	r2,zero,16d70 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
   16d48:	e0bffe17 	ldw	r2,-8(fp)
   16d4c:	10800017 	ldw	r2,0(r2)
   16d50:	10803c0c 	andi	r2,r2,240
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
   16d54:	10803820 	cmpeqi	r2,r2,224
   16d58:	1000051e 	bne	r2,zero,16d70 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
   16d5c:	e0bffe17 	ldw	r2,-8(fp)
   16d60:	10000326 	beq	r2,zero,16d70 <etharp_query+0x74>
      ip_addr_isany(ipaddr)) {
   16d64:	e0bffe17 	ldw	r2,-8(fp)
   16d68:	10800017 	ldw	r2,0(r2)
   16d6c:	1000021e 	bne	r2,zero,16d78 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
   16d70:	00bffc84 	movi	r2,-14
   16d74:	0000ff06 	br	17174 <etharp_query+0x478>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
   16d78:	e13ffe17 	ldw	r4,-8(fp)
   16d7c:	01400044 	movi	r5,1
   16d80:	0015b400 	call	15b40 <etharp_find_entry>
   16d84:	e0bffb05 	stb	r2,-20(fp)

  /* could not find or create entry? */
  if (i < 0) {
   16d88:	e0bffb07 	ldb	r2,-20(fp)
   16d8c:	10000c0e 	bge	r2,zero,16dc0 <etharp_query+0xc4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
   16d90:	e0bfff17 	ldw	r2,-4(fp)
   16d94:	10000826 	beq	r2,zero,16db8 <etharp_query+0xbc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
   16d98:	00800134 	movhi	r2,4
   16d9c:	10932304 	addi	r2,r2,19596
   16da0:	1080090b 	ldhu	r2,36(r2)
   16da4:	10800044 	addi	r2,r2,1
   16da8:	1007883a 	mov	r3,r2
   16dac:	00800134 	movhi	r2,4
   16db0:	10932304 	addi	r2,r2,19596
   16db4:	10c0090d 	sth	r3,36(r2)
    }
    return (err_t)i;
   16db8:	e0bffb03 	ldbu	r2,-20(fp)
   16dbc:	0000ed06 	br	17174 <etharp_query+0x478>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
   16dc0:	e0bffb07 	ldb	r2,-20(fp)
   16dc4:	00c00134 	movhi	r3,4
   16dc8:	18d0ff04 	addi	r3,r3,17404
   16dcc:	10800524 	muli	r2,r2,20
   16dd0:	1885883a 	add	r2,r3,r2
   16dd4:	10800404 	addi	r2,r2,16
   16dd8:	10800083 	ldbu	r2,2(r2)
   16ddc:	10803fcc 	andi	r2,r2,255
   16de0:	1000081e 	bne	r2,zero,16e04 <etharp_query+0x108>
    arp_table[i].state = ETHARP_STATE_PENDING;
   16de4:	e0bffb07 	ldb	r2,-20(fp)
   16de8:	00c00134 	movhi	r3,4
   16dec:	18d0ff04 	addi	r3,r3,17404
   16df0:	10800524 	muli	r2,r2,20
   16df4:	1885883a 	add	r2,r3,r2
   16df8:	10800404 	addi	r2,r2,16
   16dfc:	00c00044 	movi	r3,1
   16e00:	10c00085 	stb	r3,2(r2)
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
   16e04:	e0bffb07 	ldb	r2,-20(fp)
   16e08:	00c00134 	movhi	r3,4
   16e0c:	18d0ff04 	addi	r3,r3,17404
   16e10:	10800524 	muli	r2,r2,20
   16e14:	1885883a 	add	r2,r3,r2
   16e18:	10800404 	addi	r2,r2,16
   16e1c:	10800083 	ldbu	r2,2(r2)
   16e20:	10803fcc 	andi	r2,r2,255
   16e24:	10800060 	cmpeqi	r2,r2,1
   16e28:	1000131e 	bne	r2,zero,16e78 <etharp_query+0x17c>
   16e2c:	e0bffb07 	ldb	r2,-20(fp)
   16e30:	00c00134 	movhi	r3,4
   16e34:	18d0ff04 	addi	r3,r3,17404
   16e38:	10800524 	muli	r2,r2,20
   16e3c:	1885883a 	add	r2,r3,r2
   16e40:	10800404 	addi	r2,r2,16
   16e44:	10800083 	ldbu	r2,2(r2)
   16e48:	10803fcc 	andi	r2,r2,255
   16e4c:	108000a8 	cmpgeui	r2,r2,2
   16e50:	1000091e 	bne	r2,zero,16e78 <etharp_query+0x17c>
   16e54:	010000f4 	movhi	r4,3
   16e58:	21018304 	addi	r4,r4,1548
   16e5c:	014000f4 	movhi	r5,3
   16e60:	2941fc04 	addi	r5,r5,2032
   16e64:	018106c4 	movi	r6,1051
   16e68:	01c000f4 	movhi	r7,3
   16e6c:	39c19004 	addi	r7,r7,1600
   16e70:	0017c440 	call	17c44 <printf>
   16e74:	003fff06 	br	16e74 <etharp_query+0x178>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
   16e78:	e0bffb07 	ldb	r2,-20(fp)
   16e7c:	00c00134 	movhi	r3,4
   16e80:	18d0ff04 	addi	r3,r3,17404
   16e84:	10800524 	muli	r2,r2,20
   16e88:	1885883a 	add	r2,r3,r2
   16e8c:	10800404 	addi	r2,r2,16
   16e90:	10800083 	ldbu	r2,2(r2)
   16e94:	10803fcc 	andi	r2,r2,255
   16e98:	10800060 	cmpeqi	r2,r2,1
   16e9c:	1000021e 	bne	r2,zero,16ea8 <etharp_query+0x1ac>
   16ea0:	e0bfff17 	ldw	r2,-4(fp)
   16ea4:	1000081e 	bne	r2,zero,16ec8 <etharp_query+0x1cc>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
   16ea8:	e13ffd17 	ldw	r4,-12(fp)
   16eac:	e17ffe17 	ldw	r5,-8(fp)
   16eb0:	00173f80 	call	173f8 <etharp_request>
   16eb4:	e0bff605 	stb	r2,-40(fp)
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
   16eb8:	e0bfff17 	ldw	r2,-4(fp)
   16ebc:	1000021e 	bne	r2,zero,16ec8 <etharp_query+0x1cc>
      return result;
   16ec0:	e0bff603 	ldbu	r2,-40(fp)
   16ec4:	0000ab06 	br	17174 <etharp_query+0x478>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
   16ec8:	e0bfff17 	ldw	r2,-4(fp)
   16ecc:	1000091e 	bne	r2,zero,16ef4 <etharp_query+0x1f8>
   16ed0:	010000f4 	movhi	r4,3
   16ed4:	21018304 	addi	r4,r4,1548
   16ed8:	014000f4 	movhi	r5,3
   16edc:	29418d04 	addi	r5,r5,1588
   16ee0:	01810b44 	movi	r6,1069
   16ee4:	01c000f4 	movhi	r7,3
   16ee8:	39c19004 	addi	r7,r7,1600
   16eec:	0017c440 	call	17c44 <printf>
   16ef0:	003fff06 	br	16ef0 <etharp_query+0x1f4>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
   16ef4:	e0bffb07 	ldb	r2,-20(fp)
   16ef8:	00c00134 	movhi	r3,4
   16efc:	18d0ff04 	addi	r3,r3,17404
   16f00:	10800524 	muli	r2,r2,20
   16f04:	1885883a 	add	r2,r3,r2
   16f08:	10800404 	addi	r2,r2,16
   16f0c:	10800083 	ldbu	r2,2(r2)
   16f10:	10803fcc 	andi	r2,r2,255
   16f14:	108000b0 	cmpltui	r2,r2,2
   16f18:	10000f1e 	bne	r2,zero,16f58 <etharp_query+0x25c>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
   16f1c:	e0bffb03 	ldbu	r2,-20(fp)
   16f20:	d0a8c605 	stb	r2,-23784(gp)
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
   16f24:	e0bffb07 	ldb	r2,-20(fp)
   16f28:	10800524 	muli	r2,r2,20
   16f2c:	10c00304 	addi	r3,r2,12
   16f30:	00800134 	movhi	r2,4
   16f34:	1090ff04 	addi	r2,r2,17404
   16f38:	1885883a 	add	r2,r3,r2
   16f3c:	e13ffd17 	ldw	r4,-12(fp)
   16f40:	e17fff17 	ldw	r5,-4(fp)
   16f44:	e1bffa17 	ldw	r6,-24(fp)
   16f48:	100f883a 	mov	r7,r2
   16f4c:	0015f780 	call	15f78 <etharp_send_ip>
   16f50:	e0bff605 	stb	r2,-40(fp)
   16f54:	00008606 	br	17170 <etharp_query+0x474>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
   16f58:	e0bffb07 	ldb	r2,-20(fp)
   16f5c:	00c00134 	movhi	r3,4
   16f60:	18d0ff04 	addi	r3,r3,17404
   16f64:	10800524 	muli	r2,r2,20
   16f68:	1885883a 	add	r2,r3,r2
   16f6c:	10800404 	addi	r2,r2,16
   16f70:	10800083 	ldbu	r2,2(r2)
   16f74:	10803fcc 	andi	r2,r2,255
   16f78:	10800058 	cmpnei	r2,r2,1
   16f7c:	10007c1e 	bne	r2,zero,17170 <etharp_query+0x474>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
   16f80:	e03ff815 	stw	zero,-32(fp)
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
   16f84:	e0bfff17 	ldw	r2,-4(fp)
   16f88:	e0bff715 	stw	r2,-36(fp)
    while (p) {
   16f8c:	00001e06 	br	17008 <etharp_query+0x30c>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
   16f90:	e0bff717 	ldw	r2,-36(fp)
   16f94:	10c0028b 	ldhu	r3,10(r2)
   16f98:	e0bff717 	ldw	r2,-36(fp)
   16f9c:	1080020b 	ldhu	r2,8(r2)
   16fa0:	18ffffcc 	andi	r3,r3,65535
   16fa4:	10bfffcc 	andi	r2,r2,65535
   16fa8:	18800c1e 	bne	r3,r2,16fdc <etharp_query+0x2e0>
   16fac:	e0bff717 	ldw	r2,-36(fp)
   16fb0:	10800017 	ldw	r2,0(r2)
   16fb4:	10000926 	beq	r2,zero,16fdc <etharp_query+0x2e0>
   16fb8:	010000f4 	movhi	r4,3
   16fbc:	21018304 	addi	r4,r4,1548
   16fc0:	014000f4 	movhi	r5,3
   16fc4:	29420604 	addi	r5,r5,2072
   16fc8:	01810f84 	movi	r6,1086
   16fcc:	01c000f4 	movhi	r7,3
   16fd0:	39c19004 	addi	r7,r7,1600
   16fd4:	0017c440 	call	17c44 <printf>
   16fd8:	003fff06 	br	16fd8 <etharp_query+0x2dc>
      if(p->type != PBUF_ROM) {
   16fdc:	e0bff717 	ldw	r2,-36(fp)
   16fe0:	10800303 	ldbu	r2,12(r2)
   16fe4:	10803fcc 	andi	r2,r2,255
   16fe8:	10800060 	cmpeqi	r2,r2,1
   16fec:	1000031e 	bne	r2,zero,16ffc <etharp_query+0x300>
        copy_needed = 1;
   16ff0:	00800044 	movi	r2,1
   16ff4:	e0bff815 	stw	r2,-32(fp)
        break;
   16ff8:	00000506 	br	17010 <etharp_query+0x314>
      }
      p = p->next;
   16ffc:	e0bff717 	ldw	r2,-36(fp)
   17000:	10800017 	ldw	r2,0(r2)
   17004:	e0bff715 	stw	r2,-36(fp)
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
   17008:	e0bff717 	ldw	r2,-36(fp)
   1700c:	103fe01e 	bne	r2,zero,16f90 <etharp_query+0x294>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
   17010:	e0bff817 	ldw	r2,-32(fp)
   17014:	10001526 	beq	r2,zero,1706c <etharp_query+0x370>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
   17018:	e0bff717 	ldw	r2,-36(fp)
   1701c:	1080020b 	ldhu	r2,8(r2)
   17020:	10bfffcc 	andi	r2,r2,65535
   17024:	010000c4 	movi	r4,3
   17028:	100b883a 	mov	r5,r2
   1702c:	000d883a 	mov	r6,zero
   17030:	0009a600 	call	9a60 <pbuf_alloc>
   17034:	e0bff715 	stw	r2,-36(fp)
      if(p != NULL) {
   17038:	e0bff717 	ldw	r2,-36(fp)
   1703c:	10000f26 	beq	r2,zero,1707c <etharp_query+0x380>
        if (pbuf_copy(p, q) != ERR_OK) {
   17040:	e13ff717 	ldw	r4,-36(fp)
   17044:	e17fff17 	ldw	r5,-4(fp)
   17048:	000a9240 	call	a924 <pbuf_copy>
   1704c:	10803fcc 	andi	r2,r2,255
   17050:	1080201c 	xori	r2,r2,128
   17054:	10bfe004 	addi	r2,r2,-128
   17058:	10000826 	beq	r2,zero,1707c <etharp_query+0x380>
          pbuf_free(p);
   1705c:	e13ff717 	ldw	r4,-36(fp)
   17060:	000a4200 	call	a420 <pbuf_free>
          p = NULL;
   17064:	e03ff715 	stw	zero,-36(fp)
   17068:	00000406 	br	1707c <etharp_query+0x380>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
   1706c:	e0bfff17 	ldw	r2,-4(fp)
   17070:	e0bff715 	stw	r2,-36(fp)
      pbuf_ref(p);
   17074:	e13ff717 	ldw	r4,-36(fp)
   17078:	000a6380 	call	a638 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
   1707c:	e0bff717 	ldw	r2,-36(fp)
   17080:	10003126 	beq	r2,zero,17148 <etharp_query+0x44c>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
   17084:	01000184 	movi	r4,6
   17088:	0008fe40 	call	8fe4 <memp_malloc>
   1708c:	e0bffc15 	stw	r2,-16(fp)
      if (new_entry != NULL) {
   17090:	e0bffc17 	ldw	r2,-16(fp)
   17094:	10002726 	beq	r2,zero,17134 <etharp_query+0x438>
        new_entry->next = 0;
   17098:	e0bffc17 	ldw	r2,-16(fp)
   1709c:	10000015 	stw	zero,0(r2)
        new_entry->p = p;
   170a0:	e0bffc17 	ldw	r2,-16(fp)
   170a4:	e0fff717 	ldw	r3,-36(fp)
   170a8:	10c00115 	stw	r3,4(r2)
        if(arp_table[i].q != NULL) {
   170ac:	e0bffb07 	ldb	r2,-20(fp)
   170b0:	00c00134 	movhi	r3,4
   170b4:	18d0ff04 	addi	r3,r3,17404
   170b8:	10800524 	muli	r2,r2,20
   170bc:	1885883a 	add	r2,r3,r2
   170c0:	10800017 	ldw	r2,0(r2)
   170c4:	10001226 	beq	r2,zero,17110 <etharp_query+0x414>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
   170c8:	e0bffb07 	ldb	r2,-20(fp)
   170cc:	00c00134 	movhi	r3,4
   170d0:	18d0ff04 	addi	r3,r3,17404
   170d4:	10800524 	muli	r2,r2,20
   170d8:	1885883a 	add	r2,r3,r2
   170dc:	10800017 	ldw	r2,0(r2)
   170e0:	e0bff915 	stw	r2,-28(fp)
          while (r->next != NULL) {
   170e4:	00000306 	br	170f4 <etharp_query+0x3f8>
            r = r->next;
   170e8:	e0bff917 	ldw	r2,-28(fp)
   170ec:	10800017 	ldw	r2,0(r2)
   170f0:	e0bff915 	stw	r2,-28(fp)
        new_entry->p = p;
        if(arp_table[i].q != NULL) {
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
          while (r->next != NULL) {
   170f4:	e0bff917 	ldw	r2,-28(fp)
   170f8:	10800017 	ldw	r2,0(r2)
   170fc:	103ffa1e 	bne	r2,zero,170e8 <etharp_query+0x3ec>
            r = r->next;
          }
          r->next = new_entry;
   17100:	e0bff917 	ldw	r2,-28(fp)
   17104:	e0fffc17 	ldw	r3,-16(fp)
   17108:	10c00015 	stw	r3,0(r2)
   1710c:	00000706 	br	1712c <etharp_query+0x430>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
   17110:	e0bffb07 	ldb	r2,-20(fp)
   17114:	00c00134 	movhi	r3,4
   17118:	18d0ff04 	addi	r3,r3,17404
   1711c:	10800524 	muli	r2,r2,20
   17120:	1885883a 	add	r2,r3,r2
   17124:	e0fffc17 	ldw	r3,-16(fp)
   17128:	10c00015 	stw	r3,0(r2)
        }
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
   1712c:	e03ff605 	stb	zero,-40(fp)
   17130:	00000f06 	br	17170 <etharp_query+0x474>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
   17134:	e13ff717 	ldw	r4,-36(fp)
   17138:	000a4200 	call	a420 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
   1713c:	00bfffc4 	movi	r2,-1
   17140:	e0bff605 	stb	r2,-40(fp)
   17144:	00000a06 	br	17170 <etharp_query+0x474>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
   17148:	00800134 	movhi	r2,4
   1714c:	10932304 	addi	r2,r2,19596
   17150:	1080090b 	ldhu	r2,36(r2)
   17154:	10800044 	addi	r2,r2,1
   17158:	1007883a 	mov	r3,r2
   1715c:	00800134 	movhi	r2,4
   17160:	10932304 	addi	r2,r2,19596
   17164:	10c0090d 	sth	r3,36(r2)
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
   17168:	00bfffc4 	movi	r2,-1
   1716c:	e0bff605 	stb	r2,-40(fp)
    }
  }
  return result;
   17170:	e0bff603 	ldbu	r2,-40(fp)
}
   17174:	e037883a 	mov	sp,fp
   17178:	dfc00117 	ldw	ra,4(sp)
   1717c:	df000017 	ldw	fp,0(sp)
   17180:	dec00204 	addi	sp,sp,8
   17184:	f800283a 	ret

00017188 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
   17188:	defff504 	addi	sp,sp,-44
   1718c:	dfc00a15 	stw	ra,40(sp)
   17190:	df000915 	stw	fp,36(sp)
   17194:	df000904 	addi	fp,sp,36
   17198:	e13ffb15 	stw	r4,-20(fp)
   1719c:	e17ffc15 	stw	r5,-16(fp)
   171a0:	e1bffd15 	stw	r6,-12(fp)
   171a4:	e1fffe15 	stw	r7,-8(fp)
   171a8:	e0800517 	ldw	r2,20(fp)
   171ac:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  err_t result = ERR_OK;
   171b0:	e03ff705 	stb	zero,-36(fp)
  struct etharp_hdr *hdr;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);
   171b4:	e0bffb17 	ldw	r2,-20(fp)
   171b8:	1000091e 	bne	r2,zero,171e0 <etharp_raw+0x58>
   171bc:	010000f4 	movhi	r4,3
   171c0:	21018304 	addi	r4,r4,1548
   171c4:	014000f4 	movhi	r5,3
   171c8:	2941e804 	addi	r5,r5,1952
   171cc:	01812944 	movi	r6,1189
   171d0:	01c000f4 	movhi	r7,3
   171d4:	39c19004 	addi	r7,r7,1600
   171d8:	0017c440 	call	17c44 <printf>
   171dc:	003fff06 	br	171dc <etharp_raw+0x54>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
   171e0:	010000c4 	movi	r4,3
   171e4:	01400b04 	movi	r5,44
   171e8:	000d883a 	mov	r6,zero
   171ec:	0009a600 	call	9a60 <pbuf_alloc>
   171f0:	e0bff815 	stw	r2,-32(fp)
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
   171f4:	e0bff817 	ldw	r2,-32(fp)
   171f8:	10000a1e 	bne	r2,zero,17224 <etharp_raw+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
   171fc:	00800134 	movhi	r2,4
   17200:	10932304 	addi	r2,r2,19596
   17204:	1080090b 	ldhu	r2,36(r2)
   17208:	10800044 	addi	r2,r2,1
   1720c:	1007883a 	mov	r3,r2
   17210:	00800134 	movhi	r2,4
   17214:	10932304 	addi	r2,r2,19596
   17218:	10c0090d 	sth	r3,36(r2)
    return ERR_MEM;
   1721c:	00bfffc4 	movi	r2,-1
   17220:	00007006 	br	173e4 <etharp_raw+0x25c>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
   17224:	e0bff817 	ldw	r2,-32(fp)
   17228:	1080028b 	ldhu	r2,10(r2)
   1722c:	10bfffcc 	andi	r2,r2,65535
   17230:	10800b28 	cmpgeui	r2,r2,44
   17234:	1000091e 	bne	r2,zero,1725c <etharp_raw+0xd4>
   17238:	010000f4 	movhi	r4,3
   1723c:	21018304 	addi	r4,r4,1548
   17240:	014000f4 	movhi	r5,3
   17244:	29420d04 	addi	r5,r5,2100
   17248:	01812c44 	movi	r6,1201
   1724c:	01c000f4 	movhi	r7,3
   17250:	39c19004 	addi	r7,r7,1600
   17254:	0017c440 	call	17c44 <printf>
   17258:	003fff06 	br	17258 <etharp_raw+0xd0>
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
   1725c:	e0bff817 	ldw	r2,-32(fp)
   17260:	10800117 	ldw	r2,4(r2)
   17264:	e0bff915 	stw	r2,-28(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
   17268:	e0bff917 	ldw	r2,-28(fp)
   1726c:	10800404 	addi	r2,r2,16
   17270:	e0bffa15 	stw	r2,-24(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
   17274:	e0bfff0b 	ldhu	r2,-4(fp)
   17278:	1004d23a 	srli	r2,r2,8
   1727c:	1007883a 	mov	r3,r2
   17280:	e0bfff0b 	ldhu	r2,-4(fp)
   17284:	1004923a 	slli	r2,r2,8
   17288:	1884b03a 	or	r2,r3,r2
   1728c:	1007883a 	mov	r3,r2
   17290:	e0bffa17 	ldw	r2,-24(fp)
   17294:	10c0018d 	sth	r3,6(r2)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
   17298:	e0bffb17 	ldw	r2,-20(fp)
   1729c:	10800983 	ldbu	r2,38(r2)
   172a0:	10803fcc 	andi	r2,r2,255
   172a4:	108001a0 	cmpeqi	r2,r2,6
   172a8:	1000091e 	bne	r2,zero,172d0 <etharp_raw+0x148>
   172ac:	010000f4 	movhi	r4,3
   172b0:	21018304 	addi	r4,r4,1548
   172b4:	014000f4 	movhi	r5,3
   172b8:	2941c404 	addi	r5,r5,1808
   172bc:	01812e44 	movi	r6,1209
   172c0:	01c000f4 	movhi	r7,3
   172c4:	39c19004 	addi	r7,r7,1600
   172c8:	0017c440 	call	17c44 <printf>
   172cc:	003fff06 	br	172cc <etharp_raw+0x144>
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
   172d0:	e0bffa17 	ldw	r2,-24(fp)
   172d4:	10800204 	addi	r2,r2,8
   172d8:	1009883a 	mov	r4,r2
   172dc:	e17ffe17 	ldw	r5,-8(fp)
   172e0:	01800184 	movi	r6,6
   172e4:	0017a440 	call	17a44 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
   172e8:	e0bffa17 	ldw	r2,-24(fp)
   172ec:	10800484 	addi	r2,r2,18
   172f0:	1009883a 	mov	r4,r2
   172f4:	e1400317 	ldw	r5,12(fp)
   172f8:	01800184 	movi	r6,6
   172fc:	0017a440 	call	17a44 <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
   17300:	e0bff917 	ldw	r2,-28(fp)
   17304:	10800084 	addi	r2,r2,2
   17308:	1009883a 	mov	r4,r2
   1730c:	e17ffd17 	ldw	r5,-12(fp)
   17310:	01800184 	movi	r6,6
   17314:	0017a440 	call	17a44 <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
   17318:	e0bff917 	ldw	r2,-28(fp)
   1731c:	10800204 	addi	r2,r2,8
   17320:	1009883a 	mov	r4,r2
   17324:	e17ffc17 	ldw	r5,-16(fp)
   17328:	01800184 	movi	r6,6
   1732c:	0017a440 	call	17a44 <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
   17330:	e0bffa17 	ldw	r2,-24(fp)
   17334:	10800384 	addi	r2,r2,14
   17338:	1009883a 	mov	r4,r2
   1733c:	e1400217 	ldw	r5,8(fp)
   17340:	01800104 	movi	r6,4
   17344:	0017a440 	call	17a44 <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
   17348:	e0bffa17 	ldw	r2,-24(fp)
   1734c:	10800604 	addi	r2,r2,24
   17350:	1009883a 	mov	r4,r2
   17354:	e1400417 	ldw	r5,16(fp)
   17358:	01800104 	movi	r6,4
   1735c:	0017a440 	call	17a44 <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
   17360:	e0bffa17 	ldw	r2,-24(fp)
   17364:	00c04004 	movi	r3,256
   17368:	10c0000d 	sth	r3,0(r2)
  hdr->proto = PP_HTONS(ETHTYPE_IP);
   1736c:	e0bffa17 	ldw	r2,-24(fp)
   17370:	00c00204 	movi	r3,8
   17374:	10c0008d 	sth	r3,2(r2)
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
   17378:	e0bffa17 	ldw	r2,-24(fp)
   1737c:	00c00184 	movi	r3,6
   17380:	10c00105 	stb	r3,4(r2)
  hdr->protolen = sizeof(ip_addr_t);
   17384:	e0bffa17 	ldw	r2,-24(fp)
   17388:	00c00104 	movi	r3,4
   1738c:	10c00145 	stb	r3,5(r2)

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
   17390:	e0bff917 	ldw	r2,-28(fp)
   17394:	00c18204 	movi	r3,1544
   17398:	10c0038d 	sth	r3,14(r2)
  /* send ARP query */
  result = netif->linkoutput(netif, p);
   1739c:	e0bffb17 	ldw	r2,-20(fp)
   173a0:	10800617 	ldw	r2,24(r2)
   173a4:	e13ffb17 	ldw	r4,-20(fp)
   173a8:	e17ff817 	ldw	r5,-32(fp)
   173ac:	103ee83a 	callr	r2
   173b0:	e0bff705 	stb	r2,-36(fp)
  ETHARP_STATS_INC(etharp.xmit);
   173b4:	00800134 	movhi	r2,4
   173b8:	10932304 	addi	r2,r2,19596
   173bc:	1080060b 	ldhu	r2,24(r2)
   173c0:	10800044 	addi	r2,r2,1
   173c4:	1007883a 	mov	r3,r2
   173c8:	00800134 	movhi	r2,4
   173cc:	10932304 	addi	r2,r2,19596
   173d0:	10c0060d 	sth	r3,24(r2)
  /* free ARP query packet */
  pbuf_free(p);
   173d4:	e13ff817 	ldw	r4,-32(fp)
   173d8:	000a4200 	call	a420 <pbuf_free>
  p = NULL;
   173dc:	e03ff815 	stw	zero,-32(fp)
  /* could not allocate pbuf for ARP request */

  return result;
   173e0:	e0bff703 	ldbu	r2,-36(fp)
}
   173e4:	e037883a 	mov	sp,fp
   173e8:	dfc00117 	ldw	ra,4(sp)
   173ec:	df000017 	ldw	fp,0(sp)
   173f0:	dec00204 	addi	sp,sp,8
   173f4:	f800283a 	ret

000173f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
   173f8:	defff804 	addi	sp,sp,-32
   173fc:	dfc00715 	stw	ra,28(sp)
   17400:	df000615 	stw	fp,24(sp)
   17404:	df000604 	addi	fp,sp,24
   17408:	e13ffe15 	stw	r4,-8(fp)
   1740c:	e17fff15 	stw	r5,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
   17410:	e0bffe17 	ldw	r2,-8(fp)
   17414:	10c009c4 	addi	r3,r2,39
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
   17418:	e0bffe17 	ldw	r2,-8(fp)
   1741c:	108009c4 	addi	r2,r2,39
   17420:	e13ffe17 	ldw	r4,-8(fp)
   17424:	21000104 	addi	r4,r4,4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
   17428:	d9000015 	stw	r4,0(sp)
   1742c:	d1200904 	addi	r4,gp,-32732
   17430:	d9000115 	stw	r4,4(sp)
   17434:	e13fff17 	ldw	r4,-4(fp)
   17438:	d9000215 	stw	r4,8(sp)
   1743c:	01000044 	movi	r4,1
   17440:	d9000315 	stw	r4,12(sp)
   17444:	e13ffe17 	ldw	r4,-8(fp)
   17448:	180b883a 	mov	r5,r3
   1744c:	d1a00784 	addi	r6,gp,-32738
   17450:	100f883a 	mov	r7,r2
   17454:	00171880 	call	17188 <etharp_raw>
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
   17458:	e037883a 	mov	sp,fp
   1745c:	dfc00117 	ldw	ra,4(sp)
   17460:	df000017 	ldw	fp,0(sp)
   17464:	dec00204 	addi	sp,sp,8
   17468:	f800283a 	ret

0001746c <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
   1746c:	defff904 	addi	sp,sp,-28
   17470:	dfc00615 	stw	ra,24(sp)
   17474:	df000515 	stw	fp,20(sp)
   17478:	df000504 	addi	fp,sp,20
   1747c:	e13ffe15 	stw	r4,-8(fp)
   17480:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
   17484:	00800404 	movi	r2,16
   17488:	e0bffb0d 	sth	r2,-20(fp)
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
   1748c:	e0bffe17 	ldw	r2,-8(fp)
   17490:	1080028b 	ldhu	r2,10(r2)
   17494:	10bfffcc 	andi	r2,r2,65535
   17498:	10800468 	cmpgeui	r2,r2,17
   1749c:	1000111e 	bne	r2,zero,174e4 <ethernet_input+0x78>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
   174a0:	00800134 	movhi	r2,4
   174a4:	10932304 	addi	r2,r2,19596
   174a8:	10800a0b 	ldhu	r2,40(r2)
   174ac:	10800044 	addi	r2,r2,1
   174b0:	1007883a 	mov	r3,r2
   174b4:	00800134 	movhi	r2,4
   174b8:	10932304 	addi	r2,r2,19596
   174bc:	10c00a0d 	sth	r3,40(r2)
    ETHARP_STATS_INC(etharp.drop);
   174c0:	00800134 	movhi	r2,4
   174c4:	10932304 	addi	r2,r2,19596
   174c8:	1080078b 	ldhu	r2,30(r2)
   174cc:	10800044 	addi	r2,r2,1
   174d0:	1007883a 	mov	r3,r2
   174d4:	00800134 	movhi	r2,4
   174d8:	10932304 	addi	r2,r2,19596
   174dc:	10c0078d 	sth	r3,30(r2)
    goto free_and_return;
   174e0:	00007406 	br	176b4 <ethernet_input+0x248>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
   174e4:	e0bffe17 	ldw	r2,-8(fp)
   174e8:	10800117 	ldw	r2,4(r2)
   174ec:	e0bffc15 	stw	r2,-16(fp)
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
   174f0:	e0bffc17 	ldw	r2,-16(fp)
   174f4:	1080038b 	ldhu	r2,14(r2)
   174f8:	e0bffd0d 	sth	r2,-12(fp)

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
   174fc:	e0bffc17 	ldw	r2,-16(fp)
   17500:	10800083 	ldbu	r2,2(r2)
   17504:	10803fcc 	andi	r2,r2,255
   17508:	1080004c 	andi	r2,r2,1
   1750c:	10002226 	beq	r2,zero,17598 <ethernet_input+0x12c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
   17510:	e0bffc17 	ldw	r2,-16(fp)
   17514:	10800083 	ldbu	r2,2(r2)
   17518:	10803fcc 	andi	r2,r2,255
   1751c:	10800058 	cmpnei	r2,r2,1
   17520:	1000101e 	bne	r2,zero,17564 <ethernet_input+0xf8>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
   17524:	e0bffc17 	ldw	r2,-16(fp)
   17528:	108000c3 	ldbu	r2,3(r2)
   1752c:	10803fcc 	andi	r2,r2,255
   17530:	1000191e 	bne	r2,zero,17598 <ethernet_input+0x12c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
   17534:	e0bffc17 	ldw	r2,-16(fp)
   17538:	10800103 	ldbu	r2,4(r2)
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
   1753c:	10803fcc 	andi	r2,r2,255
   17540:	10801798 	cmpnei	r2,r2,94
   17544:	1000141e 	bne	r2,zero,17598 <ethernet_input+0x12c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
   17548:	e0bffe17 	ldw	r2,-8(fp)
   1754c:	10800343 	ldbu	r2,13(r2)
   17550:	10800414 	ori	r2,r2,16
   17554:	1007883a 	mov	r3,r2
   17558:	e0bffe17 	ldw	r2,-8(fp)
   1755c:	10c00345 	stb	r3,13(r2)
   17560:	00000d06 	br	17598 <ethernet_input+0x12c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
   17564:	e0bffc17 	ldw	r2,-16(fp)
   17568:	10800084 	addi	r2,r2,2
   1756c:	1009883a 	mov	r4,r2
   17570:	d1600784 	addi	r5,gp,-32738
   17574:	01800184 	movi	r6,6
   17578:	00179c80 	call	179c8 <memcmp>
   1757c:	1000061e 	bne	r2,zero,17598 <ethernet_input+0x12c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
   17580:	e0bffe17 	ldw	r2,-8(fp)
   17584:	10800343 	ldbu	r2,13(r2)
   17588:	10800214 	ori	r2,r2,8
   1758c:	1007883a 	mov	r3,r2
   17590:	e0bffe17 	ldw	r2,-8(fp)
   17594:	10c00345 	stb	r3,13(r2)
    }
  }

  switch (type) {
   17598:	e0bffd0b 	ldhu	r2,-12(fp)
   1759c:	10c00220 	cmpeqi	r3,r2,8
   175a0:	1800031e 	bne	r3,zero,175b0 <ethernet_input+0x144>
   175a4:	10818220 	cmpeqi	r2,r2,1544
   175a8:	1000201e 	bne	r2,zero,1762c <ethernet_input+0x1c0>
   175ac:	00002b06 	br	1765c <ethernet_input+0x1f0>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
   175b0:	e0bfff17 	ldw	r2,-4(fp)
   175b4:	10800b43 	ldbu	r2,45(r2)
   175b8:	10803fcc 	andi	r2,r2,255
   175bc:	1080080c 	andi	r2,r2,32
   175c0:	10003926 	beq	r2,zero,176a8 <ethernet_input+0x23c>
        goto free_and_return;
      }
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
   175c4:	e13fff17 	ldw	r4,-4(fp)
   175c8:	e17ffe17 	ldw	r5,-8(fp)
   175cc:	00163f80 	call	163f8 <etharp_ip_input>
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
   175d0:	e0bffb0b 	ldhu	r2,-20(fp)
   175d4:	0085c83a 	sub	r2,zero,r2
   175d8:	10bfffcc 	andi	r2,r2,65535
   175dc:	10a0001c 	xori	r2,r2,32768
   175e0:	10a00004 	addi	r2,r2,-32768
   175e4:	e13ffe17 	ldw	r4,-8(fp)
   175e8:	100b883a 	mov	r5,r2
   175ec:	000a2280 	call	a228 <pbuf_header>
   175f0:	10803fcc 	andi	r2,r2,255
   175f4:	10000926 	beq	r2,zero,1761c <ethernet_input+0x1b0>
        LWIP_ASSERT("Can't move over header in packet", 0);
   175f8:	010000f4 	movhi	r4,3
   175fc:	21018304 	addi	r4,r4,1548
   17600:	014000f4 	movhi	r5,3
   17604:	29421a04 	addi	r5,r5,2152
   17608:	018153c4 	movi	r6,1359
   1760c:	01c000f4 	movhi	r7,3
   17610:	39c19004 	addi	r7,r7,1600
   17614:	0017c440 	call	17c44 <printf>
   17618:	003fff06 	br	17618 <ethernet_input+0x1ac>
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
   1761c:	e13ffe17 	ldw	r4,-8(fp)
   17620:	e17fff17 	ldw	r5,-4(fp)
   17624:	0005d340 	call	5d34 <ip_input>
      }
      break;
   17628:	00001d06 	br	176a0 <ethernet_input+0x234>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
   1762c:	e0bfff17 	ldw	r2,-4(fp)
   17630:	10800b43 	ldbu	r2,45(r2)
   17634:	10803fcc 	andi	r2,r2,255
   17638:	1080080c 	andi	r2,r2,32
   1763c:	10001c26 	beq	r2,zero,176b0 <ethernet_input+0x244>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
   17640:	e0bfff17 	ldw	r2,-4(fp)
   17644:	108009c4 	addi	r2,r2,39
   17648:	e13fff17 	ldw	r4,-4(fp)
   1764c:	100b883a 	mov	r5,r2
   17650:	e1bffe17 	ldw	r6,-8(fp)
   17654:	00164c00 	call	164c0 <etharp_arp_input>
      break;
   17658:	00001106 	br	176a0 <ethernet_input+0x234>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
   1765c:	00800134 	movhi	r2,4
   17660:	10932304 	addi	r2,r2,19596
   17664:	10800a0b 	ldhu	r2,40(r2)
   17668:	10800044 	addi	r2,r2,1
   1766c:	1007883a 	mov	r3,r2
   17670:	00800134 	movhi	r2,4
   17674:	10932304 	addi	r2,r2,19596
   17678:	10c00a0d 	sth	r3,40(r2)
      ETHARP_STATS_INC(etharp.drop);
   1767c:	00800134 	movhi	r2,4
   17680:	10932304 	addi	r2,r2,19596
   17684:	1080078b 	ldhu	r2,30(r2)
   17688:	10800044 	addi	r2,r2,1
   1768c:	1007883a 	mov	r3,r2
   17690:	00800134 	movhi	r2,4
   17694:	10932304 	addi	r2,r2,19596
   17698:	10c0078d 	sth	r3,30(r2)
      goto free_and_return;
   1769c:	00000506 	br	176b4 <ethernet_input+0x248>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
   176a0:	0005883a 	mov	r2,zero
   176a4:	00000606 	br	176c0 <ethernet_input+0x254>
  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
   176a8:	0001883a 	nop
   176ac:	00000106 	br	176b4 <ethernet_input+0x248>
      }
      break;
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
   176b0:	0001883a 	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
   176b4:	e13ffe17 	ldw	r4,-8(fp)
   176b8:	000a4200 	call	a420 <pbuf_free>
  return ERR_OK;
   176bc:	0005883a 	mov	r2,zero
}
   176c0:	e037883a 	mov	sp,fp
   176c4:	dfc00117 	ldw	ra,4(sp)
   176c8:	df000017 	ldw	fp,0(sp)
   176cc:	dec00204 	addi	sp,sp,8
   176d0:	f800283a 	ret

000176d4 <lwipAlarmCallback>:
static alt_u32  lwipTicksPer250mS;
static alt_u32  lwip250mStimer;

//  Alarm callback function.
alt_u32 lwipAlarmCallback(void* context)
{
   176d4:	defffe04 	addi	sp,sp,-8
   176d8:	df000115 	stw	fp,4(sp)
   176dc:	df000104 	addi	fp,sp,4
   176e0:	e13fff15 	stw	r4,-4(fp)
    lwipProcessTimerFlag = 1;          //  Set flag to process timers
   176e4:	00800044 	movi	r2,1
   176e8:	d0a8c715 	stw	r2,-23780(gp)
    return lwipTicksPer250mS;
   176ec:	d0a8c817 	ldw	r2,-23776(gp)
}
   176f0:	e037883a 	mov	sp,fp
   176f4:	df000017 	ldw	fp,0(sp)
   176f8:	dec00104 	addi	sp,sp,4
   176fc:	f800283a 	ret

00017700 <main>:

//  Define netif for lwIP
struct netif    alteraTseNetif;

int main()
{
   17700:	defffb04 	addi	sp,sp,-20
   17704:	dfc00415 	stw	ra,16(sp)
   17708:	df000315 	stw	fp,12(sp)
   1770c:	df000304 	addi	fp,sp,12
static struct ip_addr   ip_zero = { 0 };
void httpd_init(void);

    printf("Running...\n");
   17710:	010000f4 	movhi	r4,3
   17714:	21022304 	addi	r4,r4,2188
   17718:	0017eb00 	call	17eb0 <puts>
    lwip250mStimer = 0;
   1771c:	d028c915 	stw	zero,-23772(gp)
    lwipProcessTimerFlag = 0;
   17720:	d028c715 	stw	zero,-23780(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17724:	008000f4 	movhi	r2,3
   17728:	109bfe04 	addi	r2,r2,28664
   1772c:	10800017 	ldw	r2,0(r2)
    lwipTicksPer250mS = alt_ticks_per_second() / 4;
   17730:	1004d0ba 	srli	r2,r2,2
   17734:	d0a8c815 	stw	r2,-23776(gp)
    if (alt_alarm_start (&lwipAlarm, lwipTicksPer250mS, lwipAlarmCallback, NULL) < 0)
   17738:	d0a8c817 	ldw	r2,-23776(gp)
   1773c:	01000134 	movhi	r4,4
   17740:	21113104 	addi	r4,r4,17604
   17744:	100b883a 	mov	r5,r2
   17748:	01800074 	movhi	r6,1
   1774c:	319db504 	addi	r6,r6,30420
   17750:	000f883a 	mov	r7,zero
   17754:	00211140 	call	21114 <alt_alarm_start>
   17758:	1000040e 	bge	r2,zero,1776c <main+0x6c>
        {
        printf ("System clock is required!\n");
   1775c:	010000f4 	movhi	r4,3
   17760:	21022604 	addi	r4,r4,2200
   17764:	0017eb00 	call	17eb0 <puts>
        for(;;);
   17768:	003fff06 	br	17768 <main+0x68>
        }
    
    //  Load platform specific MAC address into netif
    alteraTseNetif.hwaddr[0] = 0x00;
   1776c:	00800134 	movhi	r2,4
   17770:	10936b04 	addi	r2,r2,19884
   17774:	100009c5 	stb	zero,39(r2)
    alteraTseNetif.hwaddr[1] = 0x07;
   17778:	00800134 	movhi	r2,4
   1777c:	10936b04 	addi	r2,r2,19884
   17780:	00c001c4 	movi	r3,7
   17784:	10c00a05 	stb	r3,40(r2)
    alteraTseNetif.hwaddr[2] = 0xab;
   17788:	00800134 	movhi	r2,4
   1778c:	10936b04 	addi	r2,r2,19884
   17790:	00ffeac4 	movi	r3,-85
   17794:	10c00a45 	stb	r3,41(r2)
    alteraTseNetif.hwaddr[3] = 0xf0;
   17798:	00800134 	movhi	r2,4
   1779c:	10936b04 	addi	r2,r2,19884
   177a0:	00fffc04 	movi	r3,-16
   177a4:	10c00a85 	stb	r3,42(r2)
    alteraTseNetif.hwaddr[4] = 0x0d;
   177a8:	00800134 	movhi	r2,4
   177ac:	10936b04 	addi	r2,r2,19884
   177b0:	00c00344 	movi	r3,13
   177b4:	10c00ac5 	stb	r3,43(r2)
    alteraTseNetif.hwaddr[5] = 0xba;
   177b8:	00800134 	movhi	r2,4
   177bc:	10936b04 	addi	r2,r2,19884
   177c0:	00ffee84 	movi	r3,-70
   177c4:	10c00b05 	stb	r3,44(r2)

    //  Initialize lwIP, Altera TSE and the ethernetif
    lwip_init();
   177c8:	0004dac0 	call	4dac <lwip_init>
    if(netif_add(&alteraTseNetif, &ip_zero, &ip_zero, &ip_zero, alteraTseNetif.state, ethernetif_init, ethernet_input) == NULL)
   177cc:	00800134 	movhi	r2,4
   177d0:	10936b04 	addi	r2,r2,19884
   177d4:	10800717 	ldw	r2,28(r2)
   177d8:	d8800015 	stw	r2,0(sp)
   177dc:	00800034 	movhi	r2,0
   177e0:	10810604 	addi	r2,r2,1048
   177e4:	d8800115 	stw	r2,4(sp)
   177e8:	00800074 	movhi	r2,1
   177ec:	109d1b04 	addi	r2,r2,29804
   177f0:	d8800215 	stw	r2,8(sp)
   177f4:	01000134 	movhi	r4,4
   177f8:	21136b04 	addi	r4,r4,19884
   177fc:	d168ca04 	addi	r5,gp,-23768
   17800:	d1a8ca04 	addi	r6,gp,-23768
   17804:	d1e8ca04 	addi	r7,gp,-23768
   17808:	00092d40 	call	92d4 <netif_add>
   1780c:	1000041e 	bne	r2,zero,17820 <main+0x120>
        {
        printf( "Fatal error initializing...\n" );
   17810:	010000f4 	movhi	r4,3
   17814:	21022d04 	addi	r4,r4,2228
   17818:	0017eb00 	call	17eb0 <puts>
        for(;;);
   1781c:	003fff06 	br	1781c <main+0x11c>
        }
    netif_set_default(&alteraTseNetif);
   17820:	01000134 	movhi	r4,4
   17824:	21136b04 	addi	r4,r4,19884
   17828:	00097a40 	call	97a4 <netif_set_default>
    
    // Initialize Altera TSE in a loop if waiting for a link
    printf("Waiting for link...");
   1782c:	010000f4 	movhi	r4,3
   17830:	21023404 	addi	r4,r4,2256
   17834:	0017c440 	call	17c44 <printf>
    while(((struct ethernetif *) alteraTseNetif.state)->link_alive!=1)
   17838:	00001006 	br	1787c <main+0x17c>
        {
        mSdelay(1000);
   1783c:	010003f4 	movhi	r4,15
   17840:	21109004 	addi	r4,r4,16960
   17844:	0021d7c0 	call	21d7c <usleep>
        putchar('.');
   17848:	008000f4 	movhi	r2,3
   1784c:	10933404 	addi	r2,r2,19664
   17850:	10800017 	ldw	r2,0(r2)
   17854:	10800217 	ldw	r2,8(r2)
   17858:	01000b84 	movi	r4,46
   1785c:	100b883a 	mov	r5,r2
   17860:	0017d3c0 	call	17d3c <putc>
        tse_mac_init(0, alteraTseNetif.state);
   17864:	00800134 	movhi	r2,4
   17868:	10936b04 	addi	r2,r2,19884
   1786c:	10800717 	ldw	r2,28(r2)
   17870:	0009883a 	mov	r4,zero
   17874:	100b883a 	mov	r5,r2
   17878:	0000ca40 	call	ca4 <tse_mac_init>
        }
    netif_set_default(&alteraTseNetif);
    
    // Initialize Altera TSE in a loop if waiting for a link
    printf("Waiting for link...");
    while(((struct ethernetif *) alteraTseNetif.state)->link_alive!=1)
   1787c:	00800134 	movhi	r2,4
   17880:	10936b04 	addi	r2,r2,19884
   17884:	10800717 	ldw	r2,28(r2)
   17888:	10800217 	ldw	r2,8(r2)
   1788c:	10800058 	cmpnei	r2,r2,1
   17890:	103fea1e 	bne	r2,zero,1783c <main+0x13c>
        {
        mSdelay(1000);
        putchar('.');
        tse_mac_init(0, alteraTseNetif.state);
        }
    printf("OK\n");
   17894:	010000f4 	movhi	r4,3
   17898:	21023904 	addi	r4,r4,2276
   1789c:	0017eb00 	call	17eb0 <puts>
            lwipProcessTimers();
        //  Poll lwIP for incoming packets.
        ethernetif_input(&alteraTseNetif);
        }
#else
    STATIC_IP;
   178a0:	008802f4 	movhi	r2,8203
   178a4:	10862b04 	addi	r2,r2,6316
   178a8:	d0a8cb15 	stw	r2,-23764(gp)
    netif_set_ipaddr(&alteraTseNetif, &lwipStaticIp);
   178ac:	01000134 	movhi	r4,4
   178b0:	21136b04 	addi	r4,r4,19884
   178b4:	d168cb04 	addi	r5,gp,-23764
   178b8:	00095e80 	call	95e8 <netif_set_ipaddr>
    netif_set_up(&alteraTseNetif);
   178bc:	01000134 	movhi	r4,4
   178c0:	21136b04 	addi	r4,r4,19884
   178c4:	00097cc0 	call	97cc <netif_set_up>
#endif
    printf("IP address: %s\n", ip_ntoa(&alteraTseNetif.ip_addr));
   178c8:	01000134 	movhi	r4,4
   178cc:	21136c04 	addi	r4,r4,19888
   178d0:	0006d8c0 	call	6d8c <ipaddr_ntoa>
   178d4:	010000f4 	movhi	r4,3
   178d8:	21023a04 	addi	r4,r4,2280
   178dc:	100b883a 	mov	r5,r2
   178e0:	0017c440 	call	17c44 <printf>

#if BUILD_HTTPD
    httpd_init();
   178e4:	0000c380 	call	c38 <httpd_init>
#endif
    //  This is the main loop for lwIP - other processing can be done by calling application functions.
    for(;;)
        {
        //  Process lwIP timer dependent code
        if(lwipProcessTimerFlag)
   178e8:	d0a8c717 	ldw	r2,-23780(gp)
   178ec:	10000126 	beq	r2,zero,178f4 <main+0x1f4>
            lwipProcessTimers();
   178f0:	00179040 	call	17904 <lwipProcessTimers>
        //  Poll lwIP for incoming packets.
        ethernetif_input(&alteraTseNetif);
   178f4:	01000134 	movhi	r4,4
   178f8:	21136b04 	addi	r4,r4,19884
   178fc:	00003340 	call	334 <ethernetif_input>
        }
   17900:	003ff906 	br	178e8 <main+0x1e8>

00017904 <lwipProcessTimers>:
    return 0;
}

//  Run this every 250mS to update lwIP timers
void        lwipProcessTimers(void)
{
   17904:	defffe04 	addi	sp,sp,-8
   17908:	dfc00115 	stw	ra,4(sp)
   1790c:	df000015 	stw	fp,0(sp)
   17910:	d839883a 	mov	fp,sp
    lwipProcessTimerFlag = 0;
   17914:	d028c715 	stw	zero,-23780(gp)
    lwip250mStimer += 250;
   17918:	d0a8c917 	ldw	r2,-23772(gp)
   1791c:	10803e84 	addi	r2,r2,250
   17920:	d0a8c915 	stw	r2,-23772(gp)
    if( (lwip250mStimer % TCP_TMR_INTERVAL) == 0 ) { tcp_tmr(); }
   17924:	d0a8c917 	ldw	r2,-23772(gp)
   17928:	00c03e84 	movi	r3,250
   1792c:	10c7203a 	divu	r3,r2,r3
   17930:	18c03ea4 	muli	r3,r3,250
   17934:	10c5c83a 	sub	r2,r2,r3
   17938:	1000011e 	bne	r2,zero,17940 <lwipProcessTimers+0x3c>
   1793c:	000b8600 	call	b860 <tcp_tmr>
    if( (lwip250mStimer % ARP_TMR_INTERVAL) == 0 ) { etharp_tmr(); }
   17940:	d0a8c917 	ldw	r2,-23772(gp)
   17944:	00c4e204 	movi	r3,5000
   17948:	10c7203a 	divu	r3,r2,r3
   1794c:	18c4e224 	muli	r3,r3,5000
   17950:	10c5c83a 	sub	r2,r2,r3
   17954:	1000011e 	bne	r2,zero,1795c <lwipProcessTimers+0x58>
   17958:	00159cc0 	call	159cc <etharp_tmr>
#if IP_REASSEMBLY
    if( (lwip250mStimer % IP_TMR_INTERVAL) == 0 ) { ip_reass_tmr(); }
   1795c:	d0a8c917 	ldw	r2,-23772(gp)
   17960:	00c0fa04 	movi	r3,1000
   17964:	10c7203a 	divu	r3,r2,r3
   17968:	18c0fa24 	muli	r3,r3,1000
   1796c:	10c5c83a 	sub	r2,r2,r3
   17970:	1000011e 	bne	r2,zero,17978 <lwipProcessTimers+0x74>
   17974:	0006f780 	call	6f78 <ip_reass_tmr>
#endif
#if LWIP_IGMP
    if( (lwip250mStimer % IGMP_TMR_INTERVAL ) == 0 ) { igmp_tmr(); } 
#endif
#if LWIP_DHCP
    if( (lwip250mStimer % DHCP_FINE_TIMER_MSECS ) == 0 ) { dhcp_fine_tmr(); }
   17978:	d0a8c917 	ldw	r2,-23772(gp)
   1797c:	00c07d04 	movi	r3,500
   17980:	10c7203a 	divu	r3,r2,r3
   17984:	18c07d24 	muli	r3,r3,500
   17988:	10c5c83a 	sub	r2,r2,r3
   1798c:	1000011e 	bne	r2,zero,17994 <lwipProcessTimers+0x90>
   17990:	0001e5c0 	call	1e5c <dhcp_fine_tmr>
    if( (lwip250mStimer % (DHCP_COARSE_TIMER_SECS*1000) ) == 0 ) { dhcp_coarse_tmr(); }
   17994:	d0a8c917 	ldw	r2,-23772(gp)
   17998:	00fa9814 	movui	r3,60000
   1799c:	10c9203a 	divu	r4,r2,r3
   179a0:	00fa9814 	movui	r3,60000
   179a4:	20c7383a 	mul	r3,r4,r3
   179a8:	10c5c83a 	sub	r2,r2,r3
   179ac:	1000011e 	bne	r2,zero,179b4 <lwipProcessTimers+0xb0>
   179b0:	0001da80 	call	1da8 <dhcp_coarse_tmr>
#endif
#if LWIP_DNS
    if( (lwip250mStimer % DNS_TMR_INTERVAL) == 0 ) { dns_tmr(); }
#endif
}
   179b4:	e037883a 	mov	sp,fp
   179b8:	dfc00117 	ldw	ra,4(sp)
   179bc:	df000017 	ldw	fp,0(sp)
   179c0:	dec00204 	addi	sp,sp,8
   179c4:	f800283a 	ret

000179c8 <memcmp>:
   179c8:	01c000c4 	movi	r7,3
   179cc:	3980192e 	bgeu	r7,r6,17a34 <memcmp+0x6c>
   179d0:	2904b03a 	or	r2,r5,r4
   179d4:	11c4703a 	and	r2,r2,r7
   179d8:	10000f26 	beq	r2,zero,17a18 <memcmp+0x50>
   179dc:	20c00003 	ldbu	r3,0(r4)
   179e0:	28800003 	ldbu	r2,0(r5)
   179e4:	1880151e 	bne	r3,r2,17a3c <memcmp+0x74>
   179e8:	31bfff84 	addi	r6,r6,-2
   179ec:	01ffffc4 	movi	r7,-1
   179f0:	00000406 	br	17a04 <memcmp+0x3c>
   179f4:	20c00003 	ldbu	r3,0(r4)
   179f8:	28800003 	ldbu	r2,0(r5)
   179fc:	31bfffc4 	addi	r6,r6,-1
   17a00:	18800e1e 	bne	r3,r2,17a3c <memcmp+0x74>
   17a04:	21000044 	addi	r4,r4,1
   17a08:	29400044 	addi	r5,r5,1
   17a0c:	31fff91e 	bne	r6,r7,179f4 <memcmp+0x2c>
   17a10:	0005883a 	mov	r2,zero
   17a14:	f800283a 	ret
   17a18:	20c00017 	ldw	r3,0(r4)
   17a1c:	28800017 	ldw	r2,0(r5)
   17a20:	1880041e 	bne	r3,r2,17a34 <memcmp+0x6c>
   17a24:	31bfff04 	addi	r6,r6,-4
   17a28:	21000104 	addi	r4,r4,4
   17a2c:	29400104 	addi	r5,r5,4
   17a30:	39bff936 	bltu	r7,r6,17a18 <memcmp+0x50>
   17a34:	303fe91e 	bne	r6,zero,179dc <memcmp+0x14>
   17a38:	003ff506 	br	17a10 <memcmp+0x48>
   17a3c:	1885c83a 	sub	r2,r3,r2
   17a40:	f800283a 	ret

00017a44 <memcpy>:
   17a44:	00c003c4 	movi	r3,15
   17a48:	2005883a 	mov	r2,r4
   17a4c:	3009883a 	mov	r4,r6
   17a50:	1980032e 	bgeu	r3,r6,17a60 <memcpy+0x1c>
   17a54:	2886b03a 	or	r3,r5,r2
   17a58:	18c000cc 	andi	r3,r3,3
   17a5c:	18000926 	beq	r3,zero,17a84 <memcpy+0x40>
   17a60:	1007883a 	mov	r3,r2
   17a64:	290f883a 	add	r7,r5,r4
   17a68:	20000526 	beq	r4,zero,17a80 <memcpy+0x3c>
   17a6c:	29800003 	ldbu	r6,0(r5)
   17a70:	18c00044 	addi	r3,r3,1
   17a74:	29400044 	addi	r5,r5,1
   17a78:	19bfffc5 	stb	r6,-1(r3)
   17a7c:	29fffb1e 	bne	r5,r7,17a6c <memcpy+0x28>
   17a80:	f800283a 	ret
   17a84:	327ffc04 	addi	r9,r6,-16
   17a88:	4812d13a 	srli	r9,r9,4
   17a8c:	11000404 	addi	r4,r2,16
   17a90:	1007883a 	mov	r3,r2
   17a94:	4810913a 	slli	r8,r9,4
   17a98:	280f883a 	mov	r7,r5
   17a9c:	2209883a 	add	r4,r4,r8
   17aa0:	3a000017 	ldw	r8,0(r7)
   17aa4:	18c00404 	addi	r3,r3,16
   17aa8:	39c00404 	addi	r7,r7,16
   17aac:	1a3ffc15 	stw	r8,-16(r3)
   17ab0:	3a3ffd17 	ldw	r8,-12(r7)
   17ab4:	1a3ffd15 	stw	r8,-12(r3)
   17ab8:	3a3ffe17 	ldw	r8,-8(r7)
   17abc:	1a3ffe15 	stw	r8,-8(r3)
   17ac0:	3a3fff17 	ldw	r8,-4(r7)
   17ac4:	1a3fff15 	stw	r8,-4(r3)
   17ac8:	193ff51e 	bne	r3,r4,17aa0 <memcpy+0x5c>
   17acc:	49c00044 	addi	r7,r9,1
   17ad0:	380e913a 	slli	r7,r7,4
   17ad4:	310003cc 	andi	r4,r6,15
   17ad8:	018000c4 	movi	r6,3
   17adc:	11c7883a 	add	r3,r2,r7
   17ae0:	29cb883a 	add	r5,r5,r7
   17ae4:	313fdf2e 	bgeu	r6,r4,17a64 <memcpy+0x20>
   17ae8:	213fff04 	addi	r4,r4,-4
   17aec:	2014d0ba 	srli	r10,r4,2
   17af0:	1a400104 	addi	r9,r3,4
   17af4:	180d883a 	mov	r6,r3
   17af8:	528f883a 	add	r7,r10,r10
   17afc:	39cf883a 	add	r7,r7,r7
   17b00:	49d3883a 	add	r9,r9,r7
   17b04:	280f883a 	mov	r7,r5
   17b08:	3a000017 	ldw	r8,0(r7)
   17b0c:	31800104 	addi	r6,r6,4
   17b10:	39c00104 	addi	r7,r7,4
   17b14:	323fff15 	stw	r8,-4(r6)
   17b18:	327ffb1e 	bne	r6,r9,17b08 <memcpy+0xc4>
   17b1c:	51800044 	addi	r6,r10,1
   17b20:	52bfff24 	muli	r10,r10,-4
   17b24:	318d883a 	add	r6,r6,r6
   17b28:	318d883a 	add	r6,r6,r6
   17b2c:	5109883a 	add	r4,r10,r4
   17b30:	298b883a 	add	r5,r5,r6
   17b34:	1987883a 	add	r3,r3,r6
   17b38:	003fca06 	br	17a64 <memcpy+0x20>

00017b3c <memset>:
   17b3c:	00c000c4 	movi	r3,3
   17b40:	2005883a 	mov	r2,r4
   17b44:	29403fcc 	andi	r5,r5,255
   17b48:	19802d2e 	bgeu	r3,r6,17c00 <memset+0xc4>
   17b4c:	20c6703a 	and	r3,r4,r3
   17b50:	18002e1e 	bne	r3,zero,17c0c <memset+0xd0>
   17b54:	2806923a 	slli	r3,r5,8
   17b58:	010003c4 	movi	r4,15
   17b5c:	3011883a 	mov	r8,r6
   17b60:	1946b03a 	or	r3,r3,r5
   17b64:	180e943a 	slli	r7,r3,16
   17b68:	38ceb03a 	or	r7,r7,r3
   17b6c:	1007883a 	mov	r3,r2
   17b70:	21800f2e 	bgeu	r4,r6,17bb0 <memset+0x74>
   17b74:	19c00015 	stw	r7,0(r3)
   17b78:	19c00115 	stw	r7,4(r3)
   17b7c:	19c00215 	stw	r7,8(r3)
   17b80:	19c00315 	stw	r7,12(r3)
   17b84:	423ffc04 	addi	r8,r8,-16
   17b88:	18c00404 	addi	r3,r3,16
   17b8c:	223ff936 	bltu	r4,r8,17b74 <memset+0x38>
   17b90:	30fffc04 	addi	r3,r6,-16
   17b94:	1806d13a 	srli	r3,r3,4
   17b98:	318003cc 	andi	r6,r6,15
   17b9c:	010000c4 	movi	r4,3
   17ba0:	18c00044 	addi	r3,r3,1
   17ba4:	1806913a 	slli	r3,r3,4
   17ba8:	10c7883a 	add	r3,r2,r3
   17bac:	21800e2e 	bgeu	r4,r6,17be8 <memset+0xac>
   17bb0:	1813883a 	mov	r9,r3
   17bb4:	3011883a 	mov	r8,r6
   17bb8:	010000c4 	movi	r4,3
   17bbc:	49c00015 	stw	r7,0(r9)
   17bc0:	423fff04 	addi	r8,r8,-4
   17bc4:	4a400104 	addi	r9,r9,4
   17bc8:	223ffc36 	bltu	r4,r8,17bbc <memset+0x80>
   17bcc:	313fff04 	addi	r4,r6,-4
   17bd0:	2008d0ba 	srli	r4,r4,2
   17bd4:	318000cc 	andi	r6,r6,3
   17bd8:	21000044 	addi	r4,r4,1
   17bdc:	2109883a 	add	r4,r4,r4
   17be0:	2109883a 	add	r4,r4,r4
   17be4:	1907883a 	add	r3,r3,r4
   17be8:	30000a26 	beq	r6,zero,17c14 <memset+0xd8>
   17bec:	198d883a 	add	r6,r3,r6
   17bf0:	19400005 	stb	r5,0(r3)
   17bf4:	18c00044 	addi	r3,r3,1
   17bf8:	19bffd1e 	bne	r3,r6,17bf0 <memset+0xb4>
   17bfc:	f800283a 	ret
   17c00:	2007883a 	mov	r3,r4
   17c04:	303ff91e 	bne	r6,zero,17bec <memset+0xb0>
   17c08:	00000206 	br	17c14 <memset+0xd8>
   17c0c:	2007883a 	mov	r3,r4
   17c10:	003ff606 	br	17bec <memset+0xb0>
   17c14:	f800283a 	ret

00017c18 <_printf_r>:
   17c18:	defffd04 	addi	sp,sp,-12
   17c1c:	dfc00015 	stw	ra,0(sp)
   17c20:	d9800115 	stw	r6,4(sp)
   17c24:	d9c00215 	stw	r7,8(sp)
   17c28:	280d883a 	mov	r6,r5
   17c2c:	21400217 	ldw	r5,8(r4)
   17c30:	d9c00104 	addi	r7,sp,4
   17c34:	00181240 	call	18124 <___vfprintf_internal_r>
   17c38:	dfc00017 	ldw	ra,0(sp)
   17c3c:	dec00304 	addi	sp,sp,12
   17c40:	f800283a 	ret

00017c44 <printf>:
   17c44:	defffc04 	addi	sp,sp,-16
   17c48:	dfc00015 	stw	ra,0(sp)
   17c4c:	d9400115 	stw	r5,4(sp)
   17c50:	d9800215 	stw	r6,8(sp)
   17c54:	d9c00315 	stw	r7,12(sp)
   17c58:	008000f4 	movhi	r2,3
   17c5c:	10933404 	addi	r2,r2,19664
   17c60:	10800017 	ldw	r2,0(r2)
   17c64:	200b883a 	mov	r5,r4
   17c68:	d9800104 	addi	r6,sp,4
   17c6c:	11000217 	ldw	r4,8(r2)
   17c70:	0019f1c0 	call	19f1c <__vfprintf_internal>
   17c74:	dfc00017 	ldw	ra,0(sp)
   17c78:	dec00404 	addi	sp,sp,16
   17c7c:	f800283a 	ret

00017c80 <_putc_r>:
   17c80:	defffc04 	addi	sp,sp,-16
   17c84:	dc000215 	stw	r16,8(sp)
   17c88:	dfc00315 	stw	ra,12(sp)
   17c8c:	2021883a 	mov	r16,r4
   17c90:	20000226 	beq	r4,zero,17c9c <_putc_r+0x1c>
   17c94:	20800e17 	ldw	r2,56(r4)
   17c98:	10001d26 	beq	r2,zero,17d10 <_putc_r+0x90>
   17c9c:	30800217 	ldw	r2,8(r6)
   17ca0:	10bfffc4 	addi	r2,r2,-1
   17ca4:	30800215 	stw	r2,8(r6)
   17ca8:	10000a16 	blt	r2,zero,17cd4 <_putc_r+0x54>
   17cac:	30800017 	ldw	r2,0(r6)
   17cb0:	11400005 	stb	r5,0(r2)
   17cb4:	30800017 	ldw	r2,0(r6)
   17cb8:	10c00044 	addi	r3,r2,1
   17cbc:	10800003 	ldbu	r2,0(r2)
   17cc0:	30c00015 	stw	r3,0(r6)
   17cc4:	dfc00317 	ldw	ra,12(sp)
   17cc8:	dc000217 	ldw	r16,8(sp)
   17ccc:	dec00404 	addi	sp,sp,16
   17cd0:	f800283a 	ret
   17cd4:	30c00617 	ldw	r3,24(r6)
   17cd8:	10c01316 	blt	r2,r3,17d28 <_putc_r+0xa8>
   17cdc:	30800017 	ldw	r2,0(r6)
   17ce0:	01000284 	movi	r4,10
   17ce4:	11400005 	stb	r5,0(r2)
   17ce8:	30c00017 	ldw	r3,0(r6)
   17cec:	19400003 	ldbu	r5,0(r3)
   17cf0:	29000d26 	beq	r5,r4,17d28 <_putc_r+0xa8>
   17cf4:	18c00044 	addi	r3,r3,1
   17cf8:	2805883a 	mov	r2,r5
   17cfc:	30c00015 	stw	r3,0(r6)
   17d00:	dfc00317 	ldw	ra,12(sp)
   17d04:	dc000217 	ldw	r16,8(sp)
   17d08:	dec00404 	addi	sp,sp,16
   17d0c:	f800283a 	ret
   17d10:	d9400015 	stw	r5,0(sp)
   17d14:	d9800115 	stw	r6,4(sp)
   17d18:	001bcd80 	call	1bcd8 <__sinit>
   17d1c:	d9800117 	ldw	r6,4(sp)
   17d20:	d9400017 	ldw	r5,0(sp)
   17d24:	003fdd06 	br	17c9c <_putc_r+0x1c>
   17d28:	8009883a 	mov	r4,r16
   17d2c:	dfc00317 	ldw	ra,12(sp)
   17d30:	dc000217 	ldw	r16,8(sp)
   17d34:	dec00404 	addi	sp,sp,16
   17d38:	0019f401 	jmpi	19f40 <__swbuf_r>

00017d3c <putc>:
   17d3c:	defffc04 	addi	sp,sp,-16
   17d40:	dc400115 	stw	r17,4(sp)
   17d44:	044000f4 	movhi	r17,3
   17d48:	8c533404 	addi	r17,r17,19664
   17d4c:	88800017 	ldw	r2,0(r17)
   17d50:	dc800215 	stw	r18,8(sp)
   17d54:	dc000015 	stw	r16,0(sp)
   17d58:	dfc00315 	stw	ra,12(sp)
   17d5c:	2025883a 	mov	r18,r4
   17d60:	2821883a 	mov	r16,r5
   17d64:	10000226 	beq	r2,zero,17d70 <putc+0x34>
   17d68:	10c00e17 	ldw	r3,56(r2)
   17d6c:	18002126 	beq	r3,zero,17df4 <putc+0xb8>
   17d70:	80800217 	ldw	r2,8(r16)
   17d74:	10bfffc4 	addi	r2,r2,-1
   17d78:	80800215 	stw	r2,8(r16)
   17d7c:	10000c16 	blt	r2,zero,17db0 <putc+0x74>
   17d80:	80800017 	ldw	r2,0(r16)
   17d84:	14800005 	stb	r18,0(r2)
   17d88:	80800017 	ldw	r2,0(r16)
   17d8c:	10c00044 	addi	r3,r2,1
   17d90:	10800003 	ldbu	r2,0(r2)
   17d94:	80c00015 	stw	r3,0(r16)
   17d98:	dfc00317 	ldw	ra,12(sp)
   17d9c:	dc800217 	ldw	r18,8(sp)
   17da0:	dc400117 	ldw	r17,4(sp)
   17da4:	dc000017 	ldw	r16,0(sp)
   17da8:	dec00404 	addi	sp,sp,16
   17dac:	f800283a 	ret
   17db0:	80c00617 	ldw	r3,24(r16)
   17db4:	10c01216 	blt	r2,r3,17e00 <putc+0xc4>
   17db8:	80800017 	ldw	r2,0(r16)
   17dbc:	01000284 	movi	r4,10
   17dc0:	14800005 	stb	r18,0(r2)
   17dc4:	80c00017 	ldw	r3,0(r16)
   17dc8:	19400003 	ldbu	r5,0(r3)
   17dcc:	29001526 	beq	r5,r4,17e24 <putc+0xe8>
   17dd0:	18c00044 	addi	r3,r3,1
   17dd4:	2805883a 	mov	r2,r5
   17dd8:	80c00015 	stw	r3,0(r16)
   17ddc:	dfc00317 	ldw	ra,12(sp)
   17de0:	dc800217 	ldw	r18,8(sp)
   17de4:	dc400117 	ldw	r17,4(sp)
   17de8:	dc000017 	ldw	r16,0(sp)
   17dec:	dec00404 	addi	sp,sp,16
   17df0:	f800283a 	ret
   17df4:	1009883a 	mov	r4,r2
   17df8:	001bcd80 	call	1bcd8 <__sinit>
   17dfc:	003fdc06 	br	17d70 <putc+0x34>
   17e00:	89000017 	ldw	r4,0(r17)
   17e04:	900b883a 	mov	r5,r18
   17e08:	800d883a 	mov	r6,r16
   17e0c:	dfc00317 	ldw	ra,12(sp)
   17e10:	dc800217 	ldw	r18,8(sp)
   17e14:	dc400117 	ldw	r17,4(sp)
   17e18:	dc000017 	ldw	r16,0(sp)
   17e1c:	dec00404 	addi	sp,sp,16
   17e20:	0019f401 	jmpi	19f40 <__swbuf_r>
   17e24:	89000017 	ldw	r4,0(r17)
   17e28:	003ff706 	br	17e08 <putc+0xcc>

00017e2c <_puts_r>:
   17e2c:	defff604 	addi	sp,sp,-40
   17e30:	dc400815 	stw	r17,32(sp)
   17e34:	2023883a 	mov	r17,r4
   17e38:	2809883a 	mov	r4,r5
   17e3c:	dc000715 	stw	r16,28(sp)
   17e40:	dfc00915 	stw	ra,36(sp)
   17e44:	2821883a 	mov	r16,r5
   17e48:	0017f680 	call	17f68 <strlen>
   17e4c:	10c00044 	addi	r3,r2,1
   17e50:	d8800115 	stw	r2,4(sp)
   17e54:	89400217 	ldw	r5,8(r17)
   17e58:	008000f4 	movhi	r2,3
   17e5c:	10823f04 	addi	r2,r2,2300
   17e60:	d8800215 	stw	r2,8(sp)
   17e64:	00800044 	movi	r2,1
   17e68:	d8800315 	stw	r2,12(sp)
   17e6c:	8809883a 	mov	r4,r17
   17e70:	00800084 	movi	r2,2
   17e74:	d9800404 	addi	r6,sp,16
   17e78:	dc000015 	stw	r16,0(sp)
   17e7c:	d8c00615 	stw	r3,24(sp)
   17e80:	dec00415 	stw	sp,16(sp)
   17e84:	d8800515 	stw	r2,20(sp)
   17e88:	001c32c0 	call	1c32c <__sfvwrite_r>
   17e8c:	1000061e 	bne	r2,zero,17ea8 <_puts_r+0x7c>
   17e90:	00800284 	movi	r2,10
   17e94:	dfc00917 	ldw	ra,36(sp)
   17e98:	dc400817 	ldw	r17,32(sp)
   17e9c:	dc000717 	ldw	r16,28(sp)
   17ea0:	dec00a04 	addi	sp,sp,40
   17ea4:	f800283a 	ret
   17ea8:	00bfffc4 	movi	r2,-1
   17eac:	003ff906 	br	17e94 <_puts_r+0x68>

00017eb0 <puts>:
   17eb0:	008000f4 	movhi	r2,3
   17eb4:	10933404 	addi	r2,r2,19664
   17eb8:	200b883a 	mov	r5,r4
   17ebc:	11000017 	ldw	r4,0(r2)
   17ec0:	0017e2c1 	jmpi	17e2c <_puts_r>

00017ec4 <strcmp>:
   17ec4:	2904b03a 	or	r2,r5,r4
   17ec8:	108000cc 	andi	r2,r2,3
   17ecc:	1000171e 	bne	r2,zero,17f2c <strcmp+0x68>
   17ed0:	20800017 	ldw	r2,0(r4)
   17ed4:	28c00017 	ldw	r3,0(r5)
   17ed8:	10c0141e 	bne	r2,r3,17f2c <strcmp+0x68>
   17edc:	027fbff4 	movhi	r9,65279
   17ee0:	4a7fbfc4 	addi	r9,r9,-257
   17ee4:	1247883a 	add	r3,r2,r9
   17ee8:	0084303a 	nor	r2,zero,r2
   17eec:	1884703a 	and	r2,r3,r2
   17ef0:	02202074 	movhi	r8,32897
   17ef4:	42202004 	addi	r8,r8,-32640
   17ef8:	1204703a 	and	r2,r2,r8
   17efc:	10000226 	beq	r2,zero,17f08 <strcmp+0x44>
   17f00:	00001706 	br	17f60 <strcmp+0x9c>
   17f04:	3000161e 	bne	r6,zero,17f60 <strcmp+0x9c>
   17f08:	21000104 	addi	r4,r4,4
   17f0c:	20800017 	ldw	r2,0(r4)
   17f10:	29400104 	addi	r5,r5,4
   17f14:	28c00017 	ldw	r3,0(r5)
   17f18:	124f883a 	add	r7,r2,r9
   17f1c:	008c303a 	nor	r6,zero,r2
   17f20:	398c703a 	and	r6,r7,r6
   17f24:	320c703a 	and	r6,r6,r8
   17f28:	10fff626 	beq	r2,r3,17f04 <strcmp+0x40>
   17f2c:	20800007 	ldb	r2,0(r4)
   17f30:	1000051e 	bne	r2,zero,17f48 <strcmp+0x84>
   17f34:	00000606 	br	17f50 <strcmp+0x8c>
   17f38:	21000044 	addi	r4,r4,1
   17f3c:	20800007 	ldb	r2,0(r4)
   17f40:	29400044 	addi	r5,r5,1
   17f44:	10000226 	beq	r2,zero,17f50 <strcmp+0x8c>
   17f48:	28c00007 	ldb	r3,0(r5)
   17f4c:	10fffa26 	beq	r2,r3,17f38 <strcmp+0x74>
   17f50:	20c00003 	ldbu	r3,0(r4)
   17f54:	28800003 	ldbu	r2,0(r5)
   17f58:	1885c83a 	sub	r2,r3,r2
   17f5c:	f800283a 	ret
   17f60:	0005883a 	mov	r2,zero
   17f64:	f800283a 	ret

00017f68 <strlen>:
   17f68:	208000cc 	andi	r2,r4,3
   17f6c:	10001f1e 	bne	r2,zero,17fec <strlen+0x84>
   17f70:	20800017 	ldw	r2,0(r4)
   17f74:	01ffbff4 	movhi	r7,65279
   17f78:	39ffbfc4 	addi	r7,r7,-257
   17f7c:	01a02074 	movhi	r6,32897
   17f80:	31a02004 	addi	r6,r6,-32640
   17f84:	11c7883a 	add	r3,r2,r7
   17f88:	0084303a 	nor	r2,zero,r2
   17f8c:	1886703a 	and	r3,r3,r2
   17f90:	1986703a 	and	r3,r3,r6
   17f94:	2005883a 	mov	r2,r4
   17f98:	1800101e 	bne	r3,zero,17fdc <strlen+0x74>
   17f9c:	10800104 	addi	r2,r2,4
   17fa0:	10c00017 	ldw	r3,0(r2)
   17fa4:	19cb883a 	add	r5,r3,r7
   17fa8:	00c6303a 	nor	r3,zero,r3
   17fac:	28c6703a 	and	r3,r5,r3
   17fb0:	1986703a 	and	r3,r3,r6
   17fb4:	1800091e 	bne	r3,zero,17fdc <strlen+0x74>
   17fb8:	10800104 	addi	r2,r2,4
   17fbc:	10c00017 	ldw	r3,0(r2)
   17fc0:	19cb883a 	add	r5,r3,r7
   17fc4:	00c6303a 	nor	r3,zero,r3
   17fc8:	28c6703a 	and	r3,r5,r3
   17fcc:	1986703a 	and	r3,r3,r6
   17fd0:	183ff226 	beq	r3,zero,17f9c <strlen+0x34>
   17fd4:	00000106 	br	17fdc <strlen+0x74>
   17fd8:	10800044 	addi	r2,r2,1
   17fdc:	10c00007 	ldb	r3,0(r2)
   17fe0:	183ffd1e 	bne	r3,zero,17fd8 <strlen+0x70>
   17fe4:	1105c83a 	sub	r2,r2,r4
   17fe8:	f800283a 	ret
   17fec:	2005883a 	mov	r2,r4
   17ff0:	003ffa06 	br	17fdc <strlen+0x74>

00017ff4 <strncmp>:
   17ff4:	30001826 	beq	r6,zero,18058 <strncmp+0x64>
   17ff8:	2904b03a 	or	r2,r5,r4
   17ffc:	108000cc 	andi	r2,r2,3
   18000:	10001726 	beq	r2,zero,18060 <strncmp+0x6c>
   18004:	31bfffc4 	addi	r6,r6,-1
   18008:	20800007 	ldb	r2,0(r4)
   1800c:	28c00007 	ldb	r3,0(r5)
   18010:	10c0331e 	bne	r2,r3,180e0 <strncmp+0xec>
   18014:	30001026 	beq	r6,zero,18058 <strncmp+0x64>
   18018:	10000f26 	beq	r2,zero,18058 <strncmp+0x64>
   1801c:	20800044 	addi	r2,r4,1
   18020:	29400044 	addi	r5,r5,1
   18024:	2189883a 	add	r4,r4,r6
   18028:	00000406 	br	1803c <strncmp+0x48>
   1802c:	11000a26 	beq	r2,r4,18058 <strncmp+0x64>
   18030:	18000926 	beq	r3,zero,18058 <strncmp+0x64>
   18034:	10800044 	addi	r2,r2,1
   18038:	29400044 	addi	r5,r5,1
   1803c:	10c00007 	ldb	r3,0(r2)
   18040:	29800007 	ldb	r6,0(r5)
   18044:	19bff926 	beq	r3,r6,1802c <strncmp+0x38>
   18048:	10c00003 	ldbu	r3,0(r2)
   1804c:	28800003 	ldbu	r2,0(r5)
   18050:	1885c83a 	sub	r2,r3,r2
   18054:	f800283a 	ret
   18058:	0005883a 	mov	r2,zero
   1805c:	f800283a 	ret
   18060:	024000c4 	movi	r9,3
   18064:	49bfe72e 	bgeu	r9,r6,18004 <strncmp+0x10>
   18068:	20800017 	ldw	r2,0(r4)
   1806c:	28c00017 	ldw	r3,0(r5)
   18070:	10ffe41e 	bne	r2,r3,18004 <strncmp+0x10>
   18074:	30ffff04 	addi	r3,r6,-4
   18078:	183ff726 	beq	r3,zero,18058 <strncmp+0x64>
   1807c:	02ffbff4 	movhi	r11,65279
   18080:	5affbfc4 	addi	r11,r11,-257
   18084:	12cd883a 	add	r6,r2,r11
   18088:	0084303a 	nor	r2,zero,r2
   1808c:	3084703a 	and	r2,r6,r2
   18090:	02a02074 	movhi	r10,32897
   18094:	52a02004 	addi	r10,r10,-32640
   18098:	1284703a 	and	r2,r2,r10
   1809c:	10000b26 	beq	r2,zero,180cc <strncmp+0xd8>
   180a0:	003fed06 	br	18058 <strncmp+0x64>
   180a4:	21800017 	ldw	r6,0(r4)
   180a8:	28800017 	ldw	r2,0(r5)
   180ac:	32d1883a 	add	r8,r6,r11
   180b0:	018e303a 	nor	r7,zero,r6
   180b4:	41ce703a 	and	r7,r8,r7
   180b8:	3a8e703a 	and	r7,r7,r10
   180bc:	30800a1e 	bne	r6,r2,180e8 <strncmp+0xf4>
   180c0:	18ffff04 	addi	r3,r3,-4
   180c4:	183fe426 	beq	r3,zero,18058 <strncmp+0x64>
   180c8:	383fe31e 	bne	r7,zero,18058 <strncmp+0x64>
   180cc:	21000104 	addi	r4,r4,4
   180d0:	29400104 	addi	r5,r5,4
   180d4:	48fff336 	bltu	r9,r3,180a4 <strncmp+0xb0>
   180d8:	19bfffc4 	addi	r6,r3,-1
   180dc:	183fca1e 	bne	r3,zero,18008 <strncmp+0x14>
   180e0:	2005883a 	mov	r2,r4
   180e4:	003fd806 	br	18048 <strncmp+0x54>
   180e8:	19bfffc4 	addi	r6,r3,-1
   180ec:	003fc606 	br	18008 <strncmp+0x14>

000180f0 <__sprint_r>:
   180f0:	30800217 	ldw	r2,8(r6)
   180f4:	defffe04 	addi	sp,sp,-8
   180f8:	dc000015 	stw	r16,0(sp)
   180fc:	dfc00115 	stw	ra,4(sp)
   18100:	3021883a 	mov	r16,r6
   18104:	10000226 	beq	r2,zero,18110 <__sprint_r+0x20>
   18108:	001c32c0 	call	1c32c <__sfvwrite_r>
   1810c:	80000215 	stw	zero,8(r16)
   18110:	80000115 	stw	zero,4(r16)
   18114:	dfc00117 	ldw	ra,4(sp)
   18118:	dc000017 	ldw	r16,0(sp)
   1811c:	dec00204 	addi	sp,sp,8
   18120:	f800283a 	ret

00018124 <___vfprintf_internal_r>:
   18124:	defeb904 	addi	sp,sp,-1308
   18128:	dc013d15 	stw	r16,1268(sp)
   1812c:	d9013015 	stw	r4,1216(sp)
   18130:	dfc14615 	stw	ra,1304(sp)
   18134:	df014515 	stw	fp,1300(sp)
   18138:	ddc14415 	stw	r23,1296(sp)
   1813c:	dd814315 	stw	r22,1292(sp)
   18140:	dd414215 	stw	r21,1288(sp)
   18144:	dd014115 	stw	r20,1284(sp)
   18148:	dcc14015 	stw	r19,1280(sp)
   1814c:	dc813f15 	stw	r18,1276(sp)
   18150:	dc413e15 	stw	r17,1272(sp)
   18154:	d9412915 	stw	r5,1188(sp)
   18158:	3021883a 	mov	r16,r6
   1815c:	d9c12d15 	stw	r7,1204(sp)
   18160:	001ca180 	call	1ca18 <_localeconv_r>
   18164:	10800017 	ldw	r2,0(r2)
   18168:	d9013017 	ldw	r4,1216(sp)
   1816c:	d8013315 	stw	zero,1228(sp)
   18170:	d8813715 	stw	r2,1244(sp)
   18174:	d8013415 	stw	zero,1232(sp)
   18178:	20000226 	beq	r4,zero,18184 <___vfprintf_internal_r+0x60>
   1817c:	20800e17 	ldw	r2,56(r4)
   18180:	10019826 	beq	r2,zero,187e4 <___vfprintf_internal_r+0x6c0>
   18184:	da012917 	ldw	r8,1188(sp)
   18188:	4080030b 	ldhu	r2,12(r8)
   1818c:	10c0020c 	andi	r3,r2,8
   18190:	18ffffcc 	andi	r3,r3,65535
   18194:	18e0001c 	xori	r3,r3,32768
   18198:	18e00004 	addi	r3,r3,-32768
   1819c:	18013a26 	beq	r3,zero,18688 <___vfprintf_internal_r+0x564>
   181a0:	40c00417 	ldw	r3,16(r8)
   181a4:	18013826 	beq	r3,zero,18688 <___vfprintf_internal_r+0x564>
   181a8:	1100068c 	andi	r4,r2,26
   181ac:	00c00284 	movi	r3,10
   181b0:	20c13e26 	beq	r4,r3,186ac <___vfprintf_internal_r+0x588>
   181b4:	da010dc4 	addi	r8,sp,1079
   181b8:	d8800404 	addi	r2,sp,16
   181bc:	da012615 	stw	r8,1176(sp)
   181c0:	d8811b15 	stw	r2,1132(sp)
   181c4:	1013883a 	mov	r9,r2
   181c8:	d8812617 	ldw	r2,1176(sp)
   181cc:	da010e04 	addi	r8,sp,1080
   181d0:	dc413017 	ldw	r17,1216(sp)
   181d4:	da012715 	stw	r8,1180(sp)
   181d8:	4091c83a 	sub	r8,r8,r2
   181dc:	d8011d15 	stw	zero,1140(sp)
   181e0:	d8011c15 	stw	zero,1136(sp)
   181e4:	802b883a 	mov	r21,r16
   181e8:	d8013215 	stw	zero,1224(sp)
   181ec:	d8013615 	stw	zero,1240(sp)
   181f0:	d8013515 	stw	zero,1236(sp)
   181f4:	d8012c15 	stw	zero,1200(sp)
   181f8:	da013915 	stw	r8,1252(sp)
   181fc:	a8800007 	ldb	r2,0(r21)
   18200:	1002ec26 	beq	r2,zero,18db4 <___vfprintf_internal_r+0xc90>
   18204:	00c00944 	movi	r3,37
   18208:	a825883a 	mov	r18,r21
   1820c:	10c0021e 	bne	r2,r3,18218 <___vfprintf_internal_r+0xf4>
   18210:	00001406 	br	18264 <___vfprintf_internal_r+0x140>
   18214:	10c00326 	beq	r2,r3,18224 <___vfprintf_internal_r+0x100>
   18218:	94800044 	addi	r18,r18,1
   1821c:	90800007 	ldb	r2,0(r18)
   18220:	103ffc1e 	bne	r2,zero,18214 <___vfprintf_internal_r+0xf0>
   18224:	9561c83a 	sub	r16,r18,r21
   18228:	80000e26 	beq	r16,zero,18264 <___vfprintf_internal_r+0x140>
   1822c:	da011d17 	ldw	r8,1140(sp)
   18230:	d8c11c17 	ldw	r3,1136(sp)
   18234:	4d400015 	stw	r21,0(r9)
   18238:	4c000115 	stw	r16,4(r9)
   1823c:	4411883a 	add	r8,r8,r16
   18240:	18c00044 	addi	r3,r3,1
   18244:	da011d15 	stw	r8,1140(sp)
   18248:	d8c11c15 	stw	r3,1136(sp)
   1824c:	008001c4 	movi	r2,7
   18250:	10c15d16 	blt	r2,r3,187c8 <___vfprintf_internal_r+0x6a4>
   18254:	4a400204 	addi	r9,r9,8
   18258:	d8812c17 	ldw	r2,1200(sp)
   1825c:	1405883a 	add	r2,r2,r16
   18260:	d8812c15 	stw	r2,1200(sp)
   18264:	90800007 	ldb	r2,0(r18)
   18268:	10013b26 	beq	r2,zero,18758 <___vfprintf_internal_r+0x634>
   1826c:	95400044 	addi	r21,r18,1
   18270:	94800047 	ldb	r18,1(r18)
   18274:	d8012585 	stb	zero,1174(sp)
   18278:	073fffc4 	movi	fp,-1
   1827c:	d8012e15 	stw	zero,1208(sp)
   18280:	0021883a 	mov	r16,zero
   18284:	00c01604 	movi	r3,88
   18288:	01400244 	movi	r5,9
   1828c:	02800a84 	movi	r10,42
   18290:	01c01b04 	movi	r7,108
   18294:	01800ac4 	movi	r6,43
   18298:	02c00804 	movi	r11,32
   1829c:	ad400044 	addi	r21,r21,1
   182a0:	90bff804 	addi	r2,r18,-32
   182a4:	1880092e 	bgeu	r3,r2,182cc <___vfprintf_internal_r+0x1a8>
   182a8:	90012b26 	beq	r18,zero,18758 <___vfprintf_internal_r+0x634>
   182ac:	00c00044 	movi	r3,1
   182b0:	d8c12815 	stw	r3,1184(sp)
   182b4:	dc810405 	stb	r18,1040(sp)
   182b8:	d8012585 	stb	zero,1174(sp)
   182bc:	d8c12b15 	stw	r3,1196(sp)
   182c0:	dcc10404 	addi	r19,sp,1040
   182c4:	d8013115 	stw	zero,1220(sp)
   182c8:	00008806 	br	184ec <___vfprintf_internal_r+0x3c8>
   182cc:	1085883a 	add	r2,r2,r2
   182d0:	1085883a 	add	r2,r2,r2
   182d4:	010000b4 	movhi	r4,2
   182d8:	2120ba04 	addi	r4,r4,-32024
   182dc:	1105883a 	add	r2,r2,r4
   182e0:	10800017 	ldw	r2,0(r2)
   182e4:	1000683a 	jmp	r2
   182e8:	0001889c 	xori	zero,zero,1570
   182ec:	000182a8 	cmpgeui	zero,zero,1546
   182f0:	000182a8 	cmpgeui	zero,zero,1546
   182f4:	000188b0 	cmpltui	zero,zero,1570
   182f8:	000182a8 	cmpgeui	zero,zero,1546
   182fc:	000182a8 	cmpgeui	zero,zero,1546
   18300:	000182a8 	cmpgeui	zero,zero,1546
   18304:	000182a8 	cmpgeui	zero,zero,1546
   18308:	000182a8 	cmpgeui	zero,zero,1546
   1830c:	000182a8 	cmpgeui	zero,zero,1546
   18310:	00018998 	cmpnei	zero,zero,1574
   18314:	00018854 	movui	zero,1569
   18318:	000182a8 	cmpgeui	zero,zero,1546
   1831c:	0001867c 	xorhi	zero,zero,1561
   18320:	00018860 	cmpeqi	zero,zero,1569
   18324:	000182a8 	cmpgeui	zero,zero,1546
   18328:	000188bc 	xorhi	zero,zero,1570
   1832c:	000189bc 	xorhi	zero,zero,1574
   18330:	000189bc 	xorhi	zero,zero,1574
   18334:	000189bc 	xorhi	zero,zero,1574
   18338:	000189bc 	xorhi	zero,zero,1574
   1833c:	000189bc 	xorhi	zero,zero,1574
   18340:	000189bc 	xorhi	zero,zero,1574
   18344:	000189bc 	xorhi	zero,zero,1574
   18348:	000189bc 	xorhi	zero,zero,1574
   1834c:	000189bc 	xorhi	zero,zero,1574
   18350:	000182a8 	cmpgeui	zero,zero,1546
   18354:	000182a8 	cmpgeui	zero,zero,1546
   18358:	000182a8 	cmpgeui	zero,zero,1546
   1835c:	000182a8 	cmpgeui	zero,zero,1546
   18360:	000182a8 	cmpgeui	zero,zero,1546
   18364:	000182a8 	cmpgeui	zero,zero,1546
   18368:	000182a8 	cmpgeui	zero,zero,1546
   1836c:	000182a8 	cmpgeui	zero,zero,1546
   18370:	000182a8 	cmpgeui	zero,zero,1546
   18374:	000182a8 	cmpgeui	zero,zero,1546
   18378:	00018618 	cmpnei	zero,zero,1560
   1837c:	000189e4 	muli	zero,zero,1575
   18380:	000182a8 	cmpgeui	zero,zero,1546
   18384:	000189e4 	muli	zero,zero,1575
   18388:	000182a8 	cmpgeui	zero,zero,1546
   1838c:	000182a8 	cmpgeui	zero,zero,1546
   18390:	000182a8 	cmpgeui	zero,zero,1546
   18394:	000182a8 	cmpgeui	zero,zero,1546
   18398:	00018b54 	movui	zero,1581
   1839c:	000182a8 	cmpgeui	zero,zero,1546
   183a0:	000182a8 	cmpgeui	zero,zero,1546
   183a4:	000185e0 	cmpeqi	zero,zero,1559
   183a8:	000182a8 	cmpgeui	zero,zero,1546
   183ac:	000182a8 	cmpgeui	zero,zero,1546
   183b0:	000182a8 	cmpgeui	zero,zero,1546
   183b4:	000182a8 	cmpgeui	zero,zero,1546
   183b8:	000182a8 	cmpgeui	zero,zero,1546
   183bc:	0001844c 	andi	zero,zero,1553
   183c0:	000182a8 	cmpgeui	zero,zero,1546
   183c4:	000182a8 	cmpgeui	zero,zero,1546
   183c8:	000188c8 	cmpgei	zero,zero,1571
   183cc:	000182a8 	cmpgeui	zero,zero,1546
   183d0:	000182a8 	cmpgeui	zero,zero,1546
   183d4:	000182a8 	cmpgeui	zero,zero,1546
   183d8:	000182a8 	cmpgeui	zero,zero,1546
   183dc:	000182a8 	cmpgeui	zero,zero,1546
   183e0:	000182a8 	cmpgeui	zero,zero,1546
   183e4:	000182a8 	cmpgeui	zero,zero,1546
   183e8:	000182a8 	cmpgeui	zero,zero,1546
   183ec:	000182a8 	cmpgeui	zero,zero,1546
   183f0:	000182a8 	cmpgeui	zero,zero,1546
   183f4:	0001893c 	xorhi	zero,zero,1572
   183f8:	0001861c 	xori	zero,zero,1560
   183fc:	000189e4 	muli	zero,zero,1575
   18400:	000189e4 	muli	zero,zero,1575
   18404:	000189e4 	muli	zero,zero,1575
   18408:	0001891c 	xori	zero,zero,1572
   1840c:	0001861c 	xori	zero,zero,1560
   18410:	000182a8 	cmpgeui	zero,zero,1546
   18414:	000182a8 	cmpgeui	zero,zero,1546
   18418:	00018928 	cmpgeui	zero,zero,1572
   1841c:	000182a8 	cmpgeui	zero,zero,1546
   18420:	0001896c 	andhi	zero,zero,1573
   18424:	000185e4 	muli	zero,zero,1559
   18428:	00018a6c 	andhi	zero,zero,1577
   1842c:	00018ab8 	rdprs	zero,zero,1578
   18430:	000182a8 	cmpgeui	zero,zero,1546
   18434:	00018ac4 	movi	zero,1579
   18438:	000182a8 	cmpgeui	zero,zero,1546
   1843c:	00018450 	cmplti	zero,zero,1553
   18440:	000182a8 	cmpgeui	zero,zero,1546
   18444:	000182a8 	cmpgeui	zero,zero,1546
   18448:	00018b20 	cmpeqi	zero,zero,1580
   1844c:	84000414 	ori	r16,r16,16
   18450:	8080080c 	andi	r2,r16,32
   18454:	1000f51e 	bne	r2,zero,1882c <___vfprintf_internal_r+0x708>
   18458:	8080040c 	andi	r2,r16,16
   1845c:	10042c26 	beq	r2,zero,19510 <___vfprintf_internal_r+0x13ec>
   18460:	da012d17 	ldw	r8,1204(sp)
   18464:	002d883a 	mov	r22,zero
   18468:	00c00044 	movi	r3,1
   1846c:	45c00017 	ldw	r23,0(r8)
   18470:	42000104 	addi	r8,r8,4
   18474:	da012d15 	stw	r8,1204(sp)
   18478:	b805883a 	mov	r2,r23
   1847c:	d8012585 	stb	zero,1174(sp)
   18480:	e0000216 	blt	fp,zero,1848c <___vfprintf_internal_r+0x368>
   18484:	013fdfc4 	movi	r4,-129
   18488:	8120703a 	and	r16,r16,r4
   1848c:	1002671e 	bne	r2,zero,18e2c <___vfprintf_internal_r+0xd08>
   18490:	e002661e 	bne	fp,zero,18e2c <___vfprintf_internal_r+0xd08>
   18494:	18c03fcc 	andi	r3,r3,255
   18498:	1803561e 	bne	r3,zero,191f4 <___vfprintf_internal_r+0x10d0>
   1849c:	8080004c 	andi	r2,r16,1
   184a0:	10035426 	beq	r2,zero,191f4 <___vfprintf_internal_r+0x10d0>
   184a4:	da013917 	ldw	r8,1252(sp)
   184a8:	00800c04 	movi	r2,48
   184ac:	d8810dc5 	stb	r2,1079(sp)
   184b0:	da012b15 	stw	r8,1196(sp)
   184b4:	dcc10dc4 	addi	r19,sp,1079
   184b8:	d8812b17 	ldw	r2,1196(sp)
   184bc:	d8812815 	stw	r2,1184(sp)
   184c0:	1700010e 	bge	r2,fp,184c8 <___vfprintf_internal_r+0x3a4>
   184c4:	df012815 	stw	fp,1184(sp)
   184c8:	d8812583 	ldbu	r2,1174(sp)
   184cc:	df013115 	stw	fp,1220(sp)
   184d0:	10803fcc 	andi	r2,r2,255
   184d4:	1080201c 	xori	r2,r2,128
   184d8:	10bfe004 	addi	r2,r2,-128
   184dc:	10000326 	beq	r2,zero,184ec <___vfprintf_internal_r+0x3c8>
   184e0:	da012817 	ldw	r8,1184(sp)
   184e4:	42000044 	addi	r8,r8,1
   184e8:	da012815 	stw	r8,1184(sp)
   184ec:	80c0008c 	andi	r3,r16,2
   184f0:	d8c12a15 	stw	r3,1192(sp)
   184f4:	18000326 	beq	r3,zero,18504 <___vfprintf_internal_r+0x3e0>
   184f8:	da012817 	ldw	r8,1184(sp)
   184fc:	42000084 	addi	r8,r8,2
   18500:	da012815 	stw	r8,1184(sp)
   18504:	80c0210c 	andi	r3,r16,132
   18508:	d8c12f15 	stw	r3,1212(sp)
   1850c:	1801941e 	bne	r3,zero,18b60 <___vfprintf_internal_r+0xa3c>
   18510:	da012e17 	ldw	r8,1208(sp)
   18514:	d8c12817 	ldw	r3,1184(sp)
   18518:	40edc83a 	sub	r22,r8,r3
   1851c:	0581900e 	bge	zero,r22,18b60 <___vfprintf_internal_r+0xa3c>
   18520:	02800404 	movi	r10,16
   18524:	da011d17 	ldw	r8,1140(sp)
   18528:	d8c11c17 	ldw	r3,1136(sp)
   1852c:	05c000f4 	movhi	r23,3
   18530:	bdc25084 	addi	r23,r23,2370
   18534:	5580200e 	bge	r10,r22,185b8 <___vfprintf_internal_r+0x494>
   18538:	dc813815 	stw	r18,1248(sp)
   1853c:	5039883a 	mov	fp,r10
   18540:	b825883a 	mov	r18,r23
   18544:	050001c4 	movi	r20,7
   18548:	b02f883a 	mov	r23,r22
   1854c:	802d883a 	mov	r22,r16
   18550:	dc012917 	ldw	r16,1188(sp)
   18554:	00000306 	br	18564 <___vfprintf_internal_r+0x440>
   18558:	bdfffc04 	addi	r23,r23,-16
   1855c:	4a400204 	addi	r9,r9,8
   18560:	e5c0110e 	bge	fp,r23,185a8 <___vfprintf_internal_r+0x484>
   18564:	4c800015 	stw	r18,0(r9)
   18568:	4f000115 	stw	fp,4(r9)
   1856c:	42000404 	addi	r8,r8,16
   18570:	18c00044 	addi	r3,r3,1
   18574:	da011d15 	stw	r8,1140(sp)
   18578:	d8c11c15 	stw	r3,1136(sp)
   1857c:	a0fff60e 	bge	r20,r3,18558 <___vfprintf_internal_r+0x434>
   18580:	8809883a 	mov	r4,r17
   18584:	800b883a 	mov	r5,r16
   18588:	d9811b04 	addi	r6,sp,1132
   1858c:	00180f00 	call	180f0 <__sprint_r>
   18590:	1000771e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18594:	bdfffc04 	addi	r23,r23,-16
   18598:	da011d17 	ldw	r8,1140(sp)
   1859c:	d8c11c17 	ldw	r3,1136(sp)
   185a0:	da400404 	addi	r9,sp,16
   185a4:	e5ffef16 	blt	fp,r23,18564 <___vfprintf_internal_r+0x440>
   185a8:	b021883a 	mov	r16,r22
   185ac:	b82d883a 	mov	r22,r23
   185b0:	902f883a 	mov	r23,r18
   185b4:	dc813817 	ldw	r18,1248(sp)
   185b8:	4dc00015 	stw	r23,0(r9)
   185bc:	4d800115 	stw	r22,4(r9)
   185c0:	4591883a 	add	r8,r8,r22
   185c4:	18c00044 	addi	r3,r3,1
   185c8:	da011d15 	stw	r8,1140(sp)
   185cc:	d8c11c15 	stw	r3,1136(sp)
   185d0:	008001c4 	movi	r2,7
   185d4:	10c36d16 	blt	r2,r3,1938c <___vfprintf_internal_r+0x1268>
   185d8:	4a400204 	addi	r9,r9,8
   185dc:	00016206 	br	18b68 <___vfprintf_internal_r+0xa44>
   185e0:	84000414 	ori	r16,r16,16
   185e4:	8080080c 	andi	r2,r16,32
   185e8:	1000801e 	bne	r2,zero,187ec <___vfprintf_internal_r+0x6c8>
   185ec:	8080040c 	andi	r2,r16,16
   185f0:	1003da26 	beq	r2,zero,1955c <___vfprintf_internal_r+0x1438>
   185f4:	d8c12d17 	ldw	r3,1204(sp)
   185f8:	002d883a 	mov	r22,zero
   185fc:	1dc00017 	ldw	r23,0(r3)
   18600:	18c00104 	addi	r3,r3,4
   18604:	d8c12d15 	stw	r3,1204(sp)
   18608:	b805883a 	mov	r2,r23
   1860c:	0007883a 	mov	r3,zero
   18610:	d8012585 	stb	zero,1174(sp)
   18614:	003f9a06 	br	18480 <___vfprintf_internal_r+0x35c>
   18618:	84000414 	ori	r16,r16,16
   1861c:	8080080c 	andi	r2,r16,32
   18620:	10007b1e 	bne	r2,zero,18810 <___vfprintf_internal_r+0x6ec>
   18624:	8080040c 	andi	r2,r16,16
   18628:	1003ed26 	beq	r2,zero,195e0 <___vfprintf_internal_r+0x14bc>
   1862c:	d9012d17 	ldw	r4,1204(sp)
   18630:	25c00017 	ldw	r23,0(r4)
   18634:	21000104 	addi	r4,r4,4
   18638:	d9012d15 	stw	r4,1204(sp)
   1863c:	b82dd7fa 	srai	r22,r23,31
   18640:	b005883a 	mov	r2,r22
   18644:	1003230e 	bge	r2,zero,192d4 <___vfprintf_internal_r+0x11b0>
   18648:	05efc83a 	sub	r23,zero,r23
   1864c:	b804c03a 	cmpne	r2,r23,zero
   18650:	05adc83a 	sub	r22,zero,r22
   18654:	b0adc83a 	sub	r22,r22,r2
   18658:	00800b44 	movi	r2,45
   1865c:	d8812585 	stb	r2,1174(sp)
   18660:	00c00044 	movi	r3,1
   18664:	bd84b03a 	or	r2,r23,r22
   18668:	003f8506 	br	18480 <___vfprintf_internal_r+0x35c>
   1866c:	da012e17 	ldw	r8,1208(sp)
   18670:	d8812d15 	stw	r2,1204(sp)
   18674:	0211c83a 	sub	r8,zero,r8
   18678:	da012e15 	stw	r8,1208(sp)
   1867c:	84000114 	ori	r16,r16,4
   18680:	ac800007 	ldb	r18,0(r21)
   18684:	003f0506 	br	1829c <___vfprintf_internal_r+0x178>
   18688:	d9013017 	ldw	r4,1216(sp)
   1868c:	d9412917 	ldw	r5,1188(sp)
   18690:	001a0980 	call	1a098 <__swsetup_r>
   18694:	10003d1e 	bne	r2,zero,1878c <___vfprintf_internal_r+0x668>
   18698:	d8c12917 	ldw	r3,1188(sp)
   1869c:	1880030b 	ldhu	r2,12(r3)
   186a0:	00c00284 	movi	r3,10
   186a4:	1100068c 	andi	r4,r2,26
   186a8:	20fec21e 	bne	r4,r3,181b4 <___vfprintf_internal_r+0x90>
   186ac:	d9012917 	ldw	r4,1188(sp)
   186b0:	20c0038b 	ldhu	r3,14(r4)
   186b4:	193fffcc 	andi	r4,r3,65535
   186b8:	2120001c 	xori	r4,r4,32768
   186bc:	21200004 	addi	r4,r4,-32768
   186c0:	203ebc16 	blt	r4,zero,181b4 <___vfprintf_internal_r+0x90>
   186c4:	da012917 	ldw	r8,1188(sp)
   186c8:	d9013017 	ldw	r4,1216(sp)
   186cc:	d9c12d17 	ldw	r7,1204(sp)
   186d0:	42800717 	ldw	r10,28(r8)
   186d4:	42400917 	ldw	r9,36(r8)
   186d8:	10bfff4c 	andi	r2,r2,65533
   186dc:	02010004 	movi	r8,1024
   186e0:	d881070d 	sth	r2,1052(sp)
   186e4:	d9410404 	addi	r5,sp,1040
   186e8:	d8800404 	addi	r2,sp,16
   186ec:	800d883a 	mov	r6,r16
   186f0:	d8c1078d 	sth	r3,1054(sp)
   186f4:	da810b15 	stw	r10,1068(sp)
   186f8:	da410d15 	stw	r9,1076(sp)
   186fc:	d8810415 	stw	r2,1040(sp)
   18700:	d8810815 	stw	r2,1056(sp)
   18704:	da010615 	stw	r8,1048(sp)
   18708:	da010915 	stw	r8,1060(sp)
   1870c:	d8010a15 	stw	zero,1064(sp)
   18710:	00181240 	call	18124 <___vfprintf_internal_r>
   18714:	d8812c15 	stw	r2,1200(sp)
   18718:	10000416 	blt	r2,zero,1872c <___vfprintf_internal_r+0x608>
   1871c:	d9013017 	ldw	r4,1216(sp)
   18720:	d9410404 	addi	r5,sp,1040
   18724:	001ba300 	call	1ba30 <_fflush_r>
   18728:	1005d81e 	bne	r2,zero,19e8c <___vfprintf_internal_r+0x1d68>
   1872c:	d881070b 	ldhu	r2,1052(sp)
   18730:	1080100c 	andi	r2,r2,64
   18734:	10bfffcc 	andi	r2,r2,65535
   18738:	10a0001c 	xori	r2,r2,32768
   1873c:	10a00004 	addi	r2,r2,-32768
   18740:	10001426 	beq	r2,zero,18794 <___vfprintf_internal_r+0x670>
   18744:	d8c12917 	ldw	r3,1188(sp)
   18748:	1880030b 	ldhu	r2,12(r3)
   1874c:	10801014 	ori	r2,r2,64
   18750:	1880030d 	sth	r2,12(r3)
   18754:	00000f06 	br	18794 <___vfprintf_internal_r+0x670>
   18758:	d8811d17 	ldw	r2,1140(sp)
   1875c:	10000426 	beq	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18760:	d9013017 	ldw	r4,1216(sp)
   18764:	d9412917 	ldw	r5,1188(sp)
   18768:	d9811b04 	addi	r6,sp,1132
   1876c:	00180f00 	call	180f0 <__sprint_r>
   18770:	d8c12917 	ldw	r3,1188(sp)
   18774:	1880030b 	ldhu	r2,12(r3)
   18778:	1080100c 	andi	r2,r2,64
   1877c:	10bfffcc 	andi	r2,r2,65535
   18780:	10a0001c 	xori	r2,r2,32768
   18784:	10a00004 	addi	r2,r2,-32768
   18788:	10000226 	beq	r2,zero,18794 <___vfprintf_internal_r+0x670>
   1878c:	00bfffc4 	movi	r2,-1
   18790:	d8812c15 	stw	r2,1200(sp)
   18794:	d8812c17 	ldw	r2,1200(sp)
   18798:	dfc14617 	ldw	ra,1304(sp)
   1879c:	df014517 	ldw	fp,1300(sp)
   187a0:	ddc14417 	ldw	r23,1296(sp)
   187a4:	dd814317 	ldw	r22,1292(sp)
   187a8:	dd414217 	ldw	r21,1288(sp)
   187ac:	dd014117 	ldw	r20,1284(sp)
   187b0:	dcc14017 	ldw	r19,1280(sp)
   187b4:	dc813f17 	ldw	r18,1276(sp)
   187b8:	dc413e17 	ldw	r17,1272(sp)
   187bc:	dc013d17 	ldw	r16,1268(sp)
   187c0:	dec14704 	addi	sp,sp,1308
   187c4:	f800283a 	ret
   187c8:	d9412917 	ldw	r5,1188(sp)
   187cc:	8809883a 	mov	r4,r17
   187d0:	d9811b04 	addi	r6,sp,1132
   187d4:	00180f00 	call	180f0 <__sprint_r>
   187d8:	103fe51e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   187dc:	da400404 	addi	r9,sp,16
   187e0:	003e9d06 	br	18258 <___vfprintf_internal_r+0x134>
   187e4:	001bcd80 	call	1bcd8 <__sinit>
   187e8:	003e6606 	br	18184 <___vfprintf_internal_r+0x60>
   187ec:	d8812d17 	ldw	r2,1204(sp)
   187f0:	0007883a 	mov	r3,zero
   187f4:	15c00017 	ldw	r23,0(r2)
   187f8:	15800117 	ldw	r22,4(r2)
   187fc:	10800204 	addi	r2,r2,8
   18800:	d8812d15 	stw	r2,1204(sp)
   18804:	d8012585 	stb	zero,1174(sp)
   18808:	bd84b03a 	or	r2,r23,r22
   1880c:	003f1c06 	br	18480 <___vfprintf_internal_r+0x35c>
   18810:	d8c12d17 	ldw	r3,1204(sp)
   18814:	18800117 	ldw	r2,4(r3)
   18818:	1dc00017 	ldw	r23,0(r3)
   1881c:	18c00204 	addi	r3,r3,8
   18820:	d8c12d15 	stw	r3,1204(sp)
   18824:	102d883a 	mov	r22,r2
   18828:	003f8606 	br	18644 <___vfprintf_internal_r+0x520>
   1882c:	d8c12d17 	ldw	r3,1204(sp)
   18830:	d9012d17 	ldw	r4,1204(sp)
   18834:	1dc00017 	ldw	r23,0(r3)
   18838:	1d800117 	ldw	r22,4(r3)
   1883c:	21000204 	addi	r4,r4,8
   18840:	00c00044 	movi	r3,1
   18844:	d9012d15 	stw	r4,1204(sp)
   18848:	bd84b03a 	or	r2,r23,r22
   1884c:	d8012585 	stb	zero,1174(sp)
   18850:	003f0b06 	br	18480 <___vfprintf_internal_r+0x35c>
   18854:	d9812585 	stb	r6,1174(sp)
   18858:	ac800007 	ldb	r18,0(r21)
   1885c:	003e8f06 	br	1829c <___vfprintf_internal_r+0x178>
   18860:	ac800007 	ldb	r18,0(r21)
   18864:	a9000044 	addi	r4,r21,1
   18868:	92857d26 	beq	r18,r10,19e60 <___vfprintf_internal_r+0x1d3c>
   1886c:	90bff404 	addi	r2,r18,-48
   18870:	0039883a 	mov	fp,zero
   18874:	28800736 	bltu	r5,r2,18894 <___vfprintf_internal_r+0x770>
   18878:	24800007 	ldb	r18,0(r4)
   1887c:	e70002a4 	muli	fp,fp,10
   18880:	21000044 	addi	r4,r4,1
   18884:	1739883a 	add	fp,r2,fp
   18888:	90bff404 	addi	r2,r18,-48
   1888c:	28bffa2e 	bgeu	r5,r2,18878 <___vfprintf_internal_r+0x754>
   18890:	e0044216 	blt	fp,zero,1999c <___vfprintf_internal_r+0x1878>
   18894:	202b883a 	mov	r21,r4
   18898:	003e8106 	br	182a0 <___vfprintf_internal_r+0x17c>
   1889c:	d8812587 	ldb	r2,1174(sp)
   188a0:	1003581e 	bne	r2,zero,19604 <___vfprintf_internal_r+0x14e0>
   188a4:	dac12585 	stb	r11,1174(sp)
   188a8:	ac800007 	ldb	r18,0(r21)
   188ac:	003e7b06 	br	1829c <___vfprintf_internal_r+0x178>
   188b0:	84000054 	ori	r16,r16,1
   188b4:	ac800007 	ldb	r18,0(r21)
   188b8:	003e7806 	br	1829c <___vfprintf_internal_r+0x178>
   188bc:	84002014 	ori	r16,r16,128
   188c0:	ac800007 	ldb	r18,0(r21)
   188c4:	003e7506 	br	1829c <___vfprintf_internal_r+0x178>
   188c8:	020000f4 	movhi	r8,3
   188cc:	42024404 	addi	r8,r8,2320
   188d0:	da013615 	stw	r8,1240(sp)
   188d4:	8080080c 	andi	r2,r16,32
   188d8:	10009626 	beq	r2,zero,18b34 <___vfprintf_internal_r+0xa10>
   188dc:	d8812d17 	ldw	r2,1204(sp)
   188e0:	15c00017 	ldw	r23,0(r2)
   188e4:	15800117 	ldw	r22,4(r2)
   188e8:	10800204 	addi	r2,r2,8
   188ec:	d8812d15 	stw	r2,1204(sp)
   188f0:	8080004c 	andi	r2,r16,1
   188f4:	1002ae26 	beq	r2,zero,193b0 <___vfprintf_internal_r+0x128c>
   188f8:	bd84b03a 	or	r2,r23,r22
   188fc:	10032a26 	beq	r2,zero,195a8 <___vfprintf_internal_r+0x1484>
   18900:	00c00c04 	movi	r3,48
   18904:	d8c12505 	stb	r3,1172(sp)
   18908:	dc812545 	stb	r18,1173(sp)
   1890c:	84000094 	ori	r16,r16,2
   18910:	00c00084 	movi	r3,2
   18914:	d8012585 	stb	zero,1174(sp)
   18918:	003ed906 	br	18480 <___vfprintf_internal_r+0x35c>
   1891c:	84001014 	ori	r16,r16,64
   18920:	ac800007 	ldb	r18,0(r21)
   18924:	003e5d06 	br	1829c <___vfprintf_internal_r+0x178>
   18928:	ac800007 	ldb	r18,0(r21)
   1892c:	a805883a 	mov	r2,r21
   18930:	91c43226 	beq	r18,r7,199fc <___vfprintf_internal_r+0x18d8>
   18934:	84000414 	ori	r16,r16,16
   18938:	003e5806 	br	1829c <___vfprintf_internal_r+0x178>
   1893c:	d8c12d17 	ldw	r3,1204(sp)
   18940:	02000044 	movi	r8,1
   18944:	da012815 	stw	r8,1184(sp)
   18948:	18800017 	ldw	r2,0(r3)
   1894c:	18c00104 	addi	r3,r3,4
   18950:	d8012585 	stb	zero,1174(sp)
   18954:	d8810405 	stb	r2,1040(sp)
   18958:	d8c12d15 	stw	r3,1204(sp)
   1895c:	da012b15 	stw	r8,1196(sp)
   18960:	dcc10404 	addi	r19,sp,1040
   18964:	d8013115 	stw	zero,1220(sp)
   18968:	003ee006 	br	184ec <___vfprintf_internal_r+0x3c8>
   1896c:	8080080c 	andi	r2,r16,32
   18970:	10031026 	beq	r2,zero,195b4 <___vfprintf_internal_r+0x1490>
   18974:	d9012d17 	ldw	r4,1204(sp)
   18978:	da012c17 	ldw	r8,1200(sp)
   1897c:	20800017 	ldw	r2,0(r4)
   18980:	4007d7fa 	srai	r3,r8,31
   18984:	21000104 	addi	r4,r4,4
   18988:	d9012d15 	stw	r4,1204(sp)
   1898c:	12000015 	stw	r8,0(r2)
   18990:	10c00115 	stw	r3,4(r2)
   18994:	003e1906 	br	181fc <___vfprintf_internal_r+0xd8>
   18998:	da012d17 	ldw	r8,1204(sp)
   1899c:	d9012d17 	ldw	r4,1204(sp)
   189a0:	42000017 	ldw	r8,0(r8)
   189a4:	20800104 	addi	r2,r4,4
   189a8:	da012e15 	stw	r8,1208(sp)
   189ac:	403f2f16 	blt	r8,zero,1866c <___vfprintf_internal_r+0x548>
   189b0:	d8812d15 	stw	r2,1204(sp)
   189b4:	ac800007 	ldb	r18,0(r21)
   189b8:	003e3806 	br	1829c <___vfprintf_internal_r+0x178>
   189bc:	0009883a 	mov	r4,zero
   189c0:	90bff404 	addi	r2,r18,-48
   189c4:	ac800007 	ldb	r18,0(r21)
   189c8:	210002a4 	muli	r4,r4,10
   189cc:	ad400044 	addi	r21,r21,1
   189d0:	2089883a 	add	r4,r4,r2
   189d4:	90bff404 	addi	r2,r18,-48
   189d8:	28bffa2e 	bgeu	r5,r2,189c4 <___vfprintf_internal_r+0x8a0>
   189dc:	d9012e15 	stw	r4,1208(sp)
   189e0:	003e2f06 	br	182a0 <___vfprintf_internal_r+0x17c>
   189e4:	8080020c 	andi	r2,r16,8
   189e8:	1002d426 	beq	r2,zero,1953c <___vfprintf_internal_r+0x1418>
   189ec:	d8c12d17 	ldw	r3,1204(sp)
   189f0:	1d800017 	ldw	r22,0(r3)
   189f4:	1d000117 	ldw	r20,4(r3)
   189f8:	18c00204 	addi	r3,r3,8
   189fc:	d8c12d15 	stw	r3,1204(sp)
   18a00:	dd813315 	stw	r22,1228(sp)
   18a04:	dd013415 	stw	r20,1232(sp)
   18a08:	b009883a 	mov	r4,r22
   18a0c:	a00b883a 	mov	r5,r20
   18a10:	da413c15 	stw	r9,1264(sp)
   18a14:	001eb3c0 	call	1eb3c <__isinfd>
   18a18:	da413c17 	ldw	r9,1264(sp)
   18a1c:	b009883a 	mov	r4,r22
   18a20:	a00b883a 	mov	r5,r20
   18a24:	10035726 	beq	r2,zero,19784 <___vfprintf_internal_r+0x1660>
   18a28:	000d883a 	mov	r6,zero
   18a2c:	000f883a 	mov	r7,zero
   18a30:	00207380 	call	20738 <__ltdf2>
   18a34:	da413c17 	ldw	r9,1264(sp)
   18a38:	10041b16 	blt	r2,zero,19aa8 <___vfprintf_internal_r+0x1984>
   18a3c:	d8812583 	ldbu	r2,1174(sp)
   18a40:	00c011c4 	movi	r3,71
   18a44:	1c830b16 	blt	r3,r18,19674 <___vfprintf_internal_r+0x1550>
   18a48:	04c000f4 	movhi	r19,3
   18a4c:	9cc24004 	addi	r19,r19,2304
   18a50:	020000c4 	movi	r8,3
   18a54:	00ffdfc4 	movi	r3,-129
   18a58:	da012815 	stw	r8,1184(sp)
   18a5c:	80e0703a 	and	r16,r16,r3
   18a60:	da012b15 	stw	r8,1196(sp)
   18a64:	d8013115 	stw	zero,1220(sp)
   18a68:	003e9906 	br	184d0 <___vfprintf_internal_r+0x3ac>
   18a6c:	d8812d17 	ldw	r2,1204(sp)
   18a70:	d8c12d17 	ldw	r3,1204(sp)
   18a74:	020000f4 	movhi	r8,3
   18a78:	42024904 	addi	r8,r8,2340
   18a7c:	15c00017 	ldw	r23,0(r2)
   18a80:	00800c04 	movi	r2,48
   18a84:	18c00104 	addi	r3,r3,4
   18a88:	d8812505 	stb	r2,1172(sp)
   18a8c:	00801e04 	movi	r2,120
   18a90:	d8812545 	stb	r2,1173(sp)
   18a94:	d8c12d15 	stw	r3,1204(sp)
   18a98:	002d883a 	mov	r22,zero
   18a9c:	84000094 	ori	r16,r16,2
   18aa0:	da013615 	stw	r8,1240(sp)
   18aa4:	00c00084 	movi	r3,2
   18aa8:	04801e04 	movi	r18,120
   18aac:	b805883a 	mov	r2,r23
   18ab0:	d8012585 	stb	zero,1174(sp)
   18ab4:	003e7206 	br	18480 <___vfprintf_internal_r+0x35c>
   18ab8:	84000814 	ori	r16,r16,32
   18abc:	ac800007 	ldb	r18,0(r21)
   18ac0:	003df606 	br	1829c <___vfprintf_internal_r+0x178>
   18ac4:	d8812d17 	ldw	r2,1204(sp)
   18ac8:	d8012585 	stb	zero,1174(sp)
   18acc:	14c00017 	ldw	r19,0(r2)
   18ad0:	15c00104 	addi	r23,r2,4
   18ad4:	98040126 	beq	r19,zero,19adc <___vfprintf_internal_r+0x19b8>
   18ad8:	9809883a 	mov	r4,r19
   18adc:	e003dd16 	blt	fp,zero,19a54 <___vfprintf_internal_r+0x1930>
   18ae0:	000b883a 	mov	r5,zero
   18ae4:	e00d883a 	mov	r6,fp
   18ae8:	da413c15 	stw	r9,1264(sp)
   18aec:	001d3780 	call	1d378 <memchr>
   18af0:	da413c17 	ldw	r9,1264(sp)
   18af4:	10042e26 	beq	r2,zero,19bb0 <___vfprintf_internal_r+0x1a8c>
   18af8:	14c5c83a 	sub	r2,r2,r19
   18afc:	d8812b15 	stw	r2,1196(sp)
   18b00:	e083790e 	bge	fp,r2,198e8 <___vfprintf_internal_r+0x17c4>
   18b04:	df012815 	stw	fp,1184(sp)
   18b08:	e0049516 	blt	fp,zero,19d60 <___vfprintf_internal_r+0x1c3c>
   18b0c:	d8812583 	ldbu	r2,1174(sp)
   18b10:	df012b15 	stw	fp,1196(sp)
   18b14:	ddc12d15 	stw	r23,1204(sp)
   18b18:	d8013115 	stw	zero,1220(sp)
   18b1c:	003e6c06 	br	184d0 <___vfprintf_internal_r+0x3ac>
   18b20:	020000f4 	movhi	r8,3
   18b24:	42024904 	addi	r8,r8,2340
   18b28:	da013615 	stw	r8,1240(sp)
   18b2c:	8080080c 	andi	r2,r16,32
   18b30:	103f6a1e 	bne	r2,zero,188dc <___vfprintf_internal_r+0x7b8>
   18b34:	8080040c 	andi	r2,r16,16
   18b38:	10029326 	beq	r2,zero,19588 <___vfprintf_internal_r+0x1464>
   18b3c:	d8c12d17 	ldw	r3,1204(sp)
   18b40:	002d883a 	mov	r22,zero
   18b44:	1dc00017 	ldw	r23,0(r3)
   18b48:	18c00104 	addi	r3,r3,4
   18b4c:	d8c12d15 	stw	r3,1204(sp)
   18b50:	003f6706 	br	188f0 <___vfprintf_internal_r+0x7cc>
   18b54:	84000214 	ori	r16,r16,8
   18b58:	ac800007 	ldb	r18,0(r21)
   18b5c:	003dcf06 	br	1829c <___vfprintf_internal_r+0x178>
   18b60:	da011d17 	ldw	r8,1140(sp)
   18b64:	d8c11c17 	ldw	r3,1136(sp)
   18b68:	d8812587 	ldb	r2,1174(sp)
   18b6c:	10000b26 	beq	r2,zero,18b9c <___vfprintf_internal_r+0xa78>
   18b70:	d8812584 	addi	r2,sp,1174
   18b74:	48800015 	stw	r2,0(r9)
   18b78:	00800044 	movi	r2,1
   18b7c:	48800115 	stw	r2,4(r9)
   18b80:	4091883a 	add	r8,r8,r2
   18b84:	1887883a 	add	r3,r3,r2
   18b88:	da011d15 	stw	r8,1140(sp)
   18b8c:	d8c11c15 	stw	r3,1136(sp)
   18b90:	008001c4 	movi	r2,7
   18b94:	10c18516 	blt	r2,r3,191ac <___vfprintf_internal_r+0x1088>
   18b98:	4a400204 	addi	r9,r9,8
   18b9c:	d9012a17 	ldw	r4,1192(sp)
   18ba0:	20000b26 	beq	r4,zero,18bd0 <___vfprintf_internal_r+0xaac>
   18ba4:	d8812504 	addi	r2,sp,1172
   18ba8:	48800015 	stw	r2,0(r9)
   18bac:	00800084 	movi	r2,2
   18bb0:	48800115 	stw	r2,4(r9)
   18bb4:	4091883a 	add	r8,r8,r2
   18bb8:	18c00044 	addi	r3,r3,1
   18bbc:	da011d15 	stw	r8,1140(sp)
   18bc0:	d8c11c15 	stw	r3,1136(sp)
   18bc4:	008001c4 	movi	r2,7
   18bc8:	10c18116 	blt	r2,r3,191d0 <___vfprintf_internal_r+0x10ac>
   18bcc:	4a400204 	addi	r9,r9,8
   18bd0:	d9012f17 	ldw	r4,1212(sp)
   18bd4:	00802004 	movi	r2,128
   18bd8:	2080fc26 	beq	r4,r2,18fcc <___vfprintf_internal_r+0xea8>
   18bdc:	d8813117 	ldw	r2,1220(sp)
   18be0:	d9012b17 	ldw	r4,1196(sp)
   18be4:	112fc83a 	sub	r23,r2,r4
   18be8:	05c02a0e 	bge	zero,r23,18c94 <___vfprintf_internal_r+0xb70>
   18bec:	07000404 	movi	fp,16
   18bf0:	050000f4 	movhi	r20,3
   18bf4:	a5025484 	addi	r20,r20,2386
   18bf8:	e5c01d0e 	bge	fp,r23,18c70 <___vfprintf_internal_r+0xb4c>
   18bfc:	dc812a15 	stw	r18,1192(sp)
   18c00:	058001c4 	movi	r22,7
   18c04:	a025883a 	mov	r18,r20
   18c08:	8029883a 	mov	r20,r16
   18c0c:	dc012917 	ldw	r16,1188(sp)
   18c10:	00000306 	br	18c20 <___vfprintf_internal_r+0xafc>
   18c14:	bdfffc04 	addi	r23,r23,-16
   18c18:	4a400204 	addi	r9,r9,8
   18c1c:	e5c0110e 	bge	fp,r23,18c64 <___vfprintf_internal_r+0xb40>
   18c20:	4c800015 	stw	r18,0(r9)
   18c24:	4f000115 	stw	fp,4(r9)
   18c28:	42000404 	addi	r8,r8,16
   18c2c:	18c00044 	addi	r3,r3,1
   18c30:	da011d15 	stw	r8,1140(sp)
   18c34:	d8c11c15 	stw	r3,1136(sp)
   18c38:	b0fff60e 	bge	r22,r3,18c14 <___vfprintf_internal_r+0xaf0>
   18c3c:	8809883a 	mov	r4,r17
   18c40:	800b883a 	mov	r5,r16
   18c44:	d9811b04 	addi	r6,sp,1132
   18c48:	00180f00 	call	180f0 <__sprint_r>
   18c4c:	103ec81e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18c50:	bdfffc04 	addi	r23,r23,-16
   18c54:	da011d17 	ldw	r8,1140(sp)
   18c58:	d8c11c17 	ldw	r3,1136(sp)
   18c5c:	da400404 	addi	r9,sp,16
   18c60:	e5ffef16 	blt	fp,r23,18c20 <___vfprintf_internal_r+0xafc>
   18c64:	a021883a 	mov	r16,r20
   18c68:	9029883a 	mov	r20,r18
   18c6c:	dc812a17 	ldw	r18,1192(sp)
   18c70:	4d000015 	stw	r20,0(r9)
   18c74:	4dc00115 	stw	r23,4(r9)
   18c78:	45d1883a 	add	r8,r8,r23
   18c7c:	18c00044 	addi	r3,r3,1
   18c80:	da011d15 	stw	r8,1140(sp)
   18c84:	d8c11c15 	stw	r3,1136(sp)
   18c88:	008001c4 	movi	r2,7
   18c8c:	10c13e16 	blt	r2,r3,19188 <___vfprintf_internal_r+0x1064>
   18c90:	4a400204 	addi	r9,r9,8
   18c94:	8080400c 	andi	r2,r16,256
   18c98:	1000831e 	bne	r2,zero,18ea8 <___vfprintf_internal_r+0xd84>
   18c9c:	d8812b17 	ldw	r2,1196(sp)
   18ca0:	4cc00015 	stw	r19,0(r9)
   18ca4:	48800115 	stw	r2,4(r9)
   18ca8:	4091883a 	add	r8,r8,r2
   18cac:	18c00044 	addi	r3,r3,1
   18cb0:	da011d15 	stw	r8,1140(sp)
   18cb4:	d8c11c15 	stw	r3,1136(sp)
   18cb8:	008001c4 	movi	r2,7
   18cbc:	10c05316 	blt	r2,r3,18e0c <___vfprintf_internal_r+0xce8>
   18cc0:	4a400204 	addi	r9,r9,8
   18cc4:	8400010c 	andi	r16,r16,4
   18cc8:	80002e26 	beq	r16,zero,18d84 <___vfprintf_internal_r+0xc60>
   18ccc:	d8812e17 	ldw	r2,1208(sp)
   18cd0:	d8c12817 	ldw	r3,1184(sp)
   18cd4:	10e1c83a 	sub	r16,r2,r3
   18cd8:	04002a0e 	bge	zero,r16,18d84 <___vfprintf_internal_r+0xc60>
   18cdc:	04800404 	movi	r18,16
   18ce0:	d8c11c17 	ldw	r3,1136(sp)
   18ce4:	05c000f4 	movhi	r23,3
   18ce8:	bdc25084 	addi	r23,r23,2370
   18cec:	9400170e 	bge	r18,r16,18d4c <___vfprintf_internal_r+0xc28>
   18cf0:	04c001c4 	movi	r19,7
   18cf4:	dd012917 	ldw	r20,1188(sp)
   18cf8:	00000306 	br	18d08 <___vfprintf_internal_r+0xbe4>
   18cfc:	843ffc04 	addi	r16,r16,-16
   18d00:	4a400204 	addi	r9,r9,8
   18d04:	9400110e 	bge	r18,r16,18d4c <___vfprintf_internal_r+0xc28>
   18d08:	4dc00015 	stw	r23,0(r9)
   18d0c:	4c800115 	stw	r18,4(r9)
   18d10:	42000404 	addi	r8,r8,16
   18d14:	18c00044 	addi	r3,r3,1
   18d18:	da011d15 	stw	r8,1140(sp)
   18d1c:	d8c11c15 	stw	r3,1136(sp)
   18d20:	98fff60e 	bge	r19,r3,18cfc <___vfprintf_internal_r+0xbd8>
   18d24:	8809883a 	mov	r4,r17
   18d28:	a00b883a 	mov	r5,r20
   18d2c:	d9811b04 	addi	r6,sp,1132
   18d30:	00180f00 	call	180f0 <__sprint_r>
   18d34:	103e8e1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18d38:	843ffc04 	addi	r16,r16,-16
   18d3c:	da011d17 	ldw	r8,1140(sp)
   18d40:	d8c11c17 	ldw	r3,1136(sp)
   18d44:	da400404 	addi	r9,sp,16
   18d48:	943fef16 	blt	r18,r16,18d08 <___vfprintf_internal_r+0xbe4>
   18d4c:	4dc00015 	stw	r23,0(r9)
   18d50:	4c000115 	stw	r16,4(r9)
   18d54:	8211883a 	add	r8,r16,r8
   18d58:	18c00044 	addi	r3,r3,1
   18d5c:	da011d15 	stw	r8,1140(sp)
   18d60:	d8c11c15 	stw	r3,1136(sp)
   18d64:	008001c4 	movi	r2,7
   18d68:	10c0060e 	bge	r2,r3,18d84 <___vfprintf_internal_r+0xc60>
   18d6c:	d9412917 	ldw	r5,1188(sp)
   18d70:	8809883a 	mov	r4,r17
   18d74:	d9811b04 	addi	r6,sp,1132
   18d78:	00180f00 	call	180f0 <__sprint_r>
   18d7c:	103e7c1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18d80:	da011d17 	ldw	r8,1140(sp)
   18d84:	dd012817 	ldw	r20,1184(sp)
   18d88:	d9012e17 	ldw	r4,1208(sp)
   18d8c:	a100010e 	bge	r20,r4,18d94 <___vfprintf_internal_r+0xc70>
   18d90:	2029883a 	mov	r20,r4
   18d94:	d8812c17 	ldw	r2,1200(sp)
   18d98:	1505883a 	add	r2,r2,r20
   18d9c:	d8812c15 	stw	r2,1200(sp)
   18da0:	4000b91e 	bne	r8,zero,19088 <___vfprintf_internal_r+0xf64>
   18da4:	d8011c15 	stw	zero,1136(sp)
   18da8:	a8800007 	ldb	r2,0(r21)
   18dac:	da400404 	addi	r9,sp,16
   18db0:	103d141e 	bne	r2,zero,18204 <___vfprintf_internal_r+0xe0>
   18db4:	a825883a 	mov	r18,r21
   18db8:	003d2a06 	br	18264 <___vfprintf_internal_r+0x140>
   18dbc:	d9412917 	ldw	r5,1188(sp)
   18dc0:	8809883a 	mov	r4,r17
   18dc4:	d9811b04 	addi	r6,sp,1132
   18dc8:	00180f00 	call	180f0 <__sprint_r>
   18dcc:	103e681e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18dd0:	da011d17 	ldw	r8,1140(sp)
   18dd4:	da400404 	addi	r9,sp,16
   18dd8:	8080004c 	andi	r2,r16,1
   18ddc:	103fb926 	beq	r2,zero,18cc4 <___vfprintf_internal_r+0xba0>
   18de0:	d8c11c17 	ldw	r3,1136(sp)
   18de4:	d9013717 	ldw	r4,1244(sp)
   18de8:	00800044 	movi	r2,1
   18dec:	48800115 	stw	r2,4(r9)
   18df0:	49000015 	stw	r4,0(r9)
   18df4:	4091883a 	add	r8,r8,r2
   18df8:	1887883a 	add	r3,r3,r2
   18dfc:	da011d15 	stw	r8,1140(sp)
   18e00:	d8c11c15 	stw	r3,1136(sp)
   18e04:	008001c4 	movi	r2,7
   18e08:	10ffad0e 	bge	r2,r3,18cc0 <___vfprintf_internal_r+0xb9c>
   18e0c:	d9412917 	ldw	r5,1188(sp)
   18e10:	8809883a 	mov	r4,r17
   18e14:	d9811b04 	addi	r6,sp,1132
   18e18:	00180f00 	call	180f0 <__sprint_r>
   18e1c:	103e541e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18e20:	da400404 	addi	r9,sp,16
   18e24:	da011d17 	ldw	r8,1140(sp)
   18e28:	003fa606 	br	18cc4 <___vfprintf_internal_r+0xba0>
   18e2c:	18803fcc 	andi	r2,r3,255
   18e30:	00c00044 	movi	r3,1
   18e34:	10c10126 	beq	r2,r3,1923c <___vfprintf_internal_r+0x1118>
   18e38:	00c00084 	movi	r3,2
   18e3c:	10c0f026 	beq	r2,r3,19200 <___vfprintf_internal_r+0x10dc>
   18e40:	d8c10dc4 	addi	r3,sp,1079
   18e44:	b808d0fa 	srli	r4,r23,3
   18e48:	b00a977a 	slli	r5,r22,29
   18e4c:	b02cd0fa 	srli	r22,r22,3
   18e50:	bdc001cc 	andi	r23,r23,7
   18e54:	b8800c04 	addi	r2,r23,48
   18e58:	292eb03a 	or	r23,r5,r4
   18e5c:	18800005 	stb	r2,0(r3)
   18e60:	bd88b03a 	or	r4,r23,r22
   18e64:	1827883a 	mov	r19,r3
   18e68:	18ffffc4 	addi	r3,r3,-1
   18e6c:	203ff51e 	bne	r4,zero,18e44 <___vfprintf_internal_r+0xd20>
   18e70:	8100004c 	andi	r4,r16,1
   18e74:	980b883a 	mov	r5,r19
   18e78:	20000726 	beq	r4,zero,18e98 <___vfprintf_internal_r+0xd74>
   18e7c:	10803fcc 	andi	r2,r2,255
   18e80:	1080201c 	xori	r2,r2,128
   18e84:	10bfe004 	addi	r2,r2,-128
   18e88:	01000c04 	movi	r4,48
   18e8c:	11000226 	beq	r2,r4,18e98 <___vfprintf_internal_r+0xd74>
   18e90:	1827883a 	mov	r19,r3
   18e94:	293fffc5 	stb	r4,-1(r5)
   18e98:	d8812717 	ldw	r2,1180(sp)
   18e9c:	14c5c83a 	sub	r2,r2,r19
   18ea0:	d8812b15 	stw	r2,1196(sp)
   18ea4:	003d8406 	br	184b8 <___vfprintf_internal_r+0x394>
   18ea8:	00801944 	movi	r2,101
   18eac:	14807c0e 	bge	r2,r18,190a0 <___vfprintf_internal_r+0xf7c>
   18eb0:	d9013317 	ldw	r4,1228(sp)
   18eb4:	d9413417 	ldw	r5,1232(sp)
   18eb8:	000d883a 	mov	r6,zero
   18ebc:	000f883a 	mov	r7,zero
   18ec0:	d8c13b15 	stw	r3,1260(sp)
   18ec4:	da013a15 	stw	r8,1256(sp)
   18ec8:	da413c15 	stw	r9,1264(sp)
   18ecc:	00205b80 	call	205b8 <__eqdf2>
   18ed0:	d8c13b17 	ldw	r3,1260(sp)
   18ed4:	da013a17 	ldw	r8,1256(sp)
   18ed8:	da413c17 	ldw	r9,1264(sp)
   18edc:	1001001e 	bne	r2,zero,192e0 <___vfprintf_internal_r+0x11bc>
   18ee0:	008000f4 	movhi	r2,3
   18ee4:	10825004 	addi	r2,r2,2368
   18ee8:	48800015 	stw	r2,0(r9)
   18eec:	00800044 	movi	r2,1
   18ef0:	48800115 	stw	r2,4(r9)
   18ef4:	4091883a 	add	r8,r8,r2
   18ef8:	1887883a 	add	r3,r3,r2
   18efc:	da011d15 	stw	r8,1140(sp)
   18f00:	d8c11c15 	stw	r3,1136(sp)
   18f04:	008001c4 	movi	r2,7
   18f08:	10c1dd16 	blt	r2,r3,19680 <___vfprintf_internal_r+0x155c>
   18f0c:	4a400204 	addi	r9,r9,8
   18f10:	d8812417 	ldw	r2,1168(sp)
   18f14:	d8c13217 	ldw	r3,1224(sp)
   18f18:	10c00216 	blt	r2,r3,18f24 <___vfprintf_internal_r+0xe00>
   18f1c:	8080004c 	andi	r2,r16,1
   18f20:	103f6826 	beq	r2,zero,18cc4 <___vfprintf_internal_r+0xba0>
   18f24:	d8c11c17 	ldw	r3,1136(sp)
   18f28:	d9013717 	ldw	r4,1244(sp)
   18f2c:	00800044 	movi	r2,1
   18f30:	48800115 	stw	r2,4(r9)
   18f34:	49000015 	stw	r4,0(r9)
   18f38:	4091883a 	add	r8,r8,r2
   18f3c:	1887883a 	add	r3,r3,r2
   18f40:	da011d15 	stw	r8,1140(sp)
   18f44:	d8c11c15 	stw	r3,1136(sp)
   18f48:	008001c4 	movi	r2,7
   18f4c:	10c2af16 	blt	r2,r3,19a0c <___vfprintf_internal_r+0x18e8>
   18f50:	4a400204 	addi	r9,r9,8
   18f54:	d8813217 	ldw	r2,1224(sp)
   18f58:	14bfffc4 	addi	r18,r2,-1
   18f5c:	04bf590e 	bge	zero,r18,18cc4 <___vfprintf_internal_r+0xba0>
   18f60:	04c00404 	movi	r19,16
   18f64:	d8c11c17 	ldw	r3,1136(sp)
   18f68:	050000f4 	movhi	r20,3
   18f6c:	a5025484 	addi	r20,r20,2386
   18f70:	9c81630e 	bge	r19,r18,19500 <___vfprintf_internal_r+0x13dc>
   18f74:	058001c4 	movi	r22,7
   18f78:	ddc12917 	ldw	r23,1188(sp)
   18f7c:	00000306 	br	18f8c <___vfprintf_internal_r+0xe68>
   18f80:	4a400204 	addi	r9,r9,8
   18f84:	94bffc04 	addi	r18,r18,-16
   18f88:	9c815d0e 	bge	r19,r18,19500 <___vfprintf_internal_r+0x13dc>
   18f8c:	4d000015 	stw	r20,0(r9)
   18f90:	4cc00115 	stw	r19,4(r9)
   18f94:	42000404 	addi	r8,r8,16
   18f98:	18c00044 	addi	r3,r3,1
   18f9c:	da011d15 	stw	r8,1140(sp)
   18fa0:	d8c11c15 	stw	r3,1136(sp)
   18fa4:	b0fff60e 	bge	r22,r3,18f80 <___vfprintf_internal_r+0xe5c>
   18fa8:	8809883a 	mov	r4,r17
   18fac:	b80b883a 	mov	r5,r23
   18fb0:	d9811b04 	addi	r6,sp,1132
   18fb4:	00180f00 	call	180f0 <__sprint_r>
   18fb8:	103ded1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   18fbc:	da011d17 	ldw	r8,1140(sp)
   18fc0:	d8c11c17 	ldw	r3,1136(sp)
   18fc4:	da400404 	addi	r9,sp,16
   18fc8:	003fee06 	br	18f84 <___vfprintf_internal_r+0xe60>
   18fcc:	d8812e17 	ldw	r2,1208(sp)
   18fd0:	d9012817 	ldw	r4,1184(sp)
   18fd4:	112fc83a 	sub	r23,r2,r4
   18fd8:	05ff000e 	bge	zero,r23,18bdc <___vfprintf_internal_r+0xab8>
   18fdc:	07000404 	movi	fp,16
   18fe0:	050000f4 	movhi	r20,3
   18fe4:	a5025484 	addi	r20,r20,2386
   18fe8:	e5c01d0e 	bge	fp,r23,19060 <___vfprintf_internal_r+0xf3c>
   18fec:	dc812a15 	stw	r18,1192(sp)
   18ff0:	058001c4 	movi	r22,7
   18ff4:	a025883a 	mov	r18,r20
   18ff8:	8029883a 	mov	r20,r16
   18ffc:	dc012917 	ldw	r16,1188(sp)
   19000:	00000306 	br	19010 <___vfprintf_internal_r+0xeec>
   19004:	bdfffc04 	addi	r23,r23,-16
   19008:	4a400204 	addi	r9,r9,8
   1900c:	e5c0110e 	bge	fp,r23,19054 <___vfprintf_internal_r+0xf30>
   19010:	4c800015 	stw	r18,0(r9)
   19014:	4f000115 	stw	fp,4(r9)
   19018:	42000404 	addi	r8,r8,16
   1901c:	18c00044 	addi	r3,r3,1
   19020:	da011d15 	stw	r8,1140(sp)
   19024:	d8c11c15 	stw	r3,1136(sp)
   19028:	b0fff60e 	bge	r22,r3,19004 <___vfprintf_internal_r+0xee0>
   1902c:	8809883a 	mov	r4,r17
   19030:	800b883a 	mov	r5,r16
   19034:	d9811b04 	addi	r6,sp,1132
   19038:	00180f00 	call	180f0 <__sprint_r>
   1903c:	103dcc1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19040:	bdfffc04 	addi	r23,r23,-16
   19044:	da011d17 	ldw	r8,1140(sp)
   19048:	d8c11c17 	ldw	r3,1136(sp)
   1904c:	da400404 	addi	r9,sp,16
   19050:	e5ffef16 	blt	fp,r23,19010 <___vfprintf_internal_r+0xeec>
   19054:	a021883a 	mov	r16,r20
   19058:	9029883a 	mov	r20,r18
   1905c:	dc812a17 	ldw	r18,1192(sp)
   19060:	4d000015 	stw	r20,0(r9)
   19064:	4dc00115 	stw	r23,4(r9)
   19068:	45d1883a 	add	r8,r8,r23
   1906c:	18c00044 	addi	r3,r3,1
   19070:	da011d15 	stw	r8,1140(sp)
   19074:	d8c11c15 	stw	r3,1136(sp)
   19078:	008001c4 	movi	r2,7
   1907c:	10c11716 	blt	r2,r3,194dc <___vfprintf_internal_r+0x13b8>
   19080:	4a400204 	addi	r9,r9,8
   19084:	003ed506 	br	18bdc <___vfprintf_internal_r+0xab8>
   19088:	d9412917 	ldw	r5,1188(sp)
   1908c:	8809883a 	mov	r4,r17
   19090:	d9811b04 	addi	r6,sp,1132
   19094:	00180f00 	call	180f0 <__sprint_r>
   19098:	103f4226 	beq	r2,zero,18da4 <___vfprintf_internal_r+0xc80>
   1909c:	003db406 	br	18770 <___vfprintf_internal_r+0x64c>
   190a0:	d9013217 	ldw	r4,1224(sp)
   190a4:	00800044 	movi	r2,1
   190a8:	4cc00015 	stw	r19,0(r9)
   190ac:	1100e10e 	bge	r2,r4,19434 <___vfprintf_internal_r+0x1310>
   190b0:	00800044 	movi	r2,1
   190b4:	48800115 	stw	r2,4(r9)
   190b8:	4091883a 	add	r8,r8,r2
   190bc:	1887883a 	add	r3,r3,r2
   190c0:	da011d15 	stw	r8,1140(sp)
   190c4:	d8c11c15 	stw	r3,1136(sp)
   190c8:	008001c4 	movi	r2,7
   190cc:	10c0ed16 	blt	r2,r3,19484 <___vfprintf_internal_r+0x1360>
   190d0:	4a400204 	addi	r9,r9,8
   190d4:	d8813717 	ldw	r2,1244(sp)
   190d8:	48800015 	stw	r2,0(r9)
   190dc:	00800044 	movi	r2,1
   190e0:	48800115 	stw	r2,4(r9)
   190e4:	4091883a 	add	r8,r8,r2
   190e8:	1887883a 	add	r3,r3,r2
   190ec:	da011d15 	stw	r8,1140(sp)
   190f0:	d8c11c15 	stw	r3,1136(sp)
   190f4:	008001c4 	movi	r2,7
   190f8:	10c0eb16 	blt	r2,r3,194a8 <___vfprintf_internal_r+0x1384>
   190fc:	4c800204 	addi	r18,r9,8
   19100:	d9013317 	ldw	r4,1228(sp)
   19104:	d9413417 	ldw	r5,1232(sp)
   19108:	000d883a 	mov	r6,zero
   1910c:	000f883a 	mov	r7,zero
   19110:	d8c13b15 	stw	r3,1260(sp)
   19114:	da013a15 	stw	r8,1256(sp)
   19118:	00206140 	call	20614 <__nedf2>
   1911c:	d8c13b17 	ldw	r3,1260(sp)
   19120:	da013a17 	ldw	r8,1256(sp)
   19124:	1000a626 	beq	r2,zero,193c0 <___vfprintf_internal_r+0x129c>
   19128:	d9013217 	ldw	r4,1224(sp)
   1912c:	9cc00044 	addi	r19,r19,1
   19130:	94c00015 	stw	r19,0(r18)
   19134:	20bfffc4 	addi	r2,r4,-1
   19138:	90800115 	stw	r2,4(r18)
   1913c:	4091883a 	add	r8,r8,r2
   19140:	18c00044 	addi	r3,r3,1
   19144:	da011d15 	stw	r8,1140(sp)
   19148:	d8c11c15 	stw	r3,1136(sp)
   1914c:	008001c4 	movi	r2,7
   19150:	10c0c316 	blt	r2,r3,19460 <___vfprintf_internal_r+0x133c>
   19154:	94800204 	addi	r18,r18,8
   19158:	d9013517 	ldw	r4,1236(sp)
   1915c:	d8811fc4 	addi	r2,sp,1151
   19160:	90800015 	stw	r2,0(r18)
   19164:	91000115 	stw	r4,4(r18)
   19168:	4111883a 	add	r8,r8,r4
   1916c:	18c00044 	addi	r3,r3,1
   19170:	da011d15 	stw	r8,1140(sp)
   19174:	d8c11c15 	stw	r3,1136(sp)
   19178:	008001c4 	movi	r2,7
   1917c:	10ff2316 	blt	r2,r3,18e0c <___vfprintf_internal_r+0xce8>
   19180:	92400204 	addi	r9,r18,8
   19184:	003ecf06 	br	18cc4 <___vfprintf_internal_r+0xba0>
   19188:	d9412917 	ldw	r5,1188(sp)
   1918c:	8809883a 	mov	r4,r17
   19190:	d9811b04 	addi	r6,sp,1132
   19194:	00180f00 	call	180f0 <__sprint_r>
   19198:	103d751e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   1919c:	da011d17 	ldw	r8,1140(sp)
   191a0:	d8c11c17 	ldw	r3,1136(sp)
   191a4:	da400404 	addi	r9,sp,16
   191a8:	003eba06 	br	18c94 <___vfprintf_internal_r+0xb70>
   191ac:	d9412917 	ldw	r5,1188(sp)
   191b0:	8809883a 	mov	r4,r17
   191b4:	d9811b04 	addi	r6,sp,1132
   191b8:	00180f00 	call	180f0 <__sprint_r>
   191bc:	103d6c1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   191c0:	da011d17 	ldw	r8,1140(sp)
   191c4:	d8c11c17 	ldw	r3,1136(sp)
   191c8:	da400404 	addi	r9,sp,16
   191cc:	003e7306 	br	18b9c <___vfprintf_internal_r+0xa78>
   191d0:	d9412917 	ldw	r5,1188(sp)
   191d4:	8809883a 	mov	r4,r17
   191d8:	d9811b04 	addi	r6,sp,1132
   191dc:	00180f00 	call	180f0 <__sprint_r>
   191e0:	103d631e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   191e4:	da011d17 	ldw	r8,1140(sp)
   191e8:	d8c11c17 	ldw	r3,1136(sp)
   191ec:	da400404 	addi	r9,sp,16
   191f0:	003e7706 	br	18bd0 <___vfprintf_internal_r+0xaac>
   191f4:	d8012b15 	stw	zero,1196(sp)
   191f8:	dcc10e04 	addi	r19,sp,1080
   191fc:	003cae06 	br	184b8 <___vfprintf_internal_r+0x394>
   19200:	d9413617 	ldw	r5,1240(sp)
   19204:	d8810dc4 	addi	r2,sp,1079
   19208:	b8c003cc 	andi	r3,r23,15
   1920c:	b008973a 	slli	r4,r22,28
   19210:	28c7883a 	add	r3,r5,r3
   19214:	b82ed13a 	srli	r23,r23,4
   19218:	18c00003 	ldbu	r3,0(r3)
   1921c:	b02cd13a 	srli	r22,r22,4
   19220:	25eeb03a 	or	r23,r4,r23
   19224:	10c00005 	stb	r3,0(r2)
   19228:	bd86b03a 	or	r3,r23,r22
   1922c:	1027883a 	mov	r19,r2
   19230:	10bfffc4 	addi	r2,r2,-1
   19234:	183ff41e 	bne	r3,zero,19208 <___vfprintf_internal_r+0x10e4>
   19238:	003f1706 	br	18e98 <___vfprintf_internal_r+0xd74>
   1923c:	b0025826 	beq	r22,zero,19ba0 <___vfprintf_internal_r+0x1a7c>
   19240:	b807883a 	mov	r3,r23
   19244:	d8810dc4 	addi	r2,sp,1079
   19248:	882f883a 	mov	r23,r17
   1924c:	04c00244 	movi	r19,9
   19250:	8023883a 	mov	r17,r16
   19254:	da412815 	stw	r9,1184(sp)
   19258:	1821883a 	mov	r16,r3
   1925c:	8009883a 	mov	r4,r16
   19260:	b00b883a 	mov	r5,r22
   19264:	01800284 	movi	r6,10
   19268:	000f883a 	mov	r7,zero
   1926c:	1029883a 	mov	r20,r2
   19270:	001f78c0 	call	1f78c <__umoddi3>
   19274:	10800c04 	addi	r2,r2,48
   19278:	8009883a 	mov	r4,r16
   1927c:	b00b883a 	mov	r5,r22
   19280:	a0800005 	stb	r2,0(r20)
   19284:	01800284 	movi	r6,10
   19288:	000f883a 	mov	r7,zero
   1928c:	001f1c40 	call	1f1c4 <__udivdi3>
   19290:	1021883a 	mov	r16,r2
   19294:	182d883a 	mov	r22,r3
   19298:	a0bfffc4 	addi	r2,r20,-1
   1929c:	183fef1e 	bne	r3,zero,1925c <___vfprintf_internal_r+0x1138>
   192a0:	9c3fee36 	bltu	r19,r16,1925c <___vfprintf_internal_r+0x1138>
   192a4:	da412817 	ldw	r9,1184(sp)
   192a8:	8005883a 	mov	r2,r16
   192ac:	8821883a 	mov	r16,r17
   192b0:	b823883a 	mov	r17,r23
   192b4:	102f883a 	mov	r23,r2
   192b8:	d8812717 	ldw	r2,1180(sp)
   192bc:	a4ffffc4 	addi	r19,r20,-1
   192c0:	bdc00c04 	addi	r23,r23,48
   192c4:	14c5c83a 	sub	r2,r2,r19
   192c8:	a5ffffc5 	stb	r23,-1(r20)
   192cc:	d8812b15 	stw	r2,1196(sp)
   192d0:	003c7906 	br	184b8 <___vfprintf_internal_r+0x394>
   192d4:	00c00044 	movi	r3,1
   192d8:	bd84b03a 	or	r2,r23,r22
   192dc:	003c6806 	br	18480 <___vfprintf_internal_r+0x35c>
   192e0:	dc812417 	ldw	r18,1168(sp)
   192e4:	0480ee0e 	bge	zero,r18,196a0 <___vfprintf_internal_r+0x157c>
   192e8:	d9013217 	ldw	r4,1224(sp)
   192ec:	4cc00015 	stw	r19,0(r9)
   192f0:	9100c616 	blt	r18,r4,1960c <___vfprintf_internal_r+0x14e8>
   192f4:	49000115 	stw	r4,4(r9)
   192f8:	4111883a 	add	r8,r8,r4
   192fc:	18c00044 	addi	r3,r3,1
   19300:	da011d15 	stw	r8,1140(sp)
   19304:	d8c11c15 	stw	r3,1136(sp)
   19308:	008001c4 	movi	r2,7
   1930c:	10c20916 	blt	r2,r3,19b34 <___vfprintf_internal_r+0x1a10>
   19310:	4a400204 	addi	r9,r9,8
   19314:	d8813217 	ldw	r2,1224(sp)
   19318:	90a5c83a 	sub	r18,r18,r2
   1931c:	04beae0e 	bge	zero,r18,18dd8 <___vfprintf_internal_r+0xcb4>
   19320:	04c00404 	movi	r19,16
   19324:	d8c11c17 	ldw	r3,1136(sp)
   19328:	050000f4 	movhi	r20,3
   1932c:	a5025484 	addi	r20,r20,2386
   19330:	9c81be0e 	bge	r19,r18,19a2c <___vfprintf_internal_r+0x1908>
   19334:	058001c4 	movi	r22,7
   19338:	ddc12917 	ldw	r23,1188(sp)
   1933c:	00000306 	br	1934c <___vfprintf_internal_r+0x1228>
   19340:	4a400204 	addi	r9,r9,8
   19344:	94bffc04 	addi	r18,r18,-16
   19348:	9c81b80e 	bge	r19,r18,19a2c <___vfprintf_internal_r+0x1908>
   1934c:	4d000015 	stw	r20,0(r9)
   19350:	4cc00115 	stw	r19,4(r9)
   19354:	42000404 	addi	r8,r8,16
   19358:	18c00044 	addi	r3,r3,1
   1935c:	da011d15 	stw	r8,1140(sp)
   19360:	d8c11c15 	stw	r3,1136(sp)
   19364:	b0fff60e 	bge	r22,r3,19340 <___vfprintf_internal_r+0x121c>
   19368:	8809883a 	mov	r4,r17
   1936c:	b80b883a 	mov	r5,r23
   19370:	d9811b04 	addi	r6,sp,1132
   19374:	00180f00 	call	180f0 <__sprint_r>
   19378:	103cfd1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   1937c:	da011d17 	ldw	r8,1140(sp)
   19380:	d8c11c17 	ldw	r3,1136(sp)
   19384:	da400404 	addi	r9,sp,16
   19388:	003fee06 	br	19344 <___vfprintf_internal_r+0x1220>
   1938c:	d9412917 	ldw	r5,1188(sp)
   19390:	8809883a 	mov	r4,r17
   19394:	d9811b04 	addi	r6,sp,1132
   19398:	00180f00 	call	180f0 <__sprint_r>
   1939c:	103cf41e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   193a0:	da011d17 	ldw	r8,1140(sp)
   193a4:	d8c11c17 	ldw	r3,1136(sp)
   193a8:	da400404 	addi	r9,sp,16
   193ac:	003dee06 	br	18b68 <___vfprintf_internal_r+0xa44>
   193b0:	00c00084 	movi	r3,2
   193b4:	bd84b03a 	or	r2,r23,r22
   193b8:	d8012585 	stb	zero,1174(sp)
   193bc:	003c3006 	br	18480 <___vfprintf_internal_r+0x35c>
   193c0:	d8813217 	ldw	r2,1224(sp)
   193c4:	14ffffc4 	addi	r19,r2,-1
   193c8:	04ff630e 	bge	zero,r19,19158 <___vfprintf_internal_r+0x1034>
   193cc:	05800404 	movi	r22,16
   193d0:	050000f4 	movhi	r20,3
   193d4:	a5025484 	addi	r20,r20,2386
   193d8:	b4c03c0e 	bge	r22,r19,194cc <___vfprintf_internal_r+0x13a8>
   193dc:	05c001c4 	movi	r23,7
   193e0:	df012917 	ldw	fp,1188(sp)
   193e4:	00000306 	br	193f4 <___vfprintf_internal_r+0x12d0>
   193e8:	94800204 	addi	r18,r18,8
   193ec:	9cfffc04 	addi	r19,r19,-16
   193f0:	b4c0360e 	bge	r22,r19,194cc <___vfprintf_internal_r+0x13a8>
   193f4:	95000015 	stw	r20,0(r18)
   193f8:	95800115 	stw	r22,4(r18)
   193fc:	42000404 	addi	r8,r8,16
   19400:	18c00044 	addi	r3,r3,1
   19404:	da011d15 	stw	r8,1140(sp)
   19408:	d8c11c15 	stw	r3,1136(sp)
   1940c:	b8fff60e 	bge	r23,r3,193e8 <___vfprintf_internal_r+0x12c4>
   19410:	8809883a 	mov	r4,r17
   19414:	e00b883a 	mov	r5,fp
   19418:	d9811b04 	addi	r6,sp,1132
   1941c:	00180f00 	call	180f0 <__sprint_r>
   19420:	103cd31e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19424:	da011d17 	ldw	r8,1140(sp)
   19428:	d8c11c17 	ldw	r3,1136(sp)
   1942c:	dc800404 	addi	r18,sp,16
   19430:	003fee06 	br	193ec <___vfprintf_internal_r+0x12c8>
   19434:	8088703a 	and	r4,r16,r2
   19438:	203f1d1e 	bne	r4,zero,190b0 <___vfprintf_internal_r+0xf8c>
   1943c:	48800115 	stw	r2,4(r9)
   19440:	42000044 	addi	r8,r8,1
   19444:	18c00044 	addi	r3,r3,1
   19448:	da011d15 	stw	r8,1140(sp)
   1944c:	d8c11c15 	stw	r3,1136(sp)
   19450:	008001c4 	movi	r2,7
   19454:	10c00216 	blt	r2,r3,19460 <___vfprintf_internal_r+0x133c>
   19458:	4c800204 	addi	r18,r9,8
   1945c:	003f3e06 	br	19158 <___vfprintf_internal_r+0x1034>
   19460:	d9412917 	ldw	r5,1188(sp)
   19464:	8809883a 	mov	r4,r17
   19468:	d9811b04 	addi	r6,sp,1132
   1946c:	00180f00 	call	180f0 <__sprint_r>
   19470:	103cbf1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19474:	dc800404 	addi	r18,sp,16
   19478:	da011d17 	ldw	r8,1140(sp)
   1947c:	d8c11c17 	ldw	r3,1136(sp)
   19480:	003f3506 	br	19158 <___vfprintf_internal_r+0x1034>
   19484:	d9412917 	ldw	r5,1188(sp)
   19488:	8809883a 	mov	r4,r17
   1948c:	d9811b04 	addi	r6,sp,1132
   19490:	00180f00 	call	180f0 <__sprint_r>
   19494:	103cb61e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19498:	da011d17 	ldw	r8,1140(sp)
   1949c:	d8c11c17 	ldw	r3,1136(sp)
   194a0:	da400404 	addi	r9,sp,16
   194a4:	003f0b06 	br	190d4 <___vfprintf_internal_r+0xfb0>
   194a8:	d9412917 	ldw	r5,1188(sp)
   194ac:	8809883a 	mov	r4,r17
   194b0:	d9811b04 	addi	r6,sp,1132
   194b4:	00180f00 	call	180f0 <__sprint_r>
   194b8:	103cad1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   194bc:	da011d17 	ldw	r8,1140(sp)
   194c0:	d8c11c17 	ldw	r3,1136(sp)
   194c4:	dc800404 	addi	r18,sp,16
   194c8:	003f0d06 	br	19100 <___vfprintf_internal_r+0xfdc>
   194cc:	95000015 	stw	r20,0(r18)
   194d0:	94c00115 	stw	r19,4(r18)
   194d4:	44d1883a 	add	r8,r8,r19
   194d8:	003f1906 	br	19140 <___vfprintf_internal_r+0x101c>
   194dc:	d9412917 	ldw	r5,1188(sp)
   194e0:	8809883a 	mov	r4,r17
   194e4:	d9811b04 	addi	r6,sp,1132
   194e8:	00180f00 	call	180f0 <__sprint_r>
   194ec:	103ca01e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   194f0:	da011d17 	ldw	r8,1140(sp)
   194f4:	d8c11c17 	ldw	r3,1136(sp)
   194f8:	da400404 	addi	r9,sp,16
   194fc:	003db706 	br	18bdc <___vfprintf_internal_r+0xab8>
   19500:	4d000015 	stw	r20,0(r9)
   19504:	4c800115 	stw	r18,4(r9)
   19508:	4491883a 	add	r8,r8,r18
   1950c:	003de706 	br	18cac <___vfprintf_internal_r+0xb88>
   19510:	8080100c 	andi	r2,r16,64
   19514:	10010226 	beq	r2,zero,19920 <___vfprintf_internal_r+0x17fc>
   19518:	d8812d17 	ldw	r2,1204(sp)
   1951c:	002d883a 	mov	r22,zero
   19520:	00c00044 	movi	r3,1
   19524:	15c0000b 	ldhu	r23,0(r2)
   19528:	10800104 	addi	r2,r2,4
   1952c:	d8812d15 	stw	r2,1204(sp)
   19530:	d8012585 	stb	zero,1174(sp)
   19534:	b805883a 	mov	r2,r23
   19538:	003bd106 	br	18480 <___vfprintf_internal_r+0x35c>
   1953c:	d9012d17 	ldw	r4,1204(sp)
   19540:	25800017 	ldw	r22,0(r4)
   19544:	25000117 	ldw	r20,4(r4)
   19548:	21000204 	addi	r4,r4,8
   1954c:	d9012d15 	stw	r4,1204(sp)
   19550:	dd813315 	stw	r22,1228(sp)
   19554:	dd013415 	stw	r20,1232(sp)
   19558:	003d2b06 	br	18a08 <___vfprintf_internal_r+0x8e4>
   1955c:	8080100c 	andi	r2,r16,64
   19560:	1000fe26 	beq	r2,zero,1995c <___vfprintf_internal_r+0x1838>
   19564:	d9012d17 	ldw	r4,1204(sp)
   19568:	002d883a 	mov	r22,zero
   1956c:	0007883a 	mov	r3,zero
   19570:	25c0000b 	ldhu	r23,0(r4)
   19574:	21000104 	addi	r4,r4,4
   19578:	d9012d15 	stw	r4,1204(sp)
   1957c:	b805883a 	mov	r2,r23
   19580:	d8012585 	stb	zero,1174(sp)
   19584:	003bbe06 	br	18480 <___vfprintf_internal_r+0x35c>
   19588:	8080100c 	andi	r2,r16,64
   1958c:	1000ed26 	beq	r2,zero,19944 <___vfprintf_internal_r+0x1820>
   19590:	d9012d17 	ldw	r4,1204(sp)
   19594:	002d883a 	mov	r22,zero
   19598:	25c0000b 	ldhu	r23,0(r4)
   1959c:	21000104 	addi	r4,r4,4
   195a0:	d9012d15 	stw	r4,1204(sp)
   195a4:	003cd206 	br	188f0 <___vfprintf_internal_r+0x7cc>
   195a8:	00c00084 	movi	r3,2
   195ac:	d8012585 	stb	zero,1174(sp)
   195b0:	003bb306 	br	18480 <___vfprintf_internal_r+0x35c>
   195b4:	8080040c 	andi	r2,r16,16
   195b8:	1000f11e 	bne	r2,zero,19980 <___vfprintf_internal_r+0x185c>
   195bc:	8400100c 	andi	r16,r16,64
   195c0:	80015526 	beq	r16,zero,19b18 <___vfprintf_internal_r+0x19f4>
   195c4:	da012d17 	ldw	r8,1204(sp)
   195c8:	d8c12c17 	ldw	r3,1200(sp)
   195cc:	40800017 	ldw	r2,0(r8)
   195d0:	42000104 	addi	r8,r8,4
   195d4:	da012d15 	stw	r8,1204(sp)
   195d8:	10c0000d 	sth	r3,0(r2)
   195dc:	003b0706 	br	181fc <___vfprintf_internal_r+0xd8>
   195e0:	8080100c 	andi	r2,r16,64
   195e4:	1000c726 	beq	r2,zero,19904 <___vfprintf_internal_r+0x17e0>
   195e8:	da012d17 	ldw	r8,1204(sp)
   195ec:	45c0000f 	ldh	r23,0(r8)
   195f0:	42000104 	addi	r8,r8,4
   195f4:	da012d15 	stw	r8,1204(sp)
   195f8:	b82dd7fa 	srai	r22,r23,31
   195fc:	b005883a 	mov	r2,r22
   19600:	003c1006 	br	18644 <___vfprintf_internal_r+0x520>
   19604:	ac800007 	ldb	r18,0(r21)
   19608:	003b2406 	br	1829c <___vfprintf_internal_r+0x178>
   1960c:	4c800115 	stw	r18,4(r9)
   19610:	9211883a 	add	r8,r18,r8
   19614:	18c00044 	addi	r3,r3,1
   19618:	da011d15 	stw	r8,1140(sp)
   1961c:	d8c11c15 	stw	r3,1136(sp)
   19620:	008001c4 	movi	r2,7
   19624:	10c15416 	blt	r2,r3,19b78 <___vfprintf_internal_r+0x1a54>
   19628:	4a400204 	addi	r9,r9,8
   1962c:	d8813717 	ldw	r2,1244(sp)
   19630:	9ca7883a 	add	r19,r19,r18
   19634:	48800015 	stw	r2,0(r9)
   19638:	00800044 	movi	r2,1
   1963c:	48800115 	stw	r2,4(r9)
   19640:	4091883a 	add	r8,r8,r2
   19644:	1887883a 	add	r3,r3,r2
   19648:	da011d15 	stw	r8,1140(sp)
   1964c:	d8c11c15 	stw	r3,1136(sp)
   19650:	008001c4 	movi	r2,7
   19654:	10c14016 	blt	r2,r3,19b58 <___vfprintf_internal_r+0x1a34>
   19658:	4a400204 	addi	r9,r9,8
   1965c:	d9013217 	ldw	r4,1224(sp)
   19660:	da011d17 	ldw	r8,1140(sp)
   19664:	d8c11c17 	ldw	r3,1136(sp)
   19668:	24a5c83a 	sub	r18,r4,r18
   1966c:	4cc00015 	stw	r19,0(r9)
   19670:	003fa406 	br	19504 <___vfprintf_internal_r+0x13e0>
   19674:	04c000f4 	movhi	r19,3
   19678:	9cc24104 	addi	r19,r19,2308
   1967c:	003cf406 	br	18a50 <___vfprintf_internal_r+0x92c>
   19680:	d9412917 	ldw	r5,1188(sp)
   19684:	8809883a 	mov	r4,r17
   19688:	d9811b04 	addi	r6,sp,1132
   1968c:	00180f00 	call	180f0 <__sprint_r>
   19690:	103c371e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19694:	da011d17 	ldw	r8,1140(sp)
   19698:	da400404 	addi	r9,sp,16
   1969c:	003e1c06 	br	18f10 <___vfprintf_internal_r+0xdec>
   196a0:	008000f4 	movhi	r2,3
   196a4:	10825004 	addi	r2,r2,2368
   196a8:	48800015 	stw	r2,0(r9)
   196ac:	00800044 	movi	r2,1
   196b0:	48800115 	stw	r2,4(r9)
   196b4:	4091883a 	add	r8,r8,r2
   196b8:	1887883a 	add	r3,r3,r2
   196bc:	da011d15 	stw	r8,1140(sp)
   196c0:	d8c11c15 	stw	r3,1136(sp)
   196c4:	008001c4 	movi	r2,7
   196c8:	10c0c316 	blt	r2,r3,199d8 <___vfprintf_internal_r+0x18b4>
   196cc:	4a400204 	addi	r9,r9,8
   196d0:	9000041e 	bne	r18,zero,196e4 <___vfprintf_internal_r+0x15c0>
   196d4:	d8c13217 	ldw	r3,1224(sp)
   196d8:	1800021e 	bne	r3,zero,196e4 <___vfprintf_internal_r+0x15c0>
   196dc:	8080004c 	andi	r2,r16,1
   196e0:	103d7826 	beq	r2,zero,18cc4 <___vfprintf_internal_r+0xba0>
   196e4:	d8c11c17 	ldw	r3,1136(sp)
   196e8:	d9013717 	ldw	r4,1244(sp)
   196ec:	00800044 	movi	r2,1
   196f0:	48800115 	stw	r2,4(r9)
   196f4:	49000015 	stw	r4,0(r9)
   196f8:	4091883a 	add	r8,r8,r2
   196fc:	1887883a 	add	r3,r3,r2
   19700:	da011d15 	stw	r8,1140(sp)
   19704:	d8c11c15 	stw	r3,1136(sp)
   19708:	008001c4 	movi	r2,7
   1970c:	10c12e16 	blt	r2,r3,19bc8 <___vfprintf_internal_r+0x1aa4>
   19710:	4a400204 	addi	r9,r9,8
   19714:	04a5c83a 	sub	r18,zero,r18
   19718:	0480de0e 	bge	zero,r18,19a94 <___vfprintf_internal_r+0x1970>
   1971c:	05800404 	movi	r22,16
   19720:	050000f4 	movhi	r20,3
   19724:	a5025484 	addi	r20,r20,2386
   19728:	b480e20e 	bge	r22,r18,19ab4 <___vfprintf_internal_r+0x1990>
   1972c:	05c001c4 	movi	r23,7
   19730:	df012917 	ldw	fp,1188(sp)
   19734:	00000306 	br	19744 <___vfprintf_internal_r+0x1620>
   19738:	4a400204 	addi	r9,r9,8
   1973c:	94bffc04 	addi	r18,r18,-16
   19740:	b480dc0e 	bge	r22,r18,19ab4 <___vfprintf_internal_r+0x1990>
   19744:	4d000015 	stw	r20,0(r9)
   19748:	4d800115 	stw	r22,4(r9)
   1974c:	42000404 	addi	r8,r8,16
   19750:	18c00044 	addi	r3,r3,1
   19754:	da011d15 	stw	r8,1140(sp)
   19758:	d8c11c15 	stw	r3,1136(sp)
   1975c:	b8fff60e 	bge	r23,r3,19738 <___vfprintf_internal_r+0x1614>
   19760:	8809883a 	mov	r4,r17
   19764:	e00b883a 	mov	r5,fp
   19768:	d9811b04 	addi	r6,sp,1132
   1976c:	00180f00 	call	180f0 <__sprint_r>
   19770:	103bff1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19774:	da011d17 	ldw	r8,1140(sp)
   19778:	d8c11c17 	ldw	r3,1136(sp)
   1977c:	da400404 	addi	r9,sp,16
   19780:	003fee06 	br	1973c <___vfprintf_internal_r+0x1618>
   19784:	da413c15 	stw	r9,1264(sp)
   19788:	001eb740 	call	1eb74 <__isnand>
   1978c:	da413c17 	ldw	r9,1264(sp)
   19790:	1000851e 	bne	r2,zero,199a8 <___vfprintf_internal_r+0x1884>
   19794:	00bfffc4 	movi	r2,-1
   19798:	e0817626 	beq	fp,r2,19d74 <___vfprintf_internal_r+0x1c50>
   1979c:	008019c4 	movi	r2,103
   197a0:	90817126 	beq	r18,r2,19d68 <___vfprintf_internal_r+0x1c44>
   197a4:	008011c4 	movi	r2,71
   197a8:	90816f26 	beq	r18,r2,19d68 <___vfprintf_internal_r+0x1c44>
   197ac:	82004014 	ori	r8,r16,256
   197b0:	da012a15 	stw	r8,1192(sp)
   197b4:	a0017116 	blt	r20,zero,19d7c <___vfprintf_internal_r+0x1c58>
   197b8:	d8012f05 	stb	zero,1212(sp)
   197bc:	00801984 	movi	r2,102
   197c0:	90811226 	beq	r18,r2,19c0c <___vfprintf_internal_r+0x1ae8>
   197c4:	00801184 	movi	r2,70
   197c8:	90811026 	beq	r18,r2,19c0c <___vfprintf_internal_r+0x1ae8>
   197cc:	00801944 	movi	r2,101
   197d0:	90819b26 	beq	r18,r2,19e40 <___vfprintf_internal_r+0x1d1c>
   197d4:	00801144 	movi	r2,69
   197d8:	90819926 	beq	r18,r2,19e40 <___vfprintf_internal_r+0x1d1c>
   197dc:	e02f883a 	mov	r23,fp
   197e0:	d8812404 	addi	r2,sp,1168
   197e4:	d8800115 	stw	r2,4(sp)
   197e8:	d8812304 	addi	r2,sp,1164
   197ec:	d8800215 	stw	r2,8(sp)
   197f0:	d8812204 	addi	r2,sp,1160
   197f4:	ddc00015 	stw	r23,0(sp)
   197f8:	d8800315 	stw	r2,12(sp)
   197fc:	8809883a 	mov	r4,r17
   19800:	b00b883a 	mov	r5,r22
   19804:	a00d883a 	mov	r6,r20
   19808:	01c00084 	movi	r7,2
   1980c:	da413c15 	stw	r9,1264(sp)
   19810:	001a4140 	call	1a414 <_dtoa_r>
   19814:	1027883a 	mov	r19,r2
   19818:	008019c4 	movi	r2,103
   1981c:	da413c17 	ldw	r9,1264(sp)
   19820:	90818c1e 	bne	r18,r2,19e54 <___vfprintf_internal_r+0x1d30>
   19824:	8080004c 	andi	r2,r16,1
   19828:	10017926 	beq	r2,zero,19e10 <___vfprintf_internal_r+0x1cec>
   1982c:	00801184 	movi	r2,70
   19830:	9dc7883a 	add	r3,r19,r23
   19834:	90810626 	beq	r18,r2,19c50 <___vfprintf_internal_r+0x1b2c>
   19838:	b009883a 	mov	r4,r22
   1983c:	a00b883a 	mov	r5,r20
   19840:	000d883a 	mov	r6,zero
   19844:	000f883a 	mov	r7,zero
   19848:	d8c13b15 	stw	r3,1260(sp)
   1984c:	da413c15 	stw	r9,1264(sp)
   19850:	00205b80 	call	205b8 <__eqdf2>
   19854:	d8c13b17 	ldw	r3,1260(sp)
   19858:	da413c17 	ldw	r9,1264(sp)
   1985c:	10000726 	beq	r2,zero,1987c <___vfprintf_internal_r+0x1758>
   19860:	d8812217 	ldw	r2,1160(sp)
   19864:	10c1962e 	bgeu	r2,r3,19ec0 <___vfprintf_internal_r+0x1d9c>
   19868:	01000c04 	movi	r4,48
   1986c:	11000005 	stb	r4,0(r2)
   19870:	10800044 	addi	r2,r2,1
   19874:	d8812215 	stw	r2,1160(sp)
   19878:	10fffc1e 	bne	r2,r3,1986c <___vfprintf_internal_r+0x1748>
   1987c:	1cc7c83a 	sub	r3,r3,r19
   19880:	d8c13215 	stw	r3,1224(sp)
   19884:	008019c4 	movi	r2,103
   19888:	90810626 	beq	r18,r2,19ca4 <___vfprintf_internal_r+0x1b80>
   1988c:	008011c4 	movi	r2,71
   19890:	90810426 	beq	r18,r2,19ca4 <___vfprintf_internal_r+0x1b80>
   19894:	00801984 	movi	r2,102
   19898:	90819a1e 	bne	r18,r2,19f04 <___vfprintf_internal_r+0x1de0>
   1989c:	d8812417 	ldw	r2,1168(sp)
   198a0:	d8812b15 	stw	r2,1196(sp)
   198a4:	0081880e 	bge	zero,r2,19ec8 <___vfprintf_internal_r+0x1da4>
   198a8:	e000021e 	bne	fp,zero,198b4 <___vfprintf_internal_r+0x1790>
   198ac:	8400004c 	andi	r16,r16,1
   198b0:	80000426 	beq	r16,zero,198c4 <___vfprintf_internal_r+0x17a0>
   198b4:	d8812b17 	ldw	r2,1196(sp)
   198b8:	e2000044 	addi	r8,fp,1
   198bc:	1205883a 	add	r2,r2,r8
   198c0:	d8812b15 	stw	r2,1196(sp)
   198c4:	d8812815 	stw	r2,1184(sp)
   198c8:	10011716 	blt	r2,zero,19d28 <___vfprintf_internal_r+0x1c04>
   198cc:	ddc12f07 	ldb	r23,1212(sp)
   198d0:	b800ca26 	beq	r23,zero,19bfc <___vfprintf_internal_r+0x1ad8>
   198d4:	00800b44 	movi	r2,45
   198d8:	d8812585 	stb	r2,1174(sp)
   198dc:	dc012a17 	ldw	r16,1192(sp)
   198e0:	d8013115 	stw	zero,1220(sp)
   198e4:	003afe06 	br	184e0 <___vfprintf_internal_r+0x3bc>
   198e8:	d8812b17 	ldw	r2,1196(sp)
   198ec:	d8812815 	stw	r2,1184(sp)
   198f0:	10005e16 	blt	r2,zero,19a6c <___vfprintf_internal_r+0x1948>
   198f4:	d8812583 	ldbu	r2,1174(sp)
   198f8:	ddc12d15 	stw	r23,1204(sp)
   198fc:	d8013115 	stw	zero,1220(sp)
   19900:	003af306 	br	184d0 <___vfprintf_internal_r+0x3ac>
   19904:	d8812d17 	ldw	r2,1204(sp)
   19908:	15c00017 	ldw	r23,0(r2)
   1990c:	10800104 	addi	r2,r2,4
   19910:	d8812d15 	stw	r2,1204(sp)
   19914:	b82dd7fa 	srai	r22,r23,31
   19918:	b005883a 	mov	r2,r22
   1991c:	003b4906 	br	18644 <___vfprintf_internal_r+0x520>
   19920:	d8c12d17 	ldw	r3,1204(sp)
   19924:	002d883a 	mov	r22,zero
   19928:	1dc00017 	ldw	r23,0(r3)
   1992c:	18c00104 	addi	r3,r3,4
   19930:	d8c12d15 	stw	r3,1204(sp)
   19934:	b805883a 	mov	r2,r23
   19938:	00c00044 	movi	r3,1
   1993c:	d8012585 	stb	zero,1174(sp)
   19940:	003acf06 	br	18480 <___vfprintf_internal_r+0x35c>
   19944:	da012d17 	ldw	r8,1204(sp)
   19948:	002d883a 	mov	r22,zero
   1994c:	45c00017 	ldw	r23,0(r8)
   19950:	42000104 	addi	r8,r8,4
   19954:	da012d15 	stw	r8,1204(sp)
   19958:	003be506 	br	188f0 <___vfprintf_internal_r+0x7cc>
   1995c:	da012d17 	ldw	r8,1204(sp)
   19960:	002d883a 	mov	r22,zero
   19964:	0007883a 	mov	r3,zero
   19968:	45c00017 	ldw	r23,0(r8)
   1996c:	42000104 	addi	r8,r8,4
   19970:	da012d15 	stw	r8,1204(sp)
   19974:	b805883a 	mov	r2,r23
   19978:	d8012585 	stb	zero,1174(sp)
   1997c:	003ac006 	br	18480 <___vfprintf_internal_r+0x35c>
   19980:	d8c12d17 	ldw	r3,1204(sp)
   19984:	d9012c17 	ldw	r4,1200(sp)
   19988:	18800017 	ldw	r2,0(r3)
   1998c:	18c00104 	addi	r3,r3,4
   19990:	d8c12d15 	stw	r3,1204(sp)
   19994:	11000015 	stw	r4,0(r2)
   19998:	003a1806 	br	181fc <___vfprintf_internal_r+0xd8>
   1999c:	073fffc4 	movi	fp,-1
   199a0:	202b883a 	mov	r21,r4
   199a4:	003a3e06 	br	182a0 <___vfprintf_internal_r+0x17c>
   199a8:	008011c4 	movi	r2,71
   199ac:	14809016 	blt	r2,r18,19bf0 <___vfprintf_internal_r+0x1acc>
   199b0:	04c000f4 	movhi	r19,3
   199b4:	9cc24204 	addi	r19,r19,2312
   199b8:	00c000c4 	movi	r3,3
   199bc:	00bfdfc4 	movi	r2,-129
   199c0:	80a0703a 	and	r16,r16,r2
   199c4:	d8c12815 	stw	r3,1184(sp)
   199c8:	d8812583 	ldbu	r2,1174(sp)
   199cc:	d8c12b15 	stw	r3,1196(sp)
   199d0:	d8013115 	stw	zero,1220(sp)
   199d4:	003abe06 	br	184d0 <___vfprintf_internal_r+0x3ac>
   199d8:	d9412917 	ldw	r5,1188(sp)
   199dc:	8809883a 	mov	r4,r17
   199e0:	d9811b04 	addi	r6,sp,1132
   199e4:	00180f00 	call	180f0 <__sprint_r>
   199e8:	103b611e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   199ec:	dc812417 	ldw	r18,1168(sp)
   199f0:	da011d17 	ldw	r8,1140(sp)
   199f4:	da400404 	addi	r9,sp,16
   199f8:	003f3506 	br	196d0 <___vfprintf_internal_r+0x15ac>
   199fc:	ad400044 	addi	r21,r21,1
   19a00:	84000814 	ori	r16,r16,32
   19a04:	14800047 	ldb	r18,1(r2)
   19a08:	003a2406 	br	1829c <___vfprintf_internal_r+0x178>
   19a0c:	d9412917 	ldw	r5,1188(sp)
   19a10:	8809883a 	mov	r4,r17
   19a14:	d9811b04 	addi	r6,sp,1132
   19a18:	00180f00 	call	180f0 <__sprint_r>
   19a1c:	103b541e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19a20:	da011d17 	ldw	r8,1140(sp)
   19a24:	da400404 	addi	r9,sp,16
   19a28:	003d4a06 	br	18f54 <___vfprintf_internal_r+0xe30>
   19a2c:	4d000015 	stw	r20,0(r9)
   19a30:	4c800115 	stw	r18,4(r9)
   19a34:	4491883a 	add	r8,r8,r18
   19a38:	18c00044 	addi	r3,r3,1
   19a3c:	da011d15 	stw	r8,1140(sp)
   19a40:	d8c11c15 	stw	r3,1136(sp)
   19a44:	008001c4 	movi	r2,7
   19a48:	10fcdc16 	blt	r2,r3,18dbc <___vfprintf_internal_r+0xc98>
   19a4c:	4a400204 	addi	r9,r9,8
   19a50:	003ce106 	br	18dd8 <___vfprintf_internal_r+0xcb4>
   19a54:	da413c15 	stw	r9,1264(sp)
   19a58:	0017f680 	call	17f68 <strlen>
   19a5c:	d8812b15 	stw	r2,1196(sp)
   19a60:	d8812815 	stw	r2,1184(sp)
   19a64:	da413c17 	ldw	r9,1264(sp)
   19a68:	103fa20e 	bge	r2,zero,198f4 <___vfprintf_internal_r+0x17d0>
   19a6c:	d8012815 	stw	zero,1184(sp)
   19a70:	003fa006 	br	198f4 <___vfprintf_internal_r+0x17d0>
   19a74:	d9412917 	ldw	r5,1188(sp)
   19a78:	8809883a 	mov	r4,r17
   19a7c:	d9811b04 	addi	r6,sp,1132
   19a80:	00180f00 	call	180f0 <__sprint_r>
   19a84:	103b3a1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19a88:	da011d17 	ldw	r8,1140(sp)
   19a8c:	d8c11c17 	ldw	r3,1136(sp)
   19a90:	da400404 	addi	r9,sp,16
   19a94:	d8813217 	ldw	r2,1224(sp)
   19a98:	4cc00015 	stw	r19,0(r9)
   19a9c:	48800115 	stw	r2,4(r9)
   19aa0:	4091883a 	add	r8,r8,r2
   19aa4:	003c8106 	br	18cac <___vfprintf_internal_r+0xb88>
   19aa8:	00800b44 	movi	r2,45
   19aac:	d8812585 	stb	r2,1174(sp)
   19ab0:	003be306 	br	18a40 <___vfprintf_internal_r+0x91c>
   19ab4:	4d000015 	stw	r20,0(r9)
   19ab8:	4c800115 	stw	r18,4(r9)
   19abc:	4491883a 	add	r8,r8,r18
   19ac0:	18c00044 	addi	r3,r3,1
   19ac4:	da011d15 	stw	r8,1140(sp)
   19ac8:	d8c11c15 	stw	r3,1136(sp)
   19acc:	008001c4 	movi	r2,7
   19ad0:	10ffe816 	blt	r2,r3,19a74 <___vfprintf_internal_r+0x1950>
   19ad4:	4a400204 	addi	r9,r9,8
   19ad8:	003fee06 	br	19a94 <___vfprintf_internal_r+0x1970>
   19adc:	df012b15 	stw	fp,1196(sp)
   19ae0:	00800184 	movi	r2,6
   19ae4:	1700072e 	bgeu	r2,fp,19b04 <___vfprintf_internal_r+0x19e0>
   19ae8:	d8812b15 	stw	r2,1196(sp)
   19aec:	d8812815 	stw	r2,1184(sp)
   19af0:	ddc12d15 	stw	r23,1204(sp)
   19af4:	04c000f4 	movhi	r19,3
   19af8:	9cc24e04 	addi	r19,r19,2360
   19afc:	d8013115 	stw	zero,1220(sp)
   19b00:	003a7a06 	br	184ec <___vfprintf_internal_r+0x3c8>
   19b04:	d8812b17 	ldw	r2,1196(sp)
   19b08:	d8812815 	stw	r2,1184(sp)
   19b0c:	103ff80e 	bge	r2,zero,19af0 <___vfprintf_internal_r+0x19cc>
   19b10:	d8012815 	stw	zero,1184(sp)
   19b14:	003ff606 	br	19af0 <___vfprintf_internal_r+0x19cc>
   19b18:	d9012d17 	ldw	r4,1204(sp)
   19b1c:	da012c17 	ldw	r8,1200(sp)
   19b20:	20800017 	ldw	r2,0(r4)
   19b24:	21000104 	addi	r4,r4,4
   19b28:	d9012d15 	stw	r4,1204(sp)
   19b2c:	12000015 	stw	r8,0(r2)
   19b30:	0039b206 	br	181fc <___vfprintf_internal_r+0xd8>
   19b34:	d9412917 	ldw	r5,1188(sp)
   19b38:	8809883a 	mov	r4,r17
   19b3c:	d9811b04 	addi	r6,sp,1132
   19b40:	00180f00 	call	180f0 <__sprint_r>
   19b44:	103b0a1e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19b48:	dc812417 	ldw	r18,1168(sp)
   19b4c:	da011d17 	ldw	r8,1140(sp)
   19b50:	da400404 	addi	r9,sp,16
   19b54:	003def06 	br	19314 <___vfprintf_internal_r+0x11f0>
   19b58:	d9412917 	ldw	r5,1188(sp)
   19b5c:	8809883a 	mov	r4,r17
   19b60:	d9811b04 	addi	r6,sp,1132
   19b64:	00180f00 	call	180f0 <__sprint_r>
   19b68:	103b011e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19b6c:	dc812417 	ldw	r18,1168(sp)
   19b70:	da400404 	addi	r9,sp,16
   19b74:	003eb906 	br	1965c <___vfprintf_internal_r+0x1538>
   19b78:	d9412917 	ldw	r5,1188(sp)
   19b7c:	8809883a 	mov	r4,r17
   19b80:	d9811b04 	addi	r6,sp,1132
   19b84:	00180f00 	call	180f0 <__sprint_r>
   19b88:	103af91e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19b8c:	dc812417 	ldw	r18,1168(sp)
   19b90:	da011d17 	ldw	r8,1140(sp)
   19b94:	d8c11c17 	ldw	r3,1136(sp)
   19b98:	da400404 	addi	r9,sp,16
   19b9c:	003ea306 	br	1962c <___vfprintf_internal_r+0x1508>
   19ba0:	00800244 	movi	r2,9
   19ba4:	15fda636 	bltu	r2,r23,19240 <___vfprintf_internal_r+0x111c>
   19ba8:	dd010e04 	addi	r20,sp,1080
   19bac:	003dc206 	br	192b8 <___vfprintf_internal_r+0x1194>
   19bb0:	df012815 	stw	fp,1184(sp)
   19bb4:	d8812583 	ldbu	r2,1174(sp)
   19bb8:	df012b15 	stw	fp,1196(sp)
   19bbc:	ddc12d15 	stw	r23,1204(sp)
   19bc0:	d8013115 	stw	zero,1220(sp)
   19bc4:	003a4206 	br	184d0 <___vfprintf_internal_r+0x3ac>
   19bc8:	d9412917 	ldw	r5,1188(sp)
   19bcc:	8809883a 	mov	r4,r17
   19bd0:	d9811b04 	addi	r6,sp,1132
   19bd4:	00180f00 	call	180f0 <__sprint_r>
   19bd8:	103ae51e 	bne	r2,zero,18770 <___vfprintf_internal_r+0x64c>
   19bdc:	dc812417 	ldw	r18,1168(sp)
   19be0:	da011d17 	ldw	r8,1140(sp)
   19be4:	d8c11c17 	ldw	r3,1136(sp)
   19be8:	da400404 	addi	r9,sp,16
   19bec:	003ec906 	br	19714 <___vfprintf_internal_r+0x15f0>
   19bf0:	04c000f4 	movhi	r19,3
   19bf4:	9cc24304 	addi	r19,r19,2316
   19bf8:	003f6f06 	br	199b8 <___vfprintf_internal_r+0x1894>
   19bfc:	d8812583 	ldbu	r2,1174(sp)
   19c00:	dc012a17 	ldw	r16,1192(sp)
   19c04:	d8013115 	stw	zero,1220(sp)
   19c08:	003a3106 	br	184d0 <___vfprintf_internal_r+0x3ac>
   19c0c:	d8812404 	addi	r2,sp,1168
   19c10:	d8800115 	stw	r2,4(sp)
   19c14:	d8812304 	addi	r2,sp,1164
   19c18:	d8800215 	stw	r2,8(sp)
   19c1c:	d8812204 	addi	r2,sp,1160
   19c20:	df000015 	stw	fp,0(sp)
   19c24:	d8800315 	stw	r2,12(sp)
   19c28:	8809883a 	mov	r4,r17
   19c2c:	b00b883a 	mov	r5,r22
   19c30:	a00d883a 	mov	r6,r20
   19c34:	01c000c4 	movi	r7,3
   19c38:	da413c15 	stw	r9,1264(sp)
   19c3c:	001a4140 	call	1a414 <_dtoa_r>
   19c40:	da413c17 	ldw	r9,1264(sp)
   19c44:	1027883a 	mov	r19,r2
   19c48:	1707883a 	add	r3,r2,fp
   19c4c:	e02f883a 	mov	r23,fp
   19c50:	99000007 	ldb	r4,0(r19)
   19c54:	00800c04 	movi	r2,48
   19c58:	20800326 	beq	r4,r2,19c68 <___vfprintf_internal_r+0x1b44>
   19c5c:	da812417 	ldw	r10,1168(sp)
   19c60:	1a87883a 	add	r3,r3,r10
   19c64:	003ef406 	br	19838 <___vfprintf_internal_r+0x1714>
   19c68:	b009883a 	mov	r4,r22
   19c6c:	a00b883a 	mov	r5,r20
   19c70:	000d883a 	mov	r6,zero
   19c74:	000f883a 	mov	r7,zero
   19c78:	d8c13b15 	stw	r3,1260(sp)
   19c7c:	da413c15 	stw	r9,1264(sp)
   19c80:	00206140 	call	20614 <__nedf2>
   19c84:	d8c13b17 	ldw	r3,1260(sp)
   19c88:	da413c17 	ldw	r9,1264(sp)
   19c8c:	103ff326 	beq	r2,zero,19c5c <___vfprintf_internal_r+0x1b38>
   19c90:	00800044 	movi	r2,1
   19c94:	15d5c83a 	sub	r10,r2,r23
   19c98:	da812415 	stw	r10,1168(sp)
   19c9c:	1a87883a 	add	r3,r3,r10
   19ca0:	003ee506 	br	19838 <___vfprintf_internal_r+0x1714>
   19ca4:	d8812417 	ldw	r2,1168(sp)
   19ca8:	d8812b15 	stw	r2,1196(sp)
   19cac:	1029883a 	mov	r20,r2
   19cb0:	00bfff44 	movi	r2,-3
   19cb4:	a0800116 	blt	r20,r2,19cbc <___vfprintf_internal_r+0x1b98>
   19cb8:	e5001d0e 	bge	fp,r20,19d30 <___vfprintf_internal_r+0x1c0c>
   19cbc:	94bfff84 	addi	r18,r18,-2
   19cc0:	a53fffc4 	addi	r20,r20,-1
   19cc4:	dd012415 	stw	r20,1168(sp)
   19cc8:	dc811fc5 	stb	r18,1151(sp)
   19ccc:	a0007816 	blt	r20,zero,19eb0 <___vfprintf_internal_r+0x1d8c>
   19cd0:	00800ac4 	movi	r2,43
   19cd4:	d8812005 	stb	r2,1152(sp)
   19cd8:	00800244 	movi	r2,9
   19cdc:	15002b16 	blt	r2,r20,19d8c <___vfprintf_internal_r+0x1c68>
   19ce0:	00800c04 	movi	r2,48
   19ce4:	a5000c04 	addi	r20,r20,48
   19ce8:	d8812045 	stb	r2,1153(sp)
   19cec:	dd012085 	stb	r20,1154(sp)
   19cf0:	d8c120c4 	addi	r3,sp,1155
   19cf4:	d8811fc4 	addi	r2,sp,1151
   19cf8:	da013217 	ldw	r8,1224(sp)
   19cfc:	1885c83a 	sub	r2,r3,r2
   19d00:	d8813515 	stw	r2,1236(sp)
   19d04:	4085883a 	add	r2,r8,r2
   19d08:	d8812b15 	stw	r2,1196(sp)
   19d0c:	00800044 	movi	r2,1
   19d10:	1200610e 	bge	r2,r8,19e98 <___vfprintf_internal_r+0x1d74>
   19d14:	d8812b17 	ldw	r2,1196(sp)
   19d18:	10800044 	addi	r2,r2,1
   19d1c:	d8812b15 	stw	r2,1196(sp)
   19d20:	d8812815 	stw	r2,1184(sp)
   19d24:	103ee90e 	bge	r2,zero,198cc <___vfprintf_internal_r+0x17a8>
   19d28:	d8012815 	stw	zero,1184(sp)
   19d2c:	003ee706 	br	198cc <___vfprintf_internal_r+0x17a8>
   19d30:	d8812b17 	ldw	r2,1196(sp)
   19d34:	da013217 	ldw	r8,1224(sp)
   19d38:	12003716 	blt	r2,r8,19e18 <___vfprintf_internal_r+0x1cf4>
   19d3c:	8400004c 	andi	r16,r16,1
   19d40:	80000326 	beq	r16,zero,19d50 <___vfprintf_internal_r+0x1c2c>
   19d44:	d8812b17 	ldw	r2,1196(sp)
   19d48:	10800044 	addi	r2,r2,1
   19d4c:	d8812b15 	stw	r2,1196(sp)
   19d50:	d8812815 	stw	r2,1184(sp)
   19d54:	10003716 	blt	r2,zero,19e34 <___vfprintf_internal_r+0x1d10>
   19d58:	048019c4 	movi	r18,103
   19d5c:	003edb06 	br	198cc <___vfprintf_internal_r+0x17a8>
   19d60:	d8012815 	stw	zero,1184(sp)
   19d64:	003b6906 	br	18b0c <___vfprintf_internal_r+0x9e8>
   19d68:	e03e901e 	bne	fp,zero,197ac <___vfprintf_internal_r+0x1688>
   19d6c:	07000044 	movi	fp,1
   19d70:	003e8e06 	br	197ac <___vfprintf_internal_r+0x1688>
   19d74:	07000184 	movi	fp,6
   19d78:	003e8c06 	br	197ac <___vfprintf_internal_r+0x1688>
   19d7c:	00c00b44 	movi	r3,45
   19d80:	a520003c 	xorhi	r20,r20,32768
   19d84:	d8c12f05 	stb	r3,1212(sp)
   19d88:	003e8c06 	br	197bc <___vfprintf_internal_r+0x1698>
   19d8c:	d8c11f84 	addi	r3,sp,1150
   19d90:	102f883a 	mov	r23,r2
   19d94:	4839883a 	mov	fp,r9
   19d98:	a009883a 	mov	r4,r20
   19d9c:	01400284 	movi	r5,10
   19da0:	182d883a 	mov	r22,r3
   19da4:	0020b1c0 	call	20b1c <__modsi3>
   19da8:	10800c04 	addi	r2,r2,48
   19dac:	a009883a 	mov	r4,r20
   19db0:	b0800005 	stb	r2,0(r22)
   19db4:	01400284 	movi	r5,10
   19db8:	0020acc0 	call	20acc <__divsi3>
   19dbc:	1029883a 	mov	r20,r2
   19dc0:	b0ffffc4 	addi	r3,r22,-1
   19dc4:	b8bff416 	blt	r23,r2,19d98 <___vfprintf_internal_r+0x1c74>
   19dc8:	11400c04 	addi	r5,r2,48
   19dcc:	b17fffc5 	stb	r5,-1(r22)
   19dd0:	d8811fc4 	addi	r2,sp,1151
   19dd4:	e013883a 	mov	r9,fp
   19dd8:	1880482e 	bgeu	r3,r2,19efc <___vfprintf_internal_r+0x1dd8>
   19ddc:	b007883a 	mov	r3,r22
   19de0:	d9012044 	addi	r4,sp,1153
   19de4:	00000206 	br	19df0 <___vfprintf_internal_r+0x1ccc>
   19de8:	19400003 	ldbu	r5,0(r3)
   19dec:	18c00044 	addi	r3,r3,1
   19df0:	21400005 	stb	r5,0(r4)
   19df4:	21000044 	addi	r4,r4,1
   19df8:	10fffb1e 	bne	r2,r3,19de8 <___vfprintf_internal_r+0x1cc4>
   19dfc:	d8c12004 	addi	r3,sp,1152
   19e00:	1d87c83a 	sub	r3,r3,r22
   19e04:	d9012044 	addi	r4,sp,1153
   19e08:	20c7883a 	add	r3,r4,r3
   19e0c:	003fba06 	br	19cf8 <___vfprintf_internal_r+0x1bd4>
   19e10:	d8c12217 	ldw	r3,1160(sp)
   19e14:	003e9906 	br	1987c <___vfprintf_internal_r+0x1758>
   19e18:	05000b0e 	bge	zero,r20,19e48 <___vfprintf_internal_r+0x1d24>
   19e1c:	05000044 	movi	r20,1
   19e20:	da013217 	ldw	r8,1224(sp)
   19e24:	a229883a 	add	r20,r20,r8
   19e28:	dd012b15 	stw	r20,1196(sp)
   19e2c:	dd012815 	stw	r20,1184(sp)
   19e30:	a03fc90e 	bge	r20,zero,19d58 <___vfprintf_internal_r+0x1c34>
   19e34:	d8012815 	stw	zero,1184(sp)
   19e38:	048019c4 	movi	r18,103
   19e3c:	003ea306 	br	198cc <___vfprintf_internal_r+0x17a8>
   19e40:	e5c00044 	addi	r23,fp,1
   19e44:	003e6606 	br	197e0 <___vfprintf_internal_r+0x16bc>
   19e48:	00800084 	movi	r2,2
   19e4c:	1529c83a 	sub	r20,r2,r20
   19e50:	003ff306 	br	19e20 <___vfprintf_internal_r+0x1cfc>
   19e54:	008011c4 	movi	r2,71
   19e58:	90be7226 	beq	r18,r2,19824 <___vfprintf_internal_r+0x1700>
   19e5c:	003e7306 	br	1982c <___vfprintf_internal_r+0x1708>
   19e60:	d8812d17 	ldw	r2,1204(sp)
   19e64:	ac800043 	ldbu	r18,1(r21)
   19e68:	202b883a 	mov	r21,r4
   19e6c:	17000017 	ldw	fp,0(r2)
   19e70:	10800104 	addi	r2,r2,4
   19e74:	d8812d15 	stw	r2,1204(sp)
   19e78:	e0001b16 	blt	fp,zero,19ee8 <___vfprintf_internal_r+0x1dc4>
   19e7c:	94803fcc 	andi	r18,r18,255
   19e80:	9480201c 	xori	r18,r18,128
   19e84:	94bfe004 	addi	r18,r18,-128
   19e88:	00390406 	br	1829c <___vfprintf_internal_r+0x178>
   19e8c:	00bfffc4 	movi	r2,-1
   19e90:	d8812c15 	stw	r2,1200(sp)
   19e94:	003a2506 	br	1872c <___vfprintf_internal_r+0x608>
   19e98:	80a0703a 	and	r16,r16,r2
   19e9c:	803f9d1e 	bne	r16,zero,19d14 <___vfprintf_internal_r+0x1bf0>
   19ea0:	d8812b17 	ldw	r2,1196(sp)
   19ea4:	d8812815 	stw	r2,1184(sp)
   19ea8:	103e880e 	bge	r2,zero,198cc <___vfprintf_internal_r+0x17a8>
   19eac:	003f9e06 	br	19d28 <___vfprintf_internal_r+0x1c04>
   19eb0:	00800b44 	movi	r2,45
   19eb4:	0529c83a 	sub	r20,zero,r20
   19eb8:	d8812005 	stb	r2,1152(sp)
   19ebc:	003f8606 	br	19cd8 <___vfprintf_internal_r+0x1bb4>
   19ec0:	1007883a 	mov	r3,r2
   19ec4:	003e6d06 	br	1987c <___vfprintf_internal_r+0x1758>
   19ec8:	e000021e 	bne	fp,zero,19ed4 <___vfprintf_internal_r+0x1db0>
   19ecc:	8400004c 	andi	r16,r16,1
   19ed0:	80000e26 	beq	r16,zero,19f0c <___vfprintf_internal_r+0x1de8>
   19ed4:	e7000084 	addi	fp,fp,2
   19ed8:	df012b15 	stw	fp,1196(sp)
   19edc:	df012815 	stw	fp,1184(sp)
   19ee0:	e03e7a0e 	bge	fp,zero,198cc <___vfprintf_internal_r+0x17a8>
   19ee4:	003f9006 	br	19d28 <___vfprintf_internal_r+0x1c04>
   19ee8:	94803fcc 	andi	r18,r18,255
   19eec:	9480201c 	xori	r18,r18,128
   19ef0:	073fffc4 	movi	fp,-1
   19ef4:	94bfe004 	addi	r18,r18,-128
   19ef8:	0038e806 	br	1829c <___vfprintf_internal_r+0x178>
   19efc:	d8c12044 	addi	r3,sp,1153
   19f00:	003f7d06 	br	19cf8 <___vfprintf_internal_r+0x1bd4>
   19f04:	dd012417 	ldw	r20,1168(sp)
   19f08:	003f6d06 	br	19cc0 <___vfprintf_internal_r+0x1b9c>
   19f0c:	00c00044 	movi	r3,1
   19f10:	d8c12815 	stw	r3,1184(sp)
   19f14:	d8c12b15 	stw	r3,1196(sp)
   19f18:	003e6c06 	br	198cc <___vfprintf_internal_r+0x17a8>

00019f1c <__vfprintf_internal>:
   19f1c:	008000f4 	movhi	r2,3
   19f20:	10933404 	addi	r2,r2,19664
   19f24:	2007883a 	mov	r3,r4
   19f28:	11000017 	ldw	r4,0(r2)
   19f2c:	2805883a 	mov	r2,r5
   19f30:	300f883a 	mov	r7,r6
   19f34:	180b883a 	mov	r5,r3
   19f38:	100d883a 	mov	r6,r2
   19f3c:	00181241 	jmpi	18124 <___vfprintf_internal_r>

00019f40 <__swbuf_r>:
   19f40:	defffc04 	addi	sp,sp,-16
   19f44:	dc800215 	stw	r18,8(sp)
   19f48:	dc400115 	stw	r17,4(sp)
   19f4c:	dc000015 	stw	r16,0(sp)
   19f50:	dfc00315 	stw	ra,12(sp)
   19f54:	2023883a 	mov	r17,r4
   19f58:	2825883a 	mov	r18,r5
   19f5c:	3021883a 	mov	r16,r6
   19f60:	20000226 	beq	r4,zero,19f6c <__swbuf_r+0x2c>
   19f64:	20800e17 	ldw	r2,56(r4)
   19f68:	10003b26 	beq	r2,zero,1a058 <__swbuf_r+0x118>
   19f6c:	8080030b 	ldhu	r2,12(r16)
   19f70:	80c00617 	ldw	r3,24(r16)
   19f74:	1080020c 	andi	r2,r2,8
   19f78:	10bfffcc 	andi	r2,r2,65535
   19f7c:	10a0001c 	xori	r2,r2,32768
   19f80:	80c00215 	stw	r3,8(r16)
   19f84:	10a00004 	addi	r2,r2,-32768
   19f88:	10002226 	beq	r2,zero,1a014 <__swbuf_r+0xd4>
   19f8c:	80800417 	ldw	r2,16(r16)
   19f90:	10002026 	beq	r2,zero,1a014 <__swbuf_r+0xd4>
   19f94:	80c00017 	ldw	r3,0(r16)
   19f98:	81000517 	ldw	r4,20(r16)
   19f9c:	94803fcc 	andi	r18,r18,255
   19fa0:	1885c83a 	sub	r2,r3,r2
   19fa4:	1100250e 	bge	r2,r4,1a03c <__swbuf_r+0xfc>
   19fa8:	10800044 	addi	r2,r2,1
   19fac:	81400217 	ldw	r5,8(r16)
   19fb0:	19000044 	addi	r4,r3,1
   19fb4:	297fffc4 	addi	r5,r5,-1
   19fb8:	81400215 	stw	r5,8(r16)
   19fbc:	1c800005 	stb	r18,0(r3)
   19fc0:	80c00517 	ldw	r3,20(r16)
   19fc4:	81000015 	stw	r4,0(r16)
   19fc8:	18800c26 	beq	r3,r2,19ffc <__swbuf_r+0xbc>
   19fcc:	8080030b 	ldhu	r2,12(r16)
   19fd0:	1080004c 	andi	r2,r2,1
   19fd4:	10000226 	beq	r2,zero,19fe0 <__swbuf_r+0xa0>
   19fd8:	00800284 	movi	r2,10
   19fdc:	90800726 	beq	r18,r2,19ffc <__swbuf_r+0xbc>
   19fe0:	9005883a 	mov	r2,r18
   19fe4:	dfc00317 	ldw	ra,12(sp)
   19fe8:	dc800217 	ldw	r18,8(sp)
   19fec:	dc400117 	ldw	r17,4(sp)
   19ff0:	dc000017 	ldw	r16,0(sp)
   19ff4:	dec00404 	addi	sp,sp,16
   19ff8:	f800283a 	ret
   19ffc:	8809883a 	mov	r4,r17
   1a000:	800b883a 	mov	r5,r16
   1a004:	001ba300 	call	1ba30 <_fflush_r>
   1a008:	103ff526 	beq	r2,zero,19fe0 <__swbuf_r+0xa0>
   1a00c:	04bfffc4 	movi	r18,-1
   1a010:	003ff306 	br	19fe0 <__swbuf_r+0xa0>
   1a014:	8809883a 	mov	r4,r17
   1a018:	800b883a 	mov	r5,r16
   1a01c:	001a0980 	call	1a098 <__swsetup_r>
   1a020:	10000f1e 	bne	r2,zero,1a060 <__swbuf_r+0x120>
   1a024:	80800417 	ldw	r2,16(r16)
   1a028:	80c00017 	ldw	r3,0(r16)
   1a02c:	81000517 	ldw	r4,20(r16)
   1a030:	94803fcc 	andi	r18,r18,255
   1a034:	1885c83a 	sub	r2,r3,r2
   1a038:	113fdb16 	blt	r2,r4,19fa8 <__swbuf_r+0x68>
   1a03c:	8809883a 	mov	r4,r17
   1a040:	800b883a 	mov	r5,r16
   1a044:	001ba300 	call	1ba30 <_fflush_r>
   1a048:	103ff01e 	bne	r2,zero,1a00c <__swbuf_r+0xcc>
   1a04c:	80c00017 	ldw	r3,0(r16)
   1a050:	00800044 	movi	r2,1
   1a054:	003fd506 	br	19fac <__swbuf_r+0x6c>
   1a058:	001bcd80 	call	1bcd8 <__sinit>
   1a05c:	003fc306 	br	19f6c <__swbuf_r+0x2c>
   1a060:	8080030b 	ldhu	r2,12(r16)
   1a064:	04bfffc4 	movi	r18,-1
   1a068:	10801014 	ori	r2,r2,64
   1a06c:	8080030d 	sth	r2,12(r16)
   1a070:	00800244 	movi	r2,9
   1a074:	88800015 	stw	r2,0(r17)
   1a078:	003fd906 	br	19fe0 <__swbuf_r+0xa0>

0001a07c <__swbuf>:
   1a07c:	00c000f4 	movhi	r3,3
   1a080:	18d33404 	addi	r3,r3,19664
   1a084:	2005883a 	mov	r2,r4
   1a088:	19000017 	ldw	r4,0(r3)
   1a08c:	280d883a 	mov	r6,r5
   1a090:	100b883a 	mov	r5,r2
   1a094:	0019f401 	jmpi	19f40 <__swbuf_r>

0001a098 <__swsetup_r>:
   1a098:	008000f4 	movhi	r2,3
   1a09c:	10933404 	addi	r2,r2,19664
   1a0a0:	10800017 	ldw	r2,0(r2)
   1a0a4:	defffd04 	addi	sp,sp,-12
   1a0a8:	dc400115 	stw	r17,4(sp)
   1a0ac:	dc000015 	stw	r16,0(sp)
   1a0b0:	dfc00215 	stw	ra,8(sp)
   1a0b4:	2023883a 	mov	r17,r4
   1a0b8:	2821883a 	mov	r16,r5
   1a0bc:	10000226 	beq	r2,zero,1a0c8 <__swsetup_r+0x30>
   1a0c0:	10c00e17 	ldw	r3,56(r2)
   1a0c4:	18003d26 	beq	r3,zero,1a1bc <__swsetup_r+0x124>
   1a0c8:	8080030b 	ldhu	r2,12(r16)
   1a0cc:	10c0020c 	andi	r3,r2,8
   1a0d0:	18ffffcc 	andi	r3,r3,65535
   1a0d4:	18e0001c 	xori	r3,r3,32768
   1a0d8:	18e00004 	addi	r3,r3,-32768
   1a0dc:	18001226 	beq	r3,zero,1a128 <__swsetup_r+0x90>
   1a0e0:	80c00417 	ldw	r3,16(r16)
   1a0e4:	18001f26 	beq	r3,zero,1a164 <__swsetup_r+0xcc>
   1a0e8:	1100004c 	andi	r4,r2,1
   1a0ec:	2000261e 	bne	r4,zero,1a188 <__swsetup_r+0xf0>
   1a0f0:	1080008c 	andi	r2,r2,2
   1a0f4:	10bfffcc 	andi	r2,r2,65535
   1a0f8:	10a0001c 	xori	r2,r2,32768
   1a0fc:	10a00004 	addi	r2,r2,-32768
   1a100:	1000311e 	bne	r2,zero,1a1c8 <__swsetup_r+0x130>
   1a104:	80800517 	ldw	r2,20(r16)
   1a108:	80800215 	stw	r2,8(r16)
   1a10c:	18002326 	beq	r3,zero,1a19c <__swsetup_r+0x104>
   1a110:	0005883a 	mov	r2,zero
   1a114:	dfc00217 	ldw	ra,8(sp)
   1a118:	dc400117 	ldw	r17,4(sp)
   1a11c:	dc000017 	ldw	r16,0(sp)
   1a120:	dec00304 	addi	sp,sp,12
   1a124:	f800283a 	ret
   1a128:	10c0040c 	andi	r3,r2,16
   1a12c:	18ffffcc 	andi	r3,r3,65535
   1a130:	18e0001c 	xori	r3,r3,32768
   1a134:	18e00004 	addi	r3,r3,-32768
   1a138:	18001e26 	beq	r3,zero,1a1b4 <__swsetup_r+0x11c>
   1a13c:	10c0010c 	andi	r3,r2,4
   1a140:	18ffffcc 	andi	r3,r3,65535
   1a144:	18e0001c 	xori	r3,r3,32768
   1a148:	18e00004 	addi	r3,r3,-32768
   1a14c:	1800211e 	bne	r3,zero,1a1d4 <__swsetup_r+0x13c>
   1a150:	80c00417 	ldw	r3,16(r16)
   1a154:	11400214 	ori	r5,r2,8
   1a158:	8140030d 	sth	r5,12(r16)
   1a15c:	2805883a 	mov	r2,r5
   1a160:	183fe11e 	bne	r3,zero,1a0e8 <__swsetup_r+0x50>
   1a164:	1140a00c 	andi	r5,r2,640
   1a168:	01008004 	movi	r4,512
   1a16c:	293fde26 	beq	r5,r4,1a0e8 <__swsetup_r+0x50>
   1a170:	8809883a 	mov	r4,r17
   1a174:	800b883a 	mov	r5,r16
   1a178:	001ca4c0 	call	1ca4c <__smakebuf_r>
   1a17c:	8080030b 	ldhu	r2,12(r16)
   1a180:	80c00417 	ldw	r3,16(r16)
   1a184:	003fd806 	br	1a0e8 <__swsetup_r+0x50>
   1a188:	80800517 	ldw	r2,20(r16)
   1a18c:	80000215 	stw	zero,8(r16)
   1a190:	0085c83a 	sub	r2,zero,r2
   1a194:	80800615 	stw	r2,24(r16)
   1a198:	183fdd1e 	bne	r3,zero,1a110 <__swsetup_r+0x78>
   1a19c:	8080030b 	ldhu	r2,12(r16)
   1a1a0:	1080200c 	andi	r2,r2,128
   1a1a4:	10bfffcc 	andi	r2,r2,65535
   1a1a8:	10a0001c 	xori	r2,r2,32768
   1a1ac:	10a00004 	addi	r2,r2,-32768
   1a1b0:	103fd826 	beq	r2,zero,1a114 <__swsetup_r+0x7c>
   1a1b4:	00bfffc4 	movi	r2,-1
   1a1b8:	003fd606 	br	1a114 <__swsetup_r+0x7c>
   1a1bc:	1009883a 	mov	r4,r2
   1a1c0:	001bcd80 	call	1bcd8 <__sinit>
   1a1c4:	003fc006 	br	1a0c8 <__swsetup_r+0x30>
   1a1c8:	0005883a 	mov	r2,zero
   1a1cc:	80800215 	stw	r2,8(r16)
   1a1d0:	003fce06 	br	1a10c <__swsetup_r+0x74>
   1a1d4:	81400c17 	ldw	r5,48(r16)
   1a1d8:	28000626 	beq	r5,zero,1a1f4 <__swsetup_r+0x15c>
   1a1dc:	80c01004 	addi	r3,r16,64
   1a1e0:	28c00326 	beq	r5,r3,1a1f0 <__swsetup_r+0x158>
   1a1e4:	8809883a 	mov	r4,r17
   1a1e8:	001c05c0 	call	1c05c <_free_r>
   1a1ec:	8080030b 	ldhu	r2,12(r16)
   1a1f0:	80000c15 	stw	zero,48(r16)
   1a1f4:	80c00417 	ldw	r3,16(r16)
   1a1f8:	013ff6c4 	movi	r4,-37
   1a1fc:	2084703a 	and	r2,r4,r2
   1a200:	80000115 	stw	zero,4(r16)
   1a204:	80c00015 	stw	r3,0(r16)
   1a208:	003fd206 	br	1a154 <__swsetup_r+0xbc>

0001a20c <quorem>:
   1a20c:	defff704 	addi	sp,sp,-36
   1a210:	dc400115 	stw	r17,4(sp)
   1a214:	20800417 	ldw	r2,16(r4)
   1a218:	2c400417 	ldw	r17,16(r5)
   1a21c:	dd800615 	stw	r22,24(sp)
   1a220:	dd400515 	stw	r21,20(sp)
   1a224:	dfc00815 	stw	ra,32(sp)
   1a228:	ddc00715 	stw	r23,28(sp)
   1a22c:	dd000415 	stw	r20,16(sp)
   1a230:	dcc00315 	stw	r19,12(sp)
   1a234:	dc800215 	stw	r18,8(sp)
   1a238:	dc000015 	stw	r16,0(sp)
   1a23c:	202b883a 	mov	r21,r4
   1a240:	282d883a 	mov	r22,r5
   1a244:	14407116 	blt	r2,r17,1a40c <quorem+0x200>
   1a248:	88800104 	addi	r2,r17,4
   1a24c:	1085883a 	add	r2,r2,r2
   1a250:	1085883a 	add	r2,r2,r2
   1a254:	28a7883a 	add	r19,r5,r2
   1a258:	2085883a 	add	r2,r4,r2
   1a25c:	15c00017 	ldw	r23,0(r2)
   1a260:	99400017 	ldw	r5,0(r19)
   1a264:	8c7fffc4 	addi	r17,r17,-1
   1a268:	b809883a 	mov	r4,r23
   1a26c:	29400044 	addi	r5,r5,1
   1a270:	0020b780 	call	20b78 <__udivsi3>
   1a274:	1025883a 	mov	r18,r2
   1a278:	b4000504 	addi	r16,r22,20
   1a27c:	ad000504 	addi	r20,r21,20
   1a280:	10002d26 	beq	r2,zero,1a338 <quorem+0x12c>
   1a284:	800d883a 	mov	r6,r16
   1a288:	a007883a 	mov	r3,r20
   1a28c:	000f883a 	mov	r7,zero
   1a290:	0005883a 	mov	r2,zero
   1a294:	32c00017 	ldw	r11,0(r6)
   1a298:	1a400017 	ldw	r9,0(r3)
   1a29c:	31800104 	addi	r6,r6,4
   1a2a0:	5abfffcc 	andi	r10,r11,65535
   1a2a4:	5495383a 	mul	r10,r10,r18
   1a2a8:	5816d43a 	srli	r11,r11,16
   1a2ac:	4a3fffcc 	andi	r8,r9,65535
   1a2b0:	3a95883a 	add	r10,r7,r10
   1a2b4:	500ed43a 	srli	r7,r10,16
   1a2b8:	5c97383a 	mul	r11,r11,r18
   1a2bc:	4085883a 	add	r2,r8,r2
   1a2c0:	52bfffcc 	andi	r10,r10,65535
   1a2c4:	1291c83a 	sub	r8,r2,r10
   1a2c8:	4804d43a 	srli	r2,r9,16
   1a2cc:	3acf883a 	add	r7,r7,r11
   1a2d0:	4015d43a 	srai	r10,r8,16
   1a2d4:	393fffcc 	andi	r4,r7,65535
   1a2d8:	1105c83a 	sub	r2,r2,r4
   1a2dc:	1285883a 	add	r2,r2,r10
   1a2e0:	1880008d 	sth	r2,2(r3)
   1a2e4:	1a00000d 	sth	r8,0(r3)
   1a2e8:	380ed43a 	srli	r7,r7,16
   1a2ec:	1005d43a 	srai	r2,r2,16
   1a2f0:	18c00104 	addi	r3,r3,4
   1a2f4:	99bfe72e 	bgeu	r19,r6,1a294 <quorem+0x88>
   1a2f8:	b8000f1e 	bne	r23,zero,1a338 <quorem+0x12c>
   1a2fc:	88800144 	addi	r2,r17,5
   1a300:	1085883a 	add	r2,r2,r2
   1a304:	1085883a 	add	r2,r2,r2
   1a308:	a887883a 	add	r3,r21,r2
   1a30c:	18bfff04 	addi	r2,r3,-4
   1a310:	a080082e 	bgeu	r20,r2,1a334 <quorem+0x128>
   1a314:	18ffff17 	ldw	r3,-4(r3)
   1a318:	18000326 	beq	r3,zero,1a328 <quorem+0x11c>
   1a31c:	00000506 	br	1a334 <quorem+0x128>
   1a320:	10c00017 	ldw	r3,0(r2)
   1a324:	1800031e 	bne	r3,zero,1a334 <quorem+0x128>
   1a328:	10bfff04 	addi	r2,r2,-4
   1a32c:	8c7fffc4 	addi	r17,r17,-1
   1a330:	a0bffb36 	bltu	r20,r2,1a320 <quorem+0x114>
   1a334:	ac400415 	stw	r17,16(r21)
   1a338:	a809883a 	mov	r4,r21
   1a33c:	b00b883a 	mov	r5,r22
   1a340:	001de3c0 	call	1de3c <__mcmp>
   1a344:	10002516 	blt	r2,zero,1a3dc <quorem+0x1d0>
   1a348:	94800044 	addi	r18,r18,1
   1a34c:	a007883a 	mov	r3,r20
   1a350:	000b883a 	mov	r5,zero
   1a354:	1a000017 	ldw	r8,0(r3)
   1a358:	81c00017 	ldw	r7,0(r16)
   1a35c:	84000104 	addi	r16,r16,4
   1a360:	41bfffcc 	andi	r6,r8,65535
   1a364:	38bfffcc 	andi	r2,r7,65535
   1a368:	314b883a 	add	r5,r6,r5
   1a36c:	288dc83a 	sub	r6,r5,r2
   1a370:	380ed43a 	srli	r7,r7,16
   1a374:	400ad43a 	srli	r5,r8,16
   1a378:	3005d43a 	srai	r2,r6,16
   1a37c:	1980000d 	sth	r6,0(r3)
   1a380:	29cbc83a 	sub	r5,r5,r7
   1a384:	288b883a 	add	r5,r5,r2
   1a388:	1940008d 	sth	r5,2(r3)
   1a38c:	280bd43a 	srai	r5,r5,16
   1a390:	18c00104 	addi	r3,r3,4
   1a394:	9c3fef2e 	bgeu	r19,r16,1a354 <quorem+0x148>
   1a398:	88800144 	addi	r2,r17,5
   1a39c:	1085883a 	add	r2,r2,r2
   1a3a0:	1085883a 	add	r2,r2,r2
   1a3a4:	a885883a 	add	r2,r21,r2
   1a3a8:	10c00017 	ldw	r3,0(r2)
   1a3ac:	18000b1e 	bne	r3,zero,1a3dc <quorem+0x1d0>
   1a3b0:	10ffff04 	addi	r3,r2,-4
   1a3b4:	a0c0082e 	bgeu	r20,r3,1a3d8 <quorem+0x1cc>
   1a3b8:	10bfff17 	ldw	r2,-4(r2)
   1a3bc:	10000326 	beq	r2,zero,1a3cc <quorem+0x1c0>
   1a3c0:	00000506 	br	1a3d8 <quorem+0x1cc>
   1a3c4:	18800017 	ldw	r2,0(r3)
   1a3c8:	1000031e 	bne	r2,zero,1a3d8 <quorem+0x1cc>
   1a3cc:	18ffff04 	addi	r3,r3,-4
   1a3d0:	8c7fffc4 	addi	r17,r17,-1
   1a3d4:	a0fffb36 	bltu	r20,r3,1a3c4 <quorem+0x1b8>
   1a3d8:	ac400415 	stw	r17,16(r21)
   1a3dc:	9005883a 	mov	r2,r18
   1a3e0:	dfc00817 	ldw	ra,32(sp)
   1a3e4:	ddc00717 	ldw	r23,28(sp)
   1a3e8:	dd800617 	ldw	r22,24(sp)
   1a3ec:	dd400517 	ldw	r21,20(sp)
   1a3f0:	dd000417 	ldw	r20,16(sp)
   1a3f4:	dcc00317 	ldw	r19,12(sp)
   1a3f8:	dc800217 	ldw	r18,8(sp)
   1a3fc:	dc400117 	ldw	r17,4(sp)
   1a400:	dc000017 	ldw	r16,0(sp)
   1a404:	dec00904 	addi	sp,sp,36
   1a408:	f800283a 	ret
   1a40c:	0005883a 	mov	r2,zero
   1a410:	003ff306 	br	1a3e0 <quorem+0x1d4>

0001a414 <_dtoa_r>:
   1a414:	20801017 	ldw	r2,64(r4)
   1a418:	deffdf04 	addi	sp,sp,-132
   1a41c:	dcc01a15 	stw	r19,104(sp)
   1a420:	dc801915 	stw	r18,100(sp)
   1a424:	dc401815 	stw	r17,96(sp)
   1a428:	dc001715 	stw	r16,92(sp)
   1a42c:	dfc02015 	stw	ra,128(sp)
   1a430:	df001f15 	stw	fp,124(sp)
   1a434:	ddc01e15 	stw	r23,120(sp)
   1a438:	dd801d15 	stw	r22,116(sp)
   1a43c:	dd401c15 	stw	r21,112(sp)
   1a440:	dd001b15 	stw	r20,108(sp)
   1a444:	d9400315 	stw	r5,12(sp)
   1a448:	d9c00415 	stw	r7,16(sp)
   1a44c:	2021883a 	mov	r16,r4
   1a450:	3025883a 	mov	r18,r6
   1a454:	dcc02317 	ldw	r19,140(sp)
   1a458:	3023883a 	mov	r17,r6
   1a45c:	10000826 	beq	r2,zero,1a480 <_dtoa_r+0x6c>
   1a460:	20c01117 	ldw	r3,68(r4)
   1a464:	01800044 	movi	r6,1
   1a468:	100b883a 	mov	r5,r2
   1a46c:	30cc983a 	sll	r6,r6,r3
   1a470:	10c00115 	stw	r3,4(r2)
   1a474:	11800215 	stw	r6,8(r2)
   1a478:	001d6400 	call	1d640 <_Bfree>
   1a47c:	80001015 	stw	zero,64(r16)
   1a480:	90002f16 	blt	r18,zero,1a540 <_dtoa_r+0x12c>
   1a484:	98000015 	stw	zero,0(r19)
   1a488:	90dffc2c 	andhi	r3,r18,32752
   1a48c:	009ffc34 	movhi	r2,32752
   1a490:	18801c26 	beq	r3,r2,1a504 <_dtoa_r+0xf0>
   1a494:	d9000317 	ldw	r4,12(sp)
   1a498:	880b883a 	mov	r5,r17
   1a49c:	000d883a 	mov	r6,zero
   1a4a0:	000f883a 	mov	r7,zero
   1a4a4:	00205b80 	call	205b8 <__eqdf2>
   1a4a8:	10002c1e 	bne	r2,zero,1a55c <_dtoa_r+0x148>
   1a4ac:	d9002217 	ldw	r4,136(sp)
   1a4b0:	d9c02417 	ldw	r7,144(sp)
   1a4b4:	00800044 	movi	r2,1
   1a4b8:	20800015 	stw	r2,0(r4)
   1a4bc:	38019426 	beq	r7,zero,1ab10 <_dtoa_r+0x6fc>
   1a4c0:	008000f4 	movhi	r2,3
   1a4c4:	10825044 	addi	r2,r2,2369
   1a4c8:	38800015 	stw	r2,0(r7)
   1a4cc:	15ffffc4 	addi	r23,r2,-1
   1a4d0:	b805883a 	mov	r2,r23
   1a4d4:	dfc02017 	ldw	ra,128(sp)
   1a4d8:	df001f17 	ldw	fp,124(sp)
   1a4dc:	ddc01e17 	ldw	r23,120(sp)
   1a4e0:	dd801d17 	ldw	r22,116(sp)
   1a4e4:	dd401c17 	ldw	r21,112(sp)
   1a4e8:	dd001b17 	ldw	r20,108(sp)
   1a4ec:	dcc01a17 	ldw	r19,104(sp)
   1a4f0:	dc801917 	ldw	r18,100(sp)
   1a4f4:	dc401817 	ldw	r17,96(sp)
   1a4f8:	dc001717 	ldw	r16,92(sp)
   1a4fc:	dec02104 	addi	sp,sp,132
   1a500:	f800283a 	ret
   1a504:	d8c02217 	ldw	r3,136(sp)
   1a508:	d9000317 	ldw	r4,12(sp)
   1a50c:	0089c3c4 	movi	r2,9999
   1a510:	18800015 	stw	r2,0(r3)
   1a514:	20016c26 	beq	r4,zero,1aac8 <_dtoa_r+0x6b4>
   1a518:	05c000f4 	movhi	r23,3
   1a51c:	bdc25c04 	addi	r23,r23,2416
   1a520:	d9c02417 	ldw	r7,144(sp)
   1a524:	383fea26 	beq	r7,zero,1a4d0 <_dtoa_r+0xbc>
   1a528:	b88000c7 	ldb	r2,3(r23)
   1a52c:	10016d1e 	bne	r2,zero,1aae4 <_dtoa_r+0x6d0>
   1a530:	b88000c4 	addi	r2,r23,3
   1a534:	d8c02417 	ldw	r3,144(sp)
   1a538:	18800015 	stw	r2,0(r3)
   1a53c:	003fe406 	br	1a4d0 <_dtoa_r+0xbc>
   1a540:	04600034 	movhi	r17,32768
   1a544:	8c7fffc4 	addi	r17,r17,-1
   1a548:	9462703a 	and	r17,r18,r17
   1a54c:	00800044 	movi	r2,1
   1a550:	98800015 	stw	r2,0(r19)
   1a554:	8825883a 	mov	r18,r17
   1a558:	003fcb06 	br	1a488 <_dtoa_r+0x74>
   1a55c:	d9400317 	ldw	r5,12(sp)
   1a560:	9028d53a 	srli	r20,r18,20
   1a564:	d8800204 	addi	r2,sp,8
   1a568:	d8800015 	stw	r2,0(sp)
   1a56c:	8009883a 	mov	r4,r16
   1a570:	880d883a 	mov	r6,r17
   1a574:	d9c00104 	addi	r7,sp,4
   1a578:	001e1e40 	call	1e1e4 <__d2b>
   1a57c:	a501ffcc 	andi	r20,r20,2047
   1a580:	1039883a 	mov	fp,r2
   1a584:	a001591e 	bne	r20,zero,1aaec <_dtoa_r+0x6d8>
   1a588:	dd400217 	ldw	r21,8(sp)
   1a58c:	dd000117 	ldw	r20,4(sp)
   1a590:	00befbc4 	movi	r2,-1041
   1a594:	ad29883a 	add	r20,r21,r20
   1a598:	a082d216 	blt	r20,r2,1b0e4 <_dtoa_r+0xcd0>
   1a59c:	d8c00317 	ldw	r3,12(sp)
   1a5a0:	013f0384 	movi	r4,-1010
   1a5a4:	2509c83a 	sub	r4,r4,r20
   1a5a8:	a0810484 	addi	r2,r20,1042
   1a5ac:	9124983a 	sll	r18,r18,r4
   1a5b0:	1884d83a 	srl	r2,r3,r2
   1a5b4:	9088b03a 	or	r4,r18,r2
   1a5b8:	002093c0 	call	2093c <__floatunsidf>
   1a5bc:	1009883a 	mov	r4,r2
   1a5c0:	017f8434 	movhi	r5,65040
   1a5c4:	00800044 	movi	r2,1
   1a5c8:	194b883a 	add	r5,r3,r5
   1a5cc:	a53fffc4 	addi	r20,r20,-1
   1a5d0:	d8800f15 	stw	r2,60(sp)
   1a5d4:	000d883a 	mov	r6,zero
   1a5d8:	01cffe34 	movhi	r7,16376
   1a5dc:	00200c00 	call	200c0 <__subdf3>
   1a5e0:	1009883a 	mov	r4,r2
   1a5e4:	180b883a 	mov	r5,r3
   1a5e8:	0198dbf4 	movhi	r6,25455
   1a5ec:	3190d844 	addi	r6,r6,17249
   1a5f0:	01cff4f4 	movhi	r7,16339
   1a5f4:	39e1e9c4 	addi	r7,r7,-30809
   1a5f8:	00201200 	call	20120 <__muldf3>
   1a5fc:	180b883a 	mov	r5,r3
   1a600:	01a2d874 	movhi	r6,35681
   1a604:	31b22cc4 	addi	r6,r6,-14157
   1a608:	01cff1f4 	movhi	r7,16327
   1a60c:	39e28a04 	addi	r7,r7,-30168
   1a610:	1009883a 	mov	r4,r2
   1a614:	002006c0 	call	2006c <__adddf3>
   1a618:	a009883a 	mov	r4,r20
   1a61c:	1027883a 	mov	r19,r2
   1a620:	1825883a 	mov	r18,r3
   1a624:	00207940 	call	20794 <__floatsidf>
   1a628:	1009883a 	mov	r4,r2
   1a62c:	180b883a 	mov	r5,r3
   1a630:	019427f4 	movhi	r6,20639
   1a634:	319e7ec4 	addi	r6,r6,31227
   1a638:	01cff4f4 	movhi	r7,16339
   1a63c:	39d104c4 	addi	r7,r7,17427
   1a640:	00201200 	call	20120 <__muldf3>
   1a644:	9809883a 	mov	r4,r19
   1a648:	900b883a 	mov	r5,r18
   1a64c:	100d883a 	mov	r6,r2
   1a650:	180f883a 	mov	r7,r3
   1a654:	002006c0 	call	2006c <__adddf3>
   1a658:	1009883a 	mov	r4,r2
   1a65c:	180b883a 	mov	r5,r3
   1a660:	1027883a 	mov	r19,r2
   1a664:	1825883a 	mov	r18,r3
   1a668:	00208680 	call	20868 <__fixdfsi>
   1a66c:	9809883a 	mov	r4,r19
   1a670:	900b883a 	mov	r5,r18
   1a674:	000d883a 	mov	r6,zero
   1a678:	000f883a 	mov	r7,zero
   1a67c:	d8800615 	stw	r2,24(sp)
   1a680:	00207380 	call	20738 <__ltdf2>
   1a684:	10027e16 	blt	r2,zero,1b080 <_dtoa_r+0xc6c>
   1a688:	d8c00617 	ldw	r3,24(sp)
   1a68c:	00800584 	movi	r2,22
   1a690:	10c26c36 	bltu	r2,r3,1b044 <_dtoa_r+0xc30>
   1a694:	180490fa 	slli	r2,r3,3
   1a698:	00c000f4 	movhi	r3,3
   1a69c:	18c28104 	addi	r3,r3,2564
   1a6a0:	d9800317 	ldw	r6,12(sp)
   1a6a4:	1885883a 	add	r2,r3,r2
   1a6a8:	11000017 	ldw	r4,0(r2)
   1a6ac:	11400117 	ldw	r5,4(r2)
   1a6b0:	880f883a 	mov	r7,r17
   1a6b4:	00206700 	call	20670 <__gtdf2>
   1a6b8:	00828f0e 	bge	zero,r2,1b0f8 <_dtoa_r+0xce4>
   1a6bc:	d8800617 	ldw	r2,24(sp)
   1a6c0:	d8000d15 	stw	zero,52(sp)
   1a6c4:	10bfffc4 	addi	r2,r2,-1
   1a6c8:	d8800615 	stw	r2,24(sp)
   1a6cc:	ad29c83a 	sub	r20,r21,r20
   1a6d0:	a53fffc4 	addi	r20,r20,-1
   1a6d4:	a0026616 	blt	r20,zero,1b070 <_dtoa_r+0xc5c>
   1a6d8:	dd000715 	stw	r20,28(sp)
   1a6dc:	d8000815 	stw	zero,32(sp)
   1a6e0:	d8800617 	ldw	r2,24(sp)
   1a6e4:	10025a16 	blt	r2,zero,1b050 <_dtoa_r+0xc3c>
   1a6e8:	d8c00717 	ldw	r3,28(sp)
   1a6ec:	d8800b15 	stw	r2,44(sp)
   1a6f0:	d8000a15 	stw	zero,40(sp)
   1a6f4:	1887883a 	add	r3,r3,r2
   1a6f8:	d8c00715 	stw	r3,28(sp)
   1a6fc:	d9c00417 	ldw	r7,16(sp)
   1a700:	00800244 	movi	r2,9
   1a704:	11c10536 	bltu	r2,r7,1ab1c <_dtoa_r+0x708>
   1a708:	00800144 	movi	r2,5
   1a70c:	11c4c60e 	bge	r2,r7,1ba28 <_dtoa_r+0x1614>
   1a710:	39ffff04 	addi	r7,r7,-4
   1a714:	d9c00415 	stw	r7,16(sp)
   1a718:	0027883a 	mov	r19,zero
   1a71c:	d9c00417 	ldw	r7,16(sp)
   1a720:	008000c4 	movi	r2,3
   1a724:	3883a226 	beq	r7,r2,1b5b0 <_dtoa_r+0x119c>
   1a728:	11c2bc16 	blt	r2,r7,1b21c <_dtoa_r+0xe08>
   1a72c:	00800084 	movi	r2,2
   1a730:	3880fb1e 	bne	r7,r2,1ab20 <_dtoa_r+0x70c>
   1a734:	d8000c15 	stw	zero,48(sp)
   1a738:	d9002117 	ldw	r4,132(sp)
   1a73c:	0103ae0e 	bge	zero,r4,1b5f8 <_dtoa_r+0x11e4>
   1a740:	2025883a 	mov	r18,r4
   1a744:	d9000e15 	stw	r4,56(sp)
   1a748:	d9000915 	stw	r4,36(sp)
   1a74c:	80001115 	stw	zero,68(r16)
   1a750:	008005c4 	movi	r2,23
   1a754:	1484b22e 	bgeu	r2,r18,1ba20 <_dtoa_r+0x160c>
   1a758:	00c00044 	movi	r3,1
   1a75c:	00800104 	movi	r2,4
   1a760:	1085883a 	add	r2,r2,r2
   1a764:	11000504 	addi	r4,r2,20
   1a768:	180b883a 	mov	r5,r3
   1a76c:	18c00044 	addi	r3,r3,1
   1a770:	913ffb2e 	bgeu	r18,r4,1a760 <_dtoa_r+0x34c>
   1a774:	81401115 	stw	r5,68(r16)
   1a778:	8009883a 	mov	r4,r16
   1a77c:	001d5980 	call	1d598 <_Balloc>
   1a780:	102f883a 	mov	r23,r2
   1a784:	80801015 	stw	r2,64(r16)
   1a788:	00800384 	movi	r2,14
   1a78c:	1480f036 	bltu	r2,r18,1ab50 <_dtoa_r+0x73c>
   1a790:	9800ef26 	beq	r19,zero,1ab50 <_dtoa_r+0x73c>
   1a794:	d8800617 	ldw	r2,24(sp)
   1a798:	00839c0e 	bge	zero,r2,1b60c <_dtoa_r+0x11f8>
   1a79c:	d8c00617 	ldw	r3,24(sp)
   1a7a0:	108003cc 	andi	r2,r2,15
   1a7a4:	100490fa 	slli	r2,r2,3
   1a7a8:	182bd13a 	srai	r21,r3,4
   1a7ac:	00c000f4 	movhi	r3,3
   1a7b0:	18c28104 	addi	r3,r3,2564
   1a7b4:	1885883a 	add	r2,r3,r2
   1a7b8:	a8c0040c 	andi	r3,r21,16
   1a7bc:	12800017 	ldw	r10,0(r2)
   1a7c0:	15800117 	ldw	r22,4(r2)
   1a7c4:	18038726 	beq	r3,zero,1b5e4 <_dtoa_r+0x11d0>
   1a7c8:	008000f4 	movhi	r2,3
   1a7cc:	10827704 	addi	r2,r2,2524
   1a7d0:	11800817 	ldw	r6,32(r2)
   1a7d4:	11c00917 	ldw	r7,36(r2)
   1a7d8:	d9000317 	ldw	r4,12(sp)
   1a7dc:	880b883a 	mov	r5,r17
   1a7e0:	da801515 	stw	r10,84(sp)
   1a7e4:	00204040 	call	20404 <__divdf3>
   1a7e8:	da801517 	ldw	r10,84(sp)
   1a7ec:	d8801015 	stw	r2,64(sp)
   1a7f0:	1829883a 	mov	r20,r3
   1a7f4:	ad4003cc 	andi	r21,r21,15
   1a7f8:	048000c4 	movi	r18,3
   1a7fc:	a8001126 	beq	r21,zero,1a844 <_dtoa_r+0x430>
   1a800:	04c000f4 	movhi	r19,3
   1a804:	9cc27704 	addi	r19,r19,2524
   1a808:	5005883a 	mov	r2,r10
   1a80c:	b007883a 	mov	r3,r22
   1a810:	a980004c 	andi	r6,r21,1
   1a814:	1009883a 	mov	r4,r2
   1a818:	a82bd07a 	srai	r21,r21,1
   1a81c:	180b883a 	mov	r5,r3
   1a820:	30000426 	beq	r6,zero,1a834 <_dtoa_r+0x420>
   1a824:	99800017 	ldw	r6,0(r19)
   1a828:	99c00117 	ldw	r7,4(r19)
   1a82c:	94800044 	addi	r18,r18,1
   1a830:	00201200 	call	20120 <__muldf3>
   1a834:	9cc00204 	addi	r19,r19,8
   1a838:	a83ff51e 	bne	r21,zero,1a810 <_dtoa_r+0x3fc>
   1a83c:	1015883a 	mov	r10,r2
   1a840:	182d883a 	mov	r22,r3
   1a844:	d9001017 	ldw	r4,64(sp)
   1a848:	a00b883a 	mov	r5,r20
   1a84c:	500d883a 	mov	r6,r10
   1a850:	b00f883a 	mov	r7,r22
   1a854:	00204040 	call	20404 <__divdf3>
   1a858:	1027883a 	mov	r19,r2
   1a85c:	1829883a 	mov	r20,r3
   1a860:	d8c00d17 	ldw	r3,52(sp)
   1a864:	18000626 	beq	r3,zero,1a880 <_dtoa_r+0x46c>
   1a868:	9809883a 	mov	r4,r19
   1a86c:	a00b883a 	mov	r5,r20
   1a870:	000d883a 	mov	r6,zero
   1a874:	01cffc34 	movhi	r7,16368
   1a878:	00207380 	call	20738 <__ltdf2>
   1a87c:	10040e16 	blt	r2,zero,1b8b8 <_dtoa_r+0x14a4>
   1a880:	9009883a 	mov	r4,r18
   1a884:	00207940 	call	20794 <__floatsidf>
   1a888:	1009883a 	mov	r4,r2
   1a88c:	180b883a 	mov	r5,r3
   1a890:	980d883a 	mov	r6,r19
   1a894:	a00f883a 	mov	r7,r20
   1a898:	00201200 	call	20120 <__muldf3>
   1a89c:	1009883a 	mov	r4,r2
   1a8a0:	180b883a 	mov	r5,r3
   1a8a4:	000d883a 	mov	r6,zero
   1a8a8:	01d00734 	movhi	r7,16412
   1a8ac:	002006c0 	call	2006c <__adddf3>
   1a8b0:	057f3034 	movhi	r21,64704
   1a8b4:	1d6b883a 	add	r21,r3,r21
   1a8b8:	d8c00917 	ldw	r3,36(sp)
   1a8bc:	1025883a 	mov	r18,r2
   1a8c0:	18031f26 	beq	r3,zero,1b540 <_dtoa_r+0x112c>
   1a8c4:	d8800617 	ldw	r2,24(sp)
   1a8c8:	dac00917 	ldw	r11,36(sp)
   1a8cc:	d8801315 	stw	r2,76(sp)
   1a8d0:	d8c00c17 	ldw	r3,48(sp)
   1a8d4:	18039026 	beq	r3,zero,1b718 <_dtoa_r+0x1304>
   1a8d8:	58bfffc4 	addi	r2,r11,-1
   1a8dc:	100490fa 	slli	r2,r2,3
   1a8e0:	00c000f4 	movhi	r3,3
   1a8e4:	18c28104 	addi	r3,r3,2564
   1a8e8:	0009883a 	mov	r4,zero
   1a8ec:	1885883a 	add	r2,r3,r2
   1a8f0:	11800017 	ldw	r6,0(r2)
   1a8f4:	11c00117 	ldw	r7,4(r2)
   1a8f8:	014ff834 	movhi	r5,16352
   1a8fc:	dac01615 	stw	r11,88(sp)
   1a900:	00204040 	call	20404 <__divdf3>
   1a904:	900d883a 	mov	r6,r18
   1a908:	a80f883a 	mov	r7,r21
   1a90c:	1009883a 	mov	r4,r2
   1a910:	180b883a 	mov	r5,r3
   1a914:	00200c00 	call	200c0 <__subdf3>
   1a918:	a00b883a 	mov	r5,r20
   1a91c:	9809883a 	mov	r4,r19
   1a920:	182b883a 	mov	r21,r3
   1a924:	d8801015 	stw	r2,64(sp)
   1a928:	00208680 	call	20868 <__fixdfsi>
   1a92c:	1009883a 	mov	r4,r2
   1a930:	d8801515 	stw	r2,84(sp)
   1a934:	00207940 	call	20794 <__floatsidf>
   1a938:	9809883a 	mov	r4,r19
   1a93c:	a00b883a 	mov	r5,r20
   1a940:	100d883a 	mov	r6,r2
   1a944:	180f883a 	mov	r7,r3
   1a948:	00200c00 	call	200c0 <__subdf3>
   1a94c:	da401517 	ldw	r9,84(sp)
   1a950:	d9001017 	ldw	r4,64(sp)
   1a954:	a80b883a 	mov	r5,r21
   1a958:	4d000c04 	addi	r20,r9,48
   1a95c:	bd000005 	stb	r20,0(r23)
   1a960:	100d883a 	mov	r6,r2
   1a964:	180f883a 	mov	r7,r3
   1a968:	bd800044 	addi	r22,r23,1
   1a96c:	1025883a 	mov	r18,r2
   1a970:	1827883a 	mov	r19,r3
   1a974:	00206700 	call	20670 <__gtdf2>
   1a978:	00842216 	blt	zero,r2,1ba04 <_dtoa_r+0x15f0>
   1a97c:	0009883a 	mov	r4,zero
   1a980:	014ffc34 	movhi	r5,16368
   1a984:	900d883a 	mov	r6,r18
   1a988:	980f883a 	mov	r7,r19
   1a98c:	00200c00 	call	200c0 <__subdf3>
   1a990:	d9001017 	ldw	r4,64(sp)
   1a994:	a80b883a 	mov	r5,r21
   1a998:	100d883a 	mov	r6,r2
   1a99c:	180f883a 	mov	r7,r3
   1a9a0:	00206700 	call	20670 <__gtdf2>
   1a9a4:	dac01617 	ldw	r11,88(sp)
   1a9a8:	00841316 	blt	zero,r2,1b9f8 <_dtoa_r+0x15e4>
   1a9ac:	00800044 	movi	r2,1
   1a9b0:	12c0670e 	bge	r2,r11,1ab50 <_dtoa_r+0x73c>
   1a9b4:	bad7883a 	add	r11,r23,r11
   1a9b8:	df001115 	stw	fp,68(sp)
   1a9bc:	dc401215 	stw	r17,72(sp)
   1a9c0:	5839883a 	mov	fp,r11
   1a9c4:	dc401017 	ldw	r17,64(sp)
   1a9c8:	00000806 	br	1a9ec <_dtoa_r+0x5d8>
   1a9cc:	00200c00 	call	200c0 <__subdf3>
   1a9d0:	1009883a 	mov	r4,r2
   1a9d4:	180b883a 	mov	r5,r3
   1a9d8:	880d883a 	mov	r6,r17
   1a9dc:	a80f883a 	mov	r7,r21
   1a9e0:	00207380 	call	20738 <__ltdf2>
   1a9e4:	1003ee16 	blt	r2,zero,1b9a0 <_dtoa_r+0x158c>
   1a9e8:	b703f126 	beq	r22,fp,1b9b0 <_dtoa_r+0x159c>
   1a9ec:	8809883a 	mov	r4,r17
   1a9f0:	a80b883a 	mov	r5,r21
   1a9f4:	000d883a 	mov	r6,zero
   1a9f8:	01d00934 	movhi	r7,16420
   1a9fc:	00201200 	call	20120 <__muldf3>
   1aa00:	000d883a 	mov	r6,zero
   1aa04:	01d00934 	movhi	r7,16420
   1aa08:	9009883a 	mov	r4,r18
   1aa0c:	980b883a 	mov	r5,r19
   1aa10:	1023883a 	mov	r17,r2
   1aa14:	182b883a 	mov	r21,r3
   1aa18:	00201200 	call	20120 <__muldf3>
   1aa1c:	180b883a 	mov	r5,r3
   1aa20:	1009883a 	mov	r4,r2
   1aa24:	1825883a 	mov	r18,r3
   1aa28:	1027883a 	mov	r19,r2
   1aa2c:	00208680 	call	20868 <__fixdfsi>
   1aa30:	1009883a 	mov	r4,r2
   1aa34:	1029883a 	mov	r20,r2
   1aa38:	00207940 	call	20794 <__floatsidf>
   1aa3c:	9809883a 	mov	r4,r19
   1aa40:	900b883a 	mov	r5,r18
   1aa44:	100d883a 	mov	r6,r2
   1aa48:	180f883a 	mov	r7,r3
   1aa4c:	00200c00 	call	200c0 <__subdf3>
   1aa50:	a5000c04 	addi	r20,r20,48
   1aa54:	b5000005 	stb	r20,0(r22)
   1aa58:	1009883a 	mov	r4,r2
   1aa5c:	180b883a 	mov	r5,r3
   1aa60:	880d883a 	mov	r6,r17
   1aa64:	a80f883a 	mov	r7,r21
   1aa68:	1025883a 	mov	r18,r2
   1aa6c:	1827883a 	mov	r19,r3
   1aa70:	00207380 	call	20738 <__ltdf2>
   1aa74:	b5800044 	addi	r22,r22,1
   1aa78:	0009883a 	mov	r4,zero
   1aa7c:	014ffc34 	movhi	r5,16368
   1aa80:	900d883a 	mov	r6,r18
   1aa84:	980f883a 	mov	r7,r19
   1aa88:	103fd00e 	bge	r2,zero,1a9cc <_dtoa_r+0x5b8>
   1aa8c:	d9001317 	ldw	r4,76(sp)
   1aa90:	df001117 	ldw	fp,68(sp)
   1aa94:	d9000615 	stw	r4,24(sp)
   1aa98:	8009883a 	mov	r4,r16
   1aa9c:	e00b883a 	mov	r5,fp
   1aaa0:	001d6400 	call	1d640 <_Bfree>
   1aaa4:	d9c00617 	ldw	r7,24(sp)
   1aaa8:	d8c02217 	ldw	r3,136(sp)
   1aaac:	d9002417 	ldw	r4,144(sp)
   1aab0:	b0000005 	stb	zero,0(r22)
   1aab4:	38800044 	addi	r2,r7,1
   1aab8:	18800015 	stw	r2,0(r3)
   1aabc:	203e8426 	beq	r4,zero,1a4d0 <_dtoa_r+0xbc>
   1aac0:	25800015 	stw	r22,0(r4)
   1aac4:	003e8206 	br	1a4d0 <_dtoa_r+0xbc>
   1aac8:	00800434 	movhi	r2,16
   1aacc:	10bfffc4 	addi	r2,r2,-1
   1aad0:	90a4703a 	and	r18,r18,r2
   1aad4:	903e901e 	bne	r18,zero,1a518 <_dtoa_r+0x104>
   1aad8:	05c000f4 	movhi	r23,3
   1aadc:	bdc25904 	addi	r23,r23,2404
   1aae0:	003e8f06 	br	1a520 <_dtoa_r+0x10c>
   1aae4:	b8800204 	addi	r2,r23,8
   1aae8:	003e9206 	br	1a534 <_dtoa_r+0x120>
   1aaec:	01400434 	movhi	r5,16
   1aaf0:	297fffc4 	addi	r5,r5,-1
   1aaf4:	894a703a 	and	r5,r17,r5
   1aaf8:	d9000317 	ldw	r4,12(sp)
   1aafc:	294ffc34 	orhi	r5,r5,16368
   1ab00:	a53f0044 	addi	r20,r20,-1023
   1ab04:	dd400217 	ldw	r21,8(sp)
   1ab08:	d8000f15 	stw	zero,60(sp)
   1ab0c:	003eb106 	br	1a5d4 <_dtoa_r+0x1c0>
   1ab10:	05c000f4 	movhi	r23,3
   1ab14:	bdc25004 	addi	r23,r23,2368
   1ab18:	003e6d06 	br	1a4d0 <_dtoa_r+0xbc>
   1ab1c:	d8000415 	stw	zero,16(sp)
   1ab20:	80001115 	stw	zero,68(r16)
   1ab24:	8009883a 	mov	r4,r16
   1ab28:	000b883a 	mov	r5,zero
   1ab2c:	001d5980 	call	1d598 <_Balloc>
   1ab30:	01ffffc4 	movi	r7,-1
   1ab34:	102f883a 	mov	r23,r2
   1ab38:	80801015 	stw	r2,64(r16)
   1ab3c:	00800044 	movi	r2,1
   1ab40:	d9c00915 	stw	r7,36(sp)
   1ab44:	d8002115 	stw	zero,132(sp)
   1ab48:	d9c00e15 	stw	r7,56(sp)
   1ab4c:	d8800c15 	stw	r2,48(sp)
   1ab50:	d8800117 	ldw	r2,4(sp)
   1ab54:	10008b16 	blt	r2,zero,1ad84 <_dtoa_r+0x970>
   1ab58:	d9000617 	ldw	r4,24(sp)
   1ab5c:	00c00384 	movi	r3,14
   1ab60:	19008816 	blt	r3,r4,1ad84 <_dtoa_r+0x970>
   1ab64:	200490fa 	slli	r2,r4,3
   1ab68:	d9c02117 	ldw	r7,132(sp)
   1ab6c:	00c000f4 	movhi	r3,3
   1ab70:	18c28104 	addi	r3,r3,2564
   1ab74:	1885883a 	add	r2,r3,r2
   1ab78:	14800017 	ldw	r18,0(r2)
   1ab7c:	14c00117 	ldw	r19,4(r2)
   1ab80:	3801c916 	blt	r7,zero,1b2a8 <_dtoa_r+0xe94>
   1ab84:	d9000317 	ldw	r4,12(sp)
   1ab88:	900d883a 	mov	r6,r18
   1ab8c:	980f883a 	mov	r7,r19
   1ab90:	880b883a 	mov	r5,r17
   1ab94:	00204040 	call	20404 <__divdf3>
   1ab98:	180b883a 	mov	r5,r3
   1ab9c:	1009883a 	mov	r4,r2
   1aba0:	00208680 	call	20868 <__fixdfsi>
   1aba4:	1009883a 	mov	r4,r2
   1aba8:	102b883a 	mov	r21,r2
   1abac:	00207940 	call	20794 <__floatsidf>
   1abb0:	1009883a 	mov	r4,r2
   1abb4:	180b883a 	mov	r5,r3
   1abb8:	900d883a 	mov	r6,r18
   1abbc:	980f883a 	mov	r7,r19
   1abc0:	00201200 	call	20120 <__muldf3>
   1abc4:	d9000317 	ldw	r4,12(sp)
   1abc8:	880b883a 	mov	r5,r17
   1abcc:	100d883a 	mov	r6,r2
   1abd0:	180f883a 	mov	r7,r3
   1abd4:	00200c00 	call	200c0 <__subdf3>
   1abd8:	d9c00917 	ldw	r7,36(sp)
   1abdc:	1009883a 	mov	r4,r2
   1abe0:	a8800c04 	addi	r2,r21,48
   1abe4:	b8800005 	stb	r2,0(r23)
   1abe8:	01800044 	movi	r6,1
   1abec:	180b883a 	mov	r5,r3
   1abf0:	2005883a 	mov	r2,r4
   1abf4:	bd800044 	addi	r22,r23,1
   1abf8:	39803726 	beq	r7,r6,1acd8 <_dtoa_r+0x8c4>
   1abfc:	000d883a 	mov	r6,zero
   1ac00:	01d00934 	movhi	r7,16420
   1ac04:	00201200 	call	20120 <__muldf3>
   1ac08:	1009883a 	mov	r4,r2
   1ac0c:	180b883a 	mov	r5,r3
   1ac10:	000d883a 	mov	r6,zero
   1ac14:	000f883a 	mov	r7,zero
   1ac18:	1029883a 	mov	r20,r2
   1ac1c:	1823883a 	mov	r17,r3
   1ac20:	00205b80 	call	205b8 <__eqdf2>
   1ac24:	103f9c26 	beq	r2,zero,1aa98 <_dtoa_r+0x684>
   1ac28:	dd400917 	ldw	r21,36(sp)
   1ac2c:	dc000415 	stw	r16,16(sp)
   1ac30:	00000906 	br	1ac58 <_dtoa_r+0x844>
   1ac34:	00201200 	call	20120 <__muldf3>
   1ac38:	1009883a 	mov	r4,r2
   1ac3c:	180b883a 	mov	r5,r3
   1ac40:	000d883a 	mov	r6,zero
   1ac44:	000f883a 	mov	r7,zero
   1ac48:	1029883a 	mov	r20,r2
   1ac4c:	1823883a 	mov	r17,r3
   1ac50:	00205b80 	call	205b8 <__eqdf2>
   1ac54:	10022926 	beq	r2,zero,1b4fc <_dtoa_r+0x10e8>
   1ac58:	900d883a 	mov	r6,r18
   1ac5c:	980f883a 	mov	r7,r19
   1ac60:	a009883a 	mov	r4,r20
   1ac64:	880b883a 	mov	r5,r17
   1ac68:	00204040 	call	20404 <__divdf3>
   1ac6c:	180b883a 	mov	r5,r3
   1ac70:	1009883a 	mov	r4,r2
   1ac74:	00208680 	call	20868 <__fixdfsi>
   1ac78:	1009883a 	mov	r4,r2
   1ac7c:	1021883a 	mov	r16,r2
   1ac80:	00207940 	call	20794 <__floatsidf>
   1ac84:	1009883a 	mov	r4,r2
   1ac88:	180b883a 	mov	r5,r3
   1ac8c:	900d883a 	mov	r6,r18
   1ac90:	980f883a 	mov	r7,r19
   1ac94:	00201200 	call	20120 <__muldf3>
   1ac98:	a009883a 	mov	r4,r20
   1ac9c:	880b883a 	mov	r5,r17
   1aca0:	100d883a 	mov	r6,r2
   1aca4:	180f883a 	mov	r7,r3
   1aca8:	00200c00 	call	200c0 <__subdf3>
   1acac:	82400c04 	addi	r9,r16,48
   1acb0:	b2400005 	stb	r9,0(r22)
   1acb4:	b5800044 	addi	r22,r22,1
   1acb8:	b5d3c83a 	sub	r9,r22,r23
   1acbc:	000d883a 	mov	r6,zero
   1acc0:	01d00934 	movhi	r7,16420
   1acc4:	1009883a 	mov	r4,r2
   1acc8:	180b883a 	mov	r5,r3
   1accc:	aa7fd91e 	bne	r21,r9,1ac34 <_dtoa_r+0x820>
   1acd0:	802b883a 	mov	r21,r16
   1acd4:	dc000417 	ldw	r16,16(sp)
   1acd8:	1009883a 	mov	r4,r2
   1acdc:	180b883a 	mov	r5,r3
   1ace0:	100d883a 	mov	r6,r2
   1ace4:	180f883a 	mov	r7,r3
   1ace8:	002006c0 	call	2006c <__adddf3>
   1acec:	9009883a 	mov	r4,r18
   1acf0:	980b883a 	mov	r5,r19
   1acf4:	100d883a 	mov	r6,r2
   1acf8:	180f883a 	mov	r7,r3
   1acfc:	1023883a 	mov	r17,r2
   1ad00:	1829883a 	mov	r20,r3
   1ad04:	00207380 	call	20738 <__ltdf2>
   1ad08:	10000816 	blt	r2,zero,1ad2c <_dtoa_r+0x918>
   1ad0c:	9009883a 	mov	r4,r18
   1ad10:	980b883a 	mov	r5,r19
   1ad14:	880d883a 	mov	r6,r17
   1ad18:	a00f883a 	mov	r7,r20
   1ad1c:	00205b80 	call	205b8 <__eqdf2>
   1ad20:	103f5d1e 	bne	r2,zero,1aa98 <_dtoa_r+0x684>
   1ad24:	ad40004c 	andi	r21,r21,1
   1ad28:	a83f5b26 	beq	r21,zero,1aa98 <_dtoa_r+0x684>
   1ad2c:	b53fffc3 	ldbu	r20,-1(r22)
   1ad30:	b0ffff84 	addi	r3,r22,-2
   1ad34:	01400e44 	movi	r5,57
   1ad38:	00000306 	br	1ad48 <_dtoa_r+0x934>
   1ad3c:	1d000003 	ldbu	r20,0(r3)
   1ad40:	102d883a 	mov	r22,r2
   1ad44:	18ffffc4 	addi	r3,r3,-1
   1ad48:	a1003fcc 	andi	r4,r20,255
   1ad4c:	2100201c 	xori	r4,r4,128
   1ad50:	213fe004 	addi	r4,r4,-128
   1ad54:	b0bfffc4 	addi	r2,r22,-1
   1ad58:	2142ca1e 	bne	r4,r5,1b884 <_dtoa_r+0x1470>
   1ad5c:	b8bff71e 	bne	r23,r2,1ad3c <_dtoa_r+0x928>
   1ad60:	d8800617 	ldw	r2,24(sp)
   1ad64:	05000c44 	movi	r20,49
   1ad68:	10800044 	addi	r2,r2,1
   1ad6c:	d8800615 	stw	r2,24(sp)
   1ad70:	00800c04 	movi	r2,48
   1ad74:	b8800005 	stb	r2,0(r23)
   1ad78:	b805883a 	mov	r2,r23
   1ad7c:	15000005 	stb	r20,0(r2)
   1ad80:	003f4506 	br	1aa98 <_dtoa_r+0x684>
   1ad84:	d9c00c17 	ldw	r7,48(sp)
   1ad88:	3800c926 	beq	r7,zero,1b0b0 <_dtoa_r+0xc9c>
   1ad8c:	d9c00417 	ldw	r7,16(sp)
   1ad90:	00c00044 	movi	r3,1
   1ad94:	19c16c0e 	bge	r3,r7,1b348 <_dtoa_r+0xf34>
   1ad98:	d9000917 	ldw	r4,36(sp)
   1ad9c:	d9c00a17 	ldw	r7,40(sp)
   1ada0:	24ffffc4 	addi	r19,r4,-1
   1ada4:	3cc20716 	blt	r7,r19,1b5c4 <_dtoa_r+0x11b0>
   1ada8:	3ce7c83a 	sub	r19,r7,r19
   1adac:	d9c00917 	ldw	r7,36(sp)
   1adb0:	3802ae16 	blt	r7,zero,1b86c <_dtoa_r+0x1458>
   1adb4:	dc800817 	ldw	r18,32(sp)
   1adb8:	d8800917 	ldw	r2,36(sp)
   1adbc:	d8c00817 	ldw	r3,32(sp)
   1adc0:	d9c00717 	ldw	r7,28(sp)
   1adc4:	8009883a 	mov	r4,r16
   1adc8:	1887883a 	add	r3,r3,r2
   1adcc:	388f883a 	add	r7,r7,r2
   1add0:	01400044 	movi	r5,1
   1add4:	d8c00815 	stw	r3,32(sp)
   1add8:	d9c00715 	stw	r7,28(sp)
   1addc:	001d9980 	call	1d998 <__i2b>
   1ade0:	102b883a 	mov	r21,r2
   1ade4:	90000a26 	beq	r18,zero,1ae10 <_dtoa_r+0x9fc>
   1ade8:	d8800717 	ldw	r2,28(sp)
   1adec:	0080080e 	bge	zero,r2,1ae10 <_dtoa_r+0x9fc>
   1adf0:	90812b16 	blt	r18,r2,1b2a0 <_dtoa_r+0xe8c>
   1adf4:	d8c00817 	ldw	r3,32(sp)
   1adf8:	d9000717 	ldw	r4,28(sp)
   1adfc:	90a5c83a 	sub	r18,r18,r2
   1ae00:	1887c83a 	sub	r3,r3,r2
   1ae04:	2089c83a 	sub	r4,r4,r2
   1ae08:	d8c00815 	stw	r3,32(sp)
   1ae0c:	d9000715 	stw	r4,28(sp)
   1ae10:	d9c00a17 	ldw	r7,40(sp)
   1ae14:	01c0140e 	bge	zero,r7,1ae68 <_dtoa_r+0xa54>
   1ae18:	d8800c17 	ldw	r2,48(sp)
   1ae1c:	1001de26 	beq	r2,zero,1b598 <_dtoa_r+0x1184>
   1ae20:	04c00e0e 	bge	zero,r19,1ae5c <_dtoa_r+0xa48>
   1ae24:	a80b883a 	mov	r5,r21
   1ae28:	8009883a 	mov	r4,r16
   1ae2c:	980d883a 	mov	r6,r19
   1ae30:	001dbb40 	call	1dbb4 <__pow5mult>
   1ae34:	e00d883a 	mov	r6,fp
   1ae38:	8009883a 	mov	r4,r16
   1ae3c:	100b883a 	mov	r5,r2
   1ae40:	102b883a 	mov	r21,r2
   1ae44:	001d9d40 	call	1d9d4 <__multiply>
   1ae48:	1029883a 	mov	r20,r2
   1ae4c:	e00b883a 	mov	r5,fp
   1ae50:	8009883a 	mov	r4,r16
   1ae54:	001d6400 	call	1d640 <_Bfree>
   1ae58:	a039883a 	mov	fp,r20
   1ae5c:	d8c00a17 	ldw	r3,40(sp)
   1ae60:	1ccdc83a 	sub	r6,r3,r19
   1ae64:	3001291e 	bne	r6,zero,1b30c <_dtoa_r+0xef8>
   1ae68:	8009883a 	mov	r4,r16
   1ae6c:	01400044 	movi	r5,1
   1ae70:	001d9980 	call	1d998 <__i2b>
   1ae74:	d9000b17 	ldw	r4,44(sp)
   1ae78:	1029883a 	mov	r20,r2
   1ae7c:	0100050e 	bge	zero,r4,1ae94 <_dtoa_r+0xa80>
   1ae80:	d9800b17 	ldw	r6,44(sp)
   1ae84:	8009883a 	mov	r4,r16
   1ae88:	100b883a 	mov	r5,r2
   1ae8c:	001dbb40 	call	1dbb4 <__pow5mult>
   1ae90:	1029883a 	mov	r20,r2
   1ae94:	d9c00417 	ldw	r7,16(sp)
   1ae98:	00800044 	movi	r2,1
   1ae9c:	11c0f00e 	bge	r2,r7,1b260 <_dtoa_r+0xe4c>
   1aea0:	0023883a 	mov	r17,zero
   1aea4:	d8800b17 	ldw	r2,44(sp)
   1aea8:	1001741e 	bne	r2,zero,1b47c <_dtoa_r+0x1068>
   1aeac:	00800044 	movi	r2,1
   1aeb0:	d8c00717 	ldw	r3,28(sp)
   1aeb4:	10c5883a 	add	r2,r2,r3
   1aeb8:	108007cc 	andi	r2,r2,31
   1aebc:	10008026 	beq	r2,zero,1b0c0 <_dtoa_r+0xcac>
   1aec0:	01000804 	movi	r4,32
   1aec4:	2089c83a 	sub	r4,r4,r2
   1aec8:	00c00104 	movi	r3,4
   1aecc:	1902d00e 	bge	r3,r4,1ba10 <_dtoa_r+0x15fc>
   1aed0:	d9000817 	ldw	r4,32(sp)
   1aed4:	d9c00717 	ldw	r7,28(sp)
   1aed8:	00c00704 	movi	r3,28
   1aedc:	1885c83a 	sub	r2,r3,r2
   1aee0:	2089883a 	add	r4,r4,r2
   1aee4:	388f883a 	add	r7,r7,r2
   1aee8:	d9000815 	stw	r4,32(sp)
   1aeec:	90a5883a 	add	r18,r18,r2
   1aef0:	d9c00715 	stw	r7,28(sp)
   1aef4:	d9c00817 	ldw	r7,32(sp)
   1aef8:	01c0050e 	bge	zero,r7,1af10 <_dtoa_r+0xafc>
   1aefc:	e00b883a 	mov	r5,fp
   1af00:	8009883a 	mov	r4,r16
   1af04:	380d883a 	mov	r6,r7
   1af08:	001dce00 	call	1dce0 <__lshift>
   1af0c:	1039883a 	mov	fp,r2
   1af10:	d8800717 	ldw	r2,28(sp)
   1af14:	0080050e 	bge	zero,r2,1af2c <_dtoa_r+0xb18>
   1af18:	a00b883a 	mov	r5,r20
   1af1c:	8009883a 	mov	r4,r16
   1af20:	100d883a 	mov	r6,r2
   1af24:	001dce00 	call	1dce0 <__lshift>
   1af28:	1029883a 	mov	r20,r2
   1af2c:	d8c00d17 	ldw	r3,52(sp)
   1af30:	1801401e 	bne	r3,zero,1b434 <_dtoa_r+0x1020>
   1af34:	d8800917 	ldw	r2,36(sp)
   1af38:	00815a0e 	bge	zero,r2,1b4a4 <_dtoa_r+0x1090>
   1af3c:	d8c00c17 	ldw	r3,48(sp)
   1af40:	18006f1e 	bne	r3,zero,1b100 <_dtoa_r+0xcec>
   1af44:	b823883a 	mov	r17,r23
   1af48:	dc800917 	ldw	r18,36(sp)
   1af4c:	00000206 	br	1af58 <_dtoa_r+0xb44>
   1af50:	001d6680 	call	1d668 <__multadd>
   1af54:	1039883a 	mov	fp,r2
   1af58:	e009883a 	mov	r4,fp
   1af5c:	a00b883a 	mov	r5,r20
   1af60:	001a20c0 	call	1a20c <quorem>
   1af64:	10800c04 	addi	r2,r2,48
   1af68:	88800005 	stb	r2,0(r17)
   1af6c:	8c400044 	addi	r17,r17,1
   1af70:	8dc7c83a 	sub	r3,r17,r23
   1af74:	8009883a 	mov	r4,r16
   1af78:	e00b883a 	mov	r5,fp
   1af7c:	01800284 	movi	r6,10
   1af80:	000f883a 	mov	r7,zero
   1af84:	1cbff216 	blt	r3,r18,1af50 <_dtoa_r+0xb3c>
   1af88:	dd800917 	ldw	r22,36(sp)
   1af8c:	1007883a 	mov	r3,r2
   1af90:	05823a0e 	bge	zero,r22,1b87c <_dtoa_r+0x1468>
   1af94:	bdad883a 	add	r22,r23,r22
   1af98:	0023883a 	mov	r17,zero
   1af9c:	e00b883a 	mov	r5,fp
   1afa0:	01800044 	movi	r6,1
   1afa4:	8009883a 	mov	r4,r16
   1afa8:	d8c01515 	stw	r3,84(sp)
   1afac:	001dce00 	call	1dce0 <__lshift>
   1afb0:	1009883a 	mov	r4,r2
   1afb4:	a00b883a 	mov	r5,r20
   1afb8:	1039883a 	mov	fp,r2
   1afbc:	001de3c0 	call	1de3c <__mcmp>
   1afc0:	d8c01517 	ldw	r3,84(sp)
   1afc4:	0080d60e 	bge	zero,r2,1b320 <_dtoa_r+0xf0c>
   1afc8:	b13fffc3 	ldbu	r4,-1(r22)
   1afcc:	b0ffff84 	addi	r3,r22,-2
   1afd0:	01800e44 	movi	r6,57
   1afd4:	00000306 	br	1afe4 <_dtoa_r+0xbd0>
   1afd8:	19000003 	ldbu	r4,0(r3)
   1afdc:	102d883a 	mov	r22,r2
   1afe0:	18ffffc4 	addi	r3,r3,-1
   1afe4:	21403fcc 	andi	r5,r4,255
   1afe8:	2940201c 	xori	r5,r5,128
   1afec:	297fe004 	addi	r5,r5,-128
   1aff0:	b0bfffc4 	addi	r2,r22,-1
   1aff4:	2981a71e 	bne	r5,r6,1b694 <_dtoa_r+0x1280>
   1aff8:	b8bff71e 	bne	r23,r2,1afd8 <_dtoa_r+0xbc4>
   1affc:	d8800617 	ldw	r2,24(sp)
   1b000:	10800044 	addi	r2,r2,1
   1b004:	d8800615 	stw	r2,24(sp)
   1b008:	00800c44 	movi	r2,49
   1b00c:	b8800005 	stb	r2,0(r23)
   1b010:	8009883a 	mov	r4,r16
   1b014:	a00b883a 	mov	r5,r20
   1b018:	001d6400 	call	1d640 <_Bfree>
   1b01c:	a83e9e26 	beq	r21,zero,1aa98 <_dtoa_r+0x684>
   1b020:	88000426 	beq	r17,zero,1b034 <_dtoa_r+0xc20>
   1b024:	8d400326 	beq	r17,r21,1b034 <_dtoa_r+0xc20>
   1b028:	8009883a 	mov	r4,r16
   1b02c:	880b883a 	mov	r5,r17
   1b030:	001d6400 	call	1d640 <_Bfree>
   1b034:	8009883a 	mov	r4,r16
   1b038:	a80b883a 	mov	r5,r21
   1b03c:	001d6400 	call	1d640 <_Bfree>
   1b040:	003e9506 	br	1aa98 <_dtoa_r+0x684>
   1b044:	00c00044 	movi	r3,1
   1b048:	d8c00d15 	stw	r3,52(sp)
   1b04c:	003d9f06 	br	1a6cc <_dtoa_r+0x2b8>
   1b050:	d9000817 	ldw	r4,32(sp)
   1b054:	d8800617 	ldw	r2,24(sp)
   1b058:	d8000b15 	stw	zero,44(sp)
   1b05c:	2089c83a 	sub	r4,r4,r2
   1b060:	0087c83a 	sub	r3,zero,r2
   1b064:	d9000815 	stw	r4,32(sp)
   1b068:	d8c00a15 	stw	r3,40(sp)
   1b06c:	003da306 	br	1a6fc <_dtoa_r+0x2e8>
   1b070:	0529c83a 	sub	r20,zero,r20
   1b074:	dd000815 	stw	r20,32(sp)
   1b078:	d8000715 	stw	zero,28(sp)
   1b07c:	003d9806 	br	1a6e0 <_dtoa_r+0x2cc>
   1b080:	d9000617 	ldw	r4,24(sp)
   1b084:	00207940 	call	20794 <__floatsidf>
   1b088:	1009883a 	mov	r4,r2
   1b08c:	180b883a 	mov	r5,r3
   1b090:	980d883a 	mov	r6,r19
   1b094:	900f883a 	mov	r7,r18
   1b098:	00206140 	call	20614 <__nedf2>
   1b09c:	103d7a26 	beq	r2,zero,1a688 <_dtoa_r+0x274>
   1b0a0:	d8800617 	ldw	r2,24(sp)
   1b0a4:	10bfffc4 	addi	r2,r2,-1
   1b0a8:	d8800615 	stw	r2,24(sp)
   1b0ac:	003d7606 	br	1a688 <_dtoa_r+0x274>
   1b0b0:	dcc00a17 	ldw	r19,40(sp)
   1b0b4:	dc800817 	ldw	r18,32(sp)
   1b0b8:	002b883a 	mov	r21,zero
   1b0bc:	003f4906 	br	1ade4 <_dtoa_r+0x9d0>
   1b0c0:	00800704 	movi	r2,28
   1b0c4:	d8c00817 	ldw	r3,32(sp)
   1b0c8:	d9000717 	ldw	r4,28(sp)
   1b0cc:	90a5883a 	add	r18,r18,r2
   1b0d0:	1887883a 	add	r3,r3,r2
   1b0d4:	2089883a 	add	r4,r4,r2
   1b0d8:	d8c00815 	stw	r3,32(sp)
   1b0dc:	d9000715 	stw	r4,28(sp)
   1b0e0:	003f8406 	br	1aef4 <_dtoa_r+0xae0>
   1b0e4:	d9c00317 	ldw	r7,12(sp)
   1b0e8:	013efb84 	movi	r4,-1042
   1b0ec:	2509c83a 	sub	r4,r4,r20
   1b0f0:	3908983a 	sll	r4,r7,r4
   1b0f4:	003d3006 	br	1a5b8 <_dtoa_r+0x1a4>
   1b0f8:	d8000d15 	stw	zero,52(sp)
   1b0fc:	003d7306 	br	1a6cc <_dtoa_r+0x2b8>
   1b100:	0480050e 	bge	zero,r18,1b118 <_dtoa_r+0xd04>
   1b104:	a80b883a 	mov	r5,r21
   1b108:	8009883a 	mov	r4,r16
   1b10c:	900d883a 	mov	r6,r18
   1b110:	001dce00 	call	1dce0 <__lshift>
   1b114:	102b883a 	mov	r21,r2
   1b118:	8801611e 	bne	r17,zero,1b6a0 <_dtoa_r+0x128c>
   1b11c:	a827883a 	mov	r19,r21
   1b120:	d8c00317 	ldw	r3,12(sp)
   1b124:	d9000917 	ldw	r4,36(sp)
   1b128:	b8bfffc4 	addi	r2,r23,-1
   1b12c:	18c0004c 	andi	r3,r3,1
   1b130:	1105883a 	add	r2,r2,r4
   1b134:	b825883a 	mov	r18,r23
   1b138:	d8800515 	stw	r2,20(sp)
   1b13c:	a823883a 	mov	r17,r21
   1b140:	d8c00315 	stw	r3,12(sp)
   1b144:	ddc00715 	stw	r23,28(sp)
   1b148:	e009883a 	mov	r4,fp
   1b14c:	a00b883a 	mov	r5,r20
   1b150:	001a20c0 	call	1a20c <quorem>
   1b154:	e009883a 	mov	r4,fp
   1b158:	880b883a 	mov	r5,r17
   1b15c:	102d883a 	mov	r22,r2
   1b160:	001de3c0 	call	1de3c <__mcmp>
   1b164:	980d883a 	mov	r6,r19
   1b168:	8009883a 	mov	r4,r16
   1b16c:	a00b883a 	mov	r5,r20
   1b170:	102b883a 	mov	r21,r2
   1b174:	001de940 	call	1de94 <__mdiff>
   1b178:	100d883a 	mov	r6,r2
   1b17c:	10800317 	ldw	r2,12(r2)
   1b180:	b5c00c04 	addi	r23,r22,48
   1b184:	10008c26 	beq	r2,zero,1b3b8 <_dtoa_r+0xfa4>
   1b188:	8009883a 	mov	r4,r16
   1b18c:	300b883a 	mov	r5,r6
   1b190:	001d6400 	call	1d640 <_Bfree>
   1b194:	00800044 	movi	r2,1
   1b198:	a8007116 	blt	r21,zero,1b360 <_dtoa_r+0xf4c>
   1b19c:	a800041e 	bne	r21,zero,1b1b0 <_dtoa_r+0xd9c>
   1b1a0:	d9c00417 	ldw	r7,16(sp)
   1b1a4:	3800021e 	bne	r7,zero,1b1b0 <_dtoa_r+0xd9c>
   1b1a8:	d8c00317 	ldw	r3,12(sp)
   1b1ac:	18006c26 	beq	r3,zero,1b360 <_dtoa_r+0xf4c>
   1b1b0:	00814c16 	blt	zero,r2,1b6e4 <_dtoa_r+0x12d0>
   1b1b4:	d8c00517 	ldw	r3,20(sp)
   1b1b8:	95400044 	addi	r21,r18,1
   1b1bc:	95c00005 	stb	r23,0(r18)
   1b1c0:	a82d883a 	mov	r22,r21
   1b1c4:	90c14d26 	beq	r18,r3,1b6fc <_dtoa_r+0x12e8>
   1b1c8:	e00b883a 	mov	r5,fp
   1b1cc:	8009883a 	mov	r4,r16
   1b1d0:	01800284 	movi	r6,10
   1b1d4:	000f883a 	mov	r7,zero
   1b1d8:	001d6680 	call	1d668 <__multadd>
   1b1dc:	1039883a 	mov	fp,r2
   1b1e0:	8cc08b26 	beq	r17,r19,1b410 <_dtoa_r+0xffc>
   1b1e4:	880b883a 	mov	r5,r17
   1b1e8:	01800284 	movi	r6,10
   1b1ec:	000f883a 	mov	r7,zero
   1b1f0:	8009883a 	mov	r4,r16
   1b1f4:	001d6680 	call	1d668 <__multadd>
   1b1f8:	980b883a 	mov	r5,r19
   1b1fc:	8009883a 	mov	r4,r16
   1b200:	01800284 	movi	r6,10
   1b204:	000f883a 	mov	r7,zero
   1b208:	1023883a 	mov	r17,r2
   1b20c:	001d6680 	call	1d668 <__multadd>
   1b210:	1027883a 	mov	r19,r2
   1b214:	a825883a 	mov	r18,r21
   1b218:	003fcb06 	br	1b148 <_dtoa_r+0xd34>
   1b21c:	d9c00417 	ldw	r7,16(sp)
   1b220:	00800104 	movi	r2,4
   1b224:	3880e426 	beq	r7,r2,1b5b8 <_dtoa_r+0x11a4>
   1b228:	00800144 	movi	r2,5
   1b22c:	38be3c1e 	bne	r7,r2,1ab20 <_dtoa_r+0x70c>
   1b230:	00c00044 	movi	r3,1
   1b234:	d8c00c15 	stw	r3,48(sp)
   1b238:	d9c02117 	ldw	r7,132(sp)
   1b23c:	d8800617 	ldw	r2,24(sp)
   1b240:	388f883a 	add	r7,r7,r2
   1b244:	3c800044 	addi	r18,r7,1
   1b248:	d9c00e15 	stw	r7,56(sp)
   1b24c:	dc800915 	stw	r18,36(sp)
   1b250:	04bd3e16 	blt	zero,r18,1a74c <_dtoa_r+0x338>
   1b254:	80001115 	stw	zero,68(r16)
   1b258:	000b883a 	mov	r5,zero
   1b25c:	003d4606 	br	1a778 <_dtoa_r+0x364>
   1b260:	d8c00317 	ldw	r3,12(sp)
   1b264:	183f0e1e 	bne	r3,zero,1aea0 <_dtoa_r+0xa8c>
   1b268:	00c00434 	movhi	r3,16
   1b26c:	18ffffc4 	addi	r3,r3,-1
   1b270:	88c6703a 	and	r3,r17,r3
   1b274:	183f0a1e 	bne	r3,zero,1aea0 <_dtoa_r+0xa8c>
   1b278:	8c5ffc2c 	andhi	r17,r17,32752
   1b27c:	883f0826 	beq	r17,zero,1aea0 <_dtoa_r+0xa8c>
   1b280:	d9000817 	ldw	r4,32(sp)
   1b284:	d9c00717 	ldw	r7,28(sp)
   1b288:	1023883a 	mov	r17,r2
   1b28c:	2089883a 	add	r4,r4,r2
   1b290:	388f883a 	add	r7,r7,r2
   1b294:	d9000815 	stw	r4,32(sp)
   1b298:	d9c00715 	stw	r7,28(sp)
   1b29c:	003f0106 	br	1aea4 <_dtoa_r+0xa90>
   1b2a0:	9005883a 	mov	r2,r18
   1b2a4:	003ed306 	br	1adf4 <_dtoa_r+0x9e0>
   1b2a8:	d8800917 	ldw	r2,36(sp)
   1b2ac:	00be3516 	blt	zero,r2,1ab84 <_dtoa_r+0x770>
   1b2b0:	1000b61e 	bne	r2,zero,1b58c <_dtoa_r+0x1178>
   1b2b4:	9009883a 	mov	r4,r18
   1b2b8:	980b883a 	mov	r5,r19
   1b2bc:	000d883a 	mov	r6,zero
   1b2c0:	01d00534 	movhi	r7,16404
   1b2c4:	00201200 	call	20120 <__muldf3>
   1b2c8:	d9800317 	ldw	r6,12(sp)
   1b2cc:	1009883a 	mov	r4,r2
   1b2d0:	180b883a 	mov	r5,r3
   1b2d4:	880f883a 	mov	r7,r17
   1b2d8:	00206d40 	call	206d4 <__gedf2>
   1b2dc:	0029883a 	mov	r20,zero
   1b2e0:	002b883a 	mov	r21,zero
   1b2e4:	10007e16 	blt	r2,zero,1b4e0 <_dtoa_r+0x10cc>
   1b2e8:	d8802117 	ldw	r2,132(sp)
   1b2ec:	b82d883a 	mov	r22,r23
   1b2f0:	0084303a 	nor	r2,zero,r2
   1b2f4:	d8800615 	stw	r2,24(sp)
   1b2f8:	8009883a 	mov	r4,r16
   1b2fc:	a00b883a 	mov	r5,r20
   1b300:	001d6400 	call	1d640 <_Bfree>
   1b304:	a83f4b1e 	bne	r21,zero,1b034 <_dtoa_r+0xc20>
   1b308:	003de306 	br	1aa98 <_dtoa_r+0x684>
   1b30c:	e00b883a 	mov	r5,fp
   1b310:	8009883a 	mov	r4,r16
   1b314:	001dbb40 	call	1dbb4 <__pow5mult>
   1b318:	1039883a 	mov	fp,r2
   1b31c:	003ed206 	br	1ae68 <_dtoa_r+0xa54>
   1b320:	1000021e 	bne	r2,zero,1b32c <_dtoa_r+0xf18>
   1b324:	18c0004c 	andi	r3,r3,1
   1b328:	183f271e 	bne	r3,zero,1afc8 <_dtoa_r+0xbb4>
   1b32c:	01000c04 	movi	r4,48
   1b330:	00000106 	br	1b338 <_dtoa_r+0xf24>
   1b334:	102d883a 	mov	r22,r2
   1b338:	b0bfffc4 	addi	r2,r22,-1
   1b33c:	10c00007 	ldb	r3,0(r2)
   1b340:	193ffc26 	beq	r3,r4,1b334 <_dtoa_r+0xf20>
   1b344:	003f3206 	br	1b010 <_dtoa_r+0xbfc>
   1b348:	d8c00f17 	ldw	r3,60(sp)
   1b34c:	18015026 	beq	r3,zero,1b890 <_dtoa_r+0x147c>
   1b350:	10810cc4 	addi	r2,r2,1075
   1b354:	dcc00a17 	ldw	r19,40(sp)
   1b358:	dc800817 	ldw	r18,32(sp)
   1b35c:	003e9706 	br	1adbc <_dtoa_r+0x9a8>
   1b360:	b807883a 	mov	r3,r23
   1b364:	182b883a 	mov	r21,r3
   1b368:	ddc00717 	ldw	r23,28(sp)
   1b36c:	00800e0e 	bge	zero,r2,1b3a8 <_dtoa_r+0xf94>
   1b370:	e00b883a 	mov	r5,fp
   1b374:	01800044 	movi	r6,1
   1b378:	8009883a 	mov	r4,r16
   1b37c:	d8c01515 	stw	r3,84(sp)
   1b380:	001dce00 	call	1dce0 <__lshift>
   1b384:	1009883a 	mov	r4,r2
   1b388:	a00b883a 	mov	r5,r20
   1b38c:	1039883a 	mov	fp,r2
   1b390:	001de3c0 	call	1de3c <__mcmp>
   1b394:	d8c01517 	ldw	r3,84(sp)
   1b398:	0081880e 	bge	zero,r2,1b9bc <_dtoa_r+0x15a8>
   1b39c:	00800e44 	movi	r2,57
   1b3a0:	b0c00c44 	addi	r3,r22,49
   1b3a4:	a8816326 	beq	r21,r2,1b934 <_dtoa_r+0x1520>
   1b3a8:	90c00005 	stb	r3,0(r18)
   1b3ac:	95800044 	addi	r22,r18,1
   1b3b0:	982b883a 	mov	r21,r19
   1b3b4:	003f1606 	br	1b010 <_dtoa_r+0xbfc>
   1b3b8:	300b883a 	mov	r5,r6
   1b3bc:	e009883a 	mov	r4,fp
   1b3c0:	d9801515 	stw	r6,84(sp)
   1b3c4:	001de3c0 	call	1de3c <__mcmp>
   1b3c8:	d9801517 	ldw	r6,84(sp)
   1b3cc:	8009883a 	mov	r4,r16
   1b3d0:	d8801515 	stw	r2,84(sp)
   1b3d4:	300b883a 	mov	r5,r6
   1b3d8:	001d6400 	call	1d640 <_Bfree>
   1b3dc:	d8801517 	ldw	r2,84(sp)
   1b3e0:	103f6d1e 	bne	r2,zero,1b198 <_dtoa_r+0xd84>
   1b3e4:	d9c00417 	ldw	r7,16(sp)
   1b3e8:	383f6b1e 	bne	r7,zero,1b198 <_dtoa_r+0xd84>
   1b3ec:	d8c00317 	ldw	r3,12(sp)
   1b3f0:	183f691e 	bne	r3,zero,1b198 <_dtoa_r+0xd84>
   1b3f4:	b807883a 	mov	r3,r23
   1b3f8:	00800e44 	movi	r2,57
   1b3fc:	ddc00717 	ldw	r23,28(sp)
   1b400:	18814c26 	beq	r3,r2,1b934 <_dtoa_r+0x1520>
   1b404:	057fe80e 	bge	zero,r21,1b3a8 <_dtoa_r+0xf94>
   1b408:	b0c00c44 	addi	r3,r22,49
   1b40c:	003fe606 	br	1b3a8 <_dtoa_r+0xf94>
   1b410:	880b883a 	mov	r5,r17
   1b414:	8009883a 	mov	r4,r16
   1b418:	01800284 	movi	r6,10
   1b41c:	000f883a 	mov	r7,zero
   1b420:	001d6680 	call	1d668 <__multadd>
   1b424:	1023883a 	mov	r17,r2
   1b428:	1027883a 	mov	r19,r2
   1b42c:	a825883a 	mov	r18,r21
   1b430:	003f4506 	br	1b148 <_dtoa_r+0xd34>
   1b434:	e009883a 	mov	r4,fp
   1b438:	a00b883a 	mov	r5,r20
   1b43c:	001de3c0 	call	1de3c <__mcmp>
   1b440:	103ebc0e 	bge	r2,zero,1af34 <_dtoa_r+0xb20>
   1b444:	e00b883a 	mov	r5,fp
   1b448:	8009883a 	mov	r4,r16
   1b44c:	01800284 	movi	r6,10
   1b450:	000f883a 	mov	r7,zero
   1b454:	001d6680 	call	1d668 <__multadd>
   1b458:	1039883a 	mov	fp,r2
   1b45c:	d8800617 	ldw	r2,24(sp)
   1b460:	d8c00c17 	ldw	r3,48(sp)
   1b464:	10bfffc4 	addi	r2,r2,-1
   1b468:	d8800615 	stw	r2,24(sp)
   1b46c:	1801571e 	bne	r3,zero,1b9cc <_dtoa_r+0x15b8>
   1b470:	d9c00e17 	ldw	r7,56(sp)
   1b474:	d9c00915 	stw	r7,36(sp)
   1b478:	003eae06 	br	1af34 <_dtoa_r+0xb20>
   1b47c:	a0800417 	ldw	r2,16(r20)
   1b480:	10800104 	addi	r2,r2,4
   1b484:	1085883a 	add	r2,r2,r2
   1b488:	1085883a 	add	r2,r2,r2
   1b48c:	a085883a 	add	r2,r20,r2
   1b490:	11000017 	ldw	r4,0(r2)
   1b494:	001d8800 	call	1d880 <__hi0bits>
   1b498:	00c00804 	movi	r3,32
   1b49c:	1885c83a 	sub	r2,r3,r2
   1b4a0:	003e8306 	br	1aeb0 <_dtoa_r+0xa9c>
   1b4a4:	d9c00417 	ldw	r7,16(sp)
   1b4a8:	00800084 	movi	r2,2
   1b4ac:	11fea30e 	bge	r2,r7,1af3c <_dtoa_r+0xb28>
   1b4b0:	d8800917 	ldw	r2,36(sp)
   1b4b4:	103f8c1e 	bne	r2,zero,1b2e8 <_dtoa_r+0xed4>
   1b4b8:	a00b883a 	mov	r5,r20
   1b4bc:	8009883a 	mov	r4,r16
   1b4c0:	01800144 	movi	r6,5
   1b4c4:	000f883a 	mov	r7,zero
   1b4c8:	001d6680 	call	1d668 <__multadd>
   1b4cc:	e009883a 	mov	r4,fp
   1b4d0:	100b883a 	mov	r5,r2
   1b4d4:	1029883a 	mov	r20,r2
   1b4d8:	001de3c0 	call	1de3c <__mcmp>
   1b4dc:	00bf820e 	bge	zero,r2,1b2e8 <_dtoa_r+0xed4>
   1b4e0:	00800c44 	movi	r2,49
   1b4e4:	b8800005 	stb	r2,0(r23)
   1b4e8:	d8800617 	ldw	r2,24(sp)
   1b4ec:	bd800044 	addi	r22,r23,1
   1b4f0:	10800044 	addi	r2,r2,1
   1b4f4:	d8800615 	stw	r2,24(sp)
   1b4f8:	003f7f06 	br	1b2f8 <_dtoa_r+0xee4>
   1b4fc:	dc000417 	ldw	r16,16(sp)
   1b500:	003d6506 	br	1aa98 <_dtoa_r+0x684>
   1b504:	9009883a 	mov	r4,r18
   1b508:	00207940 	call	20794 <__floatsidf>
   1b50c:	1009883a 	mov	r4,r2
   1b510:	180b883a 	mov	r5,r3
   1b514:	980d883a 	mov	r6,r19
   1b518:	a00f883a 	mov	r7,r20
   1b51c:	00201200 	call	20120 <__muldf3>
   1b520:	1009883a 	mov	r4,r2
   1b524:	180b883a 	mov	r5,r3
   1b528:	000d883a 	mov	r6,zero
   1b52c:	01d00734 	movhi	r7,16412
   1b530:	002006c0 	call	2006c <__adddf3>
   1b534:	057f3034 	movhi	r21,64704
   1b538:	1025883a 	mov	r18,r2
   1b53c:	1d6b883a 	add	r21,r3,r21
   1b540:	9809883a 	mov	r4,r19
   1b544:	a00b883a 	mov	r5,r20
   1b548:	000d883a 	mov	r6,zero
   1b54c:	01d00534 	movhi	r7,16404
   1b550:	00200c00 	call	200c0 <__subdf3>
   1b554:	1009883a 	mov	r4,r2
   1b558:	180b883a 	mov	r5,r3
   1b55c:	900d883a 	mov	r6,r18
   1b560:	a80f883a 	mov	r7,r21
   1b564:	1027883a 	mov	r19,r2
   1b568:	1829883a 	mov	r20,r3
   1b56c:	00206700 	call	20670 <__gtdf2>
   1b570:	00806616 	blt	zero,r2,1b70c <_dtoa_r+0x12f8>
   1b574:	a9e0003c 	xorhi	r7,r21,32768
   1b578:	9809883a 	mov	r4,r19
   1b57c:	a00b883a 	mov	r5,r20
   1b580:	900d883a 	mov	r6,r18
   1b584:	00207380 	call	20738 <__ltdf2>
   1b588:	103d710e 	bge	r2,zero,1ab50 <_dtoa_r+0x73c>
   1b58c:	0029883a 	mov	r20,zero
   1b590:	002b883a 	mov	r21,zero
   1b594:	003f5406 	br	1b2e8 <_dtoa_r+0xed4>
   1b598:	d9800a17 	ldw	r6,40(sp)
   1b59c:	e00b883a 	mov	r5,fp
   1b5a0:	8009883a 	mov	r4,r16
   1b5a4:	001dbb40 	call	1dbb4 <__pow5mult>
   1b5a8:	1039883a 	mov	fp,r2
   1b5ac:	003e2e06 	br	1ae68 <_dtoa_r+0xa54>
   1b5b0:	d8000c15 	stw	zero,48(sp)
   1b5b4:	003f2006 	br	1b238 <_dtoa_r+0xe24>
   1b5b8:	00800044 	movi	r2,1
   1b5bc:	d8800c15 	stw	r2,48(sp)
   1b5c0:	003c5d06 	br	1a738 <_dtoa_r+0x324>
   1b5c4:	d8c00a17 	ldw	r3,40(sp)
   1b5c8:	d9000b17 	ldw	r4,44(sp)
   1b5cc:	dcc00a15 	stw	r19,40(sp)
   1b5d0:	98c5c83a 	sub	r2,r19,r3
   1b5d4:	2089883a 	add	r4,r4,r2
   1b5d8:	d9000b15 	stw	r4,44(sp)
   1b5dc:	0027883a 	mov	r19,zero
   1b5e0:	003df206 	br	1adac <_dtoa_r+0x998>
   1b5e4:	d9000317 	ldw	r4,12(sp)
   1b5e8:	8829883a 	mov	r20,r17
   1b5ec:	04800084 	movi	r18,2
   1b5f0:	d9001015 	stw	r4,64(sp)
   1b5f4:	003c8106 	br	1a7fc <_dtoa_r+0x3e8>
   1b5f8:	04800044 	movi	r18,1
   1b5fc:	dc800e15 	stw	r18,56(sp)
   1b600:	dc800915 	stw	r18,36(sp)
   1b604:	dc802115 	stw	r18,132(sp)
   1b608:	003f1206 	br	1b254 <_dtoa_r+0xe40>
   1b60c:	d8800617 	ldw	r2,24(sp)
   1b610:	00abc83a 	sub	r21,zero,r2
   1b614:	a800a426 	beq	r21,zero,1b8a8 <_dtoa_r+0x1494>
   1b618:	a88003cc 	andi	r2,r21,15
   1b61c:	100490fa 	slli	r2,r2,3
   1b620:	00c000f4 	movhi	r3,3
   1b624:	18c28104 	addi	r3,r3,2564
   1b628:	d9000317 	ldw	r4,12(sp)
   1b62c:	1885883a 	add	r2,r3,r2
   1b630:	11800017 	ldw	r6,0(r2)
   1b634:	11c00117 	ldw	r7,4(r2)
   1b638:	a82bd13a 	srai	r21,r21,4
   1b63c:	880b883a 	mov	r5,r17
   1b640:	00201200 	call	20120 <__muldf3>
   1b644:	1027883a 	mov	r19,r2
   1b648:	1829883a 	mov	r20,r3
   1b64c:	a800e826 	beq	r21,zero,1b9f0 <_dtoa_r+0x15dc>
   1b650:	058000f4 	movhi	r22,3
   1b654:	b5827704 	addi	r22,r22,2524
   1b658:	04800084 	movi	r18,2
   1b65c:	a980004c 	andi	r6,r21,1
   1b660:	1009883a 	mov	r4,r2
   1b664:	a82bd07a 	srai	r21,r21,1
   1b668:	180b883a 	mov	r5,r3
   1b66c:	30000426 	beq	r6,zero,1b680 <_dtoa_r+0x126c>
   1b670:	b1800017 	ldw	r6,0(r22)
   1b674:	b1c00117 	ldw	r7,4(r22)
   1b678:	94800044 	addi	r18,r18,1
   1b67c:	00201200 	call	20120 <__muldf3>
   1b680:	b5800204 	addi	r22,r22,8
   1b684:	a83ff51e 	bne	r21,zero,1b65c <_dtoa_r+0x1248>
   1b688:	1027883a 	mov	r19,r2
   1b68c:	1829883a 	mov	r20,r3
   1b690:	003c7306 	br	1a860 <_dtoa_r+0x44c>
   1b694:	21000044 	addi	r4,r4,1
   1b698:	11000005 	stb	r4,0(r2)
   1b69c:	003e5c06 	br	1b010 <_dtoa_r+0xbfc>
   1b6a0:	a9400117 	ldw	r5,4(r21)
   1b6a4:	8009883a 	mov	r4,r16
   1b6a8:	001d5980 	call	1d598 <_Balloc>
   1b6ac:	a9800417 	ldw	r6,16(r21)
   1b6b0:	11000304 	addi	r4,r2,12
   1b6b4:	a9400304 	addi	r5,r21,12
   1b6b8:	31800084 	addi	r6,r6,2
   1b6bc:	318d883a 	add	r6,r6,r6
   1b6c0:	318d883a 	add	r6,r6,r6
   1b6c4:	1023883a 	mov	r17,r2
   1b6c8:	0017a440 	call	17a44 <memcpy>
   1b6cc:	8009883a 	mov	r4,r16
   1b6d0:	880b883a 	mov	r5,r17
   1b6d4:	01800044 	movi	r6,1
   1b6d8:	001dce00 	call	1dce0 <__lshift>
   1b6dc:	1027883a 	mov	r19,r2
   1b6e0:	003e8f06 	br	1b120 <_dtoa_r+0xd0c>
   1b6e4:	b807883a 	mov	r3,r23
   1b6e8:	00800e44 	movi	r2,57
   1b6ec:	ddc00717 	ldw	r23,28(sp)
   1b6f0:	18809026 	beq	r3,r2,1b934 <_dtoa_r+0x1520>
   1b6f4:	18c00044 	addi	r3,r3,1
   1b6f8:	003f2b06 	br	1b3a8 <_dtoa_r+0xf94>
   1b6fc:	b807883a 	mov	r3,r23
   1b700:	982b883a 	mov	r21,r19
   1b704:	ddc00717 	ldw	r23,28(sp)
   1b708:	003e2406 	br	1af9c <_dtoa_r+0xb88>
   1b70c:	0029883a 	mov	r20,zero
   1b710:	002b883a 	mov	r21,zero
   1b714:	003f7206 	br	1b4e0 <_dtoa_r+0x10cc>
   1b718:	593fffc4 	addi	r4,r11,-1
   1b71c:	200490fa 	slli	r2,r4,3
   1b720:	00c000f4 	movhi	r3,3
   1b724:	18c28104 	addi	r3,r3,2564
   1b728:	d9001015 	stw	r4,64(sp)
   1b72c:	1885883a 	add	r2,r3,r2
   1b730:	11000017 	ldw	r4,0(r2)
   1b734:	11400117 	ldw	r5,4(r2)
   1b738:	900d883a 	mov	r6,r18
   1b73c:	a80f883a 	mov	r7,r21
   1b740:	dac01615 	stw	r11,88(sp)
   1b744:	00201200 	call	20120 <__muldf3>
   1b748:	a00b883a 	mov	r5,r20
   1b74c:	9809883a 	mov	r4,r19
   1b750:	d8c01215 	stw	r3,72(sp)
   1b754:	d8801115 	stw	r2,68(sp)
   1b758:	00208680 	call	20868 <__fixdfsi>
   1b75c:	1009883a 	mov	r4,r2
   1b760:	1025883a 	mov	r18,r2
   1b764:	00207940 	call	20794 <__floatsidf>
   1b768:	9809883a 	mov	r4,r19
   1b76c:	a00b883a 	mov	r5,r20
   1b770:	100d883a 	mov	r6,r2
   1b774:	180f883a 	mov	r7,r3
   1b778:	94800c04 	addi	r18,r18,48
   1b77c:	00200c00 	call	200c0 <__subdf3>
   1b780:	bc800005 	stb	r18,0(r23)
   1b784:	dac01617 	ldw	r11,88(sp)
   1b788:	102b883a 	mov	r21,r2
   1b78c:	00800044 	movi	r2,1
   1b790:	bd800044 	addi	r22,r23,1
   1b794:	1815883a 	mov	r10,r3
   1b798:	58802226 	beq	r11,r2,1b824 <_dtoa_r+0x1410>
   1b79c:	bad7883a 	add	r11,r23,r11
   1b7a0:	dc001415 	stw	r16,80(sp)
   1b7a4:	a805883a 	mov	r2,r21
   1b7a8:	b027883a 	mov	r19,r22
   1b7ac:	5821883a 	mov	r16,r11
   1b7b0:	882b883a 	mov	r21,r17
   1b7b4:	000d883a 	mov	r6,zero
   1b7b8:	01d00934 	movhi	r7,16420
   1b7bc:	1009883a 	mov	r4,r2
   1b7c0:	180b883a 	mov	r5,r3
   1b7c4:	00201200 	call	20120 <__muldf3>
   1b7c8:	180b883a 	mov	r5,r3
   1b7cc:	1009883a 	mov	r4,r2
   1b7d0:	1829883a 	mov	r20,r3
   1b7d4:	1023883a 	mov	r17,r2
   1b7d8:	00208680 	call	20868 <__fixdfsi>
   1b7dc:	1009883a 	mov	r4,r2
   1b7e0:	1025883a 	mov	r18,r2
   1b7e4:	00207940 	call	20794 <__floatsidf>
   1b7e8:	8809883a 	mov	r4,r17
   1b7ec:	a00b883a 	mov	r5,r20
   1b7f0:	100d883a 	mov	r6,r2
   1b7f4:	180f883a 	mov	r7,r3
   1b7f8:	94800c04 	addi	r18,r18,48
   1b7fc:	00200c00 	call	200c0 <__subdf3>
   1b800:	9cc00044 	addi	r19,r19,1
   1b804:	9cbfffc5 	stb	r18,-1(r19)
   1b808:	9c3fea1e 	bne	r19,r16,1b7b4 <_dtoa_r+0x13a0>
   1b80c:	1815883a 	mov	r10,r3
   1b810:	d8c01017 	ldw	r3,64(sp)
   1b814:	dc001417 	ldw	r16,80(sp)
   1b818:	a823883a 	mov	r17,r21
   1b81c:	b0ed883a 	add	r22,r22,r3
   1b820:	102b883a 	mov	r21,r2
   1b824:	d9001117 	ldw	r4,68(sp)
   1b828:	d9401217 	ldw	r5,72(sp)
   1b82c:	000d883a 	mov	r6,zero
   1b830:	01cff834 	movhi	r7,16352
   1b834:	da801515 	stw	r10,84(sp)
   1b838:	002006c0 	call	2006c <__adddf3>
   1b83c:	da801517 	ldw	r10,84(sp)
   1b840:	1009883a 	mov	r4,r2
   1b844:	180b883a 	mov	r5,r3
   1b848:	500f883a 	mov	r7,r10
   1b84c:	a80d883a 	mov	r6,r21
   1b850:	00207380 	call	20738 <__ltdf2>
   1b854:	da801517 	ldw	r10,84(sp)
   1b858:	10003b0e 	bge	r2,zero,1b948 <_dtoa_r+0x1534>
   1b85c:	d9c01317 	ldw	r7,76(sp)
   1b860:	b53fffc3 	ldbu	r20,-1(r22)
   1b864:	d9c00615 	stw	r7,24(sp)
   1b868:	003d3106 	br	1ad30 <_dtoa_r+0x91c>
   1b86c:	d8800817 	ldw	r2,32(sp)
   1b870:	11e5c83a 	sub	r18,r2,r7
   1b874:	0005883a 	mov	r2,zero
   1b878:	003d5006 	br	1adbc <_dtoa_r+0x9a8>
   1b87c:	05800044 	movi	r22,1
   1b880:	003dc406 	br	1af94 <_dtoa_r+0xb80>
   1b884:	a5000044 	addi	r20,r20,1
   1b888:	15000005 	stb	r20,0(r2)
   1b88c:	003c8206 	br	1aa98 <_dtoa_r+0x684>
   1b890:	d8800217 	ldw	r2,8(sp)
   1b894:	00c00d84 	movi	r3,54
   1b898:	dcc00a17 	ldw	r19,40(sp)
   1b89c:	1885c83a 	sub	r2,r3,r2
   1b8a0:	dc800817 	ldw	r18,32(sp)
   1b8a4:	003d4506 	br	1adbc <_dtoa_r+0x9a8>
   1b8a8:	dcc00317 	ldw	r19,12(sp)
   1b8ac:	8829883a 	mov	r20,r17
   1b8b0:	04800084 	movi	r18,2
   1b8b4:	003bea06 	br	1a860 <_dtoa_r+0x44c>
   1b8b8:	d9000917 	ldw	r4,36(sp)
   1b8bc:	203f1126 	beq	r4,zero,1b504 <_dtoa_r+0x10f0>
   1b8c0:	d9c00e17 	ldw	r7,56(sp)
   1b8c4:	01fca20e 	bge	zero,r7,1ab50 <_dtoa_r+0x73c>
   1b8c8:	a00b883a 	mov	r5,r20
   1b8cc:	9809883a 	mov	r4,r19
   1b8d0:	000d883a 	mov	r6,zero
   1b8d4:	01d00934 	movhi	r7,16420
   1b8d8:	00201200 	call	20120 <__muldf3>
   1b8dc:	91000044 	addi	r4,r18,1
   1b8e0:	1027883a 	mov	r19,r2
   1b8e4:	1829883a 	mov	r20,r3
   1b8e8:	00207940 	call	20794 <__floatsidf>
   1b8ec:	9809883a 	mov	r4,r19
   1b8f0:	a00b883a 	mov	r5,r20
   1b8f4:	100d883a 	mov	r6,r2
   1b8f8:	180f883a 	mov	r7,r3
   1b8fc:	00201200 	call	20120 <__muldf3>
   1b900:	1009883a 	mov	r4,r2
   1b904:	180b883a 	mov	r5,r3
   1b908:	000d883a 	mov	r6,zero
   1b90c:	01d00734 	movhi	r7,16412
   1b910:	002006c0 	call	2006c <__adddf3>
   1b914:	1025883a 	mov	r18,r2
   1b918:	d8800617 	ldw	r2,24(sp)
   1b91c:	057f3034 	movhi	r21,64704
   1b920:	1d6b883a 	add	r21,r3,r21
   1b924:	10bfffc4 	addi	r2,r2,-1
   1b928:	d8801315 	stw	r2,76(sp)
   1b92c:	dac00e17 	ldw	r11,56(sp)
   1b930:	003be706 	br	1a8d0 <_dtoa_r+0x4bc>
   1b934:	01000e44 	movi	r4,57
   1b938:	91000005 	stb	r4,0(r18)
   1b93c:	95800044 	addi	r22,r18,1
   1b940:	982b883a 	mov	r21,r19
   1b944:	003da106 	br	1afcc <_dtoa_r+0xbb8>
   1b948:	d9801117 	ldw	r6,68(sp)
   1b94c:	d9c01217 	ldw	r7,72(sp)
   1b950:	0009883a 	mov	r4,zero
   1b954:	014ff834 	movhi	r5,16352
   1b958:	da801515 	stw	r10,84(sp)
   1b95c:	00200c00 	call	200c0 <__subdf3>
   1b960:	da801517 	ldw	r10,84(sp)
   1b964:	1009883a 	mov	r4,r2
   1b968:	180b883a 	mov	r5,r3
   1b96c:	a80d883a 	mov	r6,r21
   1b970:	500f883a 	mov	r7,r10
   1b974:	00206700 	call	20670 <__gtdf2>
   1b978:	00bc750e 	bge	zero,r2,1ab50 <_dtoa_r+0x73c>
   1b97c:	01000c04 	movi	r4,48
   1b980:	00000106 	br	1b988 <_dtoa_r+0x1574>
   1b984:	102d883a 	mov	r22,r2
   1b988:	b0bfffc4 	addi	r2,r22,-1
   1b98c:	10c00007 	ldb	r3,0(r2)
   1b990:	193ffc26 	beq	r3,r4,1b984 <_dtoa_r+0x1570>
   1b994:	d8801317 	ldw	r2,76(sp)
   1b998:	d8800615 	stw	r2,24(sp)
   1b99c:	003c3e06 	br	1aa98 <_dtoa_r+0x684>
   1b9a0:	d9001317 	ldw	r4,76(sp)
   1b9a4:	df001117 	ldw	fp,68(sp)
   1b9a8:	d9000615 	stw	r4,24(sp)
   1b9ac:	003ce006 	br	1ad30 <_dtoa_r+0x91c>
   1b9b0:	df001117 	ldw	fp,68(sp)
   1b9b4:	dc401217 	ldw	r17,72(sp)
   1b9b8:	003c6506 	br	1ab50 <_dtoa_r+0x73c>
   1b9bc:	103e7a1e 	bne	r2,zero,1b3a8 <_dtoa_r+0xf94>
   1b9c0:	1880004c 	andi	r2,r3,1
   1b9c4:	103e7826 	beq	r2,zero,1b3a8 <_dtoa_r+0xf94>
   1b9c8:	003e7406 	br	1b39c <_dtoa_r+0xf88>
   1b9cc:	8009883a 	mov	r4,r16
   1b9d0:	a80b883a 	mov	r5,r21
   1b9d4:	01800284 	movi	r6,10
   1b9d8:	000f883a 	mov	r7,zero
   1b9dc:	001d6680 	call	1d668 <__multadd>
   1b9e0:	d9000e17 	ldw	r4,56(sp)
   1b9e4:	102b883a 	mov	r21,r2
   1b9e8:	d9000915 	stw	r4,36(sp)
   1b9ec:	003d5106 	br	1af34 <_dtoa_r+0xb20>
   1b9f0:	04800084 	movi	r18,2
   1b9f4:	003b9a06 	br	1a860 <_dtoa_r+0x44c>
   1b9f8:	d8c01317 	ldw	r3,76(sp)
   1b9fc:	d8c00615 	stw	r3,24(sp)
   1ba00:	003ccb06 	br	1ad30 <_dtoa_r+0x91c>
   1ba04:	d8c01317 	ldw	r3,76(sp)
   1ba08:	d8c00615 	stw	r3,24(sp)
   1ba0c:	003c2206 	br	1aa98 <_dtoa_r+0x684>
   1ba10:	20fd3826 	beq	r4,r3,1aef4 <_dtoa_r+0xae0>
   1ba14:	00c00f04 	movi	r3,60
   1ba18:	1885c83a 	sub	r2,r3,r2
   1ba1c:	003da906 	br	1b0c4 <_dtoa_r+0xcb0>
   1ba20:	000b883a 	mov	r5,zero
   1ba24:	003b5406 	br	1a778 <_dtoa_r+0x364>
   1ba28:	04c00044 	movi	r19,1
   1ba2c:	003b3b06 	br	1a71c <_dtoa_r+0x308>

0001ba30 <_fflush_r>:
   1ba30:	defffb04 	addi	sp,sp,-20
   1ba34:	dcc00315 	stw	r19,12(sp)
   1ba38:	dc400115 	stw	r17,4(sp)
   1ba3c:	dfc00415 	stw	ra,16(sp)
   1ba40:	dc800215 	stw	r18,8(sp)
   1ba44:	dc000015 	stw	r16,0(sp)
   1ba48:	2027883a 	mov	r19,r4
   1ba4c:	2823883a 	mov	r17,r5
   1ba50:	20000226 	beq	r4,zero,1ba5c <_fflush_r+0x2c>
   1ba54:	20800e17 	ldw	r2,56(r4)
   1ba58:	10005726 	beq	r2,zero,1bbb8 <_fflush_r+0x188>
   1ba5c:	8880030b 	ldhu	r2,12(r17)
   1ba60:	10c0020c 	andi	r3,r2,8
   1ba64:	18ffffcc 	andi	r3,r3,65535
   1ba68:	18e0001c 	xori	r3,r3,32768
   1ba6c:	18e00004 	addi	r3,r3,-32768
   1ba70:	1800311e 	bne	r3,zero,1bb38 <_fflush_r+0x108>
   1ba74:	89000117 	ldw	r4,4(r17)
   1ba78:	10c20014 	ori	r3,r2,2048
   1ba7c:	88c0030d 	sth	r3,12(r17)
   1ba80:	180b883a 	mov	r5,r3
   1ba84:	0100520e 	bge	zero,r4,1bbd0 <_fflush_r+0x1a0>
   1ba88:	88c00a17 	ldw	r3,40(r17)
   1ba8c:	18002226 	beq	r3,zero,1bb18 <_fflush_r+0xe8>
   1ba90:	1084000c 	andi	r2,r2,4096
   1ba94:	10bfffcc 	andi	r2,r2,65535
   1ba98:	10a0001c 	xori	r2,r2,32768
   1ba9c:	10a00004 	addi	r2,r2,-32768
   1baa0:	10004e26 	beq	r2,zero,1bbdc <_fflush_r+0x1ac>
   1baa4:	8c001417 	ldw	r16,80(r17)
   1baa8:	2940010c 	andi	r5,r5,4
   1baac:	297fffcc 	andi	r5,r5,65535
   1bab0:	2960001c 	xori	r5,r5,32768
   1bab4:	29600004 	addi	r5,r5,-32768
   1bab8:	28000626 	beq	r5,zero,1bad4 <_fflush_r+0xa4>
   1babc:	89000117 	ldw	r4,4(r17)
   1bac0:	88800c17 	ldw	r2,48(r17)
   1bac4:	8121c83a 	sub	r16,r16,r4
   1bac8:	10000226 	beq	r2,zero,1bad4 <_fflush_r+0xa4>
   1bacc:	88800f17 	ldw	r2,60(r17)
   1bad0:	80a1c83a 	sub	r16,r16,r2
   1bad4:	89400717 	ldw	r5,28(r17)
   1bad8:	9809883a 	mov	r4,r19
   1badc:	800d883a 	mov	r6,r16
   1bae0:	000f883a 	mov	r7,zero
   1bae4:	183ee83a 	callr	r3
   1bae8:	8080281e 	bne	r16,r2,1bb8c <_fflush_r+0x15c>
   1baec:	8880030b 	ldhu	r2,12(r17)
   1baf0:	88c00417 	ldw	r3,16(r17)
   1baf4:	88000115 	stw	zero,4(r17)
   1baf8:	113dffcc 	andi	r4,r2,63487
   1bafc:	1084000c 	andi	r2,r2,4096
   1bb00:	10bfffcc 	andi	r2,r2,65535
   1bb04:	10a0001c 	xori	r2,r2,32768
   1bb08:	8900030d 	sth	r4,12(r17)
   1bb0c:	88c00015 	stw	r3,0(r17)
   1bb10:	10a00004 	addi	r2,r2,-32768
   1bb14:	10002c1e 	bne	r2,zero,1bbc8 <_fflush_r+0x198>
   1bb18:	0005883a 	mov	r2,zero
   1bb1c:	dfc00417 	ldw	ra,16(sp)
   1bb20:	dcc00317 	ldw	r19,12(sp)
   1bb24:	dc800217 	ldw	r18,8(sp)
   1bb28:	dc400117 	ldw	r17,4(sp)
   1bb2c:	dc000017 	ldw	r16,0(sp)
   1bb30:	dec00504 	addi	sp,sp,20
   1bb34:	f800283a 	ret
   1bb38:	8c800417 	ldw	r18,16(r17)
   1bb3c:	903ff626 	beq	r18,zero,1bb18 <_fflush_r+0xe8>
   1bb40:	8c000017 	ldw	r16,0(r17)
   1bb44:	108000cc 	andi	r2,r2,3
   1bb48:	8c800015 	stw	r18,0(r17)
   1bb4c:	84a1c83a 	sub	r16,r16,r18
   1bb50:	10001b1e 	bne	r2,zero,1bbc0 <_fflush_r+0x190>
   1bb54:	88800517 	ldw	r2,20(r17)
   1bb58:	88800215 	stw	r2,8(r17)
   1bb5c:	04000316 	blt	zero,r16,1bb6c <_fflush_r+0x13c>
   1bb60:	003fed06 	br	1bb18 <_fflush_r+0xe8>
   1bb64:	90a5883a 	add	r18,r18,r2
   1bb68:	043feb0e 	bge	zero,r16,1bb18 <_fflush_r+0xe8>
   1bb6c:	88800917 	ldw	r2,36(r17)
   1bb70:	89400717 	ldw	r5,28(r17)
   1bb74:	800f883a 	mov	r7,r16
   1bb78:	900d883a 	mov	r6,r18
   1bb7c:	9809883a 	mov	r4,r19
   1bb80:	103ee83a 	callr	r2
   1bb84:	80a1c83a 	sub	r16,r16,r2
   1bb88:	00bff616 	blt	zero,r2,1bb64 <_fflush_r+0x134>
   1bb8c:	88c0030b 	ldhu	r3,12(r17)
   1bb90:	00bfffc4 	movi	r2,-1
   1bb94:	18c01014 	ori	r3,r3,64
   1bb98:	88c0030d 	sth	r3,12(r17)
   1bb9c:	dfc00417 	ldw	ra,16(sp)
   1bba0:	dcc00317 	ldw	r19,12(sp)
   1bba4:	dc800217 	ldw	r18,8(sp)
   1bba8:	dc400117 	ldw	r17,4(sp)
   1bbac:	dc000017 	ldw	r16,0(sp)
   1bbb0:	dec00504 	addi	sp,sp,20
   1bbb4:	f800283a 	ret
   1bbb8:	001bcd80 	call	1bcd8 <__sinit>
   1bbbc:	003fa706 	br	1ba5c <_fflush_r+0x2c>
   1bbc0:	0005883a 	mov	r2,zero
   1bbc4:	003fe406 	br	1bb58 <_fflush_r+0x128>
   1bbc8:	8c001415 	stw	r16,80(r17)
   1bbcc:	003fd206 	br	1bb18 <_fflush_r+0xe8>
   1bbd0:	88c00f17 	ldw	r3,60(r17)
   1bbd4:	00ffac16 	blt	zero,r3,1ba88 <_fflush_r+0x58>
   1bbd8:	003fcf06 	br	1bb18 <_fflush_r+0xe8>
   1bbdc:	89400717 	ldw	r5,28(r17)
   1bbe0:	9809883a 	mov	r4,r19
   1bbe4:	000d883a 	mov	r6,zero
   1bbe8:	01c00044 	movi	r7,1
   1bbec:	183ee83a 	callr	r3
   1bbf0:	1021883a 	mov	r16,r2
   1bbf4:	00bfffc4 	movi	r2,-1
   1bbf8:	80800326 	beq	r16,r2,1bc08 <_fflush_r+0x1d8>
   1bbfc:	8940030b 	ldhu	r5,12(r17)
   1bc00:	88c00a17 	ldw	r3,40(r17)
   1bc04:	003fa806 	br	1baa8 <_fflush_r+0x78>
   1bc08:	98c00017 	ldw	r3,0(r19)
   1bc0c:	00800744 	movi	r2,29
   1bc10:	18bfde1e 	bne	r3,r2,1bb8c <_fflush_r+0x15c>
   1bc14:	003fc006 	br	1bb18 <_fflush_r+0xe8>

0001bc18 <fflush>:
   1bc18:	200b883a 	mov	r5,r4
   1bc1c:	20000426 	beq	r4,zero,1bc30 <fflush+0x18>
   1bc20:	008000f4 	movhi	r2,3
   1bc24:	10933404 	addi	r2,r2,19664
   1bc28:	11000017 	ldw	r4,0(r2)
   1bc2c:	001ba301 	jmpi	1ba30 <_fflush_r>
   1bc30:	008000f4 	movhi	r2,3
   1bc34:	10933304 	addi	r2,r2,19660
   1bc38:	11000017 	ldw	r4,0(r2)
   1bc3c:	014000b4 	movhi	r5,2
   1bc40:	296e8c04 	addi	r5,r5,-17872
   1bc44:	001c8b81 	jmpi	1c8b8 <_fwalk_reent>

0001bc48 <__fp_lock>:
   1bc48:	0005883a 	mov	r2,zero
   1bc4c:	f800283a 	ret

0001bc50 <__fp_unlock>:
   1bc50:	0005883a 	mov	r2,zero
   1bc54:	f800283a 	ret

0001bc58 <_cleanup_r>:
   1bc58:	014000b4 	movhi	r5,2
   1bc5c:	297c0304 	addi	r5,r5,-4084
   1bc60:	001c8101 	jmpi	1c810 <_fwalk>

0001bc64 <__sfmoreglue>:
   1bc64:	defffc04 	addi	sp,sp,-16
   1bc68:	dc400115 	stw	r17,4(sp)
   1bc6c:	2c401724 	muli	r17,r5,92
   1bc70:	dc800215 	stw	r18,8(sp)
   1bc74:	2825883a 	mov	r18,r5
   1bc78:	89400304 	addi	r5,r17,12
   1bc7c:	dc000015 	stw	r16,0(sp)
   1bc80:	dfc00315 	stw	ra,12(sp)
   1bc84:	001cbf40 	call	1cbf4 <_malloc_r>
   1bc88:	1021883a 	mov	r16,r2
   1bc8c:	10000726 	beq	r2,zero,1bcac <__sfmoreglue+0x48>
   1bc90:	11000304 	addi	r4,r2,12
   1bc94:	10000015 	stw	zero,0(r2)
   1bc98:	14800115 	stw	r18,4(r2)
   1bc9c:	11000215 	stw	r4,8(r2)
   1bca0:	000b883a 	mov	r5,zero
   1bca4:	880d883a 	mov	r6,r17
   1bca8:	0017b3c0 	call	17b3c <memset>
   1bcac:	8005883a 	mov	r2,r16
   1bcb0:	dfc00317 	ldw	ra,12(sp)
   1bcb4:	dc800217 	ldw	r18,8(sp)
   1bcb8:	dc400117 	ldw	r17,4(sp)
   1bcbc:	dc000017 	ldw	r16,0(sp)
   1bcc0:	dec00404 	addi	sp,sp,16
   1bcc4:	f800283a 	ret

0001bcc8 <_cleanup>:
   1bcc8:	008000f4 	movhi	r2,3
   1bccc:	10933304 	addi	r2,r2,19660
   1bcd0:	11000017 	ldw	r4,0(r2)
   1bcd4:	001bc581 	jmpi	1bc58 <_cleanup_r>

0001bcd8 <__sinit>:
   1bcd8:	20800e17 	ldw	r2,56(r4)
   1bcdc:	1000401e 	bne	r2,zero,1bde0 <__sinit+0x108>
   1bce0:	21400117 	ldw	r5,4(r4)
   1bce4:	018000b4 	movhi	r6,2
   1bce8:	31af1604 	addi	r6,r6,-17320
   1bcec:	20c00217 	ldw	r3,8(r4)
   1bcf0:	21800f15 	stw	r6,60(r4)
   1bcf4:	2080bb04 	addi	r2,r4,748
   1bcf8:	02400044 	movi	r9,1
   1bcfc:	018000c4 	movi	r6,3
   1bd00:	2180b915 	stw	r6,740(r4)
   1bd04:	2080ba15 	stw	r2,744(r4)
   1bd08:	22400e15 	stw	r9,56(r4)
   1bd0c:	20800317 	ldw	r2,12(r4)
   1bd10:	2000b815 	stw	zero,736(r4)
   1bd14:	020000b4 	movhi	r8,2
   1bd18:	423b0104 	addi	r8,r8,-5116
   1bd1c:	01c000b4 	movhi	r7,2
   1bd20:	39fb1604 	addi	r7,r7,-5032
   1bd24:	018000b4 	movhi	r6,2
   1bd28:	31bb3804 	addi	r6,r6,-4896
   1bd2c:	010000b4 	movhi	r4,2
   1bd30:	213b4f04 	addi	r4,r4,-4804
   1bd34:	02800104 	movi	r10,4
   1bd38:	28000015 	stw	zero,0(r5)
   1bd3c:	28000115 	stw	zero,4(r5)
   1bd40:	28000215 	stw	zero,8(r5)
   1bd44:	2a80030d 	sth	r10,12(r5)
   1bd48:	2800038d 	sth	zero,14(r5)
   1bd4c:	28000415 	stw	zero,16(r5)
   1bd50:	28000515 	stw	zero,20(r5)
   1bd54:	28000615 	stw	zero,24(r5)
   1bd58:	29400715 	stw	r5,28(r5)
   1bd5c:	2a000815 	stw	r8,32(r5)
   1bd60:	29c00915 	stw	r7,36(r5)
   1bd64:	29800a15 	stw	r6,40(r5)
   1bd68:	29000b15 	stw	r4,44(r5)
   1bd6c:	01400284 	movi	r5,10
   1bd70:	18000015 	stw	zero,0(r3)
   1bd74:	18000115 	stw	zero,4(r3)
   1bd78:	18000215 	stw	zero,8(r3)
   1bd7c:	1940030d 	sth	r5,12(r3)
   1bd80:	1a40038d 	sth	r9,14(r3)
   1bd84:	18000415 	stw	zero,16(r3)
   1bd88:	18000515 	stw	zero,20(r3)
   1bd8c:	18000615 	stw	zero,24(r3)
   1bd90:	18c00715 	stw	r3,28(r3)
   1bd94:	1a000815 	stw	r8,32(r3)
   1bd98:	19c00915 	stw	r7,36(r3)
   1bd9c:	19800a15 	stw	r6,40(r3)
   1bda0:	19000b15 	stw	r4,44(r3)
   1bda4:	00c00484 	movi	r3,18
   1bda8:	10c0030d 	sth	r3,12(r2)
   1bdac:	00c00084 	movi	r3,2
   1bdb0:	10000015 	stw	zero,0(r2)
   1bdb4:	10000115 	stw	zero,4(r2)
   1bdb8:	10000215 	stw	zero,8(r2)
   1bdbc:	10c0038d 	sth	r3,14(r2)
   1bdc0:	10000415 	stw	zero,16(r2)
   1bdc4:	10000515 	stw	zero,20(r2)
   1bdc8:	10000615 	stw	zero,24(r2)
   1bdcc:	10800715 	stw	r2,28(r2)
   1bdd0:	12000815 	stw	r8,32(r2)
   1bdd4:	11c00915 	stw	r7,36(r2)
   1bdd8:	11800a15 	stw	r6,40(r2)
   1bddc:	11000b15 	stw	r4,44(r2)
   1bde0:	f800283a 	ret

0001bde4 <__sfp>:
   1bde4:	defffc04 	addi	sp,sp,-16
   1bde8:	008000f4 	movhi	r2,3
   1bdec:	10933304 	addi	r2,r2,19660
   1bdf0:	dc400115 	stw	r17,4(sp)
   1bdf4:	14400017 	ldw	r17,0(r2)
   1bdf8:	dc800215 	stw	r18,8(sp)
   1bdfc:	dfc00315 	stw	ra,12(sp)
   1be00:	88800e17 	ldw	r2,56(r17)
   1be04:	dc000015 	stw	r16,0(sp)
   1be08:	2025883a 	mov	r18,r4
   1be0c:	10002826 	beq	r2,zero,1beb0 <__sfp+0xcc>
   1be10:	8c40b804 	addi	r17,r17,736
   1be14:	043fffc4 	movi	r16,-1
   1be18:	89400117 	ldw	r5,4(r17)
   1be1c:	88800217 	ldw	r2,8(r17)
   1be20:	297fffc4 	addi	r5,r5,-1
   1be24:	28000a16 	blt	r5,zero,1be50 <__sfp+0x6c>
   1be28:	10c0030f 	ldh	r3,12(r2)
   1be2c:	18000c26 	beq	r3,zero,1be60 <__sfp+0x7c>
   1be30:	10c01a04 	addi	r3,r2,104
   1be34:	00000206 	br	1be40 <__sfp+0x5c>
   1be38:	19bfe90f 	ldh	r6,-92(r3)
   1be3c:	30000826 	beq	r6,zero,1be60 <__sfp+0x7c>
   1be40:	297fffc4 	addi	r5,r5,-1
   1be44:	18bffd04 	addi	r2,r3,-12
   1be48:	18c01704 	addi	r3,r3,92
   1be4c:	2c3ffa1e 	bne	r5,r16,1be38 <__sfp+0x54>
   1be50:	88800017 	ldw	r2,0(r17)
   1be54:	10001926 	beq	r2,zero,1bebc <__sfp+0xd8>
   1be58:	1023883a 	mov	r17,r2
   1be5c:	003fee06 	br	1be18 <__sfp+0x34>
   1be60:	00ffffc4 	movi	r3,-1
   1be64:	10c0038d 	sth	r3,14(r2)
   1be68:	00c00044 	movi	r3,1
   1be6c:	10c0030d 	sth	r3,12(r2)
   1be70:	10000015 	stw	zero,0(r2)
   1be74:	10000215 	stw	zero,8(r2)
   1be78:	10000115 	stw	zero,4(r2)
   1be7c:	10000415 	stw	zero,16(r2)
   1be80:	10000515 	stw	zero,20(r2)
   1be84:	10000615 	stw	zero,24(r2)
   1be88:	10000c15 	stw	zero,48(r2)
   1be8c:	10000d15 	stw	zero,52(r2)
   1be90:	10001115 	stw	zero,68(r2)
   1be94:	10001215 	stw	zero,72(r2)
   1be98:	dfc00317 	ldw	ra,12(sp)
   1be9c:	dc800217 	ldw	r18,8(sp)
   1bea0:	dc400117 	ldw	r17,4(sp)
   1bea4:	dc000017 	ldw	r16,0(sp)
   1bea8:	dec00404 	addi	sp,sp,16
   1beac:	f800283a 	ret
   1beb0:	8809883a 	mov	r4,r17
   1beb4:	001bcd80 	call	1bcd8 <__sinit>
   1beb8:	003fd506 	br	1be10 <__sfp+0x2c>
   1bebc:	9009883a 	mov	r4,r18
   1bec0:	01400104 	movi	r5,4
   1bec4:	001bc640 	call	1bc64 <__sfmoreglue>
   1bec8:	88800015 	stw	r2,0(r17)
   1becc:	103fe21e 	bne	r2,zero,1be58 <__sfp+0x74>
   1bed0:	00800304 	movi	r2,12
   1bed4:	90800015 	stw	r2,0(r18)
   1bed8:	0005883a 	mov	r2,zero
   1bedc:	003fee06 	br	1be98 <__sfp+0xb4>

0001bee0 <__sfp_lock_acquire>:
   1bee0:	f800283a 	ret

0001bee4 <__sfp_lock_release>:
   1bee4:	f800283a 	ret

0001bee8 <__sinit_lock_acquire>:
   1bee8:	f800283a 	ret

0001beec <__sinit_lock_release>:
   1beec:	f800283a 	ret

0001bef0 <__fp_lock_all>:
   1bef0:	008000f4 	movhi	r2,3
   1bef4:	10933404 	addi	r2,r2,19664
   1bef8:	11000017 	ldw	r4,0(r2)
   1befc:	014000b4 	movhi	r5,2
   1bf00:	296f1204 	addi	r5,r5,-17336
   1bf04:	001c8101 	jmpi	1c810 <_fwalk>

0001bf08 <__fp_unlock_all>:
   1bf08:	008000f4 	movhi	r2,3
   1bf0c:	10933404 	addi	r2,r2,19664
   1bf10:	11000017 	ldw	r4,0(r2)
   1bf14:	014000b4 	movhi	r5,2
   1bf18:	296f1404 	addi	r5,r5,-17328
   1bf1c:	001c8101 	jmpi	1c810 <_fwalk>

0001bf20 <_malloc_trim_r>:
   1bf20:	defffb04 	addi	sp,sp,-20
   1bf24:	dcc00315 	stw	r19,12(sp)
   1bf28:	dc800215 	stw	r18,8(sp)
   1bf2c:	dc400115 	stw	r17,4(sp)
   1bf30:	dc000015 	stw	r16,0(sp)
   1bf34:	2827883a 	mov	r19,r5
   1bf38:	dfc00415 	stw	ra,16(sp)
   1bf3c:	044000f4 	movhi	r17,3
   1bf40:	8c4c5404 	addi	r17,r17,12624
   1bf44:	2021883a 	mov	r16,r4
   1bf48:	00218340 	call	21834 <__malloc_lock>
   1bf4c:	88800217 	ldw	r2,8(r17)
   1bf50:	14800117 	ldw	r18,4(r2)
   1bf54:	00bfff04 	movi	r2,-4
   1bf58:	90a4703a 	and	r18,r18,r2
   1bf5c:	9083fbc4 	addi	r2,r18,4079
   1bf60:	14e7c83a 	sub	r19,r2,r19
   1bf64:	9826d33a 	srli	r19,r19,12
   1bf68:	0083ffc4 	movi	r2,4095
   1bf6c:	9cffffc4 	addi	r19,r19,-1
   1bf70:	9826933a 	slli	r19,r19,12
   1bf74:	14c0060e 	bge	r2,r19,1bf90 <_malloc_trim_r+0x70>
   1bf78:	8009883a 	mov	r4,r16
   1bf7c:	000b883a 	mov	r5,zero
   1bf80:	001eba00 	call	1eba0 <_sbrk_r>
   1bf84:	88c00217 	ldw	r3,8(r17)
   1bf88:	1c87883a 	add	r3,r3,r18
   1bf8c:	10c00a26 	beq	r2,r3,1bfb8 <_malloc_trim_r+0x98>
   1bf90:	8009883a 	mov	r4,r16
   1bf94:	00218540 	call	21854 <__malloc_unlock>
   1bf98:	0005883a 	mov	r2,zero
   1bf9c:	dfc00417 	ldw	ra,16(sp)
   1bfa0:	dcc00317 	ldw	r19,12(sp)
   1bfa4:	dc800217 	ldw	r18,8(sp)
   1bfa8:	dc400117 	ldw	r17,4(sp)
   1bfac:	dc000017 	ldw	r16,0(sp)
   1bfb0:	dec00504 	addi	sp,sp,20
   1bfb4:	f800283a 	ret
   1bfb8:	8009883a 	mov	r4,r16
   1bfbc:	04cbc83a 	sub	r5,zero,r19
   1bfc0:	001eba00 	call	1eba0 <_sbrk_r>
   1bfc4:	00ffffc4 	movi	r3,-1
   1bfc8:	10c01326 	beq	r2,r3,1c018 <_malloc_trim_r+0xf8>
   1bfcc:	00800134 	movhi	r2,4
   1bfd0:	10913704 	addi	r2,r2,17628
   1bfd4:	11000017 	ldw	r4,0(r2)
   1bfd8:	88c00217 	ldw	r3,8(r17)
   1bfdc:	94e5c83a 	sub	r18,r18,r19
   1bfe0:	94800054 	ori	r18,r18,1
   1bfe4:	24e7c83a 	sub	r19,r4,r19
   1bfe8:	1c800115 	stw	r18,4(r3)
   1bfec:	8009883a 	mov	r4,r16
   1bff0:	14c00015 	stw	r19,0(r2)
   1bff4:	00218540 	call	21854 <__malloc_unlock>
   1bff8:	00800044 	movi	r2,1
   1bffc:	dfc00417 	ldw	ra,16(sp)
   1c000:	dcc00317 	ldw	r19,12(sp)
   1c004:	dc800217 	ldw	r18,8(sp)
   1c008:	dc400117 	ldw	r17,4(sp)
   1c00c:	dc000017 	ldw	r16,0(sp)
   1c010:	dec00504 	addi	sp,sp,20
   1c014:	f800283a 	ret
   1c018:	8009883a 	mov	r4,r16
   1c01c:	000b883a 	mov	r5,zero
   1c020:	001eba00 	call	1eba0 <_sbrk_r>
   1c024:	88c00217 	ldw	r3,8(r17)
   1c028:	014003c4 	movi	r5,15
   1c02c:	10c9c83a 	sub	r4,r2,r3
   1c030:	293fd70e 	bge	r5,r4,1bf90 <_malloc_trim_r+0x70>
   1c034:	014000f4 	movhi	r5,3
   1c038:	29533604 	addi	r5,r5,19672
   1c03c:	29400017 	ldw	r5,0(r5)
   1c040:	21000054 	ori	r4,r4,1
   1c044:	19000115 	stw	r4,4(r3)
   1c048:	1145c83a 	sub	r2,r2,r5
   1c04c:	01400134 	movhi	r5,4
   1c050:	29513704 	addi	r5,r5,17628
   1c054:	28800015 	stw	r2,0(r5)
   1c058:	003fcd06 	br	1bf90 <_malloc_trim_r+0x70>

0001c05c <_free_r>:
   1c05c:	defffd04 	addi	sp,sp,-12
   1c060:	dc400115 	stw	r17,4(sp)
   1c064:	dc000015 	stw	r16,0(sp)
   1c068:	dfc00215 	stw	ra,8(sp)
   1c06c:	2821883a 	mov	r16,r5
   1c070:	2023883a 	mov	r17,r4
   1c074:	28004b26 	beq	r5,zero,1c1a4 <_free_r+0x148>
   1c078:	00218340 	call	21834 <__malloc_lock>
   1c07c:	823fff17 	ldw	r8,-4(r16)
   1c080:	00bfff84 	movi	r2,-2
   1c084:	81bffe04 	addi	r6,r16,-8
   1c088:	4084703a 	and	r2,r8,r2
   1c08c:	3087883a 	add	r3,r6,r2
   1c090:	014000f4 	movhi	r5,3
   1c094:	294c5404 	addi	r5,r5,12624
   1c098:	1a400117 	ldw	r9,4(r3)
   1c09c:	29000217 	ldw	r4,8(r5)
   1c0a0:	01ffff04 	movi	r7,-4
   1c0a4:	49ce703a 	and	r7,r9,r7
   1c0a8:	20c06526 	beq	r4,r3,1c240 <_free_r+0x1e4>
   1c0ac:	19c00115 	stw	r7,4(r3)
   1c0b0:	4200004c 	andi	r8,r8,1
   1c0b4:	40003026 	beq	r8,zero,1c178 <_free_r+0x11c>
   1c0b8:	0009883a 	mov	r4,zero
   1c0bc:	19d1883a 	add	r8,r3,r7
   1c0c0:	42000117 	ldw	r8,4(r8)
   1c0c4:	4200004c 	andi	r8,r8,1
   1c0c8:	4000061e 	bne	r8,zero,1c0e4 <_free_r+0x88>
   1c0cc:	11c5883a 	add	r2,r2,r7
   1c0d0:	19c00217 	ldw	r7,8(r3)
   1c0d4:	20004e26 	beq	r4,zero,1c210 <_free_r+0x1b4>
   1c0d8:	18c00317 	ldw	r3,12(r3)
   1c0dc:	38c00315 	stw	r3,12(r7)
   1c0e0:	19c00215 	stw	r7,8(r3)
   1c0e4:	11c00054 	ori	r7,r2,1
   1c0e8:	3087883a 	add	r3,r6,r2
   1c0ec:	31c00115 	stw	r7,4(r6)
   1c0f0:	18800015 	stw	r2,0(r3)
   1c0f4:	20001a1e 	bne	r4,zero,1c160 <_free_r+0x104>
   1c0f8:	00c07fc4 	movi	r3,511
   1c0fc:	18802e2e 	bgeu	r3,r2,1c1b8 <_free_r+0x15c>
   1c100:	1006d27a 	srli	r3,r2,9
   1c104:	01000104 	movi	r4,4
   1c108:	20c06636 	bltu	r4,r3,1c2a4 <_free_r+0x248>
   1c10c:	1008d1ba 	srli	r4,r2,6
   1c110:	21000e04 	addi	r4,r4,56
   1c114:	210f883a 	add	r7,r4,r4
   1c118:	39cf883a 	add	r7,r7,r7
   1c11c:	39cf883a 	add	r7,r7,r7
   1c120:	29cf883a 	add	r7,r5,r7
   1c124:	38c00217 	ldw	r3,8(r7)
   1c128:	014000f4 	movhi	r5,3
   1c12c:	294c5404 	addi	r5,r5,12624
   1c130:	19c06126 	beq	r3,r7,1c2b8 <_free_r+0x25c>
   1c134:	013fff04 	movi	r4,-4
   1c138:	19400117 	ldw	r5,4(r3)
   1c13c:	290a703a 	and	r5,r5,r4
   1c140:	1140022e 	bgeu	r2,r5,1c14c <_free_r+0xf0>
   1c144:	18c00217 	ldw	r3,8(r3)
   1c148:	38fffb1e 	bne	r7,r3,1c138 <_free_r+0xdc>
   1c14c:	18800317 	ldw	r2,12(r3)
   1c150:	30800315 	stw	r2,12(r6)
   1c154:	30c00215 	stw	r3,8(r6)
   1c158:	11800215 	stw	r6,8(r2)
   1c15c:	19800315 	stw	r6,12(r3)
   1c160:	8809883a 	mov	r4,r17
   1c164:	dfc00217 	ldw	ra,8(sp)
   1c168:	dc400117 	ldw	r17,4(sp)
   1c16c:	dc000017 	ldw	r16,0(sp)
   1c170:	dec00304 	addi	sp,sp,12
   1c174:	00218541 	jmpi	21854 <__malloc_unlock>
   1c178:	813ffe17 	ldw	r4,-8(r16)
   1c17c:	2a400204 	addi	r9,r5,8
   1c180:	310dc83a 	sub	r6,r6,r4
   1c184:	32000217 	ldw	r8,8(r6)
   1c188:	1105883a 	add	r2,r2,r4
   1c18c:	42404326 	beq	r8,r9,1c29c <_free_r+0x240>
   1c190:	32400317 	ldw	r9,12(r6)
   1c194:	0009883a 	mov	r4,zero
   1c198:	42400315 	stw	r9,12(r8)
   1c19c:	4a000215 	stw	r8,8(r9)
   1c1a0:	003fc606 	br	1c0bc <_free_r+0x60>
   1c1a4:	dfc00217 	ldw	ra,8(sp)
   1c1a8:	dc400117 	ldw	r17,4(sp)
   1c1ac:	dc000017 	ldw	r16,0(sp)
   1c1b0:	dec00304 	addi	sp,sp,12
   1c1b4:	f800283a 	ret
   1c1b8:	1004d0fa 	srli	r2,r2,3
   1c1bc:	02000044 	movi	r8,1
   1c1c0:	29c00117 	ldw	r7,4(r5)
   1c1c4:	1087883a 	add	r3,r2,r2
   1c1c8:	18c7883a 	add	r3,r3,r3
   1c1cc:	1005d0ba 	srai	r2,r2,2
   1c1d0:	18c7883a 	add	r3,r3,r3
   1c1d4:	28c7883a 	add	r3,r5,r3
   1c1d8:	19000217 	ldw	r4,8(r3)
   1c1dc:	4084983a 	sll	r2,r8,r2
   1c1e0:	30c00315 	stw	r3,12(r6)
   1c1e4:	31000215 	stw	r4,8(r6)
   1c1e8:	11c4b03a 	or	r2,r2,r7
   1c1ec:	21800315 	stw	r6,12(r4)
   1c1f0:	8809883a 	mov	r4,r17
   1c1f4:	28800115 	stw	r2,4(r5)
   1c1f8:	19800215 	stw	r6,8(r3)
   1c1fc:	dfc00217 	ldw	ra,8(sp)
   1c200:	dc400117 	ldw	r17,4(sp)
   1c204:	dc000017 	ldw	r16,0(sp)
   1c208:	dec00304 	addi	sp,sp,12
   1c20c:	00218541 	jmpi	21854 <__malloc_unlock>
   1c210:	020000f4 	movhi	r8,3
   1c214:	420c5604 	addi	r8,r8,12632
   1c218:	3a3faf1e 	bne	r7,r8,1c0d8 <_free_r+0x7c>
   1c21c:	29800515 	stw	r6,20(r5)
   1c220:	29800415 	stw	r6,16(r5)
   1c224:	11000054 	ori	r4,r2,1
   1c228:	3087883a 	add	r3,r6,r2
   1c22c:	31c00315 	stw	r7,12(r6)
   1c230:	31c00215 	stw	r7,8(r6)
   1c234:	31000115 	stw	r4,4(r6)
   1c238:	18800015 	stw	r2,0(r3)
   1c23c:	003fc806 	br	1c160 <_free_r+0x104>
   1c240:	4200004c 	andi	r8,r8,1
   1c244:	3885883a 	add	r2,r7,r2
   1c248:	4000071e 	bne	r8,zero,1c268 <_free_r+0x20c>
   1c24c:	81fffe17 	ldw	r7,-8(r16)
   1c250:	31cdc83a 	sub	r6,r6,r7
   1c254:	30c00317 	ldw	r3,12(r6)
   1c258:	31000217 	ldw	r4,8(r6)
   1c25c:	11c5883a 	add	r2,r2,r7
   1c260:	20c00315 	stw	r3,12(r4)
   1c264:	19000215 	stw	r4,8(r3)
   1c268:	00c000f4 	movhi	r3,3
   1c26c:	18d33704 	addi	r3,r3,19676
   1c270:	18c00017 	ldw	r3,0(r3)
   1c274:	11000054 	ori	r4,r2,1
   1c278:	31000115 	stw	r4,4(r6)
   1c27c:	29800215 	stw	r6,8(r5)
   1c280:	10ffb736 	bltu	r2,r3,1c160 <_free_r+0x104>
   1c284:	008000f4 	movhi	r2,3
   1c288:	109bf904 	addi	r2,r2,28644
   1c28c:	11400017 	ldw	r5,0(r2)
   1c290:	8809883a 	mov	r4,r17
   1c294:	001bf200 	call	1bf20 <_malloc_trim_r>
   1c298:	003fb106 	br	1c160 <_free_r+0x104>
   1c29c:	01000044 	movi	r4,1
   1c2a0:	003f8606 	br	1c0bc <_free_r+0x60>
   1c2a4:	01000504 	movi	r4,20
   1c2a8:	20c00b36 	bltu	r4,r3,1c2d8 <_free_r+0x27c>
   1c2ac:	190016c4 	addi	r4,r3,91
   1c2b0:	210f883a 	add	r7,r4,r4
   1c2b4:	003f9806 	br	1c118 <_free_r+0xbc>
   1c2b8:	2009d0ba 	srai	r4,r4,2
   1c2bc:	00800044 	movi	r2,1
   1c2c0:	29c00117 	ldw	r7,4(r5)
   1c2c4:	1108983a 	sll	r4,r2,r4
   1c2c8:	1805883a 	mov	r2,r3
   1c2cc:	21c8b03a 	or	r4,r4,r7
   1c2d0:	29000115 	stw	r4,4(r5)
   1c2d4:	003f9e06 	br	1c150 <_free_r+0xf4>
   1c2d8:	01001504 	movi	r4,84
   1c2dc:	20c00436 	bltu	r4,r3,1c2f0 <_free_r+0x294>
   1c2e0:	1008d33a 	srli	r4,r2,12
   1c2e4:	21001b84 	addi	r4,r4,110
   1c2e8:	210f883a 	add	r7,r4,r4
   1c2ec:	003f8a06 	br	1c118 <_free_r+0xbc>
   1c2f0:	01005504 	movi	r4,340
   1c2f4:	20c00436 	bltu	r4,r3,1c308 <_free_r+0x2ac>
   1c2f8:	1008d3fa 	srli	r4,r2,15
   1c2fc:	21001dc4 	addi	r4,r4,119
   1c300:	210f883a 	add	r7,r4,r4
   1c304:	003f8406 	br	1c118 <_free_r+0xbc>
   1c308:	01015504 	movi	r4,1364
   1c30c:	20c00436 	bltu	r4,r3,1c320 <_free_r+0x2c4>
   1c310:	1008d4ba 	srli	r4,r2,18
   1c314:	21001f04 	addi	r4,r4,124
   1c318:	210f883a 	add	r7,r4,r4
   1c31c:	003f7e06 	br	1c118 <_free_r+0xbc>
   1c320:	01c03f04 	movi	r7,252
   1c324:	01001f84 	movi	r4,126
   1c328:	003f7b06 	br	1c118 <_free_r+0xbc>

0001c32c <__sfvwrite_r>:
   1c32c:	30800217 	ldw	r2,8(r6)
   1c330:	defff504 	addi	sp,sp,-44
   1c334:	dd400615 	stw	r21,24(sp)
   1c338:	dd000515 	stw	r20,20(sp)
   1c33c:	dc000115 	stw	r16,4(sp)
   1c340:	dfc00a15 	stw	ra,40(sp)
   1c344:	df000915 	stw	fp,36(sp)
   1c348:	ddc00815 	stw	r23,32(sp)
   1c34c:	dd800715 	stw	r22,28(sp)
   1c350:	dcc00415 	stw	r19,16(sp)
   1c354:	dc800315 	stw	r18,12(sp)
   1c358:	dc400215 	stw	r17,8(sp)
   1c35c:	3029883a 	mov	r20,r6
   1c360:	202b883a 	mov	r21,r4
   1c364:	2821883a 	mov	r16,r5
   1c368:	10002126 	beq	r2,zero,1c3f0 <__sfvwrite_r+0xc4>
   1c36c:	2880030b 	ldhu	r2,12(r5)
   1c370:	10c0020c 	andi	r3,r2,8
   1c374:	18ffffcc 	andi	r3,r3,65535
   1c378:	18e0001c 	xori	r3,r3,32768
   1c37c:	18e00004 	addi	r3,r3,-32768
   1c380:	18002826 	beq	r3,zero,1c424 <__sfvwrite_r+0xf8>
   1c384:	28c00417 	ldw	r3,16(r5)
   1c388:	18002626 	beq	r3,zero,1c424 <__sfvwrite_r+0xf8>
   1c38c:	10c0008c 	andi	r3,r2,2
   1c390:	18ffffcc 	andi	r3,r3,65535
   1c394:	18e0001c 	xori	r3,r3,32768
   1c398:	18e00004 	addi	r3,r3,-32768
   1c39c:	a4400017 	ldw	r17,0(r20)
   1c3a0:	18002b26 	beq	r3,zero,1c450 <__sfvwrite_r+0x124>
   1c3a4:	0027883a 	mov	r19,zero
   1c3a8:	0025883a 	mov	r18,zero
   1c3ac:	05810004 	movi	r22,1024
   1c3b0:	980d883a 	mov	r6,r19
   1c3b4:	a809883a 	mov	r4,r21
   1c3b8:	90004f26 	beq	r18,zero,1c4f8 <__sfvwrite_r+0x1cc>
   1c3bc:	900f883a 	mov	r7,r18
   1c3c0:	81400717 	ldw	r5,28(r16)
   1c3c4:	b480012e 	bgeu	r22,r18,1c3cc <__sfvwrite_r+0xa0>
   1c3c8:	01c10004 	movi	r7,1024
   1c3cc:	80800917 	ldw	r2,36(r16)
   1c3d0:	103ee83a 	callr	r2
   1c3d4:	0080540e 	bge	zero,r2,1c528 <__sfvwrite_r+0x1fc>
   1c3d8:	a0c00217 	ldw	r3,8(r20)
   1c3dc:	98a7883a 	add	r19,r19,r2
   1c3e0:	90a5c83a 	sub	r18,r18,r2
   1c3e4:	1885c83a 	sub	r2,r3,r2
   1c3e8:	a0800215 	stw	r2,8(r20)
   1c3ec:	103ff01e 	bne	r2,zero,1c3b0 <__sfvwrite_r+0x84>
   1c3f0:	0005883a 	mov	r2,zero
   1c3f4:	dfc00a17 	ldw	ra,40(sp)
   1c3f8:	df000917 	ldw	fp,36(sp)
   1c3fc:	ddc00817 	ldw	r23,32(sp)
   1c400:	dd800717 	ldw	r22,28(sp)
   1c404:	dd400617 	ldw	r21,24(sp)
   1c408:	dd000517 	ldw	r20,20(sp)
   1c40c:	dcc00417 	ldw	r19,16(sp)
   1c410:	dc800317 	ldw	r18,12(sp)
   1c414:	dc400217 	ldw	r17,8(sp)
   1c418:	dc000117 	ldw	r16,4(sp)
   1c41c:	dec00b04 	addi	sp,sp,44
   1c420:	f800283a 	ret
   1c424:	a809883a 	mov	r4,r21
   1c428:	800b883a 	mov	r5,r16
   1c42c:	001a0980 	call	1a098 <__swsetup_r>
   1c430:	1000f01e 	bne	r2,zero,1c7f4 <__sfvwrite_r+0x4c8>
   1c434:	8080030b 	ldhu	r2,12(r16)
   1c438:	a4400017 	ldw	r17,0(r20)
   1c43c:	10c0008c 	andi	r3,r2,2
   1c440:	18ffffcc 	andi	r3,r3,65535
   1c444:	18e0001c 	xori	r3,r3,32768
   1c448:	18e00004 	addi	r3,r3,-32768
   1c44c:	183fd51e 	bne	r3,zero,1c3a4 <__sfvwrite_r+0x78>
   1c450:	10c0004c 	andi	r3,r2,1
   1c454:	002d883a 	mov	r22,zero
   1c458:	1800381e 	bne	r3,zero,1c53c <__sfvwrite_r+0x210>
   1c45c:	0025883a 	mov	r18,zero
   1c460:	90002126 	beq	r18,zero,1c4e8 <__sfvwrite_r+0x1bc>
   1c464:	10c0800c 	andi	r3,r2,512
   1c468:	18ffffcc 	andi	r3,r3,65535
   1c46c:	18e0001c 	xori	r3,r3,32768
   1c470:	18e00004 	addi	r3,r3,-32768
   1c474:	84c00217 	ldw	r19,8(r16)
   1c478:	18006b26 	beq	r3,zero,1c628 <__sfvwrite_r+0x2fc>
   1c47c:	980f883a 	mov	r7,r19
   1c480:	94c08636 	bltu	r18,r19,1c69c <__sfvwrite_r+0x370>
   1c484:	10c1200c 	andi	r3,r2,1152
   1c488:	18009f1e 	bne	r3,zero,1c708 <__sfvwrite_r+0x3dc>
   1c48c:	81000017 	ldw	r4,0(r16)
   1c490:	982f883a 	mov	r23,r19
   1c494:	9039883a 	mov	fp,r18
   1c498:	9027883a 	mov	r19,r18
   1c49c:	380d883a 	mov	r6,r7
   1c4a0:	b00b883a 	mov	r5,r22
   1c4a4:	d9c00015 	stw	r7,0(sp)
   1c4a8:	001d4700 	call	1d470 <memmove>
   1c4ac:	d9c00017 	ldw	r7,0(sp)
   1c4b0:	81000217 	ldw	r4,8(r16)
   1c4b4:	80800017 	ldw	r2,0(r16)
   1c4b8:	25efc83a 	sub	r23,r4,r23
   1c4bc:	11cf883a 	add	r7,r2,r7
   1c4c0:	85c00215 	stw	r23,8(r16)
   1c4c4:	81c00015 	stw	r7,0(r16)
   1c4c8:	a0800217 	ldw	r2,8(r20)
   1c4cc:	b72d883a 	add	r22,r22,fp
   1c4d0:	9725c83a 	sub	r18,r18,fp
   1c4d4:	14e7c83a 	sub	r19,r2,r19
   1c4d8:	a4c00215 	stw	r19,8(r20)
   1c4dc:	983fc426 	beq	r19,zero,1c3f0 <__sfvwrite_r+0xc4>
   1c4e0:	8080030b 	ldhu	r2,12(r16)
   1c4e4:	903fdf1e 	bne	r18,zero,1c464 <__sfvwrite_r+0x138>
   1c4e8:	8d800017 	ldw	r22,0(r17)
   1c4ec:	8c800117 	ldw	r18,4(r17)
   1c4f0:	8c400204 	addi	r17,r17,8
   1c4f4:	003fda06 	br	1c460 <__sfvwrite_r+0x134>
   1c4f8:	8cc00017 	ldw	r19,0(r17)
   1c4fc:	8c800117 	ldw	r18,4(r17)
   1c500:	8c400204 	addi	r17,r17,8
   1c504:	003faa06 	br	1c3b0 <__sfvwrite_r+0x84>
   1c508:	001e5400 	call	1e540 <_realloc_r>
   1c50c:	102f883a 	mov	r23,r2
   1c510:	10009f1e 	bne	r2,zero,1c790 <__sfvwrite_r+0x464>
   1c514:	81400417 	ldw	r5,16(r16)
   1c518:	a809883a 	mov	r4,r21
   1c51c:	001c05c0 	call	1c05c <_free_r>
   1c520:	00800304 	movi	r2,12
   1c524:	a8800015 	stw	r2,0(r21)
   1c528:	80c0030b 	ldhu	r3,12(r16)
   1c52c:	00bfffc4 	movi	r2,-1
   1c530:	18c01014 	ori	r3,r3,64
   1c534:	80c0030d 	sth	r3,12(r16)
   1c538:	003fae06 	br	1c3f4 <__sfvwrite_r+0xc8>
   1c53c:	0007883a 	mov	r3,zero
   1c540:	0039883a 	mov	fp,zero
   1c544:	0025883a 	mov	r18,zero
   1c548:	90001e26 	beq	r18,zero,1c5c4 <__sfvwrite_r+0x298>
   1c54c:	18006526 	beq	r3,zero,1c6e4 <__sfvwrite_r+0x3b8>
   1c550:	b02f883a 	mov	r23,r22
   1c554:	9580012e 	bgeu	r18,r22,1c55c <__sfvwrite_r+0x230>
   1c558:	902f883a 	mov	r23,r18
   1c55c:	81000017 	ldw	r4,0(r16)
   1c560:	80800417 	ldw	r2,16(r16)
   1c564:	84c00217 	ldw	r19,8(r16)
   1c568:	81c00517 	ldw	r7,20(r16)
   1c56c:	1100022e 	bgeu	r2,r4,1c578 <__sfvwrite_r+0x24c>
   1c570:	99e7883a 	add	r19,r19,r7
   1c574:	9dc01816 	blt	r19,r23,1c5d8 <__sfvwrite_r+0x2ac>
   1c578:	b9c03b16 	blt	r23,r7,1c668 <__sfvwrite_r+0x33c>
   1c57c:	80800917 	ldw	r2,36(r16)
   1c580:	81400717 	ldw	r5,28(r16)
   1c584:	a809883a 	mov	r4,r21
   1c588:	d8c00015 	stw	r3,0(sp)
   1c58c:	e00d883a 	mov	r6,fp
   1c590:	103ee83a 	callr	r2
   1c594:	1027883a 	mov	r19,r2
   1c598:	d8c00017 	ldw	r3,0(sp)
   1c59c:	00bfe20e 	bge	zero,r2,1c528 <__sfvwrite_r+0x1fc>
   1c5a0:	b4edc83a 	sub	r22,r22,r19
   1c5a4:	b0001a26 	beq	r22,zero,1c610 <__sfvwrite_r+0x2e4>
   1c5a8:	a0800217 	ldw	r2,8(r20)
   1c5ac:	e4f9883a 	add	fp,fp,r19
   1c5b0:	94e5c83a 	sub	r18,r18,r19
   1c5b4:	14e7c83a 	sub	r19,r2,r19
   1c5b8:	a4c00215 	stw	r19,8(r20)
   1c5bc:	983f8c26 	beq	r19,zero,1c3f0 <__sfvwrite_r+0xc4>
   1c5c0:	903fe21e 	bne	r18,zero,1c54c <__sfvwrite_r+0x220>
   1c5c4:	8f000017 	ldw	fp,0(r17)
   1c5c8:	8c800117 	ldw	r18,4(r17)
   1c5cc:	0007883a 	mov	r3,zero
   1c5d0:	8c400204 	addi	r17,r17,8
   1c5d4:	003fdc06 	br	1c548 <__sfvwrite_r+0x21c>
   1c5d8:	e00b883a 	mov	r5,fp
   1c5dc:	980d883a 	mov	r6,r19
   1c5e0:	d8c00015 	stw	r3,0(sp)
   1c5e4:	001d4700 	call	1d470 <memmove>
   1c5e8:	80800017 	ldw	r2,0(r16)
   1c5ec:	a809883a 	mov	r4,r21
   1c5f0:	800b883a 	mov	r5,r16
   1c5f4:	14c5883a 	add	r2,r2,r19
   1c5f8:	80800015 	stw	r2,0(r16)
   1c5fc:	001ba300 	call	1ba30 <_fflush_r>
   1c600:	d8c00017 	ldw	r3,0(sp)
   1c604:	103fc81e 	bne	r2,zero,1c528 <__sfvwrite_r+0x1fc>
   1c608:	b4edc83a 	sub	r22,r22,r19
   1c60c:	b03fe61e 	bne	r22,zero,1c5a8 <__sfvwrite_r+0x27c>
   1c610:	a809883a 	mov	r4,r21
   1c614:	800b883a 	mov	r5,r16
   1c618:	001ba300 	call	1ba30 <_fflush_r>
   1c61c:	103fc21e 	bne	r2,zero,1c528 <__sfvwrite_r+0x1fc>
   1c620:	0007883a 	mov	r3,zero
   1c624:	003fe006 	br	1c5a8 <__sfvwrite_r+0x27c>
   1c628:	81000017 	ldw	r4,0(r16)
   1c62c:	80800417 	ldw	r2,16(r16)
   1c630:	1100022e 	bgeu	r2,r4,1c63c <__sfvwrite_r+0x310>
   1c634:	9839883a 	mov	fp,r19
   1c638:	9c806036 	bltu	r19,r18,1c7bc <__sfvwrite_r+0x490>
   1c63c:	81c00517 	ldw	r7,20(r16)
   1c640:	91c01c36 	bltu	r18,r7,1c6b4 <__sfvwrite_r+0x388>
   1c644:	80800917 	ldw	r2,36(r16)
   1c648:	81400717 	ldw	r5,28(r16)
   1c64c:	a809883a 	mov	r4,r21
   1c650:	b00d883a 	mov	r6,r22
   1c654:	103ee83a 	callr	r2
   1c658:	1027883a 	mov	r19,r2
   1c65c:	00bfb20e 	bge	zero,r2,1c528 <__sfvwrite_r+0x1fc>
   1c660:	1039883a 	mov	fp,r2
   1c664:	003f9806 	br	1c4c8 <__sfvwrite_r+0x19c>
   1c668:	b80d883a 	mov	r6,r23
   1c66c:	e00b883a 	mov	r5,fp
   1c670:	d8c00015 	stw	r3,0(sp)
   1c674:	001d4700 	call	1d470 <memmove>
   1c678:	80800217 	ldw	r2,8(r16)
   1c67c:	81000017 	ldw	r4,0(r16)
   1c680:	b827883a 	mov	r19,r23
   1c684:	15c5c83a 	sub	r2,r2,r23
   1c688:	25ef883a 	add	r23,r4,r23
   1c68c:	80800215 	stw	r2,8(r16)
   1c690:	85c00015 	stw	r23,0(r16)
   1c694:	d8c00017 	ldw	r3,0(sp)
   1c698:	003fc106 	br	1c5a0 <__sfvwrite_r+0x274>
   1c69c:	81000017 	ldw	r4,0(r16)
   1c6a0:	902f883a 	mov	r23,r18
   1c6a4:	9039883a 	mov	fp,r18
   1c6a8:	9027883a 	mov	r19,r18
   1c6ac:	900f883a 	mov	r7,r18
   1c6b0:	003f7a06 	br	1c49c <__sfvwrite_r+0x170>
   1c6b4:	b00b883a 	mov	r5,r22
   1c6b8:	900d883a 	mov	r6,r18
   1c6bc:	001d4700 	call	1d470 <memmove>
   1c6c0:	80c00217 	ldw	r3,8(r16)
   1c6c4:	80800017 	ldw	r2,0(r16)
   1c6c8:	9027883a 	mov	r19,r18
   1c6cc:	1c87c83a 	sub	r3,r3,r18
   1c6d0:	1485883a 	add	r2,r2,r18
   1c6d4:	80c00215 	stw	r3,8(r16)
   1c6d8:	80800015 	stw	r2,0(r16)
   1c6dc:	9039883a 	mov	fp,r18
   1c6e0:	003f7906 	br	1c4c8 <__sfvwrite_r+0x19c>
   1c6e4:	e009883a 	mov	r4,fp
   1c6e8:	01400284 	movi	r5,10
   1c6ec:	900d883a 	mov	r6,r18
   1c6f0:	001d3780 	call	1d378 <memchr>
   1c6f4:	10003c26 	beq	r2,zero,1c7e8 <__sfvwrite_r+0x4bc>
   1c6f8:	15800044 	addi	r22,r2,1
   1c6fc:	b72dc83a 	sub	r22,r22,fp
   1c700:	00c00044 	movi	r3,1
   1c704:	003f9206 	br	1c550 <__sfvwrite_r+0x224>
   1c708:	81000517 	ldw	r4,20(r16)
   1c70c:	81400417 	ldw	r5,16(r16)
   1c710:	80c00017 	ldw	r3,0(r16)
   1c714:	210d883a 	add	r6,r4,r4
   1c718:	3109883a 	add	r4,r6,r4
   1c71c:	2026d7fa 	srli	r19,r4,31
   1c720:	1979c83a 	sub	fp,r3,r5
   1c724:	e1800044 	addi	r6,fp,1
   1c728:	9909883a 	add	r4,r19,r4
   1c72c:	2027d07a 	srai	r19,r4,1
   1c730:	3489883a 	add	r4,r6,r18
   1c734:	980d883a 	mov	r6,r19
   1c738:	9900022e 	bgeu	r19,r4,1c744 <__sfvwrite_r+0x418>
   1c73c:	2027883a 	mov	r19,r4
   1c740:	200d883a 	mov	r6,r4
   1c744:	1081000c 	andi	r2,r2,1024
   1c748:	10bfffcc 	andi	r2,r2,65535
   1c74c:	10a0001c 	xori	r2,r2,32768
   1c750:	10a00004 	addi	r2,r2,-32768
   1c754:	a809883a 	mov	r4,r21
   1c758:	103f6b26 	beq	r2,zero,1c508 <__sfvwrite_r+0x1dc>
   1c75c:	300b883a 	mov	r5,r6
   1c760:	001cbf40 	call	1cbf4 <_malloc_r>
   1c764:	102f883a 	mov	r23,r2
   1c768:	103f6d26 	beq	r2,zero,1c520 <__sfvwrite_r+0x1f4>
   1c76c:	81400417 	ldw	r5,16(r16)
   1c770:	1009883a 	mov	r4,r2
   1c774:	e00d883a 	mov	r6,fp
   1c778:	0017a440 	call	17a44 <memcpy>
   1c77c:	8080030b 	ldhu	r2,12(r16)
   1c780:	00fedfc4 	movi	r3,-1153
   1c784:	10c4703a 	and	r2,r2,r3
   1c788:	10802014 	ori	r2,r2,128
   1c78c:	8080030d 	sth	r2,12(r16)
   1c790:	bf09883a 	add	r4,r23,fp
   1c794:	9f07c83a 	sub	r3,r19,fp
   1c798:	85c00415 	stw	r23,16(r16)
   1c79c:	84c00515 	stw	r19,20(r16)
   1c7a0:	81000015 	stw	r4,0(r16)
   1c7a4:	902f883a 	mov	r23,r18
   1c7a8:	80c00215 	stw	r3,8(r16)
   1c7ac:	9039883a 	mov	fp,r18
   1c7b0:	9027883a 	mov	r19,r18
   1c7b4:	900f883a 	mov	r7,r18
   1c7b8:	003f3806 	br	1c49c <__sfvwrite_r+0x170>
   1c7bc:	b00b883a 	mov	r5,r22
   1c7c0:	980d883a 	mov	r6,r19
   1c7c4:	001d4700 	call	1d470 <memmove>
   1c7c8:	80800017 	ldw	r2,0(r16)
   1c7cc:	a809883a 	mov	r4,r21
   1c7d0:	800b883a 	mov	r5,r16
   1c7d4:	14c5883a 	add	r2,r2,r19
   1c7d8:	80800015 	stw	r2,0(r16)
   1c7dc:	001ba300 	call	1ba30 <_fflush_r>
   1c7e0:	103f3926 	beq	r2,zero,1c4c8 <__sfvwrite_r+0x19c>
   1c7e4:	003f5006 	br	1c528 <__sfvwrite_r+0x1fc>
   1c7e8:	95800044 	addi	r22,r18,1
   1c7ec:	00c00044 	movi	r3,1
   1c7f0:	003f5706 	br	1c550 <__sfvwrite_r+0x224>
   1c7f4:	80c0030b 	ldhu	r3,12(r16)
   1c7f8:	00bfffc4 	movi	r2,-1
   1c7fc:	18c01014 	ori	r3,r3,64
   1c800:	80c0030d 	sth	r3,12(r16)
   1c804:	00c00244 	movi	r3,9
   1c808:	a8c00015 	stw	r3,0(r21)
   1c80c:	003ef906 	br	1c3f4 <__sfvwrite_r+0xc8>

0001c810 <_fwalk>:
   1c810:	defff904 	addi	sp,sp,-28
   1c814:	dcc00315 	stw	r19,12(sp)
   1c818:	24c0b804 	addi	r19,r4,736
   1c81c:	dd400515 	stw	r21,20(sp)
   1c820:	dd000415 	stw	r20,16(sp)
   1c824:	dfc00615 	stw	ra,24(sp)
   1c828:	dc800215 	stw	r18,8(sp)
   1c82c:	dc400115 	stw	r17,4(sp)
   1c830:	dc000015 	stw	r16,0(sp)
   1c834:	282b883a 	mov	r21,r5
   1c838:	0029883a 	mov	r20,zero
   1c83c:	001bee00 	call	1bee0 <__sfp_lock_acquire>
   1c840:	98001226 	beq	r19,zero,1c88c <_fwalk+0x7c>
   1c844:	04bfffc4 	movi	r18,-1
   1c848:	9c400117 	ldw	r17,4(r19)
   1c84c:	9c000217 	ldw	r16,8(r19)
   1c850:	8c7fffc4 	addi	r17,r17,-1
   1c854:	88000b16 	blt	r17,zero,1c884 <_fwalk+0x74>
   1c858:	84000304 	addi	r16,r16,12
   1c85c:	80c0000f 	ldh	r3,0(r16)
   1c860:	8c7fffc4 	addi	r17,r17,-1
   1c864:	813ffd04 	addi	r4,r16,-12
   1c868:	18000426 	beq	r3,zero,1c87c <_fwalk+0x6c>
   1c86c:	80c0008f 	ldh	r3,2(r16)
   1c870:	1c800226 	beq	r3,r18,1c87c <_fwalk+0x6c>
   1c874:	a83ee83a 	callr	r21
   1c878:	a0a8b03a 	or	r20,r20,r2
   1c87c:	84001704 	addi	r16,r16,92
   1c880:	8cbff61e 	bne	r17,r18,1c85c <_fwalk+0x4c>
   1c884:	9cc00017 	ldw	r19,0(r19)
   1c888:	983fef1e 	bne	r19,zero,1c848 <_fwalk+0x38>
   1c88c:	001bee40 	call	1bee4 <__sfp_lock_release>
   1c890:	a005883a 	mov	r2,r20
   1c894:	dfc00617 	ldw	ra,24(sp)
   1c898:	dd400517 	ldw	r21,20(sp)
   1c89c:	dd000417 	ldw	r20,16(sp)
   1c8a0:	dcc00317 	ldw	r19,12(sp)
   1c8a4:	dc800217 	ldw	r18,8(sp)
   1c8a8:	dc400117 	ldw	r17,4(sp)
   1c8ac:	dc000017 	ldw	r16,0(sp)
   1c8b0:	dec00704 	addi	sp,sp,28
   1c8b4:	f800283a 	ret

0001c8b8 <_fwalk_reent>:
   1c8b8:	defff804 	addi	sp,sp,-32
   1c8bc:	dcc00315 	stw	r19,12(sp)
   1c8c0:	24c0b804 	addi	r19,r4,736
   1c8c4:	dd800615 	stw	r22,24(sp)
   1c8c8:	dd400515 	stw	r21,20(sp)
   1c8cc:	dd000415 	stw	r20,16(sp)
   1c8d0:	dfc00715 	stw	ra,28(sp)
   1c8d4:	dc800215 	stw	r18,8(sp)
   1c8d8:	dc400115 	stw	r17,4(sp)
   1c8dc:	dc000015 	stw	r16,0(sp)
   1c8e0:	2029883a 	mov	r20,r4
   1c8e4:	282b883a 	mov	r21,r5
   1c8e8:	002d883a 	mov	r22,zero
   1c8ec:	001bee00 	call	1bee0 <__sfp_lock_acquire>
   1c8f0:	98001326 	beq	r19,zero,1c940 <_fwalk_reent+0x88>
   1c8f4:	04bfffc4 	movi	r18,-1
   1c8f8:	9c400117 	ldw	r17,4(r19)
   1c8fc:	9c000217 	ldw	r16,8(r19)
   1c900:	8c7fffc4 	addi	r17,r17,-1
   1c904:	88000c16 	blt	r17,zero,1c938 <_fwalk_reent+0x80>
   1c908:	84000304 	addi	r16,r16,12
   1c90c:	80c0000f 	ldh	r3,0(r16)
   1c910:	8c7fffc4 	addi	r17,r17,-1
   1c914:	817ffd04 	addi	r5,r16,-12
   1c918:	18000526 	beq	r3,zero,1c930 <_fwalk_reent+0x78>
   1c91c:	80c0008f 	ldh	r3,2(r16)
   1c920:	a009883a 	mov	r4,r20
   1c924:	1c800226 	beq	r3,r18,1c930 <_fwalk_reent+0x78>
   1c928:	a83ee83a 	callr	r21
   1c92c:	b0acb03a 	or	r22,r22,r2
   1c930:	84001704 	addi	r16,r16,92
   1c934:	8cbff51e 	bne	r17,r18,1c90c <_fwalk_reent+0x54>
   1c938:	9cc00017 	ldw	r19,0(r19)
   1c93c:	983fee1e 	bne	r19,zero,1c8f8 <_fwalk_reent+0x40>
   1c940:	001bee40 	call	1bee4 <__sfp_lock_release>
   1c944:	b005883a 	mov	r2,r22
   1c948:	dfc00717 	ldw	ra,28(sp)
   1c94c:	dd800617 	ldw	r22,24(sp)
   1c950:	dd400517 	ldw	r21,20(sp)
   1c954:	dd000417 	ldw	r20,16(sp)
   1c958:	dcc00317 	ldw	r19,12(sp)
   1c95c:	dc800217 	ldw	r18,8(sp)
   1c960:	dc400117 	ldw	r17,4(sp)
   1c964:	dc000017 	ldw	r16,0(sp)
   1c968:	dec00804 	addi	sp,sp,32
   1c96c:	f800283a 	ret

0001c970 <_setlocale_r>:
   1c970:	defffc04 	addi	sp,sp,-16
   1c974:	dc800215 	stw	r18,8(sp)
   1c978:	dc400115 	stw	r17,4(sp)
   1c97c:	dc000015 	stw	r16,0(sp)
   1c980:	dfc00315 	stw	ra,12(sp)
   1c984:	3021883a 	mov	r16,r6
   1c988:	2023883a 	mov	r17,r4
   1c98c:	2825883a 	mov	r18,r5
   1c990:	30001626 	beq	r6,zero,1c9ec <_setlocale_r+0x7c>
   1c994:	3009883a 	mov	r4,r6
   1c998:	014000f4 	movhi	r5,3
   1c99c:	29423e04 	addi	r5,r5,2296
   1c9a0:	0017ec40 	call	17ec4 <strcmp>
   1c9a4:	10000a1e 	bne	r2,zero,1c9d0 <_setlocale_r+0x60>
   1c9a8:	8c800c15 	stw	r18,48(r17)
   1c9ac:	8c000d15 	stw	r16,52(r17)
   1c9b0:	008000f4 	movhi	r2,3
   1c9b4:	10823e04 	addi	r2,r2,2296
   1c9b8:	dfc00317 	ldw	ra,12(sp)
   1c9bc:	dc800217 	ldw	r18,8(sp)
   1c9c0:	dc400117 	ldw	r17,4(sp)
   1c9c4:	dc000017 	ldw	r16,0(sp)
   1c9c8:	dec00404 	addi	sp,sp,16
   1c9cc:	f800283a 	ret
   1c9d0:	8009883a 	mov	r4,r16
   1c9d4:	014000f4 	movhi	r5,3
   1c9d8:	29424804 	addi	r5,r5,2336
   1c9dc:	0017ec40 	call	17ec4 <strcmp>
   1c9e0:	103ff126 	beq	r2,zero,1c9a8 <_setlocale_r+0x38>
   1c9e4:	0005883a 	mov	r2,zero
   1c9e8:	003ff306 	br	1c9b8 <_setlocale_r+0x48>
   1c9ec:	008000f4 	movhi	r2,3
   1c9f0:	10823e04 	addi	r2,r2,2296
   1c9f4:	dfc00317 	ldw	ra,12(sp)
   1c9f8:	dc800217 	ldw	r18,8(sp)
   1c9fc:	dc400117 	ldw	r17,4(sp)
   1ca00:	dc000017 	ldw	r16,0(sp)
   1ca04:	dec00404 	addi	sp,sp,16
   1ca08:	f800283a 	ret

0001ca0c <__locale_charset>:
   1ca0c:	008000f4 	movhi	r2,3
   1ca10:	10825d04 	addi	r2,r2,2420
   1ca14:	f800283a 	ret

0001ca18 <_localeconv_r>:
   1ca18:	008000f4 	movhi	r2,3
   1ca1c:	10826104 	addi	r2,r2,2436
   1ca20:	f800283a 	ret

0001ca24 <setlocale>:
   1ca24:	00c000f4 	movhi	r3,3
   1ca28:	18d33404 	addi	r3,r3,19664
   1ca2c:	2005883a 	mov	r2,r4
   1ca30:	19000017 	ldw	r4,0(r3)
   1ca34:	280d883a 	mov	r6,r5
   1ca38:	100b883a 	mov	r5,r2
   1ca3c:	001c9701 	jmpi	1c970 <_setlocale_r>

0001ca40 <localeconv>:
   1ca40:	008000f4 	movhi	r2,3
   1ca44:	10826104 	addi	r2,r2,2436
   1ca48:	f800283a 	ret

0001ca4c <__smakebuf_r>:
   1ca4c:	2880030b 	ldhu	r2,12(r5)
   1ca50:	deffed04 	addi	sp,sp,-76
   1ca54:	dc401015 	stw	r17,64(sp)
   1ca58:	10c0008c 	andi	r3,r2,2
   1ca5c:	18ffffcc 	andi	r3,r3,65535
   1ca60:	18e0001c 	xori	r3,r3,32768
   1ca64:	dc000f15 	stw	r16,60(sp)
   1ca68:	dfc01215 	stw	ra,72(sp)
   1ca6c:	dc801115 	stw	r18,68(sp)
   1ca70:	18e00004 	addi	r3,r3,-32768
   1ca74:	2821883a 	mov	r16,r5
   1ca78:	2023883a 	mov	r17,r4
   1ca7c:	1800381e 	bne	r3,zero,1cb60 <__smakebuf_r+0x114>
   1ca80:	2940038f 	ldh	r5,14(r5)
   1ca84:	28002d16 	blt	r5,zero,1cb3c <__smakebuf_r+0xf0>
   1ca88:	d80d883a 	mov	r6,sp
   1ca8c:	001f0200 	call	1f020 <_fstat_r>
   1ca90:	10002916 	blt	r2,zero,1cb38 <__smakebuf_r+0xec>
   1ca94:	d8800117 	ldw	r2,4(sp)
   1ca98:	00e00014 	movui	r3,32768
   1ca9c:	10bc000c 	andi	r2,r2,61440
   1caa0:	10c03c26 	beq	r2,r3,1cb94 <__smakebuf_r+0x148>
   1caa4:	80c0030b 	ldhu	r3,12(r16)
   1caa8:	18c20014 	ori	r3,r3,2048
   1caac:	80c0030d 	sth	r3,12(r16)
   1cab0:	00c80004 	movi	r3,8192
   1cab4:	10c00c1e 	bne	r2,r3,1cae8 <__smakebuf_r+0x9c>
   1cab8:	8140038f 	ldh	r5,14(r16)
   1cabc:	8809883a 	mov	r4,r17
   1cac0:	001f0880 	call	1f088 <_isatty_r>
   1cac4:	10000826 	beq	r2,zero,1cae8 <__smakebuf_r+0x9c>
   1cac8:	80c0030b 	ldhu	r3,12(r16)
   1cacc:	808010c4 	addi	r2,r16,67
   1cad0:	80800015 	stw	r2,0(r16)
   1cad4:	18c00054 	ori	r3,r3,1
   1cad8:	80800415 	stw	r2,16(r16)
   1cadc:	00800044 	movi	r2,1
   1cae0:	80c0030d 	sth	r3,12(r16)
   1cae4:	80800515 	stw	r2,20(r16)
   1cae8:	04810004 	movi	r18,1024
   1caec:	8809883a 	mov	r4,r17
   1caf0:	900b883a 	mov	r5,r18
   1caf4:	001cbf40 	call	1cbf4 <_malloc_r>
   1caf8:	10003026 	beq	r2,zero,1cbbc <__smakebuf_r+0x170>
   1cafc:	80c0030b 	ldhu	r3,12(r16)
   1cb00:	010000b4 	movhi	r4,2
   1cb04:	212f1604 	addi	r4,r4,-17320
   1cb08:	89000f15 	stw	r4,60(r17)
   1cb0c:	18c02014 	ori	r3,r3,128
   1cb10:	80c0030d 	sth	r3,12(r16)
   1cb14:	80800015 	stw	r2,0(r16)
   1cb18:	80800415 	stw	r2,16(r16)
   1cb1c:	84800515 	stw	r18,20(r16)
   1cb20:	dfc01217 	ldw	ra,72(sp)
   1cb24:	dc801117 	ldw	r18,68(sp)
   1cb28:	dc401017 	ldw	r17,64(sp)
   1cb2c:	dc000f17 	ldw	r16,60(sp)
   1cb30:	dec01304 	addi	sp,sp,76
   1cb34:	f800283a 	ret
   1cb38:	8080030b 	ldhu	r2,12(r16)
   1cb3c:	10c0200c 	andi	r3,r2,128
   1cb40:	18ffffcc 	andi	r3,r3,65535
   1cb44:	18e0001c 	xori	r3,r3,32768
   1cb48:	18e00004 	addi	r3,r3,-32768
   1cb4c:	18000f1e 	bne	r3,zero,1cb8c <__smakebuf_r+0x140>
   1cb50:	04810004 	movi	r18,1024
   1cb54:	10820014 	ori	r2,r2,2048
   1cb58:	8080030d 	sth	r2,12(r16)
   1cb5c:	003fe306 	br	1caec <__smakebuf_r+0xa0>
   1cb60:	288010c4 	addi	r2,r5,67
   1cb64:	28800015 	stw	r2,0(r5)
   1cb68:	28800415 	stw	r2,16(r5)
   1cb6c:	00800044 	movi	r2,1
   1cb70:	28800515 	stw	r2,20(r5)
   1cb74:	dfc01217 	ldw	ra,72(sp)
   1cb78:	dc801117 	ldw	r18,68(sp)
   1cb7c:	dc401017 	ldw	r17,64(sp)
   1cb80:	dc000f17 	ldw	r16,60(sp)
   1cb84:	dec01304 	addi	sp,sp,76
   1cb88:	f800283a 	ret
   1cb8c:	04801004 	movi	r18,64
   1cb90:	003ff006 	br	1cb54 <__smakebuf_r+0x108>
   1cb94:	81000a17 	ldw	r4,40(r16)
   1cb98:	00c000b4 	movhi	r3,2
   1cb9c:	18fb3804 	addi	r3,r3,-4896
   1cba0:	20ffc01e 	bne	r4,r3,1caa4 <__smakebuf_r+0x58>
   1cba4:	8080030b 	ldhu	r2,12(r16)
   1cba8:	00c10004 	movi	r3,1024
   1cbac:	80c01315 	stw	r3,76(r16)
   1cbb0:	10c4b03a 	or	r2,r2,r3
   1cbb4:	8080030d 	sth	r2,12(r16)
   1cbb8:	003fcb06 	br	1cae8 <__smakebuf_r+0x9c>
   1cbbc:	8080030b 	ldhu	r2,12(r16)
   1cbc0:	10c0800c 	andi	r3,r2,512
   1cbc4:	18ffffcc 	andi	r3,r3,65535
   1cbc8:	18e0001c 	xori	r3,r3,32768
   1cbcc:	18e00004 	addi	r3,r3,-32768
   1cbd0:	183fd31e 	bne	r3,zero,1cb20 <__smakebuf_r+0xd4>
   1cbd4:	10800094 	ori	r2,r2,2
   1cbd8:	80c010c4 	addi	r3,r16,67
   1cbdc:	8080030d 	sth	r2,12(r16)
   1cbe0:	00800044 	movi	r2,1
   1cbe4:	80c00015 	stw	r3,0(r16)
   1cbe8:	80c00415 	stw	r3,16(r16)
   1cbec:	80800515 	stw	r2,20(r16)
   1cbf0:	003fcb06 	br	1cb20 <__smakebuf_r+0xd4>

0001cbf4 <_malloc_r>:
   1cbf4:	defff604 	addi	sp,sp,-40
   1cbf8:	dc800215 	stw	r18,8(sp)
   1cbfc:	dfc00915 	stw	ra,36(sp)
   1cc00:	df000815 	stw	fp,32(sp)
   1cc04:	ddc00715 	stw	r23,28(sp)
   1cc08:	dd800615 	stw	r22,24(sp)
   1cc0c:	dd400515 	stw	r21,20(sp)
   1cc10:	dd000415 	stw	r20,16(sp)
   1cc14:	dcc00315 	stw	r19,12(sp)
   1cc18:	dc400115 	stw	r17,4(sp)
   1cc1c:	dc000015 	stw	r16,0(sp)
   1cc20:	288002c4 	addi	r2,r5,11
   1cc24:	00c00584 	movi	r3,22
   1cc28:	2025883a 	mov	r18,r4
   1cc2c:	18802b2e 	bgeu	r3,r2,1ccdc <_malloc_r+0xe8>
   1cc30:	047ffe04 	movi	r17,-8
   1cc34:	1462703a 	and	r17,r2,r17
   1cc38:	88002a16 	blt	r17,zero,1cce4 <_malloc_r+0xf0>
   1cc3c:	89402936 	bltu	r17,r5,1cce4 <_malloc_r+0xf0>
   1cc40:	9009883a 	mov	r4,r18
   1cc44:	00218340 	call	21834 <__malloc_lock>
   1cc48:	00807dc4 	movi	r2,503
   1cc4c:	14402936 	bltu	r2,r17,1ccf4 <_malloc_r+0x100>
   1cc50:	8808d0fa 	srli	r4,r17,3
   1cc54:	04c000f4 	movhi	r19,3
   1cc58:	9ccc5404 	addi	r19,r19,12624
   1cc5c:	2105883a 	add	r2,r4,r4
   1cc60:	1085883a 	add	r2,r2,r2
   1cc64:	1085883a 	add	r2,r2,r2
   1cc68:	9885883a 	add	r2,r19,r2
   1cc6c:	14000317 	ldw	r16,12(r2)
   1cc70:	80815526 	beq	r16,r2,1d1c8 <_malloc_r+0x5d4>
   1cc74:	81000117 	ldw	r4,4(r16)
   1cc78:	00bfff04 	movi	r2,-4
   1cc7c:	80c00317 	ldw	r3,12(r16)
   1cc80:	2084703a 	and	r2,r4,r2
   1cc84:	8085883a 	add	r2,r16,r2
   1cc88:	11800117 	ldw	r6,4(r2)
   1cc8c:	81400217 	ldw	r5,8(r16)
   1cc90:	9009883a 	mov	r4,r18
   1cc94:	31800054 	ori	r6,r6,1
   1cc98:	11800115 	stw	r6,4(r2)
   1cc9c:	28c00315 	stw	r3,12(r5)
   1cca0:	19400215 	stw	r5,8(r3)
   1cca4:	00218540 	call	21854 <__malloc_unlock>
   1cca8:	80800204 	addi	r2,r16,8
   1ccac:	dfc00917 	ldw	ra,36(sp)
   1ccb0:	df000817 	ldw	fp,32(sp)
   1ccb4:	ddc00717 	ldw	r23,28(sp)
   1ccb8:	dd800617 	ldw	r22,24(sp)
   1ccbc:	dd400517 	ldw	r21,20(sp)
   1ccc0:	dd000417 	ldw	r20,16(sp)
   1ccc4:	dcc00317 	ldw	r19,12(sp)
   1ccc8:	dc800217 	ldw	r18,8(sp)
   1cccc:	dc400117 	ldw	r17,4(sp)
   1ccd0:	dc000017 	ldw	r16,0(sp)
   1ccd4:	dec00a04 	addi	sp,sp,40
   1ccd8:	f800283a 	ret
   1ccdc:	04400404 	movi	r17,16
   1cce0:	897fd72e 	bgeu	r17,r5,1cc40 <_malloc_r+0x4c>
   1cce4:	00800304 	movi	r2,12
   1cce8:	90800015 	stw	r2,0(r18)
   1ccec:	0005883a 	mov	r2,zero
   1ccf0:	003fee06 	br	1ccac <_malloc_r+0xb8>
   1ccf4:	8808d27a 	srli	r4,r17,9
   1ccf8:	20007126 	beq	r4,zero,1cec0 <_malloc_r+0x2cc>
   1ccfc:	00800104 	movi	r2,4
   1cd00:	1100eb36 	bltu	r2,r4,1d0b0 <_malloc_r+0x4bc>
   1cd04:	8808d1ba 	srli	r4,r17,6
   1cd08:	21000e04 	addi	r4,r4,56
   1cd0c:	210b883a 	add	r5,r4,r4
   1cd10:	294b883a 	add	r5,r5,r5
   1cd14:	294b883a 	add	r5,r5,r5
   1cd18:	04c000f4 	movhi	r19,3
   1cd1c:	9ccc5404 	addi	r19,r19,12624
   1cd20:	994b883a 	add	r5,r19,r5
   1cd24:	2c000317 	ldw	r16,12(r5)
   1cd28:	2c000e26 	beq	r5,r16,1cd64 <_malloc_r+0x170>
   1cd2c:	80c00117 	ldw	r3,4(r16)
   1cd30:	01ffff04 	movi	r7,-4
   1cd34:	018003c4 	movi	r6,15
   1cd38:	19c6703a 	and	r3,r3,r7
   1cd3c:	1c45c83a 	sub	r2,r3,r17
   1cd40:	30800716 	blt	r6,r2,1cd60 <_malloc_r+0x16c>
   1cd44:	1000610e 	bge	r2,zero,1cecc <_malloc_r+0x2d8>
   1cd48:	84000317 	ldw	r16,12(r16)
   1cd4c:	2c000526 	beq	r5,r16,1cd64 <_malloc_r+0x170>
   1cd50:	80c00117 	ldw	r3,4(r16)
   1cd54:	19c6703a 	and	r3,r3,r7
   1cd58:	1c45c83a 	sub	r2,r3,r17
   1cd5c:	30bff90e 	bge	r6,r2,1cd44 <_malloc_r+0x150>
   1cd60:	213fffc4 	addi	r4,r4,-1
   1cd64:	21000044 	addi	r4,r4,1
   1cd68:	9c000417 	ldw	r16,16(r19)
   1cd6c:	00c000f4 	movhi	r3,3
   1cd70:	18cc5404 	addi	r3,r3,12624
   1cd74:	1a400204 	addi	r9,r3,8
   1cd78:	8240ff26 	beq	r16,r9,1d178 <_malloc_r+0x584>
   1cd7c:	81400117 	ldw	r5,4(r16)
   1cd80:	00bfff04 	movi	r2,-4
   1cd84:	018003c4 	movi	r6,15
   1cd88:	2884703a 	and	r2,r5,r2
   1cd8c:	144bc83a 	sub	r5,r2,r17
   1cd90:	3140ea16 	blt	r6,r5,1d13c <_malloc_r+0x548>
   1cd94:	1a400515 	stw	r9,20(r3)
   1cd98:	1a400415 	stw	r9,16(r3)
   1cd9c:	2800570e 	bge	r5,zero,1cefc <_malloc_r+0x308>
   1cda0:	01407fc4 	movi	r5,511
   1cda4:	2880ca36 	bltu	r5,r2,1d0d0 <_malloc_r+0x4dc>
   1cda8:	1004d0fa 	srli	r2,r2,3
   1cdac:	02000044 	movi	r8,1
   1cdb0:	19c00117 	ldw	r7,4(r3)
   1cdb4:	108b883a 	add	r5,r2,r2
   1cdb8:	294b883a 	add	r5,r5,r5
   1cdbc:	1005d0ba 	srai	r2,r2,2
   1cdc0:	294b883a 	add	r5,r5,r5
   1cdc4:	28cb883a 	add	r5,r5,r3
   1cdc8:	29800217 	ldw	r6,8(r5)
   1cdcc:	4084983a 	sll	r2,r8,r2
   1cdd0:	81400315 	stw	r5,12(r16)
   1cdd4:	81800215 	stw	r6,8(r16)
   1cdd8:	11c4b03a 	or	r2,r2,r7
   1cddc:	18800115 	stw	r2,4(r3)
   1cde0:	2c000215 	stw	r16,8(r5)
   1cde4:	34000315 	stw	r16,12(r6)
   1cde8:	200bd0ba 	srai	r5,r4,2
   1cdec:	00c00044 	movi	r3,1
   1cdf0:	194a983a 	sll	r5,r3,r5
   1cdf4:	11404936 	bltu	r2,r5,1cf1c <_malloc_r+0x328>
   1cdf8:	1146703a 	and	r3,r2,r5
   1cdfc:	18000a1e 	bne	r3,zero,1ce28 <_malloc_r+0x234>
   1ce00:	00ffff04 	movi	r3,-4
   1ce04:	294b883a 	add	r5,r5,r5
   1ce08:	20c8703a 	and	r4,r4,r3
   1ce0c:	1146703a 	and	r3,r2,r5
   1ce10:	21000104 	addi	r4,r4,4
   1ce14:	1800041e 	bne	r3,zero,1ce28 <_malloc_r+0x234>
   1ce18:	294b883a 	add	r5,r5,r5
   1ce1c:	1146703a 	and	r3,r2,r5
   1ce20:	21000104 	addi	r4,r4,4
   1ce24:	183ffc26 	beq	r3,zero,1ce18 <_malloc_r+0x224>
   1ce28:	023fff04 	movi	r8,-4
   1ce2c:	01c003c4 	movi	r7,15
   1ce30:	2105883a 	add	r2,r4,r4
   1ce34:	1085883a 	add	r2,r2,r2
   1ce38:	1085883a 	add	r2,r2,r2
   1ce3c:	9899883a 	add	r12,r19,r2
   1ce40:	62800304 	addi	r10,r12,12
   1ce44:	2017883a 	mov	r11,r4
   1ce48:	54000017 	ldw	r16,0(r10)
   1ce4c:	51bffd04 	addi	r6,r10,-12
   1ce50:	8180041e 	bne	r16,r6,1ce64 <_malloc_r+0x270>
   1ce54:	0000ca06 	br	1d180 <_malloc_r+0x58c>
   1ce58:	10001c0e 	bge	r2,zero,1cecc <_malloc_r+0x2d8>
   1ce5c:	84000317 	ldw	r16,12(r16)
   1ce60:	8180c726 	beq	r16,r6,1d180 <_malloc_r+0x58c>
   1ce64:	80c00117 	ldw	r3,4(r16)
   1ce68:	1a06703a 	and	r3,r3,r8
   1ce6c:	1c45c83a 	sub	r2,r3,r17
   1ce70:	38bff90e 	bge	r7,r2,1ce58 <_malloc_r+0x264>
   1ce74:	81000317 	ldw	r4,12(r16)
   1ce78:	81400217 	ldw	r5,8(r16)
   1ce7c:	8447883a 	add	r3,r16,r17
   1ce80:	8c400054 	ori	r17,r17,1
   1ce84:	29000315 	stw	r4,12(r5)
   1ce88:	21400215 	stw	r5,8(r4)
   1ce8c:	84400115 	stw	r17,4(r16)
   1ce90:	1889883a 	add	r4,r3,r2
   1ce94:	11400054 	ori	r5,r2,1
   1ce98:	98c00515 	stw	r3,20(r19)
   1ce9c:	98c00415 	stw	r3,16(r19)
   1cea0:	20800015 	stw	r2,0(r4)
   1cea4:	1a400315 	stw	r9,12(r3)
   1cea8:	1a400215 	stw	r9,8(r3)
   1ceac:	19400115 	stw	r5,4(r3)
   1ceb0:	9009883a 	mov	r4,r18
   1ceb4:	00218540 	call	21854 <__malloc_unlock>
   1ceb8:	80800204 	addi	r2,r16,8
   1cebc:	003f7b06 	br	1ccac <_malloc_r+0xb8>
   1cec0:	8808d0fa 	srli	r4,r17,3
   1cec4:	210b883a 	add	r5,r4,r4
   1cec8:	003f9106 	br	1cd10 <_malloc_r+0x11c>
   1cecc:	80c7883a 	add	r3,r16,r3
   1ced0:	19400117 	ldw	r5,4(r3)
   1ced4:	80800317 	ldw	r2,12(r16)
   1ced8:	81000217 	ldw	r4,8(r16)
   1cedc:	29400054 	ori	r5,r5,1
   1cee0:	19400115 	stw	r5,4(r3)
   1cee4:	20800315 	stw	r2,12(r4)
   1cee8:	11000215 	stw	r4,8(r2)
   1ceec:	9009883a 	mov	r4,r18
   1cef0:	00218540 	call	21854 <__malloc_unlock>
   1cef4:	80800204 	addi	r2,r16,8
   1cef8:	003f6c06 	br	1ccac <_malloc_r+0xb8>
   1cefc:	8085883a 	add	r2,r16,r2
   1cf00:	10c00117 	ldw	r3,4(r2)
   1cf04:	9009883a 	mov	r4,r18
   1cf08:	18c00054 	ori	r3,r3,1
   1cf0c:	10c00115 	stw	r3,4(r2)
   1cf10:	00218540 	call	21854 <__malloc_unlock>
   1cf14:	80800204 	addi	r2,r16,8
   1cf18:	003f6406 	br	1ccac <_malloc_r+0xb8>
   1cf1c:	9c000217 	ldw	r16,8(r19)
   1cf20:	00bfff04 	movi	r2,-4
   1cf24:	85400117 	ldw	r21,4(r16)
   1cf28:	a8aa703a 	and	r21,r21,r2
   1cf2c:	ac400336 	bltu	r21,r17,1cf3c <_malloc_r+0x348>
   1cf30:	ac45c83a 	sub	r2,r21,r17
   1cf34:	00c003c4 	movi	r3,15
   1cf38:	18805316 	blt	r3,r2,1d088 <_malloc_r+0x494>
   1cf3c:	d5e8d117 	ldw	r23,-23740(gp)
   1cf40:	d0e00e17 	ldw	r3,-32712(gp)
   1cf44:	00bfffc4 	movi	r2,-1
   1cf48:	8579883a 	add	fp,r16,r21
   1cf4c:	8def883a 	add	r23,r17,r23
   1cf50:	1880d226 	beq	r3,r2,1d29c <_malloc_r+0x6a8>
   1cf54:	bdc403c4 	addi	r23,r23,4111
   1cf58:	00bc0004 	movi	r2,-4096
   1cf5c:	b8ae703a 	and	r23,r23,r2
   1cf60:	9009883a 	mov	r4,r18
   1cf64:	b80b883a 	mov	r5,r23
   1cf68:	001eba00 	call	1eba0 <_sbrk_r>
   1cf6c:	1029883a 	mov	r20,r2
   1cf70:	00bfffc4 	movi	r2,-1
   1cf74:	a080d126 	beq	r20,r2,1d2bc <_malloc_r+0x6c8>
   1cf78:	a7009f36 	bltu	r20,fp,1d1f8 <_malloc_r+0x604>
   1cf7c:	05800134 	movhi	r22,4
   1cf80:	b5913704 	addi	r22,r22,17628
   1cf84:	b0800017 	ldw	r2,0(r22)
   1cf88:	b885883a 	add	r2,r23,r2
   1cf8c:	b0800015 	stw	r2,0(r22)
   1cf90:	e500cf26 	beq	fp,r20,1d2d0 <_malloc_r+0x6dc>
   1cf94:	d1200e17 	ldw	r4,-32712(gp)
   1cf98:	00ffffc4 	movi	r3,-1
   1cf9c:	20c0e026 	beq	r4,r3,1d320 <_malloc_r+0x72c>
   1cfa0:	a739c83a 	sub	fp,r20,fp
   1cfa4:	1705883a 	add	r2,r2,fp
   1cfa8:	b0800015 	stw	r2,0(r22)
   1cfac:	a08001cc 	andi	r2,r20,7
   1cfb0:	1000a526 	beq	r2,zero,1d248 <_malloc_r+0x654>
   1cfb4:	a0a9c83a 	sub	r20,r20,r2
   1cfb8:	00c40204 	movi	r3,4104
   1cfbc:	a5000204 	addi	r20,r20,8
   1cfc0:	1885c83a 	sub	r2,r3,r2
   1cfc4:	a5c7883a 	add	r3,r20,r23
   1cfc8:	18c3ffcc 	andi	r3,r3,4095
   1cfcc:	10efc83a 	sub	r23,r2,r3
   1cfd0:	9009883a 	mov	r4,r18
   1cfd4:	b80b883a 	mov	r5,r23
   1cfd8:	001eba00 	call	1eba0 <_sbrk_r>
   1cfdc:	00ffffc4 	movi	r3,-1
   1cfe0:	10c0cc26 	beq	r2,r3,1d314 <_malloc_r+0x720>
   1cfe4:	1505c83a 	sub	r2,r2,r20
   1cfe8:	b887883a 	add	r3,r23,r2
   1cfec:	18c00054 	ori	r3,r3,1
   1cff0:	b0800017 	ldw	r2,0(r22)
   1cff4:	9d000215 	stw	r20,8(r19)
   1cff8:	a0c00115 	stw	r3,4(r20)
   1cffc:	b885883a 	add	r2,r23,r2
   1d000:	b0800015 	stw	r2,0(r22)
   1d004:	84c00e26 	beq	r16,r19,1d040 <_malloc_r+0x44c>
   1d008:	00c003c4 	movi	r3,15
   1d00c:	1d40902e 	bgeu	r3,r21,1d250 <_malloc_r+0x65c>
   1d010:	ad7ffd04 	addi	r21,r21,-12
   1d014:	013ffe04 	movi	r4,-8
   1d018:	a908703a 	and	r4,r21,r4
   1d01c:	810b883a 	add	r5,r16,r4
   1d020:	01800144 	movi	r6,5
   1d024:	29800115 	stw	r6,4(r5)
   1d028:	29800215 	stw	r6,8(r5)
   1d02c:	81400117 	ldw	r5,4(r16)
   1d030:	2940004c 	andi	r5,r5,1
   1d034:	214ab03a 	or	r5,r4,r5
   1d038:	81400115 	stw	r5,4(r16)
   1d03c:	1900ae36 	bltu	r3,r4,1d2f8 <_malloc_r+0x704>
   1d040:	d0e8d017 	ldw	r3,-23744(gp)
   1d044:	1880012e 	bgeu	r3,r2,1d04c <_malloc_r+0x458>
   1d048:	d0a8d015 	stw	r2,-23744(gp)
   1d04c:	d0e8cf17 	ldw	r3,-23748(gp)
   1d050:	9c000217 	ldw	r16,8(r19)
   1d054:	1880012e 	bgeu	r3,r2,1d05c <_malloc_r+0x468>
   1d058:	d0a8cf15 	stw	r2,-23748(gp)
   1d05c:	80c00117 	ldw	r3,4(r16)
   1d060:	00bfff04 	movi	r2,-4
   1d064:	1886703a 	and	r3,r3,r2
   1d068:	1c45c83a 	sub	r2,r3,r17
   1d06c:	1c400236 	bltu	r3,r17,1d078 <_malloc_r+0x484>
   1d070:	00c003c4 	movi	r3,15
   1d074:	18800416 	blt	r3,r2,1d088 <_malloc_r+0x494>
   1d078:	9009883a 	mov	r4,r18
   1d07c:	00218540 	call	21854 <__malloc_unlock>
   1d080:	0005883a 	mov	r2,zero
   1d084:	003f0906 	br	1ccac <_malloc_r+0xb8>
   1d088:	88c00054 	ori	r3,r17,1
   1d08c:	10800054 	ori	r2,r2,1
   1d090:	80c00115 	stw	r3,4(r16)
   1d094:	8463883a 	add	r17,r16,r17
   1d098:	88800115 	stw	r2,4(r17)
   1d09c:	9009883a 	mov	r4,r18
   1d0a0:	9c400215 	stw	r17,8(r19)
   1d0a4:	00218540 	call	21854 <__malloc_unlock>
   1d0a8:	80800204 	addi	r2,r16,8
   1d0ac:	003eff06 	br	1ccac <_malloc_r+0xb8>
   1d0b0:	00800504 	movi	r2,20
   1d0b4:	1100492e 	bgeu	r2,r4,1d1dc <_malloc_r+0x5e8>
   1d0b8:	00801504 	movi	r2,84
   1d0bc:	11005c36 	bltu	r2,r4,1d230 <_malloc_r+0x63c>
   1d0c0:	8808d33a 	srli	r4,r17,12
   1d0c4:	21001b84 	addi	r4,r4,110
   1d0c8:	210b883a 	add	r5,r4,r4
   1d0cc:	003f1006 	br	1cd10 <_malloc_r+0x11c>
   1d0d0:	1006d27a 	srli	r3,r2,9
   1d0d4:	01400104 	movi	r5,4
   1d0d8:	28c0432e 	bgeu	r5,r3,1d1e8 <_malloc_r+0x5f4>
   1d0dc:	01400504 	movi	r5,20
   1d0e0:	28c07036 	bltu	r5,r3,1d2a4 <_malloc_r+0x6b0>
   1d0e4:	194016c4 	addi	r5,r3,91
   1d0e8:	294d883a 	add	r6,r5,r5
   1d0ec:	318d883a 	add	r6,r6,r6
   1d0f0:	318d883a 	add	r6,r6,r6
   1d0f4:	998d883a 	add	r6,r19,r6
   1d0f8:	30c00217 	ldw	r3,8(r6)
   1d0fc:	01c000f4 	movhi	r7,3
   1d100:	39cc5404 	addi	r7,r7,12624
   1d104:	19805726 	beq	r3,r6,1d264 <_malloc_r+0x670>
   1d108:	01ffff04 	movi	r7,-4
   1d10c:	19400117 	ldw	r5,4(r3)
   1d110:	29ca703a 	and	r5,r5,r7
   1d114:	1140022e 	bgeu	r2,r5,1d120 <_malloc_r+0x52c>
   1d118:	18c00217 	ldw	r3,8(r3)
   1d11c:	30fffb1e 	bne	r6,r3,1d10c <_malloc_r+0x518>
   1d120:	19400317 	ldw	r5,12(r3)
   1d124:	98800117 	ldw	r2,4(r19)
   1d128:	81400315 	stw	r5,12(r16)
   1d12c:	80c00215 	stw	r3,8(r16)
   1d130:	2c000215 	stw	r16,8(r5)
   1d134:	1c000315 	stw	r16,12(r3)
   1d138:	003f2b06 	br	1cde8 <_malloc_r+0x1f4>
   1d13c:	8445883a 	add	r2,r16,r17
   1d140:	8c400054 	ori	r17,r17,1
   1d144:	18800515 	stw	r2,20(r3)
   1d148:	18800415 	stw	r2,16(r3)
   1d14c:	29000054 	ori	r4,r5,1
   1d150:	1147883a 	add	r3,r2,r5
   1d154:	84400115 	stw	r17,4(r16)
   1d158:	11000115 	stw	r4,4(r2)
   1d15c:	12400315 	stw	r9,12(r2)
   1d160:	12400215 	stw	r9,8(r2)
   1d164:	19400015 	stw	r5,0(r3)
   1d168:	9009883a 	mov	r4,r18
   1d16c:	00218540 	call	21854 <__malloc_unlock>
   1d170:	80800204 	addi	r2,r16,8
   1d174:	003ecd06 	br	1ccac <_malloc_r+0xb8>
   1d178:	18800117 	ldw	r2,4(r3)
   1d17c:	003f1a06 	br	1cde8 <_malloc_r+0x1f4>
   1d180:	5ac00044 	addi	r11,r11,1
   1d184:	588000cc 	andi	r2,r11,3
   1d188:	52800204 	addi	r10,r10,8
   1d18c:	103f2e1e 	bne	r2,zero,1ce48 <_malloc_r+0x254>
   1d190:	20c000cc 	andi	r3,r4,3
   1d194:	60bffe04 	addi	r2,r12,-8
   1d198:	18006f26 	beq	r3,zero,1d358 <_malloc_r+0x764>
   1d19c:	63000017 	ldw	r12,0(r12)
   1d1a0:	213fffc4 	addi	r4,r4,-1
   1d1a4:	60bffa26 	beq	r12,r2,1d190 <_malloc_r+0x59c>
   1d1a8:	98800117 	ldw	r2,4(r19)
   1d1ac:	294b883a 	add	r5,r5,r5
   1d1b0:	117f5a36 	bltu	r2,r5,1cf1c <_malloc_r+0x328>
   1d1b4:	283f5926 	beq	r5,zero,1cf1c <_malloc_r+0x328>
   1d1b8:	1146703a 	and	r3,r2,r5
   1d1bc:	18001626 	beq	r3,zero,1d218 <_malloc_r+0x624>
   1d1c0:	5809883a 	mov	r4,r11
   1d1c4:	003f1a06 	br	1ce30 <_malloc_r+0x23c>
   1d1c8:	80800204 	addi	r2,r16,8
   1d1cc:	84000517 	ldw	r16,20(r16)
   1d1d0:	143ea81e 	bne	r2,r16,1cc74 <_malloc_r+0x80>
   1d1d4:	21000084 	addi	r4,r4,2
   1d1d8:	003ee306 	br	1cd68 <_malloc_r+0x174>
   1d1dc:	210016c4 	addi	r4,r4,91
   1d1e0:	210b883a 	add	r5,r4,r4
   1d1e4:	003eca06 	br	1cd10 <_malloc_r+0x11c>
   1d1e8:	100ad1ba 	srli	r5,r2,6
   1d1ec:	29400e04 	addi	r5,r5,56
   1d1f0:	294d883a 	add	r6,r5,r5
   1d1f4:	003fbd06 	br	1d0ec <_malloc_r+0x4f8>
   1d1f8:	84ff6026 	beq	r16,r19,1cf7c <_malloc_r+0x388>
   1d1fc:	008000f4 	movhi	r2,3
   1d200:	108c5404 	addi	r2,r2,12624
   1d204:	14000217 	ldw	r16,8(r2)
   1d208:	00bfff04 	movi	r2,-4
   1d20c:	80c00117 	ldw	r3,4(r16)
   1d210:	1886703a 	and	r3,r3,r2
   1d214:	003f9406 	br	1d068 <_malloc_r+0x474>
   1d218:	294b883a 	add	r5,r5,r5
   1d21c:	1146703a 	and	r3,r2,r5
   1d220:	5ac00104 	addi	r11,r11,4
   1d224:	183ffc26 	beq	r3,zero,1d218 <_malloc_r+0x624>
   1d228:	5809883a 	mov	r4,r11
   1d22c:	003f0006 	br	1ce30 <_malloc_r+0x23c>
   1d230:	00805504 	movi	r2,340
   1d234:	11001336 	bltu	r2,r4,1d284 <_malloc_r+0x690>
   1d238:	8808d3fa 	srli	r4,r17,15
   1d23c:	21001dc4 	addi	r4,r4,119
   1d240:	210b883a 	add	r5,r4,r4
   1d244:	003eb206 	br	1cd10 <_malloc_r+0x11c>
   1d248:	00840004 	movi	r2,4096
   1d24c:	003f5d06 	br	1cfc4 <_malloc_r+0x3d0>
   1d250:	00800044 	movi	r2,1
   1d254:	a0800115 	stw	r2,4(r20)
   1d258:	a021883a 	mov	r16,r20
   1d25c:	0007883a 	mov	r3,zero
   1d260:	003f8106 	br	1d068 <_malloc_r+0x474>
   1d264:	280bd0ba 	srai	r5,r5,2
   1d268:	01800044 	movi	r6,1
   1d26c:	38800117 	ldw	r2,4(r7)
   1d270:	314c983a 	sll	r6,r6,r5
   1d274:	180b883a 	mov	r5,r3
   1d278:	3084b03a 	or	r2,r6,r2
   1d27c:	38800115 	stw	r2,4(r7)
   1d280:	003fa906 	br	1d128 <_malloc_r+0x534>
   1d284:	00815504 	movi	r2,1364
   1d288:	11001836 	bltu	r2,r4,1d2ec <_malloc_r+0x6f8>
   1d28c:	8808d4ba 	srli	r4,r17,18
   1d290:	21001f04 	addi	r4,r4,124
   1d294:	210b883a 	add	r5,r4,r4
   1d298:	003e9d06 	br	1cd10 <_malloc_r+0x11c>
   1d29c:	bdc00404 	addi	r23,r23,16
   1d2a0:	003f2f06 	br	1cf60 <_malloc_r+0x36c>
   1d2a4:	01401504 	movi	r5,84
   1d2a8:	28c01f36 	bltu	r5,r3,1d328 <_malloc_r+0x734>
   1d2ac:	100ad33a 	srli	r5,r2,12
   1d2b0:	29401b84 	addi	r5,r5,110
   1d2b4:	294d883a 	add	r6,r5,r5
   1d2b8:	003f8c06 	br	1d0ec <_malloc_r+0x4f8>
   1d2bc:	9c000217 	ldw	r16,8(r19)
   1d2c0:	00bfff04 	movi	r2,-4
   1d2c4:	80c00117 	ldw	r3,4(r16)
   1d2c8:	1886703a 	and	r3,r3,r2
   1d2cc:	003f6606 	br	1d068 <_malloc_r+0x474>
   1d2d0:	e0c3ffcc 	andi	r3,fp,4095
   1d2d4:	183f2f1e 	bne	r3,zero,1cf94 <_malloc_r+0x3a0>
   1d2d8:	98c00217 	ldw	r3,8(r19)
   1d2dc:	bd49883a 	add	r4,r23,r21
   1d2e0:	21000054 	ori	r4,r4,1
   1d2e4:	19000115 	stw	r4,4(r3)
   1d2e8:	003f5506 	br	1d040 <_malloc_r+0x44c>
   1d2ec:	01403f04 	movi	r5,252
   1d2f0:	01001f84 	movi	r4,126
   1d2f4:	003e8606 	br	1cd10 <_malloc_r+0x11c>
   1d2f8:	9009883a 	mov	r4,r18
   1d2fc:	81400204 	addi	r5,r16,8
   1d300:	001c05c0 	call	1c05c <_free_r>
   1d304:	00800134 	movhi	r2,4
   1d308:	10913704 	addi	r2,r2,17628
   1d30c:	10800017 	ldw	r2,0(r2)
   1d310:	003f4b06 	br	1d040 <_malloc_r+0x44c>
   1d314:	00c00044 	movi	r3,1
   1d318:	002f883a 	mov	r23,zero
   1d31c:	003f3406 	br	1cff0 <_malloc_r+0x3fc>
   1d320:	d5200e15 	stw	r20,-32712(gp)
   1d324:	003f2106 	br	1cfac <_malloc_r+0x3b8>
   1d328:	01405504 	movi	r5,340
   1d32c:	28c00436 	bltu	r5,r3,1d340 <_malloc_r+0x74c>
   1d330:	100ad3fa 	srli	r5,r2,15
   1d334:	29401dc4 	addi	r5,r5,119
   1d338:	294d883a 	add	r6,r5,r5
   1d33c:	003f6b06 	br	1d0ec <_malloc_r+0x4f8>
   1d340:	01415504 	movi	r5,1364
   1d344:	28c00936 	bltu	r5,r3,1d36c <_malloc_r+0x778>
   1d348:	100ad4ba 	srli	r5,r2,18
   1d34c:	29401f04 	addi	r5,r5,124
   1d350:	294d883a 	add	r6,r5,r5
   1d354:	003f6506 	br	1d0ec <_malloc_r+0x4f8>
   1d358:	98800117 	ldw	r2,4(r19)
   1d35c:	0146303a 	nor	r3,zero,r5
   1d360:	1884703a 	and	r2,r3,r2
   1d364:	98800115 	stw	r2,4(r19)
   1d368:	003f9006 	br	1d1ac <_malloc_r+0x5b8>
   1d36c:	01803f04 	movi	r6,252
   1d370:	01401f84 	movi	r5,126
   1d374:	003f5d06 	br	1d0ec <_malloc_r+0x4f8>

0001d378 <memchr>:
   1d378:	008000c4 	movi	r2,3
   1d37c:	29403fcc 	andi	r5,r5,255
   1d380:	1180282e 	bgeu	r2,r6,1d424 <memchr+0xac>
   1d384:	2086703a 	and	r3,r4,r2
   1d388:	1800351e 	bne	r3,zero,1d460 <memchr+0xe8>
   1d38c:	2816923a 	slli	r11,r5,8
   1d390:	2093883a 	add	r9,r4,r2
   1d394:	22000084 	addi	r8,r4,2
   1d398:	5957883a 	add	r11,r11,r5
   1d39c:	5816923a 	slli	r11,r11,8
   1d3a0:	20c00044 	addi	r3,r4,1
   1d3a4:	037fbff4 	movhi	r13,65279
   1d3a8:	6b7fbfc4 	addi	r13,r13,-257
   1d3ac:	5957883a 	add	r11,r11,r5
   1d3b0:	5816923a 	slli	r11,r11,8
   1d3b4:	03202074 	movhi	r12,32897
   1d3b8:	63202004 	addi	r12,r12,-32640
   1d3bc:	101d883a 	mov	r14,r2
   1d3c0:	5957883a 	add	r11,r11,r5
   1d3c4:	21c00017 	ldw	r7,0(r4)
   1d3c8:	31bfff04 	addi	r6,r6,-4
   1d3cc:	1805883a 	mov	r2,r3
   1d3d0:	3acef03a 	xor	r7,r7,r11
   1d3d4:	3b55883a 	add	r10,r7,r13
   1d3d8:	01ce303a 	nor	r7,zero,r7
   1d3dc:	51ce703a 	and	r7,r10,r7
   1d3e0:	3b0e703a 	and	r7,r7,r12
   1d3e4:	38000a26 	beq	r7,zero,1d410 <memchr+0x98>
   1d3e8:	21c00003 	ldbu	r7,0(r4)
   1d3ec:	39401e26 	beq	r7,r5,1d468 <memchr+0xf0>
   1d3f0:	19c00003 	ldbu	r7,0(r3)
   1d3f4:	39401926 	beq	r7,r5,1d45c <memchr+0xe4>
   1d3f8:	41c00003 	ldbu	r7,0(r8)
   1d3fc:	4005883a 	mov	r2,r8
   1d400:	39401626 	beq	r7,r5,1d45c <memchr+0xe4>
   1d404:	49c00003 	ldbu	r7,0(r9)
   1d408:	4805883a 	mov	r2,r9
   1d40c:	39401326 	beq	r7,r5,1d45c <memchr+0xe4>
   1d410:	21000104 	addi	r4,r4,4
   1d414:	4a400104 	addi	r9,r9,4
   1d418:	42000104 	addi	r8,r8,4
   1d41c:	18c00104 	addi	r3,r3,4
   1d420:	71bfe836 	bltu	r14,r6,1d3c4 <memchr+0x4c>
   1d424:	2005883a 	mov	r2,r4
   1d428:	30000a26 	beq	r6,zero,1d454 <memchr+0xdc>
   1d42c:	10c00003 	ldbu	r3,0(r2)
   1d430:	19400a26 	beq	r3,r5,1d45c <memchr+0xe4>
   1d434:	10c00044 	addi	r3,r2,1
   1d438:	118d883a 	add	r6,r2,r6
   1d43c:	00000306 	br	1d44c <memchr+0xd4>
   1d440:	11000003 	ldbu	r4,0(r2)
   1d444:	18c00044 	addi	r3,r3,1
   1d448:	21400426 	beq	r4,r5,1d45c <memchr+0xe4>
   1d44c:	1805883a 	mov	r2,r3
   1d450:	19bffb1e 	bne	r3,r6,1d440 <memchr+0xc8>
   1d454:	0005883a 	mov	r2,zero
   1d458:	f800283a 	ret
   1d45c:	f800283a 	ret
   1d460:	2005883a 	mov	r2,r4
   1d464:	003ff106 	br	1d42c <memchr+0xb4>
   1d468:	2005883a 	mov	r2,r4
   1d46c:	f800283a 	ret

0001d470 <memmove>:
   1d470:	2005883a 	mov	r2,r4
   1d474:	300f883a 	mov	r7,r6
   1d478:	29000b2e 	bgeu	r5,r4,1d4a8 <memmove+0x38>
   1d47c:	2987883a 	add	r3,r5,r6
   1d480:	20c0092e 	bgeu	r4,r3,1d4a8 <memmove+0x38>
   1d484:	218b883a 	add	r5,r4,r6
   1d488:	198fc83a 	sub	r7,r3,r6
   1d48c:	30003f26 	beq	r6,zero,1d58c <memmove+0x11c>
   1d490:	18ffffc4 	addi	r3,r3,-1
   1d494:	19000003 	ldbu	r4,0(r3)
   1d498:	297fffc4 	addi	r5,r5,-1
   1d49c:	29000005 	stb	r4,0(r5)
   1d4a0:	19fffb1e 	bne	r3,r7,1d490 <memmove+0x20>
   1d4a4:	f800283a 	ret
   1d4a8:	00c003c4 	movi	r3,15
   1d4ac:	1980382e 	bgeu	r3,r6,1d590 <memmove+0x120>
   1d4b0:	2886b03a 	or	r3,r5,r2
   1d4b4:	18c000cc 	andi	r3,r3,3
   1d4b8:	1800351e 	bne	r3,zero,1d590 <memmove+0x120>
   1d4bc:	327ffc04 	addi	r9,r6,-16
   1d4c0:	4812d13a 	srli	r9,r9,4
   1d4c4:	12000404 	addi	r8,r2,16
   1d4c8:	1007883a 	mov	r3,r2
   1d4cc:	4808913a 	slli	r4,r9,4
   1d4d0:	280f883a 	mov	r7,r5
   1d4d4:	4111883a 	add	r8,r8,r4
   1d4d8:	39000017 	ldw	r4,0(r7)
   1d4dc:	18c00404 	addi	r3,r3,16
   1d4e0:	39c00404 	addi	r7,r7,16
   1d4e4:	193ffc15 	stw	r4,-16(r3)
   1d4e8:	393ffd17 	ldw	r4,-12(r7)
   1d4ec:	193ffd15 	stw	r4,-12(r3)
   1d4f0:	393ffe17 	ldw	r4,-8(r7)
   1d4f4:	193ffe15 	stw	r4,-8(r3)
   1d4f8:	393fff17 	ldw	r4,-4(r7)
   1d4fc:	193fff15 	stw	r4,-4(r3)
   1d500:	1a3ff51e 	bne	r3,r8,1d4d8 <memmove+0x68>
   1d504:	49000044 	addi	r4,r9,1
   1d508:	2008913a 	slli	r4,r4,4
   1d50c:	31c003cc 	andi	r7,r6,15
   1d510:	1107883a 	add	r3,r2,r4
   1d514:	290b883a 	add	r5,r5,r4
   1d518:	010000c4 	movi	r4,3
   1d51c:	21c0142e 	bgeu	r4,r7,1d570 <memmove+0x100>
   1d520:	39ffff04 	addi	r7,r7,-4
   1d524:	3814d0ba 	srli	r10,r7,2
   1d528:	1a400104 	addi	r9,r3,4
   1d52c:	180d883a 	mov	r6,r3
   1d530:	5289883a 	add	r4,r10,r10
   1d534:	2109883a 	add	r4,r4,r4
   1d538:	4913883a 	add	r9,r9,r4
   1d53c:	2809883a 	mov	r4,r5
   1d540:	22000017 	ldw	r8,0(r4)
   1d544:	31800104 	addi	r6,r6,4
   1d548:	21000104 	addi	r4,r4,4
   1d54c:	323fff15 	stw	r8,-4(r6)
   1d550:	327ffb1e 	bne	r6,r9,1d540 <memmove+0xd0>
   1d554:	51000044 	addi	r4,r10,1
   1d558:	52bfff24 	muli	r10,r10,-4
   1d55c:	2109883a 	add	r4,r4,r4
   1d560:	2109883a 	add	r4,r4,r4
   1d564:	51cf883a 	add	r7,r10,r7
   1d568:	290b883a 	add	r5,r5,r4
   1d56c:	1907883a 	add	r3,r3,r4
   1d570:	38000626 	beq	r7,zero,1d58c <memmove+0x11c>
   1d574:	19cf883a 	add	r7,r3,r7
   1d578:	29800003 	ldbu	r6,0(r5)
   1d57c:	18c00044 	addi	r3,r3,1
   1d580:	29400044 	addi	r5,r5,1
   1d584:	19bfffc5 	stb	r6,-1(r3)
   1d588:	19fffb1e 	bne	r3,r7,1d578 <memmove+0x108>
   1d58c:	f800283a 	ret
   1d590:	1007883a 	mov	r3,r2
   1d594:	003ff606 	br	1d570 <memmove+0x100>

0001d598 <_Balloc>:
   1d598:	20801317 	ldw	r2,76(r4)
   1d59c:	defffc04 	addi	sp,sp,-16
   1d5a0:	dc400115 	stw	r17,4(sp)
   1d5a4:	dc000015 	stw	r16,0(sp)
   1d5a8:	dfc00315 	stw	ra,12(sp)
   1d5ac:	dc800215 	stw	r18,8(sp)
   1d5b0:	2023883a 	mov	r17,r4
   1d5b4:	2821883a 	mov	r16,r5
   1d5b8:	10000f26 	beq	r2,zero,1d5f8 <_Balloc+0x60>
   1d5bc:	8407883a 	add	r3,r16,r16
   1d5c0:	18c7883a 	add	r3,r3,r3
   1d5c4:	10c7883a 	add	r3,r2,r3
   1d5c8:	18800017 	ldw	r2,0(r3)
   1d5cc:	10001126 	beq	r2,zero,1d614 <_Balloc+0x7c>
   1d5d0:	11000017 	ldw	r4,0(r2)
   1d5d4:	19000015 	stw	r4,0(r3)
   1d5d8:	10000415 	stw	zero,16(r2)
   1d5dc:	10000315 	stw	zero,12(r2)
   1d5e0:	dfc00317 	ldw	ra,12(sp)
   1d5e4:	dc800217 	ldw	r18,8(sp)
   1d5e8:	dc400117 	ldw	r17,4(sp)
   1d5ec:	dc000017 	ldw	r16,0(sp)
   1d5f0:	dec00404 	addi	sp,sp,16
   1d5f4:	f800283a 	ret
   1d5f8:	01400104 	movi	r5,4
   1d5fc:	01800404 	movi	r6,16
   1d600:	001edb00 	call	1edb0 <_calloc_r>
   1d604:	88801315 	stw	r2,76(r17)
   1d608:	103fec1e 	bne	r2,zero,1d5bc <_Balloc+0x24>
   1d60c:	0005883a 	mov	r2,zero
   1d610:	003ff306 	br	1d5e0 <_Balloc+0x48>
   1d614:	01400044 	movi	r5,1
   1d618:	2c24983a 	sll	r18,r5,r16
   1d61c:	8809883a 	mov	r4,r17
   1d620:	91800144 	addi	r6,r18,5
   1d624:	318d883a 	add	r6,r6,r6
   1d628:	318d883a 	add	r6,r6,r6
   1d62c:	001edb00 	call	1edb0 <_calloc_r>
   1d630:	103ff626 	beq	r2,zero,1d60c <_Balloc+0x74>
   1d634:	14000115 	stw	r16,4(r2)
   1d638:	14800215 	stw	r18,8(r2)
   1d63c:	003fe606 	br	1d5d8 <_Balloc+0x40>

0001d640 <_Bfree>:
   1d640:	28000826 	beq	r5,zero,1d664 <_Bfree+0x24>
   1d644:	28c00117 	ldw	r3,4(r5)
   1d648:	20801317 	ldw	r2,76(r4)
   1d64c:	18c7883a 	add	r3,r3,r3
   1d650:	18c7883a 	add	r3,r3,r3
   1d654:	10c5883a 	add	r2,r2,r3
   1d658:	10c00017 	ldw	r3,0(r2)
   1d65c:	28c00015 	stw	r3,0(r5)
   1d660:	11400015 	stw	r5,0(r2)
   1d664:	f800283a 	ret

0001d668 <__multadd>:
   1d668:	defffa04 	addi	sp,sp,-24
   1d66c:	dc000115 	stw	r16,4(sp)
   1d670:	2c000417 	ldw	r16,16(r5)
   1d674:	dc800315 	stw	r18,12(sp)
   1d678:	dc400215 	stw	r17,8(sp)
   1d67c:	dfc00515 	stw	ra,20(sp)
   1d680:	dcc00415 	stw	r19,16(sp)
   1d684:	2823883a 	mov	r17,r5
   1d688:	2025883a 	mov	r18,r4
   1d68c:	28c00504 	addi	r3,r5,20
   1d690:	0011883a 	mov	r8,zero
   1d694:	1a800017 	ldw	r10,0(r3)
   1d698:	18c00104 	addi	r3,r3,4
   1d69c:	42000044 	addi	r8,r8,1
   1d6a0:	527fffcc 	andi	r9,r10,65535
   1d6a4:	4993383a 	mul	r9,r9,r6
   1d6a8:	5014d43a 	srli	r10,r10,16
   1d6ac:	49d3883a 	add	r9,r9,r7
   1d6b0:	480ed43a 	srli	r7,r9,16
   1d6b4:	5195383a 	mul	r10,r10,r6
   1d6b8:	4a7fffcc 	andi	r9,r9,65535
   1d6bc:	3a8f883a 	add	r7,r7,r10
   1d6c0:	3814943a 	slli	r10,r7,16
   1d6c4:	380ed43a 	srli	r7,r7,16
   1d6c8:	5253883a 	add	r9,r10,r9
   1d6cc:	1a7fff15 	stw	r9,-4(r3)
   1d6d0:	443ff016 	blt	r8,r16,1d694 <__multadd+0x2c>
   1d6d4:	38000926 	beq	r7,zero,1d6fc <__multadd+0x94>
   1d6d8:	88800217 	ldw	r2,8(r17)
   1d6dc:	80800f0e 	bge	r16,r2,1d71c <__multadd+0xb4>
   1d6e0:	80800144 	addi	r2,r16,5
   1d6e4:	1085883a 	add	r2,r2,r2
   1d6e8:	1085883a 	add	r2,r2,r2
   1d6ec:	8885883a 	add	r2,r17,r2
   1d6f0:	84000044 	addi	r16,r16,1
   1d6f4:	11c00015 	stw	r7,0(r2)
   1d6f8:	8c000415 	stw	r16,16(r17)
   1d6fc:	8805883a 	mov	r2,r17
   1d700:	dfc00517 	ldw	ra,20(sp)
   1d704:	dcc00417 	ldw	r19,16(sp)
   1d708:	dc800317 	ldw	r18,12(sp)
   1d70c:	dc400217 	ldw	r17,8(sp)
   1d710:	dc000117 	ldw	r16,4(sp)
   1d714:	dec00604 	addi	sp,sp,24
   1d718:	f800283a 	ret
   1d71c:	89400117 	ldw	r5,4(r17)
   1d720:	9009883a 	mov	r4,r18
   1d724:	d9c00015 	stw	r7,0(sp)
   1d728:	29400044 	addi	r5,r5,1
   1d72c:	001d5980 	call	1d598 <_Balloc>
   1d730:	89800417 	ldw	r6,16(r17)
   1d734:	89400304 	addi	r5,r17,12
   1d738:	11000304 	addi	r4,r2,12
   1d73c:	31800084 	addi	r6,r6,2
   1d740:	318d883a 	add	r6,r6,r6
   1d744:	318d883a 	add	r6,r6,r6
   1d748:	1027883a 	mov	r19,r2
   1d74c:	0017a440 	call	17a44 <memcpy>
   1d750:	88c00117 	ldw	r3,4(r17)
   1d754:	90801317 	ldw	r2,76(r18)
   1d758:	d9c00017 	ldw	r7,0(sp)
   1d75c:	18c7883a 	add	r3,r3,r3
   1d760:	18c7883a 	add	r3,r3,r3
   1d764:	10c5883a 	add	r2,r2,r3
   1d768:	10c00017 	ldw	r3,0(r2)
   1d76c:	88c00015 	stw	r3,0(r17)
   1d770:	14400015 	stw	r17,0(r2)
   1d774:	9823883a 	mov	r17,r19
   1d778:	003fd906 	br	1d6e0 <__multadd+0x78>

0001d77c <__s2b>:
   1d77c:	defff904 	addi	sp,sp,-28
   1d780:	dd000415 	stw	r20,16(sp)
   1d784:	dc400115 	stw	r17,4(sp)
   1d788:	2829883a 	mov	r20,r5
   1d78c:	2023883a 	mov	r17,r4
   1d790:	01400244 	movi	r5,9
   1d794:	39000204 	addi	r4,r7,8
   1d798:	dcc00315 	stw	r19,12(sp)
   1d79c:	dc800215 	stw	r18,8(sp)
   1d7a0:	dfc00615 	stw	ra,24(sp)
   1d7a4:	dd400515 	stw	r21,20(sp)
   1d7a8:	dc000015 	stw	r16,0(sp)
   1d7ac:	3825883a 	mov	r18,r7
   1d7b0:	3027883a 	mov	r19,r6
   1d7b4:	0020acc0 	call	20acc <__divsi3>
   1d7b8:	00c00044 	movi	r3,1
   1d7bc:	000b883a 	mov	r5,zero
   1d7c0:	1880030e 	bge	r3,r2,1d7d0 <__s2b+0x54>
   1d7c4:	18c7883a 	add	r3,r3,r3
   1d7c8:	29400044 	addi	r5,r5,1
   1d7cc:	18bffd16 	blt	r3,r2,1d7c4 <__s2b+0x48>
   1d7d0:	8809883a 	mov	r4,r17
   1d7d4:	001d5980 	call	1d598 <_Balloc>
   1d7d8:	d8c00717 	ldw	r3,28(sp)
   1d7dc:	10c00515 	stw	r3,20(r2)
   1d7e0:	00c00044 	movi	r3,1
   1d7e4:	10c00415 	stw	r3,16(r2)
   1d7e8:	00c00244 	movi	r3,9
   1d7ec:	1cc0210e 	bge	r3,r19,1d874 <__s2b+0xf8>
   1d7f0:	a0eb883a 	add	r21,r20,r3
   1d7f4:	a821883a 	mov	r16,r21
   1d7f8:	a4e9883a 	add	r20,r20,r19
   1d7fc:	81c00007 	ldb	r7,0(r16)
   1d800:	8809883a 	mov	r4,r17
   1d804:	84000044 	addi	r16,r16,1
   1d808:	100b883a 	mov	r5,r2
   1d80c:	01800284 	movi	r6,10
   1d810:	39fff404 	addi	r7,r7,-48
   1d814:	001d6680 	call	1d668 <__multadd>
   1d818:	853ff81e 	bne	r16,r20,1d7fc <__s2b+0x80>
   1d81c:	ace1883a 	add	r16,r21,r19
   1d820:	843ffe04 	addi	r16,r16,-8
   1d824:	9c800a0e 	bge	r19,r18,1d850 <__s2b+0xd4>
   1d828:	94e5c83a 	sub	r18,r18,r19
   1d82c:	84a5883a 	add	r18,r16,r18
   1d830:	81c00007 	ldb	r7,0(r16)
   1d834:	8809883a 	mov	r4,r17
   1d838:	84000044 	addi	r16,r16,1
   1d83c:	100b883a 	mov	r5,r2
   1d840:	01800284 	movi	r6,10
   1d844:	39fff404 	addi	r7,r7,-48
   1d848:	001d6680 	call	1d668 <__multadd>
   1d84c:	84bff81e 	bne	r16,r18,1d830 <__s2b+0xb4>
   1d850:	dfc00617 	ldw	ra,24(sp)
   1d854:	dd400517 	ldw	r21,20(sp)
   1d858:	dd000417 	ldw	r20,16(sp)
   1d85c:	dcc00317 	ldw	r19,12(sp)
   1d860:	dc800217 	ldw	r18,8(sp)
   1d864:	dc400117 	ldw	r17,4(sp)
   1d868:	dc000017 	ldw	r16,0(sp)
   1d86c:	dec00704 	addi	sp,sp,28
   1d870:	f800283a 	ret
   1d874:	a4000284 	addi	r16,r20,10
   1d878:	1827883a 	mov	r19,r3
   1d87c:	003fe906 	br	1d824 <__s2b+0xa8>

0001d880 <__hi0bits>:
   1d880:	20bfffec 	andhi	r2,r4,65535
   1d884:	1000141e 	bne	r2,zero,1d8d8 <__hi0bits+0x58>
   1d888:	2008943a 	slli	r4,r4,16
   1d88c:	00800404 	movi	r2,16
   1d890:	20ffc02c 	andhi	r3,r4,65280
   1d894:	1800021e 	bne	r3,zero,1d8a0 <__hi0bits+0x20>
   1d898:	2008923a 	slli	r4,r4,8
   1d89c:	10800204 	addi	r2,r2,8
   1d8a0:	20fc002c 	andhi	r3,r4,61440
   1d8a4:	1800021e 	bne	r3,zero,1d8b0 <__hi0bits+0x30>
   1d8a8:	2008913a 	slli	r4,r4,4
   1d8ac:	10800104 	addi	r2,r2,4
   1d8b0:	20f0002c 	andhi	r3,r4,49152
   1d8b4:	1800031e 	bne	r3,zero,1d8c4 <__hi0bits+0x44>
   1d8b8:	2109883a 	add	r4,r4,r4
   1d8bc:	10800084 	addi	r2,r2,2
   1d8c0:	2109883a 	add	r4,r4,r4
   1d8c4:	20000316 	blt	r4,zero,1d8d4 <__hi0bits+0x54>
   1d8c8:	2110002c 	andhi	r4,r4,16384
   1d8cc:	2000041e 	bne	r4,zero,1d8e0 <__hi0bits+0x60>
   1d8d0:	00800804 	movi	r2,32
   1d8d4:	f800283a 	ret
   1d8d8:	0005883a 	mov	r2,zero
   1d8dc:	003fec06 	br	1d890 <__hi0bits+0x10>
   1d8e0:	10800044 	addi	r2,r2,1
   1d8e4:	f800283a 	ret

0001d8e8 <__lo0bits>:
   1d8e8:	20c00017 	ldw	r3,0(r4)
   1d8ec:	188001cc 	andi	r2,r3,7
   1d8f0:	10000826 	beq	r2,zero,1d914 <__lo0bits+0x2c>
   1d8f4:	1880004c 	andi	r2,r3,1
   1d8f8:	1000211e 	bne	r2,zero,1d980 <__lo0bits+0x98>
   1d8fc:	1880008c 	andi	r2,r3,2
   1d900:	1000211e 	bne	r2,zero,1d988 <__lo0bits+0xa0>
   1d904:	1806d0ba 	srli	r3,r3,2
   1d908:	00800084 	movi	r2,2
   1d90c:	20c00015 	stw	r3,0(r4)
   1d910:	f800283a 	ret
   1d914:	18bfffcc 	andi	r2,r3,65535
   1d918:	10001326 	beq	r2,zero,1d968 <__lo0bits+0x80>
   1d91c:	0005883a 	mov	r2,zero
   1d920:	19403fcc 	andi	r5,r3,255
   1d924:	2800021e 	bne	r5,zero,1d930 <__lo0bits+0x48>
   1d928:	1806d23a 	srli	r3,r3,8
   1d92c:	10800204 	addi	r2,r2,8
   1d930:	194003cc 	andi	r5,r3,15
   1d934:	2800021e 	bne	r5,zero,1d940 <__lo0bits+0x58>
   1d938:	1806d13a 	srli	r3,r3,4
   1d93c:	10800104 	addi	r2,r2,4
   1d940:	194000cc 	andi	r5,r3,3
   1d944:	2800021e 	bne	r5,zero,1d950 <__lo0bits+0x68>
   1d948:	1806d0ba 	srli	r3,r3,2
   1d94c:	10800084 	addi	r2,r2,2
   1d950:	1940004c 	andi	r5,r3,1
   1d954:	2800081e 	bne	r5,zero,1d978 <__lo0bits+0x90>
   1d958:	1806d07a 	srli	r3,r3,1
   1d95c:	1800051e 	bne	r3,zero,1d974 <__lo0bits+0x8c>
   1d960:	00800804 	movi	r2,32
   1d964:	f800283a 	ret
   1d968:	1806d43a 	srli	r3,r3,16
   1d96c:	00800404 	movi	r2,16
   1d970:	003feb06 	br	1d920 <__lo0bits+0x38>
   1d974:	10800044 	addi	r2,r2,1
   1d978:	20c00015 	stw	r3,0(r4)
   1d97c:	f800283a 	ret
   1d980:	0005883a 	mov	r2,zero
   1d984:	f800283a 	ret
   1d988:	1806d07a 	srli	r3,r3,1
   1d98c:	00800044 	movi	r2,1
   1d990:	20c00015 	stw	r3,0(r4)
   1d994:	f800283a 	ret

0001d998 <__i2b>:
   1d998:	defffd04 	addi	sp,sp,-12
   1d99c:	dc000015 	stw	r16,0(sp)
   1d9a0:	04000044 	movi	r16,1
   1d9a4:	dc400115 	stw	r17,4(sp)
   1d9a8:	2823883a 	mov	r17,r5
   1d9ac:	800b883a 	mov	r5,r16
   1d9b0:	dfc00215 	stw	ra,8(sp)
   1d9b4:	001d5980 	call	1d598 <_Balloc>
   1d9b8:	14400515 	stw	r17,20(r2)
   1d9bc:	14000415 	stw	r16,16(r2)
   1d9c0:	dfc00217 	ldw	ra,8(sp)
   1d9c4:	dc400117 	ldw	r17,4(sp)
   1d9c8:	dc000017 	ldw	r16,0(sp)
   1d9cc:	dec00304 	addi	sp,sp,12
   1d9d0:	f800283a 	ret

0001d9d4 <__multiply>:
   1d9d4:	defffa04 	addi	sp,sp,-24
   1d9d8:	dcc00315 	stw	r19,12(sp)
   1d9dc:	dc400115 	stw	r17,4(sp)
   1d9e0:	34c00417 	ldw	r19,16(r6)
   1d9e4:	2c400417 	ldw	r17,16(r5)
   1d9e8:	dd000415 	stw	r20,16(sp)
   1d9ec:	dc800215 	stw	r18,8(sp)
   1d9f0:	dfc00515 	stw	ra,20(sp)
   1d9f4:	dc000015 	stw	r16,0(sp)
   1d9f8:	2825883a 	mov	r18,r5
   1d9fc:	3029883a 	mov	r20,r6
   1da00:	8cc0050e 	bge	r17,r19,1da18 <__multiply+0x44>
   1da04:	8807883a 	mov	r3,r17
   1da08:	3025883a 	mov	r18,r6
   1da0c:	9823883a 	mov	r17,r19
   1da10:	2829883a 	mov	r20,r5
   1da14:	1827883a 	mov	r19,r3
   1da18:	90800217 	ldw	r2,8(r18)
   1da1c:	8ce1883a 	add	r16,r17,r19
   1da20:	91400117 	ldw	r5,4(r18)
   1da24:	1400010e 	bge	r2,r16,1da2c <__multiply+0x58>
   1da28:	29400044 	addi	r5,r5,1
   1da2c:	001d5980 	call	1d598 <_Balloc>
   1da30:	83c00144 	addi	r15,r16,5
   1da34:	7bdf883a 	add	r15,r15,r15
   1da38:	7bdf883a 	add	r15,r15,r15
   1da3c:	13800504 	addi	r14,r2,20
   1da40:	13df883a 	add	r15,r2,r15
   1da44:	7007883a 	mov	r3,r14
   1da48:	73c0032e 	bgeu	r14,r15,1da58 <__multiply+0x84>
   1da4c:	18000015 	stw	zero,0(r3)
   1da50:	18c00104 	addi	r3,r3,4
   1da54:	1bfffd36 	bltu	r3,r15,1da4c <__multiply+0x78>
   1da58:	99800144 	addi	r6,r19,5
   1da5c:	8b000144 	addi	r12,r17,5
   1da60:	318d883a 	add	r6,r6,r6
   1da64:	6319883a 	add	r12,r12,r12
   1da68:	318d883a 	add	r6,r6,r6
   1da6c:	6319883a 	add	r12,r12,r12
   1da70:	a3400504 	addi	r13,r20,20
   1da74:	a18d883a 	add	r6,r20,r6
   1da78:	94400504 	addi	r17,r18,20
   1da7c:	9319883a 	add	r12,r18,r12
   1da80:	6980392e 	bgeu	r13,r6,1db68 <__multiply+0x194>
   1da84:	6a800017 	ldw	r10,0(r13)
   1da88:	52ffffcc 	andi	r11,r10,65535
   1da8c:	58001826 	beq	r11,zero,1daf0 <__multiply+0x11c>
   1da90:	7007883a 	mov	r3,r14
   1da94:	8809883a 	mov	r4,r17
   1da98:	000b883a 	mov	r5,zero
   1da9c:	22400017 	ldw	r9,0(r4)
   1daa0:	1a000017 	ldw	r8,0(r3)
   1daa4:	21000104 	addi	r4,r4,4
   1daa8:	49ffffcc 	andi	r7,r9,65535
   1daac:	3acf383a 	mul	r7,r7,r11
   1dab0:	4812d43a 	srli	r9,r9,16
   1dab4:	42bfffcc 	andi	r10,r8,65535
   1dab8:	3a8f883a 	add	r7,r7,r10
   1dabc:	394f883a 	add	r7,r7,r5
   1dac0:	4010d43a 	srli	r8,r8,16
   1dac4:	4acb383a 	mul	r5,r9,r11
   1dac8:	3814d43a 	srli	r10,r7,16
   1dacc:	19c0000d 	sth	r7,0(r3)
   1dad0:	2a0b883a 	add	r5,r5,r8
   1dad4:	2a8b883a 	add	r5,r5,r10
   1dad8:	1940008d 	sth	r5,2(r3)
   1dadc:	280ad43a 	srli	r5,r5,16
   1dae0:	18c00104 	addi	r3,r3,4
   1dae4:	233fed36 	bltu	r4,r12,1da9c <__multiply+0xc8>
   1dae8:	19400015 	stw	r5,0(r3)
   1daec:	6a800017 	ldw	r10,0(r13)
   1daf0:	5014d43a 	srli	r10,r10,16
   1daf4:	50001926 	beq	r10,zero,1db5c <__multiply+0x188>
   1daf8:	71400017 	ldw	r5,0(r14)
   1dafc:	7007883a 	mov	r3,r14
   1db00:	8809883a 	mov	r4,r17
   1db04:	280f883a 	mov	r7,r5
   1db08:	0017883a 	mov	r11,zero
   1db0c:	22400017 	ldw	r9,0(r4)
   1db10:	380ed43a 	srli	r7,r7,16
   1db14:	1940000d 	sth	r5,0(r3)
   1db18:	4a3fffcc 	andi	r8,r9,65535
   1db1c:	4291383a 	mul	r8,r8,r10
   1db20:	4812d43a 	srli	r9,r9,16
   1db24:	18c00104 	addi	r3,r3,4
   1db28:	41d1883a 	add	r8,r8,r7
   1db2c:	19c00017 	ldw	r7,0(r3)
   1db30:	42d1883a 	add	r8,r8,r11
   1db34:	4a93383a 	mul	r9,r9,r10
   1db38:	1a3fff8d 	sth	r8,-2(r3)
   1db3c:	4010d43a 	srli	r8,r8,16
   1db40:	397fffcc 	andi	r5,r7,65535
   1db44:	2a4b883a 	add	r5,r5,r9
   1db48:	2a0b883a 	add	r5,r5,r8
   1db4c:	21000104 	addi	r4,r4,4
   1db50:	2816d43a 	srli	r11,r5,16
   1db54:	233fed36 	bltu	r4,r12,1db0c <__multiply+0x138>
   1db58:	19400015 	stw	r5,0(r3)
   1db5c:	6b400104 	addi	r13,r13,4
   1db60:	73800104 	addi	r14,r14,4
   1db64:	69bfc736 	bltu	r13,r6,1da84 <__multiply+0xb0>
   1db68:	0400090e 	bge	zero,r16,1db90 <__multiply+0x1bc>
   1db6c:	78ffff17 	ldw	r3,-4(r15)
   1db70:	7bffff04 	addi	r15,r15,-4
   1db74:	18000326 	beq	r3,zero,1db84 <__multiply+0x1b0>
   1db78:	00000506 	br	1db90 <__multiply+0x1bc>
   1db7c:	78c00017 	ldw	r3,0(r15)
   1db80:	1800031e 	bne	r3,zero,1db90 <__multiply+0x1bc>
   1db84:	843fffc4 	addi	r16,r16,-1
   1db88:	7bffff04 	addi	r15,r15,-4
   1db8c:	803ffb1e 	bne	r16,zero,1db7c <__multiply+0x1a8>
   1db90:	14000415 	stw	r16,16(r2)
   1db94:	dfc00517 	ldw	ra,20(sp)
   1db98:	dd000417 	ldw	r20,16(sp)
   1db9c:	dcc00317 	ldw	r19,12(sp)
   1dba0:	dc800217 	ldw	r18,8(sp)
   1dba4:	dc400117 	ldw	r17,4(sp)
   1dba8:	dc000017 	ldw	r16,0(sp)
   1dbac:	dec00604 	addi	sp,sp,24
   1dbb0:	f800283a 	ret

0001dbb4 <__pow5mult>:
   1dbb4:	defffb04 	addi	sp,sp,-20
   1dbb8:	dcc00315 	stw	r19,12(sp)
   1dbbc:	dc800215 	stw	r18,8(sp)
   1dbc0:	dc000015 	stw	r16,0(sp)
   1dbc4:	dfc00415 	stw	ra,16(sp)
   1dbc8:	dc400115 	stw	r17,4(sp)
   1dbcc:	308000cc 	andi	r2,r6,3
   1dbd0:	3021883a 	mov	r16,r6
   1dbd4:	2027883a 	mov	r19,r4
   1dbd8:	2825883a 	mov	r18,r5
   1dbdc:	10002e1e 	bne	r2,zero,1dc98 <__pow5mult+0xe4>
   1dbe0:	8021d0ba 	srai	r16,r16,2
   1dbe4:	80001a26 	beq	r16,zero,1dc50 <__pow5mult+0x9c>
   1dbe8:	9c401217 	ldw	r17,72(r19)
   1dbec:	8800061e 	bne	r17,zero,1dc08 <__pow5mult+0x54>
   1dbf0:	00003406 	br	1dcc4 <__pow5mult+0x110>
   1dbf4:	8021d07a 	srai	r16,r16,1
   1dbf8:	80001526 	beq	r16,zero,1dc50 <__pow5mult+0x9c>
   1dbfc:	88c00017 	ldw	r3,0(r17)
   1dc00:	18001b26 	beq	r3,zero,1dc70 <__pow5mult+0xbc>
   1dc04:	1823883a 	mov	r17,r3
   1dc08:	80c0004c 	andi	r3,r16,1
   1dc0c:	183ff926 	beq	r3,zero,1dbf4 <__pow5mult+0x40>
   1dc10:	900b883a 	mov	r5,r18
   1dc14:	880d883a 	mov	r6,r17
   1dc18:	9809883a 	mov	r4,r19
   1dc1c:	001d9d40 	call	1d9d4 <__multiply>
   1dc20:	90001b26 	beq	r18,zero,1dc90 <__pow5mult+0xdc>
   1dc24:	91000117 	ldw	r4,4(r18)
   1dc28:	98c01317 	ldw	r3,76(r19)
   1dc2c:	8021d07a 	srai	r16,r16,1
   1dc30:	2109883a 	add	r4,r4,r4
   1dc34:	2109883a 	add	r4,r4,r4
   1dc38:	1907883a 	add	r3,r3,r4
   1dc3c:	19000017 	ldw	r4,0(r3)
   1dc40:	91000015 	stw	r4,0(r18)
   1dc44:	1c800015 	stw	r18,0(r3)
   1dc48:	1025883a 	mov	r18,r2
   1dc4c:	803feb1e 	bne	r16,zero,1dbfc <__pow5mult+0x48>
   1dc50:	9005883a 	mov	r2,r18
   1dc54:	dfc00417 	ldw	ra,16(sp)
   1dc58:	dcc00317 	ldw	r19,12(sp)
   1dc5c:	dc800217 	ldw	r18,8(sp)
   1dc60:	dc400117 	ldw	r17,4(sp)
   1dc64:	dc000017 	ldw	r16,0(sp)
   1dc68:	dec00504 	addi	sp,sp,20
   1dc6c:	f800283a 	ret
   1dc70:	880b883a 	mov	r5,r17
   1dc74:	880d883a 	mov	r6,r17
   1dc78:	9809883a 	mov	r4,r19
   1dc7c:	001d9d40 	call	1d9d4 <__multiply>
   1dc80:	88800015 	stw	r2,0(r17)
   1dc84:	10000015 	stw	zero,0(r2)
   1dc88:	1023883a 	mov	r17,r2
   1dc8c:	003fde06 	br	1dc08 <__pow5mult+0x54>
   1dc90:	1025883a 	mov	r18,r2
   1dc94:	003fd706 	br	1dbf4 <__pow5mult+0x40>
   1dc98:	10bfffc4 	addi	r2,r2,-1
   1dc9c:	1085883a 	add	r2,r2,r2
   1dca0:	00c000f4 	movhi	r3,3
   1dca4:	18c2b304 	addi	r3,r3,2764
   1dca8:	1085883a 	add	r2,r2,r2
   1dcac:	1885883a 	add	r2,r3,r2
   1dcb0:	11800017 	ldw	r6,0(r2)
   1dcb4:	000f883a 	mov	r7,zero
   1dcb8:	001d6680 	call	1d668 <__multadd>
   1dcbc:	1025883a 	mov	r18,r2
   1dcc0:	003fc706 	br	1dbe0 <__pow5mult+0x2c>
   1dcc4:	9809883a 	mov	r4,r19
   1dcc8:	01409c44 	movi	r5,625
   1dccc:	001d9980 	call	1d998 <__i2b>
   1dcd0:	98801215 	stw	r2,72(r19)
   1dcd4:	1023883a 	mov	r17,r2
   1dcd8:	10000015 	stw	zero,0(r2)
   1dcdc:	003fca06 	br	1dc08 <__pow5mult+0x54>

0001dce0 <__lshift>:
   1dce0:	defff904 	addi	sp,sp,-28
   1dce4:	dd400515 	stw	r21,20(sp)
   1dce8:	dc400115 	stw	r17,4(sp)
   1dcec:	2d400417 	ldw	r21,16(r5)
   1dcf0:	3023d17a 	srai	r17,r6,5
   1dcf4:	28800217 	ldw	r2,8(r5)
   1dcf8:	dd000415 	stw	r20,16(sp)
   1dcfc:	8d6b883a 	add	r21,r17,r21
   1dd00:	dcc00315 	stw	r19,12(sp)
   1dd04:	dc800215 	stw	r18,8(sp)
   1dd08:	dc000015 	stw	r16,0(sp)
   1dd0c:	dfc00615 	stw	ra,24(sp)
   1dd10:	ac000044 	addi	r16,r21,1
   1dd14:	2825883a 	mov	r18,r5
   1dd18:	3029883a 	mov	r20,r6
   1dd1c:	2027883a 	mov	r19,r4
   1dd20:	29400117 	ldw	r5,4(r5)
   1dd24:	1400030e 	bge	r2,r16,1dd34 <__lshift+0x54>
   1dd28:	1085883a 	add	r2,r2,r2
   1dd2c:	29400044 	addi	r5,r5,1
   1dd30:	143ffd16 	blt	r2,r16,1dd28 <__lshift+0x48>
   1dd34:	9809883a 	mov	r4,r19
   1dd38:	001d5980 	call	1d598 <_Balloc>
   1dd3c:	10c00504 	addi	r3,r2,20
   1dd40:	0440090e 	bge	zero,r17,1dd68 <__lshift+0x88>
   1dd44:	000f883a 	mov	r7,zero
   1dd48:	18000015 	stw	zero,0(r3)
   1dd4c:	39c00044 	addi	r7,r7,1
   1dd50:	18c00104 	addi	r3,r3,4
   1dd54:	3c7ffc1e 	bne	r7,r17,1dd48 <__lshift+0x68>
   1dd58:	38c00144 	addi	r3,r7,5
   1dd5c:	18c7883a 	add	r3,r3,r3
   1dd60:	18c7883a 	add	r3,r3,r3
   1dd64:	10c7883a 	add	r3,r2,r3
   1dd68:	92000417 	ldw	r8,16(r18)
   1dd6c:	a18007cc 	andi	r6,r20,31
   1dd70:	91c00504 	addi	r7,r18,20
   1dd74:	42000144 	addi	r8,r8,5
   1dd78:	4211883a 	add	r8,r8,r8
   1dd7c:	4211883a 	add	r8,r8,r8
   1dd80:	9211883a 	add	r8,r18,r8
   1dd84:	30002226 	beq	r6,zero,1de10 <__lshift+0x130>
   1dd88:	02800804 	movi	r10,32
   1dd8c:	5195c83a 	sub	r10,r10,r6
   1dd90:	000b883a 	mov	r5,zero
   1dd94:	3a400017 	ldw	r9,0(r7)
   1dd98:	18c00104 	addi	r3,r3,4
   1dd9c:	39c00104 	addi	r7,r7,4
   1dda0:	4992983a 	sll	r9,r9,r6
   1dda4:	2a4ab03a 	or	r5,r5,r9
   1dda8:	197fff15 	stw	r5,-4(r3)
   1ddac:	397fff17 	ldw	r5,-4(r7)
   1ddb0:	2a8ad83a 	srl	r5,r5,r10
   1ddb4:	3a3ff736 	bltu	r7,r8,1dd94 <__lshift+0xb4>
   1ddb8:	19400015 	stw	r5,0(r3)
   1ddbc:	28000126 	beq	r5,zero,1ddc4 <__lshift+0xe4>
   1ddc0:	ac000084 	addi	r16,r21,2
   1ddc4:	91000117 	ldw	r4,4(r18)
   1ddc8:	98c01317 	ldw	r3,76(r19)
   1ddcc:	843fffc4 	addi	r16,r16,-1
   1ddd0:	2109883a 	add	r4,r4,r4
   1ddd4:	2109883a 	add	r4,r4,r4
   1ddd8:	1907883a 	add	r3,r3,r4
   1dddc:	19000017 	ldw	r4,0(r3)
   1dde0:	14000415 	stw	r16,16(r2)
   1dde4:	91000015 	stw	r4,0(r18)
   1dde8:	1c800015 	stw	r18,0(r3)
   1ddec:	dfc00617 	ldw	ra,24(sp)
   1ddf0:	dd400517 	ldw	r21,20(sp)
   1ddf4:	dd000417 	ldw	r20,16(sp)
   1ddf8:	dcc00317 	ldw	r19,12(sp)
   1ddfc:	dc800217 	ldw	r18,8(sp)
   1de00:	dc400117 	ldw	r17,4(sp)
   1de04:	dc000017 	ldw	r16,0(sp)
   1de08:	dec00704 	addi	sp,sp,28
   1de0c:	f800283a 	ret
   1de10:	39400017 	ldw	r5,0(r7)
   1de14:	18c00104 	addi	r3,r3,4
   1de18:	39c00104 	addi	r7,r7,4
   1de1c:	197fff15 	stw	r5,-4(r3)
   1de20:	3a3fe82e 	bgeu	r7,r8,1ddc4 <__lshift+0xe4>
   1de24:	39400017 	ldw	r5,0(r7)
   1de28:	18c00104 	addi	r3,r3,4
   1de2c:	39c00104 	addi	r7,r7,4
   1de30:	197fff15 	stw	r5,-4(r3)
   1de34:	3a3ff636 	bltu	r7,r8,1de10 <__lshift+0x130>
   1de38:	003fe206 	br	1ddc4 <__lshift+0xe4>

0001de3c <__mcmp>:
   1de3c:	20800417 	ldw	r2,16(r4)
   1de40:	28c00417 	ldw	r3,16(r5)
   1de44:	10c5c83a 	sub	r2,r2,r3
   1de48:	10000f1e 	bne	r2,zero,1de88 <__mcmp+0x4c>
   1de4c:	18c00144 	addi	r3,r3,5
   1de50:	18c7883a 	add	r3,r3,r3
   1de54:	18c7883a 	add	r3,r3,r3
   1de58:	21c00504 	addi	r7,r4,20
   1de5c:	28cb883a 	add	r5,r5,r3
   1de60:	20c9883a 	add	r4,r4,r3
   1de64:	213fff04 	addi	r4,r4,-4
   1de68:	297fff04 	addi	r5,r5,-4
   1de6c:	21800017 	ldw	r6,0(r4)
   1de70:	28c00017 	ldw	r3,0(r5)
   1de74:	30c0021e 	bne	r6,r3,1de80 <__mcmp+0x44>
   1de78:	393ffa36 	bltu	r7,r4,1de64 <__mcmp+0x28>
   1de7c:	f800283a 	ret
   1de80:	30c00236 	bltu	r6,r3,1de8c <__mcmp+0x50>
   1de84:	00800044 	movi	r2,1
   1de88:	f800283a 	ret
   1de8c:	00bfffc4 	movi	r2,-1
   1de90:	f800283a 	ret

0001de94 <__mdiff>:
   1de94:	defffb04 	addi	sp,sp,-20
   1de98:	dc000015 	stw	r16,0(sp)
   1de9c:	2821883a 	mov	r16,r5
   1dea0:	dc800215 	stw	r18,8(sp)
   1dea4:	300b883a 	mov	r5,r6
   1dea8:	2025883a 	mov	r18,r4
   1deac:	8009883a 	mov	r4,r16
   1deb0:	dc400115 	stw	r17,4(sp)
   1deb4:	dfc00415 	stw	ra,16(sp)
   1deb8:	dcc00315 	stw	r19,12(sp)
   1debc:	3023883a 	mov	r17,r6
   1dec0:	001de3c0 	call	1de3c <__mcmp>
   1dec4:	10005026 	beq	r2,zero,1e008 <__mdiff+0x174>
   1dec8:	10004a16 	blt	r2,zero,1dff4 <__mdiff+0x160>
   1decc:	0027883a 	mov	r19,zero
   1ded0:	81400117 	ldw	r5,4(r16)
   1ded4:	9009883a 	mov	r4,r18
   1ded8:	001d5980 	call	1d598 <_Balloc>
   1dedc:	82400417 	ldw	r9,16(r16)
   1dee0:	89800417 	ldw	r6,16(r17)
   1dee4:	14c00315 	stw	r19,12(r2)
   1dee8:	4b800144 	addi	r14,r9,5
   1deec:	31800144 	addi	r6,r6,5
   1def0:	739d883a 	add	r14,r14,r14
   1def4:	318d883a 	add	r6,r6,r6
   1def8:	739d883a 	add	r14,r14,r14
   1defc:	318d883a 	add	r6,r6,r6
   1df00:	81c00504 	addi	r7,r16,20
   1df04:	839d883a 	add	r14,r16,r14
   1df08:	8a000504 	addi	r8,r17,20
   1df0c:	898d883a 	add	r6,r17,r6
   1df10:	10c00504 	addi	r3,r2,20
   1df14:	0009883a 	mov	r4,zero
   1df18:	3b000017 	ldw	r12,0(r7)
   1df1c:	42c00017 	ldw	r11,0(r8)
   1df20:	42000104 	addi	r8,r8,4
   1df24:	62bfffcc 	andi	r10,r12,65535
   1df28:	5b7fffcc 	andi	r13,r11,65535
   1df2c:	5109883a 	add	r4,r10,r4
   1df30:	2355c83a 	sub	r10,r4,r13
   1df34:	5816d43a 	srli	r11,r11,16
   1df38:	6008d43a 	srli	r4,r12,16
   1df3c:	501bd43a 	srai	r13,r10,16
   1df40:	1a80000d 	sth	r10,0(r3)
   1df44:	22c9c83a 	sub	r4,r4,r11
   1df48:	2349883a 	add	r4,r4,r13
   1df4c:	1900008d 	sth	r4,2(r3)
   1df50:	39c00104 	addi	r7,r7,4
   1df54:	2009d43a 	srai	r4,r4,16
   1df58:	18c00104 	addi	r3,r3,4
   1df5c:	41bfee36 	bltu	r8,r6,1df18 <__mdiff+0x84>
   1df60:	180b883a 	mov	r5,r3
   1df64:	3815883a 	mov	r10,r7
   1df68:	3b80132e 	bgeu	r7,r14,1dfb8 <__mdiff+0x124>
   1df6c:	3a000017 	ldw	r8,0(r7)
   1df70:	18c00104 	addi	r3,r3,4
   1df74:	39c00104 	addi	r7,r7,4
   1df78:	41bfffcc 	andi	r6,r8,65535
   1df7c:	310d883a 	add	r6,r6,r4
   1df80:	3009d43a 	srai	r4,r6,16
   1df84:	4010d43a 	srli	r8,r8,16
   1df88:	19bfff0d 	sth	r6,-4(r3)
   1df8c:	2209883a 	add	r4,r4,r8
   1df90:	193fff8d 	sth	r4,-2(r3)
   1df94:	2009d43a 	srai	r4,r4,16
   1df98:	3bbff436 	bltu	r7,r14,1df6c <__mdiff+0xd8>
   1df9c:	0286303a 	nor	r3,zero,r10
   1dfa0:	1b87883a 	add	r3,r3,r14
   1dfa4:	1806d0ba 	srli	r3,r3,2
   1dfa8:	18c00044 	addi	r3,r3,1
   1dfac:	18c7883a 	add	r3,r3,r3
   1dfb0:	18c7883a 	add	r3,r3,r3
   1dfb4:	28c7883a 	add	r3,r5,r3
   1dfb8:	193fff17 	ldw	r4,-4(r3)
   1dfbc:	18ffff04 	addi	r3,r3,-4
   1dfc0:	2000041e 	bne	r4,zero,1dfd4 <__mdiff+0x140>
   1dfc4:	18ffff04 	addi	r3,r3,-4
   1dfc8:	19000017 	ldw	r4,0(r3)
   1dfcc:	4a7fffc4 	addi	r9,r9,-1
   1dfd0:	203ffc26 	beq	r4,zero,1dfc4 <__mdiff+0x130>
   1dfd4:	12400415 	stw	r9,16(r2)
   1dfd8:	dfc00417 	ldw	ra,16(sp)
   1dfdc:	dcc00317 	ldw	r19,12(sp)
   1dfe0:	dc800217 	ldw	r18,8(sp)
   1dfe4:	dc400117 	ldw	r17,4(sp)
   1dfe8:	dc000017 	ldw	r16,0(sp)
   1dfec:	dec00504 	addi	sp,sp,20
   1dff0:	f800283a 	ret
   1dff4:	8005883a 	mov	r2,r16
   1dff8:	04c00044 	movi	r19,1
   1dffc:	8821883a 	mov	r16,r17
   1e000:	1023883a 	mov	r17,r2
   1e004:	003fb206 	br	1ded0 <__mdiff+0x3c>
   1e008:	9009883a 	mov	r4,r18
   1e00c:	000b883a 	mov	r5,zero
   1e010:	001d5980 	call	1d598 <_Balloc>
   1e014:	00c00044 	movi	r3,1
   1e018:	10c00415 	stw	r3,16(r2)
   1e01c:	10000515 	stw	zero,20(r2)
   1e020:	dfc00417 	ldw	ra,16(sp)
   1e024:	dcc00317 	ldw	r19,12(sp)
   1e028:	dc800217 	ldw	r18,8(sp)
   1e02c:	dc400117 	ldw	r17,4(sp)
   1e030:	dc000017 	ldw	r16,0(sp)
   1e034:	dec00504 	addi	sp,sp,20
   1e038:	f800283a 	ret

0001e03c <__ulp>:
   1e03c:	295ffc2c 	andhi	r5,r5,32752
   1e040:	00bf3034 	movhi	r2,64704
   1e044:	2887883a 	add	r3,r5,r2
   1e048:	00c0020e 	bge	zero,r3,1e054 <__ulp+0x18>
   1e04c:	0005883a 	mov	r2,zero
   1e050:	f800283a 	ret
   1e054:	00c7c83a 	sub	r3,zero,r3
   1e058:	1805d53a 	srai	r2,r3,20
   1e05c:	00c004c4 	movi	r3,19
   1e060:	18800a0e 	bge	r3,r2,1e08c <__ulp+0x50>
   1e064:	01000c84 	movi	r4,50
   1e068:	0007883a 	mov	r3,zero
   1e06c:	20800516 	blt	r4,r2,1e084 <__ulp+0x48>
   1e070:	01000cc4 	movi	r4,51
   1e074:	2085c83a 	sub	r2,r4,r2
   1e078:	01000044 	movi	r4,1
   1e07c:	2084983a 	sll	r2,r4,r2
   1e080:	f800283a 	ret
   1e084:	00800044 	movi	r2,1
   1e088:	f800283a 	ret
   1e08c:	00c00234 	movhi	r3,8
   1e090:	1887d83a 	sra	r3,r3,r2
   1e094:	0005883a 	mov	r2,zero
   1e098:	f800283a 	ret

0001e09c <__b2d>:
   1e09c:	defffa04 	addi	sp,sp,-24
   1e0a0:	dc000015 	stw	r16,0(sp)
   1e0a4:	24000417 	ldw	r16,16(r4)
   1e0a8:	dc400115 	stw	r17,4(sp)
   1e0ac:	dcc00315 	stw	r19,12(sp)
   1e0b0:	84000144 	addi	r16,r16,5
   1e0b4:	8421883a 	add	r16,r16,r16
   1e0b8:	8421883a 	add	r16,r16,r16
   1e0bc:	2421883a 	add	r16,r4,r16
   1e0c0:	847fff17 	ldw	r17,-4(r16)
   1e0c4:	24c00504 	addi	r19,r4,20
   1e0c8:	dd000415 	stw	r20,16(sp)
   1e0cc:	8809883a 	mov	r4,r17
   1e0d0:	dc800215 	stw	r18,8(sp)
   1e0d4:	2829883a 	mov	r20,r5
   1e0d8:	dfc00515 	stw	ra,20(sp)
   1e0dc:	001d8800 	call	1d880 <__hi0bits>
   1e0e0:	00c00804 	movi	r3,32
   1e0e4:	1887c83a 	sub	r3,r3,r2
   1e0e8:	a0c00015 	stw	r3,0(r20)
   1e0ec:	00c00284 	movi	r3,10
   1e0f0:	84bfff04 	addi	r18,r16,-4
   1e0f4:	18801216 	blt	r3,r2,1e140 <__b2d+0xa4>
   1e0f8:	010002c4 	movi	r4,11
   1e0fc:	2089c83a 	sub	r4,r4,r2
   1e100:	8906d83a 	srl	r3,r17,r4
   1e104:	18cffc34 	orhi	r3,r3,16368
   1e108:	9c80322e 	bgeu	r19,r18,1e1d4 <__b2d+0x138>
   1e10c:	817ffe17 	ldw	r5,-8(r16)
   1e110:	2908d83a 	srl	r4,r5,r4
   1e114:	10800544 	addi	r2,r2,21
   1e118:	88a2983a 	sll	r17,r17,r2
   1e11c:	2444b03a 	or	r2,r4,r17
   1e120:	dfc00517 	ldw	ra,20(sp)
   1e124:	dd000417 	ldw	r20,16(sp)
   1e128:	dcc00317 	ldw	r19,12(sp)
   1e12c:	dc800217 	ldw	r18,8(sp)
   1e130:	dc400117 	ldw	r17,4(sp)
   1e134:	dc000017 	ldw	r16,0(sp)
   1e138:	dec00604 	addi	sp,sp,24
   1e13c:	f800283a 	ret
   1e140:	9c801636 	bltu	r19,r18,1e19c <__b2d+0x100>
   1e144:	113ffd44 	addi	r4,r2,-11
   1e148:	000b883a 	mov	r5,zero
   1e14c:	20001726 	beq	r4,zero,1e1ac <__b2d+0x110>
   1e150:	00c00ac4 	movi	r3,43
   1e154:	1885c83a 	sub	r2,r3,r2
   1e158:	8906983a 	sll	r3,r17,r4
   1e15c:	288cd83a 	srl	r6,r5,r2
   1e160:	18cffc34 	orhi	r3,r3,16368
   1e164:	1986b03a 	or	r3,r3,r6
   1e168:	9c801c2e 	bgeu	r19,r18,1e1dc <__b2d+0x140>
   1e16c:	91bfff17 	ldw	r6,-4(r18)
   1e170:	3084d83a 	srl	r2,r6,r2
   1e174:	2908983a 	sll	r4,r5,r4
   1e178:	1104b03a 	or	r2,r2,r4
   1e17c:	dfc00517 	ldw	ra,20(sp)
   1e180:	dd000417 	ldw	r20,16(sp)
   1e184:	dcc00317 	ldw	r19,12(sp)
   1e188:	dc800217 	ldw	r18,8(sp)
   1e18c:	dc400117 	ldw	r17,4(sp)
   1e190:	dc000017 	ldw	r16,0(sp)
   1e194:	dec00604 	addi	sp,sp,24
   1e198:	f800283a 	ret
   1e19c:	113ffd44 	addi	r4,r2,-11
   1e1a0:	84bffe04 	addi	r18,r16,-8
   1e1a4:	817ffe17 	ldw	r5,-8(r16)
   1e1a8:	203fe91e 	bne	r4,zero,1e150 <__b2d+0xb4>
   1e1ac:	88cffc34 	orhi	r3,r17,16368
   1e1b0:	2805883a 	mov	r2,r5
   1e1b4:	dfc00517 	ldw	ra,20(sp)
   1e1b8:	dd000417 	ldw	r20,16(sp)
   1e1bc:	dcc00317 	ldw	r19,12(sp)
   1e1c0:	dc800217 	ldw	r18,8(sp)
   1e1c4:	dc400117 	ldw	r17,4(sp)
   1e1c8:	dc000017 	ldw	r16,0(sp)
   1e1cc:	dec00604 	addi	sp,sp,24
   1e1d0:	f800283a 	ret
   1e1d4:	0009883a 	mov	r4,zero
   1e1d8:	003fce06 	br	1e114 <__b2d+0x78>
   1e1dc:	0005883a 	mov	r2,zero
   1e1e0:	003fe406 	br	1e174 <__b2d+0xd8>

0001e1e4 <__d2b>:
   1e1e4:	defff804 	addi	sp,sp,-32
   1e1e8:	dc400315 	stw	r17,12(sp)
   1e1ec:	3023883a 	mov	r17,r6
   1e1f0:	dc800415 	stw	r18,16(sp)
   1e1f4:	8824907a 	slli	r18,r17,1
   1e1f8:	dcc00515 	stw	r19,20(sp)
   1e1fc:	2827883a 	mov	r19,r5
   1e200:	9024d57a 	srli	r18,r18,21
   1e204:	01400044 	movi	r5,1
   1e208:	dd000615 	stw	r20,24(sp)
   1e20c:	dc000215 	stw	r16,8(sp)
   1e210:	dfc00715 	stw	ra,28(sp)
   1e214:	3829883a 	mov	r20,r7
   1e218:	001d5980 	call	1d598 <_Balloc>
   1e21c:	1021883a 	mov	r16,r2
   1e220:	00800434 	movhi	r2,16
   1e224:	10bfffc4 	addi	r2,r2,-1
   1e228:	88a2703a 	and	r17,r17,r2
   1e22c:	90000126 	beq	r18,zero,1e234 <__d2b+0x50>
   1e230:	8c400434 	orhi	r17,r17,16
   1e234:	dc400015 	stw	r17,0(sp)
   1e238:	98002226 	beq	r19,zero,1e2c4 <__d2b+0xe0>
   1e23c:	d9000104 	addi	r4,sp,4
   1e240:	dcc00115 	stw	r19,4(sp)
   1e244:	001d8e80 	call	1d8e8 <__lo0bits>
   1e248:	d8c00017 	ldw	r3,0(sp)
   1e24c:	10002d1e 	bne	r2,zero,1e304 <__d2b+0x120>
   1e250:	d9000117 	ldw	r4,4(sp)
   1e254:	81000515 	stw	r4,20(r16)
   1e258:	1823003a 	cmpeq	r17,r3,zero
   1e25c:	01000084 	movi	r4,2
   1e260:	2463c83a 	sub	r17,r4,r17
   1e264:	80c00615 	stw	r3,24(r16)
   1e268:	84400415 	stw	r17,16(r16)
   1e26c:	90001d1e 	bne	r18,zero,1e2e4 <__d2b+0x100>
   1e270:	88c00104 	addi	r3,r17,4
   1e274:	18c7883a 	add	r3,r3,r3
   1e278:	18c7883a 	add	r3,r3,r3
   1e27c:	80c7883a 	add	r3,r16,r3
   1e280:	19000017 	ldw	r4,0(r3)
   1e284:	10bef384 	addi	r2,r2,-1074
   1e288:	a0800015 	stw	r2,0(r20)
   1e28c:	001d8800 	call	1d880 <__hi0bits>
   1e290:	8822917a 	slli	r17,r17,5
   1e294:	d8c00817 	ldw	r3,32(sp)
   1e298:	8885c83a 	sub	r2,r17,r2
   1e29c:	18800015 	stw	r2,0(r3)
   1e2a0:	8005883a 	mov	r2,r16
   1e2a4:	dfc00717 	ldw	ra,28(sp)
   1e2a8:	dd000617 	ldw	r20,24(sp)
   1e2ac:	dcc00517 	ldw	r19,20(sp)
   1e2b0:	dc800417 	ldw	r18,16(sp)
   1e2b4:	dc400317 	ldw	r17,12(sp)
   1e2b8:	dc000217 	ldw	r16,8(sp)
   1e2bc:	dec00804 	addi	sp,sp,32
   1e2c0:	f800283a 	ret
   1e2c4:	d809883a 	mov	r4,sp
   1e2c8:	001d8e80 	call	1d8e8 <__lo0bits>
   1e2cc:	d8c00017 	ldw	r3,0(sp)
   1e2d0:	04400044 	movi	r17,1
   1e2d4:	84400415 	stw	r17,16(r16)
   1e2d8:	80c00515 	stw	r3,20(r16)
   1e2dc:	10800804 	addi	r2,r2,32
   1e2e0:	903fe326 	beq	r18,zero,1e270 <__d2b+0x8c>
   1e2e4:	00c00d44 	movi	r3,53
   1e2e8:	94bef344 	addi	r18,r18,-1075
   1e2ec:	90a5883a 	add	r18,r18,r2
   1e2f0:	1885c83a 	sub	r2,r3,r2
   1e2f4:	d8c00817 	ldw	r3,32(sp)
   1e2f8:	a4800015 	stw	r18,0(r20)
   1e2fc:	18800015 	stw	r2,0(r3)
   1e300:	003fe706 	br	1e2a0 <__d2b+0xbc>
   1e304:	01000804 	movi	r4,32
   1e308:	2089c83a 	sub	r4,r4,r2
   1e30c:	1908983a 	sll	r4,r3,r4
   1e310:	d9400117 	ldw	r5,4(sp)
   1e314:	1886d83a 	srl	r3,r3,r2
   1e318:	2148b03a 	or	r4,r4,r5
   1e31c:	81000515 	stw	r4,20(r16)
   1e320:	d8c00015 	stw	r3,0(sp)
   1e324:	003fcc06 	br	1e258 <__d2b+0x74>

0001e328 <__ratio>:
   1e328:	defff904 	addi	sp,sp,-28
   1e32c:	dc400315 	stw	r17,12(sp)
   1e330:	2823883a 	mov	r17,r5
   1e334:	d9400104 	addi	r5,sp,4
   1e338:	dfc00615 	stw	ra,24(sp)
   1e33c:	dcc00515 	stw	r19,20(sp)
   1e340:	dc800415 	stw	r18,16(sp)
   1e344:	2027883a 	mov	r19,r4
   1e348:	dc000215 	stw	r16,8(sp)
   1e34c:	001e09c0 	call	1e09c <__b2d>
   1e350:	8809883a 	mov	r4,r17
   1e354:	d80b883a 	mov	r5,sp
   1e358:	1025883a 	mov	r18,r2
   1e35c:	1821883a 	mov	r16,r3
   1e360:	001e09c0 	call	1e09c <__b2d>
   1e364:	99400417 	ldw	r5,16(r19)
   1e368:	89000417 	ldw	r4,16(r17)
   1e36c:	d9800117 	ldw	r6,4(sp)
   1e370:	2909c83a 	sub	r4,r5,r4
   1e374:	d9400017 	ldw	r5,0(sp)
   1e378:	2008917a 	slli	r4,r4,5
   1e37c:	314bc83a 	sub	r5,r6,r5
   1e380:	290b883a 	add	r5,r5,r4
   1e384:	01400e0e 	bge	zero,r5,1e3c0 <__ratio+0x98>
   1e388:	280a953a 	slli	r5,r5,20
   1e38c:	2c21883a 	add	r16,r5,r16
   1e390:	9009883a 	mov	r4,r18
   1e394:	800b883a 	mov	r5,r16
   1e398:	100d883a 	mov	r6,r2
   1e39c:	180f883a 	mov	r7,r3
   1e3a0:	00204040 	call	20404 <__divdf3>
   1e3a4:	dfc00617 	ldw	ra,24(sp)
   1e3a8:	dcc00517 	ldw	r19,20(sp)
   1e3ac:	dc800417 	ldw	r18,16(sp)
   1e3b0:	dc400317 	ldw	r17,12(sp)
   1e3b4:	dc000217 	ldw	r16,8(sp)
   1e3b8:	dec00704 	addi	sp,sp,28
   1e3bc:	f800283a 	ret
   1e3c0:	280a953a 	slli	r5,r5,20
   1e3c4:	1947c83a 	sub	r3,r3,r5
   1e3c8:	003ff106 	br	1e390 <__ratio+0x68>

0001e3cc <_mprec_log10>:
   1e3cc:	defffe04 	addi	sp,sp,-8
   1e3d0:	dc000015 	stw	r16,0(sp)
   1e3d4:	dfc00115 	stw	ra,4(sp)
   1e3d8:	008005c4 	movi	r2,23
   1e3dc:	2021883a 	mov	r16,r4
   1e3e0:	11000d0e 	bge	r2,r4,1e418 <_mprec_log10+0x4c>
   1e3e4:	0005883a 	mov	r2,zero
   1e3e8:	00cffc34 	movhi	r3,16368
   1e3ec:	843fffc4 	addi	r16,r16,-1
   1e3f0:	1009883a 	mov	r4,r2
   1e3f4:	180b883a 	mov	r5,r3
   1e3f8:	000d883a 	mov	r6,zero
   1e3fc:	01d00934 	movhi	r7,16420
   1e400:	00201200 	call	20120 <__muldf3>
   1e404:	803ff91e 	bne	r16,zero,1e3ec <_mprec_log10+0x20>
   1e408:	dfc00117 	ldw	ra,4(sp)
   1e40c:	dc000017 	ldw	r16,0(sp)
   1e410:	dec00204 	addi	sp,sp,8
   1e414:	f800283a 	ret
   1e418:	202090fa 	slli	r16,r4,3
   1e41c:	008000f4 	movhi	r2,3
   1e420:	10828104 	addi	r2,r2,2564
   1e424:	1421883a 	add	r16,r2,r16
   1e428:	80800017 	ldw	r2,0(r16)
   1e42c:	80c00117 	ldw	r3,4(r16)
   1e430:	dfc00117 	ldw	ra,4(sp)
   1e434:	dc000017 	ldw	r16,0(sp)
   1e438:	dec00204 	addi	sp,sp,8
   1e43c:	f800283a 	ret

0001e440 <__copybits>:
   1e440:	297fffc4 	addi	r5,r5,-1
   1e444:	31c00417 	ldw	r7,16(r6)
   1e448:	2811d17a 	srai	r8,r5,5
   1e44c:	30800504 	addi	r2,r6,20
   1e450:	39c00144 	addi	r7,r7,5
   1e454:	42000044 	addi	r8,r8,1
   1e458:	39cf883a 	add	r7,r7,r7
   1e45c:	4211883a 	add	r8,r8,r8
   1e460:	39cf883a 	add	r7,r7,r7
   1e464:	4211883a 	add	r8,r8,r8
   1e468:	31cf883a 	add	r7,r6,r7
   1e46c:	2211883a 	add	r8,r4,r8
   1e470:	11c00d2e 	bgeu	r2,r7,1e4a8 <__copybits+0x68>
   1e474:	2007883a 	mov	r3,r4
   1e478:	11400017 	ldw	r5,0(r2)
   1e47c:	18c00104 	addi	r3,r3,4
   1e480:	10800104 	addi	r2,r2,4
   1e484:	197fff15 	stw	r5,-4(r3)
   1e488:	11fffb36 	bltu	r2,r7,1e478 <__copybits+0x38>
   1e48c:	3985c83a 	sub	r2,r7,r6
   1e490:	10bffac4 	addi	r2,r2,-21
   1e494:	1004d0ba 	srli	r2,r2,2
   1e498:	10800044 	addi	r2,r2,1
   1e49c:	1085883a 	add	r2,r2,r2
   1e4a0:	1085883a 	add	r2,r2,r2
   1e4a4:	2089883a 	add	r4,r4,r2
   1e4a8:	2200032e 	bgeu	r4,r8,1e4b8 <__copybits+0x78>
   1e4ac:	20000015 	stw	zero,0(r4)
   1e4b0:	21000104 	addi	r4,r4,4
   1e4b4:	223ffd36 	bltu	r4,r8,1e4ac <__copybits+0x6c>
   1e4b8:	f800283a 	ret

0001e4bc <__any_on>:
   1e4bc:	21800417 	ldw	r6,16(r4)
   1e4c0:	2805d17a 	srai	r2,r5,5
   1e4c4:	20c00504 	addi	r3,r4,20
   1e4c8:	30800f0e 	bge	r6,r2,1e508 <__any_on+0x4c>
   1e4cc:	3005883a 	mov	r2,r6
   1e4d0:	10800144 	addi	r2,r2,5
   1e4d4:	1085883a 	add	r2,r2,r2
   1e4d8:	1085883a 	add	r2,r2,r2
   1e4dc:	2089883a 	add	r4,r4,r2
   1e4e0:	1900152e 	bgeu	r3,r4,1e538 <__any_on+0x7c>
   1e4e4:	20bfff17 	ldw	r2,-4(r4)
   1e4e8:	213fff04 	addi	r4,r4,-4
   1e4ec:	1000041e 	bne	r2,zero,1e500 <__any_on+0x44>
   1e4f0:	1900112e 	bgeu	r3,r4,1e538 <__any_on+0x7c>
   1e4f4:	213fff04 	addi	r4,r4,-4
   1e4f8:	20800017 	ldw	r2,0(r4)
   1e4fc:	103ffc26 	beq	r2,zero,1e4f0 <__any_on+0x34>
   1e500:	00800044 	movi	r2,1
   1e504:	f800283a 	ret
   1e508:	11bff10e 	bge	r2,r6,1e4d0 <__any_on+0x14>
   1e50c:	294007cc 	andi	r5,r5,31
   1e510:	283fef26 	beq	r5,zero,1e4d0 <__any_on+0x14>
   1e514:	11800144 	addi	r6,r2,5
   1e518:	318d883a 	add	r6,r6,r6
   1e51c:	318d883a 	add	r6,r6,r6
   1e520:	218d883a 	add	r6,r4,r6
   1e524:	31800017 	ldw	r6,0(r6)
   1e528:	314ed83a 	srl	r7,r6,r5
   1e52c:	394a983a 	sll	r5,r7,r5
   1e530:	29bff31e 	bne	r5,r6,1e500 <__any_on+0x44>
   1e534:	003fe606 	br	1e4d0 <__any_on+0x14>
   1e538:	0005883a 	mov	r2,zero
   1e53c:	f800283a 	ret

0001e540 <_realloc_r>:
   1e540:	defff504 	addi	sp,sp,-44
   1e544:	dd400615 	stw	r21,24(sp)
   1e548:	dc800315 	stw	r18,12(sp)
   1e54c:	dc000115 	stw	r16,4(sp)
   1e550:	dfc00a15 	stw	ra,40(sp)
   1e554:	df000915 	stw	fp,36(sp)
   1e558:	ddc00815 	stw	r23,32(sp)
   1e55c:	dd800715 	stw	r22,28(sp)
   1e560:	dd000515 	stw	r20,20(sp)
   1e564:	dcc00415 	stw	r19,16(sp)
   1e568:	dc400215 	stw	r17,8(sp)
   1e56c:	2821883a 	mov	r16,r5
   1e570:	202b883a 	mov	r21,r4
   1e574:	3025883a 	mov	r18,r6
   1e578:	28009626 	beq	r5,zero,1e7d4 <_realloc_r+0x294>
   1e57c:	00218340 	call	21834 <__malloc_lock>
   1e580:	80bfff17 	ldw	r2,-4(r16)
   1e584:	04ffff04 	movi	r19,-4
   1e588:	90c002c4 	addi	r3,r18,11
   1e58c:	01000584 	movi	r4,22
   1e590:	85bffe04 	addi	r22,r16,-8
   1e594:	14e6703a 	and	r19,r2,r19
   1e598:	20c0372e 	bgeu	r4,r3,1e678 <_realloc_r+0x138>
   1e59c:	047ffe04 	movi	r17,-8
   1e5a0:	1c62703a 	and	r17,r3,r17
   1e5a4:	8807883a 	mov	r3,r17
   1e5a8:	88005a16 	blt	r17,zero,1e714 <_realloc_r+0x1d4>
   1e5ac:	8c805936 	bltu	r17,r18,1e714 <_realloc_r+0x1d4>
   1e5b0:	98c0340e 	bge	r19,r3,1e684 <_realloc_r+0x144>
   1e5b4:	070000f4 	movhi	fp,3
   1e5b8:	e70c5404 	addi	fp,fp,12624
   1e5bc:	e1400217 	ldw	r5,8(fp)
   1e5c0:	b4c9883a 	add	r4,r22,r19
   1e5c4:	29009026 	beq	r5,r4,1e808 <_realloc_r+0x2c8>
   1e5c8:	21800117 	ldw	r6,4(r4)
   1e5cc:	01ffff84 	movi	r7,-2
   1e5d0:	31ce703a 	and	r7,r6,r7
   1e5d4:	21cf883a 	add	r7,r4,r7
   1e5d8:	39c00117 	ldw	r7,4(r7)
   1e5dc:	39c0004c 	andi	r7,r7,1
   1e5e0:	38004326 	beq	r7,zero,1e6f0 <_realloc_r+0x1b0>
   1e5e4:	000d883a 	mov	r6,zero
   1e5e8:	0009883a 	mov	r4,zero
   1e5ec:	1080004c 	andi	r2,r2,1
   1e5f0:	10005a1e 	bne	r2,zero,1e75c <_realloc_r+0x21c>
   1e5f4:	85fffe17 	ldw	r23,-8(r16)
   1e5f8:	00bfff04 	movi	r2,-4
   1e5fc:	b5efc83a 	sub	r23,r22,r23
   1e600:	b9c00117 	ldw	r7,4(r23)
   1e604:	388e703a 	and	r7,r7,r2
   1e608:	3ccf883a 	add	r7,r7,r19
   1e60c:	20005226 	beq	r4,zero,1e758 <_realloc_r+0x218>
   1e610:	31e9883a 	add	r20,r6,r7
   1e614:	2140c726 	beq	r4,r5,1e934 <_realloc_r+0x3f4>
   1e618:	a0c04f16 	blt	r20,r3,1e758 <_realloc_r+0x218>
   1e61c:	20800317 	ldw	r2,12(r4)
   1e620:	20c00217 	ldw	r3,8(r4)
   1e624:	99bfff04 	addi	r6,r19,-4
   1e628:	01000904 	movi	r4,36
   1e62c:	18800315 	stw	r2,12(r3)
   1e630:	10c00215 	stw	r3,8(r2)
   1e634:	b8c00217 	ldw	r3,8(r23)
   1e638:	b8800317 	ldw	r2,12(r23)
   1e63c:	bc800204 	addi	r18,r23,8
   1e640:	18800315 	stw	r2,12(r3)
   1e644:	10c00215 	stw	r3,8(r2)
   1e648:	2180ed36 	bltu	r4,r6,1ea00 <_realloc_r+0x4c0>
   1e64c:	008004c4 	movi	r2,19
   1e650:	11809b2e 	bgeu	r2,r6,1e8c0 <_realloc_r+0x380>
   1e654:	80800017 	ldw	r2,0(r16)
   1e658:	b8800215 	stw	r2,8(r23)
   1e65c:	80800117 	ldw	r2,4(r16)
   1e660:	b8800315 	stw	r2,12(r23)
   1e664:	008006c4 	movi	r2,27
   1e668:	1180f936 	bltu	r2,r6,1ea50 <_realloc_r+0x510>
   1e66c:	b8800404 	addi	r2,r23,16
   1e670:	80c00204 	addi	r3,r16,8
   1e674:	00009406 	br	1e8c8 <_realloc_r+0x388>
   1e678:	00c00404 	movi	r3,16
   1e67c:	1823883a 	mov	r17,r3
   1e680:	003fca06 	br	1e5ac <_realloc_r+0x6c>
   1e684:	9829883a 	mov	r20,r19
   1e688:	a447c83a 	sub	r3,r20,r17
   1e68c:	010003c4 	movi	r4,15
   1e690:	1080004c 	andi	r2,r2,1
   1e694:	20c02336 	bltu	r4,r3,1e724 <_realloc_r+0x1e4>
   1e698:	1504b03a 	or	r2,r2,r20
   1e69c:	b0800115 	stw	r2,4(r22)
   1e6a0:	b52d883a 	add	r22,r22,r20
   1e6a4:	b0800117 	ldw	r2,4(r22)
   1e6a8:	10800054 	ori	r2,r2,1
   1e6ac:	b0800115 	stw	r2,4(r22)
   1e6b0:	a809883a 	mov	r4,r21
   1e6b4:	00218540 	call	21854 <__malloc_unlock>
   1e6b8:	8025883a 	mov	r18,r16
   1e6bc:	9005883a 	mov	r2,r18
   1e6c0:	dfc00a17 	ldw	ra,40(sp)
   1e6c4:	df000917 	ldw	fp,36(sp)
   1e6c8:	ddc00817 	ldw	r23,32(sp)
   1e6cc:	dd800717 	ldw	r22,28(sp)
   1e6d0:	dd400617 	ldw	r21,24(sp)
   1e6d4:	dd000517 	ldw	r20,20(sp)
   1e6d8:	dcc00417 	ldw	r19,16(sp)
   1e6dc:	dc800317 	ldw	r18,12(sp)
   1e6e0:	dc400217 	ldw	r17,8(sp)
   1e6e4:	dc000117 	ldw	r16,4(sp)
   1e6e8:	dec00b04 	addi	sp,sp,44
   1e6ec:	f800283a 	ret
   1e6f0:	01ffff04 	movi	r7,-4
   1e6f4:	31cc703a 	and	r6,r6,r7
   1e6f8:	34e9883a 	add	r20,r6,r19
   1e6fc:	a0ffbb16 	blt	r20,r3,1e5ec <_realloc_r+0xac>
   1e700:	20c00317 	ldw	r3,12(r4)
   1e704:	21000217 	ldw	r4,8(r4)
   1e708:	20c00315 	stw	r3,12(r4)
   1e70c:	19000215 	stw	r4,8(r3)
   1e710:	003fdd06 	br	1e688 <_realloc_r+0x148>
   1e714:	00800304 	movi	r2,12
   1e718:	a8800015 	stw	r2,0(r21)
   1e71c:	0025883a 	mov	r18,zero
   1e720:	003fe606 	br	1e6bc <_realloc_r+0x17c>
   1e724:	1444b03a 	or	r2,r2,r17
   1e728:	b0800115 	stw	r2,4(r22)
   1e72c:	b44b883a 	add	r5,r22,r17
   1e730:	18800054 	ori	r2,r3,1
   1e734:	28800115 	stw	r2,4(r5)
   1e738:	28c7883a 	add	r3,r5,r3
   1e73c:	18800117 	ldw	r2,4(r3)
   1e740:	a809883a 	mov	r4,r21
   1e744:	29400204 	addi	r5,r5,8
   1e748:	10800054 	ori	r2,r2,1
   1e74c:	18800115 	stw	r2,4(r3)
   1e750:	001c05c0 	call	1c05c <_free_r>
   1e754:	003fd606 	br	1e6b0 <_realloc_r+0x170>
   1e758:	38c0330e 	bge	r7,r3,1e828 <_realloc_r+0x2e8>
   1e75c:	900b883a 	mov	r5,r18
   1e760:	a809883a 	mov	r4,r21
   1e764:	001cbf40 	call	1cbf4 <_malloc_r>
   1e768:	1025883a 	mov	r18,r2
   1e76c:	10001626 	beq	r2,zero,1e7c8 <_realloc_r+0x288>
   1e770:	80bfff17 	ldw	r2,-4(r16)
   1e774:	00ffff84 	movi	r3,-2
   1e778:	913ffe04 	addi	r4,r18,-8
   1e77c:	10c6703a 	and	r3,r2,r3
   1e780:	b0c7883a 	add	r3,r22,r3
   1e784:	20c09926 	beq	r4,r3,1e9ec <_realloc_r+0x4ac>
   1e788:	99bfff04 	addi	r6,r19,-4
   1e78c:	00800904 	movi	r2,36
   1e790:	11806436 	bltu	r2,r6,1e924 <_realloc_r+0x3e4>
   1e794:	00c004c4 	movi	r3,19
   1e798:	19804036 	bltu	r3,r6,1e89c <_realloc_r+0x35c>
   1e79c:	9005883a 	mov	r2,r18
   1e7a0:	8007883a 	mov	r3,r16
   1e7a4:	19000017 	ldw	r4,0(r3)
   1e7a8:	11000015 	stw	r4,0(r2)
   1e7ac:	19000117 	ldw	r4,4(r3)
   1e7b0:	11000115 	stw	r4,4(r2)
   1e7b4:	18c00217 	ldw	r3,8(r3)
   1e7b8:	10c00215 	stw	r3,8(r2)
   1e7bc:	a809883a 	mov	r4,r21
   1e7c0:	800b883a 	mov	r5,r16
   1e7c4:	001c05c0 	call	1c05c <_free_r>
   1e7c8:	a809883a 	mov	r4,r21
   1e7cc:	00218540 	call	21854 <__malloc_unlock>
   1e7d0:	003fba06 	br	1e6bc <_realloc_r+0x17c>
   1e7d4:	300b883a 	mov	r5,r6
   1e7d8:	dfc00a17 	ldw	ra,40(sp)
   1e7dc:	df000917 	ldw	fp,36(sp)
   1e7e0:	ddc00817 	ldw	r23,32(sp)
   1e7e4:	dd800717 	ldw	r22,28(sp)
   1e7e8:	dd400617 	ldw	r21,24(sp)
   1e7ec:	dd000517 	ldw	r20,20(sp)
   1e7f0:	dcc00417 	ldw	r19,16(sp)
   1e7f4:	dc800317 	ldw	r18,12(sp)
   1e7f8:	dc400217 	ldw	r17,8(sp)
   1e7fc:	dc000117 	ldw	r16,4(sp)
   1e800:	dec00b04 	addi	sp,sp,44
   1e804:	001cbf41 	jmpi	1cbf4 <_malloc_r>
   1e808:	29800117 	ldw	r6,4(r5)
   1e80c:	013fff04 	movi	r4,-4
   1e810:	89c00404 	addi	r7,r17,16
   1e814:	310c703a 	and	r6,r6,r4
   1e818:	34c9883a 	add	r4,r6,r19
   1e81c:	21c0340e 	bge	r4,r7,1e8f0 <_realloc_r+0x3b0>
   1e820:	2809883a 	mov	r4,r5
   1e824:	003f7106 	br	1e5ec <_realloc_r+0xac>
   1e828:	b8800317 	ldw	r2,12(r23)
   1e82c:	b8c00217 	ldw	r3,8(r23)
   1e830:	99bfff04 	addi	r6,r19,-4
   1e834:	01000904 	movi	r4,36
   1e838:	18800315 	stw	r2,12(r3)
   1e83c:	10c00215 	stw	r3,8(r2)
   1e840:	bc800204 	addi	r18,r23,8
   1e844:	21807836 	bltu	r4,r6,1ea28 <_realloc_r+0x4e8>
   1e848:	008004c4 	movi	r2,19
   1e84c:	1180732e 	bgeu	r2,r6,1ea1c <_realloc_r+0x4dc>
   1e850:	80800017 	ldw	r2,0(r16)
   1e854:	b8800215 	stw	r2,8(r23)
   1e858:	80800117 	ldw	r2,4(r16)
   1e85c:	b8800315 	stw	r2,12(r23)
   1e860:	008006c4 	movi	r2,27
   1e864:	11808936 	bltu	r2,r6,1ea8c <_realloc_r+0x54c>
   1e868:	b8800404 	addi	r2,r23,16
   1e86c:	80c00204 	addi	r3,r16,8
   1e870:	19000017 	ldw	r4,0(r3)
   1e874:	9021883a 	mov	r16,r18
   1e878:	3829883a 	mov	r20,r7
   1e87c:	11000015 	stw	r4,0(r2)
   1e880:	19000117 	ldw	r4,4(r3)
   1e884:	b82d883a 	mov	r22,r23
   1e888:	11000115 	stw	r4,4(r2)
   1e88c:	18c00217 	ldw	r3,8(r3)
   1e890:	10c00215 	stw	r3,8(r2)
   1e894:	b8800117 	ldw	r2,4(r23)
   1e898:	003f7b06 	br	1e688 <_realloc_r+0x148>
   1e89c:	80c00017 	ldw	r3,0(r16)
   1e8a0:	90c00015 	stw	r3,0(r18)
   1e8a4:	80c00117 	ldw	r3,4(r16)
   1e8a8:	90c00115 	stw	r3,4(r18)
   1e8ac:	00c006c4 	movi	r3,27
   1e8b0:	19804636 	bltu	r3,r6,1e9cc <_realloc_r+0x48c>
   1e8b4:	90800204 	addi	r2,r18,8
   1e8b8:	80c00204 	addi	r3,r16,8
   1e8bc:	003fb906 	br	1e7a4 <_realloc_r+0x264>
   1e8c0:	9005883a 	mov	r2,r18
   1e8c4:	8007883a 	mov	r3,r16
   1e8c8:	19000017 	ldw	r4,0(r3)
   1e8cc:	9021883a 	mov	r16,r18
   1e8d0:	b82d883a 	mov	r22,r23
   1e8d4:	11000015 	stw	r4,0(r2)
   1e8d8:	19000117 	ldw	r4,4(r3)
   1e8dc:	11000115 	stw	r4,4(r2)
   1e8e0:	18c00217 	ldw	r3,8(r3)
   1e8e4:	10c00215 	stw	r3,8(r2)
   1e8e8:	b8800117 	ldw	r2,4(r23)
   1e8ec:	003f6606 	br	1e688 <_realloc_r+0x148>
   1e8f0:	2445c83a 	sub	r2,r4,r17
   1e8f4:	b46d883a 	add	r22,r22,r17
   1e8f8:	10800054 	ori	r2,r2,1
   1e8fc:	b0800115 	stw	r2,4(r22)
   1e900:	80bfff17 	ldw	r2,-4(r16)
   1e904:	a809883a 	mov	r4,r21
   1e908:	e5800215 	stw	r22,8(fp)
   1e90c:	1080004c 	andi	r2,r2,1
   1e910:	88a2b03a 	or	r17,r17,r2
   1e914:	847fff15 	stw	r17,-4(r16)
   1e918:	00218540 	call	21854 <__malloc_unlock>
   1e91c:	8025883a 	mov	r18,r16
   1e920:	003f6606 	br	1e6bc <_realloc_r+0x17c>
   1e924:	9009883a 	mov	r4,r18
   1e928:	800b883a 	mov	r5,r16
   1e92c:	001d4700 	call	1d470 <memmove>
   1e930:	003fa206 	br	1e7bc <_realloc_r+0x27c>
   1e934:	88800404 	addi	r2,r17,16
   1e938:	a0bf8716 	blt	r20,r2,1e758 <_realloc_r+0x218>
   1e93c:	b8800317 	ldw	r2,12(r23)
   1e940:	b8c00217 	ldw	r3,8(r23)
   1e944:	99bfff04 	addi	r6,r19,-4
   1e948:	01000904 	movi	r4,36
   1e94c:	18800315 	stw	r2,12(r3)
   1e950:	10c00215 	stw	r3,8(r2)
   1e954:	bc800204 	addi	r18,r23,8
   1e958:	21806536 	bltu	r4,r6,1eaf0 <_realloc_r+0x5b0>
   1e95c:	008004c4 	movi	r2,19
   1e960:	1180592e 	bgeu	r2,r6,1eac8 <_realloc_r+0x588>
   1e964:	80800017 	ldw	r2,0(r16)
   1e968:	b8800215 	stw	r2,8(r23)
   1e96c:	80800117 	ldw	r2,4(r16)
   1e970:	b8800315 	stw	r2,12(r23)
   1e974:	008006c4 	movi	r2,27
   1e978:	11806136 	bltu	r2,r6,1eb00 <_realloc_r+0x5c0>
   1e97c:	b8800404 	addi	r2,r23,16
   1e980:	80c00204 	addi	r3,r16,8
   1e984:	19000017 	ldw	r4,0(r3)
   1e988:	11000015 	stw	r4,0(r2)
   1e98c:	19000117 	ldw	r4,4(r3)
   1e990:	11000115 	stw	r4,4(r2)
   1e994:	18c00217 	ldw	r3,8(r3)
   1e998:	10c00215 	stw	r3,8(r2)
   1e99c:	a447c83a 	sub	r3,r20,r17
   1e9a0:	bc45883a 	add	r2,r23,r17
   1e9a4:	18c00054 	ori	r3,r3,1
   1e9a8:	10c00115 	stw	r3,4(r2)
   1e9ac:	b8c00117 	ldw	r3,4(r23)
   1e9b0:	e0800215 	stw	r2,8(fp)
   1e9b4:	a809883a 	mov	r4,r21
   1e9b8:	1880004c 	andi	r2,r3,1
   1e9bc:	88a2b03a 	or	r17,r17,r2
   1e9c0:	bc400115 	stw	r17,4(r23)
   1e9c4:	00218540 	call	21854 <__malloc_unlock>
   1e9c8:	003f3c06 	br	1e6bc <_realloc_r+0x17c>
   1e9cc:	80c00217 	ldw	r3,8(r16)
   1e9d0:	90c00215 	stw	r3,8(r18)
   1e9d4:	80c00317 	ldw	r3,12(r16)
   1e9d8:	90c00315 	stw	r3,12(r18)
   1e9dc:	30802426 	beq	r6,r2,1ea70 <_realloc_r+0x530>
   1e9e0:	90800404 	addi	r2,r18,16
   1e9e4:	80c00404 	addi	r3,r16,16
   1e9e8:	003f6e06 	br	1e7a4 <_realloc_r+0x264>
   1e9ec:	953fff17 	ldw	r20,-4(r18)
   1e9f0:	00ffff04 	movi	r3,-4
   1e9f4:	a0e8703a 	and	r20,r20,r3
   1e9f8:	a4e9883a 	add	r20,r20,r19
   1e9fc:	003f2206 	br	1e688 <_realloc_r+0x148>
   1ea00:	800b883a 	mov	r5,r16
   1ea04:	9009883a 	mov	r4,r18
   1ea08:	001d4700 	call	1d470 <memmove>
   1ea0c:	9021883a 	mov	r16,r18
   1ea10:	b8800117 	ldw	r2,4(r23)
   1ea14:	b82d883a 	mov	r22,r23
   1ea18:	003f1b06 	br	1e688 <_realloc_r+0x148>
   1ea1c:	9005883a 	mov	r2,r18
   1ea20:	8007883a 	mov	r3,r16
   1ea24:	003f9206 	br	1e870 <_realloc_r+0x330>
   1ea28:	800b883a 	mov	r5,r16
   1ea2c:	9009883a 	mov	r4,r18
   1ea30:	d9c00015 	stw	r7,0(sp)
   1ea34:	001d4700 	call	1d470 <memmove>
   1ea38:	d9c00017 	ldw	r7,0(sp)
   1ea3c:	9021883a 	mov	r16,r18
   1ea40:	b8800117 	ldw	r2,4(r23)
   1ea44:	3829883a 	mov	r20,r7
   1ea48:	b82d883a 	mov	r22,r23
   1ea4c:	003f0e06 	br	1e688 <_realloc_r+0x148>
   1ea50:	80800217 	ldw	r2,8(r16)
   1ea54:	b8800415 	stw	r2,16(r23)
   1ea58:	80800317 	ldw	r2,12(r16)
   1ea5c:	b8800515 	stw	r2,20(r23)
   1ea60:	31001226 	beq	r6,r4,1eaac <_realloc_r+0x56c>
   1ea64:	b8800604 	addi	r2,r23,24
   1ea68:	80c00404 	addi	r3,r16,16
   1ea6c:	003f9606 	br	1e8c8 <_realloc_r+0x388>
   1ea70:	81000417 	ldw	r4,16(r16)
   1ea74:	90800604 	addi	r2,r18,24
   1ea78:	80c00604 	addi	r3,r16,24
   1ea7c:	91000415 	stw	r4,16(r18)
   1ea80:	81000517 	ldw	r4,20(r16)
   1ea84:	91000515 	stw	r4,20(r18)
   1ea88:	003f4606 	br	1e7a4 <_realloc_r+0x264>
   1ea8c:	80800217 	ldw	r2,8(r16)
   1ea90:	b8800415 	stw	r2,16(r23)
   1ea94:	80800317 	ldw	r2,12(r16)
   1ea98:	b8800515 	stw	r2,20(r23)
   1ea9c:	31000d26 	beq	r6,r4,1ead4 <_realloc_r+0x594>
   1eaa0:	b8800604 	addi	r2,r23,24
   1eaa4:	80c00404 	addi	r3,r16,16
   1eaa8:	003f7106 	br	1e870 <_realloc_r+0x330>
   1eaac:	81000417 	ldw	r4,16(r16)
   1eab0:	b8800804 	addi	r2,r23,32
   1eab4:	80c00604 	addi	r3,r16,24
   1eab8:	b9000615 	stw	r4,24(r23)
   1eabc:	81000517 	ldw	r4,20(r16)
   1eac0:	b9000715 	stw	r4,28(r23)
   1eac4:	003f8006 	br	1e8c8 <_realloc_r+0x388>
   1eac8:	9005883a 	mov	r2,r18
   1eacc:	8007883a 	mov	r3,r16
   1ead0:	003fac06 	br	1e984 <_realloc_r+0x444>
   1ead4:	81000417 	ldw	r4,16(r16)
   1ead8:	b8800804 	addi	r2,r23,32
   1eadc:	80c00604 	addi	r3,r16,24
   1eae0:	b9000615 	stw	r4,24(r23)
   1eae4:	81000517 	ldw	r4,20(r16)
   1eae8:	b9000715 	stw	r4,28(r23)
   1eaec:	003f6006 	br	1e870 <_realloc_r+0x330>
   1eaf0:	9009883a 	mov	r4,r18
   1eaf4:	800b883a 	mov	r5,r16
   1eaf8:	001d4700 	call	1d470 <memmove>
   1eafc:	003fa706 	br	1e99c <_realloc_r+0x45c>
   1eb00:	80800217 	ldw	r2,8(r16)
   1eb04:	b8800415 	stw	r2,16(r23)
   1eb08:	80800317 	ldw	r2,12(r16)
   1eb0c:	b8800515 	stw	r2,20(r23)
   1eb10:	31000326 	beq	r6,r4,1eb20 <_realloc_r+0x5e0>
   1eb14:	b8800604 	addi	r2,r23,24
   1eb18:	80c00404 	addi	r3,r16,16
   1eb1c:	003f9906 	br	1e984 <_realloc_r+0x444>
   1eb20:	81000417 	ldw	r4,16(r16)
   1eb24:	b8800804 	addi	r2,r23,32
   1eb28:	80c00604 	addi	r3,r16,24
   1eb2c:	b9000615 	stw	r4,24(r23)
   1eb30:	81000517 	ldw	r4,20(r16)
   1eb34:	b9000715 	stw	r4,28(r23)
   1eb38:	003f9206 	br	1e984 <_realloc_r+0x444>

0001eb3c <__isinfd>:
   1eb3c:	0105c83a 	sub	r2,zero,r4
   1eb40:	1108b03a 	or	r4,r2,r4
   1eb44:	2004d7fa 	srli	r2,r4,31
   1eb48:	00e00034 	movhi	r3,32768
   1eb4c:	18ffffc4 	addi	r3,r3,-1
   1eb50:	28ca703a 	and	r5,r5,r3
   1eb54:	1144b03a 	or	r2,r2,r5
   1eb58:	00dffc34 	movhi	r3,32752
   1eb5c:	1885c83a 	sub	r2,r3,r2
   1eb60:	0087c83a 	sub	r3,zero,r2
   1eb64:	1884b03a 	or	r2,r3,r2
   1eb68:	1005d7fa 	srai	r2,r2,31
   1eb6c:	10800044 	addi	r2,r2,1
   1eb70:	f800283a 	ret

0001eb74 <__isnand>:
   1eb74:	0105c83a 	sub	r2,zero,r4
   1eb78:	1108b03a 	or	r4,r2,r4
   1eb7c:	2004d7fa 	srli	r2,r4,31
   1eb80:	00e00034 	movhi	r3,32768
   1eb84:	18ffffc4 	addi	r3,r3,-1
   1eb88:	28ca703a 	and	r5,r5,r3
   1eb8c:	1144b03a 	or	r2,r2,r5
   1eb90:	00dffc34 	movhi	r3,32752
   1eb94:	1885c83a 	sub	r2,r3,r2
   1eb98:	1004d7fa 	srli	r2,r2,31
   1eb9c:	f800283a 	ret

0001eba0 <_sbrk_r>:
   1eba0:	defffd04 	addi	sp,sp,-12
   1eba4:	dc400115 	stw	r17,4(sp)
   1eba8:	dc000015 	stw	r16,0(sp)
   1ebac:	2023883a 	mov	r17,r4
   1ebb0:	040000f4 	movhi	r16,3
   1ebb4:	841bfa04 	addi	r16,r16,28648
   1ebb8:	2809883a 	mov	r4,r5
   1ebbc:	dfc00215 	stw	ra,8(sp)
   1ebc0:	80000015 	stw	zero,0(r16)
   1ebc4:	0021a540 	call	21a54 <sbrk>
   1ebc8:	00ffffc4 	movi	r3,-1
   1ebcc:	10c00526 	beq	r2,r3,1ebe4 <_sbrk_r+0x44>
   1ebd0:	dfc00217 	ldw	ra,8(sp)
   1ebd4:	dc400117 	ldw	r17,4(sp)
   1ebd8:	dc000017 	ldw	r16,0(sp)
   1ebdc:	dec00304 	addi	sp,sp,12
   1ebe0:	f800283a 	ret
   1ebe4:	80c00017 	ldw	r3,0(r16)
   1ebe8:	183ff926 	beq	r3,zero,1ebd0 <_sbrk_r+0x30>
   1ebec:	88c00015 	stw	r3,0(r17)
   1ebf0:	dfc00217 	ldw	ra,8(sp)
   1ebf4:	dc400117 	ldw	r17,4(sp)
   1ebf8:	dc000017 	ldw	r16,0(sp)
   1ebfc:	dec00304 	addi	sp,sp,12
   1ec00:	f800283a 	ret

0001ec04 <__sread>:
   1ec04:	defffe04 	addi	sp,sp,-8
   1ec08:	dc000015 	stw	r16,0(sp)
   1ec0c:	2821883a 	mov	r16,r5
   1ec10:	2940038f 	ldh	r5,14(r5)
   1ec14:	dfc00115 	stw	ra,4(sp)
   1ec18:	001f1580 	call	1f158 <_read_r>
   1ec1c:	10000716 	blt	r2,zero,1ec3c <__sread+0x38>
   1ec20:	80c01417 	ldw	r3,80(r16)
   1ec24:	1887883a 	add	r3,r3,r2
   1ec28:	80c01415 	stw	r3,80(r16)
   1ec2c:	dfc00117 	ldw	ra,4(sp)
   1ec30:	dc000017 	ldw	r16,0(sp)
   1ec34:	dec00204 	addi	sp,sp,8
   1ec38:	f800283a 	ret
   1ec3c:	80c0030b 	ldhu	r3,12(r16)
   1ec40:	18fbffcc 	andi	r3,r3,61439
   1ec44:	80c0030d 	sth	r3,12(r16)
   1ec48:	dfc00117 	ldw	ra,4(sp)
   1ec4c:	dc000017 	ldw	r16,0(sp)
   1ec50:	dec00204 	addi	sp,sp,8
   1ec54:	f800283a 	ret

0001ec58 <__swrite>:
   1ec58:	2880030b 	ldhu	r2,12(r5)
   1ec5c:	defffb04 	addi	sp,sp,-20
   1ec60:	dcc00315 	stw	r19,12(sp)
   1ec64:	10c0400c 	andi	r3,r2,256
   1ec68:	18ffffcc 	andi	r3,r3,65535
   1ec6c:	18e0001c 	xori	r3,r3,32768
   1ec70:	dc800215 	stw	r18,8(sp)
   1ec74:	dc400115 	stw	r17,4(sp)
   1ec78:	dc000015 	stw	r16,0(sp)
   1ec7c:	dfc00415 	stw	ra,16(sp)
   1ec80:	18e00004 	addi	r3,r3,-32768
   1ec84:	2821883a 	mov	r16,r5
   1ec88:	2027883a 	mov	r19,r4
   1ec8c:	3025883a 	mov	r18,r6
   1ec90:	3823883a 	mov	r17,r7
   1ec94:	18000526 	beq	r3,zero,1ecac <__swrite+0x54>
   1ec98:	2940038f 	ldh	r5,14(r5)
   1ec9c:	000d883a 	mov	r6,zero
   1eca0:	01c00084 	movi	r7,2
   1eca4:	001f0ec0 	call	1f0ec <_lseek_r>
   1eca8:	8080030b 	ldhu	r2,12(r16)
   1ecac:	8140038f 	ldh	r5,14(r16)
   1ecb0:	10bbffcc 	andi	r2,r2,61439
   1ecb4:	9809883a 	mov	r4,r19
   1ecb8:	900d883a 	mov	r6,r18
   1ecbc:	880f883a 	mov	r7,r17
   1ecc0:	8080030d 	sth	r2,12(r16)
   1ecc4:	dfc00417 	ldw	ra,16(sp)
   1ecc8:	dcc00317 	ldw	r19,12(sp)
   1eccc:	dc800217 	ldw	r18,8(sp)
   1ecd0:	dc400117 	ldw	r17,4(sp)
   1ecd4:	dc000017 	ldw	r16,0(sp)
   1ecd8:	dec00504 	addi	sp,sp,20
   1ecdc:	001ed441 	jmpi	1ed44 <_write_r>

0001ece0 <__sseek>:
   1ece0:	defffe04 	addi	sp,sp,-8
   1ece4:	dc000015 	stw	r16,0(sp)
   1ece8:	2821883a 	mov	r16,r5
   1ecec:	2940038f 	ldh	r5,14(r5)
   1ecf0:	dfc00115 	stw	ra,4(sp)
   1ecf4:	001f0ec0 	call	1f0ec <_lseek_r>
   1ecf8:	00ffffc4 	movi	r3,-1
   1ecfc:	10c00826 	beq	r2,r3,1ed20 <__sseek+0x40>
   1ed00:	80c0030b 	ldhu	r3,12(r16)
   1ed04:	80801415 	stw	r2,80(r16)
   1ed08:	18c40014 	ori	r3,r3,4096
   1ed0c:	80c0030d 	sth	r3,12(r16)
   1ed10:	dfc00117 	ldw	ra,4(sp)
   1ed14:	dc000017 	ldw	r16,0(sp)
   1ed18:	dec00204 	addi	sp,sp,8
   1ed1c:	f800283a 	ret
   1ed20:	80c0030b 	ldhu	r3,12(r16)
   1ed24:	18fbffcc 	andi	r3,r3,61439
   1ed28:	80c0030d 	sth	r3,12(r16)
   1ed2c:	dfc00117 	ldw	ra,4(sp)
   1ed30:	dc000017 	ldw	r16,0(sp)
   1ed34:	dec00204 	addi	sp,sp,8
   1ed38:	f800283a 	ret

0001ed3c <__sclose>:
   1ed3c:	2940038f 	ldh	r5,14(r5)
   1ed40:	001ee6c1 	jmpi	1ee6c <_close_r>

0001ed44 <_write_r>:
   1ed44:	defffd04 	addi	sp,sp,-12
   1ed48:	dc400115 	stw	r17,4(sp)
   1ed4c:	dc000015 	stw	r16,0(sp)
   1ed50:	2023883a 	mov	r17,r4
   1ed54:	040000f4 	movhi	r16,3
   1ed58:	841bfa04 	addi	r16,r16,28648
   1ed5c:	2809883a 	mov	r4,r5
   1ed60:	300b883a 	mov	r5,r6
   1ed64:	380d883a 	mov	r6,r7
   1ed68:	dfc00215 	stw	ra,8(sp)
   1ed6c:	80000015 	stw	zero,0(r16)
   1ed70:	0021dfc0 	call	21dfc <write>
   1ed74:	00ffffc4 	movi	r3,-1
   1ed78:	10c00526 	beq	r2,r3,1ed90 <_write_r+0x4c>
   1ed7c:	dfc00217 	ldw	ra,8(sp)
   1ed80:	dc400117 	ldw	r17,4(sp)
   1ed84:	dc000017 	ldw	r16,0(sp)
   1ed88:	dec00304 	addi	sp,sp,12
   1ed8c:	f800283a 	ret
   1ed90:	80c00017 	ldw	r3,0(r16)
   1ed94:	183ff926 	beq	r3,zero,1ed7c <_write_r+0x38>
   1ed98:	88c00015 	stw	r3,0(r17)
   1ed9c:	dfc00217 	ldw	ra,8(sp)
   1eda0:	dc400117 	ldw	r17,4(sp)
   1eda4:	dc000017 	ldw	r16,0(sp)
   1eda8:	dec00304 	addi	sp,sp,12
   1edac:	f800283a 	ret

0001edb0 <_calloc_r>:
   1edb0:	314b383a 	mul	r5,r6,r5
   1edb4:	defffe04 	addi	sp,sp,-8
   1edb8:	dc000015 	stw	r16,0(sp)
   1edbc:	dfc00115 	stw	ra,4(sp)
   1edc0:	001cbf40 	call	1cbf4 <_malloc_r>
   1edc4:	1021883a 	mov	r16,r2
   1edc8:	10000c26 	beq	r2,zero,1edfc <_calloc_r+0x4c>
   1edcc:	11bfff17 	ldw	r6,-4(r2)
   1edd0:	00ffff04 	movi	r3,-4
   1edd4:	00800904 	movi	r2,36
   1edd8:	30cc703a 	and	r6,r6,r3
   1eddc:	30cd883a 	add	r6,r6,r3
   1ede0:	11801436 	bltu	r2,r6,1ee34 <_calloc_r+0x84>
   1ede4:	00c004c4 	movi	r3,19
   1ede8:	19800936 	bltu	r3,r6,1ee10 <_calloc_r+0x60>
   1edec:	8005883a 	mov	r2,r16
   1edf0:	10000015 	stw	zero,0(r2)
   1edf4:	10000115 	stw	zero,4(r2)
   1edf8:	10000215 	stw	zero,8(r2)
   1edfc:	8005883a 	mov	r2,r16
   1ee00:	dfc00117 	ldw	ra,4(sp)
   1ee04:	dc000017 	ldw	r16,0(sp)
   1ee08:	dec00204 	addi	sp,sp,8
   1ee0c:	f800283a 	ret
   1ee10:	80000015 	stw	zero,0(r16)
   1ee14:	80000115 	stw	zero,4(r16)
   1ee18:	00c006c4 	movi	r3,27
   1ee1c:	19800d2e 	bgeu	r3,r6,1ee54 <_calloc_r+0xa4>
   1ee20:	80000215 	stw	zero,8(r16)
   1ee24:	80000315 	stw	zero,12(r16)
   1ee28:	30800c26 	beq	r6,r2,1ee5c <_calloc_r+0xac>
   1ee2c:	80800404 	addi	r2,r16,16
   1ee30:	003fef06 	br	1edf0 <_calloc_r+0x40>
   1ee34:	8009883a 	mov	r4,r16
   1ee38:	000b883a 	mov	r5,zero
   1ee3c:	0017b3c0 	call	17b3c <memset>
   1ee40:	8005883a 	mov	r2,r16
   1ee44:	dfc00117 	ldw	ra,4(sp)
   1ee48:	dc000017 	ldw	r16,0(sp)
   1ee4c:	dec00204 	addi	sp,sp,8
   1ee50:	f800283a 	ret
   1ee54:	80800204 	addi	r2,r16,8
   1ee58:	003fe506 	br	1edf0 <_calloc_r+0x40>
   1ee5c:	80000415 	stw	zero,16(r16)
   1ee60:	80000515 	stw	zero,20(r16)
   1ee64:	80800604 	addi	r2,r16,24
   1ee68:	003fe106 	br	1edf0 <_calloc_r+0x40>

0001ee6c <_close_r>:
   1ee6c:	defffd04 	addi	sp,sp,-12
   1ee70:	dc400115 	stw	r17,4(sp)
   1ee74:	dc000015 	stw	r16,0(sp)
   1ee78:	2023883a 	mov	r17,r4
   1ee7c:	040000f4 	movhi	r16,3
   1ee80:	841bfa04 	addi	r16,r16,28648
   1ee84:	2809883a 	mov	r4,r5
   1ee88:	dfc00215 	stw	ra,8(sp)
   1ee8c:	80000015 	stw	zero,0(r16)
   1ee90:	00212d00 	call	212d0 <close>
   1ee94:	00ffffc4 	movi	r3,-1
   1ee98:	10c00526 	beq	r2,r3,1eeb0 <_close_r+0x44>
   1ee9c:	dfc00217 	ldw	ra,8(sp)
   1eea0:	dc400117 	ldw	r17,4(sp)
   1eea4:	dc000017 	ldw	r16,0(sp)
   1eea8:	dec00304 	addi	sp,sp,12
   1eeac:	f800283a 	ret
   1eeb0:	80c00017 	ldw	r3,0(r16)
   1eeb4:	183ff926 	beq	r3,zero,1ee9c <_close_r+0x30>
   1eeb8:	88c00015 	stw	r3,0(r17)
   1eebc:	dfc00217 	ldw	ra,8(sp)
   1eec0:	dc400117 	ldw	r17,4(sp)
   1eec4:	dc000017 	ldw	r16,0(sp)
   1eec8:	dec00304 	addi	sp,sp,12
   1eecc:	f800283a 	ret

0001eed0 <_fclose_r>:
   1eed0:	defffc04 	addi	sp,sp,-16
   1eed4:	dc400115 	stw	r17,4(sp)
   1eed8:	dc000015 	stw	r16,0(sp)
   1eedc:	dfc00315 	stw	ra,12(sp)
   1eee0:	dc800215 	stw	r18,8(sp)
   1eee4:	2821883a 	mov	r16,r5
   1eee8:	2023883a 	mov	r17,r4
   1eeec:	28003426 	beq	r5,zero,1efc0 <_fclose_r+0xf0>
   1eef0:	001bee00 	call	1bee0 <__sfp_lock_acquire>
   1eef4:	88000226 	beq	r17,zero,1ef00 <_fclose_r+0x30>
   1eef8:	88800e17 	ldw	r2,56(r17)
   1eefc:	10003826 	beq	r2,zero,1efe0 <_fclose_r+0x110>
   1ef00:	8080030f 	ldh	r2,12(r16)
   1ef04:	10002526 	beq	r2,zero,1ef9c <_fclose_r+0xcc>
   1ef08:	8809883a 	mov	r4,r17
   1ef0c:	800b883a 	mov	r5,r16
   1ef10:	001ba300 	call	1ba30 <_fflush_r>
   1ef14:	1025883a 	mov	r18,r2
   1ef18:	80800b17 	ldw	r2,44(r16)
   1ef1c:	10000426 	beq	r2,zero,1ef30 <_fclose_r+0x60>
   1ef20:	81400717 	ldw	r5,28(r16)
   1ef24:	8809883a 	mov	r4,r17
   1ef28:	103ee83a 	callr	r2
   1ef2c:	10003516 	blt	r2,zero,1f004 <_fclose_r+0x134>
   1ef30:	8080030b 	ldhu	r2,12(r16)
   1ef34:	1080200c 	andi	r2,r2,128
   1ef38:	10bfffcc 	andi	r2,r2,65535
   1ef3c:	10a0001c 	xori	r2,r2,32768
   1ef40:	10a00004 	addi	r2,r2,-32768
   1ef44:	10002b1e 	bne	r2,zero,1eff4 <_fclose_r+0x124>
   1ef48:	81400c17 	ldw	r5,48(r16)
   1ef4c:	28000526 	beq	r5,zero,1ef64 <_fclose_r+0x94>
   1ef50:	80801004 	addi	r2,r16,64
   1ef54:	28800226 	beq	r5,r2,1ef60 <_fclose_r+0x90>
   1ef58:	8809883a 	mov	r4,r17
   1ef5c:	001c05c0 	call	1c05c <_free_r>
   1ef60:	80000c15 	stw	zero,48(r16)
   1ef64:	81401117 	ldw	r5,68(r16)
   1ef68:	28000326 	beq	r5,zero,1ef78 <_fclose_r+0xa8>
   1ef6c:	8809883a 	mov	r4,r17
   1ef70:	001c05c0 	call	1c05c <_free_r>
   1ef74:	80001115 	stw	zero,68(r16)
   1ef78:	8000030d 	sth	zero,12(r16)
   1ef7c:	001bee40 	call	1bee4 <__sfp_lock_release>
   1ef80:	9005883a 	mov	r2,r18
   1ef84:	dfc00317 	ldw	ra,12(sp)
   1ef88:	dc800217 	ldw	r18,8(sp)
   1ef8c:	dc400117 	ldw	r17,4(sp)
   1ef90:	dc000017 	ldw	r16,0(sp)
   1ef94:	dec00404 	addi	sp,sp,16
   1ef98:	f800283a 	ret
   1ef9c:	001bee40 	call	1bee4 <__sfp_lock_release>
   1efa0:	0025883a 	mov	r18,zero
   1efa4:	9005883a 	mov	r2,r18
   1efa8:	dfc00317 	ldw	ra,12(sp)
   1efac:	dc800217 	ldw	r18,8(sp)
   1efb0:	dc400117 	ldw	r17,4(sp)
   1efb4:	dc000017 	ldw	r16,0(sp)
   1efb8:	dec00404 	addi	sp,sp,16
   1efbc:	f800283a 	ret
   1efc0:	0025883a 	mov	r18,zero
   1efc4:	9005883a 	mov	r2,r18
   1efc8:	dfc00317 	ldw	ra,12(sp)
   1efcc:	dc800217 	ldw	r18,8(sp)
   1efd0:	dc400117 	ldw	r17,4(sp)
   1efd4:	dc000017 	ldw	r16,0(sp)
   1efd8:	dec00404 	addi	sp,sp,16
   1efdc:	f800283a 	ret
   1efe0:	8809883a 	mov	r4,r17
   1efe4:	001bcd80 	call	1bcd8 <__sinit>
   1efe8:	8080030f 	ldh	r2,12(r16)
   1efec:	103fc61e 	bne	r2,zero,1ef08 <_fclose_r+0x38>
   1eff0:	003fea06 	br	1ef9c <_fclose_r+0xcc>
   1eff4:	81400417 	ldw	r5,16(r16)
   1eff8:	8809883a 	mov	r4,r17
   1effc:	001c05c0 	call	1c05c <_free_r>
   1f000:	003fd106 	br	1ef48 <_fclose_r+0x78>
   1f004:	04bfffc4 	movi	r18,-1
   1f008:	003fc906 	br	1ef30 <_fclose_r+0x60>

0001f00c <fclose>:
   1f00c:	008000f4 	movhi	r2,3
   1f010:	10933404 	addi	r2,r2,19664
   1f014:	200b883a 	mov	r5,r4
   1f018:	11000017 	ldw	r4,0(r2)
   1f01c:	001eed01 	jmpi	1eed0 <_fclose_r>

0001f020 <_fstat_r>:
   1f020:	defffd04 	addi	sp,sp,-12
   1f024:	dc400115 	stw	r17,4(sp)
   1f028:	dc000015 	stw	r16,0(sp)
   1f02c:	2023883a 	mov	r17,r4
   1f030:	040000f4 	movhi	r16,3
   1f034:	841bfa04 	addi	r16,r16,28648
   1f038:	2809883a 	mov	r4,r5
   1f03c:	300b883a 	mov	r5,r6
   1f040:	dfc00215 	stw	ra,8(sp)
   1f044:	80000015 	stw	zero,0(r16)
   1f048:	00214140 	call	21414 <fstat>
   1f04c:	00ffffc4 	movi	r3,-1
   1f050:	10c00526 	beq	r2,r3,1f068 <_fstat_r+0x48>
   1f054:	dfc00217 	ldw	ra,8(sp)
   1f058:	dc400117 	ldw	r17,4(sp)
   1f05c:	dc000017 	ldw	r16,0(sp)
   1f060:	dec00304 	addi	sp,sp,12
   1f064:	f800283a 	ret
   1f068:	80c00017 	ldw	r3,0(r16)
   1f06c:	183ff926 	beq	r3,zero,1f054 <_fstat_r+0x34>
   1f070:	88c00015 	stw	r3,0(r17)
   1f074:	dfc00217 	ldw	ra,8(sp)
   1f078:	dc400117 	ldw	r17,4(sp)
   1f07c:	dc000017 	ldw	r16,0(sp)
   1f080:	dec00304 	addi	sp,sp,12
   1f084:	f800283a 	ret

0001f088 <_isatty_r>:
   1f088:	defffd04 	addi	sp,sp,-12
   1f08c:	dc400115 	stw	r17,4(sp)
   1f090:	dc000015 	stw	r16,0(sp)
   1f094:	2023883a 	mov	r17,r4
   1f098:	040000f4 	movhi	r16,3
   1f09c:	841bfa04 	addi	r16,r16,28648
   1f0a0:	2809883a 	mov	r4,r5
   1f0a4:	dfc00215 	stw	ra,8(sp)
   1f0a8:	80000015 	stw	zero,0(r16)
   1f0ac:	00215100 	call	21510 <isatty>
   1f0b0:	00ffffc4 	movi	r3,-1
   1f0b4:	10c00526 	beq	r2,r3,1f0cc <_isatty_r+0x44>
   1f0b8:	dfc00217 	ldw	ra,8(sp)
   1f0bc:	dc400117 	ldw	r17,4(sp)
   1f0c0:	dc000017 	ldw	r16,0(sp)
   1f0c4:	dec00304 	addi	sp,sp,12
   1f0c8:	f800283a 	ret
   1f0cc:	80c00017 	ldw	r3,0(r16)
   1f0d0:	183ff926 	beq	r3,zero,1f0b8 <_isatty_r+0x30>
   1f0d4:	88c00015 	stw	r3,0(r17)
   1f0d8:	dfc00217 	ldw	ra,8(sp)
   1f0dc:	dc400117 	ldw	r17,4(sp)
   1f0e0:	dc000017 	ldw	r16,0(sp)
   1f0e4:	dec00304 	addi	sp,sp,12
   1f0e8:	f800283a 	ret

0001f0ec <_lseek_r>:
   1f0ec:	defffd04 	addi	sp,sp,-12
   1f0f0:	dc400115 	stw	r17,4(sp)
   1f0f4:	dc000015 	stw	r16,0(sp)
   1f0f8:	2023883a 	mov	r17,r4
   1f0fc:	040000f4 	movhi	r16,3
   1f100:	841bfa04 	addi	r16,r16,28648
   1f104:	2809883a 	mov	r4,r5
   1f108:	300b883a 	mov	r5,r6
   1f10c:	380d883a 	mov	r6,r7
   1f110:	dfc00215 	stw	ra,8(sp)
   1f114:	80000015 	stw	zero,0(r16)
   1f118:	00216ec0 	call	216ec <lseek>
   1f11c:	00ffffc4 	movi	r3,-1
   1f120:	10c00526 	beq	r2,r3,1f138 <_lseek_r+0x4c>
   1f124:	dfc00217 	ldw	ra,8(sp)
   1f128:	dc400117 	ldw	r17,4(sp)
   1f12c:	dc000017 	ldw	r16,0(sp)
   1f130:	dec00304 	addi	sp,sp,12
   1f134:	f800283a 	ret
   1f138:	80c00017 	ldw	r3,0(r16)
   1f13c:	183ff926 	beq	r3,zero,1f124 <_lseek_r+0x38>
   1f140:	88c00015 	stw	r3,0(r17)
   1f144:	dfc00217 	ldw	ra,8(sp)
   1f148:	dc400117 	ldw	r17,4(sp)
   1f14c:	dc000017 	ldw	r16,0(sp)
   1f150:	dec00304 	addi	sp,sp,12
   1f154:	f800283a 	ret

0001f158 <_read_r>:
   1f158:	defffd04 	addi	sp,sp,-12
   1f15c:	dc400115 	stw	r17,4(sp)
   1f160:	dc000015 	stw	r16,0(sp)
   1f164:	2023883a 	mov	r17,r4
   1f168:	040000f4 	movhi	r16,3
   1f16c:	841bfa04 	addi	r16,r16,28648
   1f170:	2809883a 	mov	r4,r5
   1f174:	300b883a 	mov	r5,r6
   1f178:	380d883a 	mov	r6,r7
   1f17c:	dfc00215 	stw	ra,8(sp)
   1f180:	80000015 	stw	zero,0(r16)
   1f184:	00218c40 	call	218c4 <read>
   1f188:	00ffffc4 	movi	r3,-1
   1f18c:	10c00526 	beq	r2,r3,1f1a4 <_read_r+0x4c>
   1f190:	dfc00217 	ldw	ra,8(sp)
   1f194:	dc400117 	ldw	r17,4(sp)
   1f198:	dc000017 	ldw	r16,0(sp)
   1f19c:	dec00304 	addi	sp,sp,12
   1f1a0:	f800283a 	ret
   1f1a4:	80c00017 	ldw	r3,0(r16)
   1f1a8:	183ff926 	beq	r3,zero,1f190 <_read_r+0x38>
   1f1ac:	88c00015 	stw	r3,0(r17)
   1f1b0:	dfc00217 	ldw	ra,8(sp)
   1f1b4:	dc400117 	ldw	r17,4(sp)
   1f1b8:	dc000017 	ldw	r16,0(sp)
   1f1bc:	dec00304 	addi	sp,sp,12
   1f1c0:	f800283a 	ret

0001f1c4 <__udivdi3>:
   1f1c4:	defff504 	addi	sp,sp,-44
   1f1c8:	dd000515 	stw	r20,20(sp)
   1f1cc:	dcc00415 	stw	r19,16(sp)
   1f1d0:	dc800315 	stw	r18,12(sp)
   1f1d4:	dc400215 	stw	r17,8(sp)
   1f1d8:	dc000115 	stw	r16,4(sp)
   1f1dc:	dfc00a15 	stw	ra,40(sp)
   1f1e0:	df000915 	stw	fp,36(sp)
   1f1e4:	ddc00815 	stw	r23,32(sp)
   1f1e8:	dd800715 	stw	r22,28(sp)
   1f1ec:	dd400615 	stw	r21,24(sp)
   1f1f0:	2025883a 	mov	r18,r4
   1f1f4:	2823883a 	mov	r17,r5
   1f1f8:	3021883a 	mov	r16,r6
   1f1fc:	2027883a 	mov	r19,r4
   1f200:	2829883a 	mov	r20,r5
   1f204:	3800401e 	bne	r7,zero,1f308 <__udivdi3+0x144>
   1f208:	2980602e 	bgeu	r5,r6,1f38c <__udivdi3+0x1c8>
   1f20c:	00bfffd4 	movui	r2,65535
   1f210:	1180aa36 	bltu	r2,r6,1f4bc <__udivdi3+0x2f8>
   1f214:	00803fc4 	movi	r2,255
   1f218:	11814436 	bltu	r2,r6,1f72c <__udivdi3+0x568>
   1f21c:	0005883a 	mov	r2,zero
   1f220:	0007883a 	mov	r3,zero
   1f224:	3084d83a 	srl	r2,r6,r2
   1f228:	010000f4 	movhi	r4,3
   1f22c:	2102bb04 	addi	r4,r4,2796
   1f230:	2085883a 	add	r2,r4,r2
   1f234:	10800003 	ldbu	r2,0(r2)
   1f238:	10c7883a 	add	r3,r2,r3
   1f23c:	00800804 	movi	r2,32
   1f240:	10c5c83a 	sub	r2,r2,r3
   1f244:	10000526 	beq	r2,zero,1f25c <__udivdi3+0x98>
   1f248:	88a2983a 	sll	r17,r17,r2
   1f24c:	90c6d83a 	srl	r3,r18,r3
   1f250:	30a0983a 	sll	r16,r6,r2
   1f254:	90a6983a 	sll	r19,r18,r2
   1f258:	88e8b03a 	or	r20,r17,r3
   1f25c:	8022d43a 	srli	r17,r16,16
   1f260:	a009883a 	mov	r4,r20
   1f264:	857fffcc 	andi	r21,r16,65535
   1f268:	880b883a 	mov	r5,r17
   1f26c:	0020b800 	call	20b80 <__umodsi3>
   1f270:	a009883a 	mov	r4,r20
   1f274:	880b883a 	mov	r5,r17
   1f278:	102d883a 	mov	r22,r2
   1f27c:	0020b780 	call	20b78 <__udivsi3>
   1f280:	b02c943a 	slli	r22,r22,16
   1f284:	9806d43a 	srli	r3,r19,16
   1f288:	1549383a 	mul	r4,r2,r21
   1f28c:	1025883a 	mov	r18,r2
   1f290:	b0c6b03a 	or	r3,r22,r3
   1f294:	1900052e 	bgeu	r3,r4,1f2ac <__udivdi3+0xe8>
   1f298:	1c07883a 	add	r3,r3,r16
   1f29c:	10bfffc4 	addi	r2,r2,-1
   1f2a0:	1c000136 	bltu	r3,r16,1f2a8 <__udivdi3+0xe4>
   1f2a4:	19013636 	bltu	r3,r4,1f780 <__udivdi3+0x5bc>
   1f2a8:	1025883a 	mov	r18,r2
   1f2ac:	1929c83a 	sub	r20,r3,r4
   1f2b0:	a009883a 	mov	r4,r20
   1f2b4:	880b883a 	mov	r5,r17
   1f2b8:	0020b800 	call	20b80 <__umodsi3>
   1f2bc:	102d883a 	mov	r22,r2
   1f2c0:	a009883a 	mov	r4,r20
   1f2c4:	880b883a 	mov	r5,r17
   1f2c8:	0020b780 	call	20b78 <__udivsi3>
   1f2cc:	b02c943a 	slli	r22,r22,16
   1f2d0:	156b383a 	mul	r21,r2,r21
   1f2d4:	9cffffcc 	andi	r19,r19,65535
   1f2d8:	b4e6b03a 	or	r19,r22,r19
   1f2dc:	1009883a 	mov	r4,r2
   1f2e0:	9d40052e 	bgeu	r19,r21,1f2f8 <__udivdi3+0x134>
   1f2e4:	9c27883a 	add	r19,r19,r16
   1f2e8:	10bfffc4 	addi	r2,r2,-1
   1f2ec:	9c00f736 	bltu	r19,r16,1f6cc <__udivdi3+0x508>
   1f2f0:	9d40f62e 	bgeu	r19,r21,1f6cc <__udivdi3+0x508>
   1f2f4:	213fff84 	addi	r4,r4,-2
   1f2f8:	9004943a 	slli	r2,r18,16
   1f2fc:	0007883a 	mov	r3,zero
   1f300:	2084b03a 	or	r2,r4,r2
   1f304:	00001506 	br	1f35c <__udivdi3+0x198>
   1f308:	29c06536 	bltu	r5,r7,1f4a0 <__udivdi3+0x2dc>
   1f30c:	00bfffd4 	movui	r2,65535
   1f310:	11c0652e 	bgeu	r2,r7,1f4a8 <__udivdi3+0x2e4>
   1f314:	00804034 	movhi	r2,256
   1f318:	10bfffc4 	addi	r2,r2,-1
   1f31c:	11c0f736 	bltu	r2,r7,1f6fc <__udivdi3+0x538>
   1f320:	00c00404 	movi	r3,16
   1f324:	180b883a 	mov	r5,r3
   1f328:	38c6d83a 	srl	r3,r7,r3
   1f32c:	010000f4 	movhi	r4,3
   1f330:	2102bb04 	addi	r4,r4,2796
   1f334:	04000804 	movi	r16,32
   1f338:	20c7883a 	add	r3,r4,r3
   1f33c:	18800003 	ldbu	r2,0(r3)
   1f340:	1145883a 	add	r2,r2,r5
   1f344:	80a1c83a 	sub	r16,r16,r2
   1f348:	8000691e 	bne	r16,zero,1f4f0 <__udivdi3+0x32c>
   1f34c:	0007883a 	mov	r3,zero
   1f350:	3c406536 	bltu	r7,r17,1f4e8 <__udivdi3+0x324>
   1f354:	9180642e 	bgeu	r18,r6,1f4e8 <__udivdi3+0x324>
   1f358:	0005883a 	mov	r2,zero
   1f35c:	dfc00a17 	ldw	ra,40(sp)
   1f360:	df000917 	ldw	fp,36(sp)
   1f364:	ddc00817 	ldw	r23,32(sp)
   1f368:	dd800717 	ldw	r22,28(sp)
   1f36c:	dd400617 	ldw	r21,24(sp)
   1f370:	dd000517 	ldw	r20,20(sp)
   1f374:	dcc00417 	ldw	r19,16(sp)
   1f378:	dc800317 	ldw	r18,12(sp)
   1f37c:	dc400217 	ldw	r17,8(sp)
   1f380:	dc000117 	ldw	r16,4(sp)
   1f384:	dec00b04 	addi	sp,sp,44
   1f388:	f800283a 	ret
   1f38c:	3000041e 	bne	r6,zero,1f3a0 <__udivdi3+0x1dc>
   1f390:	01000044 	movi	r4,1
   1f394:	000b883a 	mov	r5,zero
   1f398:	0020b780 	call	20b78 <__udivsi3>
   1f39c:	1021883a 	mov	r16,r2
   1f3a0:	00bfffd4 	movui	r2,65535
   1f3a4:	14004b2e 	bgeu	r2,r16,1f4d4 <__udivdi3+0x310>
   1f3a8:	00804034 	movhi	r2,256
   1f3ac:	10bfffc4 	addi	r2,r2,-1
   1f3b0:	1400d836 	bltu	r2,r16,1f714 <__udivdi3+0x550>
   1f3b4:	00800404 	movi	r2,16
   1f3b8:	1007883a 	mov	r3,r2
   1f3bc:	8084d83a 	srl	r2,r16,r2
   1f3c0:	010000f4 	movhi	r4,3
   1f3c4:	2102bb04 	addi	r4,r4,2796
   1f3c8:	2085883a 	add	r2,r4,r2
   1f3cc:	10800003 	ldbu	r2,0(r2)
   1f3d0:	10c7883a 	add	r3,r2,r3
   1f3d4:	00800804 	movi	r2,32
   1f3d8:	10c5c83a 	sub	r2,r2,r3
   1f3dc:	1000891e 	bne	r2,zero,1f604 <__udivdi3+0x440>
   1f3e0:	8028d43a 	srli	r20,r16,16
   1f3e4:	8c23c83a 	sub	r17,r17,r16
   1f3e8:	84bfffcc 	andi	r18,r16,65535
   1f3ec:	00c00044 	movi	r3,1
   1f3f0:	8809883a 	mov	r4,r17
   1f3f4:	a00b883a 	mov	r5,r20
   1f3f8:	d8c00015 	stw	r3,0(sp)
   1f3fc:	0020b800 	call	20b80 <__umodsi3>
   1f400:	8809883a 	mov	r4,r17
   1f404:	a00b883a 	mov	r5,r20
   1f408:	102b883a 	mov	r21,r2
   1f40c:	0020b780 	call	20b78 <__udivsi3>
   1f410:	a82a943a 	slli	r21,r21,16
   1f414:	9808d43a 	srli	r4,r19,16
   1f418:	148b383a 	mul	r5,r2,r18
   1f41c:	1023883a 	mov	r17,r2
   1f420:	a908b03a 	or	r4,r21,r4
   1f424:	d8c00017 	ldw	r3,0(sp)
   1f428:	2140052e 	bgeu	r4,r5,1f440 <__udivdi3+0x27c>
   1f42c:	2409883a 	add	r4,r4,r16
   1f430:	10bfffc4 	addi	r2,r2,-1
   1f434:	24000136 	bltu	r4,r16,1f43c <__udivdi3+0x278>
   1f438:	2140ce36 	bltu	r4,r5,1f774 <__udivdi3+0x5b0>
   1f43c:	1023883a 	mov	r17,r2
   1f440:	216bc83a 	sub	r21,r4,r5
   1f444:	a809883a 	mov	r4,r21
   1f448:	a00b883a 	mov	r5,r20
   1f44c:	d8c00015 	stw	r3,0(sp)
   1f450:	0020b800 	call	20b80 <__umodsi3>
   1f454:	102d883a 	mov	r22,r2
   1f458:	a809883a 	mov	r4,r21
   1f45c:	a00b883a 	mov	r5,r20
   1f460:	0020b780 	call	20b78 <__udivsi3>
   1f464:	b02c943a 	slli	r22,r22,16
   1f468:	14a5383a 	mul	r18,r2,r18
   1f46c:	9cffffcc 	andi	r19,r19,65535
   1f470:	b4e6b03a 	or	r19,r22,r19
   1f474:	1009883a 	mov	r4,r2
   1f478:	d8c00017 	ldw	r3,0(sp)
   1f47c:	9c80052e 	bgeu	r19,r18,1f494 <__udivdi3+0x2d0>
   1f480:	9c27883a 	add	r19,r19,r16
   1f484:	10bfffc4 	addi	r2,r2,-1
   1f488:	9c009236 	bltu	r19,r16,1f6d4 <__udivdi3+0x510>
   1f48c:	9c80912e 	bgeu	r19,r18,1f6d4 <__udivdi3+0x510>
   1f490:	213fff84 	addi	r4,r4,-2
   1f494:	8804943a 	slli	r2,r17,16
   1f498:	2084b03a 	or	r2,r4,r2
   1f49c:	003faf06 	br	1f35c <__udivdi3+0x198>
   1f4a0:	0007883a 	mov	r3,zero
   1f4a4:	003fac06 	br	1f358 <__udivdi3+0x194>
   1f4a8:	00803fc4 	movi	r2,255
   1f4ac:	11c09636 	bltu	r2,r7,1f708 <__udivdi3+0x544>
   1f4b0:	0007883a 	mov	r3,zero
   1f4b4:	000b883a 	mov	r5,zero
   1f4b8:	003f9b06 	br	1f328 <__udivdi3+0x164>
   1f4bc:	00804034 	movhi	r2,256
   1f4c0:	10bfffc4 	addi	r2,r2,-1
   1f4c4:	11809636 	bltu	r2,r6,1f720 <__udivdi3+0x55c>
   1f4c8:	00800404 	movi	r2,16
   1f4cc:	1007883a 	mov	r3,r2
   1f4d0:	003f5406 	br	1f224 <__udivdi3+0x60>
   1f4d4:	00803fc4 	movi	r2,255
   1f4d8:	14009736 	bltu	r2,r16,1f738 <__udivdi3+0x574>
   1f4dc:	0005883a 	mov	r2,zero
   1f4e0:	0007883a 	mov	r3,zero
   1f4e4:	003fb506 	br	1f3bc <__udivdi3+0x1f8>
   1f4e8:	00800044 	movi	r2,1
   1f4ec:	003f9b06 	br	1f35c <__udivdi3+0x198>
   1f4f0:	3086d83a 	srl	r3,r6,r2
   1f4f4:	3c0e983a 	sll	r7,r7,r16
   1f4f8:	88aad83a 	srl	r21,r17,r2
   1f4fc:	9084d83a 	srl	r2,r18,r2
   1f500:	38e6b03a 	or	r19,r7,r3
   1f504:	9828d43a 	srli	r20,r19,16
   1f508:	8c22983a 	sll	r17,r17,r16
   1f50c:	a809883a 	mov	r4,r21
   1f510:	a00b883a 	mov	r5,r20
   1f514:	342c983a 	sll	r22,r6,r16
   1f518:	88a2b03a 	or	r17,r17,r2
   1f51c:	0020b800 	call	20b80 <__umodsi3>
   1f520:	a809883a 	mov	r4,r21
   1f524:	a00b883a 	mov	r5,r20
   1f528:	1039883a 	mov	fp,r2
   1f52c:	0020b780 	call	20b78 <__udivsi3>
   1f530:	102b883a 	mov	r21,r2
   1f534:	9dffffcc 	andi	r23,r19,65535
   1f538:	e008943a 	slli	r4,fp,16
   1f53c:	8804d43a 	srli	r2,r17,16
   1f540:	adcd383a 	mul	r6,r21,r23
   1f544:	2088b03a 	or	r4,r4,r2
   1f548:	2180042e 	bgeu	r4,r6,1f55c <__udivdi3+0x398>
   1f54c:	24c9883a 	add	r4,r4,r19
   1f550:	a8bfffc4 	addi	r2,r21,-1
   1f554:	24c07f2e 	bgeu	r4,r19,1f754 <__udivdi3+0x590>
   1f558:	102b883a 	mov	r21,r2
   1f55c:	21b9c83a 	sub	fp,r4,r6
   1f560:	e009883a 	mov	r4,fp
   1f564:	a00b883a 	mov	r5,r20
   1f568:	0020b800 	call	20b80 <__umodsi3>
   1f56c:	e009883a 	mov	r4,fp
   1f570:	a00b883a 	mov	r5,r20
   1f574:	d8800015 	stw	r2,0(sp)
   1f578:	0020b780 	call	20b78 <__udivsi3>
   1f57c:	d8c00017 	ldw	r3,0(sp)
   1f580:	15cb383a 	mul	r5,r2,r23
   1f584:	8c7fffcc 	andi	r17,r17,65535
   1f588:	1806943a 	slli	r3,r3,16
   1f58c:	1009883a 	mov	r4,r2
   1f590:	1c46b03a 	or	r3,r3,r17
   1f594:	1940042e 	bgeu	r3,r5,1f5a8 <__udivdi3+0x3e4>
   1f598:	1cc7883a 	add	r3,r3,r19
   1f59c:	10bfffc4 	addi	r2,r2,-1
   1f5a0:	1cc0682e 	bgeu	r3,r19,1f744 <__udivdi3+0x580>
   1f5a4:	1009883a 	mov	r4,r2
   1f5a8:	a804943a 	slli	r2,r21,16
   1f5ac:	b1ffffcc 	andi	r7,r22,65535
   1f5b0:	b02cd43a 	srli	r22,r22,16
   1f5b4:	2084b03a 	or	r2,r4,r2
   1f5b8:	113fffcc 	andi	r4,r2,65535
   1f5bc:	100cd43a 	srli	r6,r2,16
   1f5c0:	21d1383a 	mul	r8,r4,r7
   1f5c4:	2589383a 	mul	r4,r4,r22
   1f5c8:	31cf383a 	mul	r7,r6,r7
   1f5cc:	4012d43a 	srli	r9,r8,16
   1f5d0:	1947c83a 	sub	r3,r3,r5
   1f5d4:	3909883a 	add	r4,r7,r4
   1f5d8:	2249883a 	add	r4,r4,r9
   1f5dc:	35ad383a 	mul	r22,r6,r22
   1f5e0:	21c0022e 	bgeu	r4,r7,1f5ec <__udivdi3+0x428>
   1f5e4:	01400074 	movhi	r5,1
   1f5e8:	b16d883a 	add	r22,r22,r5
   1f5ec:	200ad43a 	srli	r5,r4,16
   1f5f0:	b16d883a 	add	r22,r22,r5
   1f5f4:	1d803e36 	bltu	r3,r22,1f6f0 <__udivdi3+0x52c>
   1f5f8:	1d803826 	beq	r3,r22,1f6dc <__udivdi3+0x518>
   1f5fc:	0007883a 	mov	r3,zero
   1f600:	003f5606 	br	1f35c <__udivdi3+0x198>
   1f604:	80a0983a 	sll	r16,r16,r2
   1f608:	88ead83a 	srl	r21,r17,r3
   1f60c:	90c6d83a 	srl	r3,r18,r3
   1f610:	8028d43a 	srli	r20,r16,16
   1f614:	88a2983a 	sll	r17,r17,r2
   1f618:	a809883a 	mov	r4,r21
   1f61c:	a00b883a 	mov	r5,r20
   1f620:	88ecb03a 	or	r22,r17,r3
   1f624:	90a6983a 	sll	r19,r18,r2
   1f628:	0020b800 	call	20b80 <__umodsi3>
   1f62c:	a809883a 	mov	r4,r21
   1f630:	a00b883a 	mov	r5,r20
   1f634:	1023883a 	mov	r17,r2
   1f638:	0020b780 	call	20b78 <__udivsi3>
   1f63c:	102b883a 	mov	r21,r2
   1f640:	84bfffcc 	andi	r18,r16,65535
   1f644:	8808943a 	slli	r4,r17,16
   1f648:	b004d43a 	srli	r2,r22,16
   1f64c:	ac87383a 	mul	r3,r21,r18
   1f650:	2088b03a 	or	r4,r4,r2
   1f654:	20c0062e 	bgeu	r4,r3,1f670 <__udivdi3+0x4ac>
   1f658:	2409883a 	add	r4,r4,r16
   1f65c:	a8bfffc4 	addi	r2,r21,-1
   1f660:	24004236 	bltu	r4,r16,1f76c <__udivdi3+0x5a8>
   1f664:	20c0412e 	bgeu	r4,r3,1f76c <__udivdi3+0x5a8>
   1f668:	ad7fff84 	addi	r21,r21,-2
   1f66c:	2409883a 	add	r4,r4,r16
   1f670:	20efc83a 	sub	r23,r4,r3
   1f674:	b809883a 	mov	r4,r23
   1f678:	a00b883a 	mov	r5,r20
   1f67c:	0020b800 	call	20b80 <__umodsi3>
   1f680:	1023883a 	mov	r17,r2
   1f684:	a00b883a 	mov	r5,r20
   1f688:	b809883a 	mov	r4,r23
   1f68c:	0020b780 	call	20b78 <__udivsi3>
   1f690:	8822943a 	slli	r17,r17,16
   1f694:	148b383a 	mul	r5,r2,r18
   1f698:	b5bfffcc 	andi	r22,r22,65535
   1f69c:	8da2b03a 	or	r17,r17,r22
   1f6a0:	8940062e 	bgeu	r17,r5,1f6bc <__udivdi3+0x4f8>
   1f6a4:	8c23883a 	add	r17,r17,r16
   1f6a8:	10ffffc4 	addi	r3,r2,-1
   1f6ac:	8c002d36 	bltu	r17,r16,1f764 <__udivdi3+0x5a0>
   1f6b0:	89402c2e 	bgeu	r17,r5,1f764 <__udivdi3+0x5a0>
   1f6b4:	10bfff84 	addi	r2,r2,-2
   1f6b8:	8c23883a 	add	r17,r17,r16
   1f6bc:	a806943a 	slli	r3,r21,16
   1f6c0:	8963c83a 	sub	r17,r17,r5
   1f6c4:	10c6b03a 	or	r3,r2,r3
   1f6c8:	003f4906 	br	1f3f0 <__udivdi3+0x22c>
   1f6cc:	1009883a 	mov	r4,r2
   1f6d0:	003f0906 	br	1f2f8 <__udivdi3+0x134>
   1f6d4:	1009883a 	mov	r4,r2
   1f6d8:	003f6e06 	br	1f494 <__udivdi3+0x2d0>
   1f6dc:	2008943a 	slli	r4,r4,16
   1f6e0:	9420983a 	sll	r16,r18,r16
   1f6e4:	423fffcc 	andi	r8,r8,65535
   1f6e8:	2209883a 	add	r4,r4,r8
   1f6ec:	813fc32e 	bgeu	r16,r4,1f5fc <__udivdi3+0x438>
   1f6f0:	10bfffc4 	addi	r2,r2,-1
   1f6f4:	0007883a 	mov	r3,zero
   1f6f8:	003f1806 	br	1f35c <__udivdi3+0x198>
   1f6fc:	00c00604 	movi	r3,24
   1f700:	180b883a 	mov	r5,r3
   1f704:	003f0806 	br	1f328 <__udivdi3+0x164>
   1f708:	00c00204 	movi	r3,8
   1f70c:	180b883a 	mov	r5,r3
   1f710:	003f0506 	br	1f328 <__udivdi3+0x164>
   1f714:	00800604 	movi	r2,24
   1f718:	1007883a 	mov	r3,r2
   1f71c:	003f2706 	br	1f3bc <__udivdi3+0x1f8>
   1f720:	00800604 	movi	r2,24
   1f724:	1007883a 	mov	r3,r2
   1f728:	003ebe06 	br	1f224 <__udivdi3+0x60>
   1f72c:	00800204 	movi	r2,8
   1f730:	1007883a 	mov	r3,r2
   1f734:	003ebb06 	br	1f224 <__udivdi3+0x60>
   1f738:	00800204 	movi	r2,8
   1f73c:	1007883a 	mov	r3,r2
   1f740:	003f1e06 	br	1f3bc <__udivdi3+0x1f8>
   1f744:	197f972e 	bgeu	r3,r5,1f5a4 <__udivdi3+0x3e0>
   1f748:	213fff84 	addi	r4,r4,-2
   1f74c:	1cc7883a 	add	r3,r3,r19
   1f750:	003f9506 	br	1f5a8 <__udivdi3+0x3e4>
   1f754:	21bf802e 	bgeu	r4,r6,1f558 <__udivdi3+0x394>
   1f758:	ad7fff84 	addi	r21,r21,-2
   1f75c:	24c9883a 	add	r4,r4,r19
   1f760:	003f7e06 	br	1f55c <__udivdi3+0x398>
   1f764:	1805883a 	mov	r2,r3
   1f768:	003fd406 	br	1f6bc <__udivdi3+0x4f8>
   1f76c:	102b883a 	mov	r21,r2
   1f770:	003fbf06 	br	1f670 <__udivdi3+0x4ac>
   1f774:	8c7fff84 	addi	r17,r17,-2
   1f778:	2409883a 	add	r4,r4,r16
   1f77c:	003f3006 	br	1f440 <__udivdi3+0x27c>
   1f780:	94bfff84 	addi	r18,r18,-2
   1f784:	1c07883a 	add	r3,r3,r16
   1f788:	003ec806 	br	1f2ac <__udivdi3+0xe8>

0001f78c <__umoddi3>:
   1f78c:	defff504 	addi	sp,sp,-44
   1f790:	dd000515 	stw	r20,20(sp)
   1f794:	dcc00415 	stw	r19,16(sp)
   1f798:	dc800315 	stw	r18,12(sp)
   1f79c:	dc400215 	stw	r17,8(sp)
   1f7a0:	dc000115 	stw	r16,4(sp)
   1f7a4:	dfc00a15 	stw	ra,40(sp)
   1f7a8:	df000915 	stw	fp,36(sp)
   1f7ac:	ddc00815 	stw	r23,32(sp)
   1f7b0:	dd800715 	stw	r22,28(sp)
   1f7b4:	dd400615 	stw	r21,24(sp)
   1f7b8:	2025883a 	mov	r18,r4
   1f7bc:	2823883a 	mov	r17,r5
   1f7c0:	3021883a 	mov	r16,r6
   1f7c4:	2027883a 	mov	r19,r4
   1f7c8:	2829883a 	mov	r20,r5
   1f7cc:	3800351e 	bne	r7,zero,1f8a4 <__umoddi3+0x118>
   1f7d0:	29804d2e 	bgeu	r5,r6,1f908 <__umoddi3+0x17c>
   1f7d4:	00bfffd4 	movui	r2,65535
   1f7d8:	11809a36 	bltu	r2,r6,1fa44 <__umoddi3+0x2b8>
   1f7dc:	00803fc4 	movi	r2,255
   1f7e0:	11813936 	bltu	r2,r6,1fcc8 <__umoddi3+0x53c>
   1f7e4:	0005883a 	mov	r2,zero
   1f7e8:	0009883a 	mov	r4,zero
   1f7ec:	3084d83a 	srl	r2,r6,r2
   1f7f0:	00c000f4 	movhi	r3,3
   1f7f4:	18c2bb04 	addi	r3,r3,2796
   1f7f8:	05400804 	movi	r21,32
   1f7fc:	1885883a 	add	r2,r3,r2
   1f800:	10800003 	ldbu	r2,0(r2)
   1f804:	1109883a 	add	r4,r2,r4
   1f808:	a92bc83a 	sub	r21,r21,r4
   1f80c:	a800ec26 	beq	r21,zero,1fbc0 <__umoddi3+0x434>
   1f810:	8d62983a 	sll	r17,r17,r21
   1f814:	9108d83a 	srl	r4,r18,r4
   1f818:	3560983a 	sll	r16,r6,r21
   1f81c:	9566983a 	sll	r19,r18,r21
   1f820:	8928b03a 	or	r20,r17,r4
   1f824:	8022d43a 	srli	r17,r16,16
   1f828:	a009883a 	mov	r4,r20
   1f82c:	84bfffcc 	andi	r18,r16,65535
   1f830:	880b883a 	mov	r5,r17
   1f834:	0020b800 	call	20b80 <__umodsi3>
   1f838:	a009883a 	mov	r4,r20
   1f83c:	880b883a 	mov	r5,r17
   1f840:	102d883a 	mov	r22,r2
   1f844:	0020b780 	call	20b78 <__udivsi3>
   1f848:	b02c943a 	slli	r22,r22,16
   1f84c:	9806d43a 	srli	r3,r19,16
   1f850:	1485383a 	mul	r2,r2,r18
   1f854:	b0c6b03a 	or	r3,r22,r3
   1f858:	1880042e 	bgeu	r3,r2,1f86c <__umoddi3+0xe0>
   1f85c:	1c07883a 	add	r3,r3,r16
   1f860:	1c000236 	bltu	r3,r16,1f86c <__umoddi3+0xe0>
   1f864:	1880012e 	bgeu	r3,r2,1f86c <__umoddi3+0xe0>
   1f868:	1c07883a 	add	r3,r3,r16
   1f86c:	18a9c83a 	sub	r20,r3,r2
   1f870:	a009883a 	mov	r4,r20
   1f874:	880b883a 	mov	r5,r17
   1f878:	0020b800 	call	20b80 <__umodsi3>
   1f87c:	102d883a 	mov	r22,r2
   1f880:	a009883a 	mov	r4,r20
   1f884:	880b883a 	mov	r5,r17
   1f888:	0020b780 	call	20b78 <__udivsi3>
   1f88c:	b02c943a 	slli	r22,r22,16
   1f890:	1485383a 	mul	r2,r2,r18
   1f894:	9cffffcc 	andi	r19,r19,65535
   1f898:	b4e6b03a 	or	r19,r22,r19
   1f89c:	9880522e 	bgeu	r19,r2,1f9e8 <__umoddi3+0x25c>
   1f8a0:	00004d06 	br	1f9d8 <__umoddi3+0x24c>
   1f8a4:	29c05436 	bltu	r5,r7,1f9f8 <__umoddi3+0x26c>
   1f8a8:	00bfffd4 	movui	r2,65535
   1f8ac:	11c0602e 	bgeu	r2,r7,1fa30 <__umoddi3+0x2a4>
   1f8b0:	00804034 	movhi	r2,256
   1f8b4:	10bfffc4 	addi	r2,r2,-1
   1f8b8:	11c0f736 	bltu	r2,r7,1fc98 <__umoddi3+0x50c>
   1f8bc:	00c00404 	movi	r3,16
   1f8c0:	1827883a 	mov	r19,r3
   1f8c4:	38c6d83a 	srl	r3,r7,r3
   1f8c8:	010000f4 	movhi	r4,3
   1f8cc:	2102bb04 	addi	r4,r4,2796
   1f8d0:	04000804 	movi	r16,32
   1f8d4:	20c7883a 	add	r3,r4,r3
   1f8d8:	18800003 	ldbu	r2,0(r3)
   1f8dc:	14e7883a 	add	r19,r2,r19
   1f8e0:	84e1c83a 	sub	r16,r16,r19
   1f8e4:	8000621e 	bne	r16,zero,1fa70 <__umoddi3+0x2e4>
   1f8e8:	3c400136 	bltu	r7,r17,1f8f0 <__umoddi3+0x164>
   1f8ec:	91810336 	bltu	r18,r6,1fcfc <__umoddi3+0x570>
   1f8f0:	9185c83a 	sub	r2,r18,r6
   1f8f4:	89e3c83a 	sub	r17,r17,r7
   1f8f8:	90a5803a 	cmpltu	r18,r18,r2
   1f8fc:	8ca9c83a 	sub	r20,r17,r18
   1f900:	a007883a 	mov	r3,r20
   1f904:	00003e06 	br	1fa00 <__umoddi3+0x274>
   1f908:	3000041e 	bne	r6,zero,1f91c <__umoddi3+0x190>
   1f90c:	01000044 	movi	r4,1
   1f910:	000b883a 	mov	r5,zero
   1f914:	0020b780 	call	20b78 <__udivsi3>
   1f918:	1021883a 	mov	r16,r2
   1f91c:	00bfffd4 	movui	r2,65535
   1f920:	14004e2e 	bgeu	r2,r16,1fa5c <__umoddi3+0x2d0>
   1f924:	00804034 	movhi	r2,256
   1f928:	10bfffc4 	addi	r2,r2,-1
   1f92c:	1400e336 	bltu	r2,r16,1fcbc <__umoddi3+0x530>
   1f930:	00800404 	movi	r2,16
   1f934:	1007883a 	mov	r3,r2
   1f938:	8084d83a 	srl	r2,r16,r2
   1f93c:	010000f4 	movhi	r4,3
   1f940:	2102bb04 	addi	r4,r4,2796
   1f944:	05400804 	movi	r21,32
   1f948:	2085883a 	add	r2,r4,r2
   1f94c:	10800003 	ldbu	r2,0(r2)
   1f950:	10c7883a 	add	r3,r2,r3
   1f954:	a8ebc83a 	sub	r21,r21,r3
   1f958:	a8009b1e 	bne	r21,zero,1fbc8 <__umoddi3+0x43c>
   1f95c:	8028d43a 	srli	r20,r16,16
   1f960:	8c23c83a 	sub	r17,r17,r16
   1f964:	85bfffcc 	andi	r22,r16,65535
   1f968:	8809883a 	mov	r4,r17
   1f96c:	a00b883a 	mov	r5,r20
   1f970:	0020b800 	call	20b80 <__umodsi3>
   1f974:	8809883a 	mov	r4,r17
   1f978:	a00b883a 	mov	r5,r20
   1f97c:	1025883a 	mov	r18,r2
   1f980:	0020b780 	call	20b78 <__udivsi3>
   1f984:	9024943a 	slli	r18,r18,16
   1f988:	9806d43a 	srli	r3,r19,16
   1f98c:	1585383a 	mul	r2,r2,r22
   1f990:	90c6b03a 	or	r3,r18,r3
   1f994:	1880032e 	bgeu	r3,r2,1f9a4 <__umoddi3+0x218>
   1f998:	1c07883a 	add	r3,r3,r16
   1f99c:	1c000136 	bltu	r3,r16,1f9a4 <__umoddi3+0x218>
   1f9a0:	1880d436 	bltu	r3,r2,1fcf4 <__umoddi3+0x568>
   1f9a4:	18a3c83a 	sub	r17,r3,r2
   1f9a8:	8809883a 	mov	r4,r17
   1f9ac:	a00b883a 	mov	r5,r20
   1f9b0:	0020b800 	call	20b80 <__umodsi3>
   1f9b4:	1025883a 	mov	r18,r2
   1f9b8:	8809883a 	mov	r4,r17
   1f9bc:	a00b883a 	mov	r5,r20
   1f9c0:	0020b780 	call	20b78 <__udivsi3>
   1f9c4:	9024943a 	slli	r18,r18,16
   1f9c8:	1585383a 	mul	r2,r2,r22
   1f9cc:	9cffffcc 	andi	r19,r19,65535
   1f9d0:	94e6b03a 	or	r19,r18,r19
   1f9d4:	9880042e 	bgeu	r19,r2,1f9e8 <__umoddi3+0x25c>
   1f9d8:	9c27883a 	add	r19,r19,r16
   1f9dc:	9c000236 	bltu	r19,r16,1f9e8 <__umoddi3+0x25c>
   1f9e0:	9880012e 	bgeu	r19,r2,1f9e8 <__umoddi3+0x25c>
   1f9e4:	9c27883a 	add	r19,r19,r16
   1f9e8:	98a7c83a 	sub	r19,r19,r2
   1f9ec:	9d44d83a 	srl	r2,r19,r21
   1f9f0:	0007883a 	mov	r3,zero
   1f9f4:	00000206 	br	1fa00 <__umoddi3+0x274>
   1f9f8:	2005883a 	mov	r2,r4
   1f9fc:	2807883a 	mov	r3,r5
   1fa00:	dfc00a17 	ldw	ra,40(sp)
   1fa04:	df000917 	ldw	fp,36(sp)
   1fa08:	ddc00817 	ldw	r23,32(sp)
   1fa0c:	dd800717 	ldw	r22,28(sp)
   1fa10:	dd400617 	ldw	r21,24(sp)
   1fa14:	dd000517 	ldw	r20,20(sp)
   1fa18:	dcc00417 	ldw	r19,16(sp)
   1fa1c:	dc800317 	ldw	r18,12(sp)
   1fa20:	dc400217 	ldw	r17,8(sp)
   1fa24:	dc000117 	ldw	r16,4(sp)
   1fa28:	dec00b04 	addi	sp,sp,44
   1fa2c:	f800283a 	ret
   1fa30:	00803fc4 	movi	r2,255
   1fa34:	11c09536 	bltu	r2,r7,1fc8c <__umoddi3+0x500>
   1fa38:	0007883a 	mov	r3,zero
   1fa3c:	0027883a 	mov	r19,zero
   1fa40:	003fa006 	br	1f8c4 <__umoddi3+0x138>
   1fa44:	00804034 	movhi	r2,256
   1fa48:	10bfffc4 	addi	r2,r2,-1
   1fa4c:	11809536 	bltu	r2,r6,1fca4 <__umoddi3+0x518>
   1fa50:	00800404 	movi	r2,16
   1fa54:	1009883a 	mov	r4,r2
   1fa58:	003f6406 	br	1f7ec <__umoddi3+0x60>
   1fa5c:	00803fc4 	movi	r2,255
   1fa60:	14009336 	bltu	r2,r16,1fcb0 <__umoddi3+0x524>
   1fa64:	0005883a 	mov	r2,zero
   1fa68:	0007883a 	mov	r3,zero
   1fa6c:	003fb206 	br	1f938 <__umoddi3+0x1ac>
   1fa70:	34c4d83a 	srl	r2,r6,r19
   1fa74:	3c0e983a 	sll	r7,r7,r16
   1fa78:	8ceed83a 	srl	r23,r17,r19
   1fa7c:	8c22983a 	sll	r17,r17,r16
   1fa80:	38a8b03a 	or	r20,r7,r2
   1fa84:	a02ad43a 	srli	r21,r20,16
   1fa88:	94c4d83a 	srl	r2,r18,r19
   1fa8c:	b809883a 	mov	r4,r23
   1fa90:	a80b883a 	mov	r5,r21
   1fa94:	88a2b03a 	or	r17,r17,r2
   1fa98:	342c983a 	sll	r22,r6,r16
   1fa9c:	0020b800 	call	20b80 <__umodsi3>
   1faa0:	b809883a 	mov	r4,r23
   1faa4:	a80b883a 	mov	r5,r21
   1faa8:	d8800015 	stw	r2,0(sp)
   1faac:	0020b780 	call	20b78 <__udivsi3>
   1fab0:	d8c00017 	ldw	r3,0(sp)
   1fab4:	102f883a 	mov	r23,r2
   1fab8:	a73fffcc 	andi	fp,r20,65535
   1fabc:	180a943a 	slli	r5,r3,16
   1fac0:	8804d43a 	srli	r2,r17,16
   1fac4:	bf09383a 	mul	r4,r23,fp
   1fac8:	9424983a 	sll	r18,r18,r16
   1facc:	288ab03a 	or	r5,r5,r2
   1fad0:	2900042e 	bgeu	r5,r4,1fae4 <__umoddi3+0x358>
   1fad4:	2d0b883a 	add	r5,r5,r20
   1fad8:	b8bfffc4 	addi	r2,r23,-1
   1fadc:	2d00812e 	bgeu	r5,r20,1fce4 <__umoddi3+0x558>
   1fae0:	102f883a 	mov	r23,r2
   1fae4:	2907c83a 	sub	r3,r5,r4
   1fae8:	1809883a 	mov	r4,r3
   1faec:	a80b883a 	mov	r5,r21
   1faf0:	d8c00015 	stw	r3,0(sp)
   1faf4:	0020b800 	call	20b80 <__umodsi3>
   1faf8:	d8c00017 	ldw	r3,0(sp)
   1fafc:	a80b883a 	mov	r5,r21
   1fb00:	d8800015 	stw	r2,0(sp)
   1fb04:	1809883a 	mov	r4,r3
   1fb08:	0020b780 	call	20b78 <__udivsi3>
   1fb0c:	d9800017 	ldw	r6,0(sp)
   1fb10:	8c7fffcc 	andi	r17,r17,65535
   1fb14:	3008943a 	slli	r4,r6,16
   1fb18:	170d383a 	mul	r6,r2,fp
   1fb1c:	2448b03a 	or	r4,r4,r17
   1fb20:	2180042e 	bgeu	r4,r6,1fb34 <__umoddi3+0x3a8>
   1fb24:	2509883a 	add	r4,r4,r20
   1fb28:	10ffffc4 	addi	r3,r2,-1
   1fb2c:	2500692e 	bgeu	r4,r20,1fcd4 <__umoddi3+0x548>
   1fb30:	1805883a 	mov	r2,r3
   1fb34:	b82e943a 	slli	r23,r23,16
   1fb38:	b010d43a 	srli	r8,r22,16
   1fb3c:	b1ffffcc 	andi	r7,r22,65535
   1fb40:	15eeb03a 	or	r23,r2,r23
   1fb44:	b8bfffcc 	andi	r2,r23,65535
   1fb48:	b82ed43a 	srli	r23,r23,16
   1fb4c:	11c7383a 	mul	r3,r2,r7
   1fb50:	1205383a 	mul	r2,r2,r8
   1fb54:	b9cf383a 	mul	r7,r23,r7
   1fb58:	400b883a 	mov	r5,r8
   1fb5c:	1810d43a 	srli	r8,r3,16
   1fb60:	3885883a 	add	r2,r7,r2
   1fb64:	2189c83a 	sub	r4,r4,r6
   1fb68:	1205883a 	add	r2,r2,r8
   1fb6c:	b94b383a 	mul	r5,r23,r5
   1fb70:	11c0022e 	bgeu	r2,r7,1fb7c <__umoddi3+0x3f0>
   1fb74:	01800074 	movhi	r6,1
   1fb78:	298b883a 	add	r5,r5,r6
   1fb7c:	100cd43a 	srli	r6,r2,16
   1fb80:	1004943a 	slli	r2,r2,16
   1fb84:	18ffffcc 	andi	r3,r3,65535
   1fb88:	298b883a 	add	r5,r5,r6
   1fb8c:	10c5883a 	add	r2,r2,r3
   1fb90:	21403836 	bltu	r4,r5,1fc74 <__umoddi3+0x4e8>
   1fb94:	21405c26 	beq	r4,r5,1fd08 <__umoddi3+0x57c>
   1fb98:	2147c83a 	sub	r3,r4,r5
   1fb9c:	102d883a 	mov	r22,r2
   1fba0:	95adc83a 	sub	r22,r18,r22
   1fba4:	95a5803a 	cmpltu	r18,r18,r22
   1fba8:	1c87c83a 	sub	r3,r3,r18
   1fbac:	1cc4983a 	sll	r2,r3,r19
   1fbb0:	b42cd83a 	srl	r22,r22,r16
   1fbb4:	1c06d83a 	srl	r3,r3,r16
   1fbb8:	1584b03a 	or	r2,r2,r22
   1fbbc:	003f9006 	br	1fa00 <__umoddi3+0x274>
   1fbc0:	002b883a 	mov	r21,zero
   1fbc4:	003f1706 	br	1f824 <__umoddi3+0x98>
   1fbc8:	8560983a 	sll	r16,r16,r21
   1fbcc:	88e6d83a 	srl	r19,r17,r3
   1fbd0:	90c6d83a 	srl	r3,r18,r3
   1fbd4:	8028d43a 	srli	r20,r16,16
   1fbd8:	8d62983a 	sll	r17,r17,r21
   1fbdc:	9809883a 	mov	r4,r19
   1fbe0:	a00b883a 	mov	r5,r20
   1fbe4:	88eeb03a 	or	r23,r17,r3
   1fbe8:	0020b800 	call	20b80 <__umodsi3>
   1fbec:	9809883a 	mov	r4,r19
   1fbf0:	a00b883a 	mov	r5,r20
   1fbf4:	1023883a 	mov	r17,r2
   1fbf8:	0020b780 	call	20b78 <__udivsi3>
   1fbfc:	85bfffcc 	andi	r22,r16,65535
   1fc00:	880a943a 	slli	r5,r17,16
   1fc04:	b806d43a 	srli	r3,r23,16
   1fc08:	1585383a 	mul	r2,r2,r22
   1fc0c:	9566983a 	sll	r19,r18,r21
   1fc10:	28cab03a 	or	r5,r5,r3
   1fc14:	2880042e 	bgeu	r5,r2,1fc28 <__umoddi3+0x49c>
   1fc18:	2c0b883a 	add	r5,r5,r16
   1fc1c:	2c000236 	bltu	r5,r16,1fc28 <__umoddi3+0x49c>
   1fc20:	2880012e 	bgeu	r5,r2,1fc28 <__umoddi3+0x49c>
   1fc24:	2c0b883a 	add	r5,r5,r16
   1fc28:	28a5c83a 	sub	r18,r5,r2
   1fc2c:	9009883a 	mov	r4,r18
   1fc30:	a00b883a 	mov	r5,r20
   1fc34:	0020b800 	call	20b80 <__umodsi3>
   1fc38:	1023883a 	mov	r17,r2
   1fc3c:	9009883a 	mov	r4,r18
   1fc40:	a00b883a 	mov	r5,r20
   1fc44:	0020b780 	call	20b78 <__udivsi3>
   1fc48:	8822943a 	slli	r17,r17,16
   1fc4c:	1585383a 	mul	r2,r2,r22
   1fc50:	bdffffcc 	andi	r23,r23,65535
   1fc54:	8de2b03a 	or	r17,r17,r23
   1fc58:	8880042e 	bgeu	r17,r2,1fc6c <__umoddi3+0x4e0>
   1fc5c:	8c23883a 	add	r17,r17,r16
   1fc60:	8c000236 	bltu	r17,r16,1fc6c <__umoddi3+0x4e0>
   1fc64:	8880012e 	bgeu	r17,r2,1fc6c <__umoddi3+0x4e0>
   1fc68:	8c23883a 	add	r17,r17,r16
   1fc6c:	88a3c83a 	sub	r17,r17,r2
   1fc70:	003f3d06 	br	1f968 <__umoddi3+0x1dc>
   1fc74:	15adc83a 	sub	r22,r2,r22
   1fc78:	2d07c83a 	sub	r3,r5,r20
   1fc7c:	1585803a 	cmpltu	r2,r2,r22
   1fc80:	1887c83a 	sub	r3,r3,r2
   1fc84:	20c7c83a 	sub	r3,r4,r3
   1fc88:	003fc506 	br	1fba0 <__umoddi3+0x414>
   1fc8c:	00c00204 	movi	r3,8
   1fc90:	1827883a 	mov	r19,r3
   1fc94:	003f0b06 	br	1f8c4 <__umoddi3+0x138>
   1fc98:	00c00604 	movi	r3,24
   1fc9c:	1827883a 	mov	r19,r3
   1fca0:	003f0806 	br	1f8c4 <__umoddi3+0x138>
   1fca4:	00800604 	movi	r2,24
   1fca8:	1009883a 	mov	r4,r2
   1fcac:	003ecf06 	br	1f7ec <__umoddi3+0x60>
   1fcb0:	00800204 	movi	r2,8
   1fcb4:	1007883a 	mov	r3,r2
   1fcb8:	003f1f06 	br	1f938 <__umoddi3+0x1ac>
   1fcbc:	00800604 	movi	r2,24
   1fcc0:	1007883a 	mov	r3,r2
   1fcc4:	003f1c06 	br	1f938 <__umoddi3+0x1ac>
   1fcc8:	00800204 	movi	r2,8
   1fccc:	1009883a 	mov	r4,r2
   1fcd0:	003ec606 	br	1f7ec <__umoddi3+0x60>
   1fcd4:	21bf962e 	bgeu	r4,r6,1fb30 <__umoddi3+0x3a4>
   1fcd8:	10bfff84 	addi	r2,r2,-2
   1fcdc:	2509883a 	add	r4,r4,r20
   1fce0:	003f9406 	br	1fb34 <__umoddi3+0x3a8>
   1fce4:	293f7e2e 	bgeu	r5,r4,1fae0 <__umoddi3+0x354>
   1fce8:	bdffff84 	addi	r23,r23,-2
   1fcec:	2d0b883a 	add	r5,r5,r20
   1fcf0:	003f7c06 	br	1fae4 <__umoddi3+0x358>
   1fcf4:	1c07883a 	add	r3,r3,r16
   1fcf8:	003f2a06 	br	1f9a4 <__umoddi3+0x218>
   1fcfc:	9005883a 	mov	r2,r18
   1fd00:	a007883a 	mov	r3,r20
   1fd04:	003f3e06 	br	1fa00 <__umoddi3+0x274>
   1fd08:	90bfda36 	bltu	r18,r2,1fc74 <__umoddi3+0x4e8>
   1fd0c:	102d883a 	mov	r22,r2
   1fd10:	0007883a 	mov	r3,zero
   1fd14:	003fa206 	br	1fba0 <__umoddi3+0x414>

0001fd18 <_fpadd_parts>:
   1fd18:	2005883a 	mov	r2,r4
   1fd1c:	21000017 	ldw	r4,0(r4)
   1fd20:	01c00044 	movi	r7,1
   1fd24:	3900622e 	bgeu	r7,r4,1feb0 <_fpadd_parts+0x198>
   1fd28:	28c00017 	ldw	r3,0(r5)
   1fd2c:	38c05f2e 	bgeu	r7,r3,1feac <_fpadd_parts+0x194>
   1fd30:	01c00104 	movi	r7,4
   1fd34:	21c0c626 	beq	r4,r7,20050 <_fpadd_parts+0x338>
   1fd38:	19c05c26 	beq	r3,r7,1feac <_fpadd_parts+0x194>
   1fd3c:	01c00084 	movi	r7,2
   1fd40:	19c06b26 	beq	r3,r7,1fef0 <_fpadd_parts+0x1d8>
   1fd44:	21c05926 	beq	r4,r7,1feac <_fpadd_parts+0x194>
   1fd48:	11c00217 	ldw	r7,8(r2)
   1fd4c:	2ac00217 	ldw	r11,8(r5)
   1fd50:	13000317 	ldw	r12,12(r2)
   1fd54:	13400417 	ldw	r13,16(r2)
   1fd58:	3ac9c83a 	sub	r4,r7,r11
   1fd5c:	2a000317 	ldw	r8,12(r5)
   1fd60:	2a400417 	ldw	r9,16(r5)
   1fd64:	2015883a 	mov	r10,r4
   1fd68:	20007516 	blt	r4,zero,1ff40 <_fpadd_parts+0x228>
   1fd6c:	00c00fc4 	movi	r3,63
   1fd70:	1a805016 	blt	r3,r10,1feb4 <_fpadd_parts+0x19c>
   1fd74:	0100870e 	bge	zero,r4,1ff94 <_fpadd_parts+0x27c>
   1fd78:	50fff804 	addi	r3,r10,-32
   1fd7c:	18009916 	blt	r3,zero,1ffe4 <_fpadd_parts+0x2cc>
   1fd80:	48d6d83a 	srl	r11,r9,r3
   1fd84:	001d883a 	mov	r14,zero
   1fd88:	18009e16 	blt	r3,zero,20004 <_fpadd_parts+0x2ec>
   1fd8c:	01000044 	movi	r4,1
   1fd90:	20c6983a 	sll	r3,r4,r3
   1fd94:	0015883a 	mov	r10,zero
   1fd98:	513fffc4 	addi	r4,r10,-1
   1fd9c:	2295403a 	cmpgeu	r10,r4,r10
   1fda0:	1a87c83a 	sub	r3,r3,r10
   1fda4:	1a52703a 	and	r9,r3,r9
   1fda8:	2210703a 	and	r8,r4,r8
   1fdac:	4250b03a 	or	r8,r8,r9
   1fdb0:	4010c03a 	cmpne	r8,r8,zero
   1fdb4:	42d0b03a 	or	r8,r8,r11
   1fdb8:	7013883a 	mov	r9,r14
   1fdbc:	11000117 	ldw	r4,4(r2)
   1fdc0:	28800117 	ldw	r2,4(r5)
   1fdc4:	20804126 	beq	r4,r2,1fecc <_fpadd_parts+0x1b4>
   1fdc8:	20006326 	beq	r4,zero,1ff58 <_fpadd_parts+0x240>
   1fdcc:	4305c83a 	sub	r2,r8,r12
   1fdd0:	4091803a 	cmpltu	r8,r8,r2
   1fdd4:	4b47c83a 	sub	r3,r9,r13
   1fdd8:	1a07c83a 	sub	r3,r3,r8
   1fddc:	18006316 	blt	r3,zero,1ff6c <_fpadd_parts+0x254>
   1fde0:	30000115 	stw	zero,4(r6)
   1fde4:	31c00215 	stw	r7,8(r6)
   1fde8:	30800315 	stw	r2,12(r6)
   1fdec:	30c00415 	stw	r3,16(r6)
   1fdf0:	11ffffc4 	addi	r7,r2,-1
   1fdf4:	388b403a 	cmpgeu	r5,r7,r2
   1fdf8:	194bc83a 	sub	r5,r3,r5
   1fdfc:	01040034 	movhi	r4,4096
   1fe00:	213fffc4 	addi	r4,r4,-1
   1fe04:	21401736 	bltu	r4,r5,1fe64 <_fpadd_parts+0x14c>
   1fe08:	29008226 	beq	r5,r4,20014 <_fpadd_parts+0x2fc>
   1fe0c:	31400217 	ldw	r5,8(r6)
   1fe10:	02840034 	movhi	r10,4096
   1fe14:	52bfffc4 	addi	r10,r10,-1
   1fe18:	033fff84 	movi	r12,-2
   1fe1c:	297fffc4 	addi	r5,r5,-1
   1fe20:	00000106 	br	1fe28 <_fpadd_parts+0x110>
   1fe24:	3a804a26 	beq	r7,r10,1ff50 <_fpadd_parts+0x238>
   1fe28:	1089883a 	add	r4,r2,r2
   1fe2c:	2091803a 	cmpltu	r8,r4,r2
   1fe30:	18c7883a 	add	r3,r3,r3
   1fe34:	227fffc4 	addi	r9,r4,-1
   1fe38:	40d1883a 	add	r8,r8,r3
   1fe3c:	490f403a 	cmpgeu	r7,r9,r4
   1fe40:	41cfc83a 	sub	r7,r8,r7
   1fe44:	2817883a 	mov	r11,r5
   1fe48:	2005883a 	mov	r2,r4
   1fe4c:	4007883a 	mov	r3,r8
   1fe50:	297fffc4 	addi	r5,r5,-1
   1fe54:	51fff32e 	bgeu	r10,r7,1fe24 <_fpadd_parts+0x10c>
   1fe58:	31000315 	stw	r4,12(r6)
   1fe5c:	32000415 	stw	r8,16(r6)
   1fe60:	32c00215 	stw	r11,8(r6)
   1fe64:	010000c4 	movi	r4,3
   1fe68:	31000015 	stw	r4,0(r6)
   1fe6c:	01080034 	movhi	r4,8192
   1fe70:	213fffc4 	addi	r4,r4,-1
   1fe74:	20c00b2e 	bgeu	r4,r3,1fea4 <_fpadd_parts+0x18c>
   1fe78:	180e97fa 	slli	r7,r3,31
   1fe7c:	1008d07a 	srli	r4,r2,1
   1fe80:	31400217 	ldw	r5,8(r6)
   1fe84:	1806d07a 	srli	r3,r3,1
   1fe88:	1080004c 	andi	r2,r2,1
   1fe8c:	3908b03a 	or	r4,r7,r4
   1fe90:	1108b03a 	or	r4,r2,r4
   1fe94:	29400044 	addi	r5,r5,1
   1fe98:	31000315 	stw	r4,12(r6)
   1fe9c:	30c00415 	stw	r3,16(r6)
   1fea0:	31400215 	stw	r5,8(r6)
   1fea4:	3005883a 	mov	r2,r6
   1fea8:	f800283a 	ret
   1feac:	2805883a 	mov	r2,r5
   1feb0:	f800283a 	ret
   1feb4:	59c01e0e 	bge	r11,r7,1ff30 <_fpadd_parts+0x218>
   1feb8:	11000117 	ldw	r4,4(r2)
   1febc:	28800117 	ldw	r2,4(r5)
   1fec0:	0011883a 	mov	r8,zero
   1fec4:	0013883a 	mov	r9,zero
   1fec8:	20bfbf1e 	bne	r4,r2,1fdc8 <_fpadd_parts+0xb0>
   1fecc:	4305883a 	add	r2,r8,r12
   1fed0:	1207803a 	cmpltu	r3,r2,r8
   1fed4:	4b53883a 	add	r9,r9,r13
   1fed8:	1a47883a 	add	r3,r3,r9
   1fedc:	31000115 	stw	r4,4(r6)
   1fee0:	31c00215 	stw	r7,8(r6)
   1fee4:	30800315 	stw	r2,12(r6)
   1fee8:	30c00415 	stw	r3,16(r6)
   1feec:	003fdd06 	br	1fe64 <_fpadd_parts+0x14c>
   1fef0:	20ffef1e 	bne	r4,r3,1feb0 <_fpadd_parts+0x198>
   1fef4:	31000015 	stw	r4,0(r6)
   1fef8:	10c00117 	ldw	r3,4(r2)
   1fefc:	30c00115 	stw	r3,4(r6)
   1ff00:	10c00217 	ldw	r3,8(r2)
   1ff04:	11000117 	ldw	r4,4(r2)
   1ff08:	29400117 	ldw	r5,4(r5)
   1ff0c:	30c00215 	stw	r3,8(r6)
   1ff10:	10c00317 	ldw	r3,12(r2)
   1ff14:	2908703a 	and	r4,r5,r4
   1ff18:	30c00315 	stw	r3,12(r6)
   1ff1c:	10c00417 	ldw	r3,16(r2)
   1ff20:	31000115 	stw	r4,4(r6)
   1ff24:	3005883a 	mov	r2,r6
   1ff28:	30c00415 	stw	r3,16(r6)
   1ff2c:	f800283a 	ret
   1ff30:	580f883a 	mov	r7,r11
   1ff34:	0019883a 	mov	r12,zero
   1ff38:	001b883a 	mov	r13,zero
   1ff3c:	003f9f06 	br	1fdbc <_fpadd_parts+0xa4>
   1ff40:	0115c83a 	sub	r10,zero,r4
   1ff44:	00c00fc4 	movi	r3,63
   1ff48:	1abfda16 	blt	r3,r10,1feb4 <_fpadd_parts+0x19c>
   1ff4c:	003f8906 	br	1fd74 <_fpadd_parts+0x5c>
   1ff50:	627fb52e 	bgeu	r12,r9,1fe28 <_fpadd_parts+0x110>
   1ff54:	003fc006 	br	1fe58 <_fpadd_parts+0x140>
   1ff58:	6205c83a 	sub	r2,r12,r8
   1ff5c:	6099803a 	cmpltu	r12,r12,r2
   1ff60:	6a47c83a 	sub	r3,r13,r9
   1ff64:	1b07c83a 	sub	r3,r3,r12
   1ff68:	183f9d0e 	bge	r3,zero,1fde0 <_fpadd_parts+0xc8>
   1ff6c:	0085c83a 	sub	r2,zero,r2
   1ff70:	1008c03a 	cmpne	r4,r2,zero
   1ff74:	00c7c83a 	sub	r3,zero,r3
   1ff78:	1907c83a 	sub	r3,r3,r4
   1ff7c:	01000044 	movi	r4,1
   1ff80:	31000115 	stw	r4,4(r6)
   1ff84:	31c00215 	stw	r7,8(r6)
   1ff88:	30800315 	stw	r2,12(r6)
   1ff8c:	30c00415 	stw	r3,16(r6)
   1ff90:	003f9706 	br	1fdf0 <_fpadd_parts+0xd8>
   1ff94:	203f8926 	beq	r4,zero,1fdbc <_fpadd_parts+0xa4>
   1ff98:	50fff804 	addi	r3,r10,-32
   1ff9c:	3a8f883a 	add	r7,r7,r10
   1ffa0:	18002316 	blt	r3,zero,20030 <_fpadd_parts+0x318>
   1ffa4:	68d6d83a 	srl	r11,r13,r3
   1ffa8:	001d883a 	mov	r14,zero
   1ffac:	18001c16 	blt	r3,zero,20020 <_fpadd_parts+0x308>
   1ffb0:	01000044 	movi	r4,1
   1ffb4:	20c6983a 	sll	r3,r4,r3
   1ffb8:	0015883a 	mov	r10,zero
   1ffbc:	513fffc4 	addi	r4,r10,-1
   1ffc0:	2295403a 	cmpgeu	r10,r4,r10
   1ffc4:	1a87c83a 	sub	r3,r3,r10
   1ffc8:	1b5a703a 	and	r13,r3,r13
   1ffcc:	2318703a 	and	r12,r4,r12
   1ffd0:	6358b03a 	or	r12,r12,r13
   1ffd4:	6018c03a 	cmpne	r12,r12,zero
   1ffd8:	62d8b03a 	or	r12,r12,r11
   1ffdc:	701b883a 	mov	r13,r14
   1ffe0:	003f7606 	br	1fdbc <_fpadd_parts+0xa4>
   1ffe4:	4808907a 	slli	r4,r9,1
   1ffe8:	02c007c4 	movi	r11,31
   1ffec:	5a97c83a 	sub	r11,r11,r10
   1fff0:	22c8983a 	sll	r4,r4,r11
   1fff4:	4296d83a 	srl	r11,r8,r10
   1fff8:	4a9cd83a 	srl	r14,r9,r10
   1fffc:	22d6b03a 	or	r11,r4,r11
   20000:	003f6106 	br	1fd88 <_fpadd_parts+0x70>
   20004:	00c00044 	movi	r3,1
   20008:	1a94983a 	sll	r10,r3,r10
   2000c:	0007883a 	mov	r3,zero
   20010:	003f6106 	br	1fd98 <_fpadd_parts+0x80>
   20014:	013fff84 	movi	r4,-2
   20018:	21ff7c2e 	bgeu	r4,r7,1fe0c <_fpadd_parts+0xf4>
   2001c:	003f9106 	br	1fe64 <_fpadd_parts+0x14c>
   20020:	00c00044 	movi	r3,1
   20024:	1a94983a 	sll	r10,r3,r10
   20028:	0007883a 	mov	r3,zero
   2002c:	003fe306 	br	1ffbc <_fpadd_parts+0x2a4>
   20030:	6816907a 	slli	r11,r13,1
   20034:	010007c4 	movi	r4,31
   20038:	2289c83a 	sub	r4,r4,r10
   2003c:	5908983a 	sll	r4,r11,r4
   20040:	6296d83a 	srl	r11,r12,r10
   20044:	6a9cd83a 	srl	r14,r13,r10
   20048:	22d6b03a 	or	r11,r4,r11
   2004c:	003fd706 	br	1ffac <_fpadd_parts+0x294>
   20050:	193f971e 	bne	r3,r4,1feb0 <_fpadd_parts+0x198>
   20054:	11000117 	ldw	r4,4(r2)
   20058:	28c00117 	ldw	r3,4(r5)
   2005c:	20ff9426 	beq	r4,r3,1feb0 <_fpadd_parts+0x198>
   20060:	008000f4 	movhi	r2,3
   20064:	1082b604 	addi	r2,r2,2776
   20068:	f800283a 	ret

0002006c <__adddf3>:
   2006c:	deffec04 	addi	sp,sp,-80
   20070:	d9001115 	stw	r4,68(sp)
   20074:	d9401215 	stw	r5,72(sp)
   20078:	d9001104 	addi	r4,sp,68
   2007c:	d9400a04 	addi	r5,sp,40
   20080:	dfc01315 	stw	ra,76(sp)
   20084:	d9c01015 	stw	r7,64(sp)
   20088:	d9800f15 	stw	r6,60(sp)
   2008c:	0020eb80 	call	20eb8 <__unpack_d>
   20090:	d9000f04 	addi	r4,sp,60
   20094:	d9400504 	addi	r5,sp,20
   20098:	0020eb80 	call	20eb8 <__unpack_d>
   2009c:	d9000a04 	addi	r4,sp,40
   200a0:	d9400504 	addi	r5,sp,20
   200a4:	d80d883a 	mov	r6,sp
   200a8:	001fd180 	call	1fd18 <_fpadd_parts>
   200ac:	1009883a 	mov	r4,r2
   200b0:	0020c940 	call	20c94 <__pack_d>
   200b4:	dfc01317 	ldw	ra,76(sp)
   200b8:	dec01404 	addi	sp,sp,80
   200bc:	f800283a 	ret

000200c0 <__subdf3>:
   200c0:	deffec04 	addi	sp,sp,-80
   200c4:	d9001115 	stw	r4,68(sp)
   200c8:	d9401215 	stw	r5,72(sp)
   200cc:	d9001104 	addi	r4,sp,68
   200d0:	d9400a04 	addi	r5,sp,40
   200d4:	dfc01315 	stw	ra,76(sp)
   200d8:	d9c01015 	stw	r7,64(sp)
   200dc:	d9800f15 	stw	r6,60(sp)
   200e0:	0020eb80 	call	20eb8 <__unpack_d>
   200e4:	d9000f04 	addi	r4,sp,60
   200e8:	d9400504 	addi	r5,sp,20
   200ec:	0020eb80 	call	20eb8 <__unpack_d>
   200f0:	d8800617 	ldw	r2,24(sp)
   200f4:	d9000a04 	addi	r4,sp,40
   200f8:	d9400504 	addi	r5,sp,20
   200fc:	d80d883a 	mov	r6,sp
   20100:	1080005c 	xori	r2,r2,1
   20104:	d8800615 	stw	r2,24(sp)
   20108:	001fd180 	call	1fd18 <_fpadd_parts>
   2010c:	1009883a 	mov	r4,r2
   20110:	0020c940 	call	20c94 <__pack_d>
   20114:	dfc01317 	ldw	ra,76(sp)
   20118:	dec01404 	addi	sp,sp,80
   2011c:	f800283a 	ret

00020120 <__muldf3>:
   20120:	deffe404 	addi	sp,sp,-112
   20124:	d9001115 	stw	r4,68(sp)
   20128:	d9401215 	stw	r5,72(sp)
   2012c:	d9001104 	addi	r4,sp,68
   20130:	d9400a04 	addi	r5,sp,40
   20134:	dfc01b15 	stw	ra,108(sp)
   20138:	d9800f15 	stw	r6,60(sp)
   2013c:	d9c01015 	stw	r7,64(sp)
   20140:	ddc01a15 	stw	r23,104(sp)
   20144:	dd801915 	stw	r22,100(sp)
   20148:	dd401815 	stw	r21,96(sp)
   2014c:	dd001715 	stw	r20,92(sp)
   20150:	dcc01615 	stw	r19,88(sp)
   20154:	dc801515 	stw	r18,84(sp)
   20158:	dc401415 	stw	r17,80(sp)
   2015c:	dc001315 	stw	r16,76(sp)
   20160:	0020eb80 	call	20eb8 <__unpack_d>
   20164:	d9000f04 	addi	r4,sp,60
   20168:	d9400504 	addi	r5,sp,20
   2016c:	0020eb80 	call	20eb8 <__unpack_d>
   20170:	d8c00a17 	ldw	r3,40(sp)
   20174:	00800044 	movi	r2,1
   20178:	10c01136 	bltu	r2,r3,201c0 <__muldf3+0xa0>
   2017c:	d8c00b17 	ldw	r3,44(sp)
   20180:	d8800617 	ldw	r2,24(sp)
   20184:	d9000a04 	addi	r4,sp,40
   20188:	1884c03a 	cmpne	r2,r3,r2
   2018c:	d8800b15 	stw	r2,44(sp)
   20190:	0020c940 	call	20c94 <__pack_d>
   20194:	dfc01b17 	ldw	ra,108(sp)
   20198:	ddc01a17 	ldw	r23,104(sp)
   2019c:	dd801917 	ldw	r22,100(sp)
   201a0:	dd401817 	ldw	r21,96(sp)
   201a4:	dd001717 	ldw	r20,92(sp)
   201a8:	dcc01617 	ldw	r19,88(sp)
   201ac:	dc801517 	ldw	r18,84(sp)
   201b0:	dc401417 	ldw	r17,80(sp)
   201b4:	dc001317 	ldw	r16,76(sp)
   201b8:	dec01c04 	addi	sp,sp,112
   201bc:	f800283a 	ret
   201c0:	d9000517 	ldw	r4,20(sp)
   201c4:	11000636 	bltu	r2,r4,201e0 <__muldf3+0xc0>
   201c8:	d8800617 	ldw	r2,24(sp)
   201cc:	d8c00b17 	ldw	r3,44(sp)
   201d0:	d9000504 	addi	r4,sp,20
   201d4:	1884c03a 	cmpne	r2,r3,r2
   201d8:	d8800615 	stw	r2,24(sp)
   201dc:	003fec06 	br	20190 <__muldf3+0x70>
   201e0:	00800104 	movi	r2,4
   201e4:	1880051e 	bne	r3,r2,201fc <__muldf3+0xdc>
   201e8:	00800084 	movi	r2,2
   201ec:	20bfe31e 	bne	r4,r2,2017c <__muldf3+0x5c>
   201f0:	010000f4 	movhi	r4,3
   201f4:	2102b604 	addi	r4,r4,2776
   201f8:	003fe506 	br	20190 <__muldf3+0x70>
   201fc:	2080031e 	bne	r4,r2,2020c <__muldf3+0xec>
   20200:	00800084 	movi	r2,2
   20204:	18bffa26 	beq	r3,r2,201f0 <__muldf3+0xd0>
   20208:	003fef06 	br	201c8 <__muldf3+0xa8>
   2020c:	00800084 	movi	r2,2
   20210:	18bfda26 	beq	r3,r2,2017c <__muldf3+0x5c>
   20214:	20bfec26 	beq	r4,r2,201c8 <__muldf3+0xa8>
   20218:	dc000d17 	ldw	r16,52(sp)
   2021c:	dd000817 	ldw	r20,32(sp)
   20220:	dc800917 	ldw	r18,36(sp)
   20224:	8009883a 	mov	r4,r16
   20228:	000b883a 	mov	r5,zero
   2022c:	a00d883a 	mov	r6,r20
   20230:	000f883a 	mov	r7,zero
   20234:	0020b880 	call	20b88 <__muldi3>
   20238:	dc400e17 	ldw	r17,56(sp)
   2023c:	9009883a 	mov	r4,r18
   20240:	800d883a 	mov	r6,r16
   20244:	000b883a 	mov	r5,zero
   20248:	000f883a 	mov	r7,zero
   2024c:	102f883a 	mov	r23,r2
   20250:	1827883a 	mov	r19,r3
   20254:	0020b880 	call	20b88 <__muldi3>
   20258:	900d883a 	mov	r6,r18
   2025c:	8809883a 	mov	r4,r17
   20260:	000b883a 	mov	r5,zero
   20264:	000f883a 	mov	r7,zero
   20268:	102b883a 	mov	r21,r2
   2026c:	1821883a 	mov	r16,r3
   20270:	0020b880 	call	20b88 <__muldi3>
   20274:	8809883a 	mov	r4,r17
   20278:	000b883a 	mov	r5,zero
   2027c:	a00d883a 	mov	r6,r20
   20280:	000f883a 	mov	r7,zero
   20284:	102d883a 	mov	r22,r2
   20288:	1825883a 	mov	r18,r3
   2028c:	0020b880 	call	20b88 <__muldi3>
   20290:	154b883a 	add	r5,r2,r21
   20294:	2889803a 	cmpltu	r4,r5,r2
   20298:	1c07883a 	add	r3,r3,r16
   2029c:	20c9883a 	add	r4,r4,r3
   202a0:	24004b36 	bltu	r4,r16,203d0 <__muldf3+0x2b0>
   202a4:	8100011e 	bne	r16,r4,202ac <__muldf3+0x18c>
   202a8:	2d404936 	bltu	r5,r21,203d0 <__muldf3+0x2b0>
   202ac:	0011883a 	mov	r8,zero
   202b0:	0007883a 	mov	r3,zero
   202b4:	2ccb883a 	add	r5,r5,r19
   202b8:	b80d883a 	mov	r6,r23
   202bc:	2cc0012e 	bgeu	r5,r19,202c4 <__muldf3+0x1a4>
   202c0:	02000044 	movi	r8,1
   202c4:	258f883a 	add	r7,r4,r22
   202c8:	3909803a 	cmpltu	r4,r7,r4
   202cc:	da400c17 	ldw	r9,48(sp)
   202d0:	2489883a 	add	r4,r4,r18
   202d4:	d8800717 	ldw	r2,28(sp)
   202d8:	20c9883a 	add	r4,r4,r3
   202dc:	da800b17 	ldw	r10,44(sp)
   202e0:	d8c00617 	ldw	r3,24(sp)
   202e4:	3a11883a 	add	r8,r7,r8
   202e8:	4885883a 	add	r2,r9,r2
   202ec:	50c6c03a 	cmpne	r3,r10,r3
   202f0:	41cf803a 	cmpltu	r7,r8,r7
   202f4:	12400104 	addi	r9,r2,4
   202f8:	d8c00115 	stw	r3,4(sp)
   202fc:	3909883a 	add	r4,r7,r4
   20300:	da400215 	stw	r9,8(sp)
   20304:	03480034 	movhi	r13,8192
   20308:	6b7fffc4 	addi	r13,r13,-1
   2030c:	4007883a 	mov	r3,r8
   20310:	6900102e 	bgeu	r13,r4,20354 <__muldf3+0x234>
   20314:	10800144 	addi	r2,r2,5
   20318:	180ed07a 	srli	r7,r3,1
   2031c:	18c0004c 	andi	r3,r3,1
   20320:	201097fa 	slli	r8,r4,31
   20324:	281697fa 	slli	r11,r5,31
   20328:	2008d07a 	srli	r4,r4,1
   2032c:	3014d07a 	srli	r10,r6,1
   20330:	2812d07a 	srli	r9,r5,1
   20334:	1019883a 	mov	r12,r2
   20338:	18000226 	beq	r3,zero,20344 <__muldf3+0x224>
   2033c:	5a8cb03a 	or	r6,r11,r10
   20340:	49600034 	orhi	r5,r9,32768
   20344:	41c6b03a 	or	r3,r8,r7
   20348:	10800044 	addi	r2,r2,1
   2034c:	693ff236 	bltu	r13,r4,20318 <__muldf3+0x1f8>
   20350:	db000215 	stw	r12,8(sp)
   20354:	03440034 	movhi	r13,4096
   20358:	6b7fffc4 	addi	r13,r13,-1
   2035c:	69001336 	bltu	r13,r4,203ac <__muldf3+0x28c>
   20360:	d8800217 	ldw	r2,8(sp)
   20364:	10bfffc4 	addi	r2,r2,-1
   20368:	18d3883a 	add	r9,r3,r3
   2036c:	48c7803a 	cmpltu	r3,r9,r3
   20370:	2109883a 	add	r4,r4,r4
   20374:	190f883a 	add	r7,r3,r4
   20378:	3191883a 	add	r8,r6,r6
   2037c:	4197803a 	cmpltu	r11,r8,r6
   20380:	2955883a 	add	r10,r5,r5
   20384:	1019883a 	mov	r12,r2
   20388:	4807883a 	mov	r3,r9
   2038c:	3809883a 	mov	r4,r7
   20390:	2800010e 	bge	r5,zero,20398 <__muldf3+0x278>
   20394:	48c00054 	ori	r3,r9,1
   20398:	400d883a 	mov	r6,r8
   2039c:	5a8b883a 	add	r5,r11,r10
   203a0:	10bfffc4 	addi	r2,r2,-1
   203a4:	69fff02e 	bgeu	r13,r7,20368 <__muldf3+0x248>
   203a8:	db000215 	stw	r12,8(sp)
   203ac:	18803fcc 	andi	r2,r3,255
   203b0:	01c02004 	movi	r7,128
   203b4:	11c00926 	beq	r2,r7,203dc <__muldf3+0x2bc>
   203b8:	008000c4 	movi	r2,3
   203bc:	d9000415 	stw	r4,16(sp)
   203c0:	d8c00315 	stw	r3,12(sp)
   203c4:	d8800015 	stw	r2,0(sp)
   203c8:	d809883a 	mov	r4,sp
   203cc:	003f7006 	br	20190 <__muldf3+0x70>
   203d0:	0011883a 	mov	r8,zero
   203d4:	00c00044 	movi	r3,1
   203d8:	003fb606 	br	202b4 <__muldf3+0x194>
   203dc:	19c0400c 	andi	r7,r3,256
   203e0:	383ff51e 	bne	r7,zero,203b8 <__muldf3+0x298>
   203e4:	314ab03a 	or	r5,r6,r5
   203e8:	283ff326 	beq	r5,zero,203b8 <__muldf3+0x298>
   203ec:	1885883a 	add	r2,r3,r2
   203f0:	10cb803a 	cmpltu	r5,r2,r3
   203f4:	00ffc004 	movi	r3,-256
   203f8:	10c6703a 	and	r3,r2,r3
   203fc:	2909883a 	add	r4,r5,r4
   20400:	003fed06 	br	203b8 <__muldf3+0x298>

00020404 <__divdf3>:
   20404:	defff104 	addi	sp,sp,-60
   20408:	d9000c15 	stw	r4,48(sp)
   2040c:	d9400d15 	stw	r5,52(sp)
   20410:	d9000c04 	addi	r4,sp,48
   20414:	d9400504 	addi	r5,sp,20
   20418:	dfc00e15 	stw	ra,56(sp)
   2041c:	d9800a15 	stw	r6,40(sp)
   20420:	d9c00b15 	stw	r7,44(sp)
   20424:	0020eb80 	call	20eb8 <__unpack_d>
   20428:	d9000a04 	addi	r4,sp,40
   2042c:	d80b883a 	mov	r5,sp
   20430:	0020eb80 	call	20eb8 <__unpack_d>
   20434:	d8c00517 	ldw	r3,20(sp)
   20438:	00800044 	movi	r2,1
   2043c:	10c00536 	bltu	r2,r3,20454 <__divdf3+0x50>
   20440:	d9000504 	addi	r4,sp,20
   20444:	0020c940 	call	20c94 <__pack_d>
   20448:	dfc00e17 	ldw	ra,56(sp)
   2044c:	dec00f04 	addi	sp,sp,60
   20450:	f800283a 	ret
   20454:	d9000017 	ldw	r4,0(sp)
   20458:	11000536 	bltu	r2,r4,20470 <__divdf3+0x6c>
   2045c:	d809883a 	mov	r4,sp
   20460:	0020c940 	call	20c94 <__pack_d>
   20464:	dfc00e17 	ldw	ra,56(sp)
   20468:	dec00f04 	addi	sp,sp,60
   2046c:	f800283a 	ret
   20470:	d9800617 	ldw	r6,24(sp)
   20474:	d9400117 	ldw	r5,4(sp)
   20478:	00800104 	movi	r2,4
   2047c:	314af03a 	xor	r5,r6,r5
   20480:	d9400615 	stw	r5,24(sp)
   20484:	18800226 	beq	r3,r2,20490 <__divdf3+0x8c>
   20488:	01400084 	movi	r5,2
   2048c:	1940041e 	bne	r3,r5,204a0 <__divdf3+0x9c>
   20490:	193feb1e 	bne	r3,r4,20440 <__divdf3+0x3c>
   20494:	010000f4 	movhi	r4,3
   20498:	2102b604 	addi	r4,r4,2776
   2049c:	003fe906 	br	20444 <__divdf3+0x40>
   204a0:	20803326 	beq	r4,r2,20570 <__divdf3+0x16c>
   204a4:	21403726 	beq	r4,r5,20584 <__divdf3+0x180>
   204a8:	d8800217 	ldw	r2,8(sp)
   204ac:	d9000717 	ldw	r4,28(sp)
   204b0:	d8c00917 	ldw	r3,36(sp)
   204b4:	da000417 	ldw	r8,16(sp)
   204b8:	2089c83a 	sub	r4,r4,r2
   204bc:	d9000715 	stw	r4,28(sp)
   204c0:	d8800817 	ldw	r2,32(sp)
   204c4:	dbc00317 	ldw	r15,12(sp)
   204c8:	1a000236 	bltu	r3,r8,204d4 <__divdf3+0xd0>
   204cc:	40c0081e 	bne	r8,r3,204f0 <__divdf3+0xec>
   204d0:	13c0072e 	bgeu	r2,r15,204f0 <__divdf3+0xec>
   204d4:	108b883a 	add	r5,r2,r2
   204d8:	288d803a 	cmpltu	r6,r5,r2
   204dc:	18c7883a 	add	r3,r3,r3
   204e0:	213fffc4 	addi	r4,r4,-1
   204e4:	2805883a 	mov	r2,r5
   204e8:	30c7883a 	add	r3,r6,r3
   204ec:	d9000715 	stw	r4,28(sp)
   204f0:	01400f44 	movi	r5,61
   204f4:	000f883a 	mov	r7,zero
   204f8:	01040034 	movhi	r4,4096
   204fc:	0019883a 	mov	r12,zero
   20500:	001b883a 	mov	r13,zero
   20504:	201697fa 	slli	r11,r4,31
   20508:	3814d07a 	srli	r10,r7,1
   2050c:	297fffc4 	addi	r5,r5,-1
   20510:	1a000936 	bltu	r3,r8,20538 <__divdf3+0x134>
   20514:	13cdc83a 	sub	r6,r2,r15
   20518:	1193803a 	cmpltu	r9,r2,r6
   2051c:	1a1dc83a 	sub	r14,r3,r8
   20520:	40c0011e 	bne	r8,r3,20528 <__divdf3+0x124>
   20524:	13c00436 	bltu	r2,r15,20538 <__divdf3+0x134>
   20528:	3005883a 	mov	r2,r6
   2052c:	7247c83a 	sub	r3,r14,r9
   20530:	61d8b03a 	or	r12,r12,r7
   20534:	691ab03a 	or	r13,r13,r4
   20538:	108d883a 	add	r6,r2,r2
   2053c:	3093803a 	cmpltu	r9,r6,r2
   20540:	18c7883a 	add	r3,r3,r3
   20544:	5a8eb03a 	or	r7,r11,r10
   20548:	2008d07a 	srli	r4,r4,1
   2054c:	3005883a 	mov	r2,r6
   20550:	48c7883a 	add	r3,r9,r3
   20554:	283feb1e 	bne	r5,zero,20504 <__divdf3+0x100>
   20558:	61003fcc 	andi	r4,r12,255
   2055c:	01402004 	movi	r5,128
   20560:	21400b26 	beq	r4,r5,20590 <__divdf3+0x18c>
   20564:	db000815 	stw	r12,32(sp)
   20568:	db400915 	stw	r13,36(sp)
   2056c:	003fb406 	br	20440 <__divdf3+0x3c>
   20570:	d8000815 	stw	zero,32(sp)
   20574:	d8000915 	stw	zero,36(sp)
   20578:	d8000715 	stw	zero,28(sp)
   2057c:	d9000504 	addi	r4,sp,20
   20580:	003fb006 	br	20444 <__divdf3+0x40>
   20584:	d8800515 	stw	r2,20(sp)
   20588:	d9000504 	addi	r4,sp,20
   2058c:	003fad06 	br	20444 <__divdf3+0x40>
   20590:	6140400c 	andi	r5,r12,256
   20594:	283ff31e 	bne	r5,zero,20564 <__divdf3+0x160>
   20598:	30c4b03a 	or	r2,r6,r3
   2059c:	103ff126 	beq	r2,zero,20564 <__divdf3+0x160>
   205a0:	6109883a 	add	r4,r12,r4
   205a4:	2305803a 	cmpltu	r2,r4,r12
   205a8:	033fc004 	movi	r12,-256
   205ac:	2318703a 	and	r12,r4,r12
   205b0:	135b883a 	add	r13,r2,r13
   205b4:	003feb06 	br	20564 <__divdf3+0x160>

000205b8 <__eqdf2>:
   205b8:	defff104 	addi	sp,sp,-60
   205bc:	d9000c15 	stw	r4,48(sp)
   205c0:	d9400d15 	stw	r5,52(sp)
   205c4:	d9000c04 	addi	r4,sp,48
   205c8:	d9400504 	addi	r5,sp,20
   205cc:	dfc00e15 	stw	ra,56(sp)
   205d0:	d9800a15 	stw	r6,40(sp)
   205d4:	d9c00b15 	stw	r7,44(sp)
   205d8:	0020eb80 	call	20eb8 <__unpack_d>
   205dc:	d9000a04 	addi	r4,sp,40
   205e0:	d80b883a 	mov	r5,sp
   205e4:	0020eb80 	call	20eb8 <__unpack_d>
   205e8:	d8c00517 	ldw	r3,20(sp)
   205ec:	00800044 	movi	r2,1
   205f0:	10c0052e 	bgeu	r2,r3,20608 <__eqdf2+0x50>
   205f4:	d8c00017 	ldw	r3,0(sp)
   205f8:	10c0032e 	bgeu	r2,r3,20608 <__eqdf2+0x50>
   205fc:	d9000504 	addi	r4,sp,20
   20600:	d80b883a 	mov	r5,sp
   20604:	0020fbc0 	call	20fbc <__fpcmp_parts_d>
   20608:	dfc00e17 	ldw	ra,56(sp)
   2060c:	dec00f04 	addi	sp,sp,60
   20610:	f800283a 	ret

00020614 <__nedf2>:
   20614:	defff104 	addi	sp,sp,-60
   20618:	d9000c15 	stw	r4,48(sp)
   2061c:	d9400d15 	stw	r5,52(sp)
   20620:	d9000c04 	addi	r4,sp,48
   20624:	d9400504 	addi	r5,sp,20
   20628:	dfc00e15 	stw	ra,56(sp)
   2062c:	d9800a15 	stw	r6,40(sp)
   20630:	d9c00b15 	stw	r7,44(sp)
   20634:	0020eb80 	call	20eb8 <__unpack_d>
   20638:	d9000a04 	addi	r4,sp,40
   2063c:	d80b883a 	mov	r5,sp
   20640:	0020eb80 	call	20eb8 <__unpack_d>
   20644:	d8c00517 	ldw	r3,20(sp)
   20648:	00800044 	movi	r2,1
   2064c:	10c0052e 	bgeu	r2,r3,20664 <__nedf2+0x50>
   20650:	d8c00017 	ldw	r3,0(sp)
   20654:	10c0032e 	bgeu	r2,r3,20664 <__nedf2+0x50>
   20658:	d9000504 	addi	r4,sp,20
   2065c:	d80b883a 	mov	r5,sp
   20660:	0020fbc0 	call	20fbc <__fpcmp_parts_d>
   20664:	dfc00e17 	ldw	ra,56(sp)
   20668:	dec00f04 	addi	sp,sp,60
   2066c:	f800283a 	ret

00020670 <__gtdf2>:
   20670:	defff104 	addi	sp,sp,-60
   20674:	d9000c15 	stw	r4,48(sp)
   20678:	d9400d15 	stw	r5,52(sp)
   2067c:	d9000c04 	addi	r4,sp,48
   20680:	d9400504 	addi	r5,sp,20
   20684:	dfc00e15 	stw	ra,56(sp)
   20688:	d9800a15 	stw	r6,40(sp)
   2068c:	d9c00b15 	stw	r7,44(sp)
   20690:	0020eb80 	call	20eb8 <__unpack_d>
   20694:	d9000a04 	addi	r4,sp,40
   20698:	d80b883a 	mov	r5,sp
   2069c:	0020eb80 	call	20eb8 <__unpack_d>
   206a0:	d8c00517 	ldw	r3,20(sp)
   206a4:	00800044 	movi	r2,1
   206a8:	10c0082e 	bgeu	r2,r3,206cc <__gtdf2+0x5c>
   206ac:	d8c00017 	ldw	r3,0(sp)
   206b0:	10c0062e 	bgeu	r2,r3,206cc <__gtdf2+0x5c>
   206b4:	d9000504 	addi	r4,sp,20
   206b8:	d80b883a 	mov	r5,sp
   206bc:	0020fbc0 	call	20fbc <__fpcmp_parts_d>
   206c0:	dfc00e17 	ldw	ra,56(sp)
   206c4:	dec00f04 	addi	sp,sp,60
   206c8:	f800283a 	ret
   206cc:	00bfffc4 	movi	r2,-1
   206d0:	003ffb06 	br	206c0 <__gtdf2+0x50>

000206d4 <__gedf2>:
   206d4:	defff104 	addi	sp,sp,-60
   206d8:	d9000c15 	stw	r4,48(sp)
   206dc:	d9400d15 	stw	r5,52(sp)
   206e0:	d9000c04 	addi	r4,sp,48
   206e4:	d9400504 	addi	r5,sp,20
   206e8:	dfc00e15 	stw	ra,56(sp)
   206ec:	d9800a15 	stw	r6,40(sp)
   206f0:	d9c00b15 	stw	r7,44(sp)
   206f4:	0020eb80 	call	20eb8 <__unpack_d>
   206f8:	d9000a04 	addi	r4,sp,40
   206fc:	d80b883a 	mov	r5,sp
   20700:	0020eb80 	call	20eb8 <__unpack_d>
   20704:	d8c00517 	ldw	r3,20(sp)
   20708:	00800044 	movi	r2,1
   2070c:	10c0082e 	bgeu	r2,r3,20730 <__gedf2+0x5c>
   20710:	d8c00017 	ldw	r3,0(sp)
   20714:	10c0062e 	bgeu	r2,r3,20730 <__gedf2+0x5c>
   20718:	d9000504 	addi	r4,sp,20
   2071c:	d80b883a 	mov	r5,sp
   20720:	0020fbc0 	call	20fbc <__fpcmp_parts_d>
   20724:	dfc00e17 	ldw	ra,56(sp)
   20728:	dec00f04 	addi	sp,sp,60
   2072c:	f800283a 	ret
   20730:	00bfffc4 	movi	r2,-1
   20734:	003ffb06 	br	20724 <__gedf2+0x50>

00020738 <__ltdf2>:
   20738:	defff104 	addi	sp,sp,-60
   2073c:	d9000c15 	stw	r4,48(sp)
   20740:	d9400d15 	stw	r5,52(sp)
   20744:	d9000c04 	addi	r4,sp,48
   20748:	d9400504 	addi	r5,sp,20
   2074c:	dfc00e15 	stw	ra,56(sp)
   20750:	d9800a15 	stw	r6,40(sp)
   20754:	d9c00b15 	stw	r7,44(sp)
   20758:	0020eb80 	call	20eb8 <__unpack_d>
   2075c:	d9000a04 	addi	r4,sp,40
   20760:	d80b883a 	mov	r5,sp
   20764:	0020eb80 	call	20eb8 <__unpack_d>
   20768:	d8c00517 	ldw	r3,20(sp)
   2076c:	00800044 	movi	r2,1
   20770:	10c0052e 	bgeu	r2,r3,20788 <__ltdf2+0x50>
   20774:	d8c00017 	ldw	r3,0(sp)
   20778:	10c0032e 	bgeu	r2,r3,20788 <__ltdf2+0x50>
   2077c:	d9000504 	addi	r4,sp,20
   20780:	d80b883a 	mov	r5,sp
   20784:	0020fbc0 	call	20fbc <__fpcmp_parts_d>
   20788:	dfc00e17 	ldw	ra,56(sp)
   2078c:	dec00f04 	addi	sp,sp,60
   20790:	f800283a 	ret

00020794 <__floatsidf>:
   20794:	2004d7fa 	srli	r2,r4,31
   20798:	defff904 	addi	sp,sp,-28
   2079c:	00c000c4 	movi	r3,3
   207a0:	dfc00615 	stw	ra,24(sp)
   207a4:	dc000515 	stw	r16,20(sp)
   207a8:	d8c00015 	stw	r3,0(sp)
   207ac:	d8800115 	stw	r2,4(sp)
   207b0:	2000081e 	bne	r4,zero,207d4 <__floatsidf+0x40>
   207b4:	00800084 	movi	r2,2
   207b8:	d8800015 	stw	r2,0(sp)
   207bc:	d809883a 	mov	r4,sp
   207c0:	0020c940 	call	20c94 <__pack_d>
   207c4:	dfc00617 	ldw	ra,24(sp)
   207c8:	dc000517 	ldw	r16,20(sp)
   207cc:	dec00704 	addi	sp,sp,28
   207d0:	f800283a 	ret
   207d4:	00c00f04 	movi	r3,60
   207d8:	d8c00215 	stw	r3,8(sp)
   207dc:	10000f1e 	bne	r2,zero,2081c <__floatsidf+0x88>
   207e0:	2021883a 	mov	r16,r4
   207e4:	8009883a 	mov	r4,r16
   207e8:	0020be80 	call	20be8 <__clzsi2>
   207ec:	11000744 	addi	r4,r2,29
   207f0:	0100110e 	bge	zero,r4,20838 <__floatsidf+0xa4>
   207f4:	10ffff44 	addi	r3,r2,-3
   207f8:	18001216 	blt	r3,zero,20844 <__floatsidf+0xb0>
   207fc:	80c6983a 	sll	r3,r16,r3
   20800:	0009883a 	mov	r4,zero
   20804:	014007c4 	movi	r5,31
   20808:	2885c83a 	sub	r2,r5,r2
   2080c:	d9000315 	stw	r4,12(sp)
   20810:	d8c00415 	stw	r3,16(sp)
   20814:	d8800215 	stw	r2,8(sp)
   20818:	003fe806 	br	207bc <__floatsidf+0x28>
   2081c:	00a00034 	movhi	r2,32768
   20820:	20800e26 	beq	r4,r2,2085c <__floatsidf+0xc8>
   20824:	0121c83a 	sub	r16,zero,r4
   20828:	8009883a 	mov	r4,r16
   2082c:	0020be80 	call	20be8 <__clzsi2>
   20830:	11000744 	addi	r4,r2,29
   20834:	013fef16 	blt	zero,r4,207f4 <__floatsidf+0x60>
   20838:	dc000315 	stw	r16,12(sp)
   2083c:	d8000415 	stw	zero,16(sp)
   20840:	003fde06 	br	207bc <__floatsidf+0x28>
   20844:	800ad07a 	srli	r5,r16,1
   20848:	00c007c4 	movi	r3,31
   2084c:	1907c83a 	sub	r3,r3,r4
   20850:	28c6d83a 	srl	r3,r5,r3
   20854:	8108983a 	sll	r4,r16,r4
   20858:	003fea06 	br	20804 <__floatsidf+0x70>
   2085c:	0005883a 	mov	r2,zero
   20860:	00f07834 	movhi	r3,49632
   20864:	003fd706 	br	207c4 <__floatsidf+0x30>

00020868 <__fixdfsi>:
   20868:	defff804 	addi	sp,sp,-32
   2086c:	d9000515 	stw	r4,20(sp)
   20870:	d9400615 	stw	r5,24(sp)
   20874:	d9000504 	addi	r4,sp,20
   20878:	d80b883a 	mov	r5,sp
   2087c:	dfc00715 	stw	ra,28(sp)
   20880:	0020eb80 	call	20eb8 <__unpack_d>
   20884:	d8800017 	ldw	r2,0(sp)
   20888:	00c00084 	movi	r3,2
   2088c:	10c01c26 	beq	r2,r3,20900 <__fixdfsi+0x98>
   20890:	00c00044 	movi	r3,1
   20894:	18801a2e 	bgeu	r3,r2,20900 <__fixdfsi+0x98>
   20898:	00c00104 	movi	r3,4
   2089c:	10c01126 	beq	r2,r3,208e4 <__fixdfsi+0x7c>
   208a0:	d8800217 	ldw	r2,8(sp)
   208a4:	10001616 	blt	r2,zero,20900 <__fixdfsi+0x98>
   208a8:	00c00784 	movi	r3,30
   208ac:	18800d16 	blt	r3,r2,208e4 <__fixdfsi+0x7c>
   208b0:	00c00f04 	movi	r3,60
   208b4:	1885c83a 	sub	r2,r3,r2
   208b8:	10fff804 	addi	r3,r2,-32
   208bc:	d9400317 	ldw	r5,12(sp)
   208c0:	d9000417 	ldw	r4,16(sp)
   208c4:	18001616 	blt	r3,zero,20920 <__fixdfsi+0xb8>
   208c8:	20c4d83a 	srl	r2,r4,r3
   208cc:	d8c00117 	ldw	r3,4(sp)
   208d0:	18000126 	beq	r3,zero,208d8 <__fixdfsi+0x70>
   208d4:	0085c83a 	sub	r2,zero,r2
   208d8:	dfc00717 	ldw	ra,28(sp)
   208dc:	dec00804 	addi	sp,sp,32
   208e0:	f800283a 	ret
   208e4:	d8800117 	ldw	r2,4(sp)
   208e8:	1000091e 	bne	r2,zero,20910 <__fixdfsi+0xa8>
   208ec:	00a00034 	movhi	r2,32768
   208f0:	10bfffc4 	addi	r2,r2,-1
   208f4:	dfc00717 	ldw	ra,28(sp)
   208f8:	dec00804 	addi	sp,sp,32
   208fc:	f800283a 	ret
   20900:	0005883a 	mov	r2,zero
   20904:	dfc00717 	ldw	ra,28(sp)
   20908:	dec00804 	addi	sp,sp,32
   2090c:	f800283a 	ret
   20910:	00a00034 	movhi	r2,32768
   20914:	dfc00717 	ldw	ra,28(sp)
   20918:	dec00804 	addi	sp,sp,32
   2091c:	f800283a 	ret
   20920:	2008907a 	slli	r4,r4,1
   20924:	018007c4 	movi	r6,31
   20928:	308dc83a 	sub	r6,r6,r2
   2092c:	2188983a 	sll	r4,r4,r6
   20930:	2884d83a 	srl	r2,r5,r2
   20934:	2084b03a 	or	r2,r4,r2
   20938:	003fe406 	br	208cc <__fixdfsi+0x64>

0002093c <__floatunsidf>:
   2093c:	defff904 	addi	sp,sp,-28
   20940:	dc000515 	stw	r16,20(sp)
   20944:	dfc00615 	stw	ra,24(sp)
   20948:	d8000115 	stw	zero,4(sp)
   2094c:	2021883a 	mov	r16,r4
   20950:	20001726 	beq	r4,zero,209b0 <__floatunsidf+0x74>
   20954:	008000c4 	movi	r2,3
   20958:	d8800015 	stw	r2,0(sp)
   2095c:	00800f04 	movi	r2,60
   20960:	d8800215 	stw	r2,8(sp)
   20964:	0020be80 	call	20be8 <__clzsi2>
   20968:	10c00744 	addi	r3,r2,29
   2096c:	18001816 	blt	r3,zero,209d0 <__floatunsidf+0x94>
   20970:	18002d26 	beq	r3,zero,20a28 <__floatunsidf+0xec>
   20974:	113fff44 	addi	r4,r2,-3
   20978:	20002e16 	blt	r4,zero,20a34 <__floatunsidf+0xf8>
   2097c:	8108983a 	sll	r4,r16,r4
   20980:	0021883a 	mov	r16,zero
   20984:	014007c4 	movi	r5,31
   20988:	2885c83a 	sub	r2,r5,r2
   2098c:	dc000315 	stw	r16,12(sp)
   20990:	d9000415 	stw	r4,16(sp)
   20994:	d8800215 	stw	r2,8(sp)
   20998:	d809883a 	mov	r4,sp
   2099c:	0020c940 	call	20c94 <__pack_d>
   209a0:	dfc00617 	ldw	ra,24(sp)
   209a4:	dc000517 	ldw	r16,20(sp)
   209a8:	dec00704 	addi	sp,sp,28
   209ac:	f800283a 	ret
   209b0:	00800084 	movi	r2,2
   209b4:	d809883a 	mov	r4,sp
   209b8:	d8800015 	stw	r2,0(sp)
   209bc:	0020c940 	call	20c94 <__pack_d>
   209c0:	dfc00617 	ldw	ra,24(sp)
   209c4:	dc000517 	ldw	r16,20(sp)
   209c8:	dec00704 	addi	sp,sp,28
   209cc:	f800283a 	ret
   209d0:	00c7c83a 	sub	r3,zero,r3
   209d4:	193ff804 	addi	r4,r3,-32
   209d8:	20001c16 	blt	r4,zero,20a4c <__floatunsidf+0x110>
   209dc:	000b883a 	mov	r5,zero
   209e0:	2009d7fa 	srai	r4,r4,31
   209e4:	80c6d83a 	srl	r3,r16,r3
   209e8:	297fffc4 	addi	r5,r5,-1
   209ec:	2c20703a 	and	r16,r5,r16
   209f0:	8020c03a 	cmpne	r16,r16,zero
   209f4:	1906703a 	and	r3,r3,r4
   209f8:	010007c4 	movi	r4,31
   209fc:	80c6b03a 	or	r3,r16,r3
   20a00:	2085c83a 	sub	r2,r4,r2
   20a04:	d809883a 	mov	r4,sp
   20a08:	d8c00315 	stw	r3,12(sp)
   20a0c:	d8000415 	stw	zero,16(sp)
   20a10:	d8800215 	stw	r2,8(sp)
   20a14:	0020c940 	call	20c94 <__pack_d>
   20a18:	dfc00617 	ldw	ra,24(sp)
   20a1c:	dc000517 	ldw	r16,20(sp)
   20a20:	dec00704 	addi	sp,sp,28
   20a24:	f800283a 	ret
   20a28:	dc000315 	stw	r16,12(sp)
   20a2c:	d8000415 	stw	zero,16(sp)
   20a30:	003fd906 	br	20998 <__floatunsidf+0x5c>
   20a34:	800ad07a 	srli	r5,r16,1
   20a38:	010007c4 	movi	r4,31
   20a3c:	20c9c83a 	sub	r4,r4,r3
   20a40:	2908d83a 	srl	r4,r5,r4
   20a44:	80e0983a 	sll	r16,r16,r3
   20a48:	003fce06 	br	20984 <__floatunsidf+0x48>
   20a4c:	01400044 	movi	r5,1
   20a50:	28ca983a 	sll	r5,r5,r3
   20a54:	003fe206 	br	209e0 <__floatunsidf+0xa4>

00020a58 <udivmodsi4>:
   20a58:	2005883a 	mov	r2,r4
   20a5c:	2900182e 	bgeu	r5,r4,20ac0 <udivmodsi4+0x68>
   20a60:	28001716 	blt	r5,zero,20ac0 <udivmodsi4+0x68>
   20a64:	01000804 	movi	r4,32
   20a68:	00c00044 	movi	r3,1
   20a6c:	00000206 	br	20a78 <udivmodsi4+0x20>
   20a70:	20001126 	beq	r4,zero,20ab8 <udivmodsi4+0x60>
   20a74:	28000516 	blt	r5,zero,20a8c <udivmodsi4+0x34>
   20a78:	294b883a 	add	r5,r5,r5
   20a7c:	213fffc4 	addi	r4,r4,-1
   20a80:	18c7883a 	add	r3,r3,r3
   20a84:	28bffa36 	bltu	r5,r2,20a70 <udivmodsi4+0x18>
   20a88:	18000b26 	beq	r3,zero,20ab8 <udivmodsi4+0x60>
   20a8c:	0009883a 	mov	r4,zero
   20a90:	11400236 	bltu	r2,r5,20a9c <udivmodsi4+0x44>
   20a94:	1145c83a 	sub	r2,r2,r5
   20a98:	20c8b03a 	or	r4,r4,r3
   20a9c:	1806d07a 	srli	r3,r3,1
   20aa0:	280ad07a 	srli	r5,r5,1
   20aa4:	183ffa1e 	bne	r3,zero,20a90 <udivmodsi4+0x38>
   20aa8:	3000021e 	bne	r6,zero,20ab4 <udivmodsi4+0x5c>
   20aac:	2005883a 	mov	r2,r4
   20ab0:	f800283a 	ret
   20ab4:	f800283a 	ret
   20ab8:	0009883a 	mov	r4,zero
   20abc:	003ffa06 	br	20aa8 <udivmodsi4+0x50>
   20ac0:	00c00044 	movi	r3,1
   20ac4:	0009883a 	mov	r4,zero
   20ac8:	003ff106 	br	20a90 <udivmodsi4+0x38>

00020acc <__divsi3>:
   20acc:	defffe04 	addi	sp,sp,-8
   20ad0:	dfc00115 	stw	ra,4(sp)
   20ad4:	dc000015 	stw	r16,0(sp)
   20ad8:	20000a16 	blt	r4,zero,20b04 <__divsi3+0x38>
   20adc:	0021883a 	mov	r16,zero
   20ae0:	28000b16 	blt	r5,zero,20b10 <__divsi3+0x44>
   20ae4:	000d883a 	mov	r6,zero
   20ae8:	0020a580 	call	20a58 <udivmodsi4>
   20aec:	80000126 	beq	r16,zero,20af4 <__divsi3+0x28>
   20af0:	0085c83a 	sub	r2,zero,r2
   20af4:	dfc00117 	ldw	ra,4(sp)
   20af8:	dc000017 	ldw	r16,0(sp)
   20afc:	dec00204 	addi	sp,sp,8
   20b00:	f800283a 	ret
   20b04:	0109c83a 	sub	r4,zero,r4
   20b08:	04000044 	movi	r16,1
   20b0c:	283ff50e 	bge	r5,zero,20ae4 <__divsi3+0x18>
   20b10:	014bc83a 	sub	r5,zero,r5
   20b14:	8400005c 	xori	r16,r16,1
   20b18:	003ff206 	br	20ae4 <__divsi3+0x18>

00020b1c <__modsi3>:
   20b1c:	deffff04 	addi	sp,sp,-4
   20b20:	dfc00015 	stw	ra,0(sp)
   20b24:	20000516 	blt	r4,zero,20b3c <__modsi3+0x20>
   20b28:	28000c16 	blt	r5,zero,20b5c <__modsi3+0x40>
   20b2c:	01800044 	movi	r6,1
   20b30:	dfc00017 	ldw	ra,0(sp)
   20b34:	dec00104 	addi	sp,sp,4
   20b38:	0020a581 	jmpi	20a58 <udivmodsi4>
   20b3c:	0109c83a 	sub	r4,zero,r4
   20b40:	28000b16 	blt	r5,zero,20b70 <__modsi3+0x54>
   20b44:	01800044 	movi	r6,1
   20b48:	0020a580 	call	20a58 <udivmodsi4>
   20b4c:	0085c83a 	sub	r2,zero,r2
   20b50:	dfc00017 	ldw	ra,0(sp)
   20b54:	dec00104 	addi	sp,sp,4
   20b58:	f800283a 	ret
   20b5c:	014bc83a 	sub	r5,zero,r5
   20b60:	01800044 	movi	r6,1
   20b64:	dfc00017 	ldw	ra,0(sp)
   20b68:	dec00104 	addi	sp,sp,4
   20b6c:	0020a581 	jmpi	20a58 <udivmodsi4>
   20b70:	014bc83a 	sub	r5,zero,r5
   20b74:	003ff306 	br	20b44 <__modsi3+0x28>

00020b78 <__udivsi3>:
   20b78:	000d883a 	mov	r6,zero
   20b7c:	0020a581 	jmpi	20a58 <udivmodsi4>

00020b80 <__umodsi3>:
   20b80:	01800044 	movi	r6,1
   20b84:	0020a581 	jmpi	20a58 <udivmodsi4>

00020b88 <__muldi3>:
   20b88:	20bfffcc 	andi	r2,r4,65535
   20b8c:	2010d43a 	srli	r8,r4,16
   20b90:	30ffffcc 	andi	r3,r6,65535
   20b94:	3014d43a 	srli	r10,r6,16
   20b98:	1893383a 	mul	r9,r3,r2
   20b9c:	1a07383a 	mul	r3,r3,r8
   20ba0:	5085383a 	mul	r2,r10,r2
   20ba4:	4816d43a 	srli	r11,r9,16
   20ba8:	5211383a 	mul	r8,r10,r8
   20bac:	1885883a 	add	r2,r3,r2
   20bb0:	12c5883a 	add	r2,r2,r11
   20bb4:	10c0022e 	bgeu	r2,r3,20bc0 <__muldi3+0x38>
   20bb8:	00c00074 	movhi	r3,1
   20bbc:	40d1883a 	add	r8,r8,r3
   20bc0:	1014d43a 	srli	r10,r2,16
   20bc4:	21c9383a 	mul	r4,r4,r7
   20bc8:	314d383a 	mul	r6,r6,r5
   20bcc:	1004943a 	slli	r2,r2,16
   20bd0:	4291883a 	add	r8,r8,r10
   20bd4:	4a7fffcc 	andi	r9,r9,65535
   20bd8:	2187883a 	add	r3,r4,r6
   20bdc:	1245883a 	add	r2,r2,r9
   20be0:	1a07883a 	add	r3,r3,r8
   20be4:	f800283a 	ret

00020be8 <__clzsi2>:
   20be8:	00bfffd4 	movui	r2,65535
   20bec:	11000b36 	bltu	r2,r4,20c1c <__clzsi2+0x34>
   20bf0:	00803fc4 	movi	r2,255
   20bf4:	11001e2e 	bgeu	r2,r4,20c70 <__clzsi2+0x88>
   20bf8:	00c00204 	movi	r3,8
   20bfc:	20c8d83a 	srl	r4,r4,r3
   20c00:	00c000f4 	movhi	r3,3
   20c04:	18c2bb04 	addi	r3,r3,2796
   20c08:	00800604 	movi	r2,24
   20c0c:	1909883a 	add	r4,r3,r4
   20c10:	20c00003 	ldbu	r3,0(r4)
   20c14:	10c5c83a 	sub	r2,r2,r3
   20c18:	f800283a 	ret
   20c1c:	00804034 	movhi	r2,256
   20c20:	10bfffc4 	addi	r2,r2,-1
   20c24:	11000936 	bltu	r2,r4,20c4c <__clzsi2+0x64>
   20c28:	00800404 	movi	r2,16
   20c2c:	1007883a 	mov	r3,r2
   20c30:	20c8d83a 	srl	r4,r4,r3
   20c34:	00c000f4 	movhi	r3,3
   20c38:	18c2bb04 	addi	r3,r3,2796
   20c3c:	1909883a 	add	r4,r3,r4
   20c40:	20c00003 	ldbu	r3,0(r4)
   20c44:	10c5c83a 	sub	r2,r2,r3
   20c48:	f800283a 	ret
   20c4c:	00c00604 	movi	r3,24
   20c50:	20c8d83a 	srl	r4,r4,r3
   20c54:	00c000f4 	movhi	r3,3
   20c58:	18c2bb04 	addi	r3,r3,2796
   20c5c:	00800204 	movi	r2,8
   20c60:	1909883a 	add	r4,r3,r4
   20c64:	20c00003 	ldbu	r3,0(r4)
   20c68:	10c5c83a 	sub	r2,r2,r3
   20c6c:	f800283a 	ret
   20c70:	0007883a 	mov	r3,zero
   20c74:	20c8d83a 	srl	r4,r4,r3
   20c78:	00c000f4 	movhi	r3,3
   20c7c:	18c2bb04 	addi	r3,r3,2796
   20c80:	00800804 	movi	r2,32
   20c84:	1909883a 	add	r4,r3,r4
   20c88:	20c00003 	ldbu	r3,0(r4)
   20c8c:	10c5c83a 	sub	r2,r2,r3
   20c90:	f800283a 	ret

00020c94 <__pack_d>:
   20c94:	20800017 	ldw	r2,0(r4)
   20c98:	defff804 	addi	sp,sp,-32
   20c9c:	dcc00315 	stw	r19,12(sp)
   20ca0:	dc800215 	stw	r18,8(sp)
   20ca4:	dfc00715 	stw	ra,28(sp)
   20ca8:	dd800615 	stw	r22,24(sp)
   20cac:	dd400515 	stw	r21,20(sp)
   20cb0:	dd000415 	stw	r20,16(sp)
   20cb4:	dc400115 	stw	r17,4(sp)
   20cb8:	dc000015 	stw	r16,0(sp)
   20cbc:	04800044 	movi	r18,1
   20cc0:	24400317 	ldw	r17,12(r4)
   20cc4:	24000417 	ldw	r16,16(r4)
   20cc8:	24c00117 	ldw	r19,4(r4)
   20ccc:	9080422e 	bgeu	r18,r2,20dd8 <__pack_d+0x144>
   20cd0:	00c00104 	movi	r3,4
   20cd4:	10c03c26 	beq	r2,r3,20dc8 <__pack_d+0x134>
   20cd8:	00c00084 	movi	r3,2
   20cdc:	10c01926 	beq	r2,r3,20d44 <__pack_d+0xb0>
   20ce0:	8c04b03a 	or	r2,r17,r16
   20ce4:	10001726 	beq	r2,zero,20d44 <__pack_d+0xb0>
   20ce8:	21000217 	ldw	r4,8(r4)
   20cec:	00bf0084 	movi	r2,-1022
   20cf0:	20804016 	blt	r4,r2,20df4 <__pack_d+0x160>
   20cf4:	0080ffc4 	movi	r2,1023
   20cf8:	11003316 	blt	r2,r4,20dc8 <__pack_d+0x134>
   20cfc:	88803fcc 	andi	r2,r17,255
   20d00:	00c02004 	movi	r3,128
   20d04:	10c02926 	beq	r2,r3,20dac <__pack_d+0x118>
   20d08:	88801fc4 	addi	r2,r17,127
   20d0c:	1463803a 	cmpltu	r17,r2,r17
   20d10:	8c21883a 	add	r16,r17,r16
   20d14:	1023883a 	mov	r17,r2
   20d18:	00880034 	movhi	r2,8192
   20d1c:	10bfffc4 	addi	r2,r2,-1
   20d20:	14001c36 	bltu	r2,r16,20d94 <__pack_d+0x100>
   20d24:	2100ffc4 	addi	r4,r4,1023
   20d28:	8006963a 	slli	r3,r16,24
   20d2c:	8804d23a 	srli	r2,r17,8
   20d30:	8020913a 	slli	r16,r16,4
   20d34:	2101ffcc 	andi	r4,r4,2047
   20d38:	1884b03a 	or	r2,r3,r2
   20d3c:	8020d33a 	srli	r16,r16,12
   20d40:	00000306 	br	20d50 <__pack_d+0xbc>
   20d44:	0009883a 	mov	r4,zero
   20d48:	0005883a 	mov	r2,zero
   20d4c:	0021883a 	mov	r16,zero
   20d50:	2008953a 	slli	r4,r4,20
   20d54:	982697fa 	slli	r19,r19,31
   20d58:	00c00434 	movhi	r3,16
   20d5c:	18ffffc4 	addi	r3,r3,-1
   20d60:	80e0703a 	and	r16,r16,r3
   20d64:	8106b03a 	or	r3,r16,r4
   20d68:	1cc6b03a 	or	r3,r3,r19
   20d6c:	dfc00717 	ldw	ra,28(sp)
   20d70:	dd800617 	ldw	r22,24(sp)
   20d74:	dd400517 	ldw	r21,20(sp)
   20d78:	dd000417 	ldw	r20,16(sp)
   20d7c:	dcc00317 	ldw	r19,12(sp)
   20d80:	dc800217 	ldw	r18,8(sp)
   20d84:	dc400117 	ldw	r17,4(sp)
   20d88:	dc000017 	ldw	r16,0(sp)
   20d8c:	dec00804 	addi	sp,sp,32
   20d90:	f800283a 	ret
   20d94:	800697fa 	slli	r3,r16,31
   20d98:	8804d07a 	srli	r2,r17,1
   20d9c:	21010004 	addi	r4,r4,1024
   20da0:	8020d07a 	srli	r16,r16,1
   20da4:	18a2b03a 	or	r17,r3,r2
   20da8:	003fdf06 	br	20d28 <__pack_d+0x94>
   20dac:	88c0400c 	andi	r3,r17,256
   20db0:	183fd926 	beq	r3,zero,20d18 <__pack_d+0x84>
   20db4:	8885883a 	add	r2,r17,r2
   20db8:	1463803a 	cmpltu	r17,r2,r17
   20dbc:	8c21883a 	add	r16,r17,r16
   20dc0:	1023883a 	mov	r17,r2
   20dc4:	003fd406 	br	20d18 <__pack_d+0x84>
   20dc8:	0101ffc4 	movi	r4,2047
   20dcc:	0005883a 	mov	r2,zero
   20dd0:	0021883a 	mov	r16,zero
   20dd4:	003fde06 	br	20d50 <__pack_d+0xbc>
   20dd8:	84000234 	orhi	r16,r16,8
   20ddc:	00c00434 	movhi	r3,16
   20de0:	18ffffc4 	addi	r3,r3,-1
   20de4:	8805883a 	mov	r2,r17
   20de8:	80e0703a 	and	r16,r16,r3
   20dec:	0101ffc4 	movi	r4,2047
   20df0:	003fd706 	br	20d50 <__pack_d+0xbc>
   20df4:	1129c83a 	sub	r20,r2,r4
   20df8:	00800e04 	movi	r2,56
   20dfc:	15002716 	blt	r2,r20,20e9c <__pack_d+0x208>
   20e00:	800b883a 	mov	r5,r16
   20e04:	a00d883a 	mov	r6,r20
   20e08:	8809883a 	mov	r4,r17
   20e0c:	002108c0 	call	2108c <__lshrdi3>
   20e10:	9009883a 	mov	r4,r18
   20e14:	000b883a 	mov	r5,zero
   20e18:	a00d883a 	mov	r6,r20
   20e1c:	102d883a 	mov	r22,r2
   20e20:	182b883a 	mov	r21,r3
   20e24:	00210d00 	call	210d0 <__ashldi3>
   20e28:	1009003a 	cmpeq	r4,r2,zero
   20e2c:	1907c83a 	sub	r3,r3,r4
   20e30:	10bfffc4 	addi	r2,r2,-1
   20e34:	1c20703a 	and	r16,r3,r16
   20e38:	1444703a 	and	r2,r2,r17
   20e3c:	1404b03a 	or	r2,r2,r16
   20e40:	1004c03a 	cmpne	r2,r2,zero
   20e44:	1584b03a 	or	r2,r2,r22
   20e48:	11003fcc 	andi	r4,r2,255
   20e4c:	01402004 	movi	r5,128
   20e50:	a807883a 	mov	r3,r21
   20e54:	2140131e 	bne	r4,r5,20ea4 <__pack_d+0x210>
   20e58:	1140400c 	andi	r5,r2,256
   20e5c:	28000426 	beq	r5,zero,20e70 <__pack_d+0x1dc>
   20e60:	1109883a 	add	r4,r2,r4
   20e64:	2085803a 	cmpltu	r2,r4,r2
   20e68:	1547883a 	add	r3,r2,r21
   20e6c:	2005883a 	mov	r2,r4
   20e70:	1808963a 	slli	r4,r3,24
   20e74:	1004d23a 	srli	r2,r2,8
   20e78:	1820913a 	slli	r16,r3,4
   20e7c:	01440034 	movhi	r5,4096
   20e80:	297fffc4 	addi	r5,r5,-1
   20e84:	2084b03a 	or	r2,r4,r2
   20e88:	8020d33a 	srli	r16,r16,12
   20e8c:	01000044 	movi	r4,1
   20e90:	28ffaf36 	bltu	r5,r3,20d50 <__pack_d+0xbc>
   20e94:	0009883a 	mov	r4,zero
   20e98:	003fad06 	br	20d50 <__pack_d+0xbc>
   20e9c:	0005883a 	mov	r2,zero
   20ea0:	0007883a 	mov	r3,zero
   20ea4:	11001fc4 	addi	r4,r2,127
   20ea8:	2085803a 	cmpltu	r2,r4,r2
   20eac:	10c7883a 	add	r3,r2,r3
   20eb0:	2005883a 	mov	r2,r4
   20eb4:	003fee06 	br	20e70 <__pack_d+0x1dc>

00020eb8 <__unpack_d>:
   20eb8:	21800117 	ldw	r6,4(r4)
   20ebc:	20c00017 	ldw	r3,0(r4)
   20ec0:	3004d7fa 	srli	r2,r6,31
   20ec4:	3008d53a 	srli	r4,r6,20
   20ec8:	28800115 	stw	r2,4(r5)
   20ecc:	2101ffcc 	andi	r4,r4,2047
   20ed0:	00800434 	movhi	r2,16
   20ed4:	10bfffc4 	addi	r2,r2,-1
   20ed8:	3084703a 	and	r2,r6,r2
   20edc:	20001a1e 	bne	r4,zero,20f48 <__unpack_d+0x90>
   20ee0:	1888b03a 	or	r4,r3,r2
   20ee4:	20002626 	beq	r4,zero,20f80 <__unpack_d+0xc8>
   20ee8:	1808d63a 	srli	r4,r3,24
   20eec:	1004923a 	slli	r2,r2,8
   20ef0:	01bf0084 	movi	r6,-1022
   20ef4:	29800215 	stw	r6,8(r5)
   20ef8:	2084b03a 	or	r2,r4,r2
   20efc:	010000c4 	movi	r4,3
   20f00:	29000015 	stw	r4,0(r5)
   20f04:	02040034 	movhi	r8,4096
   20f08:	423fffc4 	addi	r8,r8,-1
   20f0c:	1806923a 	slli	r3,r3,8
   20f10:	40801836 	bltu	r8,r2,20f74 <__unpack_d+0xbc>
   20f14:	013f0044 	movi	r4,-1023
   20f18:	18cd883a 	add	r6,r3,r3
   20f1c:	30c7803a 	cmpltu	r3,r6,r3
   20f20:	1085883a 	add	r2,r2,r2
   20f24:	1885883a 	add	r2,r3,r2
   20f28:	200f883a 	mov	r7,r4
   20f2c:	3007883a 	mov	r3,r6
   20f30:	213fffc4 	addi	r4,r4,-1
   20f34:	40bff82e 	bgeu	r8,r2,20f18 <__unpack_d+0x60>
   20f38:	29c00215 	stw	r7,8(r5)
   20f3c:	28c00315 	stw	r3,12(r5)
   20f40:	28800415 	stw	r2,16(r5)
   20f44:	f800283a 	ret
   20f48:	01c1ffc4 	movi	r7,2047
   20f4c:	21c00f26 	beq	r4,r7,20f8c <__unpack_d+0xd4>
   20f50:	180cd63a 	srli	r6,r3,24
   20f54:	1004923a 	slli	r2,r2,8
   20f58:	213f0044 	addi	r4,r4,-1023
   20f5c:	1806923a 	slli	r3,r3,8
   20f60:	3084b03a 	or	r2,r6,r2
   20f64:	29000215 	stw	r4,8(r5)
   20f68:	010000c4 	movi	r4,3
   20f6c:	10840034 	orhi	r2,r2,4096
   20f70:	29000015 	stw	r4,0(r5)
   20f74:	28c00315 	stw	r3,12(r5)
   20f78:	28800415 	stw	r2,16(r5)
   20f7c:	f800283a 	ret
   20f80:	00800084 	movi	r2,2
   20f84:	28800015 	stw	r2,0(r5)
   20f88:	f800283a 	ret
   20f8c:	1888b03a 	or	r4,r3,r2
   20f90:	20000526 	beq	r4,zero,20fa8 <__unpack_d+0xf0>
   20f94:	3180022c 	andhi	r6,r6,8
   20f98:	30000626 	beq	r6,zero,20fb4 <__unpack_d+0xfc>
   20f9c:	01000044 	movi	r4,1
   20fa0:	29000015 	stw	r4,0(r5)
   20fa4:	003ff306 	br	20f74 <__unpack_d+0xbc>
   20fa8:	00800104 	movi	r2,4
   20fac:	28800015 	stw	r2,0(r5)
   20fb0:	f800283a 	ret
   20fb4:	28000015 	stw	zero,0(r5)
   20fb8:	003fee06 	br	20f74 <__unpack_d+0xbc>

00020fbc <__fpcmp_parts_d>:
   20fbc:	20c00017 	ldw	r3,0(r4)
   20fc0:	00800044 	movi	r2,1
   20fc4:	10c0142e 	bgeu	r2,r3,21018 <__fpcmp_parts_d+0x5c>
   20fc8:	29800017 	ldw	r6,0(r5)
   20fcc:	1180122e 	bgeu	r2,r6,21018 <__fpcmp_parts_d+0x5c>
   20fd0:	01c00104 	movi	r7,4
   20fd4:	19c02826 	beq	r3,r7,21078 <__fpcmp_parts_d+0xbc>
   20fd8:	31c00926 	beq	r6,r7,21000 <__fpcmp_parts_d+0x44>
   20fdc:	01c00084 	movi	r7,2
   20fe0:	19c00626 	beq	r3,r7,20ffc <__fpcmp_parts_d+0x40>
   20fe4:	31c00a26 	beq	r6,r7,21010 <__fpcmp_parts_d+0x54>
   20fe8:	20c00117 	ldw	r3,4(r4)
   20fec:	29800117 	ldw	r6,4(r5)
   20ff0:	19800b26 	beq	r3,r6,21020 <__fpcmp_parts_d+0x64>
   20ff4:	1800041e 	bne	r3,zero,21008 <__fpcmp_parts_d+0x4c>
   20ff8:	f800283a 	ret
   20ffc:	30c01a26 	beq	r6,r3,21068 <__fpcmp_parts_d+0xac>
   21000:	28800117 	ldw	r2,4(r5)
   21004:	1000041e 	bne	r2,zero,21018 <__fpcmp_parts_d+0x5c>
   21008:	00bfffc4 	movi	r2,-1
   2100c:	f800283a 	ret
   21010:	20800117 	ldw	r2,4(r4)
   21014:	103ffc1e 	bne	r2,zero,21008 <__fpcmp_parts_d+0x4c>
   21018:	00800044 	movi	r2,1
   2101c:	f800283a 	ret
   21020:	21c00217 	ldw	r7,8(r4)
   21024:	29800217 	ldw	r6,8(r5)
   21028:	31c0020e 	bge	r6,r7,21034 <__fpcmp_parts_d+0x78>
   2102c:	183ff61e 	bne	r3,zero,21008 <__fpcmp_parts_d+0x4c>
   21030:	f800283a 	ret
   21034:	39800a16 	blt	r7,r6,21060 <__fpcmp_parts_d+0xa4>
   21038:	20800417 	ldw	r2,16(r4)
   2103c:	29800417 	ldw	r6,16(r5)
   21040:	21c00317 	ldw	r7,12(r4)
   21044:	29000317 	ldw	r4,12(r5)
   21048:	30800936 	bltu	r6,r2,21070 <__fpcmp_parts_d+0xb4>
   2104c:	1180011e 	bne	r2,r6,21054 <__fpcmp_parts_d+0x98>
   21050:	21c00736 	bltu	r4,r7,21070 <__fpcmp_parts_d+0xb4>
   21054:	11800236 	bltu	r2,r6,21060 <__fpcmp_parts_d+0xa4>
   21058:	3080031e 	bne	r6,r2,21068 <__fpcmp_parts_d+0xac>
   2105c:	3900022e 	bgeu	r7,r4,21068 <__fpcmp_parts_d+0xac>
   21060:	183fe926 	beq	r3,zero,21008 <__fpcmp_parts_d+0x4c>
   21064:	003fec06 	br	21018 <__fpcmp_parts_d+0x5c>
   21068:	0005883a 	mov	r2,zero
   2106c:	f800283a 	ret
   21070:	183fe926 	beq	r3,zero,21018 <__fpcmp_parts_d+0x5c>
   21074:	003fe406 	br	21008 <__fpcmp_parts_d+0x4c>
   21078:	30ffe51e 	bne	r6,r3,21010 <__fpcmp_parts_d+0x54>
   2107c:	28c00117 	ldw	r3,4(r5)
   21080:	20800117 	ldw	r2,4(r4)
   21084:	1885c83a 	sub	r2,r3,r2
   21088:	f800283a 	ret

0002108c <__lshrdi3>:
   2108c:	2005883a 	mov	r2,r4
   21090:	2807883a 	mov	r3,r5
   21094:	30000826 	beq	r6,zero,210b8 <__lshrdi3+0x2c>
   21098:	01000804 	movi	r4,32
   2109c:	2189c83a 	sub	r4,r4,r6
   210a0:	0100060e 	bge	zero,r4,210bc <__lshrdi3+0x30>
   210a4:	1184d83a 	srl	r2,r2,r6
   210a8:	2908983a 	sll	r4,r5,r4
   210ac:	298cd83a 	srl	r6,r5,r6
   210b0:	2084b03a 	or	r2,r4,r2
   210b4:	3007883a 	mov	r3,r6
   210b8:	f800283a 	ret
   210bc:	0105c83a 	sub	r2,zero,r4
   210c0:	000d883a 	mov	r6,zero
   210c4:	2884d83a 	srl	r2,r5,r2
   210c8:	3007883a 	mov	r3,r6
   210cc:	003ffa06 	br	210b8 <__lshrdi3+0x2c>

000210d0 <__ashldi3>:
   210d0:	2005883a 	mov	r2,r4
   210d4:	2807883a 	mov	r3,r5
   210d8:	30000826 	beq	r6,zero,210fc <__ashldi3+0x2c>
   210dc:	01000804 	movi	r4,32
   210e0:	2189c83a 	sub	r4,r4,r6
   210e4:	0100060e 	bge	zero,r4,21100 <__ashldi3+0x30>
   210e8:	1108d83a 	srl	r4,r2,r4
   210ec:	2986983a 	sll	r3,r5,r6
   210f0:	118c983a 	sll	r6,r2,r6
   210f4:	20c6b03a 	or	r3,r4,r3
   210f8:	3005883a 	mov	r2,r6
   210fc:	f800283a 	ret
   21100:	0107c83a 	sub	r3,zero,r4
   21104:	000d883a 	mov	r6,zero
   21108:	10c6983a 	sll	r3,r2,r3
   2110c:	3005883a 	mov	r2,r6
   21110:	003ffa06 	br	210fc <__ashldi3+0x2c>

00021114 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21114:	defff404 	addi	sp,sp,-48
   21118:	df000b15 	stw	fp,44(sp)
   2111c:	df000b04 	addi	fp,sp,44
   21120:	e13ffc15 	stw	r4,-16(fp)
   21124:	e17ffd15 	stw	r5,-12(fp)
   21128:	e1bffe15 	stw	r6,-8(fp)
   2112c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21130:	e03ff515 	stw	zero,-44(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21134:	008000f4 	movhi	r2,3
   21138:	109bfe04 	addi	r2,r2,28664
   2113c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   21140:	10004a26 	beq	r2,zero,2126c <alt_alarm_start+0x158>
  {
    if (alarm)
   21144:	e0bffc17 	ldw	r2,-16(fp)
   21148:	10004626 	beq	r2,zero,21264 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
   2114c:	e0bffc17 	ldw	r2,-16(fp)
   21150:	e0fffe17 	ldw	r3,-8(fp)
   21154:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21158:	e0bffc17 	ldw	r2,-16(fp)
   2115c:	e0ffff17 	ldw	r3,-4(fp)
   21160:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21164:	0005303a 	rdctl	r2,status
   21168:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2116c:	e0fff717 	ldw	r3,-36(fp)
   21170:	00bfff84 	movi	r2,-2
   21174:	1884703a 	and	r2,r3,r2
   21178:	1001703a 	wrctl	status,r2
  
  return context;
   2117c:	e0bff717 	ldw	r2,-36(fp)
 
      irq_context = alt_irq_disable_all ();
   21180:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   21184:	008000f4 	movhi	r2,3
   21188:	109bff04 	addi	r2,r2,28668
   2118c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   21190:	e0bff515 	stw	r2,-44(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   21194:	e0fffd17 	ldw	r3,-12(fp)
   21198:	e0bff517 	ldw	r2,-44(fp)
   2119c:	1885883a 	add	r2,r3,r2
   211a0:	10c00044 	addi	r3,r2,1
   211a4:	e0bffc17 	ldw	r2,-16(fp)
   211a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   211ac:	e0bffc17 	ldw	r2,-16(fp)
   211b0:	10c00217 	ldw	r3,8(r2)
   211b4:	e0bff517 	ldw	r2,-44(fp)
   211b8:	1880042e 	bgeu	r3,r2,211cc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   211bc:	e0bffc17 	ldw	r2,-16(fp)
   211c0:	00c00044 	movi	r3,1
   211c4:	10c00405 	stb	r3,16(r2)
   211c8:	00000206 	br	211d4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   211cc:	e0bffc17 	ldw	r2,-16(fp)
   211d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   211d4:	e0bffc17 	ldw	r2,-16(fp)
   211d8:	00c000f4 	movhi	r3,3
   211dc:	18d33f04 	addi	r3,r3,19708
   211e0:	e0fff815 	stw	r3,-32(fp)
   211e4:	e0bff915 	stw	r2,-28(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   211e8:	e0bff917 	ldw	r2,-28(fp)
   211ec:	e0fff817 	ldw	r3,-32(fp)
   211f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   211f4:	e0bff817 	ldw	r2,-32(fp)
   211f8:	10c00017 	ldw	r3,0(r2)
   211fc:	e0bff917 	ldw	r2,-28(fp)
   21200:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21204:	e0bff817 	ldw	r2,-32(fp)
   21208:	10800017 	ldw	r2,0(r2)
   2120c:	e0fff917 	ldw	r3,-28(fp)
   21210:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21214:	e0bff817 	ldw	r2,-32(fp)
   21218:	e0fff917 	ldw	r3,-28(fp)
   2121c:	10c00015 	stw	r3,0(r2)
   21220:	e0bff617 	ldw	r2,-40(fp)
   21224:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   21228:	0005303a 	rdctl	r2,status
   2122c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   21230:	e0fffb17 	ldw	r3,-20(fp)
   21234:	00bfff84 	movi	r2,-2
   21238:	1884703a 	and	r2,r3,r2
   2123c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   21240:	e0bffa17 	ldw	r2,-24(fp)
   21244:	1080004c 	andi	r2,r2,1
   21248:	e0fffb17 	ldw	r3,-20(fp)
   2124c:	1884b03a 	or	r2,r3,r2
   21250:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
   21254:	e0bffb17 	ldw	r2,-20(fp)
   21258:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2125c:	0005883a 	mov	r2,zero
   21260:	00000306 	br	21270 <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
   21264:	00bffa84 	movi	r2,-22
   21268:	00000106 	br	21270 <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
   2126c:	00bfde84 	movi	r2,-134
  }
}
   21270:	e037883a 	mov	sp,fp
   21274:	df000017 	ldw	fp,0(sp)
   21278:	dec00104 	addi	sp,sp,4
   2127c:	f800283a 	ret

00021280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21280:	defffe04 	addi	sp,sp,-8
   21284:	dfc00115 	stw	ra,4(sp)
   21288:	df000015 	stw	fp,0(sp)
   2128c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21290:	008000f4 	movhi	r2,3
   21294:	10933d04 	addi	r2,r2,19700
   21298:	10800017 	ldw	r2,0(r2)
   2129c:	10000526 	beq	r2,zero,212b4 <alt_get_errno+0x34>
   212a0:	008000f4 	movhi	r2,3
   212a4:	10933d04 	addi	r2,r2,19700
   212a8:	10800017 	ldw	r2,0(r2)
   212ac:	103ee83a 	callr	r2
   212b0:	00000206 	br	212bc <alt_get_errno+0x3c>
   212b4:	008000f4 	movhi	r2,3
   212b8:	109bfa04 	addi	r2,r2,28648
}
   212bc:	e037883a 	mov	sp,fp
   212c0:	dfc00117 	ldw	ra,4(sp)
   212c4:	df000017 	ldw	fp,0(sp)
   212c8:	dec00204 	addi	sp,sp,8
   212cc:	f800283a 	ret

000212d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   212d0:	defffb04 	addi	sp,sp,-20
   212d4:	dfc00415 	stw	ra,16(sp)
   212d8:	df000315 	stw	fp,12(sp)
   212dc:	df000304 	addi	fp,sp,12
   212e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   212e4:	e0bfff17 	ldw	r2,-4(fp)
   212e8:	10000616 	blt	r2,zero,21304 <close+0x34>
   212ec:	e0bfff17 	ldw	r2,-4(fp)
   212f0:	10c00324 	muli	r3,r2,12
   212f4:	008000f4 	movhi	r2,3
   212f8:	108d6004 	addi	r2,r2,13696
   212fc:	1885883a 	add	r2,r3,r2
   21300:	00000106 	br	21308 <close+0x38>
   21304:	0005883a 	mov	r2,zero
   21308:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2130c:	e0bffd17 	ldw	r2,-12(fp)
   21310:	10001826 	beq	r2,zero,21374 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   21314:	e0bffd17 	ldw	r2,-12(fp)
   21318:	10800017 	ldw	r2,0(r2)
   2131c:	10800417 	ldw	r2,16(r2)
   21320:	10000626 	beq	r2,zero,2133c <close+0x6c>
   21324:	e0bffd17 	ldw	r2,-12(fp)
   21328:	10800017 	ldw	r2,0(r2)
   2132c:	10800417 	ldw	r2,16(r2)
   21330:	e13ffd17 	ldw	r4,-12(fp)
   21334:	103ee83a 	callr	r2
   21338:	00000106 	br	21340 <close+0x70>
   2133c:	0005883a 	mov	r2,zero
   21340:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21344:	e13fff17 	ldw	r4,-4(fp)
   21348:	00219b40 	call	219b4 <alt_release_fd>
    if (rval < 0)
   2134c:	e0bffe17 	ldw	r2,-8(fp)
   21350:	1000060e 	bge	r2,zero,2136c <close+0x9c>
    {
      ALT_ERRNO = -rval;
   21354:	00212800 	call	21280 <alt_get_errno>
   21358:	e0fffe17 	ldw	r3,-8(fp)
   2135c:	00c7c83a 	sub	r3,zero,r3
   21360:	10c00015 	stw	r3,0(r2)
      return -1;
   21364:	00bfffc4 	movi	r2,-1
   21368:	00000606 	br	21384 <close+0xb4>
    }
    return 0;
   2136c:	0005883a 	mov	r2,zero
   21370:	00000406 	br	21384 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21374:	00212800 	call	21280 <alt_get_errno>
   21378:	00c01444 	movi	r3,81
   2137c:	10c00015 	stw	r3,0(r2)
    return -1;
   21380:	00bfffc4 	movi	r2,-1
  }
}
   21384:	e037883a 	mov	sp,fp
   21388:	dfc00117 	ldw	ra,4(sp)
   2138c:	df000017 	ldw	fp,0(sp)
   21390:	dec00204 	addi	sp,sp,8
   21394:	f800283a 	ret

00021398 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   21398:	defffc04 	addi	sp,sp,-16
   2139c:	df000315 	stw	fp,12(sp)
   213a0:	df000304 	addi	fp,sp,12
   213a4:	e13ffd15 	stw	r4,-12(fp)
   213a8:	e17ffe15 	stw	r5,-8(fp)
   213ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   213b0:	e0bfff17 	ldw	r2,-4(fp)
}
   213b4:	e037883a 	mov	sp,fp
   213b8:	df000017 	ldw	fp,0(sp)
   213bc:	dec00104 	addi	sp,sp,4
   213c0:	f800283a 	ret

000213c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   213c4:	defffe04 	addi	sp,sp,-8
   213c8:	dfc00115 	stw	ra,4(sp)
   213cc:	df000015 	stw	fp,0(sp)
   213d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   213d4:	008000f4 	movhi	r2,3
   213d8:	10933d04 	addi	r2,r2,19700
   213dc:	10800017 	ldw	r2,0(r2)
   213e0:	10000526 	beq	r2,zero,213f8 <alt_get_errno+0x34>
   213e4:	008000f4 	movhi	r2,3
   213e8:	10933d04 	addi	r2,r2,19700
   213ec:	10800017 	ldw	r2,0(r2)
   213f0:	103ee83a 	callr	r2
   213f4:	00000206 	br	21400 <alt_get_errno+0x3c>
   213f8:	008000f4 	movhi	r2,3
   213fc:	109bfa04 	addi	r2,r2,28648
}
   21400:	e037883a 	mov	sp,fp
   21404:	dfc00117 	ldw	ra,4(sp)
   21408:	df000017 	ldw	fp,0(sp)
   2140c:	dec00204 	addi	sp,sp,8
   21410:	f800283a 	ret

00021414 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   21414:	defffb04 	addi	sp,sp,-20
   21418:	dfc00415 	stw	ra,16(sp)
   2141c:	df000315 	stw	fp,12(sp)
   21420:	df000304 	addi	fp,sp,12
   21424:	e13ffe15 	stw	r4,-8(fp)
   21428:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2142c:	e0bffe17 	ldw	r2,-8(fp)
   21430:	10000616 	blt	r2,zero,2144c <fstat+0x38>
   21434:	e0bffe17 	ldw	r2,-8(fp)
   21438:	10c00324 	muli	r3,r2,12
   2143c:	008000f4 	movhi	r2,3
   21440:	108d6004 	addi	r2,r2,13696
   21444:	1885883a 	add	r2,r3,r2
   21448:	00000106 	br	21450 <fstat+0x3c>
   2144c:	0005883a 	mov	r2,zero
   21450:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   21454:	e0bffd17 	ldw	r2,-12(fp)
   21458:	10001026 	beq	r2,zero,2149c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2145c:	e0bffd17 	ldw	r2,-12(fp)
   21460:	10800017 	ldw	r2,0(r2)
   21464:	10800817 	ldw	r2,32(r2)
   21468:	10000726 	beq	r2,zero,21488 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2146c:	e0bffd17 	ldw	r2,-12(fp)
   21470:	10800017 	ldw	r2,0(r2)
   21474:	10800817 	ldw	r2,32(r2)
   21478:	e13ffd17 	ldw	r4,-12(fp)
   2147c:	e17fff17 	ldw	r5,-4(fp)
   21480:	103ee83a 	callr	r2
   21484:	00000906 	br	214ac <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   21488:	e0bfff17 	ldw	r2,-4(fp)
   2148c:	00c80004 	movi	r3,8192
   21490:	10c00115 	stw	r3,4(r2)
      return 0;
   21494:	0005883a 	mov	r2,zero
   21498:	00000406 	br	214ac <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2149c:	00213c40 	call	213c4 <alt_get_errno>
   214a0:	00c01444 	movi	r3,81
   214a4:	10c00015 	stw	r3,0(r2)
    return -1;
   214a8:	00bfffc4 	movi	r2,-1
  }
}
   214ac:	e037883a 	mov	sp,fp
   214b0:	dfc00117 	ldw	ra,4(sp)
   214b4:	df000017 	ldw	fp,0(sp)
   214b8:	dec00204 	addi	sp,sp,8
   214bc:	f800283a 	ret

000214c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   214c0:	defffe04 	addi	sp,sp,-8
   214c4:	dfc00115 	stw	ra,4(sp)
   214c8:	df000015 	stw	fp,0(sp)
   214cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   214d0:	008000f4 	movhi	r2,3
   214d4:	10933d04 	addi	r2,r2,19700
   214d8:	10800017 	ldw	r2,0(r2)
   214dc:	10000526 	beq	r2,zero,214f4 <alt_get_errno+0x34>
   214e0:	008000f4 	movhi	r2,3
   214e4:	10933d04 	addi	r2,r2,19700
   214e8:	10800017 	ldw	r2,0(r2)
   214ec:	103ee83a 	callr	r2
   214f0:	00000206 	br	214fc <alt_get_errno+0x3c>
   214f4:	008000f4 	movhi	r2,3
   214f8:	109bfa04 	addi	r2,r2,28648
}
   214fc:	e037883a 	mov	sp,fp
   21500:	dfc00117 	ldw	ra,4(sp)
   21504:	df000017 	ldw	fp,0(sp)
   21508:	dec00204 	addi	sp,sp,8
   2150c:	f800283a 	ret

00021510 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   21510:	deffed04 	addi	sp,sp,-76
   21514:	dfc01215 	stw	ra,72(sp)
   21518:	df001115 	stw	fp,68(sp)
   2151c:	df001104 	addi	fp,sp,68
   21520:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   21524:	e0bfff17 	ldw	r2,-4(fp)
   21528:	10000616 	blt	r2,zero,21544 <isatty+0x34>
   2152c:	e0bfff17 	ldw	r2,-4(fp)
   21530:	10c00324 	muli	r3,r2,12
   21534:	008000f4 	movhi	r2,3
   21538:	108d6004 	addi	r2,r2,13696
   2153c:	1885883a 	add	r2,r3,r2
   21540:	00000106 	br	21548 <isatty+0x38>
   21544:	0005883a 	mov	r2,zero
   21548:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2154c:	e0bfef17 	ldw	r2,-68(fp)
   21550:	10000e26 	beq	r2,zero,2158c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   21554:	e0bfef17 	ldw	r2,-68(fp)
   21558:	10800017 	ldw	r2,0(r2)
   2155c:	10800817 	ldw	r2,32(r2)
   21560:	1000021e 	bne	r2,zero,2156c <isatty+0x5c>
    {
      return 1;
   21564:	00800044 	movi	r2,1
   21568:	00000c06 	br	2159c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2156c:	e0bff004 	addi	r2,fp,-64
   21570:	e13fff17 	ldw	r4,-4(fp)
   21574:	100b883a 	mov	r5,r2
   21578:	00214140 	call	21414 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2157c:	e0bff117 	ldw	r2,-60(fp)
   21580:	10880020 	cmpeqi	r2,r2,8192
   21584:	10803fcc 	andi	r2,r2,255
   21588:	00000406 	br	2159c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2158c:	00214c00 	call	214c0 <alt_get_errno>
   21590:	00c01444 	movi	r3,81
   21594:	10c00015 	stw	r3,0(r2)
    return 0;
   21598:	0005883a 	mov	r2,zero
  }
}
   2159c:	e037883a 	mov	sp,fp
   215a0:	dfc00117 	ldw	ra,4(sp)
   215a4:	df000017 	ldw	fp,0(sp)
   215a8:	dec00204 	addi	sp,sp,8
   215ac:	f800283a 	ret

000215b0 <alt_load_section>:
   215b0:	defffc04 	addi	sp,sp,-16
   215b4:	df000315 	stw	fp,12(sp)
   215b8:	df000304 	addi	fp,sp,12
   215bc:	e13ffd15 	stw	r4,-12(fp)
   215c0:	e17ffe15 	stw	r5,-8(fp)
   215c4:	e1bfff15 	stw	r6,-4(fp)
   215c8:	e0fffe17 	ldw	r3,-8(fp)
   215cc:	e0bffd17 	ldw	r2,-12(fp)
   215d0:	18800e26 	beq	r3,r2,2160c <alt_load_section+0x5c>
   215d4:	00000a06 	br	21600 <alt_load_section+0x50>
   215d8:	e0bffd17 	ldw	r2,-12(fp)
   215dc:	10c00017 	ldw	r3,0(r2)
   215e0:	e0bffe17 	ldw	r2,-8(fp)
   215e4:	10c00015 	stw	r3,0(r2)
   215e8:	e0bffe17 	ldw	r2,-8(fp)
   215ec:	10800104 	addi	r2,r2,4
   215f0:	e0bffe15 	stw	r2,-8(fp)
   215f4:	e0bffd17 	ldw	r2,-12(fp)
   215f8:	10800104 	addi	r2,r2,4
   215fc:	e0bffd15 	stw	r2,-12(fp)
   21600:	e0fffe17 	ldw	r3,-8(fp)
   21604:	e0bfff17 	ldw	r2,-4(fp)
   21608:	18bff31e 	bne	r3,r2,215d8 <alt_load_section+0x28>
   2160c:	e037883a 	mov	sp,fp
   21610:	df000017 	ldw	fp,0(sp)
   21614:	dec00104 	addi	sp,sp,4
   21618:	f800283a 	ret

0002161c <alt_load>:
   2161c:	defffe04 	addi	sp,sp,-8
   21620:	dfc00115 	stw	ra,4(sp)
   21624:	df000015 	stw	fp,0(sp)
   21628:	d839883a 	mov	fp,sp
   2162c:	010000f4 	movhi	r4,3
   21630:	21134804 	addi	r4,r4,19744
   21634:	014000f4 	movhi	r5,3
   21638:	294ac104 	addi	r5,r5,11012
   2163c:	018000f4 	movhi	r6,3
   21640:	31934804 	addi	r6,r6,19744
   21644:	00215b00 	call	215b0 <alt_load_section>
   21648:	01000034 	movhi	r4,0
   2164c:	21000804 	addi	r4,r4,32
   21650:	01400034 	movhi	r5,0
   21654:	29400804 	addi	r5,r5,32
   21658:	01800034 	movhi	r6,0
   2165c:	31800804 	addi	r6,r6,32
   21660:	00215b00 	call	215b0 <alt_load_section>
   21664:	010000f4 	movhi	r4,3
   21668:	2136a004 	addi	r4,r4,-9600
   2166c:	014000f4 	movhi	r5,3
   21670:	2976a004 	addi	r5,r5,-9600
   21674:	018000f4 	movhi	r6,3
   21678:	318ac104 	addi	r6,r6,11012
   2167c:	00215b00 	call	215b0 <alt_load_section>
   21680:	002c49c0 	call	2c49c <alt_dcache_flush_all>
   21684:	002c7a80 	call	2c7a8 <alt_icache_flush_all>
   21688:	e037883a 	mov	sp,fp
   2168c:	dfc00117 	ldw	ra,4(sp)
   21690:	df000017 	ldw	fp,0(sp)
   21694:	dec00204 	addi	sp,sp,8
   21698:	f800283a 	ret

0002169c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2169c:	defffe04 	addi	sp,sp,-8
   216a0:	dfc00115 	stw	ra,4(sp)
   216a4:	df000015 	stw	fp,0(sp)
   216a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   216ac:	008000f4 	movhi	r2,3
   216b0:	10933d04 	addi	r2,r2,19700
   216b4:	10800017 	ldw	r2,0(r2)
   216b8:	10000526 	beq	r2,zero,216d0 <alt_get_errno+0x34>
   216bc:	008000f4 	movhi	r2,3
   216c0:	10933d04 	addi	r2,r2,19700
   216c4:	10800017 	ldw	r2,0(r2)
   216c8:	103ee83a 	callr	r2
   216cc:	00000206 	br	216d8 <alt_get_errno+0x3c>
   216d0:	008000f4 	movhi	r2,3
   216d4:	109bfa04 	addi	r2,r2,28648
}
   216d8:	e037883a 	mov	sp,fp
   216dc:	dfc00117 	ldw	ra,4(sp)
   216e0:	df000017 	ldw	fp,0(sp)
   216e4:	dec00204 	addi	sp,sp,8
   216e8:	f800283a 	ret

000216ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   216ec:	defff904 	addi	sp,sp,-28
   216f0:	dfc00615 	stw	ra,24(sp)
   216f4:	df000515 	stw	fp,20(sp)
   216f8:	df000504 	addi	fp,sp,20
   216fc:	e13ffd15 	stw	r4,-12(fp)
   21700:	e17ffe15 	stw	r5,-8(fp)
   21704:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   21708:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2170c:	e0bffd17 	ldw	r2,-12(fp)
   21710:	10000616 	blt	r2,zero,2172c <lseek+0x40>
   21714:	e0bffd17 	ldw	r2,-12(fp)
   21718:	10c00324 	muli	r3,r2,12
   2171c:	008000f4 	movhi	r2,3
   21720:	108d6004 	addi	r2,r2,13696
   21724:	1885883a 	add	r2,r3,r2
   21728:	00000106 	br	21730 <lseek+0x44>
   2172c:	0005883a 	mov	r2,zero
   21730:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   21734:	e0bffc17 	ldw	r2,-16(fp)
   21738:	10001026 	beq	r2,zero,2177c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2173c:	e0bffc17 	ldw	r2,-16(fp)
   21740:	10800017 	ldw	r2,0(r2)
   21744:	10800717 	ldw	r2,28(r2)
   21748:	10000926 	beq	r2,zero,21770 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2174c:	e0bffc17 	ldw	r2,-16(fp)
   21750:	10800017 	ldw	r2,0(r2)
   21754:	10800717 	ldw	r2,28(r2)
   21758:	e13ffc17 	ldw	r4,-16(fp)
   2175c:	e17ffe17 	ldw	r5,-8(fp)
   21760:	e1bfff17 	ldw	r6,-4(fp)
   21764:	103ee83a 	callr	r2
   21768:	e0bffb15 	stw	r2,-20(fp)
   2176c:	00000506 	br	21784 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   21770:	00bfde84 	movi	r2,-134
   21774:	e0bffb15 	stw	r2,-20(fp)
   21778:	00000206 	br	21784 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2177c:	00bfebc4 	movi	r2,-81
   21780:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   21784:	e0bffb17 	ldw	r2,-20(fp)
   21788:	1000060e 	bge	r2,zero,217a4 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   2178c:	002169c0 	call	2169c <alt_get_errno>
   21790:	e0fffb17 	ldw	r3,-20(fp)
   21794:	00c7c83a 	sub	r3,zero,r3
   21798:	10c00015 	stw	r3,0(r2)
    rc = -1;
   2179c:	00bfffc4 	movi	r2,-1
   217a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   217a4:	e0bffb17 	ldw	r2,-20(fp)
}
   217a8:	e037883a 	mov	sp,fp
   217ac:	dfc00117 	ldw	ra,4(sp)
   217b0:	df000017 	ldw	fp,0(sp)
   217b4:	dec00204 	addi	sp,sp,8
   217b8:	f800283a 	ret

000217bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   217bc:	defffd04 	addi	sp,sp,-12
   217c0:	dfc00215 	stw	ra,8(sp)
   217c4:	df000115 	stw	fp,4(sp)
   217c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   217cc:	0009883a 	mov	r4,zero
   217d0:	0021f200 	call	21f20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   217d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   217d8:	0021f600 	call	21f60 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   217dc:	010000f4 	movhi	r4,3
   217e0:	2102fe04 	addi	r4,r4,3064
   217e4:	014000f4 	movhi	r5,3
   217e8:	2942fe04 	addi	r5,r5,3064
   217ec:	018000f4 	movhi	r6,3
   217f0:	3182fe04 	addi	r6,r6,3064
   217f4:	002c8980 	call	2c898 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   217f8:	002c5a80 	call	2c5a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   217fc:	010000f4 	movhi	r4,3
   21800:	21318104 	addi	r4,r4,-14844
   21804:	002d66c0 	call	2d66c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   21808:	d128d317 	ldw	r4,-23732(gp)
   2180c:	d0e8d417 	ldw	r3,-23728(gp)
   21810:	d0a8d517 	ldw	r2,-23724(gp)
   21814:	180b883a 	mov	r5,r3
   21818:	100d883a 	mov	r6,r2
   2181c:	00177000 	call	17700 <main>
   21820:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   21824:	01000044 	movi	r4,1
   21828:	00212d00 	call	212d0 <close>
  exit (result);
   2182c:	e13fff17 	ldw	r4,-4(fp)
   21830:	002d6800 	call	2d680 <exit>

00021834 <__malloc_lock>:
   21834:	defffe04 	addi	sp,sp,-8
   21838:	df000115 	stw	fp,4(sp)
   2183c:	df000104 	addi	fp,sp,4
   21840:	e13fff15 	stw	r4,-4(fp)
   21844:	e037883a 	mov	sp,fp
   21848:	df000017 	ldw	fp,0(sp)
   2184c:	dec00104 	addi	sp,sp,4
   21850:	f800283a 	ret

00021854 <__malloc_unlock>:
   21854:	defffe04 	addi	sp,sp,-8
   21858:	df000115 	stw	fp,4(sp)
   2185c:	df000104 	addi	fp,sp,4
   21860:	e13fff15 	stw	r4,-4(fp)
   21864:	e037883a 	mov	sp,fp
   21868:	df000017 	ldw	fp,0(sp)
   2186c:	dec00104 	addi	sp,sp,4
   21870:	f800283a 	ret

00021874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21874:	defffe04 	addi	sp,sp,-8
   21878:	dfc00115 	stw	ra,4(sp)
   2187c:	df000015 	stw	fp,0(sp)
   21880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21884:	008000f4 	movhi	r2,3
   21888:	10933d04 	addi	r2,r2,19700
   2188c:	10800017 	ldw	r2,0(r2)
   21890:	10000526 	beq	r2,zero,218a8 <alt_get_errno+0x34>
   21894:	008000f4 	movhi	r2,3
   21898:	10933d04 	addi	r2,r2,19700
   2189c:	10800017 	ldw	r2,0(r2)
   218a0:	103ee83a 	callr	r2
   218a4:	00000206 	br	218b0 <alt_get_errno+0x3c>
   218a8:	008000f4 	movhi	r2,3
   218ac:	109bfa04 	addi	r2,r2,28648
}
   218b0:	e037883a 	mov	sp,fp
   218b4:	dfc00117 	ldw	ra,4(sp)
   218b8:	df000017 	ldw	fp,0(sp)
   218bc:	dec00204 	addi	sp,sp,8
   218c0:	f800283a 	ret

000218c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   218c4:	defff904 	addi	sp,sp,-28
   218c8:	dfc00615 	stw	ra,24(sp)
   218cc:	df000515 	stw	fp,20(sp)
   218d0:	df000504 	addi	fp,sp,20
   218d4:	e13ffd15 	stw	r4,-12(fp)
   218d8:	e17ffe15 	stw	r5,-8(fp)
   218dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   218e0:	e0bffd17 	ldw	r2,-12(fp)
   218e4:	10000616 	blt	r2,zero,21900 <read+0x3c>
   218e8:	e0bffd17 	ldw	r2,-12(fp)
   218ec:	10c00324 	muli	r3,r2,12
   218f0:	008000f4 	movhi	r2,3
   218f4:	108d6004 	addi	r2,r2,13696
   218f8:	1885883a 	add	r2,r3,r2
   218fc:	00000106 	br	21904 <read+0x40>
   21900:	0005883a 	mov	r2,zero
   21904:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   21908:	e0bffb17 	ldw	r2,-20(fp)
   2190c:	10002026 	beq	r2,zero,21990 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   21910:	e0bffb17 	ldw	r2,-20(fp)
   21914:	10800217 	ldw	r2,8(r2)
   21918:	108000cc 	andi	r2,r2,3
   2191c:	10800060 	cmpeqi	r2,r2,1
   21920:	1000171e 	bne	r2,zero,21980 <read+0xbc>
        (fd->dev->read))
   21924:	e0bffb17 	ldw	r2,-20(fp)
   21928:	10800017 	ldw	r2,0(r2)
   2192c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   21930:	10001326 	beq	r2,zero,21980 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   21934:	e0bffb17 	ldw	r2,-20(fp)
   21938:	10800017 	ldw	r2,0(r2)
   2193c:	10c00517 	ldw	r3,20(r2)
   21940:	e0bfff17 	ldw	r2,-4(fp)
   21944:	e13ffb17 	ldw	r4,-20(fp)
   21948:	e17ffe17 	ldw	r5,-8(fp)
   2194c:	100d883a 	mov	r6,r2
   21950:	183ee83a 	callr	r3
   21954:	e0bffc15 	stw	r2,-16(fp)
   21958:	e0bffc17 	ldw	r2,-16(fp)
   2195c:	1000060e 	bge	r2,zero,21978 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   21960:	00218740 	call	21874 <alt_get_errno>
   21964:	e0fffc17 	ldw	r3,-16(fp)
   21968:	00c7c83a 	sub	r3,zero,r3
   2196c:	10c00015 	stw	r3,0(r2)
          return -1;
   21970:	00bfffc4 	movi	r2,-1
   21974:	00000a06 	br	219a0 <read+0xdc>
        }
        return rval;
   21978:	e0bffc17 	ldw	r2,-16(fp)
   2197c:	00000806 	br	219a0 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   21980:	00218740 	call	21874 <alt_get_errno>
   21984:	00c00344 	movi	r3,13
   21988:	10c00015 	stw	r3,0(r2)
   2198c:	00000306 	br	2199c <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   21990:	00218740 	call	21874 <alt_get_errno>
   21994:	00c01444 	movi	r3,81
   21998:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   2199c:	00bfffc4 	movi	r2,-1
}
   219a0:	e037883a 	mov	sp,fp
   219a4:	dfc00117 	ldw	ra,4(sp)
   219a8:	df000017 	ldw	fp,0(sp)
   219ac:	dec00204 	addi	sp,sp,8
   219b0:	f800283a 	ret

000219b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   219b4:	defffe04 	addi	sp,sp,-8
   219b8:	df000115 	stw	fp,4(sp)
   219bc:	df000104 	addi	fp,sp,4
   219c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   219c4:	e0bfff17 	ldw	r2,-4(fp)
   219c8:	108000d0 	cmplti	r2,r2,3
   219cc:	10000d1e 	bne	r2,zero,21a04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   219d0:	00c000f4 	movhi	r3,3
   219d4:	18cd6004 	addi	r3,r3,13696
   219d8:	e0bfff17 	ldw	r2,-4(fp)
   219dc:	10800324 	muli	r2,r2,12
   219e0:	1885883a 	add	r2,r3,r2
   219e4:	10800204 	addi	r2,r2,8
   219e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   219ec:	00c000f4 	movhi	r3,3
   219f0:	18cd6004 	addi	r3,r3,13696
   219f4:	e0bfff17 	ldw	r2,-4(fp)
   219f8:	10800324 	muli	r2,r2,12
   219fc:	1885883a 	add	r2,r3,r2
   21a00:	10000015 	stw	zero,0(r2)
  }
}
   21a04:	e037883a 	mov	sp,fp
   21a08:	df000017 	ldw	fp,0(sp)
   21a0c:	dec00104 	addi	sp,sp,4
   21a10:	f800283a 	ret

00021a14 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
   21a14:	defffc04 	addi	sp,sp,-16
   21a18:	dfc00315 	stw	ra,12(sp)
   21a1c:	df000215 	stw	fp,8(sp)
   21a20:	df000204 	addi	fp,sp,8
   21a24:	e13ffe15 	stw	r4,-8(fp)
   21a28:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
   21a2c:	e13ffe17 	ldw	r4,-8(fp)
   21a30:	e17fff17 	ldw	r5,-4(fp)
   21a34:	002c4780 	call	2c478 <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
   21a38:	e0bffe17 	ldw	r2,-8(fp)
   21a3c:	10a00034 	orhi	r2,r2,32768
}
   21a40:	e037883a 	mov	sp,fp
   21a44:	dfc00117 	ldw	ra,4(sp)
   21a48:	df000017 	ldw	fp,0(sp)
   21a4c:	dec00204 	addi	sp,sp,8
   21a50:	f800283a 	ret

00021a54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   21a54:	defff704 	addi	sp,sp,-36
   21a58:	df000815 	stw	fp,32(sp)
   21a5c:	df000804 	addi	fp,sp,32
   21a60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a64:	0005303a 	rdctl	r2,status
   21a68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a6c:	e0fffa17 	ldw	r3,-24(fp)
   21a70:	00bfff84 	movi	r2,-2
   21a74:	1884703a 	and	r2,r3,r2
   21a78:	1001703a 	wrctl	status,r2
  
  return context;
   21a7c:	e0bffa17 	ldw	r2,-24(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   21a80:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21a84:	d0a01617 	ldw	r2,-32680(gp)
   21a88:	10c000c4 	addi	r3,r2,3
   21a8c:	00bfff04 	movi	r2,-4
   21a90:	1884703a 	and	r2,r3,r2
   21a94:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   21a98:	d0e01617 	ldw	r3,-32680(gp)
   21a9c:	e0bfff17 	ldw	r2,-4(fp)
   21aa0:	1885883a 	add	r2,r3,r2
   21aa4:	00c08034 	movhi	r3,512
   21aa8:	18c00004 	addi	r3,r3,0
   21aac:	1880112e 	bgeu	r3,r2,21af4 <sbrk+0xa0>
   21ab0:	e0bff817 	ldw	r2,-32(fp)
   21ab4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   21ab8:	0005303a 	rdctl	r2,status
   21abc:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   21ac0:	e0fffc17 	ldw	r3,-16(fp)
   21ac4:	00bfff84 	movi	r2,-2
   21ac8:	1884703a 	and	r2,r3,r2
   21acc:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   21ad0:	e0bffb17 	ldw	r2,-20(fp)
   21ad4:	1080004c 	andi	r2,r2,1
   21ad8:	e0fffc17 	ldw	r3,-16(fp)
   21adc:	1884b03a 	or	r2,r3,r2
   21ae0:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
   21ae4:	e0bffc17 	ldw	r2,-16(fp)
   21ae8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   21aec:	00bfffc4 	movi	r2,-1
   21af0:	00001606 	br	21b4c <sbrk+0xf8>
  }
#endif

  prev_heap_end = heap_end; 
   21af4:	d0a01617 	ldw	r2,-32680(gp)
   21af8:	e0bff915 	stw	r2,-28(fp)
  heap_end += incr; 
   21afc:	d0e01617 	ldw	r3,-32680(gp)
   21b00:	e0bfff17 	ldw	r2,-4(fp)
   21b04:	1885883a 	add	r2,r3,r2
   21b08:	d0a01615 	stw	r2,-32680(gp)
   21b0c:	e0bff817 	ldw	r2,-32(fp)
   21b10:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   21b14:	0005303a 	rdctl	r2,status
   21b18:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   21b1c:	e0fffe17 	ldw	r3,-8(fp)
   21b20:	00bfff84 	movi	r2,-2
   21b24:	1884703a 	and	r2,r3,r2
   21b28:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   21b2c:	e0bffd17 	ldw	r2,-12(fp)
   21b30:	1080004c 	andi	r2,r2,1
   21b34:	e0fffe17 	ldw	r3,-8(fp)
   21b38:	1884b03a 	or	r2,r3,r2
   21b3c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
   21b40:	e0bffe17 	ldw	r2,-8(fp)
   21b44:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   21b48:	e0bff917 	ldw	r2,-28(fp)
} 
   21b4c:	e037883a 	mov	sp,fp
   21b50:	df000017 	ldw	fp,0(sp)
   21b54:	dec00104 	addi	sp,sp,4
   21b58:	f800283a 	ret

00021b5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   21b5c:	defff904 	addi	sp,sp,-28
   21b60:	df000615 	stw	fp,24(sp)
   21b64:	df000604 	addi	fp,sp,24
   21b68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b6c:	0005303a 	rdctl	r2,status
   21b70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b74:	e0fffb17 	ldw	r3,-20(fp)
   21b78:	00bfff84 	movi	r2,-2
   21b7c:	1884703a 	and	r2,r3,r2
   21b80:	1001703a 	wrctl	status,r2
  
  return context;
   21b84:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   21b88:	e0bffa15 	stw	r2,-24(fp)
  alt_llist_remove (&alarm->llist);
   21b8c:	e0bfff17 	ldw	r2,-4(fp)
   21b90:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   21b94:	e0bffc17 	ldw	r2,-16(fp)
   21b98:	10800017 	ldw	r2,0(r2)
   21b9c:	e0fffc17 	ldw	r3,-16(fp)
   21ba0:	18c00117 	ldw	r3,4(r3)
   21ba4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   21ba8:	e0bffc17 	ldw	r2,-16(fp)
   21bac:	10800117 	ldw	r2,4(r2)
   21bb0:	e0fffc17 	ldw	r3,-16(fp)
   21bb4:	18c00017 	ldw	r3,0(r3)
   21bb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   21bbc:	e0bffc17 	ldw	r2,-16(fp)
   21bc0:	e0fffc17 	ldw	r3,-16(fp)
   21bc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   21bc8:	e0bffc17 	ldw	r2,-16(fp)
   21bcc:	e0fffc17 	ldw	r3,-16(fp)
   21bd0:	10c00015 	stw	r3,0(r2)
   21bd4:	e0bffa17 	ldw	r2,-24(fp)
   21bd8:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   21bdc:	0005303a 	rdctl	r2,status
   21be0:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   21be4:	e0fffe17 	ldw	r3,-8(fp)
   21be8:	00bfff84 	movi	r2,-2
   21bec:	1884703a 	and	r2,r3,r2
   21bf0:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   21bf4:	e0bffd17 	ldw	r2,-12(fp)
   21bf8:	1080004c 	andi	r2,r2,1
   21bfc:	e0fffe17 	ldw	r3,-8(fp)
   21c00:	1884b03a 	or	r2,r3,r2
   21c04:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
   21c08:	e0bffe17 	ldw	r2,-8(fp)
   21c0c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   21c10:	e037883a 	mov	sp,fp
   21c14:	df000017 	ldw	fp,0(sp)
   21c18:	dec00104 	addi	sp,sp,4
   21c1c:	f800283a 	ret

00021c20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   21c20:	defffb04 	addi	sp,sp,-20
   21c24:	dfc00415 	stw	ra,16(sp)
   21c28:	df000315 	stw	fp,12(sp)
   21c2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   21c30:	d0a01717 	ldw	r2,-32676(gp)
   21c34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   21c38:	d0a8d717 	ldw	r2,-23716(gp)
   21c3c:	10800044 	addi	r2,r2,1
   21c40:	d0a8d715 	stw	r2,-23716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   21c44:	00002e06 	br	21d00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   21c48:	e0bffd17 	ldw	r2,-12(fp)
   21c4c:	10800017 	ldw	r2,0(r2)
   21c50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   21c54:	e0bffd17 	ldw	r2,-12(fp)
   21c58:	10800403 	ldbu	r2,16(r2)
   21c5c:	10803fcc 	andi	r2,r2,255
   21c60:	10000426 	beq	r2,zero,21c74 <alt_tick+0x54>
   21c64:	d0a8d717 	ldw	r2,-23716(gp)
   21c68:	1000021e 	bne	r2,zero,21c74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   21c6c:	e0bffd17 	ldw	r2,-12(fp)
   21c70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   21c74:	e0bffd17 	ldw	r2,-12(fp)
   21c78:	10800217 	ldw	r2,8(r2)
   21c7c:	d0e8d717 	ldw	r3,-23716(gp)
   21c80:	18801d36 	bltu	r3,r2,21cf8 <alt_tick+0xd8>
   21c84:	e0bffd17 	ldw	r2,-12(fp)
   21c88:	10800403 	ldbu	r2,16(r2)
   21c8c:	10803fcc 	andi	r2,r2,255
   21c90:	1000191e 	bne	r2,zero,21cf8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   21c94:	e0bffd17 	ldw	r2,-12(fp)
   21c98:	10c00317 	ldw	r3,12(r2)
   21c9c:	e0bffd17 	ldw	r2,-12(fp)
   21ca0:	10800517 	ldw	r2,20(r2)
   21ca4:	1009883a 	mov	r4,r2
   21ca8:	183ee83a 	callr	r3
   21cac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   21cb0:	e0bfff17 	ldw	r2,-4(fp)
   21cb4:	1000031e 	bne	r2,zero,21cc4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   21cb8:	e13ffd17 	ldw	r4,-12(fp)
   21cbc:	0021b5c0 	call	21b5c <alt_alarm_stop>
   21cc0:	00000d06 	br	21cf8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   21cc4:	e0bffd17 	ldw	r2,-12(fp)
   21cc8:	10c00217 	ldw	r3,8(r2)
   21ccc:	e0bfff17 	ldw	r2,-4(fp)
   21cd0:	1887883a 	add	r3,r3,r2
   21cd4:	e0bffd17 	ldw	r2,-12(fp)
   21cd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   21cdc:	e0bffd17 	ldw	r2,-12(fp)
   21ce0:	10c00217 	ldw	r3,8(r2)
   21ce4:	d0a8d717 	ldw	r2,-23716(gp)
   21ce8:	1880032e 	bgeu	r3,r2,21cf8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   21cec:	e0bffd17 	ldw	r2,-12(fp)
   21cf0:	00c00044 	movi	r3,1
   21cf4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   21cf8:	e0bffe17 	ldw	r2,-8(fp)
   21cfc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   21d00:	e0fffd17 	ldw	r3,-12(fp)
   21d04:	d0a01704 	addi	r2,gp,-32676
   21d08:	18bfcf1e 	bne	r3,r2,21c48 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   21d0c:	0001883a 	nop
}
   21d10:	e037883a 	mov	sp,fp
   21d14:	dfc00117 	ldw	ra,4(sp)
   21d18:	df000017 	ldw	fp,0(sp)
   21d1c:	dec00204 	addi	sp,sp,8
   21d20:	f800283a 	ret

00021d24 <alt_uncached_malloc>:
/*
 * Allocate a block of uncached memory.
 */

volatile void* alt_uncached_malloc (size_t size)
{
   21d24:	defffc04 	addi	sp,sp,-16
   21d28:	dfc00315 	stw	ra,12(sp)
   21d2c:	df000215 	stw	fp,8(sp)
   21d30:	df000204 	addi	fp,sp,8
   21d34:	e13fff15 	stw	r4,-4(fp)
  void* ptr;

  ptr = malloc (size);
   21d38:	e13fff17 	ldw	r4,-4(fp)
   21d3c:	002d6b80 	call	2d6b8 <malloc>
   21d40:	e0bffe15 	stw	r2,-8(fp)

  alt_dcache_flush (ptr, size);
   21d44:	e13ffe17 	ldw	r4,-8(fp)
   21d48:	e17fff17 	ldw	r5,-4(fp)
   21d4c:	002c4780 	call	2c478 <alt_dcache_flush>

  return ptr ? (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK) : NULL;
   21d50:	e0bffe17 	ldw	r2,-8(fp)
   21d54:	10000326 	beq	r2,zero,21d64 <alt_uncached_malloc+0x40>
   21d58:	e0bffe17 	ldw	r2,-8(fp)
   21d5c:	10a00034 	orhi	r2,r2,32768
   21d60:	00000106 	br	21d68 <alt_uncached_malloc+0x44>
   21d64:	0005883a 	mov	r2,zero
}
   21d68:	e037883a 	mov	sp,fp
   21d6c:	dfc00117 	ldw	ra,4(sp)
   21d70:	df000017 	ldw	fp,0(sp)
   21d74:	dec00204 	addi	sp,sp,8
   21d78:	f800283a 	ret

00021d7c <usleep>:
   21d7c:	defffd04 	addi	sp,sp,-12
   21d80:	dfc00215 	stw	ra,8(sp)
   21d84:	df000115 	stw	fp,4(sp)
   21d88:	df000104 	addi	fp,sp,4
   21d8c:	e13fff15 	stw	r4,-4(fp)
   21d90:	e13fff17 	ldw	r4,-4(fp)
   21d94:	002c3500 	call	2c350 <alt_busy_sleep>
   21d98:	e037883a 	mov	sp,fp
   21d9c:	dfc00117 	ldw	ra,4(sp)
   21da0:	df000017 	ldw	fp,0(sp)
   21da4:	dec00204 	addi	sp,sp,8
   21da8:	f800283a 	ret

00021dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21dac:	defffe04 	addi	sp,sp,-8
   21db0:	dfc00115 	stw	ra,4(sp)
   21db4:	df000015 	stw	fp,0(sp)
   21db8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21dbc:	008000f4 	movhi	r2,3
   21dc0:	10933d04 	addi	r2,r2,19700
   21dc4:	10800017 	ldw	r2,0(r2)
   21dc8:	10000526 	beq	r2,zero,21de0 <alt_get_errno+0x34>
   21dcc:	008000f4 	movhi	r2,3
   21dd0:	10933d04 	addi	r2,r2,19700
   21dd4:	10800017 	ldw	r2,0(r2)
   21dd8:	103ee83a 	callr	r2
   21ddc:	00000206 	br	21de8 <alt_get_errno+0x3c>
   21de0:	008000f4 	movhi	r2,3
   21de4:	109bfa04 	addi	r2,r2,28648
}
   21de8:	e037883a 	mov	sp,fp
   21dec:	dfc00117 	ldw	ra,4(sp)
   21df0:	df000017 	ldw	fp,0(sp)
   21df4:	dec00204 	addi	sp,sp,8
   21df8:	f800283a 	ret

00021dfc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   21dfc:	defff904 	addi	sp,sp,-28
   21e00:	dfc00615 	stw	ra,24(sp)
   21e04:	df000515 	stw	fp,20(sp)
   21e08:	df000504 	addi	fp,sp,20
   21e0c:	e13ffd15 	stw	r4,-12(fp)
   21e10:	e17ffe15 	stw	r5,-8(fp)
   21e14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   21e18:	e0bffd17 	ldw	r2,-12(fp)
   21e1c:	10000616 	blt	r2,zero,21e38 <write+0x3c>
   21e20:	e0bffd17 	ldw	r2,-12(fp)
   21e24:	10c00324 	muli	r3,r2,12
   21e28:	008000f4 	movhi	r2,3
   21e2c:	108d6004 	addi	r2,r2,13696
   21e30:	1885883a 	add	r2,r3,r2
   21e34:	00000106 	br	21e3c <write+0x40>
   21e38:	0005883a 	mov	r2,zero
   21e3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   21e40:	e0bffb17 	ldw	r2,-20(fp)
   21e44:	10001f26 	beq	r2,zero,21ec4 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   21e48:	e0bffb17 	ldw	r2,-20(fp)
   21e4c:	10800217 	ldw	r2,8(r2)
   21e50:	108000cc 	andi	r2,r2,3
   21e54:	10001726 	beq	r2,zero,21eb4 <write+0xb8>
   21e58:	e0bffb17 	ldw	r2,-20(fp)
   21e5c:	10800017 	ldw	r2,0(r2)
   21e60:	10800617 	ldw	r2,24(r2)
   21e64:	10001326 	beq	r2,zero,21eb4 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   21e68:	e0bffb17 	ldw	r2,-20(fp)
   21e6c:	10800017 	ldw	r2,0(r2)
   21e70:	10c00617 	ldw	r3,24(r2)
   21e74:	e0bfff17 	ldw	r2,-4(fp)
   21e78:	e13ffb17 	ldw	r4,-20(fp)
   21e7c:	e17ffe17 	ldw	r5,-8(fp)
   21e80:	100d883a 	mov	r6,r2
   21e84:	183ee83a 	callr	r3
   21e88:	e0bffc15 	stw	r2,-16(fp)
   21e8c:	e0bffc17 	ldw	r2,-16(fp)
   21e90:	1000060e 	bge	r2,zero,21eac <write+0xb0>
      {
        ALT_ERRNO = -rval;
   21e94:	0021dac0 	call	21dac <alt_get_errno>
   21e98:	e0fffc17 	ldw	r3,-16(fp)
   21e9c:	00c7c83a 	sub	r3,zero,r3
   21ea0:	10c00015 	stw	r3,0(r2)
        return -1;
   21ea4:	00bfffc4 	movi	r2,-1
   21ea8:	00000a06 	br	21ed4 <write+0xd8>
      }
      return rval;
   21eac:	e0bffc17 	ldw	r2,-16(fp)
   21eb0:	00000806 	br	21ed4 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   21eb4:	0021dac0 	call	21dac <alt_get_errno>
   21eb8:	00c00344 	movi	r3,13
   21ebc:	10c00015 	stw	r3,0(r2)
   21ec0:	00000306 	br	21ed0 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   21ec4:	0021dac0 	call	21dac <alt_get_errno>
   21ec8:	00c01444 	movi	r3,81
   21ecc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   21ed0:	00bfffc4 	movi	r2,-1
}
   21ed4:	e037883a 	mov	sp,fp
   21ed8:	dfc00117 	ldw	ra,4(sp)
   21edc:	df000017 	ldw	fp,0(sp)
   21ee0:	dec00204 	addi	sp,sp,8
   21ee4:	f800283a 	ret

00021ee8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   21ee8:	defffd04 	addi	sp,sp,-12
   21eec:	dfc00215 	stw	ra,8(sp)
   21ef0:	df000115 	stw	fp,4(sp)
   21ef4:	df000104 	addi	fp,sp,4
   21ef8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   21efc:	e13fff17 	ldw	r4,-4(fp)
   21f00:	014000f4 	movhi	r5,3
   21f04:	29533a04 	addi	r5,r5,19688
   21f08:	002c5080 	call	2c508 <alt_dev_llist_insert>
}
   21f0c:	e037883a 	mov	sp,fp
   21f10:	dfc00117 	ldw	ra,4(sp)
   21f14:	df000017 	ldw	fp,0(sp)
   21f18:	dec00204 	addi	sp,sp,8
   21f1c:	f800283a 	ret

00021f20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21f20:	defffd04 	addi	sp,sp,-12
   21f24:	dfc00215 	stw	ra,8(sp)
   21f28:	df000115 	stw	fp,4(sp)
   21f2c:	df000104 	addi	fp,sp,4
   21f30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   21f34:	010000f4 	movhi	r4,3
   21f38:	210dc004 	addi	r4,r4,14080
   21f3c:	002c0bc0 	call	2c0bc <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21f40:	00802034 	movhi	r2,128
   21f44:	10800044 	addi	r2,r2,1
   21f48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21f4c:	e037883a 	mov	sp,fp
   21f50:	dfc00117 	ldw	ra,4(sp)
   21f54:	df000017 	ldw	fp,0(sp)
   21f58:	dec00204 	addi	sp,sp,8
   21f5c:	f800283a 	ret

00021f60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21f60:	defffe04 	addi	sp,sp,-8
   21f64:	dfc00115 	stw	ra,4(sp)
   21f68:	df000015 	stw	fp,0(sp)
   21f6c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   21f70:	01020034 	movhi	r4,2048
   21f74:	21005804 	addi	r4,r4,352
   21f78:	000b883a 	mov	r5,zero
   21f7c:	000d883a 	mov	r6,zero
   21f80:	01c0fa04 	movi	r7,1000
   21f84:	00264c00 	call	264c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_5, timer_5);
    ALTERA_AVALON_TIMER_INIT ( TIMER_6, timer_6);
    ALTERA_AVALON_TIMER_INIT ( TIMER_7, timer_7);
    ALTERA_AVALON_TIMER_INIT ( TIMER_8, timer_8);
    ALTERA_AVALON_TIMER_INIT ( TIMER_9, timer_9);
    ALTERA_AVALON_CFI_FLASH_INIT ( EXT_FLASH, ext_flash);
   21f88:	010000f4 	movhi	r4,3
   21f8c:	210de704 	addi	r4,r4,14236
   21f90:	00220a80 	call	220a8 <alt_flash_cfi_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   21f94:	010000f4 	movhi	r4,3
   21f98:	210e2704 	addi	r4,r4,14492
   21f9c:	000b883a 	mov	r5,zero
   21fa0:	01800044 	movi	r6,1
   21fa4:	0023e980 	call	23e98 <altera_avalon_jtag_uart_init>
   21fa8:	010000f4 	movhi	r4,3
   21fac:	210e1d04 	addi	r4,r4,14452
   21fb0:	0021ee80 	call	21ee8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
   21fb4:	010000f4 	movhi	r4,3
   21fb8:	21123f04 	addi	r4,r4,18684
   21fbc:	00255440 	call	25544 <altera_avalon_lcd_16207_init>
   21fc0:	010000f4 	movhi	r4,3
   21fc4:	21123504 	addi	r4,r4,18644
   21fc8:	0021ee80 	call	21ee8 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   21fcc:	010000f4 	movhi	r4,3
   21fd0:	21127d04 	addi	r4,r4,18932
   21fd4:	000b883a 	mov	r5,zero
   21fd8:	01800304 	movi	r6,12
   21fdc:	002637c0 	call	2637c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   21fe0:	010000f4 	movhi	r4,3
   21fe4:	21128904 	addi	r4,r4,18980
   21fe8:	000b883a 	mov	r5,zero
   21fec:	01800344 	movi	r6,13
   21ff0:	002637c0 	call	2637c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   21ff4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232, rs232);
   21ff8:	010000f4 	movhi	r4,3
   21ffc:	21129f04 	addi	r4,r4,19068
   22000:	000b883a 	mov	r5,zero
   22004:	018001c4 	movi	r6,7
   22008:	002b6000 	call	2b600 <altera_avalon_uart_init>
   2200c:	010000f4 	movhi	r4,3
   22010:	21129504 	addi	r4,r4,19028
   22014:	0021ee80 	call	21ee8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   22018:	010000f4 	movhi	r4,3
   2201c:	2112d004 	addi	r4,r4,19264
   22020:	000b883a 	mov	r5,zero
   22024:	018000c4 	movi	r6,3
   22028:	002b6000 	call	2b600 <altera_avalon_uart_init>
   2202c:	010000f4 	movhi	r4,3
   22030:	2112c604 	addi	r4,r4,19224
   22034:	0021ee80 	call	21ee8 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_1, uart_1);
   22038:	010000f4 	movhi	r4,3
   2203c:	21130104 	addi	r4,r4,19460
   22040:	000b883a 	mov	r5,zero
   22044:	01800104 	movi	r6,4
   22048:	002b6000 	call	2b600 <altera_avalon_uart_init>
   2204c:	010000f4 	movhi	r4,3
   22050:	2112f704 	addi	r4,r4,19420
   22054:	0021ee80 	call	21ee8 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
   22058:	0001883a 	nop
}
   2205c:	e037883a 	mov	sp,fp
   22060:	dfc00117 	ldw	ra,4(sp)
   22064:	df000017 	ldw	fp,0(sp)
   22068:	dec00204 	addi	sp,sp,8
   2206c:	f800283a 	ret

00022070 <alt_flash_device_register>:
   22070:	defffd04 	addi	sp,sp,-12
   22074:	dfc00215 	stw	ra,8(sp)
   22078:	df000115 	stw	fp,4(sp)
   2207c:	df000104 	addi	fp,sp,4
   22080:	e13fff15 	stw	r4,-4(fp)
   22084:	e13fff17 	ldw	r4,-4(fp)
   22088:	014000f4 	movhi	r5,3
   2208c:	29534504 	addi	r5,r5,19732
   22090:	002c5080 	call	2c508 <alt_dev_llist_insert>
   22094:	e037883a 	mov	sp,fp
   22098:	dfc00117 	ldw	ra,4(sp)
   2209c:	df000017 	ldw	fp,0(sp)
   220a0:	dec00204 	addi	sp,sp,8
   220a4:	f800283a 	ret

000220a8 <alt_flash_cfi_init>:
   220a8:	defffc04 	addi	sp,sp,-16
   220ac:	dfc00315 	stw	ra,12(sp)
   220b0:	df000215 	stw	fp,8(sp)
   220b4:	df000204 	addi	fp,sp,8
   220b8:	e13fff15 	stw	r4,-4(fp)
   220bc:	e03ffe15 	stw	zero,-8(fp)
   220c0:	e13fff17 	ldw	r4,-4(fp)
   220c4:	00234f00 	call	234f0 <alt_read_cfi_width>
   220c8:	e0bffe15 	stw	r2,-8(fp)
   220cc:	e0bffe17 	ldw	r2,-8(fp)
   220d0:	1000031e 	bne	r2,zero,220e0 <alt_flash_cfi_init+0x38>
   220d4:	e13fff17 	ldw	r4,-4(fp)
   220d8:	0022c480 	call	22c48 <alt_set_flash_width_func>
   220dc:	e0bffe15 	stw	r2,-8(fp)
   220e0:	e0bffe17 	ldw	r2,-8(fp)
   220e4:	1000031e 	bne	r2,zero,220f4 <alt_flash_cfi_init+0x4c>
   220e8:	e13fff17 	ldw	r4,-4(fp)
   220ec:	0022f280 	call	22f28 <alt_read_cfi_table>
   220f0:	e0bffe15 	stw	r2,-8(fp)
   220f4:	e0bffe17 	ldw	r2,-8(fp)
   220f8:	1000031e 	bne	r2,zero,22108 <alt_flash_cfi_init+0x60>
   220fc:	e13fff17 	ldw	r4,-4(fp)
   22100:	0022e0c0 	call	22e0c <alt_set_flash_algorithm_func>
   22104:	e0bffe15 	stw	r2,-8(fp)
   22108:	e0bffe17 	ldw	r2,-8(fp)
   2210c:	1000041e 	bne	r2,zero,22120 <alt_flash_cfi_init+0x78>
   22110:	e0bfff17 	ldw	r2,-4(fp)
   22114:	1009883a 	mov	r4,r2
   22118:	00220700 	call	22070 <alt_flash_device_register>
   2211c:	e0bffe15 	stw	r2,-8(fp)
   22120:	e0bffe17 	ldw	r2,-8(fp)
   22124:	e037883a 	mov	sp,fp
   22128:	dfc00117 	ldw	ra,4(sp)
   2212c:	df000017 	ldw	fp,0(sp)
   22130:	dec00204 	addi	sp,sp,8
   22134:	f800283a 	ret

00022138 <alt_flash_cfi_write>:
   22138:	defff104 	addi	sp,sp,-60
   2213c:	dfc00e15 	stw	ra,56(sp)
   22140:	df000d15 	stw	fp,52(sp)
   22144:	df000d04 	addi	fp,sp,52
   22148:	e13ffc15 	stw	r4,-16(fp)
   2214c:	e17ffd15 	stw	r5,-12(fp)
   22150:	e1bffe15 	stw	r6,-8(fp)
   22154:	e1ffff15 	stw	r7,-4(fp)
   22158:	e03ff415 	stw	zero,-48(fp)
   2215c:	e0bfff17 	ldw	r2,-4(fp)
   22160:	e0bff815 	stw	r2,-32(fp)
   22164:	e0bffd17 	ldw	r2,-12(fp)
   22168:	e0bff915 	stw	r2,-28(fp)
   2216c:	e0bffc17 	ldw	r2,-16(fp)
   22170:	e0bffa15 	stw	r2,-24(fp)
   22174:	e03ff515 	stw	zero,-44(fp)
   22178:	00008806 	br	2239c <alt_flash_cfi_write+0x264>
   2217c:	e0fffa17 	ldw	r3,-24(fp)
   22180:	e0bff517 	ldw	r2,-44(fp)
   22184:	1004913a 	slli	r2,r2,4
   22188:	1885883a 	add	r2,r3,r2
   2218c:	10800d04 	addi	r2,r2,52
   22190:	10800017 	ldw	r2,0(r2)
   22194:	e0fffd17 	ldw	r3,-12(fp)
   22198:	18807d16 	blt	r3,r2,22390 <alt_flash_cfi_write+0x258>
   2219c:	e0fffa17 	ldw	r3,-24(fp)
   221a0:	e0bff517 	ldw	r2,-44(fp)
   221a4:	1004913a 	slli	r2,r2,4
   221a8:	1885883a 	add	r2,r3,r2
   221ac:	10800d04 	addi	r2,r2,52
   221b0:	10c00017 	ldw	r3,0(r2)
   221b4:	e13ffa17 	ldw	r4,-24(fp)
   221b8:	e0bff517 	ldw	r2,-44(fp)
   221bc:	1004913a 	slli	r2,r2,4
   221c0:	2085883a 	add	r2,r4,r2
   221c4:	10800e04 	addi	r2,r2,56
   221c8:	10800017 	ldw	r2,0(r2)
   221cc:	1885883a 	add	r2,r3,r2
   221d0:	e0fffd17 	ldw	r3,-12(fp)
   221d4:	18806e0e 	bge	r3,r2,22390 <alt_flash_cfi_write+0x258>
   221d8:	e0fffa17 	ldw	r3,-24(fp)
   221dc:	e0bff517 	ldw	r2,-44(fp)
   221e0:	1004913a 	slli	r2,r2,4
   221e4:	1885883a 	add	r2,r3,r2
   221e8:	10800d04 	addi	r2,r2,52
   221ec:	10800017 	ldw	r2,0(r2)
   221f0:	e0bff715 	stw	r2,-36(fp)
   221f4:	e03ff615 	stw	zero,-40(fp)
   221f8:	00005d06 	br	22370 <alt_flash_cfi_write+0x238>
   221fc:	e0fffd17 	ldw	r3,-12(fp)
   22200:	e0bff717 	ldw	r2,-36(fp)
   22204:	18804e16 	blt	r3,r2,22340 <alt_flash_cfi_write+0x208>
   22208:	e0fffa17 	ldw	r3,-24(fp)
   2220c:	e0bff517 	ldw	r2,-44(fp)
   22210:	10800104 	addi	r2,r2,4
   22214:	1004913a 	slli	r2,r2,4
   22218:	1885883a 	add	r2,r3,r2
   2221c:	10c00017 	ldw	r3,0(r2)
   22220:	e0bff717 	ldw	r2,-36(fp)
   22224:	1885883a 	add	r2,r3,r2
   22228:	e0fffd17 	ldw	r3,-12(fp)
   2222c:	1880440e 	bge	r3,r2,22340 <alt_flash_cfi_write+0x208>
   22230:	e0fffa17 	ldw	r3,-24(fp)
   22234:	e0bff517 	ldw	r2,-44(fp)
   22238:	10800104 	addi	r2,r2,4
   2223c:	1004913a 	slli	r2,r2,4
   22240:	1885883a 	add	r2,r3,r2
   22244:	10c00017 	ldw	r3,0(r2)
   22248:	e0bff717 	ldw	r2,-36(fp)
   2224c:	1887883a 	add	r3,r3,r2
   22250:	e0bffd17 	ldw	r2,-12(fp)
   22254:	1885c83a 	sub	r2,r3,r2
   22258:	e0bffb15 	stw	r2,-20(fp)
   2225c:	e0fffb17 	ldw	r3,-20(fp)
   22260:	e0bfff17 	ldw	r2,-4(fp)
   22264:	1880010e 	bge	r3,r2,2226c <alt_flash_cfi_write+0x134>
   22268:	1805883a 	mov	r2,r3
   2226c:	e0bffb15 	stw	r2,-20(fp)
   22270:	e0bffa17 	ldw	r2,-24(fp)
   22274:	10c00a17 	ldw	r3,40(r2)
   22278:	e0bffd17 	ldw	r2,-12(fp)
   2227c:	1887883a 	add	r3,r3,r2
   22280:	e0bffb17 	ldw	r2,-20(fp)
   22284:	e13ffe17 	ldw	r4,-8(fp)
   22288:	180b883a 	mov	r5,r3
   2228c:	100d883a 	mov	r6,r2
   22290:	00179c80 	call	179c8 <memcmp>
   22294:	10001426 	beq	r2,zero,222e8 <alt_flash_cfi_write+0x1b0>
   22298:	e0bffa17 	ldw	r2,-24(fp)
   2229c:	10c00817 	ldw	r3,32(r2)
   222a0:	e0bffa17 	ldw	r2,-24(fp)
   222a4:	1009883a 	mov	r4,r2
   222a8:	e17ff717 	ldw	r5,-36(fp)
   222ac:	183ee83a 	callr	r3
   222b0:	e0bff415 	stw	r2,-48(fp)
   222b4:	e0bff417 	ldw	r2,-48(fp)
   222b8:	10000b1e 	bne	r2,zero,222e8 <alt_flash_cfi_write+0x1b0>
   222bc:	e0bffa17 	ldw	r2,-24(fp)
   222c0:	10c00917 	ldw	r3,36(r2)
   222c4:	e0bffa17 	ldw	r2,-24(fp)
   222c8:	e13ffb17 	ldw	r4,-20(fp)
   222cc:	d9000015 	stw	r4,0(sp)
   222d0:	1009883a 	mov	r4,r2
   222d4:	e17ff717 	ldw	r5,-36(fp)
   222d8:	e1bffd17 	ldw	r6,-12(fp)
   222dc:	e1fffe17 	ldw	r7,-8(fp)
   222e0:	183ee83a 	callr	r3
   222e4:	e0bff415 	stw	r2,-48(fp)
   222e8:	e0ffff17 	ldw	r3,-4(fp)
   222ec:	e0bffb17 	ldw	r2,-20(fp)
   222f0:	18802e26 	beq	r3,r2,223ac <alt_flash_cfi_write+0x274>
   222f4:	e0bff417 	ldw	r2,-48(fp)
   222f8:	10002c1e 	bne	r2,zero,223ac <alt_flash_cfi_write+0x274>
   222fc:	e0ffff17 	ldw	r3,-4(fp)
   22300:	e0bffb17 	ldw	r2,-20(fp)
   22304:	1885c83a 	sub	r2,r3,r2
   22308:	e0bfff15 	stw	r2,-4(fp)
   2230c:	e0fffa17 	ldw	r3,-24(fp)
   22310:	e0bff517 	ldw	r2,-44(fp)
   22314:	10800104 	addi	r2,r2,4
   22318:	1004913a 	slli	r2,r2,4
   2231c:	1885883a 	add	r2,r3,r2
   22320:	10c00017 	ldw	r3,0(r2)
   22324:	e0bff717 	ldw	r2,-36(fp)
   22328:	1885883a 	add	r2,r3,r2
   2232c:	e0bffd15 	stw	r2,-12(fp)
   22330:	e0bffb17 	ldw	r2,-20(fp)
   22334:	e0fffe17 	ldw	r3,-8(fp)
   22338:	1885883a 	add	r2,r3,r2
   2233c:	e0bffe15 	stw	r2,-8(fp)
   22340:	e0fffa17 	ldw	r3,-24(fp)
   22344:	e0bff517 	ldw	r2,-44(fp)
   22348:	10800104 	addi	r2,r2,4
   2234c:	1004913a 	slli	r2,r2,4
   22350:	1885883a 	add	r2,r3,r2
   22354:	10800017 	ldw	r2,0(r2)
   22358:	e0fff717 	ldw	r3,-36(fp)
   2235c:	1885883a 	add	r2,r3,r2
   22360:	e0bff715 	stw	r2,-36(fp)
   22364:	e0bff617 	ldw	r2,-40(fp)
   22368:	10800044 	addi	r2,r2,1
   2236c:	e0bff615 	stw	r2,-40(fp)
   22370:	e0fffa17 	ldw	r3,-24(fp)
   22374:	e0bff517 	ldw	r2,-44(fp)
   22378:	1004913a 	slli	r2,r2,4
   2237c:	1885883a 	add	r2,r3,r2
   22380:	10800f04 	addi	r2,r2,60
   22384:	10800017 	ldw	r2,0(r2)
   22388:	e0fff617 	ldw	r3,-40(fp)
   2238c:	18bf9b16 	blt	r3,r2,221fc <alt_flash_cfi_write+0xc4>
   22390:	e0bff517 	ldw	r2,-44(fp)
   22394:	10800044 	addi	r2,r2,1
   22398:	e0bff515 	stw	r2,-44(fp)
   2239c:	e0bffa17 	ldw	r2,-24(fp)
   223a0:	10800c17 	ldw	r2,48(r2)
   223a4:	e0fff517 	ldw	r3,-44(fp)
   223a8:	18bf7416 	blt	r3,r2,2217c <alt_flash_cfi_write+0x44>
   223ac:	e0bffa17 	ldw	r2,-24(fp)
   223b0:	10c00a17 	ldw	r3,40(r2)
   223b4:	e0bff917 	ldw	r2,-28(fp)
   223b8:	1887883a 	add	r3,r3,r2
   223bc:	e0bff817 	ldw	r2,-32(fp)
   223c0:	1809883a 	mov	r4,r3
   223c4:	100b883a 	mov	r5,r2
   223c8:	002c4780 	call	2c478 <alt_dcache_flush>
   223cc:	e0bff417 	ldw	r2,-48(fp)
   223d0:	e037883a 	mov	sp,fp
   223d4:	dfc00117 	ldw	ra,4(sp)
   223d8:	df000017 	ldw	fp,0(sp)
   223dc:	dec00204 	addi	sp,sp,8
   223e0:	f800283a 	ret

000223e4 <alt_flash_cfi_get_info>:
   223e4:	defffa04 	addi	sp,sp,-24
   223e8:	df000515 	stw	fp,20(sp)
   223ec:	df000504 	addi	fp,sp,20
   223f0:	e13ffd15 	stw	r4,-12(fp)
   223f4:	e17ffe15 	stw	r5,-8(fp)
   223f8:	e1bfff15 	stw	r6,-4(fp)
   223fc:	e03ffb15 	stw	zero,-20(fp)
   22400:	e0bffd17 	ldw	r2,-12(fp)
   22404:	e0bffc15 	stw	r2,-16(fp)
   22408:	e0bffc17 	ldw	r2,-16(fp)
   2240c:	10c00c17 	ldw	r3,48(r2)
   22410:	e0bfff17 	ldw	r2,-4(fp)
   22414:	10c00015 	stw	r3,0(r2)
   22418:	e0bffc17 	ldw	r2,-16(fp)
   2241c:	10800c17 	ldw	r2,48(r2)
   22420:	1000031e 	bne	r2,zero,22430 <alt_flash_cfi_get_info+0x4c>
   22424:	00bffec4 	movi	r2,-5
   22428:	e0bffb15 	stw	r2,-20(fp)
   2242c:	00000b06 	br	2245c <alt_flash_cfi_get_info+0x78>
   22430:	e0bffc17 	ldw	r2,-16(fp)
   22434:	10800c17 	ldw	r2,48(r2)
   22438:	10800250 	cmplti	r2,r2,9
   2243c:	1000031e 	bne	r2,zero,2244c <alt_flash_cfi_get_info+0x68>
   22440:	00bffd04 	movi	r2,-12
   22444:	e0bffb15 	stw	r2,-20(fp)
   22448:	00000406 	br	2245c <alt_flash_cfi_get_info+0x78>
   2244c:	e0bffc17 	ldw	r2,-16(fp)
   22450:	10c00d04 	addi	r3,r2,52
   22454:	e0bffe17 	ldw	r2,-8(fp)
   22458:	10c00015 	stw	r3,0(r2)
   2245c:	e0bffb17 	ldw	r2,-20(fp)
   22460:	e037883a 	mov	sp,fp
   22464:	df000017 	ldw	fp,0(sp)
   22468:	dec00104 	addi	sp,sp,4
   2246c:	f800283a 	ret

00022470 <alt_flash_cfi_read>:
   22470:	defff904 	addi	sp,sp,-28
   22474:	dfc00615 	stw	ra,24(sp)
   22478:	df000515 	stw	fp,20(sp)
   2247c:	df000504 	addi	fp,sp,20
   22480:	e13ffc15 	stw	r4,-16(fp)
   22484:	e17ffd15 	stw	r5,-12(fp)
   22488:	e1bffe15 	stw	r6,-8(fp)
   2248c:	e1ffff15 	stw	r7,-4(fp)
   22490:	e0bffc17 	ldw	r2,-16(fp)
   22494:	e0bffb15 	stw	r2,-20(fp)
   22498:	e0bffb17 	ldw	r2,-20(fp)
   2249c:	10c00a17 	ldw	r3,40(r2)
   224a0:	e0bffd17 	ldw	r2,-12(fp)
   224a4:	1887883a 	add	r3,r3,r2
   224a8:	e0bfff17 	ldw	r2,-4(fp)
   224ac:	e13ffe17 	ldw	r4,-8(fp)
   224b0:	180b883a 	mov	r5,r3
   224b4:	100d883a 	mov	r6,r2
   224b8:	0017a440 	call	17a44 <memcpy>
   224bc:	0005883a 	mov	r2,zero
   224c0:	e037883a 	mov	sp,fp
   224c4:	dfc00117 	ldw	ra,4(sp)
   224c8:	df000017 	ldw	fp,0(sp)
   224cc:	dec00204 	addi	sp,sp,8
   224d0:	f800283a 	ret

000224d4 <alt_write_value_to_flash>:
   224d4:	defffa04 	addi	sp,sp,-24
   224d8:	df000515 	stw	fp,20(sp)
   224dc:	df000504 	addi	fp,sp,20
   224e0:	e13ffd15 	stw	r4,-12(fp)
   224e4:	e17ffe15 	stw	r5,-8(fp)
   224e8:	e1bfff15 	stw	r6,-4(fp)
   224ec:	e0bffd17 	ldw	r2,-12(fp)
   224f0:	10802e17 	ldw	r2,184(r2)
   224f4:	10800058 	cmpnei	r2,r2,1
   224f8:	1000091e 	bne	r2,zero,22520 <alt_write_value_to_flash+0x4c>
   224fc:	e0bffd17 	ldw	r2,-12(fp)
   22500:	10c00a17 	ldw	r3,40(r2)
   22504:	e0bffe17 	ldw	r2,-8(fp)
   22508:	1885883a 	add	r2,r3,r2
   2250c:	e0ffff17 	ldw	r3,-4(fp)
   22510:	18c00003 	ldbu	r3,0(r3)
   22514:	18c03fcc 	andi	r3,r3,255
   22518:	10c00025 	stbio	r3,0(r2)
   2251c:	00003e06 	br	22618 <alt_write_value_to_flash+0x144>
   22520:	e0bffd17 	ldw	r2,-12(fp)
   22524:	10802e17 	ldw	r2,184(r2)
   22528:	10800098 	cmpnei	r2,r2,2
   2252c:	1000141e 	bne	r2,zero,22580 <alt_write_value_to_flash+0xac>
   22530:	e0bfff17 	ldw	r2,-4(fp)
   22534:	10800003 	ldbu	r2,0(r2)
   22538:	10803fcc 	andi	r2,r2,255
   2253c:	e0bffb0d 	sth	r2,-20(fp)
   22540:	e0bfff17 	ldw	r2,-4(fp)
   22544:	10800044 	addi	r2,r2,1
   22548:	10800003 	ldbu	r2,0(r2)
   2254c:	10803fcc 	andi	r2,r2,255
   22550:	1004923a 	slli	r2,r2,8
   22554:	1007883a 	mov	r3,r2
   22558:	e0bffb0b 	ldhu	r2,-20(fp)
   2255c:	1884b03a 	or	r2,r3,r2
   22560:	e0bffb0d 	sth	r2,-20(fp)
   22564:	e0bffd17 	ldw	r2,-12(fp)
   22568:	10c00a17 	ldw	r3,40(r2)
   2256c:	e0bffe17 	ldw	r2,-8(fp)
   22570:	1885883a 	add	r2,r3,r2
   22574:	e0fffb0b 	ldhu	r3,-20(fp)
   22578:	10c0002d 	sthio	r3,0(r2)
   2257c:	00002606 	br	22618 <alt_write_value_to_flash+0x144>
   22580:	e0bffd17 	ldw	r2,-12(fp)
   22584:	10802e17 	ldw	r2,184(r2)
   22588:	10800118 	cmpnei	r2,r2,4
   2258c:	1000221e 	bne	r2,zero,22618 <alt_write_value_to_flash+0x144>
   22590:	e0bfff17 	ldw	r2,-4(fp)
   22594:	10800003 	ldbu	r2,0(r2)
   22598:	10803fcc 	andi	r2,r2,255
   2259c:	e0bffc15 	stw	r2,-16(fp)
   225a0:	e0bfff17 	ldw	r2,-4(fp)
   225a4:	10800044 	addi	r2,r2,1
   225a8:	10800003 	ldbu	r2,0(r2)
   225ac:	10803fcc 	andi	r2,r2,255
   225b0:	1004923a 	slli	r2,r2,8
   225b4:	e0fffc17 	ldw	r3,-16(fp)
   225b8:	1884b03a 	or	r2,r3,r2
   225bc:	e0bffc15 	stw	r2,-16(fp)
   225c0:	e0bfff17 	ldw	r2,-4(fp)
   225c4:	10800084 	addi	r2,r2,2
   225c8:	10800003 	ldbu	r2,0(r2)
   225cc:	10803fcc 	andi	r2,r2,255
   225d0:	1004943a 	slli	r2,r2,16
   225d4:	e0fffc17 	ldw	r3,-16(fp)
   225d8:	1884b03a 	or	r2,r3,r2
   225dc:	e0bffc15 	stw	r2,-16(fp)
   225e0:	e0bfff17 	ldw	r2,-4(fp)
   225e4:	108000c4 	addi	r2,r2,3
   225e8:	10800003 	ldbu	r2,0(r2)
   225ec:	10803fcc 	andi	r2,r2,255
   225f0:	1004963a 	slli	r2,r2,24
   225f4:	e0fffc17 	ldw	r3,-16(fp)
   225f8:	1884b03a 	or	r2,r3,r2
   225fc:	e0bffc15 	stw	r2,-16(fp)
   22600:	e0bffd17 	ldw	r2,-12(fp)
   22604:	10c00a17 	ldw	r3,40(r2)
   22608:	e0bffe17 	ldw	r2,-8(fp)
   2260c:	1885883a 	add	r2,r3,r2
   22610:	e0fffc17 	ldw	r3,-16(fp)
   22614:	10c00035 	stwio	r3,0(r2)
   22618:	0001883a 	nop
   2261c:	e037883a 	mov	sp,fp
   22620:	df000017 	ldw	fp,0(sp)
   22624:	dec00104 	addi	sp,sp,4
   22628:	f800283a 	ret

0002262c <alt_flash_program_block>:
   2262c:	defff304 	addi	sp,sp,-52
   22630:	dfc00c15 	stw	ra,48(sp)
   22634:	df000b15 	stw	fp,44(sp)
   22638:	df000b04 	addi	fp,sp,44
   2263c:	e13ffc15 	stw	r4,-16(fp)
   22640:	e17ffd15 	stw	r5,-12(fp)
   22644:	e1bffe15 	stw	r6,-8(fp)
   22648:	e1ffff15 	stw	r7,-4(fp)
   2264c:	e03ff515 	stw	zero,-44(fp)
   22650:	e0bffc17 	ldw	r2,-16(fp)
   22654:	10c00a17 	ldw	r3,40(r2)
   22658:	e0bffd17 	ldw	r2,-12(fp)
   2265c:	1885883a 	add	r2,r3,r2
   22660:	e0fffc17 	ldw	r3,-16(fp)
   22664:	18c02e17 	ldw	r3,184(r3)
   22668:	10c9283a 	div	r4,r2,r3
   2266c:	20c7383a 	mul	r3,r4,r3
   22670:	10c5c83a 	sub	r2,r2,r3
   22674:	e0bff815 	stw	r2,-32(fp)
   22678:	e0bff817 	ldw	r2,-32(fp)
   2267c:	10003b26 	beq	r2,zero,2276c <alt_flash_program_block+0x140>
   22680:	e0bffc17 	ldw	r2,-16(fp)
   22684:	10c02e17 	ldw	r3,184(r2)
   22688:	e0bff817 	ldw	r2,-32(fp)
   2268c:	1885c83a 	sub	r2,r3,r2
   22690:	e0bff915 	stw	r2,-28(fp)
   22694:	e03ff615 	stw	zero,-40(fp)
   22698:	00001206 	br	226e4 <alt_flash_program_block+0xb8>
   2269c:	e0bffc17 	ldw	r2,-16(fp)
   226a0:	10c00a17 	ldw	r3,40(r2)
   226a4:	e13ffd17 	ldw	r4,-12(fp)
   226a8:	e0bff817 	ldw	r2,-32(fp)
   226ac:	2089c83a 	sub	r4,r4,r2
   226b0:	e0bff617 	ldw	r2,-40(fp)
   226b4:	2085883a 	add	r2,r4,r2
   226b8:	1885883a 	add	r2,r3,r2
   226bc:	10800023 	ldbuio	r2,0(r2)
   226c0:	10803fcc 	andi	r2,r2,255
   226c4:	1007883a 	mov	r3,r2
   226c8:	e13ffb04 	addi	r4,fp,-20
   226cc:	e0bff617 	ldw	r2,-40(fp)
   226d0:	2085883a 	add	r2,r4,r2
   226d4:	10c00005 	stb	r3,0(r2)
   226d8:	e0bff617 	ldw	r2,-40(fp)
   226dc:	10800044 	addi	r2,r2,1
   226e0:	e0bff615 	stw	r2,-40(fp)
   226e4:	e0fff617 	ldw	r3,-40(fp)
   226e8:	e0bff817 	ldw	r2,-32(fp)
   226ec:	18bfeb16 	blt	r3,r2,2269c <alt_flash_program_block+0x70>
   226f0:	e03ff615 	stw	zero,-40(fp)
   226f4:	00000d06 	br	2272c <alt_flash_program_block+0x100>
   226f8:	e0fff817 	ldw	r3,-32(fp)
   226fc:	e0bff617 	ldw	r2,-40(fp)
   22700:	1885883a 	add	r2,r3,r2
   22704:	e0fff617 	ldw	r3,-40(fp)
   22708:	e13ffe17 	ldw	r4,-8(fp)
   2270c:	20c7883a 	add	r3,r4,r3
   22710:	18c00003 	ldbu	r3,0(r3)
   22714:	e13ffb04 	addi	r4,fp,-20
   22718:	2085883a 	add	r2,r4,r2
   2271c:	10c00005 	stb	r3,0(r2)
   22720:	e0bff617 	ldw	r2,-40(fp)
   22724:	10800044 	addi	r2,r2,1
   22728:	e0bff615 	stw	r2,-40(fp)
   2272c:	e0fff617 	ldw	r3,-40(fp)
   22730:	e0bff917 	ldw	r2,-28(fp)
   22734:	18bff016 	blt	r3,r2,226f8 <alt_flash_program_block+0xcc>
   22738:	e0fffd17 	ldw	r3,-12(fp)
   2273c:	e0bff817 	ldw	r2,-32(fp)
   22740:	1887c83a 	sub	r3,r3,r2
   22744:	e0bffb04 	addi	r2,fp,-20
   22748:	e1c00217 	ldw	r7,8(fp)
   2274c:	e13ffc17 	ldw	r4,-16(fp)
   22750:	180b883a 	mov	r5,r3
   22754:	100d883a 	mov	r6,r2
   22758:	383ee83a 	callr	r7
   2275c:	e0bff515 	stw	r2,-44(fp)
   22760:	e0bff917 	ldw	r2,-28(fp)
   22764:	e0bff615 	stw	r2,-40(fp)
   22768:	00000106 	br	22770 <alt_flash_program_block+0x144>
   2276c:	e03ff615 	stw	zero,-40(fp)
   22770:	e0fffd17 	ldw	r3,-12(fp)
   22774:	e0bfff17 	ldw	r2,-4(fp)
   22778:	1885883a 	add	r2,r3,r2
   2277c:	e0fffc17 	ldw	r3,-16(fp)
   22780:	18c02e17 	ldw	r3,184(r3)
   22784:	10c9283a 	div	r4,r2,r3
   22788:	20c7383a 	mul	r3,r4,r3
   2278c:	10c5c83a 	sub	r2,r2,r3
   22790:	e0bffa15 	stw	r2,-24(fp)
   22794:	00001106 	br	227dc <alt_flash_program_block+0x1b0>
   22798:	e0fffd17 	ldw	r3,-12(fp)
   2279c:	e0bff617 	ldw	r2,-40(fp)
   227a0:	1887883a 	add	r3,r3,r2
   227a4:	e0bff617 	ldw	r2,-40(fp)
   227a8:	e13ffe17 	ldw	r4,-8(fp)
   227ac:	2085883a 	add	r2,r4,r2
   227b0:	e1c00217 	ldw	r7,8(fp)
   227b4:	e13ffc17 	ldw	r4,-16(fp)
   227b8:	180b883a 	mov	r5,r3
   227bc:	100d883a 	mov	r6,r2
   227c0:	383ee83a 	callr	r7
   227c4:	e0bff515 	stw	r2,-44(fp)
   227c8:	e0bffc17 	ldw	r2,-16(fp)
   227cc:	10802e17 	ldw	r2,184(r2)
   227d0:	e0fff617 	ldw	r3,-40(fp)
   227d4:	1885883a 	add	r2,r3,r2
   227d8:	e0bff615 	stw	r2,-40(fp)
   227dc:	e0bff517 	ldw	r2,-44(fp)
   227e0:	1000051e 	bne	r2,zero,227f8 <alt_flash_program_block+0x1cc>
   227e4:	e0ffff17 	ldw	r3,-4(fp)
   227e8:	e0bffa17 	ldw	r2,-24(fp)
   227ec:	1885c83a 	sub	r2,r3,r2
   227f0:	e0fff617 	ldw	r3,-40(fp)
   227f4:	18bfe816 	blt	r3,r2,22798 <alt_flash_program_block+0x16c>
   227f8:	e0bffa17 	ldw	r2,-24(fp)
   227fc:	10003b26 	beq	r2,zero,228ec <alt_flash_program_block+0x2c0>
   22800:	e0bff517 	ldw	r2,-44(fp)
   22804:	1000391e 	bne	r2,zero,228ec <alt_flash_program_block+0x2c0>
   22808:	e0bffc17 	ldw	r2,-16(fp)
   2280c:	10c02e17 	ldw	r3,184(r2)
   22810:	e0bffa17 	ldw	r2,-24(fp)
   22814:	1885c83a 	sub	r2,r3,r2
   22818:	e0bff815 	stw	r2,-32(fp)
   2281c:	e03ff715 	stw	zero,-36(fp)
   22820:	00000d06 	br	22858 <alt_flash_program_block+0x22c>
   22824:	e0fff617 	ldw	r3,-40(fp)
   22828:	e0bff717 	ldw	r2,-36(fp)
   2282c:	1885883a 	add	r2,r3,r2
   22830:	e0fffe17 	ldw	r3,-8(fp)
   22834:	1885883a 	add	r2,r3,r2
   22838:	10c00003 	ldbu	r3,0(r2)
   2283c:	e13ffb04 	addi	r4,fp,-20
   22840:	e0bff717 	ldw	r2,-36(fp)
   22844:	2085883a 	add	r2,r4,r2
   22848:	10c00005 	stb	r3,0(r2)
   2284c:	e0bff717 	ldw	r2,-36(fp)
   22850:	10800044 	addi	r2,r2,1
   22854:	e0bff715 	stw	r2,-36(fp)
   22858:	e0fff717 	ldw	r3,-36(fp)
   2285c:	e0bffa17 	ldw	r2,-24(fp)
   22860:	18bff016 	blt	r3,r2,22824 <alt_flash_program_block+0x1f8>
   22864:	e03ff715 	stw	zero,-36(fp)
   22868:	00001306 	br	228b8 <alt_flash_program_block+0x28c>
   2286c:	e0fffa17 	ldw	r3,-24(fp)
   22870:	e0bff717 	ldw	r2,-36(fp)
   22874:	1885883a 	add	r2,r3,r2
   22878:	e0fffc17 	ldw	r3,-16(fp)
   2287c:	19000a17 	ldw	r4,40(r3)
   22880:	e17ffd17 	ldw	r5,-12(fp)
   22884:	e0ffff17 	ldw	r3,-4(fp)
   22888:	28cb883a 	add	r5,r5,r3
   2288c:	e0fff717 	ldw	r3,-36(fp)
   22890:	28c7883a 	add	r3,r5,r3
   22894:	20c7883a 	add	r3,r4,r3
   22898:	18c00023 	ldbuio	r3,0(r3)
   2289c:	18c03fcc 	andi	r3,r3,255
   228a0:	e13ffb04 	addi	r4,fp,-20
   228a4:	2085883a 	add	r2,r4,r2
   228a8:	10c00005 	stb	r3,0(r2)
   228ac:	e0bff717 	ldw	r2,-36(fp)
   228b0:	10800044 	addi	r2,r2,1
   228b4:	e0bff715 	stw	r2,-36(fp)
   228b8:	e0fff717 	ldw	r3,-36(fp)
   228bc:	e0bff817 	ldw	r2,-32(fp)
   228c0:	18bfea16 	blt	r3,r2,2286c <alt_flash_program_block+0x240>
   228c4:	e0fffd17 	ldw	r3,-12(fp)
   228c8:	e0bff617 	ldw	r2,-40(fp)
   228cc:	1887883a 	add	r3,r3,r2
   228d0:	e0bffb04 	addi	r2,fp,-20
   228d4:	e1c00217 	ldw	r7,8(fp)
   228d8:	e13ffc17 	ldw	r4,-16(fp)
   228dc:	180b883a 	mov	r5,r3
   228e0:	100d883a 	mov	r6,r2
   228e4:	383ee83a 	callr	r7
   228e8:	e0bff515 	stw	r2,-44(fp)
   228ec:	e0bff517 	ldw	r2,-44(fp)
   228f0:	e037883a 	mov	sp,fp
   228f4:	dfc00117 	ldw	ra,4(sp)
   228f8:	df000017 	ldw	fp,0(sp)
   228fc:	dec00204 	addi	sp,sp,8
   22900:	f800283a 	ret

00022904 <alt_read_query_entry_8bit>:
   22904:	defffd04 	addi	sp,sp,-12
   22908:	df000215 	stw	fp,8(sp)
   2290c:	df000204 	addi	fp,sp,8
   22910:	e13ffe15 	stw	r4,-8(fp)
   22914:	e17fff15 	stw	r5,-4(fp)
   22918:	e0bffe17 	ldw	r2,-8(fp)
   2291c:	10c00a17 	ldw	r3,40(r2)
   22920:	e0bfff17 	ldw	r2,-4(fp)
   22924:	1885883a 	add	r2,r3,r2
   22928:	10800023 	ldbuio	r2,0(r2)
   2292c:	10803fcc 	andi	r2,r2,255
   22930:	e037883a 	mov	sp,fp
   22934:	df000017 	ldw	fp,0(sp)
   22938:	dec00104 	addi	sp,sp,4
   2293c:	f800283a 	ret

00022940 <alt_read_query_entry_16bit>:
   22940:	defffd04 	addi	sp,sp,-12
   22944:	df000215 	stw	fp,8(sp)
   22948:	df000204 	addi	fp,sp,8
   2294c:	e13ffe15 	stw	r4,-8(fp)
   22950:	e17fff15 	stw	r5,-4(fp)
   22954:	e0bffe17 	ldw	r2,-8(fp)
   22958:	10c00a17 	ldw	r3,40(r2)
   2295c:	e0bfff17 	ldw	r2,-4(fp)
   22960:	1085883a 	add	r2,r2,r2
   22964:	1885883a 	add	r2,r3,r2
   22968:	1080002b 	ldhuio	r2,0(r2)
   2296c:	10bfffcc 	andi	r2,r2,65535
   22970:	e037883a 	mov	sp,fp
   22974:	df000017 	ldw	fp,0(sp)
   22978:	dec00104 	addi	sp,sp,4
   2297c:	f800283a 	ret

00022980 <alt_read_query_entry_32bit>:
   22980:	defffd04 	addi	sp,sp,-12
   22984:	df000215 	stw	fp,8(sp)
   22988:	df000204 	addi	fp,sp,8
   2298c:	e13ffe15 	stw	r4,-8(fp)
   22990:	e17fff15 	stw	r5,-4(fp)
   22994:	e0bffe17 	ldw	r2,-8(fp)
   22998:	10c00a17 	ldw	r3,40(r2)
   2299c:	e0bfff17 	ldw	r2,-4(fp)
   229a0:	1085883a 	add	r2,r2,r2
   229a4:	1085883a 	add	r2,r2,r2
   229a8:	1885883a 	add	r2,r3,r2
   229ac:	10800037 	ldwio	r2,0(r2)
   229b0:	e037883a 	mov	sp,fp
   229b4:	df000017 	ldw	fp,0(sp)
   229b8:	dec00104 	addi	sp,sp,4
   229bc:	f800283a 	ret

000229c0 <alt_write_flash_command_8bit_device_8bit_mode>:
   229c0:	defffc04 	addi	sp,sp,-16
   229c4:	df000315 	stw	fp,12(sp)
   229c8:	df000304 	addi	fp,sp,12
   229cc:	e13ffd15 	stw	r4,-12(fp)
   229d0:	e17ffe15 	stw	r5,-8(fp)
   229d4:	3005883a 	mov	r2,r6
   229d8:	e0bfff05 	stb	r2,-4(fp)
   229dc:	e0bffe17 	ldw	r2,-8(fp)
   229e0:	e0fffd17 	ldw	r3,-12(fp)
   229e4:	1885883a 	add	r2,r3,r2
   229e8:	e0ffff03 	ldbu	r3,-4(fp)
   229ec:	10c00025 	stbio	r3,0(r2)
   229f0:	0001883a 	nop
   229f4:	e037883a 	mov	sp,fp
   229f8:	df000017 	ldw	fp,0(sp)
   229fc:	dec00104 	addi	sp,sp,4
   22a00:	f800283a 	ret

00022a04 <alt_write_flash_command_16bit_device_8bit_mode>:
   22a04:	defffc04 	addi	sp,sp,-16
   22a08:	df000315 	stw	fp,12(sp)
   22a0c:	df000304 	addi	fp,sp,12
   22a10:	e13ffd15 	stw	r4,-12(fp)
   22a14:	e17ffe15 	stw	r5,-8(fp)
   22a18:	3005883a 	mov	r2,r6
   22a1c:	e0bfff05 	stb	r2,-4(fp)
   22a20:	e0bffe17 	ldw	r2,-8(fp)
   22a24:	1080004c 	andi	r2,r2,1
   22a28:	10000726 	beq	r2,zero,22a48 <alt_write_flash_command_16bit_device_8bit_mode+0x44>
   22a2c:	e0bffe17 	ldw	r2,-8(fp)
   22a30:	1085883a 	add	r2,r2,r2
   22a34:	e0fffd17 	ldw	r3,-12(fp)
   22a38:	1885883a 	add	r2,r3,r2
   22a3c:	e0ffff03 	ldbu	r3,-4(fp)
   22a40:	10c00025 	stbio	r3,0(r2)
   22a44:	00000706 	br	22a64 <alt_write_flash_command_16bit_device_8bit_mode+0x60>
   22a48:	e0bffe17 	ldw	r2,-8(fp)
   22a4c:	1085883a 	add	r2,r2,r2
   22a50:	10800044 	addi	r2,r2,1
   22a54:	e0fffd17 	ldw	r3,-12(fp)
   22a58:	1885883a 	add	r2,r3,r2
   22a5c:	e0ffff03 	ldbu	r3,-4(fp)
   22a60:	10c00025 	stbio	r3,0(r2)
   22a64:	0001883a 	nop
   22a68:	e037883a 	mov	sp,fp
   22a6c:	df000017 	ldw	fp,0(sp)
   22a70:	dec00104 	addi	sp,sp,4
   22a74:	f800283a 	ret

00022a78 <alt_write_flash_command_32bit_device_8bit_mode>:
   22a78:	defffc04 	addi	sp,sp,-16
   22a7c:	df000315 	stw	fp,12(sp)
   22a80:	df000304 	addi	fp,sp,12
   22a84:	e13ffd15 	stw	r4,-12(fp)
   22a88:	e17ffe15 	stw	r5,-8(fp)
   22a8c:	3005883a 	mov	r2,r6
   22a90:	e0bfff05 	stb	r2,-4(fp)
   22a94:	e0bffe17 	ldw	r2,-8(fp)
   22a98:	1085883a 	add	r2,r2,r2
   22a9c:	1085883a 	add	r2,r2,r2
   22aa0:	e0fffd17 	ldw	r3,-12(fp)
   22aa4:	1885883a 	add	r2,r3,r2
   22aa8:	e0ffff03 	ldbu	r3,-4(fp)
   22aac:	10c00025 	stbio	r3,0(r2)
   22ab0:	0001883a 	nop
   22ab4:	e037883a 	mov	sp,fp
   22ab8:	df000017 	ldw	fp,0(sp)
   22abc:	dec00104 	addi	sp,sp,4
   22ac0:	f800283a 	ret

00022ac4 <alt_write_flash_command_16bit_device_16bit_mode>:
   22ac4:	defffc04 	addi	sp,sp,-16
   22ac8:	df000315 	stw	fp,12(sp)
   22acc:	df000304 	addi	fp,sp,12
   22ad0:	e13ffd15 	stw	r4,-12(fp)
   22ad4:	e17ffe15 	stw	r5,-8(fp)
   22ad8:	3005883a 	mov	r2,r6
   22adc:	e0bfff05 	stb	r2,-4(fp)
   22ae0:	e0bffe17 	ldw	r2,-8(fp)
   22ae4:	1085883a 	add	r2,r2,r2
   22ae8:	e0fffd17 	ldw	r3,-12(fp)
   22aec:	1885883a 	add	r2,r3,r2
   22af0:	e0ffff03 	ldbu	r3,-4(fp)
   22af4:	10c0002d 	sthio	r3,0(r2)
   22af8:	0001883a 	nop
   22afc:	e037883a 	mov	sp,fp
   22b00:	df000017 	ldw	fp,0(sp)
   22b04:	dec00104 	addi	sp,sp,4
   22b08:	f800283a 	ret

00022b0c <alt_write_flash_command_32bit_device_16bit_mode>:
   22b0c:	defffc04 	addi	sp,sp,-16
   22b10:	df000315 	stw	fp,12(sp)
   22b14:	df000304 	addi	fp,sp,12
   22b18:	e13ffd15 	stw	r4,-12(fp)
   22b1c:	e17ffe15 	stw	r5,-8(fp)
   22b20:	3005883a 	mov	r2,r6
   22b24:	e0bfff05 	stb	r2,-4(fp)
   22b28:	e0bffe17 	ldw	r2,-8(fp)
   22b2c:	1085883a 	add	r2,r2,r2
   22b30:	1085883a 	add	r2,r2,r2
   22b34:	e0fffd17 	ldw	r3,-12(fp)
   22b38:	1885883a 	add	r2,r3,r2
   22b3c:	e0ffff03 	ldbu	r3,-4(fp)
   22b40:	10c0002d 	sthio	r3,0(r2)
   22b44:	0001883a 	nop
   22b48:	e037883a 	mov	sp,fp
   22b4c:	df000017 	ldw	fp,0(sp)
   22b50:	dec00104 	addi	sp,sp,4
   22b54:	f800283a 	ret

00022b58 <alt_write_flash_command_32bit_device_32bit_mode>:
   22b58:	defffc04 	addi	sp,sp,-16
   22b5c:	df000315 	stw	fp,12(sp)
   22b60:	df000304 	addi	fp,sp,12
   22b64:	e13ffd15 	stw	r4,-12(fp)
   22b68:	e17ffe15 	stw	r5,-8(fp)
   22b6c:	3005883a 	mov	r2,r6
   22b70:	e0bfff05 	stb	r2,-4(fp)
   22b74:	e0bffe17 	ldw	r2,-8(fp)
   22b78:	1085883a 	add	r2,r2,r2
   22b7c:	1085883a 	add	r2,r2,r2
   22b80:	e0fffd17 	ldw	r3,-12(fp)
   22b84:	1885883a 	add	r2,r3,r2
   22b88:	e0ffff03 	ldbu	r3,-4(fp)
   22b8c:	10c00035 	stwio	r3,0(r2)
   22b90:	0001883a 	nop
   22b94:	e037883a 	mov	sp,fp
   22b98:	df000017 	ldw	fp,0(sp)
   22b9c:	dec00104 	addi	sp,sp,4
   22ba0:	f800283a 	ret

00022ba4 <alt_write_native_8bit>:
   22ba4:	defffd04 	addi	sp,sp,-12
   22ba8:	df000215 	stw	fp,8(sp)
   22bac:	df000204 	addi	fp,sp,8
   22bb0:	e13ffe15 	stw	r4,-8(fp)
   22bb4:	e17fff15 	stw	r5,-4(fp)
   22bb8:	e0bfff17 	ldw	r2,-4(fp)
   22bbc:	10c03fcc 	andi	r3,r2,255
   22bc0:	e0bffe17 	ldw	r2,-8(fp)
   22bc4:	10c00025 	stbio	r3,0(r2)
   22bc8:	0001883a 	nop
   22bcc:	e037883a 	mov	sp,fp
   22bd0:	df000017 	ldw	fp,0(sp)
   22bd4:	dec00104 	addi	sp,sp,4
   22bd8:	f800283a 	ret

00022bdc <alt_write_native_16bit>:
   22bdc:	defffd04 	addi	sp,sp,-12
   22be0:	df000215 	stw	fp,8(sp)
   22be4:	df000204 	addi	fp,sp,8
   22be8:	e13ffe15 	stw	r4,-8(fp)
   22bec:	e17fff15 	stw	r5,-4(fp)
   22bf0:	e0bfff17 	ldw	r2,-4(fp)
   22bf4:	10ffffcc 	andi	r3,r2,65535
   22bf8:	e0bffe17 	ldw	r2,-8(fp)
   22bfc:	10c0002d 	sthio	r3,0(r2)
   22c00:	0001883a 	nop
   22c04:	e037883a 	mov	sp,fp
   22c08:	df000017 	ldw	fp,0(sp)
   22c0c:	dec00104 	addi	sp,sp,4
   22c10:	f800283a 	ret

00022c14 <alt_write_native_32bit>:
   22c14:	defffd04 	addi	sp,sp,-12
   22c18:	df000215 	stw	fp,8(sp)
   22c1c:	df000204 	addi	fp,sp,8
   22c20:	e13ffe15 	stw	r4,-8(fp)
   22c24:	e17fff15 	stw	r5,-4(fp)
   22c28:	e0ffff17 	ldw	r3,-4(fp)
   22c2c:	e0bffe17 	ldw	r2,-8(fp)
   22c30:	10c00035 	stwio	r3,0(r2)
   22c34:	0001883a 	nop
   22c38:	e037883a 	mov	sp,fp
   22c3c:	df000017 	ldw	fp,0(sp)
   22c40:	dec00104 	addi	sp,sp,4
   22c44:	f800283a 	ret

00022c48 <alt_set_flash_width_func>:
   22c48:	defffd04 	addi	sp,sp,-12
   22c4c:	df000215 	stw	fp,8(sp)
   22c50:	df000204 	addi	fp,sp,8
   22c54:	e13fff15 	stw	r4,-4(fp)
   22c58:	e03ffe15 	stw	zero,-8(fp)
   22c5c:	e0bfff17 	ldw	r2,-4(fp)
   22c60:	10802e17 	ldw	r2,184(r2)
   22c64:	10c000a0 	cmpeqi	r3,r2,2
   22c68:	1800231e 	bne	r3,zero,22cf8 <alt_set_flash_width_func+0xb0>
   22c6c:	10c00120 	cmpeqi	r3,r2,4
   22c70:	1800371e 	bne	r3,zero,22d50 <alt_set_flash_width_func+0x108>
   22c74:	10800060 	cmpeqi	r2,r2,1
   22c78:	10003e26 	beq	r2,zero,22d74 <alt_set_flash_width_func+0x12c>
   22c7c:	e0bfff17 	ldw	r2,-4(fp)
   22c80:	00c000b4 	movhi	r3,2
   22c84:	18cae904 	addi	r3,r3,11172
   22c88:	10c03515 	stw	r3,212(r2)
   22c8c:	e0bfff17 	ldw	r2,-4(fp)
   22c90:	10802f17 	ldw	r2,188(r2)
   22c94:	10800058 	cmpnei	r2,r2,1
   22c98:	1000051e 	bne	r2,zero,22cb0 <alt_set_flash_width_func+0x68>
   22c9c:	e0bfff17 	ldw	r2,-4(fp)
   22ca0:	00c000b4 	movhi	r3,2
   22ca4:	18ca7004 	addi	r3,r3,10688
   22ca8:	10c03315 	stw	r3,204(r2)
   22cac:	00003406 	br	22d80 <alt_set_flash_width_func+0x138>
   22cb0:	e0bfff17 	ldw	r2,-4(fp)
   22cb4:	10802f17 	ldw	r2,188(r2)
   22cb8:	10800098 	cmpnei	r2,r2,2
   22cbc:	1000051e 	bne	r2,zero,22cd4 <alt_set_flash_width_func+0x8c>
   22cc0:	e0bfff17 	ldw	r2,-4(fp)
   22cc4:	00c000b4 	movhi	r3,2
   22cc8:	18ca8104 	addi	r3,r3,10756
   22ccc:	10c03315 	stw	r3,204(r2)
   22cd0:	00002b06 	br	22d80 <alt_set_flash_width_func+0x138>
   22cd4:	e0bfff17 	ldw	r2,-4(fp)
   22cd8:	10802f17 	ldw	r2,188(r2)
   22cdc:	10800118 	cmpnei	r2,r2,4
   22ce0:	1000271e 	bne	r2,zero,22d80 <alt_set_flash_width_func+0x138>
   22ce4:	e0bfff17 	ldw	r2,-4(fp)
   22ce8:	00c000b4 	movhi	r3,2
   22cec:	18ca9e04 	addi	r3,r3,10872
   22cf0:	10c03315 	stw	r3,204(r2)
   22cf4:	00002206 	br	22d80 <alt_set_flash_width_func+0x138>
   22cf8:	e0bfff17 	ldw	r2,-4(fp)
   22cfc:	00c000b4 	movhi	r3,2
   22d00:	18caf704 	addi	r3,r3,11228
   22d04:	10c03515 	stw	r3,212(r2)
   22d08:	e0bfff17 	ldw	r2,-4(fp)
   22d0c:	10802f17 	ldw	r2,188(r2)
   22d10:	10800098 	cmpnei	r2,r2,2
   22d14:	1000051e 	bne	r2,zero,22d2c <alt_set_flash_width_func+0xe4>
   22d18:	e0bfff17 	ldw	r2,-4(fp)
   22d1c:	00c000b4 	movhi	r3,2
   22d20:	18cab104 	addi	r3,r3,10948
   22d24:	10c03315 	stw	r3,204(r2)
   22d28:	00001706 	br	22d88 <alt_set_flash_width_func+0x140>
   22d2c:	e0bfff17 	ldw	r2,-4(fp)
   22d30:	10802f17 	ldw	r2,188(r2)
   22d34:	10800118 	cmpnei	r2,r2,4
   22d38:	1000131e 	bne	r2,zero,22d88 <alt_set_flash_width_func+0x140>
   22d3c:	e0bfff17 	ldw	r2,-4(fp)
   22d40:	00c000b4 	movhi	r3,2
   22d44:	18cac304 	addi	r3,r3,11020
   22d48:	10c03315 	stw	r3,204(r2)
   22d4c:	00000e06 	br	22d88 <alt_set_flash_width_func+0x140>
   22d50:	e0bfff17 	ldw	r2,-4(fp)
   22d54:	00c000b4 	movhi	r3,2
   22d58:	18cb0504 	addi	r3,r3,11284
   22d5c:	10c03515 	stw	r3,212(r2)
   22d60:	e0bfff17 	ldw	r2,-4(fp)
   22d64:	00c000b4 	movhi	r3,2
   22d68:	18cad604 	addi	r3,r3,11096
   22d6c:	10c03315 	stw	r3,204(r2)
   22d70:	00000606 	br	22d8c <alt_set_flash_width_func+0x144>
   22d74:	00bffcc4 	movi	r2,-13
   22d78:	e0bffe15 	stw	r2,-8(fp)
   22d7c:	00000306 	br	22d8c <alt_set_flash_width_func+0x144>
   22d80:	0001883a 	nop
   22d84:	00000106 	br	22d8c <alt_set_flash_width_func+0x144>
   22d88:	0001883a 	nop
   22d8c:	e0bffe17 	ldw	r2,-8(fp)
   22d90:	1000191e 	bne	r2,zero,22df8 <alt_set_flash_width_func+0x1b0>
   22d94:	e0bfff17 	ldw	r2,-4(fp)
   22d98:	10802f17 	ldw	r2,188(r2)
   22d9c:	10c000a0 	cmpeqi	r3,r2,2
   22da0:	1800091e 	bne	r3,zero,22dc8 <alt_set_flash_width_func+0x180>
   22da4:	10c00120 	cmpeqi	r3,r2,4
   22da8:	18000c1e 	bne	r3,zero,22ddc <alt_set_flash_width_func+0x194>
   22dac:	10800060 	cmpeqi	r2,r2,1
   22db0:	10000f26 	beq	r2,zero,22df0 <alt_set_flash_width_func+0x1a8>
   22db4:	e0bfff17 	ldw	r2,-4(fp)
   22db8:	00c000b4 	movhi	r3,2
   22dbc:	18ca4104 	addi	r3,r3,10500
   22dc0:	10c03415 	stw	r3,208(r2)
   22dc4:	00000c06 	br	22df8 <alt_set_flash_width_func+0x1b0>
   22dc8:	e0bfff17 	ldw	r2,-4(fp)
   22dcc:	00c000b4 	movhi	r3,2
   22dd0:	18ca5004 	addi	r3,r3,10560
   22dd4:	10c03415 	stw	r3,208(r2)
   22dd8:	00000706 	br	22df8 <alt_set_flash_width_func+0x1b0>
   22ddc:	e0bfff17 	ldw	r2,-4(fp)
   22de0:	00c000b4 	movhi	r3,2
   22de4:	18ca6004 	addi	r3,r3,10624
   22de8:	10c03415 	stw	r3,208(r2)
   22dec:	00000206 	br	22df8 <alt_set_flash_width_func+0x1b0>
   22df0:	00bffcc4 	movi	r2,-13
   22df4:	e0bffe15 	stw	r2,-8(fp)
   22df8:	e0bffe17 	ldw	r2,-8(fp)
   22dfc:	e037883a 	mov	sp,fp
   22e00:	df000017 	ldw	fp,0(sp)
   22e04:	dec00104 	addi	sp,sp,4
   22e08:	f800283a 	ret

00022e0c <alt_set_flash_algorithm_func>:
   22e0c:	defffd04 	addi	sp,sp,-12
   22e10:	df000215 	stw	fp,8(sp)
   22e14:	df000204 	addi	fp,sp,8
   22e18:	e13fff15 	stw	r4,-4(fp)
   22e1c:	e03ffe15 	stw	zero,-8(fp)
   22e20:	e0bfff17 	ldw	r2,-4(fp)
   22e24:	10802d17 	ldw	r2,180(r2)
   22e28:	10c000a0 	cmpeqi	r3,r2,2
   22e2c:	1800051e 	bne	r3,zero,22e44 <alt_set_flash_algorithm_func+0x38>
   22e30:	10c000e0 	cmpeqi	r3,r2,3
   22e34:	18000c1e 	bne	r3,zero,22e68 <alt_set_flash_algorithm_func+0x5c>
   22e38:	10800060 	cmpeqi	r2,r2,1
   22e3c:	10000a1e 	bne	r2,zero,22e68 <alt_set_flash_algorithm_func+0x5c>
   22e40:	00001206 	br	22e8c <alt_set_flash_algorithm_func+0x80>
   22e44:	e0bfff17 	ldw	r2,-4(fp)
   22e48:	00c000f4 	movhi	r3,3
   22e4c:	18f2fa04 	addi	r3,r3,-13336
   22e50:	10c00815 	stw	r3,32(r2)
   22e54:	e0bfff17 	ldw	r2,-4(fp)
   22e58:	00c000f4 	movhi	r3,3
   22e5c:	18f2e004 	addi	r3,r3,-13440
   22e60:	10c00915 	stw	r3,36(r2)
   22e64:	00000b06 	br	22e94 <alt_set_flash_algorithm_func+0x88>
   22e68:	e0bfff17 	ldw	r2,-4(fp)
   22e6c:	00c000f4 	movhi	r3,3
   22e70:	18f41804 	addi	r3,r3,-12192
   22e74:	10c00815 	stw	r3,32(r2)
   22e78:	e0bfff17 	ldw	r2,-4(fp)
   22e7c:	00c000f4 	movhi	r3,3
   22e80:	18f3f804 	addi	r3,r3,-12320
   22e84:	10c00915 	stw	r3,36(r2)
   22e88:	00000206 	br	22e94 <alt_set_flash_algorithm_func+0x88>
   22e8c:	00bffec4 	movi	r2,-5
   22e90:	e0bffe15 	stw	r2,-8(fp)
   22e94:	e0bffe17 	ldw	r2,-8(fp)
   22e98:	e037883a 	mov	sp,fp
   22e9c:	df000017 	ldw	fp,0(sp)
   22ea0:	dec00104 	addi	sp,sp,4
   22ea4:	f800283a 	ret

00022ea8 <alt_read_16bit_query_entry>:
   22ea8:	defffb04 	addi	sp,sp,-20
   22eac:	dfc00415 	stw	ra,16(sp)
   22eb0:	df000315 	stw	fp,12(sp)
   22eb4:	df000304 	addi	fp,sp,12
   22eb8:	e13ffe15 	stw	r4,-8(fp)
   22ebc:	e17fff15 	stw	r5,-4(fp)
   22ec0:	e0bffe17 	ldw	r2,-8(fp)
   22ec4:	10803417 	ldw	r2,208(r2)
   22ec8:	e13ffe17 	ldw	r4,-8(fp)
   22ecc:	e17fff17 	ldw	r5,-4(fp)
   22ed0:	103ee83a 	callr	r2
   22ed4:	10803fcc 	andi	r2,r2,255
   22ed8:	e0bffd0d 	sth	r2,-12(fp)
   22edc:	e0bffe17 	ldw	r2,-8(fp)
   22ee0:	10c03417 	ldw	r3,208(r2)
   22ee4:	e0bfff17 	ldw	r2,-4(fp)
   22ee8:	10800044 	addi	r2,r2,1
   22eec:	e13ffe17 	ldw	r4,-8(fp)
   22ef0:	100b883a 	mov	r5,r2
   22ef4:	183ee83a 	callr	r3
   22ef8:	10803fcc 	andi	r2,r2,255
   22efc:	1004923a 	slli	r2,r2,8
   22f00:	1007883a 	mov	r3,r2
   22f04:	e0bffd0b 	ldhu	r2,-12(fp)
   22f08:	1884b03a 	or	r2,r3,r2
   22f0c:	e0bffd0d 	sth	r2,-12(fp)
   22f10:	e0bffd0b 	ldhu	r2,-12(fp)
   22f14:	e037883a 	mov	sp,fp
   22f18:	dfc00117 	ldw	ra,4(sp)
   22f1c:	df000017 	ldw	fp,0(sp)
   22f20:	dec00204 	addi	sp,sp,8
   22f24:	f800283a 	ret

00022f28 <alt_read_cfi_table>:
   22f28:	defff304 	addi	sp,sp,-52
   22f2c:	dfc00c15 	stw	ra,48(sp)
   22f30:	df000b15 	stw	fp,44(sp)
   22f34:	df000b04 	addi	fp,sp,44
   22f38:	e13fff15 	stw	r4,-4(fp)
   22f3c:	e03ff715 	stw	zero,-36(fp)
   22f40:	e03ff815 	stw	zero,-32(fp)
   22f44:	e03ff915 	stw	zero,-28(fp)
   22f48:	e13fff17 	ldw	r4,-4(fp)
   22f4c:	0023c600 	call	23c60 <alt_check_primary_table>
   22f50:	e0bff715 	stw	r2,-36(fp)
   22f54:	e0bff717 	ldw	r2,-36(fp)
   22f58:	10015f1e 	bne	r2,zero,234d8 <alt_read_cfi_table+0x5b0>
   22f5c:	e0bfff17 	ldw	r2,-4(fp)
   22f60:	10803417 	ldw	r2,208(r2)
   22f64:	e13fff17 	ldw	r4,-4(fp)
   22f68:	014004c4 	movi	r5,19
   22f6c:	103ee83a 	callr	r2
   22f70:	10c03fcc 	andi	r3,r2,255
   22f74:	e0bfff17 	ldw	r2,-4(fp)
   22f78:	10c02d15 	stw	r3,180(r2)
   22f7c:	e0bfff17 	ldw	r2,-4(fp)
   22f80:	10803417 	ldw	r2,208(r2)
   22f84:	e13fff17 	ldw	r4,-4(fp)
   22f88:	014007c4 	movi	r5,31
   22f8c:	103ee83a 	callr	r2
   22f90:	10803fcc 	andi	r2,r2,255
   22f94:	e0bffa15 	stw	r2,-24(fp)
   22f98:	e0bfff17 	ldw	r2,-4(fp)
   22f9c:	10803417 	ldw	r2,208(r2)
   22fa0:	e13fff17 	ldw	r4,-4(fp)
   22fa4:	014008c4 	movi	r5,35
   22fa8:	103ee83a 	callr	r2
   22fac:	10803fcc 	andi	r2,r2,255
   22fb0:	e0bffb15 	stw	r2,-20(fp)
   22fb4:	e0bffa17 	ldw	r2,-24(fp)
   22fb8:	10000226 	beq	r2,zero,22fc4 <alt_read_cfi_table+0x9c>
   22fbc:	e0bffb17 	ldw	r2,-20(fp)
   22fc0:	1000041e 	bne	r2,zero,22fd4 <alt_read_cfi_table+0xac>
   22fc4:	e0bfff17 	ldw	r2,-4(fp)
   22fc8:	00c0fa04 	movi	r3,1000
   22fcc:	10c03015 	stw	r3,192(r2)
   22fd0:	00000706 	br	22ff0 <alt_read_cfi_table+0xc8>
   22fd4:	00c00044 	movi	r3,1
   22fd8:	e0bffa17 	ldw	r2,-24(fp)
   22fdc:	1886983a 	sll	r3,r3,r2
   22fe0:	e0bffb17 	ldw	r2,-20(fp)
   22fe4:	1886983a 	sll	r3,r3,r2
   22fe8:	e0bfff17 	ldw	r2,-4(fp)
   22fec:	10c03015 	stw	r3,192(r2)
   22ff0:	e0bfff17 	ldw	r2,-4(fp)
   22ff4:	10803417 	ldw	r2,208(r2)
   22ff8:	e13fff17 	ldw	r4,-4(fp)
   22ffc:	01400844 	movi	r5,33
   23000:	103ee83a 	callr	r2
   23004:	10803fcc 	andi	r2,r2,255
   23008:	e0bffa15 	stw	r2,-24(fp)
   2300c:	e0bfff17 	ldw	r2,-4(fp)
   23010:	10803417 	ldw	r2,208(r2)
   23014:	e13fff17 	ldw	r4,-4(fp)
   23018:	01400944 	movi	r5,37
   2301c:	103ee83a 	callr	r2
   23020:	10803fcc 	andi	r2,r2,255
   23024:	e0bffb15 	stw	r2,-20(fp)
   23028:	e0bffa17 	ldw	r2,-24(fp)
   2302c:	10000226 	beq	r2,zero,23038 <alt_read_cfi_table+0x110>
   23030:	e0bffb17 	ldw	r2,-20(fp)
   23034:	1000051e 	bne	r2,zero,2304c <alt_read_cfi_table+0x124>
   23038:	e0bfff17 	ldw	r2,-4(fp)
   2303c:	00c04c74 	movhi	r3,305
   23040:	18cb4004 	addi	r3,r3,11520
   23044:	10c03115 	stw	r3,196(r2)
   23048:	00000806 	br	2306c <alt_read_cfi_table+0x144>
   2304c:	00c00044 	movi	r3,1
   23050:	e0bffa17 	ldw	r2,-24(fp)
   23054:	1886983a 	sll	r3,r3,r2
   23058:	e0bffb17 	ldw	r2,-20(fp)
   2305c:	1884983a 	sll	r2,r3,r2
   23060:	10c0fa24 	muli	r3,r2,1000
   23064:	e0bfff17 	ldw	r2,-4(fp)
   23068:	10c03115 	stw	r3,196(r2)
   2306c:	e0bfff17 	ldw	r2,-4(fp)
   23070:	10803417 	ldw	r2,208(r2)
   23074:	e13fff17 	ldw	r4,-4(fp)
   23078:	014009c4 	movi	r5,39
   2307c:	103ee83a 	callr	r2
   23080:	10803fcc 	andi	r2,r2,255
   23084:	00c00044 	movi	r3,1
   23088:	1884983a 	sll	r2,r3,r2
   2308c:	e0bffc15 	stw	r2,-16(fp)
   23090:	e0bfff17 	ldw	r2,-4(fp)
   23094:	10803417 	ldw	r2,208(r2)
   23098:	e13fff17 	ldw	r4,-4(fp)
   2309c:	01400b04 	movi	r5,44
   230a0:	103ee83a 	callr	r2
   230a4:	10c03fcc 	andi	r3,r2,255
   230a8:	e0bfff17 	ldw	r2,-4(fp)
   230ac:	10c00c15 	stw	r3,48(r2)
   230b0:	e0bfff17 	ldw	r2,-4(fp)
   230b4:	10800c17 	ldw	r2,48(r2)
   230b8:	10800250 	cmplti	r2,r2,9
   230bc:	1000031e 	bne	r2,zero,230cc <alt_read_cfi_table+0x1a4>
   230c0:	00bffd04 	movi	r2,-12
   230c4:	e0bff715 	stw	r2,-36(fp)
   230c8:	00006006 	br	2324c <alt_read_cfi_table+0x324>
   230cc:	e03ff515 	stw	zero,-44(fp)
   230d0:	00005506 	br	23228 <alt_read_cfi_table+0x300>
   230d4:	e0bff517 	ldw	r2,-44(fp)
   230d8:	1085883a 	add	r2,r2,r2
   230dc:	1085883a 	add	r2,r2,r2
   230e0:	10800b44 	addi	r2,r2,45
   230e4:	e13fff17 	ldw	r4,-4(fp)
   230e8:	100b883a 	mov	r5,r2
   230ec:	0022ea80 	call	22ea8 <alt_read_16bit_query_entry>
   230f0:	10ffffcc 	andi	r3,r2,65535
   230f4:	e13fff17 	ldw	r4,-4(fp)
   230f8:	e0bff517 	ldw	r2,-44(fp)
   230fc:	1004913a 	slli	r2,r2,4
   23100:	2085883a 	add	r2,r4,r2
   23104:	10800f04 	addi	r2,r2,60
   23108:	10c00015 	stw	r3,0(r2)
   2310c:	e0ffff17 	ldw	r3,-4(fp)
   23110:	e0bff517 	ldw	r2,-44(fp)
   23114:	1004913a 	slli	r2,r2,4
   23118:	1885883a 	add	r2,r3,r2
   2311c:	10800f04 	addi	r2,r2,60
   23120:	10800017 	ldw	r2,0(r2)
   23124:	10c00044 	addi	r3,r2,1
   23128:	e13fff17 	ldw	r4,-4(fp)
   2312c:	e0bff517 	ldw	r2,-44(fp)
   23130:	1004913a 	slli	r2,r2,4
   23134:	2085883a 	add	r2,r4,r2
   23138:	10800f04 	addi	r2,r2,60
   2313c:	10c00015 	stw	r3,0(r2)
   23140:	e0bff517 	ldw	r2,-44(fp)
   23144:	1085883a 	add	r2,r2,r2
   23148:	1085883a 	add	r2,r2,r2
   2314c:	10800bc4 	addi	r2,r2,47
   23150:	e13fff17 	ldw	r4,-4(fp)
   23154:	100b883a 	mov	r5,r2
   23158:	0022ea80 	call	22ea8 <alt_read_16bit_query_entry>
   2315c:	10ffffcc 	andi	r3,r2,65535
   23160:	e13fff17 	ldw	r4,-4(fp)
   23164:	e0bff517 	ldw	r2,-44(fp)
   23168:	10800104 	addi	r2,r2,4
   2316c:	1004913a 	slli	r2,r2,4
   23170:	2085883a 	add	r2,r4,r2
   23174:	10c00015 	stw	r3,0(r2)
   23178:	e0ffff17 	ldw	r3,-4(fp)
   2317c:	e0bff517 	ldw	r2,-44(fp)
   23180:	10800104 	addi	r2,r2,4
   23184:	1004913a 	slli	r2,r2,4
   23188:	1885883a 	add	r2,r3,r2
   2318c:	10800017 	ldw	r2,0(r2)
   23190:	1006923a 	slli	r3,r2,8
   23194:	e13fff17 	ldw	r4,-4(fp)
   23198:	e0bff517 	ldw	r2,-44(fp)
   2319c:	10800104 	addi	r2,r2,4
   231a0:	1004913a 	slli	r2,r2,4
   231a4:	2085883a 	add	r2,r4,r2
   231a8:	10c00015 	stw	r3,0(r2)
   231ac:	e0ffff17 	ldw	r3,-4(fp)
   231b0:	e0bff517 	ldw	r2,-44(fp)
   231b4:	1004913a 	slli	r2,r2,4
   231b8:	1885883a 	add	r2,r3,r2
   231bc:	10800f04 	addi	r2,r2,60
   231c0:	10c00017 	ldw	r3,0(r2)
   231c4:	e13fff17 	ldw	r4,-4(fp)
   231c8:	e0bff517 	ldw	r2,-44(fp)
   231cc:	10800104 	addi	r2,r2,4
   231d0:	1004913a 	slli	r2,r2,4
   231d4:	2085883a 	add	r2,r4,r2
   231d8:	10800017 	ldw	r2,0(r2)
   231dc:	1887383a 	mul	r3,r3,r2
   231e0:	e13fff17 	ldw	r4,-4(fp)
   231e4:	e0bff517 	ldw	r2,-44(fp)
   231e8:	1004913a 	slli	r2,r2,4
   231ec:	2085883a 	add	r2,r4,r2
   231f0:	10800e04 	addi	r2,r2,56
   231f4:	10c00015 	stw	r3,0(r2)
   231f8:	e0ffff17 	ldw	r3,-4(fp)
   231fc:	e0bff517 	ldw	r2,-44(fp)
   23200:	1004913a 	slli	r2,r2,4
   23204:	1885883a 	add	r2,r3,r2
   23208:	10800e04 	addi	r2,r2,56
   2320c:	10800017 	ldw	r2,0(r2)
   23210:	e0fff817 	ldw	r3,-32(fp)
   23214:	1885883a 	add	r2,r3,r2
   23218:	e0bff815 	stw	r2,-32(fp)
   2321c:	e0bff517 	ldw	r2,-44(fp)
   23220:	10800044 	addi	r2,r2,1
   23224:	e0bff515 	stw	r2,-44(fp)
   23228:	e0bfff17 	ldw	r2,-4(fp)
   2322c:	10800c17 	ldw	r2,48(r2)
   23230:	e0fff517 	ldw	r3,-44(fp)
   23234:	18bfa716 	blt	r3,r2,230d4 <alt_read_cfi_table+0x1ac>
   23238:	e0fff817 	ldw	r3,-32(fp)
   2323c:	e0bffc17 	ldw	r2,-16(fp)
   23240:	18800226 	beq	r3,r2,2324c <alt_read_cfi_table+0x324>
   23244:	00bffb44 	movi	r2,-19
   23248:	e0bff715 	stw	r2,-36(fp)
   2324c:	e0bfff17 	ldw	r2,-4(fp)
   23250:	10c03417 	ldw	r3,208(r2)
   23254:	e0bfff17 	ldw	r2,-4(fp)
   23258:	10803217 	ldw	r2,200(r2)
   2325c:	108003c4 	addi	r2,r2,15
   23260:	e13fff17 	ldw	r4,-4(fp)
   23264:	100b883a 	mov	r5,r2
   23268:	183ee83a 	callr	r3
   2326c:	e0bffd05 	stb	r2,-12(fp)
   23270:	e0bfff17 	ldw	r2,-4(fp)
   23274:	10802d17 	ldw	r2,180(r2)
   23278:	10800098 	cmpnei	r2,r2,2
   2327c:	1000601e 	bne	r2,zero,23400 <alt_read_cfi_table+0x4d8>
   23280:	e0bffd03 	ldbu	r2,-12(fp)
   23284:	108000d8 	cmpnei	r2,r2,3
   23288:	10005d1e 	bne	r2,zero,23400 <alt_read_cfi_table+0x4d8>
   2328c:	e0bfff17 	ldw	r2,-4(fp)
   23290:	10800c17 	ldw	r2,48(r2)
   23294:	10bfffc4 	addi	r2,r2,-1
   23298:	e0bff515 	stw	r2,-44(fp)
   2329c:	e03ff615 	stw	zero,-40(fp)
   232a0:	00005406 	br	233f4 <alt_read_cfi_table+0x4cc>
   232a4:	e0ffff17 	ldw	r3,-4(fp)
   232a8:	e0bff517 	ldw	r2,-44(fp)
   232ac:	1004913a 	slli	r2,r2,4
   232b0:	1885883a 	add	r2,r3,r2
   232b4:	10800e04 	addi	r2,r2,56
   232b8:	10800017 	ldw	r2,0(r2)
   232bc:	e0bffe15 	stw	r2,-8(fp)
   232c0:	e0ffff17 	ldw	r3,-4(fp)
   232c4:	e0bff617 	ldw	r2,-40(fp)
   232c8:	1004913a 	slli	r2,r2,4
   232cc:	1885883a 	add	r2,r3,r2
   232d0:	10800e04 	addi	r2,r2,56
   232d4:	10c00017 	ldw	r3,0(r2)
   232d8:	e13fff17 	ldw	r4,-4(fp)
   232dc:	e0bff517 	ldw	r2,-44(fp)
   232e0:	1004913a 	slli	r2,r2,4
   232e4:	2085883a 	add	r2,r4,r2
   232e8:	10800e04 	addi	r2,r2,56
   232ec:	10c00015 	stw	r3,0(r2)
   232f0:	e0ffff17 	ldw	r3,-4(fp)
   232f4:	e0bff617 	ldw	r2,-40(fp)
   232f8:	1004913a 	slli	r2,r2,4
   232fc:	1885883a 	add	r2,r3,r2
   23300:	10800e04 	addi	r2,r2,56
   23304:	e0fffe17 	ldw	r3,-8(fp)
   23308:	10c00015 	stw	r3,0(r2)
   2330c:	e0ffff17 	ldw	r3,-4(fp)
   23310:	e0bff517 	ldw	r2,-44(fp)
   23314:	10800104 	addi	r2,r2,4
   23318:	1004913a 	slli	r2,r2,4
   2331c:	1885883a 	add	r2,r3,r2
   23320:	10800017 	ldw	r2,0(r2)
   23324:	e0bffe15 	stw	r2,-8(fp)
   23328:	e0ffff17 	ldw	r3,-4(fp)
   2332c:	e0bff617 	ldw	r2,-40(fp)
   23330:	10800104 	addi	r2,r2,4
   23334:	1004913a 	slli	r2,r2,4
   23338:	1885883a 	add	r2,r3,r2
   2333c:	10c00017 	ldw	r3,0(r2)
   23340:	e13fff17 	ldw	r4,-4(fp)
   23344:	e0bff517 	ldw	r2,-44(fp)
   23348:	10800104 	addi	r2,r2,4
   2334c:	1004913a 	slli	r2,r2,4
   23350:	2085883a 	add	r2,r4,r2
   23354:	10c00015 	stw	r3,0(r2)
   23358:	e0ffff17 	ldw	r3,-4(fp)
   2335c:	e0bff617 	ldw	r2,-40(fp)
   23360:	10800104 	addi	r2,r2,4
   23364:	1004913a 	slli	r2,r2,4
   23368:	1885883a 	add	r2,r3,r2
   2336c:	e0fffe17 	ldw	r3,-8(fp)
   23370:	10c00015 	stw	r3,0(r2)
   23374:	e0ffff17 	ldw	r3,-4(fp)
   23378:	e0bff517 	ldw	r2,-44(fp)
   2337c:	1004913a 	slli	r2,r2,4
   23380:	1885883a 	add	r2,r3,r2
   23384:	10800f04 	addi	r2,r2,60
   23388:	10800017 	ldw	r2,0(r2)
   2338c:	e0bffe15 	stw	r2,-8(fp)
   23390:	e0ffff17 	ldw	r3,-4(fp)
   23394:	e0bff617 	ldw	r2,-40(fp)
   23398:	1004913a 	slli	r2,r2,4
   2339c:	1885883a 	add	r2,r3,r2
   233a0:	10800f04 	addi	r2,r2,60
   233a4:	10c00017 	ldw	r3,0(r2)
   233a8:	e13fff17 	ldw	r4,-4(fp)
   233ac:	e0bff517 	ldw	r2,-44(fp)
   233b0:	1004913a 	slli	r2,r2,4
   233b4:	2085883a 	add	r2,r4,r2
   233b8:	10800f04 	addi	r2,r2,60
   233bc:	10c00015 	stw	r3,0(r2)
   233c0:	e0ffff17 	ldw	r3,-4(fp)
   233c4:	e0bff617 	ldw	r2,-40(fp)
   233c8:	1004913a 	slli	r2,r2,4
   233cc:	1885883a 	add	r2,r3,r2
   233d0:	10800f04 	addi	r2,r2,60
   233d4:	e0fffe17 	ldw	r3,-8(fp)
   233d8:	10c00015 	stw	r3,0(r2)
   233dc:	e0bff517 	ldw	r2,-44(fp)
   233e0:	10bfffc4 	addi	r2,r2,-1
   233e4:	e0bff515 	stw	r2,-44(fp)
   233e8:	e0bff617 	ldw	r2,-40(fp)
   233ec:	10800044 	addi	r2,r2,1
   233f0:	e0bff615 	stw	r2,-40(fp)
   233f4:	e0bff617 	ldw	r2,-40(fp)
   233f8:	e0fff517 	ldw	r3,-44(fp)
   233fc:	18bfa90e 	bge	r3,r2,232a4 <alt_read_cfi_table+0x37c>
   23400:	e03ff515 	stw	zero,-44(fp)
   23404:	00001306 	br	23454 <alt_read_cfi_table+0x52c>
   23408:	e0ffff17 	ldw	r3,-4(fp)
   2340c:	e0bff517 	ldw	r2,-44(fp)
   23410:	1004913a 	slli	r2,r2,4
   23414:	1885883a 	add	r2,r3,r2
   23418:	10800d04 	addi	r2,r2,52
   2341c:	e0fff917 	ldw	r3,-28(fp)
   23420:	10c00015 	stw	r3,0(r2)
   23424:	e0ffff17 	ldw	r3,-4(fp)
   23428:	e0bff517 	ldw	r2,-44(fp)
   2342c:	1004913a 	slli	r2,r2,4
   23430:	1885883a 	add	r2,r3,r2
   23434:	10800e04 	addi	r2,r2,56
   23438:	10800017 	ldw	r2,0(r2)
   2343c:	e0fff917 	ldw	r3,-28(fp)
   23440:	1885883a 	add	r2,r3,r2
   23444:	e0bff915 	stw	r2,-28(fp)
   23448:	e0bff517 	ldw	r2,-44(fp)
   2344c:	10800044 	addi	r2,r2,1
   23450:	e0bff515 	stw	r2,-44(fp)
   23454:	e0bfff17 	ldw	r2,-4(fp)
   23458:	10800c17 	ldw	r2,48(r2)
   2345c:	e0fff517 	ldw	r3,-44(fp)
   23460:	18bfe916 	blt	r3,r2,23408 <alt_read_cfi_table+0x4e0>
   23464:	e0bfff17 	ldw	r2,-4(fp)
   23468:	10802d17 	ldw	r2,180(r2)
   2346c:	10c000a0 	cmpeqi	r3,r2,2
   23470:	1800051e 	bne	r3,zero,23488 <alt_read_cfi_table+0x560>
   23474:	10c000e0 	cmpeqi	r3,r2,3
   23478:	18000c1e 	bne	r3,zero,234ac <alt_read_cfi_table+0x584>
   2347c:	10800060 	cmpeqi	r2,r2,1
   23480:	10000a1e 	bne	r2,zero,234ac <alt_read_cfi_table+0x584>
   23484:	00001206 	br	234d0 <alt_read_cfi_table+0x5a8>
   23488:	e0bfff17 	ldw	r2,-4(fp)
   2348c:	10c03317 	ldw	r3,204(r2)
   23490:	e0bfff17 	ldw	r2,-4(fp)
   23494:	10800a17 	ldw	r2,40(r2)
   23498:	1009883a 	mov	r4,r2
   2349c:	01401544 	movi	r5,85
   234a0:	01803c04 	movi	r6,240
   234a4:	183ee83a 	callr	r3
   234a8:	00000b06 	br	234d8 <alt_read_cfi_table+0x5b0>
   234ac:	e0bfff17 	ldw	r2,-4(fp)
   234b0:	10c03317 	ldw	r3,204(r2)
   234b4:	e0bfff17 	ldw	r2,-4(fp)
   234b8:	10800a17 	ldw	r2,40(r2)
   234bc:	1009883a 	mov	r4,r2
   234c0:	01401544 	movi	r5,85
   234c4:	01803fc4 	movi	r6,255
   234c8:	183ee83a 	callr	r3
   234cc:	00000206 	br	234d8 <alt_read_cfi_table+0x5b0>
   234d0:	00bffec4 	movi	r2,-5
   234d4:	e0bff715 	stw	r2,-36(fp)
   234d8:	e0bff717 	ldw	r2,-36(fp)
   234dc:	e037883a 	mov	sp,fp
   234e0:	dfc00117 	ldw	ra,4(sp)
   234e4:	df000017 	ldw	fp,0(sp)
   234e8:	dec00204 	addi	sp,sp,8
   234ec:	f800283a 	ret

000234f0 <alt_read_cfi_width>:
   234f0:	defff704 	addi	sp,sp,-36
   234f4:	dfc00815 	stw	ra,32(sp)
   234f8:	df000715 	stw	fp,28(sp)
   234fc:	df000704 	addi	fp,sp,28
   23500:	e13fff15 	stw	r4,-4(fp)
   23504:	e03ffa15 	stw	zero,-24(fp)
   23508:	e0bfff17 	ldw	r2,-4(fp)
   2350c:	10800a17 	ldw	r2,40(r2)
   23510:	1009883a 	mov	r4,r2
   23514:	01401544 	movi	r5,85
   23518:	01802604 	movi	r6,152
   2351c:	00229c00 	call	229c0 <alt_write_flash_command_8bit_device_8bit_mode>
   23520:	e03ff915 	stw	zero,-28(fp)
   23524:	00000f06 	br	23564 <alt_read_cfi_width+0x74>
   23528:	e0bfff17 	ldw	r2,-4(fp)
   2352c:	10c00a17 	ldw	r3,40(r2)
   23530:	e0bff917 	ldw	r2,-28(fp)
   23534:	10800404 	addi	r2,r2,16
   23538:	1885883a 	add	r2,r3,r2
   2353c:	10800023 	ldbuio	r2,0(r2)
   23540:	10803fcc 	andi	r2,r2,255
   23544:	1007883a 	mov	r3,r2
   23548:	e13ffb84 	addi	r4,fp,-18
   2354c:	e0bff917 	ldw	r2,-28(fp)
   23550:	2085883a 	add	r2,r4,r2
   23554:	10c00005 	stb	r3,0(r2)
   23558:	e0bff917 	ldw	r2,-28(fp)
   2355c:	10800044 	addi	r2,r2,1
   23560:	e0bff915 	stw	r2,-28(fp)
   23564:	e0bff917 	ldw	r2,-28(fp)
   23568:	108000d0 	cmplti	r2,r2,3
   2356c:	103fee1e 	bne	r2,zero,23528 <alt_read_cfi_width+0x38>
   23570:	e0bffb83 	ldbu	r2,-18(fp)
   23574:	10803fcc 	andi	r2,r2,255
   23578:	10801458 	cmpnei	r2,r2,81
   2357c:	10001d1e 	bne	r2,zero,235f4 <alt_read_cfi_width+0x104>
   23580:	e0bffbc3 	ldbu	r2,-17(fp)
   23584:	10803fcc 	andi	r2,r2,255
   23588:	10801498 	cmpnei	r2,r2,82
   2358c:	1000191e 	bne	r2,zero,235f4 <alt_read_cfi_width+0x104>
   23590:	e0bffc03 	ldbu	r2,-16(fp)
   23594:	10803fcc 	andi	r2,r2,255
   23598:	10801658 	cmpnei	r2,r2,89
   2359c:	1000151e 	bne	r2,zero,235f4 <alt_read_cfi_width+0x104>
   235a0:	e0bfff17 	ldw	r2,-4(fp)
   235a4:	00c00044 	movi	r3,1
   235a8:	10c02e15 	stw	r3,184(r2)
   235ac:	e0bfff17 	ldw	r2,-4(fp)
   235b0:	00c00044 	movi	r3,1
   235b4:	10c02f15 	stw	r3,188(r2)
   235b8:	e0bfff17 	ldw	r2,-4(fp)
   235bc:	10800a17 	ldw	r2,40(r2)
   235c0:	10800a04 	addi	r2,r2,40
   235c4:	1080002b 	ldhuio	r2,0(r2)
   235c8:	10bfffcc 	andi	r2,r2,65535
   235cc:	e0bffb0d 	sth	r2,-20(fp)
   235d0:	e0bffb0b 	ldhu	r2,-20(fp)
   235d4:	10800044 	addi	r2,r2,1
   235d8:	e0bffb0d 	sth	r2,-20(fp)
   235dc:	e0bffb0b 	ldhu	r2,-20(fp)
   235e0:	1080004c 	andi	r2,r2,1
   235e4:	1001981e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   235e8:	00bffb44 	movi	r2,-19
   235ec:	e0bffa15 	stw	r2,-24(fp)
   235f0:	00019506 	br	23c48 <alt_read_cfi_width+0x758>
   235f4:	e0bfff17 	ldw	r2,-4(fp)
   235f8:	10800a17 	ldw	r2,40(r2)
   235fc:	1009883a 	mov	r4,r2
   23600:	01401544 	movi	r5,85
   23604:	01802604 	movi	r6,152
   23608:	0022a040 	call	22a04 <alt_write_flash_command_16bit_device_8bit_mode>
   2360c:	e03ff915 	stw	zero,-28(fp)
   23610:	00000f06 	br	23650 <alt_read_cfi_width+0x160>
   23614:	e0bfff17 	ldw	r2,-4(fp)
   23618:	10c00a17 	ldw	r3,40(r2)
   2361c:	e0bff917 	ldw	r2,-28(fp)
   23620:	10800804 	addi	r2,r2,32
   23624:	1885883a 	add	r2,r3,r2
   23628:	10800023 	ldbuio	r2,0(r2)
   2362c:	10803fcc 	andi	r2,r2,255
   23630:	1007883a 	mov	r3,r2
   23634:	e13ffb84 	addi	r4,fp,-18
   23638:	e0bff917 	ldw	r2,-28(fp)
   2363c:	2085883a 	add	r2,r4,r2
   23640:	10c00005 	stb	r3,0(r2)
   23644:	e0bff917 	ldw	r2,-28(fp)
   23648:	10800044 	addi	r2,r2,1
   2364c:	e0bff915 	stw	r2,-28(fp)
   23650:	e0bff917 	ldw	r2,-28(fp)
   23654:	10800190 	cmplti	r2,r2,6
   23658:	103fee1e 	bne	r2,zero,23614 <alt_read_cfi_width+0x124>
   2365c:	e0bffb83 	ldbu	r2,-18(fp)
   23660:	10803fcc 	andi	r2,r2,255
   23664:	10801458 	cmpnei	r2,r2,81
   23668:	1000291e 	bne	r2,zero,23710 <alt_read_cfi_width+0x220>
   2366c:	e0bffbc3 	ldbu	r2,-17(fp)
   23670:	10803fcc 	andi	r2,r2,255
   23674:	10801458 	cmpnei	r2,r2,81
   23678:	1000251e 	bne	r2,zero,23710 <alt_read_cfi_width+0x220>
   2367c:	e0bffc03 	ldbu	r2,-16(fp)
   23680:	10803fcc 	andi	r2,r2,255
   23684:	10801498 	cmpnei	r2,r2,82
   23688:	1000211e 	bne	r2,zero,23710 <alt_read_cfi_width+0x220>
   2368c:	e0bffc43 	ldbu	r2,-15(fp)
   23690:	10803fcc 	andi	r2,r2,255
   23694:	10801498 	cmpnei	r2,r2,82
   23698:	10001d1e 	bne	r2,zero,23710 <alt_read_cfi_width+0x220>
   2369c:	e0bffc83 	ldbu	r2,-14(fp)
   236a0:	10803fcc 	andi	r2,r2,255
   236a4:	10801658 	cmpnei	r2,r2,89
   236a8:	1000191e 	bne	r2,zero,23710 <alt_read_cfi_width+0x220>
   236ac:	e0bffcc3 	ldbu	r2,-13(fp)
   236b0:	10803fcc 	andi	r2,r2,255
   236b4:	10801658 	cmpnei	r2,r2,89
   236b8:	1000151e 	bne	r2,zero,23710 <alt_read_cfi_width+0x220>
   236bc:	e0bfff17 	ldw	r2,-4(fp)
   236c0:	00c00044 	movi	r3,1
   236c4:	10c02e15 	stw	r3,184(r2)
   236c8:	e0bfff17 	ldw	r2,-4(fp)
   236cc:	00c00084 	movi	r3,2
   236d0:	10c02f15 	stw	r3,188(r2)
   236d4:	e0bfff17 	ldw	r2,-4(fp)
   236d8:	10800a17 	ldw	r2,40(r2)
   236dc:	10801404 	addi	r2,r2,80
   236e0:	1080002b 	ldhuio	r2,0(r2)
   236e4:	10bfffcc 	andi	r2,r2,65535
   236e8:	e0bffb0d 	sth	r2,-20(fp)
   236ec:	e0bffb0b 	ldhu	r2,-20(fp)
   236f0:	10800044 	addi	r2,r2,1
   236f4:	e0bffb0d 	sth	r2,-20(fp)
   236f8:	e0bffb0b 	ldhu	r2,-20(fp)
   236fc:	1080004c 	andi	r2,r2,1
   23700:	1001511e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23704:	00bffb44 	movi	r2,-19
   23708:	e0bffa15 	stw	r2,-24(fp)
   2370c:	00014e06 	br	23c48 <alt_read_cfi_width+0x758>
   23710:	e0bfff17 	ldw	r2,-4(fp)
   23714:	10800a17 	ldw	r2,40(r2)
   23718:	1009883a 	mov	r4,r2
   2371c:	01401544 	movi	r5,85
   23720:	01802604 	movi	r6,152
   23724:	0022ac40 	call	22ac4 <alt_write_flash_command_16bit_device_16bit_mode>
   23728:	e03ff915 	stw	zero,-28(fp)
   2372c:	00000f06 	br	2376c <alt_read_cfi_width+0x27c>
   23730:	e0bfff17 	ldw	r2,-4(fp)
   23734:	10c00a17 	ldw	r3,40(r2)
   23738:	e0bff917 	ldw	r2,-28(fp)
   2373c:	10800804 	addi	r2,r2,32
   23740:	1885883a 	add	r2,r3,r2
   23744:	10800023 	ldbuio	r2,0(r2)
   23748:	10803fcc 	andi	r2,r2,255
   2374c:	1007883a 	mov	r3,r2
   23750:	e13ffb84 	addi	r4,fp,-18
   23754:	e0bff917 	ldw	r2,-28(fp)
   23758:	2085883a 	add	r2,r4,r2
   2375c:	10c00005 	stb	r3,0(r2)
   23760:	e0bff917 	ldw	r2,-28(fp)
   23764:	10800044 	addi	r2,r2,1
   23768:	e0bff915 	stw	r2,-28(fp)
   2376c:	e0bff917 	ldw	r2,-28(fp)
   23770:	10800190 	cmplti	r2,r2,6
   23774:	103fee1e 	bne	r2,zero,23730 <alt_read_cfi_width+0x240>
   23778:	e0bffb83 	ldbu	r2,-18(fp)
   2377c:	10803fcc 	andi	r2,r2,255
   23780:	10801458 	cmpnei	r2,r2,81
   23784:	1000261e 	bne	r2,zero,23820 <alt_read_cfi_width+0x330>
   23788:	e0bffbc3 	ldbu	r2,-17(fp)
   2378c:	10803fcc 	andi	r2,r2,255
   23790:	1000231e 	bne	r2,zero,23820 <alt_read_cfi_width+0x330>
   23794:	e0bffc03 	ldbu	r2,-16(fp)
   23798:	10803fcc 	andi	r2,r2,255
   2379c:	10801498 	cmpnei	r2,r2,82
   237a0:	10001f1e 	bne	r2,zero,23820 <alt_read_cfi_width+0x330>
   237a4:	e0bffc43 	ldbu	r2,-15(fp)
   237a8:	10803fcc 	andi	r2,r2,255
   237ac:	10001c1e 	bne	r2,zero,23820 <alt_read_cfi_width+0x330>
   237b0:	e0bffc83 	ldbu	r2,-14(fp)
   237b4:	10803fcc 	andi	r2,r2,255
   237b8:	10801658 	cmpnei	r2,r2,89
   237bc:	1000181e 	bne	r2,zero,23820 <alt_read_cfi_width+0x330>
   237c0:	e0bffcc3 	ldbu	r2,-13(fp)
   237c4:	10803fcc 	andi	r2,r2,255
   237c8:	1000151e 	bne	r2,zero,23820 <alt_read_cfi_width+0x330>
   237cc:	e0bfff17 	ldw	r2,-4(fp)
   237d0:	00c00084 	movi	r3,2
   237d4:	10c02e15 	stw	r3,184(r2)
   237d8:	e0bfff17 	ldw	r2,-4(fp)
   237dc:	00c00084 	movi	r3,2
   237e0:	10c02f15 	stw	r3,188(r2)
   237e4:	e0bfff17 	ldw	r2,-4(fp)
   237e8:	10800a17 	ldw	r2,40(r2)
   237ec:	10801404 	addi	r2,r2,80
   237f0:	1080002b 	ldhuio	r2,0(r2)
   237f4:	10bfffcc 	andi	r2,r2,65535
   237f8:	e0bffb0d 	sth	r2,-20(fp)
   237fc:	e0bffb0b 	ldhu	r2,-20(fp)
   23800:	10800044 	addi	r2,r2,1
   23804:	e0bffb0d 	sth	r2,-20(fp)
   23808:	e0bffb0b 	ldhu	r2,-20(fp)
   2380c:	1080008c 	andi	r2,r2,2
   23810:	10010d1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23814:	00bffb44 	movi	r2,-19
   23818:	e0bffa15 	stw	r2,-24(fp)
   2381c:	00010a06 	br	23c48 <alt_read_cfi_width+0x758>
   23820:	e0bfff17 	ldw	r2,-4(fp)
   23824:	10800a17 	ldw	r2,40(r2)
   23828:	1009883a 	mov	r4,r2
   2382c:	01401544 	movi	r5,85
   23830:	01802604 	movi	r6,152
   23834:	0022b580 	call	22b58 <alt_write_flash_command_32bit_device_32bit_mode>
   23838:	e03ff915 	stw	zero,-28(fp)
   2383c:	00000f06 	br	2387c <alt_read_cfi_width+0x38c>
   23840:	e0bfff17 	ldw	r2,-4(fp)
   23844:	10c00a17 	ldw	r3,40(r2)
   23848:	e0bff917 	ldw	r2,-28(fp)
   2384c:	10801004 	addi	r2,r2,64
   23850:	1885883a 	add	r2,r3,r2
   23854:	10800023 	ldbuio	r2,0(r2)
   23858:	10803fcc 	andi	r2,r2,255
   2385c:	1007883a 	mov	r3,r2
   23860:	e13ffb84 	addi	r4,fp,-18
   23864:	e0bff917 	ldw	r2,-28(fp)
   23868:	2085883a 	add	r2,r4,r2
   2386c:	10c00005 	stb	r3,0(r2)
   23870:	e0bff917 	ldw	r2,-28(fp)
   23874:	10800044 	addi	r2,r2,1
   23878:	e0bff915 	stw	r2,-28(fp)
   2387c:	e0bff917 	ldw	r2,-28(fp)
   23880:	10800310 	cmplti	r2,r2,12
   23884:	103fee1e 	bne	r2,zero,23840 <alt_read_cfi_width+0x350>
   23888:	e0bffb83 	ldbu	r2,-18(fp)
   2388c:	10803fcc 	andi	r2,r2,255
   23890:	10801458 	cmpnei	r2,r2,81
   23894:	1000371e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   23898:	e0bffbc3 	ldbu	r2,-17(fp)
   2389c:	10803fcc 	andi	r2,r2,255
   238a0:	1000341e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238a4:	e0bffc03 	ldbu	r2,-16(fp)
   238a8:	10803fcc 	andi	r2,r2,255
   238ac:	1000311e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238b0:	e0bffc43 	ldbu	r2,-15(fp)
   238b4:	10803fcc 	andi	r2,r2,255
   238b8:	10002e1e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238bc:	e0bffc83 	ldbu	r2,-14(fp)
   238c0:	10803fcc 	andi	r2,r2,255
   238c4:	10801498 	cmpnei	r2,r2,82
   238c8:	10002a1e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238cc:	e0bffcc3 	ldbu	r2,-13(fp)
   238d0:	10803fcc 	andi	r2,r2,255
   238d4:	1000271e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238d8:	e0bffd03 	ldbu	r2,-12(fp)
   238dc:	10803fcc 	andi	r2,r2,255
   238e0:	1000241e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238e4:	e0bffd43 	ldbu	r2,-11(fp)
   238e8:	10803fcc 	andi	r2,r2,255
   238ec:	1000211e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   238f0:	e0bffd83 	ldbu	r2,-10(fp)
   238f4:	10803fcc 	andi	r2,r2,255
   238f8:	10801658 	cmpnei	r2,r2,89
   238fc:	10001d1e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   23900:	e0bffdc3 	ldbu	r2,-9(fp)
   23904:	10803fcc 	andi	r2,r2,255
   23908:	10001a1e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   2390c:	e0bffe03 	ldbu	r2,-8(fp)
   23910:	10803fcc 	andi	r2,r2,255
   23914:	1000171e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   23918:	e0bffe43 	ldbu	r2,-7(fp)
   2391c:	10803fcc 	andi	r2,r2,255
   23920:	1000141e 	bne	r2,zero,23974 <alt_read_cfi_width+0x484>
   23924:	e0bfff17 	ldw	r2,-4(fp)
   23928:	00c00104 	movi	r3,4
   2392c:	10c02e15 	stw	r3,184(r2)
   23930:	e0bfff17 	ldw	r2,-4(fp)
   23934:	00c00104 	movi	r3,4
   23938:	10c02f15 	stw	r3,188(r2)
   2393c:	e0bfff17 	ldw	r2,-4(fp)
   23940:	10800a17 	ldw	r2,40(r2)
   23944:	10802804 	addi	r2,r2,160
   23948:	10800037 	ldwio	r2,0(r2)
   2394c:	e0bffb0d 	sth	r2,-20(fp)
   23950:	e0bffb0b 	ldhu	r2,-20(fp)
   23954:	10800044 	addi	r2,r2,1
   23958:	e0bffb0d 	sth	r2,-20(fp)
   2395c:	e0bffb0b 	ldhu	r2,-20(fp)
   23960:	1080010c 	andi	r2,r2,4
   23964:	1000b81e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23968:	00bffb44 	movi	r2,-19
   2396c:	e0bffa15 	stw	r2,-24(fp)
   23970:	0000b506 	br	23c48 <alt_read_cfi_width+0x758>
   23974:	e0bfff17 	ldw	r2,-4(fp)
   23978:	10800a17 	ldw	r2,40(r2)
   2397c:	1009883a 	mov	r4,r2
   23980:	01401544 	movi	r5,85
   23984:	01802604 	movi	r6,152
   23988:	0022b0c0 	call	22b0c <alt_write_flash_command_32bit_device_16bit_mode>
   2398c:	e03ff915 	stw	zero,-28(fp)
   23990:	00000f06 	br	239d0 <alt_read_cfi_width+0x4e0>
   23994:	e0bfff17 	ldw	r2,-4(fp)
   23998:	10c00a17 	ldw	r3,40(r2)
   2399c:	e0bff917 	ldw	r2,-28(fp)
   239a0:	10801004 	addi	r2,r2,64
   239a4:	1885883a 	add	r2,r3,r2
   239a8:	10800023 	ldbuio	r2,0(r2)
   239ac:	10803fcc 	andi	r2,r2,255
   239b0:	1007883a 	mov	r3,r2
   239b4:	e13ffb84 	addi	r4,fp,-18
   239b8:	e0bff917 	ldw	r2,-28(fp)
   239bc:	2085883a 	add	r2,r4,r2
   239c0:	10c00005 	stb	r3,0(r2)
   239c4:	e0bff917 	ldw	r2,-28(fp)
   239c8:	10800044 	addi	r2,r2,1
   239cc:	e0bff915 	stw	r2,-28(fp)
   239d0:	e0bff917 	ldw	r2,-28(fp)
   239d4:	10800310 	cmplti	r2,r2,12
   239d8:	103fee1e 	bne	r2,zero,23994 <alt_read_cfi_width+0x4a4>
   239dc:	e0bffb83 	ldbu	r2,-18(fp)
   239e0:	10803fcc 	andi	r2,r2,255
   239e4:	10801458 	cmpnei	r2,r2,81
   239e8:	10003a1e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   239ec:	e0bffbc3 	ldbu	r2,-17(fp)
   239f0:	10803fcc 	andi	r2,r2,255
   239f4:	1000371e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   239f8:	e0bffc03 	ldbu	r2,-16(fp)
   239fc:	10803fcc 	andi	r2,r2,255
   23a00:	10801458 	cmpnei	r2,r2,81
   23a04:	1000331e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a08:	e0bffc43 	ldbu	r2,-15(fp)
   23a0c:	10803fcc 	andi	r2,r2,255
   23a10:	1000301e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a14:	e0bffc83 	ldbu	r2,-14(fp)
   23a18:	10803fcc 	andi	r2,r2,255
   23a1c:	10801498 	cmpnei	r2,r2,82
   23a20:	10002c1e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a24:	e0bffcc3 	ldbu	r2,-13(fp)
   23a28:	10803fcc 	andi	r2,r2,255
   23a2c:	1000291e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a30:	e0bffd03 	ldbu	r2,-12(fp)
   23a34:	10803fcc 	andi	r2,r2,255
   23a38:	10801498 	cmpnei	r2,r2,82
   23a3c:	1000251e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a40:	e0bffd43 	ldbu	r2,-11(fp)
   23a44:	10803fcc 	andi	r2,r2,255
   23a48:	1000221e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a4c:	e0bffd83 	ldbu	r2,-10(fp)
   23a50:	10803fcc 	andi	r2,r2,255
   23a54:	10801658 	cmpnei	r2,r2,89
   23a58:	10001e1e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a5c:	e0bffdc3 	ldbu	r2,-9(fp)
   23a60:	10803fcc 	andi	r2,r2,255
   23a64:	10001b1e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a68:	e0bffe03 	ldbu	r2,-8(fp)
   23a6c:	10803fcc 	andi	r2,r2,255
   23a70:	10801658 	cmpnei	r2,r2,89
   23a74:	1000171e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a78:	e0bffe43 	ldbu	r2,-7(fp)
   23a7c:	10803fcc 	andi	r2,r2,255
   23a80:	1000141e 	bne	r2,zero,23ad4 <alt_read_cfi_width+0x5e4>
   23a84:	e0bfff17 	ldw	r2,-4(fp)
   23a88:	00c00084 	movi	r3,2
   23a8c:	10c02e15 	stw	r3,184(r2)
   23a90:	e0bfff17 	ldw	r2,-4(fp)
   23a94:	00c00104 	movi	r3,4
   23a98:	10c02f15 	stw	r3,188(r2)
   23a9c:	e0bfff17 	ldw	r2,-4(fp)
   23aa0:	10800a17 	ldw	r2,40(r2)
   23aa4:	10802804 	addi	r2,r2,160
   23aa8:	10800037 	ldwio	r2,0(r2)
   23aac:	e0bffb0d 	sth	r2,-20(fp)
   23ab0:	e0bffb0b 	ldhu	r2,-20(fp)
   23ab4:	10800044 	addi	r2,r2,1
   23ab8:	e0bffb0d 	sth	r2,-20(fp)
   23abc:	e0bffb0b 	ldhu	r2,-20(fp)
   23ac0:	1080010c 	andi	r2,r2,4
   23ac4:	1000601e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23ac8:	00bffb44 	movi	r2,-19
   23acc:	e0bffa15 	stw	r2,-24(fp)
   23ad0:	00005d06 	br	23c48 <alt_read_cfi_width+0x758>
   23ad4:	e0bfff17 	ldw	r2,-4(fp)
   23ad8:	10800a17 	ldw	r2,40(r2)
   23adc:	1009883a 	mov	r4,r2
   23ae0:	01401544 	movi	r5,85
   23ae4:	01802604 	movi	r6,152
   23ae8:	0022a780 	call	22a78 <alt_write_flash_command_32bit_device_8bit_mode>
   23aec:	e03ff915 	stw	zero,-28(fp)
   23af0:	00000f06 	br	23b30 <alt_read_cfi_width+0x640>
   23af4:	e0bfff17 	ldw	r2,-4(fp)
   23af8:	10c00a17 	ldw	r3,40(r2)
   23afc:	e0bff917 	ldw	r2,-28(fp)
   23b00:	10801004 	addi	r2,r2,64
   23b04:	1885883a 	add	r2,r3,r2
   23b08:	10800023 	ldbuio	r2,0(r2)
   23b0c:	10803fcc 	andi	r2,r2,255
   23b10:	1007883a 	mov	r3,r2
   23b14:	e13ffb84 	addi	r4,fp,-18
   23b18:	e0bff917 	ldw	r2,-28(fp)
   23b1c:	2085883a 	add	r2,r4,r2
   23b20:	10c00005 	stb	r3,0(r2)
   23b24:	e0bff917 	ldw	r2,-28(fp)
   23b28:	10800044 	addi	r2,r2,1
   23b2c:	e0bff915 	stw	r2,-28(fp)
   23b30:	e0bff917 	ldw	r2,-28(fp)
   23b34:	10800310 	cmplti	r2,r2,12
   23b38:	103fee1e 	bne	r2,zero,23af4 <alt_read_cfi_width+0x604>
   23b3c:	e0bffb83 	ldbu	r2,-18(fp)
   23b40:	10803fcc 	andi	r2,r2,255
   23b44:	10801458 	cmpnei	r2,r2,81
   23b48:	10003f1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23b4c:	e0bffbc3 	ldbu	r2,-17(fp)
   23b50:	10803fcc 	andi	r2,r2,255
   23b54:	10801458 	cmpnei	r2,r2,81
   23b58:	10003b1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23b5c:	e0bffc03 	ldbu	r2,-16(fp)
   23b60:	10803fcc 	andi	r2,r2,255
   23b64:	10801458 	cmpnei	r2,r2,81
   23b68:	1000371e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23b6c:	e0bffc43 	ldbu	r2,-15(fp)
   23b70:	10803fcc 	andi	r2,r2,255
   23b74:	10801458 	cmpnei	r2,r2,81
   23b78:	1000331e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23b7c:	e0bffc83 	ldbu	r2,-14(fp)
   23b80:	10803fcc 	andi	r2,r2,255
   23b84:	10801498 	cmpnei	r2,r2,82
   23b88:	10002f1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23b8c:	e0bffcc3 	ldbu	r2,-13(fp)
   23b90:	10803fcc 	andi	r2,r2,255
   23b94:	10801498 	cmpnei	r2,r2,82
   23b98:	10002b1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23b9c:	e0bffd03 	ldbu	r2,-12(fp)
   23ba0:	10803fcc 	andi	r2,r2,255
   23ba4:	10801498 	cmpnei	r2,r2,82
   23ba8:	1000271e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23bac:	e0bffd43 	ldbu	r2,-11(fp)
   23bb0:	10803fcc 	andi	r2,r2,255
   23bb4:	10801498 	cmpnei	r2,r2,82
   23bb8:	1000231e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23bbc:	e0bffd83 	ldbu	r2,-10(fp)
   23bc0:	10803fcc 	andi	r2,r2,255
   23bc4:	10801658 	cmpnei	r2,r2,89
   23bc8:	10001f1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23bcc:	e0bffdc3 	ldbu	r2,-9(fp)
   23bd0:	10803fcc 	andi	r2,r2,255
   23bd4:	10801658 	cmpnei	r2,r2,89
   23bd8:	10001b1e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23bdc:	e0bffe03 	ldbu	r2,-8(fp)
   23be0:	10803fcc 	andi	r2,r2,255
   23be4:	10801658 	cmpnei	r2,r2,89
   23be8:	1000171e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23bec:	e0bffe43 	ldbu	r2,-7(fp)
   23bf0:	10803fcc 	andi	r2,r2,255
   23bf4:	10801658 	cmpnei	r2,r2,89
   23bf8:	1000131e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23bfc:	e0bfff17 	ldw	r2,-4(fp)
   23c00:	00c00044 	movi	r3,1
   23c04:	10c02e15 	stw	r3,184(r2)
   23c08:	e0bfff17 	ldw	r2,-4(fp)
   23c0c:	00c00104 	movi	r3,4
   23c10:	10c02f15 	stw	r3,188(r2)
   23c14:	e0bfff17 	ldw	r2,-4(fp)
   23c18:	10800a17 	ldw	r2,40(r2)
   23c1c:	10802804 	addi	r2,r2,160
   23c20:	10800037 	ldwio	r2,0(r2)
   23c24:	e0bffb0d 	sth	r2,-20(fp)
   23c28:	e0bffb0b 	ldhu	r2,-20(fp)
   23c2c:	10800044 	addi	r2,r2,1
   23c30:	e0bffb0d 	sth	r2,-20(fp)
   23c34:	e0bffb0b 	ldhu	r2,-20(fp)
   23c38:	1080010c 	andi	r2,r2,4
   23c3c:	1000021e 	bne	r2,zero,23c48 <alt_read_cfi_width+0x758>
   23c40:	00bffb44 	movi	r2,-19
   23c44:	e0bffa15 	stw	r2,-24(fp)
   23c48:	e0bffa17 	ldw	r2,-24(fp)
   23c4c:	e037883a 	mov	sp,fp
   23c50:	dfc00117 	ldw	ra,4(sp)
   23c54:	df000017 	ldw	fp,0(sp)
   23c58:	dec00204 	addi	sp,sp,8
   23c5c:	f800283a 	ret

00023c60 <alt_check_primary_table>:
   23c60:	defffa04 	addi	sp,sp,-24
   23c64:	dfc00515 	stw	ra,20(sp)
   23c68:	df000415 	stw	fp,16(sp)
   23c6c:	df000404 	addi	fp,sp,16
   23c70:	e13fff15 	stw	r4,-4(fp)
   23c74:	e03ffd15 	stw	zero,-12(fp)
   23c78:	e13fff17 	ldw	r4,-4(fp)
   23c7c:	01400544 	movi	r5,21
   23c80:	0022ea80 	call	22ea8 <alt_read_16bit_query_entry>
   23c84:	10ffffcc 	andi	r3,r2,65535
   23c88:	e0bfff17 	ldw	r2,-4(fp)
   23c8c:	10c03215 	stw	r3,200(r2)
   23c90:	e03ffc15 	stw	zero,-16(fp)
   23c94:	00001006 	br	23cd8 <alt_check_primary_table+0x78>
   23c98:	e0bfff17 	ldw	r2,-4(fp)
   23c9c:	10c03417 	ldw	r3,208(r2)
   23ca0:	e0bfff17 	ldw	r2,-4(fp)
   23ca4:	11003217 	ldw	r4,200(r2)
   23ca8:	e0bffc17 	ldw	r2,-16(fp)
   23cac:	2085883a 	add	r2,r4,r2
   23cb0:	e13fff17 	ldw	r4,-4(fp)
   23cb4:	100b883a 	mov	r5,r2
   23cb8:	183ee83a 	callr	r3
   23cbc:	e13ffe04 	addi	r4,fp,-8
   23cc0:	e0fffc17 	ldw	r3,-16(fp)
   23cc4:	20c7883a 	add	r3,r4,r3
   23cc8:	18800005 	stb	r2,0(r3)
   23ccc:	e0bffc17 	ldw	r2,-16(fp)
   23cd0:	10800044 	addi	r2,r2,1
   23cd4:	e0bffc15 	stw	r2,-16(fp)
   23cd8:	e0bffc17 	ldw	r2,-16(fp)
   23cdc:	108000d0 	cmplti	r2,r2,3
   23ce0:	103fed1e 	bne	r2,zero,23c98 <alt_check_primary_table+0x38>
   23ce4:	e0bffe03 	ldbu	r2,-8(fp)
   23ce8:	10803fcc 	andi	r2,r2,255
   23cec:	10801418 	cmpnei	r2,r2,80
   23cf0:	1000081e 	bne	r2,zero,23d14 <alt_check_primary_table+0xb4>
   23cf4:	e0bffe43 	ldbu	r2,-7(fp)
   23cf8:	10803fcc 	andi	r2,r2,255
   23cfc:	10801498 	cmpnei	r2,r2,82
   23d00:	1000041e 	bne	r2,zero,23d14 <alt_check_primary_table+0xb4>
   23d04:	e0bffe83 	ldbu	r2,-6(fp)
   23d08:	10803fcc 	andi	r2,r2,255
   23d0c:	10801260 	cmpeqi	r2,r2,73
   23d10:	1000021e 	bne	r2,zero,23d1c <alt_check_primary_table+0xbc>
   23d14:	00bffb44 	movi	r2,-19
   23d18:	e0bffd15 	stw	r2,-12(fp)
   23d1c:	e0bffd17 	ldw	r2,-12(fp)
   23d20:	e037883a 	mov	sp,fp
   23d24:	dfc00117 	ldw	ra,4(sp)
   23d28:	df000017 	ldw	fp,0(sp)
   23d2c:	dec00204 	addi	sp,sp,8
   23d30:	f800283a 	ret

00023d34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23d34:	defffa04 	addi	sp,sp,-24
   23d38:	dfc00515 	stw	ra,20(sp)
   23d3c:	df000415 	stw	fp,16(sp)
   23d40:	df000404 	addi	fp,sp,16
   23d44:	e13ffd15 	stw	r4,-12(fp)
   23d48:	e17ffe15 	stw	r5,-8(fp)
   23d4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23d50:	e0bffd17 	ldw	r2,-12(fp)
   23d54:	10800017 	ldw	r2,0(r2)
   23d58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23d5c:	e0bffc17 	ldw	r2,-16(fp)
   23d60:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   23d64:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23d68:	10800217 	ldw	r2,8(r2)
   23d6c:	1809883a 	mov	r4,r3
   23d70:	e17ffe17 	ldw	r5,-8(fp)
   23d74:	e1bfff17 	ldw	r6,-4(fp)
   23d78:	100f883a 	mov	r7,r2
   23d7c:	002435c0 	call	2435c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23d80:	e037883a 	mov	sp,fp
   23d84:	dfc00117 	ldw	ra,4(sp)
   23d88:	df000017 	ldw	fp,0(sp)
   23d8c:	dec00204 	addi	sp,sp,8
   23d90:	f800283a 	ret

00023d94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23d94:	defffa04 	addi	sp,sp,-24
   23d98:	dfc00515 	stw	ra,20(sp)
   23d9c:	df000415 	stw	fp,16(sp)
   23da0:	df000404 	addi	fp,sp,16
   23da4:	e13ffd15 	stw	r4,-12(fp)
   23da8:	e17ffe15 	stw	r5,-8(fp)
   23dac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23db0:	e0bffd17 	ldw	r2,-12(fp)
   23db4:	10800017 	ldw	r2,0(r2)
   23db8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23dbc:	e0bffc17 	ldw	r2,-16(fp)
   23dc0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   23dc4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23dc8:	10800217 	ldw	r2,8(r2)
   23dcc:	1809883a 	mov	r4,r3
   23dd0:	e17ffe17 	ldw	r5,-8(fp)
   23dd4:	e1bfff17 	ldw	r6,-4(fp)
   23dd8:	100f883a 	mov	r7,r2
   23ddc:	00245a00 	call	245a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23de0:	e037883a 	mov	sp,fp
   23de4:	dfc00117 	ldw	ra,4(sp)
   23de8:	df000017 	ldw	fp,0(sp)
   23dec:	dec00204 	addi	sp,sp,8
   23df0:	f800283a 	ret

00023df4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23df4:	defffc04 	addi	sp,sp,-16
   23df8:	dfc00315 	stw	ra,12(sp)
   23dfc:	df000215 	stw	fp,8(sp)
   23e00:	df000204 	addi	fp,sp,8
   23e04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e08:	e0bfff17 	ldw	r2,-4(fp)
   23e0c:	10800017 	ldw	r2,0(r2)
   23e10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23e14:	e0bffe17 	ldw	r2,-8(fp)
   23e18:	10c00a04 	addi	r3,r2,40
   23e1c:	e0bfff17 	ldw	r2,-4(fp)
   23e20:	10800217 	ldw	r2,8(r2)
   23e24:	1809883a 	mov	r4,r3
   23e28:	100b883a 	mov	r5,r2
   23e2c:	00242000 	call	24200 <altera_avalon_jtag_uart_close>
}
   23e30:	e037883a 	mov	sp,fp
   23e34:	dfc00117 	ldw	ra,4(sp)
   23e38:	df000017 	ldw	fp,0(sp)
   23e3c:	dec00204 	addi	sp,sp,8
   23e40:	f800283a 	ret

00023e44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23e44:	defffa04 	addi	sp,sp,-24
   23e48:	dfc00515 	stw	ra,20(sp)
   23e4c:	df000415 	stw	fp,16(sp)
   23e50:	df000404 	addi	fp,sp,16
   23e54:	e13ffd15 	stw	r4,-12(fp)
   23e58:	e17ffe15 	stw	r5,-8(fp)
   23e5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23e60:	e0bffd17 	ldw	r2,-12(fp)
   23e64:	10800017 	ldw	r2,0(r2)
   23e68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23e6c:	e0bffc17 	ldw	r2,-16(fp)
   23e70:	10800a04 	addi	r2,r2,40
   23e74:	1009883a 	mov	r4,r2
   23e78:	e17ffe17 	ldw	r5,-8(fp)
   23e7c:	e1bfff17 	ldw	r6,-4(fp)
   23e80:	00242680 	call	24268 <altera_avalon_jtag_uart_ioctl>
}
   23e84:	e037883a 	mov	sp,fp
   23e88:	dfc00117 	ldw	ra,4(sp)
   23e8c:	df000017 	ldw	fp,0(sp)
   23e90:	dec00204 	addi	sp,sp,8
   23e94:	f800283a 	ret

00023e98 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23e98:	defffa04 	addi	sp,sp,-24
   23e9c:	dfc00515 	stw	ra,20(sp)
   23ea0:	df000415 	stw	fp,16(sp)
   23ea4:	df000404 	addi	fp,sp,16
   23ea8:	e13ffd15 	stw	r4,-12(fp)
   23eac:	e17ffe15 	stw	r5,-8(fp)
   23eb0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23eb4:	e0bffd17 	ldw	r2,-12(fp)
   23eb8:	00c00044 	movi	r3,1
   23ebc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23ec0:	e0bffd17 	ldw	r2,-12(fp)
   23ec4:	10800017 	ldw	r2,0(r2)
   23ec8:	10800104 	addi	r2,r2,4
   23ecc:	e0fffd17 	ldw	r3,-12(fp)
   23ed0:	18c00817 	ldw	r3,32(r3)
   23ed4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   23ed8:	e0fffe17 	ldw	r3,-8(fp)
   23edc:	e0bfff17 	ldw	r2,-4(fp)
   23ee0:	d8000015 	stw	zero,0(sp)
   23ee4:	1809883a 	mov	r4,r3
   23ee8:	100b883a 	mov	r5,r2
   23eec:	018000b4 	movhi	r6,2
   23ef0:	318fd604 	addi	r6,r6,16216
   23ef4:	e1fffd17 	ldw	r7,-12(fp)
   23ef8:	002c1f80 	call	2c1f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23efc:	e0bffd17 	ldw	r2,-12(fp)
   23f00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23f04:	e0bffd17 	ldw	r2,-12(fp)
   23f08:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23f0c:	008000f4 	movhi	r2,3
   23f10:	109bfe04 	addi	r2,r2,28664
   23f14:	10800017 	ldw	r2,0(r2)
   23f18:	1809883a 	mov	r4,r3
   23f1c:	100b883a 	mov	r5,r2
   23f20:	018000b4 	movhi	r6,2
   23f24:	31905704 	addi	r6,r6,16732
   23f28:	e1fffd17 	ldw	r7,-12(fp)
   23f2c:	00211140 	call	21114 <alt_alarm_start>
   23f30:	1000040e 	bge	r2,zero,23f44 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23f34:	e0bffd17 	ldw	r2,-12(fp)
   23f38:	00e00034 	movhi	r3,32768
   23f3c:	18ffffc4 	addi	r3,r3,-1
   23f40:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23f44:	e037883a 	mov	sp,fp
   23f48:	dfc00117 	ldw	ra,4(sp)
   23f4c:	df000017 	ldw	fp,0(sp)
   23f50:	dec00204 	addi	sp,sp,8
   23f54:	f800283a 	ret

00023f58 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23f58:	defff804 	addi	sp,sp,-32
   23f5c:	df000715 	stw	fp,28(sp)
   23f60:	df000704 	addi	fp,sp,28
   23f64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23f68:	e0bfff17 	ldw	r2,-4(fp)
   23f6c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   23f70:	e0bffb17 	ldw	r2,-20(fp)
   23f74:	10800017 	ldw	r2,0(r2)
   23f78:	e0bffc15 	stw	r2,-16(fp)
   23f7c:	00000106 	br	23f84 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   23f80:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23f84:	e0bffc17 	ldw	r2,-16(fp)
   23f88:	10800104 	addi	r2,r2,4
   23f8c:	10800037 	ldwio	r2,0(r2)
   23f90:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23f94:	e0bffd17 	ldw	r2,-12(fp)
   23f98:	1080c00c 	andi	r2,r2,768
   23f9c:	10006a26 	beq	r2,zero,24148 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23fa0:	e0bffd17 	ldw	r2,-12(fp)
   23fa4:	1080400c 	andi	r2,r2,256
   23fa8:	10003326 	beq	r2,zero,24078 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23fac:	00800074 	movhi	r2,1
   23fb0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23fb4:	e0bffb17 	ldw	r2,-20(fp)
   23fb8:	10800a17 	ldw	r2,40(r2)
   23fbc:	10800044 	addi	r2,r2,1
   23fc0:	1081ffcc 	andi	r2,r2,2047
   23fc4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   23fc8:	e0bffb17 	ldw	r2,-20(fp)
   23fcc:	10c00b17 	ldw	r3,44(r2)
   23fd0:	e0bffe17 	ldw	r2,-8(fp)
   23fd4:	18801426 	beq	r3,r2,24028 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23fd8:	e0bffc17 	ldw	r2,-16(fp)
   23fdc:	10800037 	ldwio	r2,0(r2)
   23fe0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23fe4:	e0bff917 	ldw	r2,-28(fp)
   23fe8:	10a0000c 	andi	r2,r2,32768
   23fec:	10001026 	beq	r2,zero,24030 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23ff0:	e0bffb17 	ldw	r2,-20(fp)
   23ff4:	10800a17 	ldw	r2,40(r2)
   23ff8:	e0fff917 	ldw	r3,-28(fp)
   23ffc:	e13ffb17 	ldw	r4,-20(fp)
   24000:	2085883a 	add	r2,r4,r2
   24004:	10800e04 	addi	r2,r2,56
   24008:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2400c:	e0bffb17 	ldw	r2,-20(fp)
   24010:	10800a17 	ldw	r2,40(r2)
   24014:	10800044 	addi	r2,r2,1
   24018:	10c1ffcc 	andi	r3,r2,2047
   2401c:	e0bffb17 	ldw	r2,-20(fp)
   24020:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   24024:	003fe306 	br	23fb4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   24028:	0001883a 	nop
   2402c:	00000106 	br	24034 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   24030:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   24034:	e0bff917 	ldw	r2,-28(fp)
   24038:	10bfffec 	andhi	r2,r2,65535
   2403c:	10000e26 	beq	r2,zero,24078 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24040:	e0bffb17 	ldw	r2,-20(fp)
   24044:	10c00817 	ldw	r3,32(r2)
   24048:	00bfff84 	movi	r2,-2
   2404c:	1886703a 	and	r3,r3,r2
   24050:	e0bffb17 	ldw	r2,-20(fp)
   24054:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   24058:	e0bffc17 	ldw	r2,-16(fp)
   2405c:	10800104 	addi	r2,r2,4
   24060:	e0fffb17 	ldw	r3,-20(fp)
   24064:	18c00817 	ldw	r3,32(r3)
   24068:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2406c:	e0bffc17 	ldw	r2,-16(fp)
   24070:	10800104 	addi	r2,r2,4
   24074:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   24078:	e0bffd17 	ldw	r2,-12(fp)
   2407c:	1080800c 	andi	r2,r2,512
   24080:	103fbf26 	beq	r2,zero,23f80 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24084:	e0bffd17 	ldw	r2,-12(fp)
   24088:	1004d43a 	srli	r2,r2,16
   2408c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24090:	00001406 	br	240e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24094:	e0bffc17 	ldw	r2,-16(fp)
   24098:	e0fffb17 	ldw	r3,-20(fp)
   2409c:	18c00d17 	ldw	r3,52(r3)
   240a0:	e13ffb17 	ldw	r4,-20(fp)
   240a4:	20c7883a 	add	r3,r4,r3
   240a8:	18c20e04 	addi	r3,r3,2104
   240ac:	18c00003 	ldbu	r3,0(r3)
   240b0:	18c03fcc 	andi	r3,r3,255
   240b4:	18c0201c 	xori	r3,r3,128
   240b8:	18ffe004 	addi	r3,r3,-128
   240bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   240c0:	e0bffb17 	ldw	r2,-20(fp)
   240c4:	10800d17 	ldw	r2,52(r2)
   240c8:	10800044 	addi	r2,r2,1
   240cc:	10c1ffcc 	andi	r3,r2,2047
   240d0:	e0bffb17 	ldw	r2,-20(fp)
   240d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   240d8:	e0bffa17 	ldw	r2,-24(fp)
   240dc:	10bfffc4 	addi	r2,r2,-1
   240e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   240e4:	e0bffa17 	ldw	r2,-24(fp)
   240e8:	10000526 	beq	r2,zero,24100 <altera_avalon_jtag_uart_irq+0x1a8>
   240ec:	e0bffb17 	ldw	r2,-20(fp)
   240f0:	10c00d17 	ldw	r3,52(r2)
   240f4:	e0bffb17 	ldw	r2,-20(fp)
   240f8:	10800c17 	ldw	r2,48(r2)
   240fc:	18bfe51e 	bne	r3,r2,24094 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   24100:	e0bffa17 	ldw	r2,-24(fp)
   24104:	103f9e26 	beq	r2,zero,23f80 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24108:	e0bffb17 	ldw	r2,-20(fp)
   2410c:	10c00817 	ldw	r3,32(r2)
   24110:	00bfff44 	movi	r2,-3
   24114:	1886703a 	and	r3,r3,r2
   24118:	e0bffb17 	ldw	r2,-20(fp)
   2411c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24120:	e0bffb17 	ldw	r2,-20(fp)
   24124:	10800017 	ldw	r2,0(r2)
   24128:	10800104 	addi	r2,r2,4
   2412c:	e0fffb17 	ldw	r3,-20(fp)
   24130:	18c00817 	ldw	r3,32(r3)
   24134:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24138:	e0bffc17 	ldw	r2,-16(fp)
   2413c:	10800104 	addi	r2,r2,4
   24140:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   24144:	003f8e06 	br	23f80 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   24148:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2414c:	e037883a 	mov	sp,fp
   24150:	df000017 	ldw	fp,0(sp)
   24154:	dec00104 	addi	sp,sp,4
   24158:	f800283a 	ret

0002415c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2415c:	defffc04 	addi	sp,sp,-16
   24160:	df000315 	stw	fp,12(sp)
   24164:	df000304 	addi	fp,sp,12
   24168:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2416c:	e0bfff17 	ldw	r2,-4(fp)
   24170:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24174:	e0bffd17 	ldw	r2,-12(fp)
   24178:	10800017 	ldw	r2,0(r2)
   2417c:	10800104 	addi	r2,r2,4
   24180:	10800037 	ldwio	r2,0(r2)
   24184:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24188:	e0bffe17 	ldw	r2,-8(fp)
   2418c:	1081000c 	andi	r2,r2,1024
   24190:	10000a26 	beq	r2,zero,241bc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24194:	e0bffd17 	ldw	r2,-12(fp)
   24198:	10800017 	ldw	r2,0(r2)
   2419c:	10800104 	addi	r2,r2,4
   241a0:	e0fffd17 	ldw	r3,-12(fp)
   241a4:	18c00817 	ldw	r3,32(r3)
   241a8:	18c10014 	ori	r3,r3,1024
   241ac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   241b0:	e0bffd17 	ldw	r2,-12(fp)
   241b4:	10000915 	stw	zero,36(r2)
   241b8:	00000a06 	br	241e4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   241bc:	e0bffd17 	ldw	r2,-12(fp)
   241c0:	10800917 	ldw	r2,36(r2)
   241c4:	00e00034 	movhi	r3,32768
   241c8:	18ffff04 	addi	r3,r3,-4
   241cc:	18800536 	bltu	r3,r2,241e4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   241d0:	e0bffd17 	ldw	r2,-12(fp)
   241d4:	10800917 	ldw	r2,36(r2)
   241d8:	10c00044 	addi	r3,r2,1
   241dc:	e0bffd17 	ldw	r2,-12(fp)
   241e0:	10c00915 	stw	r3,36(r2)
   241e4:	008000f4 	movhi	r2,3
   241e8:	109bfe04 	addi	r2,r2,28664
   241ec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   241f0:	e037883a 	mov	sp,fp
   241f4:	df000017 	ldw	fp,0(sp)
   241f8:	dec00104 	addi	sp,sp,4
   241fc:	f800283a 	ret

00024200 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24200:	defffd04 	addi	sp,sp,-12
   24204:	df000215 	stw	fp,8(sp)
   24208:	df000204 	addi	fp,sp,8
   2420c:	e13ffe15 	stw	r4,-8(fp)
   24210:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24214:	00000506 	br	2422c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24218:	e0bfff17 	ldw	r2,-4(fp)
   2421c:	1090000c 	andi	r2,r2,16384
   24220:	10000226 	beq	r2,zero,2422c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24224:	00bffd44 	movi	r2,-11
   24228:	00000b06 	br	24258 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2422c:	e0bffe17 	ldw	r2,-8(fp)
   24230:	10c00d17 	ldw	r3,52(r2)
   24234:	e0bffe17 	ldw	r2,-8(fp)
   24238:	10800c17 	ldw	r2,48(r2)
   2423c:	18800526 	beq	r3,r2,24254 <altera_avalon_jtag_uart_close+0x54>
   24240:	e0bffe17 	ldw	r2,-8(fp)
   24244:	10c00917 	ldw	r3,36(r2)
   24248:	e0bffe17 	ldw	r2,-8(fp)
   2424c:	10800117 	ldw	r2,4(r2)
   24250:	18bff136 	bltu	r3,r2,24218 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   24254:	0005883a 	mov	r2,zero
}
   24258:	e037883a 	mov	sp,fp
   2425c:	df000017 	ldw	fp,0(sp)
   24260:	dec00104 	addi	sp,sp,4
   24264:	f800283a 	ret

00024268 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24268:	defffa04 	addi	sp,sp,-24
   2426c:	df000515 	stw	fp,20(sp)
   24270:	df000504 	addi	fp,sp,20
   24274:	e13ffd15 	stw	r4,-12(fp)
   24278:	e17ffe15 	stw	r5,-8(fp)
   2427c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   24280:	00bff9c4 	movi	r2,-25
   24284:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24288:	e0bffe17 	ldw	r2,-8(fp)
   2428c:	10da8060 	cmpeqi	r3,r2,27137
   24290:	1800031e 	bne	r3,zero,242a0 <altera_avalon_jtag_uart_ioctl+0x38>
   24294:	109a80a0 	cmpeqi	r2,r2,27138
   24298:	1000181e 	bne	r2,zero,242fc <altera_avalon_jtag_uart_ioctl+0x94>
   2429c:	00002606 	br	24338 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   242a0:	e0bffd17 	ldw	r2,-12(fp)
   242a4:	10c00117 	ldw	r3,4(r2)
   242a8:	00a00034 	movhi	r2,32768
   242ac:	10bfffc4 	addi	r2,r2,-1
   242b0:	18802226 	beq	r3,r2,2433c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   242b4:	e0bfff17 	ldw	r2,-4(fp)
   242b8:	10800017 	ldw	r2,0(r2)
   242bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   242c0:	e0bffc17 	ldw	r2,-16(fp)
   242c4:	10800090 	cmplti	r2,r2,2
   242c8:	1000061e 	bne	r2,zero,242e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   242cc:	e0fffc17 	ldw	r3,-16(fp)
   242d0:	00a00034 	movhi	r2,32768
   242d4:	10bfffc4 	addi	r2,r2,-1
   242d8:	18800226 	beq	r3,r2,242e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   242dc:	e0bffc17 	ldw	r2,-16(fp)
   242e0:	00000206 	br	242ec <altera_avalon_jtag_uart_ioctl+0x84>
   242e4:	00a00034 	movhi	r2,32768
   242e8:	10bfff84 	addi	r2,r2,-2
   242ec:	e0fffd17 	ldw	r3,-12(fp)
   242f0:	18800115 	stw	r2,4(r3)
      rc = 0;
   242f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   242f8:	00001006 	br	2433c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   242fc:	e0bffd17 	ldw	r2,-12(fp)
   24300:	10c00117 	ldw	r3,4(r2)
   24304:	00a00034 	movhi	r2,32768
   24308:	10bfffc4 	addi	r2,r2,-1
   2430c:	18800d26 	beq	r3,r2,24344 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24310:	e0bffd17 	ldw	r2,-12(fp)
   24314:	10c00917 	ldw	r3,36(r2)
   24318:	e0bffd17 	ldw	r2,-12(fp)
   2431c:	10800117 	ldw	r2,4(r2)
   24320:	1885803a 	cmpltu	r2,r3,r2
   24324:	10c03fcc 	andi	r3,r2,255
   24328:	e0bfff17 	ldw	r2,-4(fp)
   2432c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24330:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24334:	00000306 	br	24344 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   24338:	00000306 	br	24348 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2433c:	0001883a 	nop
   24340:	00000106 	br	24348 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   24344:	0001883a 	nop

  default:
    break;
  }

  return rc;
   24348:	e0bffb17 	ldw	r2,-20(fp)
}
   2434c:	e037883a 	mov	sp,fp
   24350:	df000017 	ldw	fp,0(sp)
   24354:	dec00104 	addi	sp,sp,4
   24358:	f800283a 	ret

0002435c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2435c:	defff204 	addi	sp,sp,-56
   24360:	dfc00d15 	stw	ra,52(sp)
   24364:	df000c15 	stw	fp,48(sp)
   24368:	df000c04 	addi	fp,sp,48
   2436c:	e13ffc15 	stw	r4,-16(fp)
   24370:	e17ffd15 	stw	r5,-12(fp)
   24374:	e1bffe15 	stw	r6,-8(fp)
   24378:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2437c:	e0bffd17 	ldw	r2,-12(fp)
   24380:	e0bff415 	stw	r2,-48(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24384:	00004706 	br	244a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24388:	e0bffc17 	ldw	r2,-16(fp)
   2438c:	10800a17 	ldw	r2,40(r2)
   24390:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   24394:	e0bffc17 	ldw	r2,-16(fp)
   24398:	10800b17 	ldw	r2,44(r2)
   2439c:	e0bff715 	stw	r2,-36(fp)

      if (in >= out)
   243a0:	e0fff617 	ldw	r3,-40(fp)
   243a4:	e0bff717 	ldw	r2,-36(fp)
   243a8:	18800536 	bltu	r3,r2,243c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   243ac:	e0fff617 	ldw	r3,-40(fp)
   243b0:	e0bff717 	ldw	r2,-36(fp)
   243b4:	1885c83a 	sub	r2,r3,r2
   243b8:	e0bff515 	stw	r2,-44(fp)
   243bc:	00000406 	br	243d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   243c0:	00c20004 	movi	r3,2048
   243c4:	e0bff717 	ldw	r2,-36(fp)
   243c8:	1885c83a 	sub	r2,r3,r2
   243cc:	e0bff515 	stw	r2,-44(fp)

      if (n == 0)
   243d0:	e0bff517 	ldw	r2,-44(fp)
   243d4:	10001e26 	beq	r2,zero,24450 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   243d8:	e0fffe17 	ldw	r3,-8(fp)
   243dc:	e0bff517 	ldw	r2,-44(fp)
   243e0:	1880022e 	bgeu	r3,r2,243ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
   243e4:	e0bffe17 	ldw	r2,-8(fp)
   243e8:	e0bff515 	stw	r2,-44(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   243ec:	e0bff717 	ldw	r2,-36(fp)
   243f0:	10800e04 	addi	r2,r2,56
   243f4:	e0fffc17 	ldw	r3,-16(fp)
   243f8:	1885883a 	add	r2,r3,r2
   243fc:	e13ff417 	ldw	r4,-48(fp)
   24400:	100b883a 	mov	r5,r2
   24404:	e1bff517 	ldw	r6,-44(fp)
   24408:	0017a440 	call	17a44 <memcpy>
      ptr   += n;
   2440c:	e0fff417 	ldw	r3,-48(fp)
   24410:	e0bff517 	ldw	r2,-44(fp)
   24414:	1885883a 	add	r2,r3,r2
   24418:	e0bff415 	stw	r2,-48(fp)
      space -= n;
   2441c:	e0fffe17 	ldw	r3,-8(fp)
   24420:	e0bff517 	ldw	r2,-44(fp)
   24424:	1885c83a 	sub	r2,r3,r2
   24428:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2442c:	e0fff717 	ldw	r3,-36(fp)
   24430:	e0bff517 	ldw	r2,-44(fp)
   24434:	1885883a 	add	r2,r3,r2
   24438:	10c1ffcc 	andi	r3,r2,2047
   2443c:	e0bffc17 	ldw	r2,-16(fp)
   24440:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24444:	e0bffe17 	ldw	r2,-8(fp)
   24448:	00bfcf16 	blt	zero,r2,24388 <altera_avalon_jtag_uart_read+0x2c>
   2444c:	00000106 	br	24454 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   24450:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   24454:	e0fff417 	ldw	r3,-48(fp)
   24458:	e0bffd17 	ldw	r2,-12(fp)
   2445c:	1880141e 	bne	r3,r2,244b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24460:	e0bfff17 	ldw	r2,-4(fp)
   24464:	1090000c 	andi	r2,r2,16384
   24468:	1000131e 	bne	r2,zero,244b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2446c:	0001883a 	nop
   24470:	e0bffc17 	ldw	r2,-16(fp)
   24474:	10c00a17 	ldw	r3,40(r2)
   24478:	e0bff617 	ldw	r2,-40(fp)
   2447c:	1880051e 	bne	r3,r2,24494 <altera_avalon_jtag_uart_read+0x138>
   24480:	e0bffc17 	ldw	r2,-16(fp)
   24484:	10c00917 	ldw	r3,36(r2)
   24488:	e0bffc17 	ldw	r2,-16(fp)
   2448c:	10800117 	ldw	r2,4(r2)
   24490:	18bff736 	bltu	r3,r2,24470 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24494:	e0bffc17 	ldw	r2,-16(fp)
   24498:	10c00a17 	ldw	r3,40(r2)
   2449c:	e0bff617 	ldw	r2,-40(fp)
   244a0:	18800726 	beq	r3,r2,244c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   244a4:	e0bffe17 	ldw	r2,-8(fp)
   244a8:	00bfb716 	blt	zero,r2,24388 <altera_avalon_jtag_uart_read+0x2c>
   244ac:	00000506 	br	244c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   244b0:	0001883a 	nop
   244b4:	00000306 	br	244c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   244b8:	0001883a 	nop
   244bc:	00000106 	br	244c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   244c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   244c4:	e0fff417 	ldw	r3,-48(fp)
   244c8:	e0bffd17 	ldw	r2,-12(fp)
   244cc:	18802226 	beq	r3,r2,24558 <altera_avalon_jtag_uart_read+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   244d0:	0005303a 	rdctl	r2,status
   244d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   244d8:	e0fff917 	ldw	r3,-28(fp)
   244dc:	00bfff84 	movi	r2,-2
   244e0:	1884703a 	and	r2,r3,r2
   244e4:	1001703a 	wrctl	status,r2
  
  return context;
   244e8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   244ec:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   244f0:	e0bffc17 	ldw	r2,-16(fp)
   244f4:	10800817 	ldw	r2,32(r2)
   244f8:	10c00054 	ori	r3,r2,1
   244fc:	e0bffc17 	ldw	r2,-16(fp)
   24500:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24504:	e0bffc17 	ldw	r2,-16(fp)
   24508:	10800017 	ldw	r2,0(r2)
   2450c:	10800104 	addi	r2,r2,4
   24510:	e0fffc17 	ldw	r3,-16(fp)
   24514:	18c00817 	ldw	r3,32(r3)
   24518:	10c00035 	stwio	r3,0(r2)
   2451c:	e0bff817 	ldw	r2,-32(fp)
   24520:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   24524:	0005303a 	rdctl	r2,status
   24528:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2452c:	e0fffb17 	ldw	r3,-20(fp)
   24530:	00bfff84 	movi	r2,-2
   24534:	1884703a 	and	r2,r3,r2
   24538:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2453c:	e0bffa17 	ldw	r2,-24(fp)
   24540:	1080004c 	andi	r2,r2,1
   24544:	e0fffb17 	ldw	r3,-20(fp)
   24548:	1884b03a 	or	r2,r3,r2
   2454c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
   24550:	e0bffb17 	ldw	r2,-20(fp)
   24554:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24558:	e0fff417 	ldw	r3,-48(fp)
   2455c:	e0bffd17 	ldw	r2,-12(fp)
   24560:	18800426 	beq	r3,r2,24574 <altera_avalon_jtag_uart_read+0x218>
    return ptr - buffer;
   24564:	e0fff417 	ldw	r3,-48(fp)
   24568:	e0bffd17 	ldw	r2,-12(fp)
   2456c:	1885c83a 	sub	r2,r3,r2
   24570:	00000606 	br	2458c <altera_avalon_jtag_uart_read+0x230>
  else if (flags & O_NONBLOCK)
   24574:	e0bfff17 	ldw	r2,-4(fp)
   24578:	1090000c 	andi	r2,r2,16384
   2457c:	10000226 	beq	r2,zero,24588 <altera_avalon_jtag_uart_read+0x22c>
    return -EWOULDBLOCK;
   24580:	00bffd44 	movi	r2,-11
   24584:	00000106 	br	2458c <altera_avalon_jtag_uart_read+0x230>
  else
    return -EIO;
   24588:	00bffec4 	movi	r2,-5
}
   2458c:	e037883a 	mov	sp,fp
   24590:	dfc00117 	ldw	ra,4(sp)
   24594:	df000017 	ldw	fp,0(sp)
   24598:	dec00204 	addi	sp,sp,8
   2459c:	f800283a 	ret

000245a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   245a0:	defff204 	addi	sp,sp,-56
   245a4:	dfc00d15 	stw	ra,52(sp)
   245a8:	df000c15 	stw	fp,48(sp)
   245ac:	df000c04 	addi	fp,sp,48
   245b0:	e13ffc15 	stw	r4,-16(fp)
   245b4:	e17ffd15 	stw	r5,-12(fp)
   245b8:	e1bffe15 	stw	r6,-8(fp)
   245bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   245c0:	e03ff415 	stw	zero,-48(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   245c4:	e0bffd17 	ldw	r2,-12(fp)
   245c8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   245cc:	00003706 	br	246ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   245d0:	e0bffc17 	ldw	r2,-16(fp)
   245d4:	10800c17 	ldw	r2,48(r2)
   245d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->tx_out;
   245dc:	e0bffc17 	ldw	r2,-16(fp)
   245e0:	10800d17 	ldw	r2,52(r2)
   245e4:	e0bff415 	stw	r2,-48(fp)

      if (in < out)
   245e8:	e0fff717 	ldw	r3,-36(fp)
   245ec:	e0bff417 	ldw	r2,-48(fp)
   245f0:	1880062e 	bgeu	r3,r2,2460c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   245f4:	e0fff417 	ldw	r3,-48(fp)
   245f8:	e0bff717 	ldw	r2,-36(fp)
   245fc:	1885c83a 	sub	r2,r3,r2
   24600:	10bfffc4 	addi	r2,r2,-1
   24604:	e0bff515 	stw	r2,-44(fp)
   24608:	00000b06 	br	24638 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2460c:	e0bff417 	ldw	r2,-48(fp)
   24610:	10000526 	beq	r2,zero,24628 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24614:	00c20004 	movi	r3,2048
   24618:	e0bff717 	ldw	r2,-36(fp)
   2461c:	1885c83a 	sub	r2,r3,r2
   24620:	e0bff515 	stw	r2,-44(fp)
   24624:	00000406 	br	24638 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24628:	00c1ffc4 	movi	r3,2047
   2462c:	e0bff717 	ldw	r2,-36(fp)
   24630:	1885c83a 	sub	r2,r3,r2
   24634:	e0bff515 	stw	r2,-44(fp)

      if (n == 0)
   24638:	e0bff517 	ldw	r2,-44(fp)
   2463c:	10001e26 	beq	r2,zero,246b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24640:	e0fffe17 	ldw	r3,-8(fp)
   24644:	e0bff517 	ldw	r2,-44(fp)
   24648:	1880022e 	bgeu	r3,r2,24654 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2464c:	e0bffe17 	ldw	r2,-8(fp)
   24650:	e0bff515 	stw	r2,-44(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24654:	e0bff717 	ldw	r2,-36(fp)
   24658:	10820e04 	addi	r2,r2,2104
   2465c:	e0fffc17 	ldw	r3,-16(fp)
   24660:	1885883a 	add	r2,r3,r2
   24664:	1009883a 	mov	r4,r2
   24668:	e17ffd17 	ldw	r5,-12(fp)
   2466c:	e1bff517 	ldw	r6,-44(fp)
   24670:	0017a440 	call	17a44 <memcpy>
      ptr   += n;
   24674:	e0fffd17 	ldw	r3,-12(fp)
   24678:	e0bff517 	ldw	r2,-44(fp)
   2467c:	1885883a 	add	r2,r3,r2
   24680:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24684:	e0fffe17 	ldw	r3,-8(fp)
   24688:	e0bff517 	ldw	r2,-44(fp)
   2468c:	1885c83a 	sub	r2,r3,r2
   24690:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24694:	e0fff717 	ldw	r3,-36(fp)
   24698:	e0bff517 	ldw	r2,-44(fp)
   2469c:	1885883a 	add	r2,r3,r2
   246a0:	10c1ffcc 	andi	r3,r2,2047
   246a4:	e0bffc17 	ldw	r2,-16(fp)
   246a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   246ac:	e0bffe17 	ldw	r2,-8(fp)
   246b0:	00bfc716 	blt	zero,r2,245d0 <altera_avalon_jtag_uart_write+0x30>
   246b4:	00000106 	br	246bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   246b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   246bc:	0005303a 	rdctl	r2,status
   246c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   246c4:	e0fff917 	ldw	r3,-28(fp)
   246c8:	00bfff84 	movi	r2,-2
   246cc:	1884703a 	and	r2,r3,r2
   246d0:	1001703a 	wrctl	status,r2
  
  return context;
   246d4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   246d8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   246dc:	e0bffc17 	ldw	r2,-16(fp)
   246e0:	10800817 	ldw	r2,32(r2)
   246e4:	10c00094 	ori	r3,r2,2
   246e8:	e0bffc17 	ldw	r2,-16(fp)
   246ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   246f0:	e0bffc17 	ldw	r2,-16(fp)
   246f4:	10800017 	ldw	r2,0(r2)
   246f8:	10800104 	addi	r2,r2,4
   246fc:	e0fffc17 	ldw	r3,-16(fp)
   24700:	18c00817 	ldw	r3,32(r3)
   24704:	10c00035 	stwio	r3,0(r2)
   24708:	e0bff817 	ldw	r2,-32(fp)
   2470c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   24710:	0005303a 	rdctl	r2,status
   24714:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   24718:	e0fffb17 	ldw	r3,-20(fp)
   2471c:	00bfff84 	movi	r2,-2
   24720:	1884703a 	and	r2,r3,r2
   24724:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   24728:	e0bffa17 	ldw	r2,-24(fp)
   2472c:	1080004c 	andi	r2,r2,1
   24730:	e0fffb17 	ldw	r3,-20(fp)
   24734:	1884b03a 	or	r2,r3,r2
   24738:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
   2473c:	e0bffb17 	ldw	r2,-20(fp)
   24740:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24744:	e0bffe17 	ldw	r2,-8(fp)
   24748:	0080110e 	bge	zero,r2,24790 <altera_avalon_jtag_uart_write+0x1f0>
    {
      if (flags & O_NONBLOCK)
   2474c:	e0bfff17 	ldw	r2,-4(fp)
   24750:	1090000c 	andi	r2,r2,16384
   24754:	1000111e 	bne	r2,zero,2479c <altera_avalon_jtag_uart_write+0x1fc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24758:	0001883a 	nop
   2475c:	e0bffc17 	ldw	r2,-16(fp)
   24760:	10c00d17 	ldw	r3,52(r2)
   24764:	e0bff417 	ldw	r2,-48(fp)
   24768:	1880051e 	bne	r3,r2,24780 <altera_avalon_jtag_uart_write+0x1e0>
   2476c:	e0bffc17 	ldw	r2,-16(fp)
   24770:	10c00917 	ldw	r3,36(r2)
   24774:	e0bffc17 	ldw	r2,-16(fp)
   24778:	10800117 	ldw	r2,4(r2)
   2477c:	18bff736 	bltu	r3,r2,2475c <altera_avalon_jtag_uart_write+0x1bc>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   24780:	e0bffc17 	ldw	r2,-16(fp)
   24784:	10c00d17 	ldw	r3,52(r2)
   24788:	e0bff417 	ldw	r2,-48(fp)
   2478c:	18800526 	beq	r3,r2,247a4 <altera_avalon_jtag_uart_write+0x204>
         break;
    }
  }
  while (count > 0);
   24790:	e0bffe17 	ldw	r2,-8(fp)
   24794:	00bfc516 	blt	zero,r2,246ac <altera_avalon_jtag_uart_write+0x10c>
   24798:	00000306 	br	247a8 <altera_avalon_jtag_uart_write+0x208>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2479c:	0001883a 	nop
   247a0:	00000106 	br	247a8 <altera_avalon_jtag_uart_write+0x208>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   247a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   247a8:	e0fffd17 	ldw	r3,-12(fp)
   247ac:	e0bff617 	ldw	r2,-40(fp)
   247b0:	18800426 	beq	r3,r2,247c4 <altera_avalon_jtag_uart_write+0x224>
    return ptr - start;
   247b4:	e0fffd17 	ldw	r3,-12(fp)
   247b8:	e0bff617 	ldw	r2,-40(fp)
   247bc:	1885c83a 	sub	r2,r3,r2
   247c0:	00000606 	br	247dc <altera_avalon_jtag_uart_write+0x23c>
  else if (flags & O_NONBLOCK)
   247c4:	e0bfff17 	ldw	r2,-4(fp)
   247c8:	1090000c 	andi	r2,r2,16384
   247cc:	10000226 	beq	r2,zero,247d8 <altera_avalon_jtag_uart_write+0x238>
    return -EWOULDBLOCK;
   247d0:	00bffd44 	movi	r2,-11
   247d4:	00000106 	br	247dc <altera_avalon_jtag_uart_write+0x23c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   247d8:	00bffec4 	movi	r2,-5
}
   247dc:	e037883a 	mov	sp,fp
   247e0:	dfc00117 	ldw	ra,4(sp)
   247e4:	df000017 	ldw	fp,0(sp)
   247e8:	dec00204 	addi	sp,sp,8
   247ec:	f800283a 	ret

000247f0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   247f0:	defffa04 	addi	sp,sp,-24
   247f4:	dfc00515 	stw	ra,20(sp)
   247f8:	df000415 	stw	fp,16(sp)
   247fc:	df000404 	addi	fp,sp,16
   24800:	e13ffe15 	stw	r4,-8(fp)
   24804:	2805883a 	mov	r2,r5
   24808:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   2480c:	e0bffe17 	ldw	r2,-8(fp)
   24810:	10800017 	ldw	r2,0(r2)
   24814:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   24818:	008003f4 	movhi	r2,15
   2481c:	10909004 	addi	r2,r2,16960
   24820:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   24824:	e0bffe17 	ldw	r2,-8(fp)
   24828:	10800803 	ldbu	r2,32(r2)
   2482c:	10803fcc 	andi	r2,r2,255
   24830:	1080201c 	xori	r2,r2,128
   24834:	10bfe004 	addi	r2,r2,-128
   24838:	10000a26 	beq	r2,zero,24864 <lcd_write_command+0x74>
    return;
   2483c:	00001406 	br	24890 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    if (--i == 0)
   24840:	e0bffc17 	ldw	r2,-16(fp)
   24844:	10bfffc4 	addi	r2,r2,-1
   24848:	e0bffc15 	stw	r2,-16(fp)
   2484c:	e0bffc17 	ldw	r2,-16(fp)
   24850:	1000051e 	bne	r2,zero,24868 <lcd_write_command+0x78>
    {
      sp->broken = 1;
   24854:	e0bffe17 	ldw	r2,-8(fp)
   24858:	00c00044 	movi	r3,1
   2485c:	10c00805 	stb	r3,32(r2)
      return;
   24860:	00000b06 	br	24890 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24864:	0001883a 	nop
   24868:	e0bffd17 	ldw	r2,-12(fp)
   2486c:	10800104 	addi	r2,r2,4
   24870:	10800037 	ldwio	r2,0(r2)
   24874:	1080200c 	andi	r2,r2,128
   24878:	103ff11e 	bne	r2,zero,24840 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   2487c:	01001904 	movi	r4,100
   24880:	0021d7c0 	call	21d7c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   24884:	e0bffd17 	ldw	r2,-12(fp)
   24888:	e0ffff03 	ldbu	r3,-4(fp)
   2488c:	10c00035 	stwio	r3,0(r2)
}
   24890:	e037883a 	mov	sp,fp
   24894:	dfc00117 	ldw	ra,4(sp)
   24898:	df000017 	ldw	fp,0(sp)
   2489c:	dec00204 	addi	sp,sp,8
   248a0:	f800283a 	ret

000248a4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   248a4:	defffa04 	addi	sp,sp,-24
   248a8:	dfc00515 	stw	ra,20(sp)
   248ac:	df000415 	stw	fp,16(sp)
   248b0:	df000404 	addi	fp,sp,16
   248b4:	e13ffe15 	stw	r4,-8(fp)
   248b8:	2805883a 	mov	r2,r5
   248bc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   248c0:	e0bffe17 	ldw	r2,-8(fp)
   248c4:	10800017 	ldw	r2,0(r2)
   248c8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   248cc:	008003f4 	movhi	r2,15
   248d0:	10909004 	addi	r2,r2,16960
   248d4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   248d8:	e0bffe17 	ldw	r2,-8(fp)
   248dc:	10800803 	ldbu	r2,32(r2)
   248e0:	10803fcc 	andi	r2,r2,255
   248e4:	1080201c 	xori	r2,r2,128
   248e8:	10bfe004 	addi	r2,r2,-128
   248ec:	10000a26 	beq	r2,zero,24918 <lcd_write_data+0x74>
    return;
   248f0:	00001b06 	br	24960 <lcd_write_data+0xbc>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    if (--i == 0)
   248f4:	e0bffc17 	ldw	r2,-16(fp)
   248f8:	10bfffc4 	addi	r2,r2,-1
   248fc:	e0bffc15 	stw	r2,-16(fp)
   24900:	e0bffc17 	ldw	r2,-16(fp)
   24904:	1000051e 	bne	r2,zero,2491c <lcd_write_data+0x78>
    {
      sp->broken = 1;
   24908:	e0bffe17 	ldw	r2,-8(fp)
   2490c:	00c00044 	movi	r3,1
   24910:	10c00805 	stb	r3,32(r2)
      return;
   24914:	00001206 	br	24960 <lcd_write_data+0xbc>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   24918:	0001883a 	nop
   2491c:	e0bffd17 	ldw	r2,-12(fp)
   24920:	10800104 	addi	r2,r2,4
   24924:	10800037 	ldwio	r2,0(r2)
   24928:	1080200c 	andi	r2,r2,128
   2492c:	103ff11e 	bne	r2,zero,248f4 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   24930:	01001904 	movi	r4,100
   24934:	0021d7c0 	call	21d7c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   24938:	e0bffd17 	ldw	r2,-12(fp)
   2493c:	10800204 	addi	r2,r2,8
   24940:	e0ffff03 	ldbu	r3,-4(fp)
   24944:	10c00035 	stwio	r3,0(r2)

  sp->address++;
   24948:	e0bffe17 	ldw	r2,-8(fp)
   2494c:	108008c3 	ldbu	r2,35(r2)
   24950:	10800044 	addi	r2,r2,1
   24954:	1007883a 	mov	r3,r2
   24958:	e0bffe17 	ldw	r2,-8(fp)
   2495c:	10c008c5 	stb	r3,35(r2)
}
   24960:	e037883a 	mov	sp,fp
   24964:	dfc00117 	ldw	ra,4(sp)
   24968:	df000017 	ldw	fp,0(sp)
   2496c:	dec00204 	addi	sp,sp,8
   24970:	f800283a 	ret

00024974 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   24974:	defffc04 	addi	sp,sp,-16
   24978:	dfc00315 	stw	ra,12(sp)
   2497c:	df000215 	stw	fp,8(sp)
   24980:	df000204 	addi	fp,sp,8
   24984:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   24988:	e13fff17 	ldw	r4,-4(fp)
   2498c:	01400044 	movi	r5,1
   24990:	00247f00 	call	247f0 <lcd_write_command>

  sp->x = 0;
   24994:	e0bfff17 	ldw	r2,-4(fp)
   24998:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   2499c:	e0bfff17 	ldw	r2,-4(fp)
   249a0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   249a4:	e0bfff17 	ldw	r2,-4(fp)
   249a8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   249ac:	e03ffe15 	stw	zero,-8(fp)
   249b0:	00001b06 	br	24a20 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   249b4:	e0bffe17 	ldw	r2,-8(fp)
   249b8:	108018e4 	muli	r2,r2,99
   249bc:	10801004 	addi	r2,r2,64
   249c0:	e0ffff17 	ldw	r3,-4(fp)
   249c4:	1885883a 	add	r2,r3,r2
   249c8:	1009883a 	mov	r4,r2
   249cc:	01400804 	movi	r5,32
   249d0:	01801444 	movi	r6,81
   249d4:	0017b3c0 	call	17b3c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   249d8:	e0bffe17 	ldw	r2,-8(fp)
   249dc:	108018e4 	muli	r2,r2,99
   249e0:	10800c04 	addi	r2,r2,48
   249e4:	e0ffff17 	ldw	r3,-4(fp)
   249e8:	1885883a 	add	r2,r3,r2
   249ec:	1009883a 	mov	r4,r2
   249f0:	01400804 	movi	r5,32
   249f4:	01800404 	movi	r6,16
   249f8:	0017b3c0 	call	17b3c <memset>
    sp->line[y].width = 0;
   249fc:	e0ffff17 	ldw	r3,-4(fp)
   24a00:	e0bffe17 	ldw	r2,-8(fp)
   24a04:	108018e4 	muli	r2,r2,99
   24a08:	1885883a 	add	r2,r3,r2
   24a0c:	10802404 	addi	r2,r2,144
   24a10:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24a14:	e0bffe17 	ldw	r2,-8(fp)
   24a18:	10800044 	addi	r2,r2,1
   24a1c:	e0bffe15 	stw	r2,-8(fp)
   24a20:	e0bffe17 	ldw	r2,-8(fp)
   24a24:	10800090 	cmplti	r2,r2,2
   24a28:	103fe21e 	bne	r2,zero,249b4 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   24a2c:	e037883a 	mov	sp,fp
   24a30:	dfc00117 	ldw	ra,4(sp)
   24a34:	df000017 	ldw	fp,0(sp)
   24a38:	dec00204 	addi	sp,sp,8
   24a3c:	f800283a 	ret

00024a40 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   24a40:	defff704 	addi	sp,sp,-36
   24a44:	dfc00815 	stw	ra,32(sp)
   24a48:	df000715 	stw	fp,28(sp)
   24a4c:	df000704 	addi	fp,sp,28
   24a50:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   24a54:	e0bfff17 	ldw	r2,-4(fp)
   24a58:	10800943 	ldbu	r2,37(r2)
   24a5c:	10803fcc 	andi	r2,r2,255
   24a60:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24a64:	e03ff915 	stw	zero,-28(fp)
   24a68:	00006806 	br	24c0c <lcd_repaint_screen+0x1cc>
  {
    int width  = sp->line[y].width;
   24a6c:	e0ffff17 	ldw	r3,-4(fp)
   24a70:	e0bff917 	ldw	r2,-28(fp)
   24a74:	108018e4 	muli	r2,r2,99
   24a78:	1885883a 	add	r2,r3,r2
   24a7c:	10802404 	addi	r2,r2,144
   24a80:	10800043 	ldbu	r2,1(r2)
   24a84:	10803fcc 	andi	r2,r2,255
   24a88:	1080201c 	xori	r2,r2,128
   24a8c:	10bfe004 	addi	r2,r2,-128
   24a90:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   24a94:	e0ffff17 	ldw	r3,-4(fp)
   24a98:	e0bff917 	ldw	r2,-28(fp)
   24a9c:	108018e4 	muli	r2,r2,99
   24aa0:	1885883a 	add	r2,r3,r2
   24aa4:	10802404 	addi	r2,r2,144
   24aa8:	10800083 	ldbu	r2,2(r2)
   24aac:	10c03fcc 	andi	r3,r2,255
   24ab0:	e0bffc17 	ldw	r2,-16(fp)
   24ab4:	1885383a 	mul	r2,r3,r2
   24ab8:	1005d23a 	srai	r2,r2,8
   24abc:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
   24ac0:	e0fffb17 	ldw	r3,-20(fp)
   24ac4:	e0bffd17 	ldw	r2,-12(fp)
   24ac8:	18800116 	blt	r3,r2,24ad0 <lcd_repaint_screen+0x90>
      offset = 0;
   24acc:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24ad0:	e03ffa15 	stw	zero,-24(fp)
   24ad4:	00004706 	br	24bf4 <lcd_repaint_screen+0x1b4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   24ad8:	e0fffa17 	ldw	r3,-24(fp)
   24adc:	e0bffb17 	ldw	r2,-20(fp)
   24ae0:	1885883a 	add	r2,r3,r2
   24ae4:	e0fffd17 	ldw	r3,-12(fp)
   24ae8:	10c9283a 	div	r4,r2,r3
   24aec:	e0fffd17 	ldw	r3,-12(fp)
   24af0:	20c7383a 	mul	r3,r4,r3
   24af4:	10c5c83a 	sub	r2,r2,r3
   24af8:	e13fff17 	ldw	r4,-4(fp)
   24afc:	e0fff917 	ldw	r3,-28(fp)
   24b00:	18c018e4 	muli	r3,r3,99
   24b04:	20c7883a 	add	r3,r4,r3
   24b08:	1885883a 	add	r2,r3,r2
   24b0c:	10801004 	addi	r2,r2,64
   24b10:	10800003 	ldbu	r2,0(r2)
   24b14:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   24b18:	e0ffff17 	ldw	r3,-4(fp)
   24b1c:	e0bff917 	ldw	r2,-28(fp)
   24b20:	108018e4 	muli	r2,r2,99
   24b24:	1887883a 	add	r3,r3,r2
   24b28:	e0bffa17 	ldw	r2,-24(fp)
   24b2c:	1885883a 	add	r2,r3,r2
   24b30:	10800c04 	addi	r2,r2,48
   24b34:	10800003 	ldbu	r2,0(r2)
   24b38:	10c03fcc 	andi	r3,r2,255
   24b3c:	18c0201c 	xori	r3,r3,128
   24b40:	18ffe004 	addi	r3,r3,-128
   24b44:	e0bffe07 	ldb	r2,-8(fp)
   24b48:	18802726 	beq	r3,r2,24be8 <lcd_repaint_screen+0x1a8>
      {
        unsigned char address = x + colstart[y];
   24b4c:	e0fff917 	ldw	r3,-28(fp)
   24b50:	d0a01904 	addi	r2,gp,-32668
   24b54:	1885883a 	add	r2,r3,r2
   24b58:	10800003 	ldbu	r2,0(r2)
   24b5c:	1007883a 	mov	r3,r2
   24b60:	e0bffa17 	ldw	r2,-24(fp)
   24b64:	1885883a 	add	r2,r3,r2
   24b68:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
   24b6c:	e0fffe43 	ldbu	r3,-7(fp)
   24b70:	e0bfff17 	ldw	r2,-4(fp)
   24b74:	108008c3 	ldbu	r2,35(r2)
   24b78:	10803fcc 	andi	r2,r2,255
   24b7c:	1080201c 	xori	r2,r2,128
   24b80:	10bfe004 	addi	r2,r2,-128
   24b84:	18800a26 	beq	r3,r2,24bb0 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   24b88:	e0fffe43 	ldbu	r3,-7(fp)
   24b8c:	00bfe004 	movi	r2,-128
   24b90:	1884b03a 	or	r2,r3,r2
   24b94:	10803fcc 	andi	r2,r2,255
   24b98:	e13fff17 	ldw	r4,-4(fp)
   24b9c:	100b883a 	mov	r5,r2
   24ba0:	00247f00 	call	247f0 <lcd_write_command>
          sp->address = address;
   24ba4:	e0fffe43 	ldbu	r3,-7(fp)
   24ba8:	e0bfff17 	ldw	r2,-4(fp)
   24bac:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   24bb0:	e0bffe03 	ldbu	r2,-8(fp)
   24bb4:	10803fcc 	andi	r2,r2,255
   24bb8:	e13fff17 	ldw	r4,-4(fp)
   24bbc:	100b883a 	mov	r5,r2
   24bc0:	00248a40 	call	248a4 <lcd_write_data>
        sp->line[y].visible[x] = c;
   24bc4:	e0ffff17 	ldw	r3,-4(fp)
   24bc8:	e0bff917 	ldw	r2,-28(fp)
   24bcc:	108018e4 	muli	r2,r2,99
   24bd0:	1887883a 	add	r3,r3,r2
   24bd4:	e0bffa17 	ldw	r2,-24(fp)
   24bd8:	1885883a 	add	r2,r3,r2
   24bdc:	10800c04 	addi	r2,r2,48
   24be0:	e0fffe03 	ldbu	r3,-8(fp)
   24be4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   24be8:	e0bffa17 	ldw	r2,-24(fp)
   24bec:	10800044 	addi	r2,r2,1
   24bf0:	e0bffa15 	stw	r2,-24(fp)
   24bf4:	e0bffa17 	ldw	r2,-24(fp)
   24bf8:	10800410 	cmplti	r2,r2,16
   24bfc:	103fb61e 	bne	r2,zero,24ad8 <lcd_repaint_screen+0x98>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24c00:	e0bff917 	ldw	r2,-28(fp)
   24c04:	10800044 	addi	r2,r2,1
   24c08:	e0bff915 	stw	r2,-28(fp)
   24c0c:	e0bff917 	ldw	r2,-28(fp)
   24c10:	10800090 	cmplti	r2,r2,2
   24c14:	103f951e 	bne	r2,zero,24a6c <lcd_repaint_screen+0x2c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   24c18:	e037883a 	mov	sp,fp
   24c1c:	dfc00117 	ldw	ra,4(sp)
   24c20:	df000017 	ldw	fp,0(sp)
   24c24:	dec00204 	addi	sp,sp,8
   24c28:	f800283a 	ret

00024c2c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   24c2c:	defffc04 	addi	sp,sp,-16
   24c30:	dfc00315 	stw	ra,12(sp)
   24c34:	df000215 	stw	fp,8(sp)
   24c38:	df000204 	addi	fp,sp,8
   24c3c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24c40:	e03ffe15 	stw	zero,-8(fp)
   24c44:	00001e06 	br	24cc0 <lcd_scroll_up+0x94>
  {
    if (y < ALT_LCD_HEIGHT-1)
   24c48:	e0bffe17 	ldw	r2,-8(fp)
   24c4c:	00801016 	blt	zero,r2,24c90 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   24c50:	e0bffe17 	ldw	r2,-8(fp)
   24c54:	108018e4 	muli	r2,r2,99
   24c58:	10801004 	addi	r2,r2,64
   24c5c:	e0ffff17 	ldw	r3,-4(fp)
   24c60:	1887883a 	add	r3,r3,r2
   24c64:	e0bffe17 	ldw	r2,-8(fp)
   24c68:	10800044 	addi	r2,r2,1
   24c6c:	108018e4 	muli	r2,r2,99
   24c70:	10801004 	addi	r2,r2,64
   24c74:	e13fff17 	ldw	r4,-4(fp)
   24c78:	2085883a 	add	r2,r4,r2
   24c7c:	1809883a 	mov	r4,r3
   24c80:	100b883a 	mov	r5,r2
   24c84:	01801404 	movi	r6,80
   24c88:	0017a440 	call	17a44 <memcpy>
   24c8c:	00000906 	br	24cb4 <lcd_scroll_up+0x88>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   24c90:	e0bffe17 	ldw	r2,-8(fp)
   24c94:	108018e4 	muli	r2,r2,99
   24c98:	10801004 	addi	r2,r2,64
   24c9c:	e0ffff17 	ldw	r3,-4(fp)
   24ca0:	1885883a 	add	r2,r3,r2
   24ca4:	1009883a 	mov	r4,r2
   24ca8:	01400804 	movi	r5,32
   24cac:	01801404 	movi	r6,80
   24cb0:	0017b3c0 	call	17b3c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   24cb4:	e0bffe17 	ldw	r2,-8(fp)
   24cb8:	10800044 	addi	r2,r2,1
   24cbc:	e0bffe15 	stw	r2,-8(fp)
   24cc0:	e0bffe17 	ldw	r2,-8(fp)
   24cc4:	10800090 	cmplti	r2,r2,2
   24cc8:	103fdf1e 	bne	r2,zero,24c48 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   24ccc:	e0bfff17 	ldw	r2,-4(fp)
   24cd0:	10800883 	ldbu	r2,34(r2)
   24cd4:	10bfffc4 	addi	r2,r2,-1
   24cd8:	1007883a 	mov	r3,r2
   24cdc:	e0bfff17 	ldw	r2,-4(fp)
   24ce0:	10c00885 	stb	r3,34(r2)
}
   24ce4:	e037883a 	mov	sp,fp
   24ce8:	dfc00117 	ldw	ra,4(sp)
   24cec:	df000017 	ldw	fp,0(sp)
   24cf0:	dec00204 	addi	sp,sp,8
   24cf4:	f800283a 	ret

00024cf8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   24cf8:	defff904 	addi	sp,sp,-28
   24cfc:	dfc00615 	stw	ra,24(sp)
   24d00:	df000515 	stw	fp,20(sp)
   24d04:	df000504 	addi	fp,sp,20
   24d08:	e13ffe15 	stw	r4,-8(fp)
   24d0c:	2805883a 	mov	r2,r5
   24d10:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   24d14:	e03ffb15 	stw	zero,-20(fp)
   24d18:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   24d1c:	e0bffe17 	ldw	r2,-8(fp)
   24d20:	10800a03 	ldbu	r2,40(r2)
   24d24:	10803fcc 	andi	r2,r2,255
   24d28:	1080201c 	xori	r2,r2,128
   24d2c:	10bfe004 	addi	r2,r2,-128
   24d30:	108016d8 	cmpnei	r2,r2,91
   24d34:	1000441e 	bne	r2,zero,24e48 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
   24d38:	e0bffe17 	ldw	r2,-8(fp)
   24d3c:	10800a44 	addi	r2,r2,41
   24d40:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   24d44:	00000d06 	br	24d7c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   24d48:	e0bffb17 	ldw	r2,-20(fp)
   24d4c:	10c002a4 	muli	r3,r2,10
   24d50:	e0bffd17 	ldw	r2,-12(fp)
   24d54:	10800003 	ldbu	r2,0(r2)
   24d58:	10803fcc 	andi	r2,r2,255
   24d5c:	1080201c 	xori	r2,r2,128
   24d60:	10bfe004 	addi	r2,r2,-128
   24d64:	10bff404 	addi	r2,r2,-48
   24d68:	1885883a 	add	r2,r3,r2
   24d6c:	e0bffb15 	stw	r2,-20(fp)
   24d70:	e0bffd17 	ldw	r2,-12(fp)
   24d74:	10800044 	addi	r2,r2,1
   24d78:	e0bffd15 	stw	r2,-12(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   24d7c:	008000f4 	movhi	r2,3
   24d80:	10934704 	addi	r2,r2,19740
   24d84:	10c00017 	ldw	r3,0(r2)
   24d88:	e0bffd17 	ldw	r2,-12(fp)
   24d8c:	10800003 	ldbu	r2,0(r2)
   24d90:	10803fcc 	andi	r2,r2,255
   24d94:	1080201c 	xori	r2,r2,128
   24d98:	10bfe004 	addi	r2,r2,-128
   24d9c:	1885883a 	add	r2,r3,r2
   24da0:	10800003 	ldbu	r2,0(r2)
   24da4:	10803fcc 	andi	r2,r2,255
   24da8:	1080010c 	andi	r2,r2,4
   24dac:	103fe61e 	bne	r2,zero,24d48 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   24db0:	e0bffd17 	ldw	r2,-12(fp)
   24db4:	10800003 	ldbu	r2,0(r2)
   24db8:	10803fcc 	andi	r2,r2,255
   24dbc:	1080201c 	xori	r2,r2,128
   24dc0:	10bfe004 	addi	r2,r2,-128
   24dc4:	10800ed8 	cmpnei	r2,r2,59
   24dc8:	1000211e 	bne	r2,zero,24e50 <lcd_handle_escape+0x158>
    {
      ptr++;
   24dcc:	e0bffd17 	ldw	r2,-12(fp)
   24dd0:	10800044 	addi	r2,r2,1
   24dd4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   24dd8:	00000d06 	br	24e10 <lcd_handle_escape+0x118>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   24ddc:	e0bffc17 	ldw	r2,-16(fp)
   24de0:	10c002a4 	muli	r3,r2,10
   24de4:	e0bffd17 	ldw	r2,-12(fp)
   24de8:	10800003 	ldbu	r2,0(r2)
   24dec:	10803fcc 	andi	r2,r2,255
   24df0:	1080201c 	xori	r2,r2,128
   24df4:	10bfe004 	addi	r2,r2,-128
   24df8:	10bff404 	addi	r2,r2,-48
   24dfc:	1885883a 	add	r2,r3,r2
   24e00:	e0bffc15 	stw	r2,-16(fp)
   24e04:	e0bffd17 	ldw	r2,-12(fp)
   24e08:	10800044 	addi	r2,r2,1
   24e0c:	e0bffd15 	stw	r2,-12(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   24e10:	008000f4 	movhi	r2,3
   24e14:	10934704 	addi	r2,r2,19740
   24e18:	10c00017 	ldw	r3,0(r2)
   24e1c:	e0bffd17 	ldw	r2,-12(fp)
   24e20:	10800003 	ldbu	r2,0(r2)
   24e24:	10803fcc 	andi	r2,r2,255
   24e28:	1080201c 	xori	r2,r2,128
   24e2c:	10bfe004 	addi	r2,r2,-128
   24e30:	1885883a 	add	r2,r3,r2
   24e34:	10800003 	ldbu	r2,0(r2)
   24e38:	10803fcc 	andi	r2,r2,255
   24e3c:	1080010c 	andi	r2,r2,4
   24e40:	103fe61e 	bne	r2,zero,24ddc <lcd_handle_escape+0xe4>
   24e44:	00000206 	br	24e50 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   24e48:	00bfffc4 	movi	r2,-1
   24e4c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   24e50:	e0bfff07 	ldb	r2,-4(fp)
   24e54:	10c012a0 	cmpeqi	r3,r2,74
   24e58:	18002a1e 	bne	r3,zero,24f04 <lcd_handle_escape+0x20c>
   24e5c:	10c012c8 	cmpgei	r3,r2,75
   24e60:	1800031e 	bne	r3,zero,24e70 <lcd_handle_escape+0x178>
   24e64:	10801220 	cmpeqi	r2,r2,72
   24e68:	1000051e 	bne	r2,zero,24e80 <lcd_handle_escape+0x188>
   24e6c:	00004c06 	br	24fa0 <lcd_handle_escape+0x2a8>
   24e70:	10c012e0 	cmpeqi	r3,r2,75
   24e74:	1800291e 	bne	r3,zero,24f1c <lcd_handle_escape+0x224>
   24e78:	108019a0 	cmpeqi	r2,r2,102
   24e7c:	10004826 	beq	r2,zero,24fa0 <lcd_handle_escape+0x2a8>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   24e80:	e0bffc17 	ldw	r2,-16(fp)
   24e84:	0080050e 	bge	zero,r2,24e9c <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
   24e88:	e0bffc17 	ldw	r2,-16(fp)
   24e8c:	10bfffc4 	addi	r2,r2,-1
   24e90:	1007883a 	mov	r3,r2
   24e94:	e0bffe17 	ldw	r2,-8(fp)
   24e98:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   24e9c:	e0bffb17 	ldw	r2,-20(fp)
   24ea0:	00803a0e 	bge	zero,r2,24f8c <lcd_handle_escape+0x294>
    {
      sp->y = parm1 - 1;
   24ea4:	e0bffb17 	ldw	r2,-20(fp)
   24ea8:	10bfffc4 	addi	r2,r2,-1
   24eac:	1007883a 	mov	r3,r2
   24eb0:	e0bffe17 	ldw	r2,-8(fp)
   24eb4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   24eb8:	e0bffe17 	ldw	r2,-8(fp)
   24ebc:	10800883 	ldbu	r2,34(r2)
   24ec0:	10803fcc 	andi	r2,r2,255
   24ec4:	10800170 	cmpltui	r2,r2,5
   24ec8:	1000071e 	bne	r2,zero,24ee8 <lcd_handle_escape+0x1f0>
        sp->y = ALT_LCD_HEIGHT * 2;
   24ecc:	e0bffe17 	ldw	r2,-8(fp)
   24ed0:	00c00104 	movi	r3,4
   24ed4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   24ed8:	00000306 	br	24ee8 <lcd_handle_escape+0x1f0>
        lcd_scroll_up(sp);
   24edc:	e13ffe17 	ldw	r4,-8(fp)
   24ee0:	0024c2c0 	call	24c2c <lcd_scroll_up>
   24ee4:	00000106 	br	24eec <lcd_handle_escape+0x1f4>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   24ee8:	0001883a 	nop
   24eec:	e0bffe17 	ldw	r2,-8(fp)
   24ef0:	10800883 	ldbu	r2,34(r2)
   24ef4:	10803fcc 	andi	r2,r2,255
   24ef8:	108000e8 	cmpgeui	r2,r2,3
   24efc:	103ff71e 	bne	r2,zero,24edc <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
    }
    break;
   24f00:	00002206 	br	24f8c <lcd_handle_escape+0x294>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   24f04:	e0bffb17 	ldw	r2,-20(fp)
   24f08:	10800098 	cmpnei	r2,r2,2
   24f0c:	1000211e 	bne	r2,zero,24f94 <lcd_handle_escape+0x29c>
      lcd_clear_screen(sp);
   24f10:	e13ffe17 	ldw	r4,-8(fp)
   24f14:	00249740 	call	24974 <lcd_clear_screen>
    break;
   24f18:	00001e06 	br	24f94 <lcd_handle_escape+0x29c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   24f1c:	e0bffb17 	ldw	r2,-20(fp)
   24f20:	00801e16 	blt	zero,r2,24f9c <lcd_handle_escape+0x2a4>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   24f24:	e0bffe17 	ldw	r2,-8(fp)
   24f28:	10800843 	ldbu	r2,33(r2)
   24f2c:	10803fcc 	andi	r2,r2,255
   24f30:	10801428 	cmpgeui	r2,r2,80
   24f34:	1000191e 	bne	r2,zero,24f9c <lcd_handle_escape+0x2a4>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   24f38:	e0bffe17 	ldw	r2,-8(fp)
   24f3c:	10800883 	ldbu	r2,34(r2)
   24f40:	10803fcc 	andi	r2,r2,255
   24f44:	108018e4 	muli	r2,r2,99
   24f48:	10801004 	addi	r2,r2,64
   24f4c:	e0fffe17 	ldw	r3,-8(fp)
   24f50:	1887883a 	add	r3,r3,r2
   24f54:	e0bffe17 	ldw	r2,-8(fp)
   24f58:	10800843 	ldbu	r2,33(r2)
   24f5c:	10803fcc 	andi	r2,r2,255
   24f60:	1887883a 	add	r3,r3,r2
   24f64:	e0bffe17 	ldw	r2,-8(fp)
   24f68:	10800843 	ldbu	r2,33(r2)
   24f6c:	10803fcc 	andi	r2,r2,255
   24f70:	01001404 	movi	r4,80
   24f74:	2085c83a 	sub	r2,r4,r2
   24f78:	1809883a 	mov	r4,r3
   24f7c:	01400804 	movi	r5,32
   24f80:	100d883a 	mov	r6,r2
   24f84:	0017b3c0 	call	17b3c <memset>
    }
    break;
   24f88:	00000406 	br	24f9c <lcd_handle_escape+0x2a4>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   24f8c:	0001883a 	nop
   24f90:	00000306 	br	24fa0 <lcd_handle_escape+0x2a8>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   24f94:	0001883a 	nop
   24f98:	00000106 	br	24fa0 <lcd_handle_escape+0x2a8>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   24f9c:	0001883a 	nop
  }
}
   24fa0:	e037883a 	mov	sp,fp
   24fa4:	dfc00117 	ldw	ra,4(sp)
   24fa8:	df000017 	ldw	fp,0(sp)
   24fac:	dec00204 	addi	sp,sp,8
   24fb0:	f800283a 	ret

00024fb4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   24fb4:	defff304 	addi	sp,sp,-52
   24fb8:	dfc00c15 	stw	ra,48(sp)
   24fbc:	df000b15 	stw	fp,44(sp)
   24fc0:	df000b04 	addi	fp,sp,44
   24fc4:	e13ffc15 	stw	r4,-16(fp)
   24fc8:	e17ffd15 	stw	r5,-12(fp)
   24fcc:	e1bffe15 	stw	r6,-8(fp)
   24fd0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   24fd4:	e0bffe17 	ldw	r2,-8(fp)
   24fd8:	e0fffd17 	ldw	r3,-12(fp)
   24fdc:	1885883a 	add	r2,r3,r2
   24fe0:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   24fe4:	e0bffc17 	ldw	r2,-16(fp)
   24fe8:	00c00044 	movi	r3,1
   24fec:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   24ff0:	00009d06 	br	25268 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   24ff4:	e0bffd17 	ldw	r2,-12(fp)
   24ff8:	10800003 	ldbu	r2,0(r2)
   24ffc:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   25000:	e0bffc17 	ldw	r2,-16(fp)
   25004:	10800903 	ldbu	r2,36(r2)
   25008:	10803fcc 	andi	r2,r2,255
   2500c:	1080201c 	xori	r2,r2,128
   25010:	10bfe004 	addi	r2,r2,-128
   25014:	10003816 	blt	r2,zero,250f8 <altera_avalon_lcd_16207_write+0x144>
    {
      unsigned int esccount = sp->esccount;
   25018:	e0bffc17 	ldw	r2,-16(fp)
   2501c:	10800903 	ldbu	r2,36(r2)
   25020:	10803fcc 	andi	r2,r2,255
   25024:	1080201c 	xori	r2,r2,128
   25028:	10bfe004 	addi	r2,r2,-128
   2502c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   25030:	e0bffa17 	ldw	r2,-24(fp)
   25034:	1000031e 	bne	r2,zero,25044 <altera_avalon_lcd_16207_write+0x90>
   25038:	e0bff907 	ldb	r2,-28(fp)
   2503c:	108016d8 	cmpnei	r2,r2,91
   25040:	10000e1e 	bne	r2,zero,2507c <altera_avalon_lcd_16207_write+0xc8>
   25044:	e0bffa17 	ldw	r2,-24(fp)
   25048:	10001926 	beq	r2,zero,250b0 <altera_avalon_lcd_16207_write+0xfc>
          (esccount > 0 && !isdigit(c) && c != ';'))
   2504c:	008000f4 	movhi	r2,3
   25050:	10934704 	addi	r2,r2,19740
   25054:	10c00017 	ldw	r3,0(r2)
   25058:	e0bff907 	ldb	r2,-28(fp)
   2505c:	1885883a 	add	r2,r3,r2
   25060:	10800003 	ldbu	r2,0(r2)
   25064:	10803fcc 	andi	r2,r2,255
   25068:	1080010c 	andi	r2,r2,4
   2506c:	1000101e 	bne	r2,zero,250b0 <altera_avalon_lcd_16207_write+0xfc>
   25070:	e0bff907 	ldb	r2,-28(fp)
   25074:	10800ee0 	cmpeqi	r2,r2,59
   25078:	10000d1e 	bne	r2,zero,250b0 <altera_avalon_lcd_16207_write+0xfc>
      {
        sp->escape[esccount] = 0;
   2507c:	e0fffc17 	ldw	r3,-16(fp)
   25080:	e0bffa17 	ldw	r2,-24(fp)
   25084:	1885883a 	add	r2,r3,r2
   25088:	10800a04 	addi	r2,r2,40
   2508c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   25090:	e0bff907 	ldb	r2,-28(fp)
   25094:	e13ffc17 	ldw	r4,-16(fp)
   25098:	100b883a 	mov	r5,r2
   2509c:	0024cf80 	call	24cf8 <lcd_handle_escape>

        sp->esccount = -1;
   250a0:	e0bffc17 	ldw	r2,-16(fp)
   250a4:	00ffffc4 	movi	r3,-1
   250a8:	10c00905 	stb	r3,36(r2)
   250ac:	00006b06 	br	2525c <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   250b0:	e0bffc17 	ldw	r2,-16(fp)
   250b4:	10800903 	ldbu	r2,36(r2)
   250b8:	10803fcc 	andi	r2,r2,255
   250bc:	108001e8 	cmpgeui	r2,r2,7
   250c0:	1000651e 	bne	r2,zero,25258 <altera_avalon_lcd_16207_write+0x2a4>
      {
        sp->escape[esccount] = c;
   250c4:	e0fffc17 	ldw	r3,-16(fp)
   250c8:	e0bffa17 	ldw	r2,-24(fp)
   250cc:	1885883a 	add	r2,r3,r2
   250d0:	10800a04 	addi	r2,r2,40
   250d4:	e0fff903 	ldbu	r3,-28(fp)
   250d8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   250dc:	e0bffc17 	ldw	r2,-16(fp)
   250e0:	10800903 	ldbu	r2,36(r2)
   250e4:	10800044 	addi	r2,r2,1
   250e8:	1007883a 	mov	r3,r2
   250ec:	e0bffc17 	ldw	r2,-16(fp)
   250f0:	10c00905 	stb	r3,36(r2)
   250f4:	00005806 	br	25258 <altera_avalon_lcd_16207_write+0x2a4>
      }
    }
    else if (c == 27) /* ESC */
   250f8:	e0bff907 	ldb	r2,-28(fp)
   250fc:	108006d8 	cmpnei	r2,r2,27
   25100:	1000031e 	bne	r2,zero,25110 <altera_avalon_lcd_16207_write+0x15c>
    {
      sp->esccount = 0;
   25104:	e0bffc17 	ldw	r2,-16(fp)
   25108:	10000905 	stb	zero,36(r2)
   2510c:	00005306 	br	2525c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   25110:	e0bff907 	ldb	r2,-28(fp)
   25114:	10800358 	cmpnei	r2,r2,13
   25118:	1000031e 	bne	r2,zero,25128 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->x = 0;
   2511c:	e0bffc17 	ldw	r2,-16(fp)
   25120:	10000845 	stb	zero,33(r2)
   25124:	00004d06 	br	2525c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   25128:	e0bff907 	ldb	r2,-28(fp)
   2512c:	10800298 	cmpnei	r2,r2,10
   25130:	1000101e 	bne	r2,zero,25174 <altera_avalon_lcd_16207_write+0x1c0>
    {
      sp->x = 0;
   25134:	e0bffc17 	ldw	r2,-16(fp)
   25138:	10000845 	stb	zero,33(r2)
      sp->y++;
   2513c:	e0bffc17 	ldw	r2,-16(fp)
   25140:	10800883 	ldbu	r2,34(r2)
   25144:	10800044 	addi	r2,r2,1
   25148:	1007883a 	mov	r3,r2
   2514c:	e0bffc17 	ldw	r2,-16(fp)
   25150:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   25154:	e0bffc17 	ldw	r2,-16(fp)
   25158:	10800883 	ldbu	r2,34(r2)
   2515c:	10803fcc 	andi	r2,r2,255
   25160:	108000f0 	cmpltui	r2,r2,3
   25164:	10003d1e 	bne	r2,zero,2525c <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   25168:	e13ffc17 	ldw	r4,-16(fp)
   2516c:	0024c2c0 	call	24c2c <lcd_scroll_up>
   25170:	00003a06 	br	2525c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   25174:	e0bff907 	ldb	r2,-28(fp)
   25178:	10800218 	cmpnei	r2,r2,8
   2517c:	10000b1e 	bne	r2,zero,251ac <altera_avalon_lcd_16207_write+0x1f8>
    {
      if (sp->x > 0)
   25180:	e0bffc17 	ldw	r2,-16(fp)
   25184:	10800843 	ldbu	r2,33(r2)
   25188:	10803fcc 	andi	r2,r2,255
   2518c:	10003326 	beq	r2,zero,2525c <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   25190:	e0bffc17 	ldw	r2,-16(fp)
   25194:	10800843 	ldbu	r2,33(r2)
   25198:	10bfffc4 	addi	r2,r2,-1
   2519c:	1007883a 	mov	r3,r2
   251a0:	e0bffc17 	ldw	r2,-16(fp)
   251a4:	10c00845 	stb	r3,33(r2)
   251a8:	00002c06 	br	2525c <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   251ac:	008000f4 	movhi	r2,3
   251b0:	10934704 	addi	r2,r2,19740
   251b4:	10c00017 	ldw	r3,0(r2)
   251b8:	e0bff907 	ldb	r2,-28(fp)
   251bc:	1885883a 	add	r2,r3,r2
   251c0:	10800003 	ldbu	r2,0(r2)
   251c4:	10803fcc 	andi	r2,r2,255
   251c8:	1080201c 	xori	r2,r2,128
   251cc:	10bfe004 	addi	r2,r2,-128
   251d0:	108025cc 	andi	r2,r2,151
   251d4:	10002126 	beq	r2,zero,2525c <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   251d8:	e0bffc17 	ldw	r2,-16(fp)
   251dc:	10800883 	ldbu	r2,34(r2)
   251e0:	10803fcc 	andi	r2,r2,255
   251e4:	108000b0 	cmpltui	r2,r2,2
   251e8:	1000021e 	bne	r2,zero,251f4 <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   251ec:	e13ffc17 	ldw	r4,-16(fp)
   251f0:	0024c2c0 	call	24c2c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   251f4:	e0bffc17 	ldw	r2,-16(fp)
   251f8:	10800843 	ldbu	r2,33(r2)
   251fc:	10803fcc 	andi	r2,r2,255
   25200:	10801428 	cmpgeui	r2,r2,80
   25204:	10000d1e 	bne	r2,zero,2523c <altera_avalon_lcd_16207_write+0x288>
        sp->line[sp->y].data[sp->x] = c;
   25208:	e0bffc17 	ldw	r2,-16(fp)
   2520c:	10800883 	ldbu	r2,34(r2)
   25210:	10c03fcc 	andi	r3,r2,255
   25214:	e0bffc17 	ldw	r2,-16(fp)
   25218:	10800843 	ldbu	r2,33(r2)
   2521c:	10803fcc 	andi	r2,r2,255
   25220:	e13ffc17 	ldw	r4,-16(fp)
   25224:	18c018e4 	muli	r3,r3,99
   25228:	20c7883a 	add	r3,r4,r3
   2522c:	1885883a 	add	r2,r3,r2
   25230:	10801004 	addi	r2,r2,64
   25234:	e0fff903 	ldbu	r3,-28(fp)
   25238:	10c00005 	stb	r3,0(r2)

      sp->x++;
   2523c:	e0bffc17 	ldw	r2,-16(fp)
   25240:	10800843 	ldbu	r2,33(r2)
   25244:	10800044 	addi	r2,r2,1
   25248:	1007883a 	mov	r3,r2
   2524c:	e0bffc17 	ldw	r2,-16(fp)
   25250:	10c00845 	stb	r3,33(r2)
   25254:	00000106 	br	2525c <altera_avalon_lcd_16207_write+0x2a8>
        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
      {
        sp->escape[esccount] = c;
        sp->esccount++;
   25258:	0001883a 	nop

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   2525c:	e0bffd17 	ldw	r2,-12(fp)
   25260:	10800044 	addi	r2,r2,1
   25264:	e0bffd15 	stw	r2,-12(fp)
   25268:	e0fffd17 	ldw	r3,-12(fp)
   2526c:	e0bff817 	ldw	r2,-32(fp)
   25270:	18bf6036 	bltu	r3,r2,24ff4 <altera_avalon_lcd_16207_write+0x40>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   25274:	00800404 	movi	r2,16
   25278:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   2527c:	e03ff515 	stw	zero,-44(fp)
   25280:	00003706 	br	25360 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   25284:	00801404 	movi	r2,80
   25288:	e0bff715 	stw	r2,-36(fp)
   2528c:	00001106 	br	252d4 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
   25290:	e0bff717 	ldw	r2,-36(fp)
   25294:	10bfffc4 	addi	r2,r2,-1
   25298:	e13ffc17 	ldw	r4,-16(fp)
   2529c:	e0fff517 	ldw	r3,-44(fp)
   252a0:	18c018e4 	muli	r3,r3,99
   252a4:	20c7883a 	add	r3,r4,r3
   252a8:	1885883a 	add	r2,r3,r2
   252ac:	10801004 	addi	r2,r2,64
   252b0:	10800003 	ldbu	r2,0(r2)
   252b4:	10803fcc 	andi	r2,r2,255
   252b8:	1080201c 	xori	r2,r2,128
   252bc:	10bfe004 	addi	r2,r2,-128
   252c0:	10800820 	cmpeqi	r2,r2,32
   252c4:	10000626 	beq	r2,zero,252e0 <altera_avalon_lcd_16207_write+0x32c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   252c8:	e0bff717 	ldw	r2,-36(fp)
   252cc:	10bfffc4 	addi	r2,r2,-1
   252d0:	e0bff715 	stw	r2,-36(fp)
   252d4:	e0bff717 	ldw	r2,-36(fp)
   252d8:	00bfed16 	blt	zero,r2,25290 <altera_avalon_lcd_16207_write+0x2dc>
   252dc:	00000106 	br	252e4 <altera_avalon_lcd_16207_write+0x330>
      if (sp->line[y].data[width-1] != ' ')
        break;
   252e0:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   252e4:	e0bff717 	ldw	r2,-36(fp)
   252e8:	10800448 	cmpgei	r2,r2,17
   252ec:	1000031e 	bne	r2,zero,252fc <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
   252f0:	00800404 	movi	r2,16
   252f4:	e0bff715 	stw	r2,-36(fp)
   252f8:	00000306 	br	25308 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
   252fc:	e0bff717 	ldw	r2,-36(fp)
   25300:	10800044 	addi	r2,r2,1
   25304:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   25308:	e0bff717 	ldw	r2,-36(fp)
   2530c:	1007883a 	mov	r3,r2
   25310:	e13ffc17 	ldw	r4,-16(fp)
   25314:	e0bff517 	ldw	r2,-44(fp)
   25318:	108018e4 	muli	r2,r2,99
   2531c:	2085883a 	add	r2,r4,r2
   25320:	10802404 	addi	r2,r2,144
   25324:	10c00045 	stb	r3,1(r2)
    if (widthmax < width)
   25328:	e0fff617 	ldw	r3,-40(fp)
   2532c:	e0bff717 	ldw	r2,-36(fp)
   25330:	1880020e 	bge	r3,r2,2533c <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
   25334:	e0bff717 	ldw	r2,-36(fp)
   25338:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   2533c:	e0fffc17 	ldw	r3,-16(fp)
   25340:	e0bff517 	ldw	r2,-44(fp)
   25344:	108018e4 	muli	r2,r2,99
   25348:	1885883a 	add	r2,r3,r2
   2534c:	10802404 	addi	r2,r2,144
   25350:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25354:	e0bff517 	ldw	r2,-44(fp)
   25358:	10800044 	addi	r2,r2,1
   2535c:	e0bff515 	stw	r2,-44(fp)
   25360:	e0bff517 	ldw	r2,-44(fp)
   25364:	10800090 	cmplti	r2,r2,2
   25368:	103fc61e 	bne	r2,zero,25284 <altera_avalon_lcd_16207_write+0x2d0>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   2536c:	e0bff617 	ldw	r2,-40(fp)
   25370:	10800448 	cmpgei	r2,r2,17
   25374:	1000031e 	bne	r2,zero,25384 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
   25378:	e0bffc17 	ldw	r2,-16(fp)
   2537c:	10000985 	stb	zero,38(r2)
   25380:	00002d06 	br	25438 <altera_avalon_lcd_16207_write+0x484>
  else
  {
    widthmax *= 2;
   25384:	e0bff617 	ldw	r2,-40(fp)
   25388:	1085883a 	add	r2,r2,r2
   2538c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   25390:	e0bff617 	ldw	r2,-40(fp)
   25394:	1007883a 	mov	r3,r2
   25398:	e0bffc17 	ldw	r2,-16(fp)
   2539c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   253a0:	e03ff515 	stw	zero,-44(fp)
   253a4:	00002106 	br	2542c <altera_avalon_lcd_16207_write+0x478>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   253a8:	e0fffc17 	ldw	r3,-16(fp)
   253ac:	e0bff517 	ldw	r2,-44(fp)
   253b0:	108018e4 	muli	r2,r2,99
   253b4:	1885883a 	add	r2,r3,r2
   253b8:	10802404 	addi	r2,r2,144
   253bc:	10800043 	ldbu	r2,1(r2)
   253c0:	10803fcc 	andi	r2,r2,255
   253c4:	1080201c 	xori	r2,r2,128
   253c8:	10bfe004 	addi	r2,r2,-128
   253cc:	10800450 	cmplti	r2,r2,17
   253d0:	1000131e 	bne	r2,zero,25420 <altera_avalon_lcd_16207_write+0x46c>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   253d4:	e0fffc17 	ldw	r3,-16(fp)
   253d8:	e0bff517 	ldw	r2,-44(fp)
   253dc:	108018e4 	muli	r2,r2,99
   253e0:	1885883a 	add	r2,r3,r2
   253e4:	10802404 	addi	r2,r2,144
   253e8:	10800043 	ldbu	r2,1(r2)
   253ec:	10803fcc 	andi	r2,r2,255
   253f0:	1080201c 	xori	r2,r2,128
   253f4:	10bfe004 	addi	r2,r2,-128
   253f8:	1006923a 	slli	r3,r2,8
   253fc:	e0bff617 	ldw	r2,-40(fp)
   25400:	1885283a 	div	r2,r3,r2
   25404:	1007883a 	mov	r3,r2
   25408:	e13ffc17 	ldw	r4,-16(fp)
   2540c:	e0bff517 	ldw	r2,-44(fp)
   25410:	108018e4 	muli	r2,r2,99
   25414:	2085883a 	add	r2,r4,r2
   25418:	10802404 	addi	r2,r2,144
   2541c:	10c00085 	stb	r3,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   25420:	e0bff517 	ldw	r2,-44(fp)
   25424:	10800044 	addi	r2,r2,1
   25428:	e0bff515 	stw	r2,-44(fp)
   2542c:	e0bff517 	ldw	r2,-44(fp)
   25430:	10800090 	cmplti	r2,r2,2
   25434:	103fdc1e 	bne	r2,zero,253a8 <altera_avalon_lcd_16207_write+0x3f4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   25438:	e0bffc17 	ldw	r2,-16(fp)
   2543c:	10800943 	ldbu	r2,37(r2)
   25440:	10803fcc 	andi	r2,r2,255
   25444:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   25448:	e13ffc17 	ldw	r4,-16(fp)
   2544c:	0024a400 	call	24a40 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   25450:	e0bffc17 	ldw	r2,-16(fp)
   25454:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   25458:	e0bffc17 	ldw	r2,-16(fp)
   2545c:	10800943 	ldbu	r2,37(r2)
   25460:	10c03fcc 	andi	r3,r2,255
   25464:	e0bffb17 	ldw	r2,-20(fp)
   25468:	18800426 	beq	r3,r2,2547c <altera_avalon_lcd_16207_write+0x4c8>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   2546c:	e0bffc17 	ldw	r2,-16(fp)
   25470:	00c00044 	movi	r3,1
   25474:	10c009c5 	stb	r3,39(r2)
  }
   25478:	003fef06 	br	25438 <altera_avalon_lcd_16207_write+0x484>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   2547c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   25480:	e0bffe17 	ldw	r2,-8(fp)
}
   25484:	e037883a 	mov	sp,fp
   25488:	dfc00117 	ldw	ra,4(sp)
   2548c:	df000017 	ldw	fp,0(sp)
   25490:	dec00204 	addi	sp,sp,8
   25494:	f800283a 	ret

00025498 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   25498:	defffc04 	addi	sp,sp,-16
   2549c:	dfc00315 	stw	ra,12(sp)
   254a0:	df000215 	stw	fp,8(sp)
   254a4:	df000204 	addi	fp,sp,8
   254a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   254ac:	e0bfff17 	ldw	r2,-4(fp)
   254b0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   254b4:	e0bffe17 	ldw	r2,-8(fp)
   254b8:	10800943 	ldbu	r2,37(r2)
   254bc:	10803fcc 	andi	r2,r2,255
   254c0:	10c00044 	addi	r3,r2,1
   254c4:	e0bffe17 	ldw	r2,-8(fp)
   254c8:	10800983 	ldbu	r2,38(r2)
   254cc:	10803fcc 	andi	r2,r2,255
   254d0:	18800316 	blt	r3,r2,254e0 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   254d4:	e0bffe17 	ldw	r2,-8(fp)
   254d8:	10000945 	stb	zero,37(r2)
   254dc:	00000606 	br	254f8 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   254e0:	e0bffe17 	ldw	r2,-8(fp)
   254e4:	10800943 	ldbu	r2,37(r2)
   254e8:	10800044 	addi	r2,r2,1
   254ec:	1007883a 	mov	r3,r2
   254f0:	e0bffe17 	ldw	r2,-8(fp)
   254f4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   254f8:	e0bffe17 	ldw	r2,-8(fp)
   254fc:	10800983 	ldbu	r2,38(r2)
   25500:	10803fcc 	andi	r2,r2,255
   25504:	10000826 	beq	r2,zero,25528 <alt_lcd_16207_timeout+0x90>
   25508:	e0bffe17 	ldw	r2,-8(fp)
   2550c:	108009c3 	ldbu	r2,39(r2)
   25510:	10803fcc 	andi	r2,r2,255
   25514:	1080201c 	xori	r2,r2,128
   25518:	10bfe004 	addi	r2,r2,-128
   2551c:	1000021e 	bne	r2,zero,25528 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   25520:	e13ffe17 	ldw	r4,-8(fp)
   25524:	0024a400 	call	24a40 <lcd_repaint_screen>

  return sp->period;
   25528:	e0bffe17 	ldw	r2,-8(fp)
   2552c:	10800717 	ldw	r2,28(r2)
}
   25530:	e037883a 	mov	sp,fp
   25534:	dfc00117 	ldw	ra,4(sp)
   25538:	df000017 	ldw	fp,0(sp)
   2553c:	dec00204 	addi	sp,sp,8
   25540:	f800283a 	ret

00025544 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   25544:	defffc04 	addi	sp,sp,-16
   25548:	dfc00315 	stw	ra,12(sp)
   2554c:	df000215 	stw	fp,8(sp)
   25550:	df000204 	addi	fp,sp,8
   25554:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   25558:	e0bfff17 	ldw	r2,-4(fp)
   2555c:	10800017 	ldw	r2,0(r2)
   25560:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   25564:	e0bfff17 	ldw	r2,-4(fp)
   25568:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   2556c:	010ea604 	movi	r4,15000
   25570:	0021d7c0 	call	21d7c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25574:	e0bffe17 	ldw	r2,-8(fp)
   25578:	00c00c04 	movi	r3,48
   2557c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   25580:	01040104 	movi	r4,4100
   25584:	0021d7c0 	call	21d7c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   25588:	e0bffe17 	ldw	r2,-8(fp)
   2558c:	00c00c04 	movi	r3,48
   25590:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   25594:	0100fa04 	movi	r4,1000
   25598:	0021d7c0 	call	21d7c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   2559c:	e0bffe17 	ldw	r2,-8(fp)
   255a0:	00c00c04 	movi	r3,48
   255a4:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   255a8:	e13fff17 	ldw	r4,-4(fp)
   255ac:	01400e04 	movi	r5,56
   255b0:	00247f00 	call	247f0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   255b4:	e13fff17 	ldw	r4,-4(fp)
   255b8:	01400204 	movi	r5,8
   255bc:	00247f00 	call	247f0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   255c0:	e13fff17 	ldw	r4,-4(fp)
   255c4:	00249740 	call	24974 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   255c8:	e13fff17 	ldw	r4,-4(fp)
   255cc:	01400184 	movi	r5,6
   255d0:	00247f00 	call	247f0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   255d4:	e13fff17 	ldw	r4,-4(fp)
   255d8:	01400304 	movi	r5,12
   255dc:	00247f00 	call	247f0 <lcd_write_command>

  sp->esccount = -1;
   255e0:	e0bfff17 	ldw	r2,-4(fp)
   255e4:	00ffffc4 	movi	r3,-1
   255e8:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   255ec:	e0bfff17 	ldw	r2,-4(fp)
   255f0:	10800a04 	addi	r2,r2,40
   255f4:	1009883a 	mov	r4,r2
   255f8:	000b883a 	mov	r5,zero
   255fc:	01800204 	movi	r6,8
   25600:	0017b3c0 	call	17b3c <memset>

  sp->scrollpos = 0;
   25604:	e0bfff17 	ldw	r2,-4(fp)
   25608:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   2560c:	e0bfff17 	ldw	r2,-4(fp)
   25610:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   25614:	e0bfff17 	ldw	r2,-4(fp)
   25618:	100009c5 	stb	zero,39(r2)
   2561c:	008000f4 	movhi	r2,3
   25620:	109bfe04 	addi	r2,r2,28664
   25624:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   25628:	1007883a 	mov	r3,r2
   2562c:	00800284 	movi	r2,10
   25630:	1885203a 	divu	r2,r3,r2
   25634:	1007883a 	mov	r3,r2
   25638:	e0bfff17 	ldw	r2,-4(fp)
   2563c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   25640:	e0bfff17 	ldw	r2,-4(fp)
   25644:	10c00104 	addi	r3,r2,4
   25648:	e0bfff17 	ldw	r2,-4(fp)
   2564c:	10800717 	ldw	r2,28(r2)
   25650:	1809883a 	mov	r4,r3
   25654:	100b883a 	mov	r5,r2
   25658:	018000b4 	movhi	r6,2
   2565c:	31952604 	addi	r6,r6,21656
   25660:	e1ffff17 	ldw	r7,-4(fp)
   25664:	00211140 	call	21114 <alt_alarm_start>
}
   25668:	e037883a 	mov	sp,fp
   2566c:	dfc00117 	ldw	ra,4(sp)
   25670:	df000017 	ldw	fp,0(sp)
   25674:	dec00204 	addi	sp,sp,8
   25678:	f800283a 	ret

0002567c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2567c:	defffa04 	addi	sp,sp,-24
   25680:	dfc00515 	stw	ra,20(sp)
   25684:	df000415 	stw	fp,16(sp)
   25688:	df000404 	addi	fp,sp,16
   2568c:	e13ffd15 	stw	r4,-12(fp)
   25690:	e17ffe15 	stw	r5,-8(fp)
   25694:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   25698:	e0bffd17 	ldw	r2,-12(fp)
   2569c:	10800017 	ldw	r2,0(r2)
   256a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   256a4:	e0bffc17 	ldw	r2,-16(fp)
   256a8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   256ac:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   256b0:	10800217 	ldw	r2,8(r2)
   256b4:	1809883a 	mov	r4,r3
   256b8:	e17ffe17 	ldw	r5,-8(fp)
   256bc:	e1bfff17 	ldw	r6,-4(fp)
   256c0:	100f883a 	mov	r7,r2
   256c4:	0024fb40 	call	24fb4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   256c8:	e037883a 	mov	sp,fp
   256cc:	dfc00117 	ldw	ra,4(sp)
   256d0:	df000017 	ldw	fp,0(sp)
   256d4:	dec00204 	addi	sp,sp,8
   256d8:	f800283a 	ret

000256dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   256dc:	defffe04 	addi	sp,sp,-8
   256e0:	dfc00115 	stw	ra,4(sp)
   256e4:	df000015 	stw	fp,0(sp)
   256e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   256ec:	008000f4 	movhi	r2,3
   256f0:	10933d04 	addi	r2,r2,19700
   256f4:	10800017 	ldw	r2,0(r2)
   256f8:	10000526 	beq	r2,zero,25710 <alt_get_errno+0x34>
   256fc:	008000f4 	movhi	r2,3
   25700:	10933d04 	addi	r2,r2,19700
   25704:	10800017 	ldw	r2,0(r2)
   25708:	103ee83a 	callr	r2
   2570c:	00000206 	br	25718 <alt_get_errno+0x3c>
   25710:	008000f4 	movhi	r2,3
   25714:	109bfa04 	addi	r2,r2,28648
}
   25718:	e037883a 	mov	sp,fp
   2571c:	dfc00117 	ldw	ra,4(sp)
   25720:	df000017 	ldw	fp,0(sp)
   25724:	dec00204 	addi	sp,sp,8
   25728:	f800283a 	ret

0002572c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   2572c:	defffc04 	addi	sp,sp,-16
   25730:	df000315 	stw	fp,12(sp)
   25734:	df000304 	addi	fp,sp,12
   25738:	e13ffe15 	stw	r4,-8(fp)
   2573c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   25740:	e0bffe17 	ldw	r2,-8(fp)
   25744:	10800317 	ldw	r2,12(r2)
   25748:	10800037 	ldwio	r2,0(r2)
   2574c:	1080040c 	andi	r2,r2,16
   25750:	10000226 	beq	r2,zero,2575c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   25754:	00bffc04 	movi	r2,-16
   25758:	00003906 	br	25840 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   2575c:	e0bffe17 	ldw	r2,-8(fp)
   25760:	10800317 	ldw	r2,12(r2)
   25764:	10800404 	addi	r2,r2,16
   25768:	e0fffe17 	ldw	r3,-8(fp)
   2576c:	18c00317 	ldw	r3,12(r3)
   25770:	18c00404 	addi	r3,r3,16
   25774:	19000037 	ldwio	r4,0(r3)
   25778:	00fff7c4 	movi	r3,-33
   2577c:	20c6703a 	and	r3,r4,r3
   25780:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   25784:	e0bffe17 	ldw	r2,-8(fp)
   25788:	10800317 	ldw	r2,12(r2)
   2578c:	00c03fc4 	movi	r3,255
   25790:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   25794:	e0bffe17 	ldw	r2,-8(fp)
   25798:	10800317 	ldw	r2,12(r2)
   2579c:	10800804 	addi	r2,r2,32
   257a0:	e0ffff17 	ldw	r3,-4(fp)
   257a4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   257a8:	e0bffe17 	ldw	r2,-8(fp)
   257ac:	10800917 	ldw	r2,36(r2)
   257b0:	10001126 	beq	r2,zero,257f8 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   257b4:	e0bffe17 	ldw	r2,-8(fp)
   257b8:	10800317 	ldw	r2,12(r2)
   257bc:	10800404 	addi	r2,r2,16
   257c0:	10800037 	ldwio	r2,0(r2)
   257c4:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   257c8:	e0bffe17 	ldw	r2,-8(fp)
   257cc:	10c00b17 	ldw	r3,44(r2)
   257d0:	e0bffd17 	ldw	r2,-12(fp)
   257d4:	1884b03a 	or	r2,r3,r2
   257d8:	10801814 	ori	r2,r2,96
   257dc:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   257e0:	e0bffe17 	ldw	r2,-8(fp)
   257e4:	10800317 	ldw	r2,12(r2)
   257e8:	10800404 	addi	r2,r2,16
   257ec:	e0fffd17 	ldw	r3,-12(fp)
   257f0:	10c00035 	stwio	r3,0(r2)
   257f4:	00001106 	br	2583c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   257f8:	e0bffe17 	ldw	r2,-8(fp)
   257fc:	10800317 	ldw	r2,12(r2)
   25800:	10800404 	addi	r2,r2,16
   25804:	10800037 	ldwio	r2,0(r2)
   25808:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   2580c:	e0bffd17 	ldw	r2,-12(fp)
   25810:	10801814 	ori	r2,r2,96
   25814:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   25818:	e0fffd17 	ldw	r3,-12(fp)
   2581c:	00bffbc4 	movi	r2,-17
   25820:	1884703a 	and	r2,r3,r2
   25824:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   25828:	e0bffe17 	ldw	r2,-8(fp)
   2582c:	10800317 	ldw	r2,12(r2)
   25830:	10800404 	addi	r2,r2,16
   25834:	e0fffd17 	ldw	r3,-12(fp)
   25838:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   2583c:	0005883a 	mov	r2,zero
}
   25840:	e037883a 	mov	sp,fp
   25844:	df000017 	ldw	fp,0(sp)
   25848:	dec00104 	addi	sp,sp,4
   2584c:	f800283a 	ret

00025850 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   25850:	defffc04 	addi	sp,sp,-16
   25854:	df000315 	stw	fp,12(sp)
   25858:	df000304 	addi	fp,sp,12
   2585c:	e13ffe15 	stw	r4,-8(fp)
   25860:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   25864:	0001883a 	nop
   25868:	e0bffe17 	ldw	r2,-8(fp)
   2586c:	10800317 	ldw	r2,12(r2)
   25870:	10800037 	ldwio	r2,0(r2)
   25874:	1080040c 	andi	r2,r2,16
   25878:	103ffb1e 	bne	r2,zero,25868 <alt_avalon_sgdma_do_sync_transfer+0x18>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   2587c:	e0bffe17 	ldw	r2,-8(fp)
   25880:	10800317 	ldw	r2,12(r2)
   25884:	10800404 	addi	r2,r2,16
   25888:	e0fffe17 	ldw	r3,-8(fp)
   2588c:	18c00317 	ldw	r3,12(r3)
   25890:	18c00404 	addi	r3,r3,16
   25894:	19000037 	ldwio	r4,0(r3)
   25898:	00fff7c4 	movi	r3,-33
   2589c:	20c6703a 	and	r3,r4,r3
   258a0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   258a4:	e0bffe17 	ldw	r2,-8(fp)
   258a8:	10800317 	ldw	r2,12(r2)
   258ac:	00c03fc4 	movi	r3,255
   258b0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   258b4:	e0bffe17 	ldw	r2,-8(fp)
   258b8:	10800317 	ldw	r2,12(r2)
   258bc:	10800804 	addi	r2,r2,32
   258c0:	e0ffff17 	ldw	r3,-4(fp)
   258c4:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   258c8:	e0bffe17 	ldw	r2,-8(fp)
   258cc:	10800317 	ldw	r2,12(r2)
   258d0:	10800404 	addi	r2,r2,16
   258d4:	e0fffe17 	ldw	r3,-8(fp)
   258d8:	18c00317 	ldw	r3,12(r3)
   258dc:	18c00404 	addi	r3,r3,16
   258e0:	18c00037 	ldwio	r3,0(r3)
   258e4:	18c01814 	ori	r3,r3,96
   258e8:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   258ec:	0001883a 	nop
   258f0:	e0bffe17 	ldw	r2,-8(fp)
   258f4:	10800317 	ldw	r2,12(r2)
   258f8:	10800037 	ldwio	r2,0(r2)
   258fc:	1080040c 	andi	r2,r2,16
   25900:	103ffb1e 	bne	r2,zero,258f0 <alt_avalon_sgdma_do_sync_transfer+0xa0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   25904:	e0bffe17 	ldw	r2,-8(fp)
   25908:	10800317 	ldw	r2,12(r2)
   2590c:	10800404 	addi	r2,r2,16
   25910:	e0fffe17 	ldw	r3,-8(fp)
   25914:	18c00317 	ldw	r3,12(r3)
   25918:	18c00404 	addi	r3,r3,16
   2591c:	19000037 	ldwio	r4,0(r3)
   25920:	00fff7c4 	movi	r3,-33
   25924:	20c6703a 	and	r3,r4,r3
   25928:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   2592c:	e0bffe17 	ldw	r2,-8(fp)
   25930:	10800317 	ldw	r2,12(r2)
   25934:	10800037 	ldwio	r2,0(r2)
   25938:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   2593c:	e0bffe17 	ldw	r2,-8(fp)
   25940:	10800317 	ldw	r2,12(r2)
   25944:	00c03fc4 	movi	r3,255
   25948:	10c00035 	stwio	r3,0(r2)

  return status;
   2594c:	e0bffd03 	ldbu	r2,-12(fp)
}
   25950:	e037883a 	mov	sp,fp
   25954:	df000017 	ldw	fp,0(sp)
   25958:	dec00104 	addi	sp,sp,4
   2595c:	f800283a 	ret

00025960 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   25960:	defff404 	addi	sp,sp,-48
   25964:	dfc00b15 	stw	ra,44(sp)
   25968:	df000a15 	stw	fp,40(sp)
   2596c:	df000a04 	addi	fp,sp,40
   25970:	e13ffb15 	stw	r4,-20(fp)
   25974:	e17ffc15 	stw	r5,-16(fp)
   25978:	e1bffd15 	stw	r6,-12(fp)
   2597c:	e1fffe15 	stw	r7,-8(fp)
   25980:	e0800217 	ldw	r2,8(fp)
   25984:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   25988:	e0bfff0b 	ldhu	r2,-4(fp)
   2598c:	d8800015 	stw	r2,0(sp)
   25990:	e0800317 	ldw	r2,12(fp)
   25994:	d8800115 	stw	r2,4(sp)
   25998:	e0800417 	ldw	r2,16(fp)
   2599c:	d8800215 	stw	r2,8(sp)
   259a0:	d8000315 	stw	zero,12(sp)
   259a4:	d8000415 	stw	zero,16(sp)
   259a8:	e13ffb17 	ldw	r4,-20(fp)
   259ac:	e17ffc17 	ldw	r5,-16(fp)
   259b0:	e1bffd17 	ldw	r6,-12(fp)
   259b4:	e1fffe17 	ldw	r7,-8(fp)
   259b8:	00259d00 	call	259d0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   259bc:	e037883a 	mov	sp,fp
   259c0:	dfc00117 	ldw	ra,4(sp)
   259c4:	df000017 	ldw	fp,0(sp)
   259c8:	dec00204 	addi	sp,sp,8
   259cc:	f800283a 	ret

000259d0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   259d0:	defff204 	addi	sp,sp,-56
   259d4:	dfc00d15 	stw	ra,52(sp)
   259d8:	df000c15 	stw	fp,48(sp)
   259dc:	df000c04 	addi	fp,sp,48
   259e0:	e13ffb15 	stw	r4,-20(fp)
   259e4:	e17ffc15 	stw	r5,-16(fp)
   259e8:	e1bffd15 	stw	r6,-12(fp)
   259ec:	e1fffe15 	stw	r7,-8(fp)
   259f0:	e0800217 	ldw	r2,8(fp)
   259f4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   259f8:	e0bfff0b 	ldhu	r2,-4(fp)
   259fc:	d8800015 	stw	r2,0(sp)
   25a00:	d8000115 	stw	zero,4(sp)
   25a04:	e0800317 	ldw	r2,12(fp)
   25a08:	d8800215 	stw	r2,8(sp)
   25a0c:	e0800417 	ldw	r2,16(fp)
   25a10:	d8800315 	stw	r2,12(sp)
   25a14:	e0800517 	ldw	r2,20(fp)
   25a18:	d8800415 	stw	r2,16(sp)
   25a1c:	e0800617 	ldw	r2,24(fp)
   25a20:	d8800515 	stw	r2,20(sp)
   25a24:	d8000615 	stw	zero,24(sp)
   25a28:	e13ffb17 	ldw	r4,-20(fp)
   25a2c:	e17ffc17 	ldw	r5,-16(fp)
   25a30:	e1bffd17 	ldw	r6,-12(fp)
   25a34:	e1fffe17 	ldw	r7,-8(fp)
   25a38:	0025f540 	call	25f54 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   25a3c:	e037883a 	mov	sp,fp
   25a40:	dfc00117 	ldw	ra,4(sp)
   25a44:	df000017 	ldw	fp,0(sp)
   25a48:	dec00204 	addi	sp,sp,8
   25a4c:	f800283a 	ret

00025a50 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   25a50:	defff804 	addi	sp,sp,-32
   25a54:	dfc00715 	stw	ra,28(sp)
   25a58:	df000615 	stw	fp,24(sp)
   25a5c:	df000604 	addi	fp,sp,24
   25a60:	e13ffc15 	stw	r4,-16(fp)
   25a64:	e17ffd15 	stw	r5,-12(fp)
   25a68:	e1bffe15 	stw	r6,-8(fp)
   25a6c:	3805883a 	mov	r2,r7
   25a70:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   25a74:	e0bfff0b 	ldhu	r2,-4(fp)
   25a78:	e0c00217 	ldw	r3,8(fp)
   25a7c:	d8c00015 	stw	r3,0(sp)
   25a80:	d8000115 	stw	zero,4(sp)
   25a84:	e13ffc17 	ldw	r4,-16(fp)
   25a88:	e17ffd17 	ldw	r5,-12(fp)
   25a8c:	e1bffe17 	ldw	r6,-8(fp)
   25a90:	100f883a 	mov	r7,r2
   25a94:	0025aac0 	call	25aac <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   25a98:	e037883a 	mov	sp,fp
   25a9c:	dfc00117 	ldw	ra,4(sp)
   25aa0:	df000017 	ldw	fp,0(sp)
   25aa4:	dec00204 	addi	sp,sp,8
   25aa8:	f800283a 	ret

00025aac <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   25aac:	defff304 	addi	sp,sp,-52
   25ab0:	dfc00c15 	stw	ra,48(sp)
   25ab4:	df000b15 	stw	fp,44(sp)
   25ab8:	df000b04 	addi	fp,sp,44
   25abc:	e13ffc15 	stw	r4,-16(fp)
   25ac0:	e17ffd15 	stw	r5,-12(fp)
   25ac4:	e1bffe15 	stw	r6,-8(fp)
   25ac8:	3805883a 	mov	r2,r7
   25acc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   25ad0:	e0bfff0b 	ldhu	r2,-4(fp)
   25ad4:	d8800015 	stw	r2,0(sp)
   25ad8:	d8000115 	stw	zero,4(sp)
   25adc:	d8000215 	stw	zero,8(sp)
   25ae0:	e0800217 	ldw	r2,8(fp)
   25ae4:	d8800315 	stw	r2,12(sp)
   25ae8:	d8000415 	stw	zero,16(sp)
   25aec:	e0800317 	ldw	r2,12(fp)
   25af0:	d8800515 	stw	r2,20(sp)
   25af4:	d8000615 	stw	zero,24(sp)
   25af8:	e13ffc17 	ldw	r4,-16(fp)
   25afc:	e17ffd17 	ldw	r5,-12(fp)
   25b00:	000d883a 	mov	r6,zero
   25b04:	e1fffe17 	ldw	r7,-8(fp)
   25b08:	0025f540 	call	25f54 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   25b0c:	e037883a 	mov	sp,fp
   25b10:	dfc00117 	ldw	ra,4(sp)
   25b14:	df000017 	ldw	fp,0(sp)
   25b18:	dec00204 	addi	sp,sp,8
   25b1c:	f800283a 	ret

00025b20 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   25b20:	defff404 	addi	sp,sp,-48
   25b24:	dfc00b15 	stw	ra,44(sp)
   25b28:	df000a15 	stw	fp,40(sp)
   25b2c:	df000a04 	addi	fp,sp,40
   25b30:	e13ffb15 	stw	r4,-20(fp)
   25b34:	e17ffc15 	stw	r5,-16(fp)
   25b38:	e1bffd15 	stw	r6,-12(fp)
   25b3c:	3805883a 	mov	r2,r7
   25b40:	e0c00517 	ldw	r3,20(fp)
   25b44:	e0bffe0d 	sth	r2,-8(fp)
   25b48:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   25b4c:	e0bffe0b 	ldhu	r2,-8(fp)
   25b50:	e0ffff03 	ldbu	r3,-4(fp)
   25b54:	e1000217 	ldw	r4,8(fp)
   25b58:	d9000015 	stw	r4,0(sp)
   25b5c:	e1000317 	ldw	r4,12(fp)
   25b60:	d9000115 	stw	r4,4(sp)
   25b64:	e1000417 	ldw	r4,16(fp)
   25b68:	d9000215 	stw	r4,8(sp)
   25b6c:	d8000315 	stw	zero,12(sp)
   25b70:	d8c00415 	stw	r3,16(sp)
   25b74:	e13ffb17 	ldw	r4,-20(fp)
   25b78:	e17ffc17 	ldw	r5,-16(fp)
   25b7c:	e1bffd17 	ldw	r6,-12(fp)
   25b80:	100f883a 	mov	r7,r2
   25b84:	0025b9c0 	call	25b9c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   25b88:	e037883a 	mov	sp,fp
   25b8c:	dfc00117 	ldw	ra,4(sp)
   25b90:	df000017 	ldw	fp,0(sp)
   25b94:	dec00204 	addi	sp,sp,8
   25b98:	f800283a 	ret

00025b9c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   25b9c:	defff204 	addi	sp,sp,-56
   25ba0:	dfc00d15 	stw	ra,52(sp)
   25ba4:	df000c15 	stw	fp,48(sp)
   25ba8:	df000c04 	addi	fp,sp,48
   25bac:	e13ffb15 	stw	r4,-20(fp)
   25bb0:	e17ffc15 	stw	r5,-16(fp)
   25bb4:	e1bffd15 	stw	r6,-12(fp)
   25bb8:	3805883a 	mov	r2,r7
   25bbc:	e0c00617 	ldw	r3,24(fp)
   25bc0:	e0bffe0d 	sth	r2,-8(fp)
   25bc4:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   25bc8:	e0fffe0b 	ldhu	r3,-8(fp)
   25bcc:	e0bfff03 	ldbu	r2,-4(fp)
   25bd0:	d8c00015 	stw	r3,0(sp)
   25bd4:	e0c00417 	ldw	r3,16(fp)
   25bd8:	d8c00115 	stw	r3,4(sp)
   25bdc:	e0c00217 	ldw	r3,8(fp)
   25be0:	d8c00215 	stw	r3,8(sp)
   25be4:	e0c00317 	ldw	r3,12(fp)
   25be8:	d8c00315 	stw	r3,12(sp)
   25bec:	e0c00517 	ldw	r3,20(fp)
   25bf0:	d8c00415 	stw	r3,16(sp)
   25bf4:	d8000515 	stw	zero,20(sp)
   25bf8:	d8800615 	stw	r2,24(sp)
   25bfc:	e13ffb17 	ldw	r4,-20(fp)
   25c00:	e17ffc17 	ldw	r5,-16(fp)
   25c04:	e1bffd17 	ldw	r6,-12(fp)
   25c08:	000f883a 	mov	r7,zero
   25c0c:	0025f540 	call	25f54 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   25c10:	e037883a 	mov	sp,fp
   25c14:	dfc00117 	ldw	ra,4(sp)
   25c18:	df000017 	ldw	fp,0(sp)
   25c1c:	dec00204 	addi	sp,sp,8
   25c20:	f800283a 	ret

00025c24 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   25c24:	defffb04 	addi	sp,sp,-20
   25c28:	df000415 	stw	fp,16(sp)
   25c2c:	df000404 	addi	fp,sp,16
   25c30:	e13ffc15 	stw	r4,-16(fp)
   25c34:	e17ffd15 	stw	r5,-12(fp)
   25c38:	e1bffe15 	stw	r6,-8(fp)
   25c3c:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   25c40:	e0bffc17 	ldw	r2,-16(fp)
   25c44:	e0fffd17 	ldw	r3,-12(fp)
   25c48:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   25c4c:	e0bffc17 	ldw	r2,-16(fp)
   25c50:	e0ffff17 	ldw	r3,-4(fp)
   25c54:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   25c58:	e0bffc17 	ldw	r2,-16(fp)
   25c5c:	e0fffe17 	ldw	r3,-8(fp)
   25c60:	10c00b15 	stw	r3,44(r2)
}
   25c64:	e037883a 	mov	sp,fp
   25c68:	df000017 	ldw	fp,0(sp)
   25c6c:	dec00104 	addi	sp,sp,4
   25c70:	f800283a 	ret

00025c74 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   25c74:	defffd04 	addi	sp,sp,-12
   25c78:	df000215 	stw	fp,8(sp)
   25c7c:	df000204 	addi	fp,sp,8
   25c80:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   25c84:	e0bfff17 	ldw	r2,-4(fp)
   25c88:	10800317 	ldw	r2,12(r2)
   25c8c:	10800404 	addi	r2,r2,16
   25c90:	10800037 	ldwio	r2,0(r2)
   25c94:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   25c98:	e0bffe17 	ldw	r2,-8(fp)
   25c9c:	10800814 	ori	r2,r2,32
   25ca0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   25ca4:	e0bfff17 	ldw	r2,-4(fp)
   25ca8:	10800317 	ldw	r2,12(r2)
   25cac:	10800404 	addi	r2,r2,16
   25cb0:	e0fffe17 	ldw	r3,-8(fp)
   25cb4:	10c00035 	stwio	r3,0(r2)
}
   25cb8:	e037883a 	mov	sp,fp
   25cbc:	df000017 	ldw	fp,0(sp)
   25cc0:	dec00104 	addi	sp,sp,4
   25cc4:	f800283a 	ret

00025cc8 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   25cc8:	defffd04 	addi	sp,sp,-12
   25ccc:	df000215 	stw	fp,8(sp)
   25cd0:	df000204 	addi	fp,sp,8
   25cd4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   25cd8:	e0bfff17 	ldw	r2,-4(fp)
   25cdc:	10800317 	ldw	r2,12(r2)
   25ce0:	10800404 	addi	r2,r2,16
   25ce4:	10800037 	ldwio	r2,0(r2)
   25ce8:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   25cec:	e0fffe17 	ldw	r3,-8(fp)
   25cf0:	00bff7c4 	movi	r2,-33
   25cf4:	1884703a 	and	r2,r3,r2
   25cf8:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   25cfc:	e0bfff17 	ldw	r2,-4(fp)
   25d00:	10800317 	ldw	r2,12(r2)
   25d04:	10800404 	addi	r2,r2,16
   25d08:	e0fffe17 	ldw	r3,-8(fp)
   25d0c:	10c00035 	stwio	r3,0(r2)
}
   25d10:	e037883a 	mov	sp,fp
   25d14:	df000017 	ldw	fp,0(sp)
   25d18:	dec00104 	addi	sp,sp,4
   25d1c:	f800283a 	ret

00025d20 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   25d20:	defffe04 	addi	sp,sp,-8
   25d24:	df000115 	stw	fp,4(sp)
   25d28:	df000104 	addi	fp,sp,4
   25d2c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   25d30:	e0bfff17 	ldw	r2,-4(fp)
   25d34:	10800784 	addi	r2,r2,30
   25d38:	10800023 	ldbuio	r2,0(r2)
   25d3c:	10803fcc 	andi	r2,r2,255
   25d40:	10801fcc 	andi	r2,r2,127
   25d44:	10000226 	beq	r2,zero,25d50 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   25d48:	00bffec4 	movi	r2,-5
   25d4c:	00000906 	br	25d74 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   25d50:	e0bfff17 	ldw	r2,-4(fp)
   25d54:	108007c4 	addi	r2,r2,31
   25d58:	10800023 	ldbuio	r2,0(r2)
   25d5c:	10803fcc 	andi	r2,r2,255
   25d60:	1080200c 	andi	r2,r2,128
   25d64:	10000226 	beq	r2,zero,25d70 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   25d68:	00bfe244 	movi	r2,-119
   25d6c:	00000106 	br	25d74 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   25d70:	0005883a 	mov	r2,zero
}
   25d74:	e037883a 	mov	sp,fp
   25d78:	df000017 	ldw	fp,0(sp)
   25d7c:	dec00104 	addi	sp,sp,4
   25d80:	f800283a 	ret

00025d84 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   25d84:	defffc04 	addi	sp,sp,-16
   25d88:	dfc00315 	stw	ra,12(sp)
   25d8c:	df000215 	stw	fp,8(sp)
   25d90:	df000204 	addi	fp,sp,8
   25d94:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   25d98:	e13fff17 	ldw	r4,-4(fp)
   25d9c:	d1601a04 	addi	r5,gp,-32664
   25da0:	002c6600 	call	2c660 <alt_find_dev>
   25da4:	e0bffe15 	stw	r2,-8(fp)

  printf("%x", dev->base);
   25da8:	e0bffe17 	ldw	r2,-8(fp)
   25dac:	10800317 	ldw	r2,12(r2)
   25db0:	010000f4 	movhi	r4,3
   25db4:	21031e04 	addi	r4,r4,3192
   25db8:	100b883a 	mov	r5,r2
   25dbc:	0017c440 	call	17c44 <printf>

  if (NULL == dev) {
   25dc0:	e0bffe17 	ldw	r2,-8(fp)
   25dc4:	1000031e 	bne	r2,zero,25dd4 <alt_avalon_sgdma_open+0x50>
    ALT_ERRNO = ENODEV;
   25dc8:	00256dc0 	call	256dc <alt_get_errno>
   25dcc:	00c004c4 	movi	r3,19
   25dd0:	10c00015 	stw	r3,0(r2)
  }

  return dev;
   25dd4:	e0bffe17 	ldw	r2,-8(fp)
}
   25dd8:	e037883a 	mov	sp,fp
   25ddc:	dfc00117 	ldw	ra,4(sp)
   25de0:	df000017 	ldw	fp,0(sp)
   25de4:	dec00204 	addi	sp,sp,8
   25de8:	f800283a 	ret

00025dec <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   25dec:	defff104 	addi	sp,sp,-60
   25df0:	dfc00e15 	stw	ra,56(sp)
   25df4:	df000d15 	stw	fp,52(sp)
   25df8:	df000d04 	addi	fp,sp,52
   25dfc:	e13ffa15 	stw	r4,-24(fp)
   25e00:	e17ffb15 	stw	r5,-20(fp)
   25e04:	e1bffc15 	stw	r6,-16(fp)
   25e08:	e1fffd15 	stw	r7,-12(fp)
   25e0c:	e0c00217 	ldw	r3,8(fp)
   25e10:	e0800617 	ldw	r2,24(fp)
   25e14:	e0fffe0d 	sth	r3,-8(fp)
   25e18:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   25e1c:	e0fffe0b 	ldhu	r3,-8(fp)
   25e20:	e0bfff03 	ldbu	r2,-4(fp)
   25e24:	d8c00015 	stw	r3,0(sp)
   25e28:	e0c00317 	ldw	r3,12(fp)
   25e2c:	d8c00115 	stw	r3,4(sp)
   25e30:	e0c00417 	ldw	r3,16(fp)
   25e34:	d8c00215 	stw	r3,8(sp)
   25e38:	e0c00517 	ldw	r3,20(fp)
   25e3c:	d8c00315 	stw	r3,12(sp)
   25e40:	d8000415 	stw	zero,16(sp)
   25e44:	d8000515 	stw	zero,20(sp)
   25e48:	d8800615 	stw	r2,24(sp)
   25e4c:	e13ffa17 	ldw	r4,-24(fp)
   25e50:	e17ffb17 	ldw	r5,-20(fp)
   25e54:	e1bffc17 	ldw	r6,-16(fp)
   25e58:	e1fffd17 	ldw	r7,-12(fp)
   25e5c:	0025f540 	call	25f54 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   25e60:	e037883a 	mov	sp,fp
   25e64:	dfc00117 	ldw	ra,4(sp)
   25e68:	df000017 	ldw	fp,0(sp)
   25e6c:	dec00204 	addi	sp,sp,8
   25e70:	f800283a 	ret

00025e74 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   25e74:	defffc04 	addi	sp,sp,-16
   25e78:	df000315 	stw	fp,12(sp)
   25e7c:	df000304 	addi	fp,sp,12
   25e80:	e13ffe15 	stw	r4,-8(fp)
   25e84:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   25e88:	e0bffe17 	ldw	r2,-8(fp)
   25e8c:	10800317 	ldw	r2,12(r2)
   25e90:	10800404 	addi	r2,r2,16
   25e94:	10800037 	ldwio	r2,0(r2)
   25e98:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   25e9c:	e0fffd17 	ldw	r3,-12(fp)
   25ea0:	00a00434 	movhi	r2,32784
   25ea4:	10bfffc4 	addi	r2,r2,-1
   25ea8:	1884703a 	and	r2,r3,r2
   25eac:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   25eb0:	e0bfff17 	ldw	r2,-4(fp)
   25eb4:	1004953a 	slli	r2,r2,20
   25eb8:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   25ebc:	e0bffd17 	ldw	r2,-12(fp)
   25ec0:	1884b03a 	or	r2,r3,r2
   25ec4:	10800134 	orhi	r2,r2,4
   25ec8:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   25ecc:	e0bffe17 	ldw	r2,-8(fp)
   25ed0:	10800317 	ldw	r2,12(r2)
   25ed4:	10800404 	addi	r2,r2,16
   25ed8:	e0fffd17 	ldw	r3,-12(fp)
   25edc:	10c00035 	stwio	r3,0(r2)
  
  return;
   25ee0:	0001883a 	nop
}
   25ee4:	e037883a 	mov	sp,fp
   25ee8:	df000017 	ldw	fp,0(sp)
   25eec:	dec00104 	addi	sp,sp,4
   25ef0:	f800283a 	ret

00025ef4 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   25ef4:	defffd04 	addi	sp,sp,-12
   25ef8:	df000215 	stw	fp,8(sp)
   25efc:	df000204 	addi	fp,sp,8
   25f00:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   25f04:	e0bfff17 	ldw	r2,-4(fp)
   25f08:	10800317 	ldw	r2,12(r2)
   25f0c:	10800404 	addi	r2,r2,16
   25f10:	10800037 	ldwio	r2,0(r2)
   25f14:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   25f18:	e0fffe17 	ldw	r3,-8(fp)
   25f1c:	00bfff34 	movhi	r2,65532
   25f20:	10bfffc4 	addi	r2,r2,-1
   25f24:	1884703a 	and	r2,r3,r2
   25f28:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   25f2c:	e0bfff17 	ldw	r2,-4(fp)
   25f30:	10800317 	ldw	r2,12(r2)
   25f34:	10800404 	addi	r2,r2,16
   25f38:	e0fffe17 	ldw	r3,-8(fp)
   25f3c:	10c00035 	stwio	r3,0(r2)
  
  return;
   25f40:	0001883a 	nop
}
   25f44:	e037883a 	mov	sp,fp
   25f48:	df000017 	ldw	fp,0(sp)
   25f4c:	dec00104 	addi	sp,sp,4
   25f50:	f800283a 	ret

00025f54 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   25f54:	defff804 	addi	sp,sp,-32
   25f58:	dfc00715 	stw	ra,28(sp)
   25f5c:	df000615 	stw	fp,24(sp)
   25f60:	df000604 	addi	fp,sp,24
   25f64:	e13ffa15 	stw	r4,-24(fp)
   25f68:	e17ffb15 	stw	r5,-20(fp)
   25f6c:	e1bffc15 	stw	r6,-16(fp)
   25f70:	e1fffd15 	stw	r7,-12(fp)
   25f74:	e0c00217 	ldw	r3,8(fp)
   25f78:	e0800817 	ldw	r2,32(fp)
   25f7c:	e0fffe0d 	sth	r3,-8(fp)
   25f80:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   25f84:	e0bffb17 	ldw	r2,-20(fp)
   25f88:	108007c4 	addi	r2,r2,31
   25f8c:	e0fffb17 	ldw	r3,-20(fp)
   25f90:	18c007c3 	ldbu	r3,31(r3)
   25f94:	19003fcc 	andi	r4,r3,255
   25f98:	00ffdfc4 	movi	r3,-129
   25f9c:	20c6703a 	and	r3,r4,r3
   25fa0:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   25fa4:	e0bffa17 	ldw	r2,-24(fp)
   25fa8:	e0fffc17 	ldw	r3,-16(fp)
   25fac:	18c03fcc 	andi	r3,r3,255
   25fb0:	11000003 	ldbu	r4,0(r2)
   25fb4:	2008703a 	and	r4,r4,zero
   25fb8:	20c6b03a 	or	r3,r4,r3
   25fbc:	10c00005 	stb	r3,0(r2)
   25fc0:	e0fffc17 	ldw	r3,-16(fp)
   25fc4:	1806d23a 	srli	r3,r3,8
   25fc8:	18c03fcc 	andi	r3,r3,255
   25fcc:	11000043 	ldbu	r4,1(r2)
   25fd0:	2008703a 	and	r4,r4,zero
   25fd4:	20c6b03a 	or	r3,r4,r3
   25fd8:	10c00045 	stb	r3,1(r2)
   25fdc:	e0fffc17 	ldw	r3,-16(fp)
   25fe0:	1806d43a 	srli	r3,r3,16
   25fe4:	18c03fcc 	andi	r3,r3,255
   25fe8:	11000083 	ldbu	r4,2(r2)
   25fec:	2008703a 	and	r4,r4,zero
   25ff0:	20c6b03a 	or	r3,r4,r3
   25ff4:	10c00085 	stb	r3,2(r2)
   25ff8:	e0fffc17 	ldw	r3,-16(fp)
   25ffc:	1806d63a 	srli	r3,r3,24
   26000:	110000c3 	ldbu	r4,3(r2)
   26004:	2008703a 	and	r4,r4,zero
   26008:	20c6b03a 	or	r3,r4,r3
   2600c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   26010:	e0bffa17 	ldw	r2,-24(fp)
   26014:	e0fffd17 	ldw	r3,-12(fp)
   26018:	18c03fcc 	andi	r3,r3,255
   2601c:	11000203 	ldbu	r4,8(r2)
   26020:	2008703a 	and	r4,r4,zero
   26024:	20c6b03a 	or	r3,r4,r3
   26028:	10c00205 	stb	r3,8(r2)
   2602c:	e0fffd17 	ldw	r3,-12(fp)
   26030:	1806d23a 	srli	r3,r3,8
   26034:	18c03fcc 	andi	r3,r3,255
   26038:	11000243 	ldbu	r4,9(r2)
   2603c:	2008703a 	and	r4,r4,zero
   26040:	20c6b03a 	or	r3,r4,r3
   26044:	10c00245 	stb	r3,9(r2)
   26048:	e0fffd17 	ldw	r3,-12(fp)
   2604c:	1806d43a 	srli	r3,r3,16
   26050:	18c03fcc 	andi	r3,r3,255
   26054:	11000283 	ldbu	r4,10(r2)
   26058:	2008703a 	and	r4,r4,zero
   2605c:	20c6b03a 	or	r3,r4,r3
   26060:	10c00285 	stb	r3,10(r2)
   26064:	e0fffd17 	ldw	r3,-12(fp)
   26068:	1806d63a 	srli	r3,r3,24
   2606c:	110002c3 	ldbu	r4,11(r2)
   26070:	2008703a 	and	r4,r4,zero
   26074:	20c6b03a 	or	r3,r4,r3
   26078:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   2607c:	e0bffa17 	ldw	r2,-24(fp)
   26080:	e0fffb17 	ldw	r3,-20(fp)
   26084:	18c03fcc 	andi	r3,r3,255
   26088:	11000403 	ldbu	r4,16(r2)
   2608c:	2008703a 	and	r4,r4,zero
   26090:	20c6b03a 	or	r3,r4,r3
   26094:	10c00405 	stb	r3,16(r2)
   26098:	e0fffb17 	ldw	r3,-20(fp)
   2609c:	1806d23a 	srli	r3,r3,8
   260a0:	18c03fcc 	andi	r3,r3,255
   260a4:	11000443 	ldbu	r4,17(r2)
   260a8:	2008703a 	and	r4,r4,zero
   260ac:	20c6b03a 	or	r3,r4,r3
   260b0:	10c00445 	stb	r3,17(r2)
   260b4:	e0fffb17 	ldw	r3,-20(fp)
   260b8:	1806d43a 	srli	r3,r3,16
   260bc:	18c03fcc 	andi	r3,r3,255
   260c0:	11000483 	ldbu	r4,18(r2)
   260c4:	2008703a 	and	r4,r4,zero
   260c8:	20c6b03a 	or	r3,r4,r3
   260cc:	10c00485 	stb	r3,18(r2)
   260d0:	e0fffb17 	ldw	r3,-20(fp)
   260d4:	1806d63a 	srli	r3,r3,24
   260d8:	110004c3 	ldbu	r4,19(r2)
   260dc:	2008703a 	and	r4,r4,zero
   260e0:	20c6b03a 	or	r3,r4,r3
   260e4:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   260e8:	e0bffa17 	ldw	r2,-24(fp)
   260ec:	10c00103 	ldbu	r3,4(r2)
   260f0:	1806703a 	and	r3,r3,zero
   260f4:	10c00105 	stb	r3,4(r2)
   260f8:	10c00143 	ldbu	r3,5(r2)
   260fc:	1806703a 	and	r3,r3,zero
   26100:	10c00145 	stb	r3,5(r2)
   26104:	10c00183 	ldbu	r3,6(r2)
   26108:	1806703a 	and	r3,r3,zero
   2610c:	10c00185 	stb	r3,6(r2)
   26110:	10c001c3 	ldbu	r3,7(r2)
   26114:	1806703a 	and	r3,r3,zero
   26118:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   2611c:	e0bffa17 	ldw	r2,-24(fp)
   26120:	10c00303 	ldbu	r3,12(r2)
   26124:	1806703a 	and	r3,r3,zero
   26128:	10c00305 	stb	r3,12(r2)
   2612c:	10c00343 	ldbu	r3,13(r2)
   26130:	1806703a 	and	r3,r3,zero
   26134:	10c00345 	stb	r3,13(r2)
   26138:	10c00383 	ldbu	r3,14(r2)
   2613c:	1806703a 	and	r3,r3,zero
   26140:	10c00385 	stb	r3,14(r2)
   26144:	10c003c3 	ldbu	r3,15(r2)
   26148:	1806703a 	and	r3,r3,zero
   2614c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   26150:	e0bffa17 	ldw	r2,-24(fp)
   26154:	10c00503 	ldbu	r3,20(r2)
   26158:	1806703a 	and	r3,r3,zero
   2615c:	10c00505 	stb	r3,20(r2)
   26160:	10c00543 	ldbu	r3,21(r2)
   26164:	1806703a 	and	r3,r3,zero
   26168:	10c00545 	stb	r3,21(r2)
   2616c:	10c00583 	ldbu	r3,22(r2)
   26170:	1806703a 	and	r3,r3,zero
   26174:	10c00585 	stb	r3,22(r2)
   26178:	10c005c3 	ldbu	r3,23(r2)
   2617c:	1806703a 	and	r3,r3,zero
   26180:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   26184:	e0bffa17 	ldw	r2,-24(fp)
   26188:	e0fffe0b 	ldhu	r3,-8(fp)
   2618c:	18c03fcc 	andi	r3,r3,255
   26190:	11000603 	ldbu	r4,24(r2)
   26194:	2008703a 	and	r4,r4,zero
   26198:	20c6b03a 	or	r3,r4,r3
   2619c:	10c00605 	stb	r3,24(r2)
   261a0:	e0fffe0b 	ldhu	r3,-8(fp)
   261a4:	1806d23a 	srli	r3,r3,8
   261a8:	18ffffcc 	andi	r3,r3,65535
   261ac:	11000643 	ldbu	r4,25(r2)
   261b0:	2008703a 	and	r4,r4,zero
   261b4:	20c6b03a 	or	r3,r4,r3
   261b8:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   261bc:	e0bffa17 	ldw	r2,-24(fp)
   261c0:	10c00703 	ldbu	r3,28(r2)
   261c4:	1806703a 	and	r3,r3,zero
   261c8:	10c00705 	stb	r3,28(r2)
   261cc:	10c00743 	ldbu	r3,29(r2)
   261d0:	1806703a 	and	r3,r3,zero
   261d4:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   261d8:	e0bffa17 	ldw	r2,-24(fp)
   261dc:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   261e0:	e0800617 	ldw	r2,24(fp)
   261e4:	1007883a 	mov	r3,r2
   261e8:	e0bffa17 	ldw	r2,-24(fp)
   261ec:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   261f0:	e0800717 	ldw	r2,28(fp)
   261f4:	1007883a 	mov	r3,r2
   261f8:	e0bffa17 	ldw	r2,-24(fp)
   261fc:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   26200:	e0800317 	ldw	r2,12(fp)
   26204:	10000226 	beq	r2,zero,26210 <alt_avalon_sgdma_construct_descriptor_burst+0x2bc>
   26208:	00ffe044 	movi	r3,-127
   2620c:	00000106 	br	26214 <alt_avalon_sgdma_construct_descriptor_burst+0x2c0>
   26210:	00ffe004 	movi	r3,-128
   26214:	e0800417 	ldw	r2,16(fp)
   26218:	10000226 	beq	r2,zero,26224 <alt_avalon_sgdma_construct_descriptor_burst+0x2d0>
   2621c:	00800084 	movi	r2,2
   26220:	00000106 	br	26228 <alt_avalon_sgdma_construct_descriptor_burst+0x2d4>
   26224:	0005883a 	mov	r2,zero
   26228:	1884b03a 	or	r2,r3,r2
   2622c:	1007883a 	mov	r3,r2
   26230:	e0800517 	ldw	r2,20(fp)
   26234:	10000226 	beq	r2,zero,26240 <alt_avalon_sgdma_construct_descriptor_burst+0x2ec>
   26238:	00800104 	movi	r2,4
   2623c:	00000106 	br	26244 <alt_avalon_sgdma_construct_descriptor_burst+0x2f0>
   26240:	0005883a 	mov	r2,zero
   26244:	1884b03a 	or	r2,r3,r2
   26248:	1007883a 	mov	r3,r2
   2624c:	e0bfff03 	ldbu	r2,-4(fp)
   26250:	10000426 	beq	r2,zero,26264 <alt_avalon_sgdma_construct_descriptor_burst+0x310>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   26254:	e0bfff03 	ldbu	r2,-4(fp)
   26258:	108003cc 	andi	r2,r2,15
   2625c:	100490fa 	slli	r2,r2,3
   26260:	00000106 	br	26268 <alt_avalon_sgdma_construct_descriptor_burst+0x314>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   26264:	0005883a 	mov	r2,zero
   26268:	1884b03a 	or	r2,r3,r2
   2626c:	1007883a 	mov	r3,r2
   26270:	e0bffa17 	ldw	r2,-24(fp)
   26274:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
   26278:	e13ffa17 	ldw	r4,-24(fp)
   2627c:	01400804 	movi	r5,32
   26280:	0021a140 	call	21a14 <alt_remap_uncached>
}
   26284:	e037883a 	mov	sp,fp
   26288:	dfc00117 	ldw	ra,4(sp)
   2628c:	df000017 	ldw	fp,0(sp)
   26290:	dec00204 	addi	sp,sp,8
   26294:	f800283a 	ret

00026298 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   26298:	defff804 	addi	sp,sp,-32
   2629c:	dfc00715 	stw	ra,28(sp)
   262a0:	df000615 	stw	fp,24(sp)
   262a4:	df000604 	addi	fp,sp,24
   262a8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   262ac:	e0bfff17 	ldw	r2,-4(fp)
   262b0:	e0bffa15 	stw	r2,-24(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   262b4:	e0bffa17 	ldw	r2,-24(fp)
   262b8:	10800317 	ldw	r2,12(r2)
   262bc:	10800404 	addi	r2,r2,16
   262c0:	e0fffa17 	ldw	r3,-24(fp)
   262c4:	18c00317 	ldw	r3,12(r3)
   262c8:	18c00404 	addi	r3,r3,16
   262cc:	18c00037 	ldwio	r3,0(r3)
   262d0:	18e00034 	orhi	r3,r3,32768
   262d4:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   262d8:	e0bffa17 	ldw	r2,-24(fp)
   262dc:	10800317 	ldw	r2,12(r2)
   262e0:	10800404 	addi	r2,r2,16
   262e4:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   262e8:	e0bffa17 	ldw	r2,-24(fp)
   262ec:	10800917 	ldw	r2,36(r2)
   262f0:	10001d26 	beq	r2,zero,26368 <alt_avalon_sgdma_irq+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   262f4:	0005303a 	rdctl	r2,status
   262f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   262fc:	e0fffc17 	ldw	r3,-16(fp)
   26300:	00bfff84 	movi	r2,-2
   26304:	1884703a 	and	r2,r3,r2
   26308:	1001703a 	wrctl	status,r2
  
  return context;
   2630c:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
   26310:	e0bffb15 	stw	r2,-20(fp)
    (dev->callback)(dev->callback_context);
   26314:	e0bffa17 	ldw	r2,-24(fp)
   26318:	10c00917 	ldw	r3,36(r2)
   2631c:	e0bffa17 	ldw	r2,-24(fp)
   26320:	10800a17 	ldw	r2,40(r2)
   26324:	1009883a 	mov	r4,r2
   26328:	183ee83a 	callr	r3
   2632c:	e0bffb17 	ldw	r2,-20(fp)
   26330:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   26334:	0005303a 	rdctl	r2,status
   26338:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2633c:	e0fffe17 	ldw	r3,-8(fp)
   26340:	00bfff84 	movi	r2,-2
   26344:	1884703a 	and	r2,r3,r2
   26348:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2634c:	e0bffd17 	ldw	r2,-12(fp)
   26350:	1080004c 	andi	r2,r2,1
   26354:	e0fffe17 	ldw	r3,-8(fp)
   26358:	1884b03a 	or	r2,r3,r2
   2635c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
   26360:	e0bffe17 	ldw	r2,-8(fp)
   26364:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   26368:	e037883a 	mov	sp,fp
   2636c:	dfc00117 	ldw	ra,4(sp)
   26370:	df000017 	ldw	fp,0(sp)
   26374:	dec00204 	addi	sp,sp,8
   26378:	f800283a 	ret

0002637c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   2637c:	defffa04 	addi	sp,sp,-24
   26380:	dfc00515 	stw	ra,20(sp)
   26384:	df000415 	stw	fp,16(sp)
   26388:	df000404 	addi	fp,sp,16
   2638c:	e13ffd15 	stw	r4,-12(fp)
   26390:	e17ffe15 	stw	r5,-8(fp)
   26394:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   26398:	e0bffd17 	ldw	r2,-12(fp)
   2639c:	10800317 	ldw	r2,12(r2)
   263a0:	10800404 	addi	r2,r2,16
   263a4:	00c00074 	movhi	r3,1
   263a8:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   263ac:	e0bffd17 	ldw	r2,-12(fp)
   263b0:	10800317 	ldw	r2,12(r2)
   263b4:	10800404 	addi	r2,r2,16
   263b8:	00c00074 	movhi	r3,1
   263bc:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   263c0:	e0bffd17 	ldw	r2,-12(fp)
   263c4:	10800317 	ldw	r2,12(r2)
   263c8:	10800404 	addi	r2,r2,16
   263cc:	0007883a 	mov	r3,zero
   263d0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   263d4:	e0bffd17 	ldw	r2,-12(fp)
   263d8:	10800317 	ldw	r2,12(r2)
   263dc:	00c03fc4 	movi	r3,255
   263e0:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   263e4:	e13ffd17 	ldw	r4,-12(fp)
   263e8:	d1601a04 	addi	r5,gp,-32664
   263ec:	002c5080 	call	2c508 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   263f0:	d8000015 	stw	zero,0(sp)
   263f4:	e13ffe17 	ldw	r4,-8(fp)
   263f8:	e17fff17 	ldw	r5,-4(fp)
   263fc:	018000b4 	movhi	r6,2
   26400:	3198a604 	addi	r6,r6,25240
   26404:	e1fffd17 	ldw	r7,-12(fp)
   26408:	002c1f80 	call	2c1f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   2640c:	e037883a 	mov	sp,fp
   26410:	dfc00117 	ldw	ra,4(sp)
   26414:	df000017 	ldw	fp,0(sp)
   26418:	dec00204 	addi	sp,sp,8
   2641c:	f800283a 	ret

00026420 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   26420:	defff904 	addi	sp,sp,-28
   26424:	dfc00615 	stw	ra,24(sp)
   26428:	df000515 	stw	fp,20(sp)
   2642c:	df000504 	addi	fp,sp,20
   26430:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   26434:	0007883a 	mov	r3,zero
   26438:	e0bfff17 	ldw	r2,-4(fp)
   2643c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   26440:	e0bfff17 	ldw	r2,-4(fp)
   26444:	10800104 	addi	r2,r2,4
   26448:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2644c:	0005303a 	rdctl	r2,status
   26450:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26454:	e0fffc17 	ldw	r3,-16(fp)
   26458:	00bfff84 	movi	r2,-2
   2645c:	1884703a 	and	r2,r3,r2
   26460:	1001703a 	wrctl	status,r2
  
  return context;
   26464:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   26468:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   2646c:	0021c200 	call	21c20 <alt_tick>
   26470:	e0bffb17 	ldw	r2,-20(fp)
   26474:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   26478:	0005303a 	rdctl	r2,status
   2647c:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   26480:	e0fffe17 	ldw	r3,-8(fp)
   26484:	00bfff84 	movi	r2,-2
   26488:	1884703a 	and	r2,r3,r2
   2648c:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   26490:	e0bffd17 	ldw	r2,-12(fp)
   26494:	1080004c 	andi	r2,r2,1
   26498:	e0fffe17 	ldw	r3,-8(fp)
   2649c:	1884b03a 	or	r2,r3,r2
   264a0:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
   264a4:	e0bffe17 	ldw	r2,-8(fp)
   264a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   264ac:	e037883a 	mov	sp,fp
   264b0:	dfc00117 	ldw	ra,4(sp)
   264b4:	df000017 	ldw	fp,0(sp)
   264b8:	dec00204 	addi	sp,sp,8
   264bc:	f800283a 	ret

000264c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   264c0:	defff804 	addi	sp,sp,-32
   264c4:	dfc00715 	stw	ra,28(sp)
   264c8:	df000615 	stw	fp,24(sp)
   264cc:	df000604 	addi	fp,sp,24
   264d0:	e13ffc15 	stw	r4,-16(fp)
   264d4:	e17ffd15 	stw	r5,-12(fp)
   264d8:	e1bffe15 	stw	r6,-8(fp)
   264dc:	e1ffff15 	stw	r7,-4(fp)
   264e0:	e0bfff17 	ldw	r2,-4(fp)
   264e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   264e8:	008000f4 	movhi	r2,3
   264ec:	109bfe04 	addi	r2,r2,28664
   264f0:	10800017 	ldw	r2,0(r2)
   264f4:	1000041e 	bne	r2,zero,26508 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   264f8:	008000f4 	movhi	r2,3
   264fc:	109bfe04 	addi	r2,r2,28664
   26500:	e0fffb17 	ldw	r3,-20(fp)
   26504:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   26508:	e0bffc17 	ldw	r2,-16(fp)
   2650c:	10800104 	addi	r2,r2,4
   26510:	00c001c4 	movi	r3,7
   26514:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   26518:	d8000015 	stw	zero,0(sp)
   2651c:	e13ffd17 	ldw	r4,-12(fp)
   26520:	e17ffe17 	ldw	r5,-8(fp)
   26524:	018000b4 	movhi	r6,2
   26528:	31990804 	addi	r6,r6,25632
   2652c:	e1fffc17 	ldw	r7,-16(fp)
   26530:	002c1f80 	call	2c1f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   26534:	e037883a 	mov	sp,fp
   26538:	dfc00117 	ldw	ra,4(sp)
   2653c:	df000017 	ldw	fp,0(sp)
   26540:	dec00204 	addi	sp,sp,8
   26544:	f800283a 	ret

00026548 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
   26548:	defffb04 	addi	sp,sp,-20
   2654c:	df000115 	stw	fp,4(sp)
   26550:	df000104 	addi	fp,sp,4
   26554:	e1400115 	stw	r5,4(fp)
   26558:	e1800215 	stw	r6,8(fp)
   2655c:	e1c00315 	stw	r7,12(fp)
   26560:	e13fff15 	stw	r4,-4(fp)
   26564:	e037883a 	mov	sp,fp
   26568:	df000017 	ldw	fp,0(sp)
   2656c:	dec00404 	addi	sp,sp,16
   26570:	f800283a 	ret

00026574 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
   26574:	defffb04 	addi	sp,sp,-20
   26578:	df000415 	stw	fp,16(sp)
   2657c:	df000404 	addi	fp,sp,16
   26580:	e13ffc15 	stw	r4,-16(fp)
   26584:	e17ffd15 	stw	r5,-12(fp)
   26588:	e1bffe15 	stw	r6,-8(fp)
   2658c:	e1ffff15 	stw	r7,-4(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
   26590:	e0fffd17 	ldw	r3,-12(fp)
   26594:	e0bffc17 	ldw	r2,-16(fp)
   26598:	10c00015 	stw	r3,0(r2)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
   2659c:	e0fffe17 	ldw	r3,-8(fp)
   265a0:	e0bffc17 	ldw	r2,-16(fp)
   265a4:	10c00115 	stw	r3,4(r2)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
   265a8:	e0ffff17 	ldw	r3,-4(fp)
   265ac:	e0bffc17 	ldw	r2,-16(fp)
   265b0:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
   265b4:	e0c00117 	ldw	r3,4(fp)
   265b8:	e0bffc17 	ldw	r2,-16(fp)
   265bc:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
   265c0:	0005883a 	mov	r2,zero
}
   265c4:	e037883a 	mov	sp,fp
   265c8:	df000017 	ldw	fp,0(sp)
   265cc:	dec00104 	addi	sp,sp,4
   265d0:	f800283a 	ret

000265d4 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
   265d4:	defffa04 	addi	sp,sp,-24
   265d8:	dfc00515 	stw	ra,20(sp)
   265dc:	df000415 	stw	fp,16(sp)
   265e0:	df000404 	addi	fp,sp,16
   265e4:	e13ffe15 	stw	r4,-8(fp)
   265e8:	e17fff15 	stw	r5,-4(fp)

  alt_32 timeout;
  alt_u8 result = 0;
   265ec:	e03ffd05 	stb	zero,-12(fp)
  alt_u16 actualBytesTransferred;
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
   265f0:	e03ffc15 	stw	zero,-16(fp)
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
   265f4:	00000e06 	br	26630 <tse_mac_sTxWrite+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
   265f8:	e0fffc17 	ldw	r3,-16(fp)
   265fc:	008003f4 	movhi	r2,15
   26600:	10909004 	addi	r2,r2,16960
   26604:	1885003a 	cmpeq	r2,r3,r2
   26608:	e0fffc17 	ldw	r3,-16(fp)
   2660c:	18c00044 	addi	r3,r3,1
   26610:	e0fffc15 	stw	r3,-16(fp)
   26614:	10803fcc 	andi	r2,r2,255
   26618:	10000526 	beq	r2,zero,26630 <tse_mac_sTxWrite+0x5c>
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
   2661c:	010000f4 	movhi	r4,3
   26620:	21031f04 	addi	r4,r4,3196
   26624:	0017eb00 	call	17eb0 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
   26628:	00bffa84 	movi	r2,-22
   2662c:	00001c06 	br	266a0 <tse_mac_sTxWrite+0xcc>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
   26630:	e0bffe17 	ldw	r2,-8(fp)
   26634:	10800117 	ldw	r2,4(r2)
   26638:	10800317 	ldw	r2,12(r2)
   2663c:	10800037 	ldwio	r2,0(r2)
   26640:	1080040c 	andi	r2,r2,16
   26644:	103fec1e 	bne	r2,zero,265f8 <tse_mac_sTxWrite+0x24>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
   26648:	e0bffe17 	ldw	r2,-8(fp)
   2664c:	10800117 	ldw	r2,4(r2)
   26650:	10800317 	ldw	r2,12(r2)
   26654:	10800404 	addi	r2,r2,16
   26658:	0007883a 	mov	r3,zero
   2665c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
   26660:	e0bffe17 	ldw	r2,-8(fp)
   26664:	10800117 	ldw	r2,4(r2)
   26668:	10800317 	ldw	r2,12(r2)
   2666c:	00c03fc4 	movi	r3,255
   26670:	10c00035 	stwio	r3,0(r2)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
                mi->tx_sgdma, 
   26674:	e0bffe17 	ldw	r2,-8(fp)
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
   26678:	10800117 	ldw	r2,4(r2)
   2667c:	1009883a 	mov	r4,r2
   26680:	e17fff17 	ldw	r5,-4(fp)
   26684:	00258500 	call	25850 <alt_avalon_sgdma_do_sync_transfer>
   26688:	e0bffd05 	stb	r2,-12(fp)
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
   2668c:	e0bfff17 	ldw	r2,-4(fp)
   26690:	10800704 	addi	r2,r2,28
   26694:	10800037 	ldwio	r2,0(r2)
   26698:	e0bffd8d 	sth	r2,-10(fp)

  return actualBytesTransferred;
   2669c:	e0bffd8b 	ldhu	r2,-10(fp)
}
   266a0:	e037883a 	mov	sp,fp
   266a4:	dfc00117 	ldw	ra,4(sp)
   266a8:	df000017 	ldw	fp,0(sp)
   266ac:	dec00204 	addi	sp,sp,8
   266b0:	f800283a 	ret

000266b4 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
   266b4:	defffa04 	addi	sp,sp,-24
   266b8:	dfc00515 	stw	ra,20(sp)
   266bc:	df000415 	stw	fp,16(sp)
   266c0:	df000404 	addi	fp,sp,16
   266c4:	e13ffe15 	stw	r4,-8(fp)
   266c8:	e17fff15 	stw	r5,-4(fp)
  alt_32 timeout;
  
  alt_u8 result = 0;
   266cc:	e03ffd05 	stb	zero,-12(fp)
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
   266d0:	e03ffc15 	stw	zero,-16(fp)
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
   266d4:	00000e06 	br	26710 <tse_mac_aRxRead+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
   266d8:	e0fffc17 	ldw	r3,-16(fp)
   266dc:	008003f4 	movhi	r2,15
   266e0:	10909004 	addi	r2,r2,16960
   266e4:	1885003a 	cmpeq	r2,r3,r2
   266e8:	e0fffc17 	ldw	r3,-16(fp)
   266ec:	18c00044 	addi	r3,r3,1
   266f0:	e0fffc15 	stw	r3,-16(fp)
   266f4:	10803fcc 	andi	r2,r2,255
   266f8:	10000526 	beq	r2,zero,26710 <tse_mac_aRxRead+0x5c>
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
   266fc:	010000f4 	movhi	r4,3
   26700:	21032604 	addi	r4,r4,3224
   26704:	0017eb00 	call	17eb0 <puts>
        return ENP_RESOURCE;  // avoid being stuck here
   26708:	00bffa84 	movi	r2,-22
   2670c:	00000d06 	br	26744 <tse_mac_aRxRead+0x90>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
   26710:	e0bffe17 	ldw	r2,-8(fp)
   26714:	10800217 	ldw	r2,8(r2)
   26718:	10800317 	ldw	r2,12(r2)
   2671c:	10800037 	ldwio	r2,0(r2)
   26720:	1080040c 	andi	r2,r2,16
   26724:	103fec1e 	bne	r2,zero,266d8 <tse_mac_aRxRead+0x24>
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
                mi->rx_sgdma, 
   26728:	e0bffe17 	ldw	r2,-8(fp)
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
   2672c:	10800217 	ldw	r2,8(r2)
   26730:	1009883a 	mov	r4,r2
   26734:	e17fff17 	ldw	r5,-4(fp)
   26738:	002572c0 	call	2572c <alt_avalon_sgdma_do_async_transfer>
   2673c:	e0bffd05 	stb	r2,-12(fp)
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);

 
  return SUCCESS;
   26740:	0005883a 	mov	r2,zero
}
   26744:	e037883a 	mov	sp,fp
   26748:	dfc00117 	ldw	ra,4(sp)
   2674c:	df000017 	ldw	fp,0(sp)
   26750:	dec00204 	addi	sp,sp,8
   26754:	f800283a 	ret

00026758 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
   26758:	defffc04 	addi	sp,sp,-16
   2675c:	df000315 	stw	fp,12(sp)
   26760:	df000304 	addi	fp,sp,12
   26764:	e13fff15 	stw	r4,-4(fp)
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   26768:	e0bfff17 	ldw	r2,-4(fp)
   2676c:	10800204 	addi	r2,r2,8
   26770:	10800037 	ldwio	r2,0(r2)
   26774:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
   26778:	e0bfff17 	ldw	r2,-4(fp)
   2677c:	10800204 	addi	r2,r2,8
   26780:	00c80204 	movi	r3,8200
   26784:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
   26788:	e03ffd15 	stw	zero,-12(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
   2678c:	00000306 	br	2679c <tse_mac_SwReset+0x44>
   26790:	e0bffd17 	ldw	r2,-12(fp)
   26794:	10800044 	addi	r2,r2,1
   26798:	e0bffd15 	stw	r2,-12(fp)
   2679c:	e0bfff17 	ldw	r2,-4(fp)
   267a0:	10800204 	addi	r2,r2,8
   267a4:	10800037 	ldwio	r2,0(r2)
   267a8:	1088000c 	andi	r2,r2,8192
   267ac:	10000326 	beq	r2,zero,267bc <tse_mac_SwReset+0x64>
   267b0:	e0bffd17 	ldw	r2,-12(fp)
   267b4:	1089c410 	cmplti	r2,r2,10000
   267b8:	103ff51e 	bne	r2,zero,26790 <tse_mac_SwReset+0x38>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
   267bc:	e0bfff17 	ldw	r2,-4(fp)
   267c0:	10800204 	addi	r2,r2,8
   267c4:	e0fffe17 	ldw	r3,-8(fp)
   267c8:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
   267cc:	0005883a 	mov	r2,zero
}
   267d0:	e037883a 	mov	sp,fp
   267d4:	df000017 	ldw	fp,0(sp)
   267d8:	dec00104 	addi	sp,sp,4
   267dc:	f800283a 	ret

000267e0 <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
   267e0:	defffd04 	addi	sp,sp,-12
   267e4:	df000215 	stw	fp,8(sp)
   267e8:	df000204 	addi	fp,sp,8
   267ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   267f0:	e0bfff17 	ldw	r2,-4(fp)
   267f4:	10800204 	addi	r2,r2,8
   267f8:	10800037 	ldwio	r2,0(r2)
   267fc:	e0bffe15 	stw	r2,-8(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
   26800:	e0fffe17 	ldw	r3,-8(fp)
   26804:	00bffdc4 	movi	r2,-9
   26808:	1884703a 	and	r2,r3,r2
   2680c:	e0bffe15 	stw	r2,-8(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
   26810:	e0bfff17 	ldw	r2,-4(fp)
   26814:	10800204 	addi	r2,r2,8
   26818:	e0fffe17 	ldw	r3,-8(fp)
   2681c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   26820:	0005883a 	mov	r2,zero
}
   26824:	e037883a 	mov	sp,fp
   26828:	df000017 	ldw	fp,0(sp)
   2682c:	dec00104 	addi	sp,sp,4
   26830:	f800283a 	ret

00026834 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
   26834:	defffd04 	addi	sp,sp,-12
   26838:	df000215 	stw	fp,8(sp)
   2683c:	df000204 	addi	fp,sp,8
   26840:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   26844:	e0bfff17 	ldw	r2,-4(fp)
   26848:	10800204 	addi	r2,r2,8
   2684c:	10800037 	ldwio	r2,0(r2)
   26850:	e0bffe15 	stw	r2,-8(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   26854:	e0bffe17 	ldw	r2,-8(fp)
   26858:	10800214 	ori	r2,r2,8
   2685c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
   26860:	e0bfff17 	ldw	r2,-4(fp)
   26864:	10800204 	addi	r2,r2,8
   26868:	e0fffe17 	ldw	r3,-8(fp)
   2686c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   26870:	0005883a 	mov	r2,zero
}
   26874:	e037883a 	mov	sp,fp
   26878:	df000017 	ldw	fp,0(sp)
   2687c:	dec00104 	addi	sp,sp,4
   26880:	f800283a 	ret

00026884 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
   26884:	defffb04 	addi	sp,sp,-20
   26888:	dfc00415 	stw	ra,16(sp)
   2688c:	df000315 	stw	fp,12(sp)
   26890:	dc000215 	stw	r16,8(sp)
   26894:	df000204 	addi	fp,sp,8
   26898:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
   2689c:	e03ffe15 	stw	zero,-8(fp)
   268a0:	00002906 	br	26948 <alt_tse_phy_add_profile+0xc4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
   268a4:	00c00134 	movhi	r3,4
   268a8:	18d38004 	addi	r3,r3,19968
   268ac:	e0bffe17 	ldw	r2,-8(fp)
   268b0:	1085883a 	add	r2,r2,r2
   268b4:	1085883a 	add	r2,r2,r2
   268b8:	1885883a 	add	r2,r3,r2
   268bc:	10800017 	ldw	r2,0(r2)
   268c0:	10c01417 	ldw	r3,80(r2)
   268c4:	e0bfff17 	ldw	r2,-4(fp)
   268c8:	10801417 	ldw	r2,80(r2)
   268cc:	18801b1e 	bne	r3,r2,2693c <alt_tse_phy_add_profile+0xb8>
   268d0:	00c00134 	movhi	r3,4
   268d4:	18d38004 	addi	r3,r3,19968
   268d8:	e0bffe17 	ldw	r2,-8(fp)
   268dc:	1085883a 	add	r2,r2,r2
   268e0:	1085883a 	add	r2,r2,r2
   268e4:	1885883a 	add	r2,r3,r2
   268e8:	10800017 	ldw	r2,0(r2)
   268ec:	10c01503 	ldbu	r3,84(r2)
   268f0:	e0bfff17 	ldw	r2,-4(fp)
   268f4:	10801503 	ldbu	r2,84(r2)
   268f8:	18c03fcc 	andi	r3,r3,255
   268fc:	10803fcc 	andi	r2,r2,255
   26900:	18800e1e 	bne	r3,r2,2693c <alt_tse_phy_add_profile+0xb8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
   26904:	e0bfff17 	ldw	r2,-4(fp)
   26908:	10801417 	ldw	r2,80(r2)
   2690c:	1007883a 	mov	r3,r2
   26910:	e0bfff17 	ldw	r2,-4(fp)
   26914:	10801503 	ldbu	r2,84(r2)
   26918:	10803fcc 	andi	r2,r2,255
   2691c:	010000f4 	movhi	r4,3
   26920:	21032d04 	addi	r4,r4,3252
   26924:	180b883a 	mov	r5,r3
   26928:	100d883a 	mov	r6,r2
   2692c:	0017c440 	call	17c44 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
   26930:	010000f4 	movhi	r4,3
   26934:	21034104 	addi	r4,r4,3332
   26938:	0017eb00 	call	17eb0 <puts>
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
   2693c:	e0bffe17 	ldw	r2,-8(fp)
   26940:	10800044 	addi	r2,r2,1
   26944:	e0bffe15 	stw	r2,-8(fp)
   26948:	d0a8d803 	ldbu	r2,-23712(gp)
   2694c:	10803fcc 	andi	r2,r2,255
   26950:	e0fffe17 	ldw	r3,-8(fp)
   26954:	18bfd316 	blt	r3,r2,268a4 <alt_tse_phy_add_profile+0x20>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
   26958:	d0a8d803 	ldbu	r2,-23712(gp)
   2695c:	14003fcc 	andi	r16,r2,255
   26960:	01001904 	movi	r4,100
   26964:	002d6b80 	call	2d6b8 <malloc>
   26968:	1007883a 	mov	r3,r2
   2696c:	01000134 	movhi	r4,4
   26970:	21138004 	addi	r4,r4,19968
   26974:	8405883a 	add	r2,r16,r16
   26978:	1085883a 	add	r2,r2,r2
   2697c:	2085883a 	add	r2,r4,r2
   26980:	10c00015 	stw	r3,0(r2)
    if(!pphy_profiles[phy_profile_count]) {
   26984:	d0a8d803 	ldbu	r2,-23712(gp)
   26988:	10803fcc 	andi	r2,r2,255
   2698c:	00c00134 	movhi	r3,4
   26990:	18d38004 	addi	r3,r3,19968
   26994:	1085883a 	add	r2,r2,r2
   26998:	1085883a 	add	r2,r2,r2
   2699c:	1885883a 	add	r2,r3,r2
   269a0:	10800017 	ldw	r2,0(r2)
   269a4:	1000081e 	bne	r2,zero,269c8 <alt_tse_phy_add_profile+0x144>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
   269a8:	d0a8d803 	ldbu	r2,-23712(gp)
   269ac:	10803fcc 	andi	r2,r2,255
   269b0:	010000f4 	movhi	r4,3
   269b4:	21035904 	addi	r4,r4,3428
   269b8:	100b883a 	mov	r5,r2
   269bc:	0017c440 	call	17c44 <printf>
        return ALTERA_TSE_MALLOC_FAILED;
   269c0:	00bfffc4 	movi	r2,-1
   269c4:	00002206 	br	26a50 <alt_tse_phy_add_profile+0x1cc>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
   269c8:	d0a8d803 	ldbu	r2,-23712(gp)
   269cc:	10803fcc 	andi	r2,r2,255
   269d0:	00c00134 	movhi	r3,4
   269d4:	18d38004 	addi	r3,r3,19968
   269d8:	1085883a 	add	r2,r2,r2
   269dc:	1085883a 	add	r2,r2,r2
   269e0:	1885883a 	add	r2,r3,r2
   269e4:	10c00017 	ldw	r3,0(r2)
   269e8:	e0bfff17 	ldw	r2,-4(fp)
   269ec:	1809883a 	mov	r4,r3
   269f0:	1007883a 	mov	r3,r2
   269f4:	00801904 	movi	r2,100
   269f8:	180b883a 	mov	r5,r3
   269fc:	100d883a 	mov	r6,r2
   26a00:	0017a440 	call	17a44 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
   26a04:	d0a8d803 	ldbu	r2,-23712(gp)
   26a08:	10803fcc 	andi	r2,r2,255
   26a0c:	00c00134 	movhi	r3,4
   26a10:	18d38004 	addi	r3,r3,19968
   26a14:	1085883a 	add	r2,r2,r2
   26a18:	1085883a 	add	r2,r2,r2
   26a1c:	1885883a 	add	r2,r3,r2
   26a20:	10800017 	ldw	r2,0(r2)
   26a24:	1007883a 	mov	r3,r2
   26a28:	e0bfff17 	ldw	r2,-4(fp)
   26a2c:	1809883a 	mov	r4,r3
   26a30:	100b883a 	mov	r5,r2
   26a34:	002d6e00 	call	2d6e0 <strcpy>
    
    phy_profile_count++;
   26a38:	d0a8d803 	ldbu	r2,-23712(gp)
   26a3c:	10800044 	addi	r2,r2,1
   26a40:	d0a8d805 	stb	r2,-23712(gp)
    
    return phy_profile_count - 1;
   26a44:	d0a8d803 	ldbu	r2,-23712(gp)
   26a48:	10803fcc 	andi	r2,r2,255
   26a4c:	10bfffc4 	addi	r2,r2,-1
}
   26a50:	e037883a 	mov	sp,fp
   26a54:	dfc00217 	ldw	ra,8(sp)
   26a58:	df000117 	ldw	fp,4(sp)
   26a5c:	dc000017 	ldw	r16,0(sp)
   26a60:	dec00304 	addi	sp,sp,12
   26a64:	f800283a 	ret

00026a68 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
   26a68:	defff204 	addi	sp,sp,-56
   26a6c:	dfc00d15 	stw	ra,52(sp)
   26a70:	df000c15 	stw	fp,48(sp)
   26a74:	dc000b15 	stw	r16,44(sp)
   26a78:	df000b04 	addi	fp,sp,44
   26a7c:	e13ffc15 	stw	r4,-16(fp)
   26a80:	e17ffd15 	stw	r5,-12(fp)
   26a84:	e1bffe15 	stw	r6,-8(fp)
   26a88:	e1ffff15 	stw	r7,-4(fp)

	int i;
	int loop_end;
	
	alt_tse_system_mac					*pmac	= psys_mac;
   26a8c:	e0bffc17 	ldw	r2,-16(fp)
   26a90:	e0bffb15 	stw	r2,-20(fp)
	alt_tse_system_sgdma				*psgdma	= psys_sgdma;
   26a94:	e0bffd17 	ldw	r2,-12(fp)
   26a98:	e0bff715 	stw	r2,-36(fp)
	alt_tse_system_desc_mem				*pmem	= psys_mem;
   26a9c:	e0bffe17 	ldw	r2,-8(fp)
   26aa0:	e0bff815 	stw	r2,-32(fp)
	alt_tse_system_shared_fifo			*pfifo	= psys_shared_fifo;
   26aa4:	e0bfff17 	ldw	r2,-4(fp)
   26aa8:	e0bff915 	stw	r2,-28(fp)
	alt_tse_system_phy 					*pphy	= psys_phy;
   26aac:	e0800317 	ldw	r2,12(fp)
   26ab0:	e0bffa15 	stw	r2,-24(fp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
   26ab4:	e0bffb17 	ldw	r2,-20(fp)
   26ab8:	10800303 	ldbu	r2,12(r2)
   26abc:	10803fcc 	andi	r2,r2,255
   26ac0:	1000031e 	bne	r2,zero,26ad0 <alt_tse_system_add_sys+0x68>
		loop_end = 1;
   26ac4:	00800044 	movi	r2,1
   26ac8:	e0bff615 	stw	r2,-40(fp)
   26acc:	00000e06 	br	26b08 <alt_tse_system_add_sys+0xa0>
	}
	else if(pmac->tse_num_of_channel > 0) {
   26ad0:	e0bffb17 	ldw	r2,-20(fp)
   26ad4:	10800303 	ldbu	r2,12(r2)
   26ad8:	10803fcc 	andi	r2,r2,255
   26adc:	10000526 	beq	r2,zero,26af4 <alt_tse_system_add_sys+0x8c>
		loop_end = pmac->tse_num_of_channel; 
   26ae0:	e0bffb17 	ldw	r2,-20(fp)
   26ae4:	10800303 	ldbu	r2,12(r2)
   26ae8:	10803fcc 	andi	r2,r2,255
   26aec:	e0bff615 	stw	r2,-40(fp)
   26af0:	00000506 	br	26b08 <alt_tse_system_add_sys+0xa0>
	}
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
   26af4:	010000f4 	movhi	r4,3
   26af8:	21036804 	addi	r4,r4,3488
   26afc:	0017eb00 	call	17eb0 <puts>
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
   26b00:	00bfffc4 	movi	r2,-1
   26b04:	00025106 	br	2744c <alt_tse_system_add_sys+0x9e4>
	}

	for(i = 0; i < loop_end; i++) {
   26b08:	e03ff515 	stw	zero,-44(fp)
   26b0c:	00024b06 	br	2743c <alt_tse_system_add_sys+0x9d4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
   26b10:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26b14:	10803fcc 	andi	r2,r2,255
   26b18:	1080201c 	xori	r2,r2,128
   26b1c:	10bfe004 	addi	r2,r2,-128
   26b20:	10800210 	cmplti	r2,r2,8
   26b24:	10000c1e 	bne	r2,zero,26b58 <alt_tse_system_add_sys+0xf0>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
   26b28:	010000f4 	movhi	r4,3
   26b2c:	21037404 	addi	r4,r4,3536
   26b30:	0017eb00 	call	17eb0 <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
   26b34:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26b38:	10803fcc 	andi	r2,r2,255
   26b3c:	1080201c 	xori	r2,r2,128
   26b40:	10bfe004 	addi	r2,r2,-128
   26b44:	010000f4 	movhi	r4,3
   26b48:	21038404 	addi	r4,r4,3600
   26b4c:	01400204 	movi	r5,8
   26b50:	100d883a 	mov	r6,r2
   26b54:	0017c440 	call	17c44 <printf>
		}

		/* Add MAC info to alt_tse_system_info structure */
		if(pmac == 0) {
   26b58:	e0bffb17 	ldw	r2,-20(fp)
   26b5c:	1000081e 	bne	r2,zero,26b80 <alt_tse_system_add_sys+0x118>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
   26b60:	010000f4 	movhi	r4,3
   26b64:	21039304 	addi	r4,r4,3660
   26b68:	0017eb00 	call	17eb0 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
   26b6c:	010000f4 	movhi	r4,3
   26b70:	21039d04 	addi	r4,r4,3700
   26b74:	0017eb00 	call	17eb0 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
   26b78:	00bfffc4 	movi	r2,-1
   26b7c:	00023306 	br	2744c <alt_tse_system_add_sys+0x9e4>
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
   26b80:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26b84:	10803fcc 	andi	r2,r2,255
   26b88:	1080201c 	xori	r2,r2,128
   26b8c:	10bfe004 	addi	r2,r2,-128
   26b90:	e0fffb17 	ldw	r3,-20(fp)
   26b94:	19000017 	ldw	r4,0(r3)
   26b98:	e0fff517 	ldw	r3,-44(fp)
   26b9c:	180692ba 	slli	r3,r3,10
   26ba0:	20c7883a 	add	r3,r4,r3
   26ba4:	010000f4 	movhi	r4,3
   26ba8:	210ac104 	addi	r4,r4,11012
   26bac:	10801224 	muli	r2,r2,72
   26bb0:	2085883a 	add	r2,r4,r2
   26bb4:	10c00015 	stw	r3,0(r2)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
   26bb8:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26bbc:	10803fcc 	andi	r2,r2,255
   26bc0:	1080201c 	xori	r2,r2,128
   26bc4:	10bfe004 	addi	r2,r2,-128
   26bc8:	e0fffb17 	ldw	r3,-20(fp)
   26bcc:	18c0010b 	ldhu	r3,4(r3)
   26bd0:	010000f4 	movhi	r4,3
   26bd4:	210ac104 	addi	r4,r4,11012
   26bd8:	10801224 	muli	r2,r2,72
   26bdc:	2085883a 	add	r2,r4,r2
   26be0:	10800104 	addi	r2,r2,4
   26be4:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
   26be8:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26bec:	10803fcc 	andi	r2,r2,255
   26bf0:	1080201c 	xori	r2,r2,128
   26bf4:	10bfe004 	addi	r2,r2,-128
   26bf8:	e0fffb17 	ldw	r3,-20(fp)
   26bfc:	18c0018b 	ldhu	r3,6(r3)
   26c00:	010000f4 	movhi	r4,3
   26c04:	210ac104 	addi	r4,r4,11012
   26c08:	10801224 	muli	r2,r2,72
   26c0c:	2085883a 	add	r2,r4,r2
   26c10:	10800104 	addi	r2,r2,4
   26c14:	10c0008d 	sth	r3,2(r2)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
   26c18:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26c1c:	10803fcc 	andi	r2,r2,255
   26c20:	1080201c 	xori	r2,r2,128
   26c24:	10bfe004 	addi	r2,r2,-128
   26c28:	e0fffb17 	ldw	r3,-20(fp)
   26c2c:	18c00203 	ldbu	r3,8(r3)
   26c30:	010000f4 	movhi	r4,3
   26c34:	210ac104 	addi	r4,r4,11012
   26c38:	10801224 	muli	r2,r2,72
   26c3c:	2085883a 	add	r2,r4,r2
   26c40:	10800204 	addi	r2,r2,8
   26c44:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
   26c48:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26c4c:	10803fcc 	andi	r2,r2,255
   26c50:	1080201c 	xori	r2,r2,128
   26c54:	10bfe004 	addi	r2,r2,-128
   26c58:	e0fffb17 	ldw	r3,-20(fp)
   26c5c:	18c00243 	ldbu	r3,9(r3)
   26c60:	010000f4 	movhi	r4,3
   26c64:	210ac104 	addi	r4,r4,11012
   26c68:	10801224 	muli	r2,r2,72
   26c6c:	2085883a 	add	r2,r4,r2
   26c70:	10800204 	addi	r2,r2,8
   26c74:	10c00045 	stb	r3,1(r2)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
   26c78:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26c7c:	10803fcc 	andi	r2,r2,255
   26c80:	1080201c 	xori	r2,r2,128
   26c84:	10bfe004 	addi	r2,r2,-128
   26c88:	e0fffb17 	ldw	r3,-20(fp)
   26c8c:	18c00283 	ldbu	r3,10(r3)
   26c90:	010000f4 	movhi	r4,3
   26c94:	210ac104 	addi	r4,r4,11012
   26c98:	10801224 	muli	r2,r2,72
   26c9c:	2085883a 	add	r2,r4,r2
   26ca0:	10800204 	addi	r2,r2,8
   26ca4:	10c00085 	stb	r3,2(r2)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
   26ca8:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26cac:	10803fcc 	andi	r2,r2,255
   26cb0:	1080201c 	xori	r2,r2,128
   26cb4:	10bfe004 	addi	r2,r2,-128
   26cb8:	e0fffb17 	ldw	r3,-20(fp)
   26cbc:	18c002c3 	ldbu	r3,11(r3)
   26cc0:	010000f4 	movhi	r4,3
   26cc4:	210ac104 	addi	r4,r4,11012
   26cc8:	10801224 	muli	r2,r2,72
   26ccc:	2085883a 	add	r2,r4,r2
   26cd0:	10800204 	addi	r2,r2,8
   26cd4:	10c000c5 	stb	r3,3(r2)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
   26cd8:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26cdc:	10803fcc 	andi	r2,r2,255
   26ce0:	1080201c 	xori	r2,r2,128
   26ce4:	10bfe004 	addi	r2,r2,-128
   26ce8:	e0fffb17 	ldw	r3,-20(fp)
   26cec:	18c00303 	ldbu	r3,12(r3)
   26cf0:	010000f4 	movhi	r4,3
   26cf4:	210ac104 	addi	r4,r4,11012
   26cf8:	10801224 	muli	r2,r2,72
   26cfc:	2085883a 	add	r2,r4,r2
   26d00:	10800304 	addi	r2,r2,12
   26d04:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
   26d08:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26d0c:	10803fcc 	andi	r2,r2,255
   26d10:	1080201c 	xori	r2,r2,128
   26d14:	10bfe004 	addi	r2,r2,-128
   26d18:	e0fffb17 	ldw	r3,-20(fp)
   26d1c:	18c00343 	ldbu	r3,13(r3)
   26d20:	010000f4 	movhi	r4,3
   26d24:	210ac104 	addi	r4,r4,11012
   26d28:	10801224 	muli	r2,r2,72
   26d2c:	2085883a 	add	r2,r4,r2
   26d30:	10800304 	addi	r2,r2,12
   26d34:	10c00045 	stb	r3,1(r2)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
   26d38:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26d3c:	10803fcc 	andi	r2,r2,255
   26d40:	1080201c 	xori	r2,r2,128
   26d44:	10bfe004 	addi	r2,r2,-128
   26d48:	e0fffb17 	ldw	r3,-20(fp)
   26d4c:	18c00383 	ldbu	r3,14(r3)
   26d50:	010000f4 	movhi	r4,3
   26d54:	210ac104 	addi	r4,r4,11012
   26d58:	10801224 	muli	r2,r2,72
   26d5c:	2085883a 	add	r2,r4,r2
   26d60:	10800304 	addi	r2,r2,12
   26d64:	10c00085 	stb	r3,2(r2)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
   26d68:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26d6c:	10803fcc 	andi	r2,r2,255
   26d70:	1080201c 	xori	r2,r2,128
   26d74:	10bfe004 	addi	r2,r2,-128
   26d78:	e0fffb17 	ldw	r3,-20(fp)
   26d7c:	18c003c3 	ldbu	r3,15(r3)
   26d80:	010000f4 	movhi	r4,3
   26d84:	210ac104 	addi	r4,r4,11012
   26d88:	10801224 	muli	r2,r2,72
   26d8c:	2085883a 	add	r2,r4,r2
   26d90:	10800304 	addi	r2,r2,12
   26d94:	10c000c5 	stb	r3,3(r2)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
   26d98:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26d9c:	10803fcc 	andi	r2,r2,255
   26da0:	1080201c 	xori	r2,r2,128
   26da4:	10bfe004 	addi	r2,r2,-128
   26da8:	e0fffb17 	ldw	r3,-20(fp)
   26dac:	18c00403 	ldbu	r3,16(r3)
   26db0:	010000f4 	movhi	r4,3
   26db4:	210ac104 	addi	r4,r4,11012
   26db8:	10801224 	muli	r2,r2,72
   26dbc:	2085883a 	add	r2,r4,r2
   26dc0:	10800404 	addi	r2,r2,16
   26dc4:	10c00005 	stb	r3,0(r2)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
   26dc8:	e0bff717 	ldw	r2,-36(fp)
   26dcc:	10000d1e 	bne	r2,zero,26e04 <alt_tse_system_add_sys+0x39c>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
   26dd0:	010000f4 	movhi	r4,3
   26dd4:	2103af04 	addi	r4,r4,3772
   26dd8:	0017eb00 	call	17eb0 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
   26ddc:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26de0:	10803fcc 	andi	r2,r2,255
   26de4:	1080201c 	xori	r2,r2,128
   26de8:	10bfe004 	addi	r2,r2,-128
   26dec:	010000f4 	movhi	r4,3
   26df0:	2103ba04 	addi	r4,r4,3816
   26df4:	100b883a 	mov	r5,r2
   26df8:	0017c440 	call	17c44 <printf>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
   26dfc:	00bfffc4 	movi	r2,-1
   26e00:	00019206 	br	2744c <alt_tse_system_add_sys+0x9e4>
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
   26e04:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26e08:	14003fcc 	andi	r16,r2,255
   26e0c:	8400201c 	xori	r16,r16,128
   26e10:	843fe004 	addi	r16,r16,-128
   26e14:	e0bff717 	ldw	r2,-36(fp)
   26e18:	10800017 	ldw	r2,0(r2)
   26e1c:	1009883a 	mov	r4,r2
   26e20:	0017f680 	call	17f68 <strlen>
   26e24:	10800044 	addi	r2,r2,1
   26e28:	1009883a 	mov	r4,r2
   26e2c:	002d6b80 	call	2d6b8 <malloc>
   26e30:	1007883a 	mov	r3,r2
   26e34:	010000f4 	movhi	r4,3
   26e38:	210ac104 	addi	r4,r4,11012
   26e3c:	80801224 	muli	r2,r16,72
   26e40:	2085883a 	add	r2,r4,r2
   26e44:	10800504 	addi	r2,r2,20
   26e48:	10c00015 	stw	r3,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
   26e4c:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26e50:	10803fcc 	andi	r2,r2,255
   26e54:	1080201c 	xori	r2,r2,128
   26e58:	10bfe004 	addi	r2,r2,-128
   26e5c:	00c000f4 	movhi	r3,3
   26e60:	18cac104 	addi	r3,r3,11012
   26e64:	10801224 	muli	r2,r2,72
   26e68:	1885883a 	add	r2,r3,r2
   26e6c:	10800504 	addi	r2,r2,20
   26e70:	10800017 	ldw	r2,0(r2)
   26e74:	10000a1e 	bne	r2,zero,26ea0 <alt_tse_system_add_sys+0x438>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
   26e78:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26e7c:	10803fcc 	andi	r2,r2,255
   26e80:	1080201c 	xori	r2,r2,128
   26e84:	10bfe004 	addi	r2,r2,-128
   26e88:	010000f4 	movhi	r4,3
   26e8c:	2103d204 	addi	r4,r4,3912
   26e90:	100b883a 	mov	r5,r2
   26e94:	0017c440 	call	17c44 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
   26e98:	00bfffc4 	movi	r2,-1
   26e9c:	00016b06 	br	2744c <alt_tse_system_add_sys+0x9e4>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
   26ea0:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26ea4:	10803fcc 	andi	r2,r2,255
   26ea8:	1080201c 	xori	r2,r2,128
   26eac:	10bfe004 	addi	r2,r2,-128
   26eb0:	00c000f4 	movhi	r3,3
   26eb4:	18cac104 	addi	r3,r3,11012
   26eb8:	10801224 	muli	r2,r2,72
   26ebc:	1885883a 	add	r2,r3,r2
   26ec0:	10800504 	addi	r2,r2,20
   26ec4:	10c00017 	ldw	r3,0(r2)
   26ec8:	e0bff717 	ldw	r2,-36(fp)
   26ecc:	10800017 	ldw	r2,0(r2)
   26ed0:	1809883a 	mov	r4,r3
   26ed4:	100b883a 	mov	r5,r2
   26ed8:	002d6e00 	call	2d6e0 <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
   26edc:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26ee0:	14003fcc 	andi	r16,r2,255
   26ee4:	8400201c 	xori	r16,r16,128
   26ee8:	843fe004 	addi	r16,r16,-128
   26eec:	e0bff717 	ldw	r2,-36(fp)
   26ef0:	10800117 	ldw	r2,4(r2)
   26ef4:	1009883a 	mov	r4,r2
   26ef8:	0017f680 	call	17f68 <strlen>
   26efc:	10800044 	addi	r2,r2,1
   26f00:	1009883a 	mov	r4,r2
   26f04:	002d6b80 	call	2d6b8 <malloc>
   26f08:	1007883a 	mov	r3,r2
   26f0c:	010000f4 	movhi	r4,3
   26f10:	210ac104 	addi	r4,r4,11012
   26f14:	80801224 	muli	r2,r16,72
   26f18:	2085883a 	add	r2,r4,r2
   26f1c:	10800604 	addi	r2,r2,24
   26f20:	10c00015 	stw	r3,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
   26f24:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26f28:	10803fcc 	andi	r2,r2,255
   26f2c:	1080201c 	xori	r2,r2,128
   26f30:	10bfe004 	addi	r2,r2,-128
   26f34:	00c000f4 	movhi	r3,3
   26f38:	18cac104 	addi	r3,r3,11012
   26f3c:	10801224 	muli	r2,r2,72
   26f40:	1885883a 	add	r2,r3,r2
   26f44:	10800604 	addi	r2,r2,24
   26f48:	10800017 	ldw	r2,0(r2)
   26f4c:	10000a1e 	bne	r2,zero,26f78 <alt_tse_system_add_sys+0x510>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
   26f50:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26f54:	10803fcc 	andi	r2,r2,255
   26f58:	1080201c 	xori	r2,r2,128
   26f5c:	10bfe004 	addi	r2,r2,-128
   26f60:	010000f4 	movhi	r4,3
   26f64:	2103e504 	addi	r4,r4,3988
   26f68:	100b883a 	mov	r5,r2
   26f6c:	0017c440 	call	17c44 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
   26f70:	00bfffc4 	movi	r2,-1
   26f74:	00013506 	br	2744c <alt_tse_system_add_sys+0x9e4>
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
   26f78:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26f7c:	10803fcc 	andi	r2,r2,255
   26f80:	1080201c 	xori	r2,r2,128
   26f84:	10bfe004 	addi	r2,r2,-128
   26f88:	00c000f4 	movhi	r3,3
   26f8c:	18cac104 	addi	r3,r3,11012
   26f90:	10801224 	muli	r2,r2,72
   26f94:	1885883a 	add	r2,r3,r2
   26f98:	10800604 	addi	r2,r2,24
   26f9c:	10c00017 	ldw	r3,0(r2)
   26fa0:	e0bff717 	ldw	r2,-36(fp)
   26fa4:	10800117 	ldw	r2,4(r2)
   26fa8:	1809883a 	mov	r4,r3
   26fac:	100b883a 	mov	r5,r2
   26fb0:	002d6e00 	call	2d6e0 <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
   26fb4:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26fb8:	10803fcc 	andi	r2,r2,255
   26fbc:	1080201c 	xori	r2,r2,128
   26fc0:	10bfe004 	addi	r2,r2,-128
   26fc4:	e0fff717 	ldw	r3,-36(fp)
   26fc8:	18c0020b 	ldhu	r3,8(r3)
   26fcc:	010000f4 	movhi	r4,3
   26fd0:	210ac104 	addi	r4,r4,11012
   26fd4:	10801224 	muli	r2,r2,72
   26fd8:	2085883a 	add	r2,r4,r2
   26fdc:	10800704 	addi	r2,r2,28
   26fe0:	10c0000d 	sth	r3,0(r2)
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
   26fe4:	e0bff817 	ldw	r2,-32(fp)
   26fe8:	1000151e 	bne	r2,zero,27040 <alt_tse_system_add_sys+0x5d8>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
   26fec:	d0a8d8c3 	ldbu	r2,-23709(gp)
   26ff0:	10803fcc 	andi	r2,r2,255
   26ff4:	1080201c 	xori	r2,r2,128
   26ff8:	10bfe004 	addi	r2,r2,-128
   26ffc:	00c000f4 	movhi	r3,3
   27000:	18cac104 	addi	r3,r3,11012
   27004:	10801224 	muli	r2,r2,72
   27008:	1885883a 	add	r2,r3,r2
   2700c:	10800704 	addi	r2,r2,28
   27010:	10000085 	stb	zero,2(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
   27014:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27018:	10803fcc 	andi	r2,r2,255
   2701c:	1080201c 	xori	r2,r2,128
   27020:	10bfe004 	addi	r2,r2,-128
   27024:	00c000f4 	movhi	r3,3
   27028:	18cac104 	addi	r3,r3,11012
   2702c:	10801224 	muli	r2,r2,72
   27030:	1885883a 	add	r2,r3,r2
   27034:	10800804 	addi	r2,r2,32
   27038:	10000015 	stw	zero,0(r2)
   2703c:	00001806 	br	270a0 <alt_tse_system_add_sys+0x638>
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
   27040:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27044:	10803fcc 	andi	r2,r2,255
   27048:	1080201c 	xori	r2,r2,128
   2704c:	10bfe004 	addi	r2,r2,-128
   27050:	e0fff817 	ldw	r3,-32(fp)
   27054:	18c00003 	ldbu	r3,0(r3)
   27058:	010000f4 	movhi	r4,3
   2705c:	210ac104 	addi	r4,r4,11012
   27060:	10801224 	muli	r2,r2,72
   27064:	2085883a 	add	r2,r4,r2
   27068:	10800704 	addi	r2,r2,28
   2706c:	10c00085 	stb	r3,2(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
   27070:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27074:	10803fcc 	andi	r2,r2,255
   27078:	1080201c 	xori	r2,r2,128
   2707c:	10bfe004 	addi	r2,r2,-128
   27080:	e0fff817 	ldw	r3,-32(fp)
   27084:	18c00117 	ldw	r3,4(r3)
   27088:	010000f4 	movhi	r4,3
   2708c:	210ac104 	addi	r4,r4,11012
   27090:	10801224 	muli	r2,r2,72
   27094:	2085883a 	add	r2,r4,r2
   27098:	10800804 	addi	r2,r2,32
   2709c:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
   270a0:	e0bff917 	ldw	r2,-28(fp)
   270a4:	1000471e 	bne	r2,zero,271c4 <alt_tse_system_add_sys+0x75c>
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
   270a8:	d0a8d8c3 	ldbu	r2,-23709(gp)
   270ac:	10803fcc 	andi	r2,r2,255
   270b0:	1080201c 	xori	r2,r2,128
   270b4:	10bfe004 	addi	r2,r2,-128
   270b8:	00c000f4 	movhi	r3,3
   270bc:	18cac104 	addi	r3,r3,11012
   270c0:	10801224 	muli	r2,r2,72
   270c4:	1885883a 	add	r2,r3,r2
   270c8:	10800904 	addi	r2,r2,36
   270cc:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
   270d0:	d0a8d8c3 	ldbu	r2,-23709(gp)
   270d4:	10803fcc 	andi	r2,r2,255
   270d8:	1080201c 	xori	r2,r2,128
   270dc:	10bfe004 	addi	r2,r2,-128
   270e0:	00c000f4 	movhi	r3,3
   270e4:	18cac104 	addi	r3,r3,11012
   270e8:	10801224 	muli	r2,r2,72
   270ec:	1885883a 	add	r2,r3,r2
   270f0:	10800a04 	addi	r2,r2,40
   270f4:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
   270f8:	d0a8d8c3 	ldbu	r2,-23709(gp)
   270fc:	10803fcc 	andi	r2,r2,255
   27100:	1080201c 	xori	r2,r2,128
   27104:	10bfe004 	addi	r2,r2,-128
   27108:	00c000f4 	movhi	r3,3
   2710c:	18cac104 	addi	r3,r3,11012
   27110:	10801224 	muli	r2,r2,72
   27114:	1885883a 	add	r2,r3,r2
   27118:	10800b04 	addi	r2,r2,44
   2711c:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
   27120:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27124:	10803fcc 	andi	r2,r2,255
   27128:	1080201c 	xori	r2,r2,128
   2712c:	10bfe004 	addi	r2,r2,-128
   27130:	00c000f4 	movhi	r3,3
   27134:	18cac104 	addi	r3,r3,11012
   27138:	10801224 	muli	r2,r2,72
   2713c:	1885883a 	add	r2,r3,r2
   27140:	10800c04 	addi	r2,r2,48
   27144:	10000015 	stw	zero,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
   27148:	d0a8d8c3 	ldbu	r2,-23709(gp)
   2714c:	10803fcc 	andi	r2,r2,255
   27150:	1080201c 	xori	r2,r2,128
   27154:	10bfe004 	addi	r2,r2,-128
   27158:	00c000f4 	movhi	r3,3
   2715c:	18cac104 	addi	r3,r3,11012
   27160:	10801224 	muli	r2,r2,72
   27164:	1885883a 	add	r2,r3,r2
   27168:	10800d04 	addi	r2,r2,52
   2716c:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
   27170:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27174:	10803fcc 	andi	r2,r2,255
   27178:	1080201c 	xori	r2,r2,128
   2717c:	10bfe004 	addi	r2,r2,-128
   27180:	00c000f4 	movhi	r3,3
   27184:	18cac104 	addi	r3,r3,11012
   27188:	10801224 	muli	r2,r2,72
   2718c:	1885883a 	add	r2,r3,r2
   27190:	10800e04 	addi	r2,r2,56
   27194:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
   27198:	d0a8d8c3 	ldbu	r2,-23709(gp)
   2719c:	10803fcc 	andi	r2,r2,255
   271a0:	1080201c 	xori	r2,r2,128
   271a4:	10bfe004 	addi	r2,r2,-128
   271a8:	00c000f4 	movhi	r3,3
   271ac:	18cac104 	addi	r3,r3,11012
   271b0:	10801224 	muli	r2,r2,72
   271b4:	1885883a 	add	r2,r3,r2
   271b8:	10800f04 	addi	r2,r2,60
   271bc:	10000015 	stw	zero,0(r2)
   271c0:	00005406 	br	27314 <alt_tse_system_add_sys+0x8ac>
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
   271c4:	d0a8d8c3 	ldbu	r2,-23709(gp)
   271c8:	10803fcc 	andi	r2,r2,255
   271cc:	1080201c 	xori	r2,r2,128
   271d0:	10bfe004 	addi	r2,r2,-128
   271d4:	e0fff917 	ldw	r3,-28(fp)
   271d8:	18c00003 	ldbu	r3,0(r3)
   271dc:	010000f4 	movhi	r4,3
   271e0:	210ac104 	addi	r4,r4,11012
   271e4:	10801224 	muli	r2,r2,72
   271e8:	2085883a 	add	r2,r4,r2
   271ec:	10800904 	addi	r2,r2,36
   271f0:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
   271f4:	d0a8d8c3 	ldbu	r2,-23709(gp)
   271f8:	10803fcc 	andi	r2,r2,255
   271fc:	1080201c 	xori	r2,r2,128
   27200:	10bfe004 	addi	r2,r2,-128
   27204:	e0fff917 	ldw	r3,-28(fp)
   27208:	18c00117 	ldw	r3,4(r3)
   2720c:	010000f4 	movhi	r4,3
   27210:	210ac104 	addi	r4,r4,11012
   27214:	10801224 	muli	r2,r2,72
   27218:	2085883a 	add	r2,r4,r2
   2721c:	10800a04 	addi	r2,r2,40
   27220:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
   27224:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27228:	10803fcc 	andi	r2,r2,255
   2722c:	1080201c 	xori	r2,r2,128
   27230:	10bfe004 	addi	r2,r2,-128
   27234:	e0fff917 	ldw	r3,-28(fp)
   27238:	18c00217 	ldw	r3,8(r3)
   2723c:	010000f4 	movhi	r4,3
   27240:	210ac104 	addi	r4,r4,11012
   27244:	10801224 	muli	r2,r2,72
   27248:	2085883a 	add	r2,r4,r2
   2724c:	10800b04 	addi	r2,r2,44
   27250:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
   27254:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27258:	10803fcc 	andi	r2,r2,255
   2725c:	1080201c 	xori	r2,r2,128
   27260:	10bfe004 	addi	r2,r2,-128
   27264:	e0fff917 	ldw	r3,-28(fp)
   27268:	18c00317 	ldw	r3,12(r3)
   2726c:	010000f4 	movhi	r4,3
   27270:	210ac104 	addi	r4,r4,11012
   27274:	10801224 	muli	r2,r2,72
   27278:	2085883a 	add	r2,r4,r2
   2727c:	10800c04 	addi	r2,r2,48
   27280:	10c00015 	stw	r3,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
   27284:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27288:	10803fcc 	andi	r2,r2,255
   2728c:	1080201c 	xori	r2,r2,128
   27290:	10bfe004 	addi	r2,r2,-128
   27294:	e0fff917 	ldw	r3,-28(fp)
   27298:	18c00417 	ldw	r3,16(r3)
   2729c:	010000f4 	movhi	r4,3
   272a0:	210ac104 	addi	r4,r4,11012
   272a4:	10801224 	muli	r2,r2,72
   272a8:	2085883a 	add	r2,r4,r2
   272ac:	10800d04 	addi	r2,r2,52
   272b0:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
   272b4:	d0a8d8c3 	ldbu	r2,-23709(gp)
   272b8:	10803fcc 	andi	r2,r2,255
   272bc:	1080201c 	xori	r2,r2,128
   272c0:	10bfe004 	addi	r2,r2,-128
   272c4:	e0fff917 	ldw	r3,-28(fp)
   272c8:	18c00517 	ldw	r3,20(r3)
   272cc:	010000f4 	movhi	r4,3
   272d0:	210ac104 	addi	r4,r4,11012
   272d4:	10801224 	muli	r2,r2,72
   272d8:	2085883a 	add	r2,r4,r2
   272dc:	10800e04 	addi	r2,r2,56
   272e0:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
   272e4:	d0a8d8c3 	ldbu	r2,-23709(gp)
   272e8:	10803fcc 	andi	r2,r2,255
   272ec:	1080201c 	xori	r2,r2,128
   272f0:	10bfe004 	addi	r2,r2,-128
   272f4:	e0fff917 	ldw	r3,-28(fp)
   272f8:	18c00617 	ldw	r3,24(r3)
   272fc:	010000f4 	movhi	r4,3
   27300:	210ac104 	addi	r4,r4,11012
   27304:	10801224 	muli	r2,r2,72
   27308:	2085883a 	add	r2,r4,r2
   2730c:	10800f04 	addi	r2,r2,60
   27310:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
   27314:	e0bffa17 	ldw	r2,-24(fp)
   27318:	1000161e 	bne	r2,zero,27374 <alt_tse_system_add_sys+0x90c>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
   2731c:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27320:	10803fcc 	andi	r2,r2,255
   27324:	1080201c 	xori	r2,r2,128
   27328:	10bfe004 	addi	r2,r2,-128
   2732c:	00c000f4 	movhi	r3,3
   27330:	18cac104 	addi	r3,r3,11012
   27334:	10801224 	muli	r2,r2,72
   27338:	1885883a 	add	r2,r3,r2
   2733c:	10801004 	addi	r2,r2,64
   27340:	00ffffc4 	movi	r3,-1
   27344:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
   27348:	d0a8d8c3 	ldbu	r2,-23709(gp)
   2734c:	10803fcc 	andi	r2,r2,255
   27350:	1080201c 	xori	r2,r2,128
   27354:	10bfe004 	addi	r2,r2,-128
   27358:	00c000f4 	movhi	r3,3
   2735c:	18cac104 	addi	r3,r3,11012
   27360:	10801224 	muli	r2,r2,72
   27364:	1885883a 	add	r2,r3,r2
   27368:	10801104 	addi	r2,r2,68
   2736c:	10000015 	stw	zero,0(r2)
   27370:	00001806 	br	273d4 <alt_tse_system_add_sys+0x96c>
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
   27374:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27378:	10803fcc 	andi	r2,r2,255
   2737c:	1080201c 	xori	r2,r2,128
   27380:	10bfe004 	addi	r2,r2,-128
   27384:	e0fffa17 	ldw	r3,-24(fp)
   27388:	18c00017 	ldw	r3,0(r3)
   2738c:	010000f4 	movhi	r4,3
   27390:	210ac104 	addi	r4,r4,11012
   27394:	10801224 	muli	r2,r2,72
   27398:	2085883a 	add	r2,r4,r2
   2739c:	10801004 	addi	r2,r2,64
   273a0:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
   273a4:	d0a8d8c3 	ldbu	r2,-23709(gp)
   273a8:	10803fcc 	andi	r2,r2,255
   273ac:	1080201c 	xori	r2,r2,128
   273b0:	10bfe004 	addi	r2,r2,-128
   273b4:	e0fffa17 	ldw	r3,-24(fp)
   273b8:	18c00117 	ldw	r3,4(r3)
   273bc:	010000f4 	movhi	r4,3
   273c0:	210ac104 	addi	r4,r4,11012
   273c4:	10801224 	muli	r2,r2,72
   273c8:	2085883a 	add	r2,r4,r2
   273cc:	10801104 	addi	r2,r2,68
   273d0:	10c00015 	stw	r3,0(r2)
		}
		
		/* Point to next structure */
		psgdma++;
   273d4:	e0bff717 	ldw	r2,-36(fp)
   273d8:	10800304 	addi	r2,r2,12
   273dc:	e0bff715 	stw	r2,-36(fp)
		if(pmem) pmem++;
   273e0:	e0bff817 	ldw	r2,-32(fp)
   273e4:	10000326 	beq	r2,zero,273f4 <alt_tse_system_add_sys+0x98c>
   273e8:	e0bff817 	ldw	r2,-32(fp)
   273ec:	10800204 	addi	r2,r2,8
   273f0:	e0bff815 	stw	r2,-32(fp)
		if(pfifo) pfifo++;
   273f4:	e0bff917 	ldw	r2,-28(fp)
   273f8:	10000326 	beq	r2,zero,27408 <alt_tse_system_add_sys+0x9a0>
   273fc:	e0bff917 	ldw	r2,-28(fp)
   27400:	10800704 	addi	r2,r2,28
   27404:	e0bff915 	stw	r2,-28(fp)
		if(pphy) pphy++;
   27408:	e0bffa17 	ldw	r2,-24(fp)
   2740c:	10000326 	beq	r2,zero,2741c <alt_tse_system_add_sys+0x9b4>
   27410:	e0bffa17 	ldw	r2,-24(fp)
   27414:	10800204 	addi	r2,r2,8
   27418:	e0bffa15 	stw	r2,-24(fp)
		
		tse_system_count++;
   2741c:	d0a8d8c3 	ldbu	r2,-23709(gp)
   27420:	10800044 	addi	r2,r2,1
   27424:	d0a8d8c5 	stb	r2,-23709(gp)
		max_mac_system = tse_system_count;
   27428:	d0a8d8c3 	ldbu	r2,-23709(gp)
   2742c:	d0a01c05 	stb	r2,-32656(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
   27430:	e0bff517 	ldw	r2,-44(fp)
   27434:	10800044 	addi	r2,r2,1
   27438:	e0bff515 	stw	r2,-44(fp)
   2743c:	e0fff517 	ldw	r3,-44(fp)
   27440:	e0bff617 	ldw	r2,-40(fp)
   27444:	18bdb216 	blt	r3,r2,26b10 <alt_tse_system_add_sys+0xa8>
		
		tse_system_count++;
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
   27448:	0005883a 	mov	r2,zero
	
}
   2744c:	e037883a 	mov	sp,fp
   27450:	dfc00217 	ldw	ra,8(sp)
   27454:	df000117 	ldw	fp,4(sp)
   27458:	dc000017 	ldw	r16,0(sp)
   2745c:	dec00304 	addi	sp,sp,12
   27460:	f800283a 	ret

00027464 <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
   27464:	defff904 	addi	sp,sp,-28
   27468:	dfc00615 	stw	ra,24(sp)
   2746c:	df000515 	stw	fp,20(sp)
   27470:	df000504 	addi	fp,sp,20
   27474:	e13ffe15 	stw	r4,-8(fp)
   27478:	2805883a 	mov	r2,r5
   2747c:	e0bfff05 	stb	r2,-4(fp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
   27480:	e03ffb15 	stw	zero,-20(fp)
   27484:	00004706 	br	275a4 <alt_tse_sys_enable_mdio_sharing+0x140>
		psys_mac = psys_mac_list[i];
   27488:	e0bffb17 	ldw	r2,-20(fp)
   2748c:	1085883a 	add	r2,r2,r2
   27490:	1085883a 	add	r2,r2,r2
   27494:	e0fffe17 	ldw	r3,-8(fp)
   27498:	1885883a 	add	r2,r3,r2
   2749c:	10800017 	ldw	r2,0(r2)
   274a0:	e0bffd15 	stw	r2,-12(fp)
		
		if(psys_mac == 0) {
   274a4:	e0bffd17 	ldw	r2,-12(fp)
   274a8:	1000081e 	bne	r2,zero,274cc <alt_tse_sys_enable_mdio_sharing+0x68>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
   274ac:	010000f4 	movhi	r4,3
   274b0:	21039304 	addi	r4,r4,3660
   274b4:	0017eb00 	call	17eb0 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
   274b8:	010000f4 	movhi	r4,3
   274bc:	2103f804 	addi	r4,r4,4064
   274c0:	0017eb00 	call	17eb0 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
   274c4:	00bfffc4 	movi	r2,-1
   274c8:	00003a06 	br	275b4 <alt_tse_sys_enable_mdio_sharing+0x150>
		}
		
		for(j = 0; j < max_mac_system; j++) {
   274cc:	e03ffc15 	stw	zero,-16(fp)
   274d0:	00002d06 	br	27588 <alt_tse_sys_enable_mdio_sharing+0x124>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
   274d4:	e0bffd17 	ldw	r2,-12(fp)
   274d8:	10c00017 	ldw	r3,0(r2)
   274dc:	010000f4 	movhi	r4,3
   274e0:	210ac104 	addi	r4,r4,11012
   274e4:	e0bffc17 	ldw	r2,-16(fp)
   274e8:	10801224 	muli	r2,r2,72
   274ec:	2085883a 	add	r2,r4,r2
   274f0:	10800017 	ldw	r2,0(r2)
   274f4:	1880211e 	bne	r3,r2,2757c <alt_tse_sys_enable_mdio_sharing+0x118>
				if(tse_mac_device[j].tse_multichannel_mac) {
   274f8:	00c000f4 	movhi	r3,3
   274fc:	18cac104 	addi	r3,r3,11012
   27500:	e0bffc17 	ldw	r2,-16(fp)
   27504:	10801224 	muli	r2,r2,72
   27508:	1885883a 	add	r2,r3,r2
   2750c:	10800204 	addi	r2,r2,8
   27510:	108000c3 	ldbu	r2,3(r2)
   27514:	10803fcc 	andi	r2,r2,255
   27518:	10000826 	beq	r2,zero,2753c <alt_tse_sys_enable_mdio_sharing+0xd8>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
   2751c:	010000f4 	movhi	r4,3
   27520:	21040c04 	addi	r4,r4,4144
   27524:	0017eb00 	call	17eb0 <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
   27528:	010000f4 	movhi	r4,3
   2752c:	21041d04 	addi	r4,r4,4212
   27530:	0017eb00 	call	17eb0 <puts>
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
   27534:	00bfffc4 	movi	r2,-1
   27538:	00001e06 	br	275b4 <alt_tse_sys_enable_mdio_sharing+0x150>
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
   2753c:	00c000f4 	movhi	r3,3
   27540:	18cac104 	addi	r3,r3,11012
   27544:	e0bffc17 	ldw	r2,-16(fp)
   27548:	10801224 	muli	r2,r2,72
   2754c:	1885883a 	add	r2,r3,r2
   27550:	10800304 	addi	r2,r2,12
   27554:	00c00044 	movi	r3,1
   27558:	10c00045 	stb	r3,1(r2)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
   2755c:	00c000f4 	movhi	r3,3
   27560:	18cac104 	addi	r3,r3,11012
   27564:	e0bffc17 	ldw	r2,-16(fp)
   27568:	10801224 	muli	r2,r2,72
   2756c:	1885883a 	add	r2,r3,r2
   27570:	10800304 	addi	r2,r2,12
   27574:	e0ffff03 	ldbu	r3,-4(fp)
   27578:	10c00085 	stb	r3,2(r2)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
   2757c:	e0bffc17 	ldw	r2,-16(fp)
   27580:	10800044 	addi	r2,r2,1
   27584:	e0bffc15 	stw	r2,-16(fp)
   27588:	d0a01c03 	ldbu	r2,-32656(gp)
   2758c:	10803fcc 	andi	r2,r2,255
   27590:	e0fffc17 	ldw	r3,-16(fp)
   27594:	18bfcf16 	blt	r3,r2,274d4 <alt_tse_sys_enable_mdio_sharing+0x70>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
   27598:	e0bffb17 	ldw	r2,-20(fp)
   2759c:	10800044 	addi	r2,r2,1
   275a0:	e0bffb15 	stw	r2,-20(fp)
   275a4:	e0bfff03 	ldbu	r2,-4(fp)
   275a8:	e0fffb17 	ldw	r3,-20(fp)
   275ac:	18bfb616 	blt	r3,r2,27488 <alt_tse_sys_enable_mdio_sharing+0x24>
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
			}
		}	
	}
	
	return SUCCESS;
   275b0:	0005883a 	mov	r2,zero
}
   275b4:	e037883a 	mov	sp,fp
   275b8:	dfc00117 	ldw	ra,4(sp)
   275bc:	df000017 	ldw	fp,0(sp)
   275c0:	dec00204 	addi	sp,sp,8
   275c4:	f800283a 	ret

000275c8 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
   275c8:	defffc04 	addi	sp,sp,-16
   275cc:	dfc00315 	stw	ra,12(sp)
   275d0:	df000215 	stw	fp,8(sp)
   275d4:	df000204 	addi	fp,sp,8
   275d8:	e13fff15 	stw	r4,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
   275dc:	e13fff17 	ldw	r4,-4(fp)
   275e0:	00277b00 	call	277b0 <alt_tse_get_mac_info>
   275e4:	10800317 	ldw	r2,12(r2)
   275e8:	e0bffe15 	stw	r2,-8(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
   275ec:	e13ffe17 	ldw	r4,-8(fp)
   275f0:	002a9480 	call	2a948 <alt_tse_phy_get_common_speed>
}
   275f4:	e037883a 	mov	sp,fp
   275f8:	dfc00117 	ldw	ra,4(sp)
   275fc:	df000017 	ldw	fp,0(sp)
   27600:	dec00204 	addi	sp,sp,8
   27604:	f800283a 	ret

00027608 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
   27608:	defffb04 	addi	sp,sp,-20
   2760c:	dfc00415 	stw	ra,16(sp)
   27610:	df000315 	stw	fp,12(sp)
   27614:	df000304 	addi	fp,sp,12
   27618:	e13ffe15 	stw	r4,-8(fp)
   2761c:	e17fff15 	stw	r5,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
   27620:	e13ffe17 	ldw	r4,-8(fp)
   27624:	00277b00 	call	277b0 <alt_tse_get_mac_info>
   27628:	10800317 	ldw	r2,12(r2)
   2762c:	e0bffd15 	stw	r2,-12(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
   27630:	e13ffd17 	ldw	r4,-12(fp)
   27634:	e17fff17 	ldw	r5,-4(fp)
   27638:	002ac700 	call	2ac70 <alt_tse_phy_set_common_speed>
}
   2763c:	e037883a 	mov	sp,fp
   27640:	dfc00117 	ldw	ra,4(sp)
   27644:	df000017 	ldw	fp,0(sp)
   27648:	dec00204 	addi	sp,sp,8
   2764c:	f800283a 	ret

00027650 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
   27650:	defffd04 	addi	sp,sp,-12
   27654:	df000215 	stw	fp,8(sp)
   27658:	df000204 	addi	fp,sp,8
   2765c:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
   27660:	e03ffe15 	stw	zero,-8(fp)
   27664:	00000c06 	br	27698 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
   27668:	e0bffe17 	ldw	r2,-8(fp)
   2766c:	10c01224 	muli	r3,r2,72
   27670:	008000f4 	movhi	r2,3
   27674:	108ac104 	addi	r2,r2,11012
   27678:	1887883a 	add	r3,r3,r2
   2767c:	e0bfff17 	ldw	r2,-4(fp)
   27680:	1880021e 	bne	r3,r2,2768c <alt_tse_get_system_index+0x3c>
            return i;
   27684:	e0bffe17 	ldw	r2,-8(fp)
   27688:	00000806 	br	276ac <alt_tse_get_system_index+0x5c>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
   2768c:	e0bffe17 	ldw	r2,-8(fp)
   27690:	10800044 	addi	r2,r2,1
   27694:	e0bffe15 	stw	r2,-8(fp)
   27698:	d0a01c03 	ldbu	r2,-32656(gp)
   2769c:	10803fcc 	andi	r2,r2,255
   276a0:	e0fffe17 	ldw	r3,-8(fp)
   276a4:	18bff016 	blt	r3,r2,27668 <alt_tse_get_system_index+0x18>
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
   276a8:	00bfffc4 	movi	r2,-1
}
   276ac:	e037883a 	mov	sp,fp
   276b0:	df000017 	ldw	fp,0(sp)
   276b4:	dec00104 	addi	sp,sp,4
   276b8:	f800283a 	ret

000276bc <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
   276bc:	defffd04 	addi	sp,sp,-12
   276c0:	df000215 	stw	fp,8(sp)
   276c4:	df000204 	addi	fp,sp,8
   276c8:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
   276cc:	e03ffe15 	stw	zero,-8(fp)
   276d0:	00000e06 	br	2770c <alt_tse_get_mac_group_index+0x50>
        if(pmac_group == pmac_groups[i]) {
   276d4:	00c00134 	movhi	r3,4
   276d8:	18d37804 	addi	r3,r3,19936
   276dc:	e0bffe17 	ldw	r2,-8(fp)
   276e0:	1085883a 	add	r2,r2,r2
   276e4:	1085883a 	add	r2,r2,r2
   276e8:	1885883a 	add	r2,r3,r2
   276ec:	10c00017 	ldw	r3,0(r2)
   276f0:	e0bfff17 	ldw	r2,-4(fp)
   276f4:	1880021e 	bne	r3,r2,27700 <alt_tse_get_mac_group_index+0x44>
            return i;
   276f8:	e0bffe17 	ldw	r2,-8(fp)
   276fc:	00000806 	br	27720 <alt_tse_get_mac_group_index+0x64>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
   27700:	e0bffe17 	ldw	r2,-8(fp)
   27704:	10800044 	addi	r2,r2,1
   27708:	e0bffe15 	stw	r2,-8(fp)
   2770c:	d0a8d843 	ldbu	r2,-23711(gp)
   27710:	10803fcc 	andi	r2,r2,255
   27714:	e0fffe17 	ldw	r3,-8(fp)
   27718:	18bfee16 	blt	r3,r2,276d4 <alt_tse_get_mac_group_index+0x18>
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
   2771c:	00bfffc4 	movi	r2,-1
}
   27720:	e037883a 	mov	sp,fp
   27724:	df000017 	ldw	fp,0(sp)
   27728:	dec00104 	addi	sp,sp,4
   2772c:	f800283a 	ret

00027730 <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
   27730:	defffd04 	addi	sp,sp,-12
   27734:	df000215 	stw	fp,8(sp)
   27738:	df000204 	addi	fp,sp,8
   2773c:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
   27740:	e03ffe15 	stw	zero,-8(fp)
   27744:	00000f06 	br	27784 <alt_tse_get_mac_info_index+0x54>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
   27748:	e0bfff17 	ldw	r2,-4(fp)
   2774c:	10c00317 	ldw	r3,12(r2)
   27750:	e0bffe17 	ldw	r2,-8(fp)
   27754:	10800044 	addi	r2,r2,1
   27758:	1085883a 	add	r2,r2,r2
   2775c:	1085883a 	add	r2,r2,r2
   27760:	1885883a 	add	r2,r3,r2
   27764:	10c00017 	ldw	r3,0(r2)
   27768:	e0bfff17 	ldw	r2,-4(fp)
   2776c:	1880021e 	bne	r3,r2,27778 <alt_tse_get_mac_info_index+0x48>
            return i;
   27770:	e0bffe17 	ldw	r2,-8(fp)
   27774:	00000a06 	br	277a0 <alt_tse_get_mac_info_index+0x70>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
   27778:	e0bffe17 	ldw	r2,-8(fp)
   2777c:	10800044 	addi	r2,r2,1
   27780:	e0bffe15 	stw	r2,-8(fp)
   27784:	e0bfff17 	ldw	r2,-4(fp)
   27788:	10800317 	ldw	r2,12(r2)
   2778c:	10800003 	ldbu	r2,0(r2)
   27790:	10803fcc 	andi	r2,r2,255
   27794:	e0fffe17 	ldw	r3,-8(fp)
   27798:	18bfeb16 	blt	r3,r2,27748 <alt_tse_get_mac_info_index+0x18>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
   2779c:	00bfffc4 	movi	r2,-1
}
   277a0:	e037883a 	mov	sp,fp
   277a4:	df000017 	ldw	fp,0(sp)
   277a8:	dec00104 	addi	sp,sp,4
   277ac:	f800283a 	ret

000277b0 <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
   277b0:	defffa04 	addi	sp,sp,-24
   277b4:	df000515 	stw	fp,20(sp)
   277b8:	df000504 	addi	fp,sp,20
   277bc:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
   277c0:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
   277c4:	e03ffe15 	stw	zero,-8(fp)
    
    for(i = 0; i < mac_group_count; i++) {
   277c8:	e03ffb15 	stw	zero,-20(fp)
   277cc:	00002506 	br	27864 <alt_tse_get_mac_info+0xb4>
        pmac_group = pmac_groups[i];
   277d0:	00c00134 	movhi	r3,4
   277d4:	18d37804 	addi	r3,r3,19936
   277d8:	e0bffb17 	ldw	r2,-20(fp)
   277dc:	1085883a 	add	r2,r2,r2
   277e0:	1085883a 	add	r2,r2,r2
   277e4:	1885883a 	add	r2,r3,r2
   277e8:	10800017 	ldw	r2,0(r2)
   277ec:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
   277f0:	e03ffc15 	stw	zero,-16(fp)
   277f4:	00001306 	br	27844 <alt_tse_get_mac_info+0x94>
            pmac_info = pmac_group->pmac_info[j];
   277f8:	e0fffd17 	ldw	r3,-12(fp)
   277fc:	e0bffc17 	ldw	r2,-16(fp)
   27800:	10800044 	addi	r2,r2,1
   27804:	1085883a 	add	r2,r2,r2
   27808:	1085883a 	add	r2,r2,r2
   2780c:	1885883a 	add	r2,r3,r2
   27810:	10800017 	ldw	r2,0(r2)
   27814:	e0bffe15 	stw	r2,-8(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
   27818:	e0bffe17 	ldw	r2,-8(fp)
   2781c:	10800217 	ldw	r2,8(r2)
   27820:	10800017 	ldw	r2,0(r2)
   27824:	1007883a 	mov	r3,r2
   27828:	e0bfff17 	ldw	r2,-4(fp)
   2782c:	1880021e 	bne	r3,r2,27838 <alt_tse_get_mac_info+0x88>
                return pmac_info;
   27830:	e0bffe17 	ldw	r2,-8(fp)
   27834:	00001006 	br	27878 <alt_tse_get_mac_info+0xc8>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
   27838:	e0bffc17 	ldw	r2,-16(fp)
   2783c:	10800044 	addi	r2,r2,1
   27840:	e0bffc15 	stw	r2,-16(fp)
   27844:	e0bffd17 	ldw	r2,-12(fp)
   27848:	10800003 	ldbu	r2,0(r2)
   2784c:	10803fcc 	andi	r2,r2,255
   27850:	e0fffc17 	ldw	r3,-16(fp)
   27854:	18bfe816 	blt	r3,r2,277f8 <alt_tse_get_mac_info+0x48>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
   27858:	e0bffb17 	ldw	r2,-20(fp)
   2785c:	10800044 	addi	r2,r2,1
   27860:	e0bffb15 	stw	r2,-20(fp)
   27864:	d0a8d843 	ldbu	r2,-23711(gp)
   27868:	10803fcc 	andi	r2,r2,255
   2786c:	e0fffb17 	ldw	r3,-20(fp)
   27870:	18bfd716 	blt	r3,r2,277d0 <alt_tse_get_mac_info+0x20>
                return pmac_info;
            }
        }        
    }
    
    return 0;
   27874:	0005883a 	mov	r2,zero
}
   27878:	e037883a 	mov	sp,fp
   2787c:	df000017 	ldw	fp,0(sp)
   27880:	dec00104 	addi	sp,sp,4
   27884:	f800283a 	ret

00027888 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
   27888:	defffc04 	addi	sp,sp,-16
   2788c:	df000315 	stw	fp,12(sp)
   27890:	df000304 	addi	fp,sp,12
   27894:	e13ffe15 	stw	r4,-8(fp)
   27898:	2805883a 	mov	r2,r5
   2789c:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   278a0:	e0bffe17 	ldw	r2,-8(fp)
   278a4:	10800204 	addi	r2,r2,8
   278a8:	10800037 	ldwio	r2,0(r2)
   278ac:	e0bffd15 	stw	r2,-12(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
   278b0:	e0bfff03 	ldbu	r2,-4(fp)
   278b4:	10800098 	cmpnei	r2,r2,2
   278b8:	1000091e 	bne	r2,zero,278e0 <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   278bc:	e0bffd17 	ldw	r2,-12(fp)
   278c0:	10800214 	ori	r2,r2,8
   278c4:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   278c8:	e0fffd17 	ldw	r3,-12(fp)
   278cc:	00bf8034 	movhi	r2,65024
   278d0:	10bfffc4 	addi	r2,r2,-1
   278d4:	1884703a 	and	r2,r3,r2
   278d8:	e0bffd15 	stw	r2,-12(fp)
   278dc:	00001906 	br	27944 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
   278e0:	e0bfff03 	ldbu	r2,-4(fp)
   278e4:	10800058 	cmpnei	r2,r2,1
   278e8:	10000a1e 	bne	r2,zero,27914 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   278ec:	e0fffd17 	ldw	r3,-12(fp)
   278f0:	00bffdc4 	movi	r2,-9
   278f4:	1884703a 	and	r2,r3,r2
   278f8:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
   278fc:	e0fffd17 	ldw	r3,-12(fp)
   27900:	00bf8034 	movhi	r2,65024
   27904:	10bfffc4 	addi	r2,r2,-1
   27908:	1884703a 	and	r2,r3,r2
   2790c:	e0bffd15 	stw	r2,-12(fp)
   27910:	00000c06 	br	27944 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
   27914:	e0bfff03 	ldbu	r2,-4(fp)
   27918:	1000081e 	bne	r2,zero,2793c <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
   2791c:	e0fffd17 	ldw	r3,-12(fp)
   27920:	00bffdc4 	movi	r2,-9
   27924:	1884703a 	and	r2,r3,r2
   27928:	e0bffd15 	stw	r2,-12(fp)
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
   2792c:	e0bffd17 	ldw	r2,-12(fp)
   27930:	10808034 	orhi	r2,r2,512
   27934:	e0bffd15 	stw	r2,-12(fp)
   27938:	00000206 	br	27944 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
   2793c:	00bffd84 	movi	r2,-10
   27940:	00000506 	br	27958 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
   27944:	e0bffe17 	ldw	r2,-8(fp)
   27948:	10800204 	addi	r2,r2,8
   2794c:	e0fffd17 	ldw	r3,-12(fp)
   27950:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   27954:	0005883a 	mov	r2,zero
}
   27958:	e037883a 	mov	sp,fp
   2795c:	df000017 	ldw	fp,0(sp)
   27960:	dec00104 	addi	sp,sp,4
   27964:	f800283a 	ret

00027968 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
   27968:	defffc04 	addi	sp,sp,-16
   2796c:	df000315 	stw	fp,12(sp)
   27970:	df000304 	addi	fp,sp,12
   27974:	e13ffe15 	stw	r4,-8(fp)
   27978:	2805883a 	mov	r2,r5
   2797c:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
   27980:	e0bffe17 	ldw	r2,-8(fp)
   27984:	10800204 	addi	r2,r2,8
   27988:	10800037 	ldwio	r2,0(r2)
   2798c:	e0bffd15 	stw	r2,-12(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
   27990:	e0bfff03 	ldbu	r2,-4(fp)
   27994:	1000041e 	bne	r2,zero,279a8 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
   27998:	e0bffd17 	ldw	r2,-12(fp)
   2799c:	10810014 	ori	r2,r2,1024
   279a0:	e0bffd15 	stw	r2,-12(fp)
   279a4:	00000a06 	br	279d0 <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
   279a8:	e0bfff03 	ldbu	r2,-4(fp)
   279ac:	10800058 	cmpnei	r2,r2,1
   279b0:	1000051e 	bne	r2,zero,279c8 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
   279b4:	e0fffd17 	ldw	r3,-12(fp)
   279b8:	00beffc4 	movi	r2,-1025
   279bc:	1884703a 	and	r2,r3,r2
   279c0:	e0bffd15 	stw	r2,-12(fp)
   279c4:	00000206 	br	279d0 <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
   279c8:	00bffd84 	movi	r2,-10
   279cc:	00000506 	br	279e4 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
   279d0:	e0bffe17 	ldw	r2,-8(fp)
   279d4:	10800204 	addi	r2,r2,8
   279d8:	e0fffd17 	ldw	r3,-12(fp)
   279dc:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
   279e0:	0005883a 	mov	r2,zero

}
   279e4:	e037883a 	mov	sp,fp
   279e8:	df000017 	ldw	fp,0(sp)
   279ec:	dec00104 	addi	sp,sp,4
   279f0:	f800283a 	ret

000279f4 <getPHYSpeed>:
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
   279f4:	defff404 	addi	sp,sp,-48
   279f8:	dfc00b15 	stw	ra,44(sp)
   279fc:	df000a15 	stw	fp,40(sp)
   27a00:	df000a04 	addi	fp,sp,40
   27a04:	e13fff15 	stw	r4,-4(fp)

	alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   27a08:	00800044 	movi	r2,1
   27a0c:	e0bff705 	stb	r2,-36(fp)
	alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
   27a10:	00800044 	movi	r2,1
   27a14:	e0bff745 	stb	r2,-35(fp)
	alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
   27a18:	e0bff743 	ldbu	r2,-35(fp)
   27a1c:	10c0004c 	andi	r3,r2,1
   27a20:	e0bff703 	ldbu	r2,-36(fp)
   27a24:	10800098 	cmpnei	r2,r2,2
   27a28:	1000021e 	bne	r2,zero,27a34 <getPHYSpeed+0x40>
   27a2c:	00800084 	movi	r2,2
   27a30:	00000106 	br	27a38 <getPHYSpeed+0x44>
   27a34:	0005883a 	mov	r2,zero
   27a38:	1886b03a 	or	r3,r3,r2
   27a3c:	e0bff703 	ldbu	r2,-36(fp)
   27a40:	10800058 	cmpnei	r2,r2,1
   27a44:	1000021e 	bne	r2,zero,27a50 <getPHYSpeed+0x5c>
   27a48:	00800104 	movi	r2,4
   27a4c:	00000106 	br	27a54 <getPHYSpeed+0x60>
   27a50:	0005883a 	mov	r2,zero
   27a54:	1886b03a 	or	r3,r3,r2
   27a58:	e0bff703 	ldbu	r2,-36(fp)
   27a5c:	1000021e 	bne	r2,zero,27a68 <getPHYSpeed+0x74>
   27a60:	00800204 	movi	r2,8
   27a64:	00000106 	br	27a6c <getPHYSpeed+0x78>
   27a68:	0005883a 	mov	r2,zero
   27a6c:	1886b03a 	or	r3,r3,r2
   27a70:	e0bff703 	ldbu	r2,-36(fp)
   27a74:	108000d8 	cmpnei	r2,r2,3
   27a78:	1000021e 	bne	r2,zero,27a84 <getPHYSpeed+0x90>
   27a7c:	00800074 	movhi	r2,1
   27a80:	00000106 	br	27a88 <getPHYSpeed+0x94>
   27a84:	0005883a 	mov	r2,zero
   27a88:	1884b03a 	or	r2,r3,r2
   27a8c:	e0bff815 	stw	r2,-32(fp)
    
    alt_tse_phy_info *pphy = 0;
   27a90:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
   27a94:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_mac_group *pmac_group = 0;
   27a98:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
   27a9c:	e03ffc15 	stw	zero,-16(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
   27aa0:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = 0;
   27aa4:	e03ffd45 	stb	zero,-11(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
   27aa8:	d0a8d883 	ldbu	r2,-23710(gp)
   27aac:	10803fcc 	andi	r2,r2,255
   27ab0:	1000031e 	bne	r2,zero,27ac0 <getPHYSpeed+0xcc>
        alt_tse_phy_init();
   27ab4:	00299c80 	call	299c8 <alt_tse_phy_init>
        is_init = 1;
   27ab8:	00800044 	movi	r2,1
   27abc:	d0a8d885 	stb	r2,-23710(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
   27ac0:	e13fff17 	ldw	r4,-4(fp)
   27ac4:	00277b00 	call	277b0 <alt_tse_get_mac_info>
   27ac8:	e0bffa15 	stw	r2,-24(fp)
    
    if(pmac_info == 0) {
   27acc:	e0bffa17 	ldw	r2,-24(fp)
   27ad0:	1000491e 	bne	r2,zero,27bf8 <getPHYSpeed+0x204>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   27ad4:	00800044 	movi	r2,1
   27ad8:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   27adc:	00800044 	movi	r2,1
   27ae0:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
   27ae4:	e0bff743 	ldbu	r2,-35(fp)
   27ae8:	10c0004c 	andi	r3,r2,1
   27aec:	e0bff703 	ldbu	r2,-36(fp)
   27af0:	10800098 	cmpnei	r2,r2,2
   27af4:	1000021e 	bne	r2,zero,27b00 <getPHYSpeed+0x10c>
   27af8:	00800084 	movi	r2,2
   27afc:	00000106 	br	27b04 <getPHYSpeed+0x110>
   27b00:	0005883a 	mov	r2,zero
   27b04:	1886b03a 	or	r3,r3,r2
   27b08:	e0bff703 	ldbu	r2,-36(fp)
   27b0c:	10800058 	cmpnei	r2,r2,1
   27b10:	1000021e 	bne	r2,zero,27b1c <getPHYSpeed+0x128>
   27b14:	00800104 	movi	r2,4
   27b18:	00000106 	br	27b20 <getPHYSpeed+0x12c>
   27b1c:	0005883a 	mov	r2,zero
   27b20:	1886b03a 	or	r3,r3,r2
   27b24:	e0bff703 	ldbu	r2,-36(fp)
   27b28:	1000021e 	bne	r2,zero,27b34 <getPHYSpeed+0x140>
   27b2c:	00800204 	movi	r2,8
   27b30:	00000106 	br	27b38 <getPHYSpeed+0x144>
   27b34:	0005883a 	mov	r2,zero
   27b38:	1886b03a 	or	r3,r3,r2
   27b3c:	e0bff703 	ldbu	r2,-36(fp)
   27b40:	108000d8 	cmpnei	r2,r2,3
   27b44:	1000021e 	bne	r2,zero,27b50 <getPHYSpeed+0x15c>
   27b48:	00800074 	movhi	r2,1
   27b4c:	00000106 	br	27b54 <getPHYSpeed+0x160>
   27b50:	0005883a 	mov	r2,zero
   27b54:	1884b03a 	or	r2,r3,r2
   27b58:	10802034 	orhi	r2,r2,128
   27b5c:	e0bff815 	stw	r2,-32(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
   27b60:	e0bff703 	ldbu	r2,-36(fp)
   27b64:	108000a0 	cmpeqi	r2,r2,2
   27b68:	10000f1e 	bne	r2,zero,27ba8 <getPHYSpeed+0x1b4>
   27b6c:	e0bff703 	ldbu	r2,-36(fp)
   27b70:	10800060 	cmpeqi	r2,r2,1
   27b74:	1000081e 	bne	r2,zero,27b98 <getPHYSpeed+0x1a4>
   27b78:	e0bff703 	ldbu	r2,-36(fp)
   27b7c:	1000031e 	bne	r2,zero,27b8c <getPHYSpeed+0x198>
   27b80:	008000f4 	movhi	r2,3
   27b84:	10842c04 	addi	r2,r2,4272
   27b88:	00000206 	br	27b94 <getPHYSpeed+0x1a0>
   27b8c:	008000f4 	movhi	r2,3
   27b90:	10842d04 	addi	r2,r2,4276
   27b94:	00000206 	br	27ba0 <getPHYSpeed+0x1ac>
   27b98:	008000f4 	movhi	r2,3
   27b9c:	10842f04 	addi	r2,r2,4284
   27ba0:	1007883a 	mov	r3,r2
   27ba4:	00000206 	br	27bb0 <getPHYSpeed+0x1bc>
   27ba8:	00c000f4 	movhi	r3,3
   27bac:	18c43004 	addi	r3,r3,4288
   27bb0:	e0bff743 	ldbu	r2,-35(fp)
   27bb4:	10800058 	cmpnei	r2,r2,1
   27bb8:	1000031e 	bne	r2,zero,27bc8 <getPHYSpeed+0x1d4>
   27bbc:	008000f4 	movhi	r2,3
   27bc0:	10843204 	addi	r2,r2,4296
   27bc4:	00000206 	br	27bd0 <getPHYSpeed+0x1dc>
   27bc8:	008000f4 	movhi	r2,3
   27bcc:	10843404 	addi	r2,r2,4304
   27bd0:	010000f4 	movhi	r4,3
   27bd4:	21043604 	addi	r4,r4,4312
   27bd8:	180b883a 	mov	r5,r3
   27bdc:	100d883a 	mov	r6,r2
   27be0:	0017c440 	call	17c44 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
   27be4:	010000f4 	movhi	r4,3
   27be8:	21044e04 	addi	r4,r4,4408
   27bec:	0017eb00 	call	17eb0 <puts>
        return result;
   27bf0:	e0bff817 	ldw	r2,-32(fp)
   27bf4:	00021706 	br	28454 <getPHYSpeed+0xa60>
    }
    
    pphy = pmac_info->pphy_info;
   27bf8:	e0bffa17 	ldw	r2,-24(fp)
   27bfc:	10800117 	ldw	r2,4(r2)
   27c00:	e0bff915 	stw	r2,-28(fp)
    pmac_group = pmac_info->pmac_group;
   27c04:	e0bffa17 	ldw	r2,-24(fp)
   27c08:	10800317 	ldw	r2,12(r2)
   27c0c:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
   27c10:	e0bffa17 	ldw	r2,-24(fp)
   27c14:	10800217 	ldw	r2,8(r2)
   27c18:	e0bffc15 	stw	r2,-16(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   27c1c:	e13ffa17 	ldw	r4,-24(fp)
   27c20:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   27c24:	e0bffd05 	stb	r2,-12(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   27c28:	e13ffb17 	ldw	r4,-20(fp)
   27c2c:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   27c30:	e0bffd45 	stb	r2,-11(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
   27c34:	e0bffb17 	ldw	r2,-20(fp)
   27c38:	10800117 	ldw	r2,4(r2)
   27c3c:	10800217 	ldw	r2,8(r2)
   27c40:	10800203 	ldbu	r2,8(r2)
   27c44:	10803fcc 	andi	r2,r2,255
   27c48:	10005a1e 	bne	r2,zero,27db4 <getPHYSpeed+0x3c0>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   27c4c:	00800044 	movi	r2,1
   27c50:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   27c54:	00800044 	movi	r2,1
   27c58:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
   27c5c:	e0bff743 	ldbu	r2,-35(fp)
   27c60:	10c0004c 	andi	r3,r2,1
   27c64:	e0bff703 	ldbu	r2,-36(fp)
   27c68:	10800098 	cmpnei	r2,r2,2
   27c6c:	1000021e 	bne	r2,zero,27c78 <getPHYSpeed+0x284>
   27c70:	00800084 	movi	r2,2
   27c74:	00000106 	br	27c7c <getPHYSpeed+0x288>
   27c78:	0005883a 	mov	r2,zero
   27c7c:	1886b03a 	or	r3,r3,r2
   27c80:	e0bff703 	ldbu	r2,-36(fp)
   27c84:	10800058 	cmpnei	r2,r2,1
   27c88:	1000021e 	bne	r2,zero,27c94 <getPHYSpeed+0x2a0>
   27c8c:	00800104 	movi	r2,4
   27c90:	00000106 	br	27c98 <getPHYSpeed+0x2a4>
   27c94:	0005883a 	mov	r2,zero
   27c98:	1886b03a 	or	r3,r3,r2
   27c9c:	e0bff703 	ldbu	r2,-36(fp)
   27ca0:	1000021e 	bne	r2,zero,27cac <getPHYSpeed+0x2b8>
   27ca4:	00800204 	movi	r2,8
   27ca8:	00000106 	br	27cb0 <getPHYSpeed+0x2bc>
   27cac:	0005883a 	mov	r2,zero
   27cb0:	1886b03a 	or	r3,r3,r2
   27cb4:	e0bff703 	ldbu	r2,-36(fp)
   27cb8:	108000d8 	cmpnei	r2,r2,3
   27cbc:	1000021e 	bne	r2,zero,27cc8 <getPHYSpeed+0x2d4>
   27cc0:	00800074 	movhi	r2,1
   27cc4:	00000106 	br	27ccc <getPHYSpeed+0x2d8>
   27cc8:	0005883a 	mov	r2,zero
   27ccc:	1884b03a 	or	r2,r3,r2
   27cd0:	10801034 	orhi	r2,r2,64
   27cd4:	e0bff815 	stw	r2,-32(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
   27cd8:	010003f4 	movhi	r4,15
   27cdc:	21109004 	addi	r4,r4,16960
   27ce0:	0021d7c0 	call	21d7c <usleep>
        if(psys->tse_phy_cfg) {
   27ce4:	e0bffc17 	ldw	r2,-16(fp)
   27ce8:	10801117 	ldw	r2,68(r2)
   27cec:	10000d26 	beq	r2,zero,27d24 <getPHYSpeed+0x330>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
   27cf0:	e0fffd47 	ldb	r3,-11(fp)
   27cf4:	e0bffd07 	ldb	r2,-12(fp)
   27cf8:	010000f4 	movhi	r4,3
   27cfc:	21045f04 	addi	r4,r4,4476
   27d00:	180b883a 	mov	r5,r3
   27d04:	100d883a 	mov	r6,r2
   27d08:	0017c440 	call	17c44 <printf>
        	result = psys->tse_phy_cfg(pmac);
   27d0c:	e0bffc17 	ldw	r2,-16(fp)
   27d10:	10801117 	ldw	r2,68(r2)
   27d14:	e13fff17 	ldw	r4,-4(fp)
   27d18:	103ee83a 	callr	r2
   27d1c:	e0bff815 	stw	r2,-32(fp)
   27d20:	00002206 	br	27dac <getPHYSpeed+0x3b8>
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   27d24:	e17ffd47 	ldb	r5,-11(fp)
   27d28:	e0bff703 	ldbu	r2,-36(fp)
   27d2c:	108000a0 	cmpeqi	r2,r2,2
   27d30:	10000f1e 	bne	r2,zero,27d70 <getPHYSpeed+0x37c>
   27d34:	e0bff703 	ldbu	r2,-36(fp)
   27d38:	10800060 	cmpeqi	r2,r2,1
   27d3c:	1000081e 	bne	r2,zero,27d60 <getPHYSpeed+0x36c>
   27d40:	e0bff703 	ldbu	r2,-36(fp)
   27d44:	1000031e 	bne	r2,zero,27d54 <getPHYSpeed+0x360>
   27d48:	008000f4 	movhi	r2,3
   27d4c:	10842c04 	addi	r2,r2,4272
   27d50:	00000206 	br	27d5c <getPHYSpeed+0x368>
   27d54:	008000f4 	movhi	r2,3
   27d58:	10842d04 	addi	r2,r2,4276
   27d5c:	00000206 	br	27d68 <getPHYSpeed+0x374>
   27d60:	008000f4 	movhi	r2,3
   27d64:	10842f04 	addi	r2,r2,4284
   27d68:	1007883a 	mov	r3,r2
   27d6c:	00000206 	br	27d78 <getPHYSpeed+0x384>
   27d70:	00c000f4 	movhi	r3,3
   27d74:	18c43004 	addi	r3,r3,4288
   27d78:	e0bff743 	ldbu	r2,-35(fp)
   27d7c:	10800058 	cmpnei	r2,r2,1
   27d80:	1000031e 	bne	r2,zero,27d90 <getPHYSpeed+0x39c>
   27d84:	008000f4 	movhi	r2,3
   27d88:	10843204 	addi	r2,r2,4296
   27d8c:	00000206 	br	27d98 <getPHYSpeed+0x3a4>
   27d90:	008000f4 	movhi	r2,3
   27d94:	10843404 	addi	r2,r2,4304
   27d98:	010000f4 	movhi	r4,3
   27d9c:	21047104 	addi	r4,r4,4548
   27da0:	180d883a 	mov	r6,r3
   27da4:	100f883a 	mov	r7,r2
   27da8:	0017c440 	call	17c44 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
   27dac:	e0bff817 	ldw	r2,-32(fp)
   27db0:	0001a806 	br	28454 <getPHYSpeed+0xa60>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   27db4:	e0bffb17 	ldw	r2,-20(fp)
   27db8:	10800117 	ldw	r2,4(r2)
   27dbc:	10800217 	ldw	r2,8(r2)
   27dc0:	10800017 	ldw	r2,0(r2)
   27dc4:	e0bffe15 	stw	r2,-8(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
   27dc8:	e0bff917 	ldw	r2,-28(fp)
   27dcc:	1000471e 	bne	r2,zero,27eec <getPHYSpeed+0x4f8>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   27dd0:	00800044 	movi	r2,1
   27dd4:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   27dd8:	00800044 	movi	r2,1
   27ddc:	e0bff745 	stb	r2,-35(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
   27de0:	e0bff743 	ldbu	r2,-35(fp)
   27de4:	10c0004c 	andi	r3,r2,1
   27de8:	e0bff703 	ldbu	r2,-36(fp)
   27dec:	10800098 	cmpnei	r2,r2,2
   27df0:	1000021e 	bne	r2,zero,27dfc <getPHYSpeed+0x408>
   27df4:	00800084 	movi	r2,2
   27df8:	00000106 	br	27e00 <getPHYSpeed+0x40c>
   27dfc:	0005883a 	mov	r2,zero
   27e00:	1886b03a 	or	r3,r3,r2
   27e04:	e0bff703 	ldbu	r2,-36(fp)
   27e08:	10800058 	cmpnei	r2,r2,1
   27e0c:	1000021e 	bne	r2,zero,27e18 <getPHYSpeed+0x424>
   27e10:	00800104 	movi	r2,4
   27e14:	00000106 	br	27e1c <getPHYSpeed+0x428>
   27e18:	0005883a 	mov	r2,zero
   27e1c:	1886b03a 	or	r3,r3,r2
   27e20:	e0bff703 	ldbu	r2,-36(fp)
   27e24:	1000021e 	bne	r2,zero,27e30 <getPHYSpeed+0x43c>
   27e28:	00800204 	movi	r2,8
   27e2c:	00000106 	br	27e34 <getPHYSpeed+0x440>
   27e30:	0005883a 	mov	r2,zero
   27e34:	1886b03a 	or	r3,r3,r2
   27e38:	e0bff703 	ldbu	r2,-36(fp)
   27e3c:	108000d8 	cmpnei	r2,r2,3
   27e40:	1000021e 	bne	r2,zero,27e4c <getPHYSpeed+0x458>
   27e44:	00800074 	movhi	r2,1
   27e48:	00000106 	br	27e50 <getPHYSpeed+0x45c>
   27e4c:	0005883a 	mov	r2,zero
   27e50:	1884b03a 	or	r2,r3,r2
   27e54:	10800834 	orhi	r2,r2,32
   27e58:	e0bff815 	stw	r2,-32(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   27e5c:	e17ffd47 	ldb	r5,-11(fp)
   27e60:	e1bffd07 	ldb	r6,-12(fp)
   27e64:	e0bff703 	ldbu	r2,-36(fp)
   27e68:	108000a0 	cmpeqi	r2,r2,2
   27e6c:	10000e1e 	bne	r2,zero,27ea8 <getPHYSpeed+0x4b4>
   27e70:	e0bff703 	ldbu	r2,-36(fp)
   27e74:	10800060 	cmpeqi	r2,r2,1
   27e78:	1000081e 	bne	r2,zero,27e9c <getPHYSpeed+0x4a8>
   27e7c:	e0bff703 	ldbu	r2,-36(fp)
   27e80:	1000031e 	bne	r2,zero,27e90 <getPHYSpeed+0x49c>
   27e84:	008000f4 	movhi	r2,3
   27e88:	10842c04 	addi	r2,r2,4272
   27e8c:	00000206 	br	27e98 <getPHYSpeed+0x4a4>
   27e90:	008000f4 	movhi	r2,3
   27e94:	10842d04 	addi	r2,r2,4276
   27e98:	00000206 	br	27ea4 <getPHYSpeed+0x4b0>
   27e9c:	008000f4 	movhi	r2,3
   27ea0:	10842f04 	addi	r2,r2,4284
   27ea4:	00000206 	br	27eb0 <getPHYSpeed+0x4bc>
   27ea8:	008000f4 	movhi	r2,3
   27eac:	10843004 	addi	r2,r2,4288
   27eb0:	e0fff743 	ldbu	r3,-35(fp)
   27eb4:	18c00058 	cmpnei	r3,r3,1
   27eb8:	1800031e 	bne	r3,zero,27ec8 <getPHYSpeed+0x4d4>
   27ebc:	00c000f4 	movhi	r3,3
   27ec0:	18c43204 	addi	r3,r3,4296
   27ec4:	00000206 	br	27ed0 <getPHYSpeed+0x4dc>
   27ec8:	00c000f4 	movhi	r3,3
   27ecc:	18c43404 	addi	r3,r3,4304
   27ed0:	d8c00015 	stw	r3,0(sp)
   27ed4:	010000f4 	movhi	r4,3
   27ed8:	21048304 	addi	r4,r4,4620
   27edc:	100f883a 	mov	r7,r2
   27ee0:	0017c440 	call	17c44 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
   27ee4:	e0bff817 	ldw	r2,-32(fp)
   27ee8:	00015a06 	br	28454 <getPHYSpeed+0xa60>
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
   27eec:	e0bffa17 	ldw	r2,-24(fp)
   27ef0:	10800003 	ldbu	r2,0(r2)
   27ef4:	10803fcc 	andi	r2,r2,255
   27ef8:	10800058 	cmpnei	r2,r2,1
   27efc:	1000081e 	bne	r2,zero,27f20 <getPHYSpeed+0x52c>
			alt_tse_phy_set_adv_1000(pphy, 0);
   27f00:	e13ff917 	ldw	r4,-28(fp)
   27f04:	000b883a 	mov	r5,zero
   27f08:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   27f0c:	e13ff917 	ldw	r4,-28(fp)
   27f10:	01400134 	movhi	r5,4
   27f14:	29742404 	addi	r5,r5,-12144
   27f18:	0029ae00 	call	29ae0 <alt_tse_phy_restart_an>
   27f1c:	00000f06 	br	27f5c <getPHYSpeed+0x568>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
   27f20:	e0bffa17 	ldw	r2,-24(fp)
   27f24:	10800003 	ldbu	r2,0(r2)
   27f28:	10803fcc 	andi	r2,r2,255
   27f2c:	10800098 	cmpnei	r2,r2,2
   27f30:	10000a1e 	bne	r2,zero,27f5c <getPHYSpeed+0x568>
			alt_tse_phy_set_adv_100(pphy, 0);
   27f34:	e13ff917 	ldw	r4,-28(fp)
   27f38:	000b883a 	mov	r5,zero
   27f3c:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
   27f40:	e13ff917 	ldw	r4,-28(fp)
   27f44:	000b883a 	mov	r5,zero
   27f48:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   27f4c:	e13ff917 	ldw	r4,-28(fp)
   27f50:	01400134 	movhi	r5,4
   27f54:	29742404 	addi	r5,r5,-12144
   27f58:	0029ae00 	call	29ae0 <alt_tse_phy_restart_an>
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
   27f5c:	e13ff917 	ldw	r4,-28(fp)
   27f60:	01400134 	movhi	r5,4
   27f64:	29742404 	addi	r5,r5,-12144
   27f68:	0029ca40 	call	29ca4 <alt_tse_phy_check_link>
   27f6c:	10bfffd8 	cmpnei	r2,r2,-1
   27f70:	1000471e 	bne	r2,zero,28090 <getPHYSpeed+0x69c>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   27f74:	00800044 	movi	r2,1
   27f78:	e0bff705 	stb	r2,-36(fp)
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   27f7c:	00800044 	movi	r2,1
   27f80:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
   27f84:	e0bff743 	ldbu	r2,-35(fp)
   27f88:	10c0004c 	andi	r3,r2,1
   27f8c:	e0bff703 	ldbu	r2,-36(fp)
   27f90:	10800098 	cmpnei	r2,r2,2
   27f94:	1000021e 	bne	r2,zero,27fa0 <getPHYSpeed+0x5ac>
   27f98:	00800084 	movi	r2,2
   27f9c:	00000106 	br	27fa4 <getPHYSpeed+0x5b0>
   27fa0:	0005883a 	mov	r2,zero
   27fa4:	1886b03a 	or	r3,r3,r2
   27fa8:	e0bff703 	ldbu	r2,-36(fp)
   27fac:	10800058 	cmpnei	r2,r2,1
   27fb0:	1000021e 	bne	r2,zero,27fbc <getPHYSpeed+0x5c8>
   27fb4:	00800104 	movi	r2,4
   27fb8:	00000106 	br	27fc0 <getPHYSpeed+0x5cc>
   27fbc:	0005883a 	mov	r2,zero
   27fc0:	1886b03a 	or	r3,r3,r2
   27fc4:	e0bff703 	ldbu	r2,-36(fp)
   27fc8:	1000021e 	bne	r2,zero,27fd4 <getPHYSpeed+0x5e0>
   27fcc:	00800204 	movi	r2,8
   27fd0:	00000106 	br	27fd8 <getPHYSpeed+0x5e4>
   27fd4:	0005883a 	mov	r2,zero
   27fd8:	1886b03a 	or	r3,r3,r2
   27fdc:	e0bff703 	ldbu	r2,-36(fp)
   27fe0:	108000d8 	cmpnei	r2,r2,3
   27fe4:	1000021e 	bne	r2,zero,27ff0 <getPHYSpeed+0x5fc>
   27fe8:	00800074 	movhi	r2,1
   27fec:	00000106 	br	27ff4 <getPHYSpeed+0x600>
   27ff0:	0005883a 	mov	r2,zero
   27ff4:	1884b03a 	or	r2,r3,r2
   27ff8:	10800234 	orhi	r2,r2,8
   27ffc:	e0bff815 	stw	r2,-32(fp)
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   28000:	e17ffd47 	ldb	r5,-11(fp)
   28004:	e1bffd07 	ldb	r6,-12(fp)
   28008:	e0bff703 	ldbu	r2,-36(fp)
   2800c:	108000a0 	cmpeqi	r2,r2,2
   28010:	10000e1e 	bne	r2,zero,2804c <getPHYSpeed+0x658>
   28014:	e0bff703 	ldbu	r2,-36(fp)
   28018:	10800060 	cmpeqi	r2,r2,1
   2801c:	1000081e 	bne	r2,zero,28040 <getPHYSpeed+0x64c>
   28020:	e0bff703 	ldbu	r2,-36(fp)
   28024:	1000031e 	bne	r2,zero,28034 <getPHYSpeed+0x640>
   28028:	008000f4 	movhi	r2,3
   2802c:	10842c04 	addi	r2,r2,4272
   28030:	00000206 	br	2803c <getPHYSpeed+0x648>
   28034:	008000f4 	movhi	r2,3
   28038:	10842d04 	addi	r2,r2,4276
   2803c:	00000206 	br	28048 <getPHYSpeed+0x654>
   28040:	008000f4 	movhi	r2,3
   28044:	10842f04 	addi	r2,r2,4284
   28048:	00000206 	br	28054 <getPHYSpeed+0x660>
   2804c:	008000f4 	movhi	r2,3
   28050:	10843004 	addi	r2,r2,4288
   28054:	e0fff743 	ldbu	r3,-35(fp)
   28058:	18c00058 	cmpnei	r3,r3,1
   2805c:	1800031e 	bne	r3,zero,2806c <getPHYSpeed+0x678>
   28060:	00c000f4 	movhi	r3,3
   28064:	18c43204 	addi	r3,r3,4296
   28068:	00000206 	br	28074 <getPHYSpeed+0x680>
   2806c:	00c000f4 	movhi	r3,3
   28070:	18c43404 	addi	r3,r3,4304
   28074:	d8c00015 	stw	r3,0(sp)
   28078:	010000f4 	movhi	r4,3
   2807c:	21049404 	addi	r4,r4,4688
   28080:	100f883a 	mov	r7,r2
   28084:	0017c440 	call	17c44 <printf>
																			 speed == TSE_PHY_SPEED_100 ? "100" :
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
   28088:	e0bff817 	ldw	r2,-32(fp)
   2808c:	0000f106 	br	28454 <getPHYSpeed+0xa60>
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
   28090:	e0bffe17 	ldw	r2,-8(fp)
   28094:	10801004 	addi	r2,r2,64
   28098:	e0fff917 	ldw	r3,-28(fp)
   2809c:	18c00003 	ldbu	r3,0(r3)
   280a0:	18c03fcc 	andi	r3,r3,255
   280a4:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
   280a8:	d8000015 	stw	zero,0(sp)
   280ac:	e13ff917 	ldw	r4,-28(fp)
   280b0:	000b883a 	mov	r5,zero
   280b4:	01800384 	movi	r6,14
   280b8:	01c00044 	movi	r7,1
   280bc:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
   280c0:	e0bff917 	ldw	r2,-28(fp)
   280c4:	10800517 	ldw	r2,20(r2)
   280c8:	10002b1e 	bne	r2,zero,28178 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
   280cc:	e0fffd47 	ldb	r3,-11(fp)
   280d0:	e0bffd07 	ldb	r2,-12(fp)
   280d4:	010000f4 	movhi	r4,3
   280d8:	2104a804 	addi	r4,r4,4768
   280dc:	180b883a 	mov	r5,r3
   280e0:	100d883a 	mov	r6,r2
   280e4:	0017c440 	call	17c44 <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   280e8:	00800044 	movi	r2,1
   280ec:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   280f0:	00800044 	movi	r2,1
   280f4:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
   280f8:	e0bff743 	ldbu	r2,-35(fp)
   280fc:	10c0004c 	andi	r3,r2,1
   28100:	e0bff703 	ldbu	r2,-36(fp)
   28104:	10800098 	cmpnei	r2,r2,2
   28108:	1000021e 	bne	r2,zero,28114 <getPHYSpeed+0x720>
   2810c:	00800084 	movi	r2,2
   28110:	00000106 	br	28118 <getPHYSpeed+0x724>
   28114:	0005883a 	mov	r2,zero
   28118:	1886b03a 	or	r3,r3,r2
   2811c:	e0bff703 	ldbu	r2,-36(fp)
   28120:	10800058 	cmpnei	r2,r2,1
   28124:	1000021e 	bne	r2,zero,28130 <getPHYSpeed+0x73c>
   28128:	00800104 	movi	r2,4
   2812c:	00000106 	br	28134 <getPHYSpeed+0x740>
   28130:	0005883a 	mov	r2,zero
   28134:	1886b03a 	or	r3,r3,r2
   28138:	e0bff703 	ldbu	r2,-36(fp)
   2813c:	1000021e 	bne	r2,zero,28148 <getPHYSpeed+0x754>
   28140:	00800204 	movi	r2,8
   28144:	00000106 	br	2814c <getPHYSpeed+0x758>
   28148:	0005883a 	mov	r2,zero
   2814c:	1886b03a 	or	r3,r3,r2
   28150:	e0bff703 	ldbu	r2,-36(fp)
   28154:	108000d8 	cmpnei	r2,r2,3
   28158:	1000021e 	bne	r2,zero,28164 <getPHYSpeed+0x770>
   2815c:	00800074 	movhi	r2,1
   28160:	00000106 	br	28168 <getPHYSpeed+0x774>
   28164:	0005883a 	mov	r2,zero
   28168:	1884b03a 	or	r2,r3,r2
   2816c:	10800134 	orhi	r2,r2,4
   28170:	e0bff815 	stw	r2,-32(fp)
   28174:	00009406 	br	283c8 <getPHYSpeed+0x9d4>
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
   28178:	e0bff917 	ldw	r2,-28(fp)
   2817c:	10800517 	ldw	r2,20(r2)
   28180:	10801817 	ldw	r2,96(r2)
   28184:	10002626 	beq	r2,zero,28220 <getPHYSpeed+0x82c>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
   28188:	e0bff917 	ldw	r2,-28(fp)
   2818c:	10800517 	ldw	r2,20(r2)
   28190:	10801817 	ldw	r2,96(r2)
   28194:	e13ffe17 	ldw	r4,-8(fp)
   28198:	103ee83a 	callr	r2
   2819c:	e0bff815 	stw	r2,-32(fp)
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
   281a0:	e0bff817 	ldw	r2,-32(fp)
   281a4:	1080008c 	andi	r2,r2,2
   281a8:	10000c1e 	bne	r2,zero,281dc <getPHYSpeed+0x7e8>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
   281ac:	e0bff817 	ldw	r2,-32(fp)
   281b0:	1080010c 	andi	r2,r2,4
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
   281b4:	1000071e 	bne	r2,zero,281d4 <getPHYSpeed+0x7e0>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
   281b8:	e0bff817 	ldw	r2,-32(fp)
   281bc:	1080020c 	andi	r2,r2,8
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
   281c0:	10000226 	beq	r2,zero,281cc <getPHYSpeed+0x7d8>
   281c4:	0005883a 	mov	r2,zero
   281c8:	00000106 	br	281d0 <getPHYSpeed+0x7dc>
   281cc:	008000c4 	movi	r2,3
   281d0:	00000106 	br	281d8 <getPHYSpeed+0x7e4>
   281d4:	00800044 	movi	r2,1
   281d8:	00000106 	br	281e0 <getPHYSpeed+0x7ec>
   281dc:	00800084 	movi	r2,2
   281e0:	e0bff705 	stb	r2,-36(fp)
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
   281e4:	e0bff817 	ldw	r2,-32(fp)
   281e8:	1080004c 	andi	r2,r2,1
   281ec:	1004c03a 	cmpne	r2,r2,zero
   281f0:	e0bff745 	stb	r2,-35(fp)
				
				if(result & ALT_TSE_E_INVALID_SPEED)
   281f4:	e0bff817 	ldw	r2,-32(fp)
   281f8:	1080006c 	andhi	r2,r2,1
   281fc:	10007226 	beq	r2,zero,283c8 <getPHYSpeed+0x9d4>
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
   28200:	e0fffd47 	ldb	r3,-11(fp)
   28204:	e0bffd07 	ldb	r2,-12(fp)
   28208:	010000f4 	movhi	r4,3
   2820c:	2104b604 	addi	r4,r4,4824
   28210:	180b883a 	mov	r5,r3
   28214:	100d883a 	mov	r6,r2
   28218:	0017c440 	call	17c44 <printf>
   2821c:	00006a06 	br	283c8 <getPHYSpeed+0x9d4>
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
   28220:	e0bff917 	ldw	r2,-28(fp)
   28224:	10800517 	ldw	r2,20(r2)
   28228:	10801583 	ldbu	r2,86(r2)
   2822c:	10803fcc 	andi	r2,r2,255
   28230:	10002b1e 	bne	r2,zero,282e0 <getPHYSpeed+0x8ec>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
   28234:	e0fffd47 	ldb	r3,-11(fp)
   28238:	e0bffd07 	ldb	r2,-12(fp)
   2823c:	010000f4 	movhi	r4,3
   28240:	2104c304 	addi	r4,r4,4876
   28244:	180b883a 	mov	r5,r3
   28248:	100d883a 	mov	r6,r2
   2824c:	0017c440 	call	17c44 <printf>
	            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
   28250:	00800044 	movi	r2,1
   28254:	e0bff705 	stb	r2,-36(fp)
	            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
   28258:	00800044 	movi	r2,1
   2825c:	e0bff745 	stb	r2,-35(fp)
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
   28260:	e0bff743 	ldbu	r2,-35(fp)
   28264:	10c0004c 	andi	r3,r2,1
   28268:	e0bff703 	ldbu	r2,-36(fp)
   2826c:	10800098 	cmpnei	r2,r2,2
   28270:	1000021e 	bne	r2,zero,2827c <getPHYSpeed+0x888>
   28274:	00800084 	movi	r2,2
   28278:	00000106 	br	28280 <getPHYSpeed+0x88c>
   2827c:	0005883a 	mov	r2,zero
   28280:	1886b03a 	or	r3,r3,r2
   28284:	e0bff703 	ldbu	r2,-36(fp)
   28288:	10800058 	cmpnei	r2,r2,1
   2828c:	1000021e 	bne	r2,zero,28298 <getPHYSpeed+0x8a4>
   28290:	00800104 	movi	r2,4
   28294:	00000106 	br	2829c <getPHYSpeed+0x8a8>
   28298:	0005883a 	mov	r2,zero
   2829c:	1886b03a 	or	r3,r3,r2
   282a0:	e0bff703 	ldbu	r2,-36(fp)
   282a4:	1000021e 	bne	r2,zero,282b0 <getPHYSpeed+0x8bc>
   282a8:	00800204 	movi	r2,8
   282ac:	00000106 	br	282b4 <getPHYSpeed+0x8c0>
   282b0:	0005883a 	mov	r2,zero
   282b4:	1886b03a 	or	r3,r3,r2
   282b8:	e0bff703 	ldbu	r2,-36(fp)
   282bc:	108000d8 	cmpnei	r2,r2,3
   282c0:	1000021e 	bne	r2,zero,282cc <getPHYSpeed+0x8d8>
   282c4:	00800074 	movhi	r2,1
   282c8:	00000106 	br	282d0 <getPHYSpeed+0x8dc>
   282cc:	0005883a 	mov	r2,zero
   282d0:	1884b03a 	or	r2,r3,r2
   282d4:	108000b4 	orhi	r2,r2,2
   282d8:	e0bff815 	stw	r2,-32(fp)
   282dc:	00003a06 	br	283c8 <getPHYSpeed+0x9d4>
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
   282e0:	e0bff917 	ldw	r2,-28(fp)
   282e4:	10800517 	ldw	r2,20(r2)
   282e8:	10801583 	ldbu	r2,86(r2)
   282ec:	10c03fcc 	andi	r3,r2,255
   282f0:	e0bff917 	ldw	r2,-28(fp)
   282f4:	10800517 	ldw	r2,20(r2)
   282f8:	108015c3 	ldbu	r2,87(r2)
   282fc:	10803fcc 	andi	r2,r2,255
   28300:	e13ff917 	ldw	r4,-28(fp)
   28304:	180b883a 	mov	r5,r3
   28308:	100d883a 	mov	r6,r2
   2830c:	01c00084 	movi	r7,2
   28310:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   28314:	e0bff705 	stb	r2,-36(fp)
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
   28318:	e0bff917 	ldw	r2,-28(fp)
   2831c:	10800517 	ldw	r2,20(r2)
   28320:	10801583 	ldbu	r2,86(r2)
   28324:	10c03fcc 	andi	r3,r2,255
   28328:	e0bff917 	ldw	r2,-28(fp)
   2832c:	10800517 	ldw	r2,20(r2)
   28330:	10801603 	ldbu	r2,88(r2)
   28334:	10803fcc 	andi	r2,r2,255
   28338:	e13ff917 	ldw	r4,-28(fp)
   2833c:	180b883a 	mov	r5,r3
   28340:	100d883a 	mov	r6,r2
   28344:	01c00044 	movi	r7,1
   28348:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2834c:	e0bff745 	stb	r2,-35(fp)
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
   28350:	e0bff743 	ldbu	r2,-35(fp)
   28354:	10c0004c 	andi	r3,r2,1
   28358:	e0bff703 	ldbu	r2,-36(fp)
   2835c:	10800098 	cmpnei	r2,r2,2
   28360:	1000021e 	bne	r2,zero,2836c <getPHYSpeed+0x978>
   28364:	00800084 	movi	r2,2
   28368:	00000106 	br	28370 <getPHYSpeed+0x97c>
   2836c:	0005883a 	mov	r2,zero
   28370:	1886b03a 	or	r3,r3,r2
   28374:	e0bff703 	ldbu	r2,-36(fp)
   28378:	10800058 	cmpnei	r2,r2,1
   2837c:	1000021e 	bne	r2,zero,28388 <getPHYSpeed+0x994>
   28380:	00800104 	movi	r2,4
   28384:	00000106 	br	2838c <getPHYSpeed+0x998>
   28388:	0005883a 	mov	r2,zero
   2838c:	1886b03a 	or	r3,r3,r2
   28390:	e0bff703 	ldbu	r2,-36(fp)
   28394:	1000021e 	bne	r2,zero,283a0 <getPHYSpeed+0x9ac>
   28398:	00800204 	movi	r2,8
   2839c:	00000106 	br	283a4 <getPHYSpeed+0x9b0>
   283a0:	0005883a 	mov	r2,zero
   283a4:	1886b03a 	or	r3,r3,r2
   283a8:	e0bff703 	ldbu	r2,-36(fp)
   283ac:	108000d8 	cmpnei	r2,r2,3
   283b0:	1000021e 	bne	r2,zero,283bc <getPHYSpeed+0x9c8>
   283b4:	00800074 	movhi	r2,1
   283b8:	00000106 	br	283c0 <getPHYSpeed+0x9cc>
   283bc:	0005883a 	mov	r2,zero
   283c0:	1884b03a 	or	r2,r3,r2
   283c4:	e0bff815 	stw	r2,-32(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
   283c8:	e17ffd47 	ldb	r5,-11(fp)
   283cc:	e1bffd07 	ldb	r6,-12(fp)
   283d0:	e0bff703 	ldbu	r2,-36(fp)
   283d4:	108000a0 	cmpeqi	r2,r2,2
   283d8:	10000e1e 	bne	r2,zero,28414 <getPHYSpeed+0xa20>
   283dc:	e0bff703 	ldbu	r2,-36(fp)
   283e0:	10800060 	cmpeqi	r2,r2,1
   283e4:	1000081e 	bne	r2,zero,28408 <getPHYSpeed+0xa14>
   283e8:	e0bff703 	ldbu	r2,-36(fp)
   283ec:	1000031e 	bne	r2,zero,283fc <getPHYSpeed+0xa08>
   283f0:	008000f4 	movhi	r2,3
   283f4:	10842c04 	addi	r2,r2,4272
   283f8:	00000206 	br	28404 <getPHYSpeed+0xa10>
   283fc:	008000f4 	movhi	r2,3
   28400:	10842d04 	addi	r2,r2,4276
   28404:	00000206 	br	28410 <getPHYSpeed+0xa1c>
   28408:	008000f4 	movhi	r2,3
   2840c:	10842f04 	addi	r2,r2,4284
   28410:	00000206 	br	2841c <getPHYSpeed+0xa28>
   28414:	008000f4 	movhi	r2,3
   28418:	10843004 	addi	r2,r2,4288
   2841c:	e0fff743 	ldbu	r3,-35(fp)
   28420:	18c00058 	cmpnei	r3,r3,1
   28424:	1800031e 	bne	r3,zero,28434 <getPHYSpeed+0xa40>
   28428:	00c000f4 	movhi	r3,3
   2842c:	18c43204 	addi	r3,r3,4296
   28430:	00000206 	br	2843c <getPHYSpeed+0xa48>
   28434:	00c000f4 	movhi	r3,3
   28438:	18c43404 	addi	r3,r3,4304
   2843c:	d8c00015 	stw	r3,0(sp)
   28440:	010000f4 	movhi	r4,3
   28444:	2104da04 	addi	r4,r4,4968
   28448:	100f883a 	mov	r7,r2
   2844c:	0017c440 	call	17c44 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
   28450:	e0bff817 	ldw	r2,-32(fp)
}
   28454:	e037883a 	mov	sp,fp
   28458:	dfc00117 	ldw	ra,4(sp)
   2845c:	df000017 	ldw	fp,0(sp)
   28460:	dec00204 	addi	sp,sp,8
   28464:	f800283a 	ret

00028468 <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
   28468:	defffd04 	addi	sp,sp,-12
   2846c:	df000215 	stw	fp,8(sp)
   28470:	df000204 	addi	fp,sp,8
   28474:	e13fff15 	stw	r4,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   28478:	e0bfff17 	ldw	r2,-4(fp)
   2847c:	10800617 	ldw	r2,24(r2)
   28480:	10800317 	ldw	r2,12(r2)
   28484:	10800117 	ldw	r2,4(r2)
   28488:	10800217 	ldw	r2,8(r2)
   2848c:	10800017 	ldw	r2,0(r2)
   28490:	e0bffe15 	stw	r2,-8(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
   28494:	e0bffe17 	ldw	r2,-8(fp)
   28498:	10801004 	addi	r2,r2,64
   2849c:	10800037 	ldwio	r2,0(r2)
}
   284a0:	e037883a 	mov	sp,fp
   284a4:	df000017 	ldw	fp,0(sp)
   284a8:	dec00104 	addi	sp,sp,4
   284ac:	f800283a 	ret

000284b0 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
   284b0:	defffc04 	addi	sp,sp,-16
   284b4:	df000315 	stw	fp,12(sp)
   284b8:	df000304 	addi	fp,sp,12
   284bc:	e13ffe15 	stw	r4,-8(fp)
   284c0:	2805883a 	mov	r2,r5
   284c4:	e0bfff05 	stb	r2,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   284c8:	e0bffe17 	ldw	r2,-8(fp)
   284cc:	10800617 	ldw	r2,24(r2)
   284d0:	10800317 	ldw	r2,12(r2)
   284d4:	10800117 	ldw	r2,4(r2)
   284d8:	10800217 	ldw	r2,8(r2)
   284dc:	10800017 	ldw	r2,0(r2)
   284e0:	e0bffd15 	stw	r2,-12(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
   284e4:	e0bffd17 	ldw	r2,-12(fp)
   284e8:	10801004 	addi	r2,r2,64
   284ec:	e0ffff03 	ldbu	r3,-4(fp)
   284f0:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
   284f4:	0005883a 	mov	r2,zero
}
   284f8:	e037883a 	mov	sp,fp
   284fc:	df000017 	ldw	fp,0(sp)
   28500:	dec00104 	addi	sp,sp,4
   28504:	f800283a 	ret

00028508 <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
   28508:	defff604 	addi	sp,sp,-40
   2850c:	df000915 	stw	fp,36(sp)
   28510:	df000904 	addi	fp,sp,36
   28514:	e13ffb15 	stw	r4,-20(fp)
   28518:	2809883a 	mov	r4,r5
   2851c:	3007883a 	mov	r3,r6
   28520:	3805883a 	mov	r2,r7
   28524:	e1400117 	ldw	r5,4(fp)
   28528:	e13ffc05 	stb	r4,-16(fp)
   2852c:	e0fffd05 	stb	r3,-12(fp)
   28530:	e0bffe05 	stb	r2,-8(fp)
   28534:	e17fff0d 	sth	r5,-4(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   28538:	e0bffb17 	ldw	r2,-20(fp)
   2853c:	10800617 	ldw	r2,24(r2)
   28540:	10800317 	ldw	r2,12(r2)
   28544:	10800117 	ldw	r2,4(r2)
   28548:	10800217 	ldw	r2,8(r2)
   2854c:	10800017 	ldw	r2,0(r2)
   28550:	e0bff915 	stw	r2,-28(fp)
    
    bit_mask = 0x00;
   28554:	e03ff70d 	sth	zero,-36(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
   28558:	e03ff815 	stw	zero,-32(fp)
   2855c:	00000906 	br	28584 <alt_tse_phy_wr_mdio_reg+0x7c>
    {
        bit_mask <<= 1;
   28560:	e0bff70b 	ldhu	r2,-36(fp)
   28564:	1085883a 	add	r2,r2,r2
   28568:	e0bff70d 	sth	r2,-36(fp)
        bit_mask |= 0x01;        
   2856c:	e0bff70b 	ldhu	r2,-36(fp)
   28570:	10800054 	ori	r2,r2,1
   28574:	e0bff70d 	sth	r2,-36(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
   28578:	e0bff817 	ldw	r2,-32(fp)
   2857c:	10800044 	addi	r2,r2,1
   28580:	e0bff815 	stw	r2,-32(fp)
   28584:	e0bffe03 	ldbu	r2,-8(fp)
   28588:	e0fff817 	ldw	r3,-32(fp)
   2858c:	18bff416 	blt	r3,r2,28560 <alt_tse_phy_wr_mdio_reg+0x58>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
   28590:	e0fff70b 	ldhu	r3,-36(fp)
   28594:	e0bffd03 	ldbu	r2,-12(fp)
   28598:	1884983a 	sll	r2,r3,r2
   2859c:	e0bff70d 	sth	r2,-36(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
   285a0:	e0bff917 	ldw	r2,-28(fp)
   285a4:	10c0a004 	addi	r3,r2,640
   285a8:	e0bffc03 	ldbu	r2,-16(fp)
   285ac:	1085883a 	add	r2,r2,r2
   285b0:	1085883a 	add	r2,r2,r2
   285b4:	1885883a 	add	r2,r3,r2
   285b8:	10800037 	ldwio	r2,0(r2)
   285bc:	e0bffa0d 	sth	r2,-24(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
   285c0:	e0bff70b 	ldhu	r2,-36(fp)
   285c4:	0084303a 	nor	r2,zero,r2
   285c8:	1007883a 	mov	r3,r2
   285cc:	e0bffa0b 	ldhu	r2,-24(fp)
   285d0:	1884703a 	and	r2,r3,r2
   285d4:	e0bffa0d 	sth	r2,-24(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
   285d8:	e0ffff0b 	ldhu	r3,-4(fp)
   285dc:	e0bffd03 	ldbu	r2,-12(fp)
   285e0:	1884983a 	sll	r2,r3,r2
   285e4:	1007883a 	mov	r3,r2
   285e8:	e0bff70b 	ldhu	r2,-36(fp)
   285ec:	1884703a 	and	r2,r3,r2
   285f0:	1007883a 	mov	r3,r2
   285f4:	e0bffa0b 	ldhu	r2,-24(fp)
   285f8:	1884b03a 	or	r2,r3,r2
   285fc:	e0bffa0d 	sth	r2,-24(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
   28600:	e0bff917 	ldw	r2,-28(fp)
   28604:	10c0a004 	addi	r3,r2,640
   28608:	e0bffc03 	ldbu	r2,-16(fp)
   2860c:	1085883a 	add	r2,r2,r2
   28610:	1085883a 	add	r2,r2,r2
   28614:	1885883a 	add	r2,r3,r2
   28618:	e0fffa0b 	ldhu	r3,-24(fp)
   2861c:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
   28620:	0005883a 	mov	r2,zero
    
}
   28624:	e037883a 	mov	sp,fp
   28628:	df000017 	ldw	fp,0(sp)
   2862c:	dec00104 	addi	sp,sp,4
   28630:	f800283a 	ret

00028634 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
   28634:	defff704 	addi	sp,sp,-36
   28638:	df000815 	stw	fp,32(sp)
   2863c:	df000804 	addi	fp,sp,32
   28640:	e13ffc15 	stw	r4,-16(fp)
   28644:	2809883a 	mov	r4,r5
   28648:	3007883a 	mov	r3,r6
   2864c:	3805883a 	mov	r2,r7
   28650:	e13ffd05 	stb	r4,-12(fp)
   28654:	e0fffe05 	stb	r3,-8(fp)
   28658:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2865c:	e0bffc17 	ldw	r2,-16(fp)
   28660:	10800617 	ldw	r2,24(r2)
   28664:	10800317 	ldw	r2,12(r2)
   28668:	10800117 	ldw	r2,4(r2)
   2866c:	10800217 	ldw	r2,8(r2)
   28670:	10800017 	ldw	r2,0(r2)
   28674:	e0bffa15 	stw	r2,-24(fp)
    
    bit_mask = 0x00;
   28678:	e03ff815 	stw	zero,-32(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
   2867c:	e03ff915 	stw	zero,-28(fp)
   28680:	00000906 	br	286a8 <alt_tse_phy_rd_mdio_reg+0x74>
    {
        bit_mask <<= 1;
   28684:	e0bff817 	ldw	r2,-32(fp)
   28688:	1085883a 	add	r2,r2,r2
   2868c:	e0bff815 	stw	r2,-32(fp)
        bit_mask |= 0x01;        
   28690:	e0bff817 	ldw	r2,-32(fp)
   28694:	10800054 	ori	r2,r2,1
   28698:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
   2869c:	e0bff917 	ldw	r2,-28(fp)
   286a0:	10800044 	addi	r2,r2,1
   286a4:	e0bff915 	stw	r2,-28(fp)
   286a8:	e0bfff03 	ldbu	r2,-4(fp)
   286ac:	e0fff917 	ldw	r3,-28(fp)
   286b0:	18bff416 	blt	r3,r2,28684 <alt_tse_phy_rd_mdio_reg+0x50>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
   286b4:	e0bffa17 	ldw	r2,-24(fp)
   286b8:	10c0a004 	addi	r3,r2,640
   286bc:	e0bffd03 	ldbu	r2,-12(fp)
   286c0:	1085883a 	add	r2,r2,r2
   286c4:	1085883a 	add	r2,r2,r2
   286c8:	1885883a 	add	r2,r3,r2
   286cc:	10800037 	ldwio	r2,0(r2)
   286d0:	e0bffb0d 	sth	r2,-20(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
   286d4:	e0fffb0b 	ldhu	r3,-20(fp)
   286d8:	e0bffe03 	ldbu	r2,-8(fp)
   286dc:	1885d83a 	sra	r2,r3,r2
   286e0:	e0bffb0d 	sth	r2,-20(fp)
    
    return (temp_data & bit_mask);
   286e4:	e0fffb0b 	ldhu	r3,-20(fp)
   286e8:	e0bff817 	ldw	r2,-32(fp)
   286ec:	1884703a 	and	r2,r3,r2
}
   286f0:	e037883a 	mov	sp,fp
   286f4:	df000017 	ldw	fp,0(sp)
   286f8:	dec00104 	addi	sp,sp,4
   286fc:	f800283a 	ret

00028700 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
   28700:	deff9a04 	addi	sp,sp,-408
   28704:	dfc06515 	stw	ra,404(sp)
   28708:	df006415 	stw	fp,400(sp)
   2870c:	df006404 	addi	fp,sp,400
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
   28710:	e0ff9c04 	addi	r3,fp,-400
   28714:	00801904 	movi	r2,100
   28718:	1809883a 	mov	r4,r3
   2871c:	000b883a 	mov	r5,zero
   28720:	100d883a 	mov	r6,r2
   28724:	0017b3c0 	call	17b3c <memset>
   28728:	009d9cb4 	movhi	r2,30322
   2872c:	10985344 	addi	r2,r2,24909
   28730:	e0bf9c15 	stw	r2,-400(fp)
   28734:	00881b34 	movhi	r2,8300
   28738:	109b1944 	addi	r2,r2,27749
   2873c:	e0bf9d15 	stw	r2,-396(fp)
   28740:	008c5174 	movhi	r2,12613
   28744:	108e0e04 	addi	r2,r2,14392
   28748:	e0bf9e15 	stw	r2,-392(fp)
   2874c:	00800c74 	movhi	r2,49
   28750:	108c4c44 	addi	r2,r2,12593
   28754:	e0bf9f15 	stw	r2,-388(fp)
   28758:	e0ffa004 	addi	r3,fp,-384
   2875c:	00801004 	movi	r2,64
   28760:	1809883a 	mov	r4,r3
   28764:	000b883a 	mov	r5,zero
   28768:	100d883a 	mov	r6,r2
   2876c:	0017b3c0 	call	17b3c <memset>
   28770:	009410c4 	movi	r2,20547
   28774:	e0bfb015 	stw	r2,-320(fp)
   28778:	00800304 	movi	r2,12
   2877c:	e0bfb105 	stb	r2,-316(fp)
   28780:	00800084 	movi	r2,2
   28784:	e0bfb145 	stb	r2,-315(fp)
   28788:	00800444 	movi	r2,17
   2878c:	e0bfb185 	stb	r2,-314(fp)
   28790:	00800384 	movi	r2,14
   28794:	e0bfb1c5 	stb	r2,-313(fp)
   28798:	00800344 	movi	r2,13
   2879c:	e0bfb205 	stb	r2,-312(fp)
   287a0:	00800284 	movi	r2,10
   287a4:	e0bfb245 	stb	r2,-311(fp)
   287a8:	008000f4 	movhi	r2,3
   287ac:	10ac4a04 	addi	r2,r2,-20184
   287b0:	e0bfb315 	stw	r2,-308(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
   287b4:	e0ffb504 	addi	r3,fp,-300
   287b8:	00801904 	movi	r2,100
   287bc:	1809883a 	mov	r4,r3
   287c0:	000b883a 	mov	r5,zero
   287c4:	100d883a 	mov	r6,r2
   287c8:	0017b3c0 	call	17b3c <memset>
   287cc:	009d9cb4 	movhi	r2,30322
   287d0:	10985344 	addi	r2,r2,24909
   287d4:	e0bfb515 	stw	r2,-300(fp)
   287d8:	00881b34 	movhi	r2,8300
   287dc:	109b1944 	addi	r2,r2,27749
   287e0:	e0bfb615 	stw	r2,-296(fp)
   287e4:	00991874 	movhi	r2,25697
   287e8:	109d5444 	addi	r2,r2,30033
   287ec:	e0bfb715 	stw	r2,-292(fp)
   287f0:	00965234 	movhi	r2,22856
   287f4:	10940804 	addi	r2,r2,20512
   287f8:	e0bfb815 	stw	r2,-288(fp)
   287fc:	00914e34 	movhi	r2,17720
   28800:	108e0804 	addi	r2,r2,14368
   28804:	e0bfb915 	stw	r2,-284(fp)
   28808:	008d4d34 	movhi	r2,13620
   2880c:	108c4c44 	addi	r2,r2,12593
   28810:	e0bfba15 	stw	r2,-280(fp)
   28814:	e03fbb15 	stw	zero,-276(fp)
   28818:	e03fbc15 	stw	zero,-272(fp)
   2881c:	e03fbd15 	stw	zero,-268(fp)
   28820:	e03fbe15 	stw	zero,-264(fp)
   28824:	e03fbf15 	stw	zero,-260(fp)
   28828:	e03fc015 	stw	zero,-256(fp)
   2882c:	e03fc115 	stw	zero,-252(fp)
   28830:	e03fc215 	stw	zero,-248(fp)
   28834:	e03fc315 	stw	zero,-244(fp)
   28838:	e03fc415 	stw	zero,-240(fp)
   2883c:	e03fc515 	stw	zero,-236(fp)
   28840:	e03fc615 	stw	zero,-232(fp)
   28844:	e03fc715 	stw	zero,-228(fp)
   28848:	e03fc815 	stw	zero,-224(fp)
   2884c:	009410c4 	movi	r2,20547
   28850:	e0bfc915 	stw	r2,-220(fp)
   28854:	00800344 	movi	r2,13
   28858:	e0bfca05 	stb	r2,-216(fp)
   2885c:	00800084 	movi	r2,2
   28860:	e0bfca45 	stb	r2,-215(fp)
   28864:	00800444 	movi	r2,17
   28868:	e0bfca85 	stb	r2,-214(fp)
   2886c:	00800384 	movi	r2,14
   28870:	e0bfcac5 	stb	r2,-213(fp)
   28874:	00800344 	movi	r2,13
   28878:	e0bfcb05 	stb	r2,-212(fp)
   2887c:	00800284 	movi	r2,10
   28880:	e0bfcb45 	stb	r2,-211(fp)
   28884:	008000f4 	movhi	r2,3
   28888:	10ac4a04 	addi	r2,r2,-20184
   2888c:	e0bfcc15 	stw	r2,-208(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
   28890:	e0ffce04 	addi	r3,fp,-200
   28894:	00801904 	movi	r2,100
   28898:	1809883a 	mov	r4,r3
   2889c:	000b883a 	mov	r5,zero
   288a0:	100d883a 	mov	r6,r2
   288a4:	0017b3c0 	call	17b3c <memset>
   288a8:	009a5d34 	movhi	r2,26996
   288ac:	10985384 	addi	r2,r2,24910
   288b0:	e0bfce15 	stw	r2,-200(fp)
   288b4:	009b1874 	movhi	r2,27745
   288b8:	109b9bc4 	addi	r2,r2,28271
   288bc:	e0bfcf15 	stw	r2,-196(fp)
   288c0:	008e1434 	movhi	r2,14416
   288c4:	10910804 	addi	r2,r2,17440
   288c8:	e0bfd015 	stw	r2,-192(fp)
   288cc:	008d4db4 	movhi	r2,13622
   288d0:	108e0cc4 	addi	r2,r2,14387
   288d4:	e0bfd115 	stw	r2,-188(fp)
   288d8:	e03fd215 	stw	zero,-184(fp)
   288dc:	e0ffd304 	addi	r3,fp,-180
   288e0:	00800f04 	movi	r2,60
   288e4:	1809883a 	mov	r4,r3
   288e8:	000b883a 	mov	r5,zero
   288ec:	100d883a 	mov	r6,r2
   288f0:	0017b3c0 	call	17b3c <memset>
   288f4:	00800234 	movhi	r2,8
   288f8:	108005c4 	addi	r2,r2,23
   288fc:	e0bfe215 	stw	r2,-120(fp)
   28900:	008001c4 	movi	r2,7
   28904:	e0bfe305 	stb	r2,-116(fp)
   28908:	00800284 	movi	r2,10
   2890c:	e0bfe345 	stb	r2,-115(fp)
   28910:	00800444 	movi	r2,17
   28914:	e0bfe385 	stb	r2,-114(fp)
   28918:	008000c4 	movi	r2,3
   2891c:	e0bfe3c5 	stb	r2,-113(fp)
   28920:	00800044 	movi	r2,1
   28924:	e0bfe405 	stb	r2,-112(fp)
   28928:	00800084 	movi	r2,2
   2892c:	e0bfe445 	stb	r2,-111(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
   28930:	008000f4 	movhi	r2,3
   28934:	1084e604 	addi	r2,r2,5016
   28938:	e13fe704 	addi	r4,fp,-100
   2893c:	1007883a 	mov	r3,r2
   28940:	00801904 	movi	r2,100
   28944:	180b883a 	mov	r5,r3
   28948:	100d883a 	mov	r6,r2
   2894c:	0017a440 	call	17a44 <memcpy>
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
   28950:	e13f9c04 	addi	r4,fp,-400
   28954:	00268840 	call	26884 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
   28958:	e0bfb504 	addi	r2,fp,-300
   2895c:	1009883a 	mov	r4,r2
   28960:	00268840 	call	26884 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
   28964:	e0bfce04 	addi	r2,fp,-200
   28968:	1009883a 	mov	r4,r2
   2896c:	00268840 	call	26884 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
   28970:	e0bfe704 	addi	r2,fp,-100
   28974:	1009883a 	mov	r4,r2
   28978:	00268840 	call	26884 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
   2897c:	d0a8d803 	ldbu	r2,-23712(gp)
   28980:	10803fcc 	andi	r2,r2,255
}
   28984:	e037883a 	mov	sp,fp
   28988:	dfc00117 	ldw	ra,4(sp)
   2898c:	df000017 	ldw	fp,0(sp)
   28990:	dec00204 	addi	sp,sp,8
   28994:	f800283a 	ret

00028998 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
   28998:	defffd04 	addi	sp,sp,-12
   2899c:	dfc00215 	stw	ra,8(sp)
   289a0:	df000115 	stw	fp,4(sp)
   289a4:	df000104 	addi	fp,sp,4
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
   289a8:	d0a8d803 	ldbu	r2,-23712(gp)
   289ac:	10803fcc 	andi	r2,r2,255
   289b0:	010000f4 	movhi	r4,3
   289b4:	2104ff04 	addi	r4,r4,5116
   289b8:	100b883a 	mov	r5,r2
   289bc:	00265480 	call	26548 <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
   289c0:	e03fff05 	stb	zero,-4(fp)
   289c4:	00006d06 	br	28b7c <alt_tse_phy_print_profile+0x1e4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
   289c8:	e0bfff07 	ldb	r2,-4(fp)
   289cc:	010000f4 	movhi	r4,3
   289d0:	21050e04 	addi	r4,r4,5176
   289d4:	100b883a 	mov	r5,r2
   289d8:	00265480 	call	26548 <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
   289dc:	e0bfff07 	ldb	r2,-4(fp)
   289e0:	00c00134 	movhi	r3,4
   289e4:	18d38004 	addi	r3,r3,19968
   289e8:	1085883a 	add	r2,r2,r2
   289ec:	1085883a 	add	r2,r2,r2
   289f0:	1885883a 	add	r2,r3,r2
   289f4:	10800017 	ldw	r2,0(r2)
   289f8:	010000f4 	movhi	r4,3
   289fc:	21051304 	addi	r4,r4,5196
   28a00:	100b883a 	mov	r5,r2
   28a04:	00265480 	call	26548 <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
   28a08:	e0bfff07 	ldb	r2,-4(fp)
   28a0c:	00c00134 	movhi	r3,4
   28a10:	18d38004 	addi	r3,r3,19968
   28a14:	1085883a 	add	r2,r2,r2
   28a18:	1085883a 	add	r2,r2,r2
   28a1c:	1885883a 	add	r2,r3,r2
   28a20:	10800017 	ldw	r2,0(r2)
   28a24:	10801417 	ldw	r2,80(r2)
   28a28:	010000f4 	movhi	r4,3
   28a2c:	21051904 	addi	r4,r4,5220
   28a30:	100b883a 	mov	r5,r2
   28a34:	00265480 	call	26548 <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
   28a38:	e0bfff07 	ldb	r2,-4(fp)
   28a3c:	00c00134 	movhi	r3,4
   28a40:	18d38004 	addi	r3,r3,19968
   28a44:	1085883a 	add	r2,r2,r2
   28a48:	1085883a 	add	r2,r2,r2
   28a4c:	1885883a 	add	r2,r3,r2
   28a50:	10800017 	ldw	r2,0(r2)
   28a54:	10801503 	ldbu	r2,84(r2)
   28a58:	10803fcc 	andi	r2,r2,255
   28a5c:	010000f4 	movhi	r4,3
   28a60:	21052004 	addi	r4,r4,5248
   28a64:	100b883a 	mov	r5,r2
   28a68:	00265480 	call	26548 <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
   28a6c:	e0bfff07 	ldb	r2,-4(fp)
   28a70:	00c00134 	movhi	r3,4
   28a74:	18d38004 	addi	r3,r3,19968
   28a78:	1085883a 	add	r2,r2,r2
   28a7c:	1085883a 	add	r2,r2,r2
   28a80:	1885883a 	add	r2,r3,r2
   28a84:	10800017 	ldw	r2,0(r2)
   28a88:	10801543 	ldbu	r2,85(r2)
   28a8c:	10803fcc 	andi	r2,r2,255
   28a90:	010000f4 	movhi	r4,3
   28a94:	21052704 	addi	r4,r4,5276
   28a98:	100b883a 	mov	r5,r2
   28a9c:	00265480 	call	26548 <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
   28aa0:	e0bfff07 	ldb	r2,-4(fp)
   28aa4:	00c00134 	movhi	r3,4
   28aa8:	18d38004 	addi	r3,r3,19968
   28aac:	1085883a 	add	r2,r2,r2
   28ab0:	1085883a 	add	r2,r2,r2
   28ab4:	1885883a 	add	r2,r3,r2
   28ab8:	10800017 	ldw	r2,0(r2)
   28abc:	10801583 	ldbu	r2,86(r2)
   28ac0:	10803fcc 	andi	r2,r2,255
   28ac4:	010000f4 	movhi	r4,3
   28ac8:	21052e04 	addi	r4,r4,5304
   28acc:	100b883a 	mov	r5,r2
   28ad0:	00265480 	call	26548 <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
   28ad4:	e0bfff07 	ldb	r2,-4(fp)
   28ad8:	00c00134 	movhi	r3,4
   28adc:	18d38004 	addi	r3,r3,19968
   28ae0:	1085883a 	add	r2,r2,r2
   28ae4:	1085883a 	add	r2,r2,r2
   28ae8:	1885883a 	add	r2,r3,r2
   28aec:	10800017 	ldw	r2,0(r2)
   28af0:	108015c3 	ldbu	r2,87(r2)
   28af4:	10803fcc 	andi	r2,r2,255
   28af8:	010000f4 	movhi	r4,3
   28afc:	21053504 	addi	r4,r4,5332
   28b00:	100b883a 	mov	r5,r2
   28b04:	00265480 	call	26548 <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
   28b08:	e0bfff07 	ldb	r2,-4(fp)
   28b0c:	00c00134 	movhi	r3,4
   28b10:	18d38004 	addi	r3,r3,19968
   28b14:	1085883a 	add	r2,r2,r2
   28b18:	1085883a 	add	r2,r2,r2
   28b1c:	1885883a 	add	r2,r3,r2
   28b20:	10800017 	ldw	r2,0(r2)
   28b24:	10801603 	ldbu	r2,88(r2)
   28b28:	10803fcc 	andi	r2,r2,255
   28b2c:	010000f4 	movhi	r4,3
   28b30:	21053b04 	addi	r4,r4,5356
   28b34:	100b883a 	mov	r5,r2
   28b38:	00265480 	call	26548 <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
   28b3c:	e0bfff07 	ldb	r2,-4(fp)
   28b40:	00c00134 	movhi	r3,4
   28b44:	18d38004 	addi	r3,r3,19968
   28b48:	1085883a 	add	r2,r2,r2
   28b4c:	1085883a 	add	r2,r2,r2
   28b50:	1885883a 	add	r2,r3,r2
   28b54:	10800017 	ldw	r2,0(r2)
   28b58:	10801643 	ldbu	r2,89(r2)
   28b5c:	10803fcc 	andi	r2,r2,255
   28b60:	010000f4 	movhi	r4,3
   28b64:	21054104 	addi	r4,r4,5380
   28b68:	100b883a 	mov	r5,r2
   28b6c:	00265480 	call	26548 <no_printf>
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    
    for(i = 0; i < phy_profile_count; i++)
   28b70:	e0bfff03 	ldbu	r2,-4(fp)
   28b74:	10800044 	addi	r2,r2,1
   28b78:	e0bfff05 	stb	r2,-4(fp)
   28b7c:	e0ffff07 	ldb	r3,-4(fp)
   28b80:	d0a8d803 	ldbu	r2,-23712(gp)
   28b84:	10803fcc 	andi	r2,r2,255
   28b88:	18bf8f16 	blt	r3,r2,289c8 <alt_tse_phy_print_profile+0x30>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
   28b8c:	d0a8d803 	ldbu	r2,-23712(gp)
   28b90:	10803fcc 	andi	r2,r2,255
}
   28b94:	e037883a 	mov	sp,fp
   28b98:	dfc00117 	ldw	ra,4(sp)
   28b9c:	df000017 	ldw	fp,0(sp)
   28ba0:	dec00204 	addi	sp,sp,8
   28ba4:	f800283a 	ret

00028ba8 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
   28ba8:	defffa04 	addi	sp,sp,-24
   28bac:	dfc00515 	stw	ra,20(sp)
   28bb0:	df000415 	stw	fp,16(sp)
   28bb4:	df000404 	addi	fp,sp,16
    
	alt_8 i;
	alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
   28bb8:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
   28bbc:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys = 0;
   28bc0:	e03fff15 	stw	zero,-4(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
   28bc4:	d028d845 	stb	zero,-23711(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
   28bc8:	e03ffc05 	stb	zero,-16(fp)
   28bcc:	00019306 	br	2921c <alt_tse_mac_group_init+0x674>
        psys = &tse_mac_device[i];
   28bd0:	e0bffc07 	ldb	r2,-16(fp)
   28bd4:	10c01224 	muli	r3,r2,72
   28bd8:	008000f4 	movhi	r2,3
   28bdc:	108ac104 	addi	r2,r2,11012
   28be0:	1885883a 	add	r2,r3,r2
   28be4:	e0bfff15 	stw	r2,-4(fp)

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
   28be8:	e0bfff17 	ldw	r2,-4(fp)
   28bec:	10800517 	ldw	r2,20(r2)
   28bf0:	10018726 	beq	r2,zero,29210 <alt_tse_mac_group_init+0x668>
   28bf4:	e0bfff17 	ldw	r2,-4(fp)
   28bf8:	10800617 	ldw	r2,24(r2)
   28bfc:	10018426 	beq	r2,zero,29210 <alt_tse_mac_group_init+0x668>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
   28c00:	d0a8d843 	ldbu	r2,-23711(gp)
   28c04:	10c03fcc 	andi	r3,r2,255
   28c08:	e0bfff17 	ldw	r2,-4(fp)
   28c0c:	10800017 	ldw	r2,0(r2)
   28c10:	010000f4 	movhi	r4,3
   28c14:	21054704 	addi	r4,r4,5404
   28c18:	180b883a 	mov	r5,r3
   28c1c:	100d883a 	mov	r6,r2
   28c20:	0017c440 	call	17c44 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
   28c24:	01000904 	movi	r4,36
   28c28:	002d6b80 	call	2d6b8 <malloc>
   28c2c:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
   28c30:	e0bffd17 	ldw	r2,-12(fp)
   28c34:	1000081e 	bne	r2,zero,28c58 <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
   28c38:	d0a8d843 	ldbu	r2,-23711(gp)
   28c3c:	10803fcc 	andi	r2,r2,255
   28c40:	010000f4 	movhi	r4,3
   28c44:	21055304 	addi	r4,r4,5452
   28c48:	100b883a 	mov	r5,r2
   28c4c:	0017c440 	call	17c44 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
   28c50:	00bfffc4 	movi	r2,-1
   28c54:	00017606 	br	29230 <alt_tse_mac_group_init+0x688>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
   28c58:	e0bfff17 	ldw	r2,-4(fp)
   28c5c:	108002c3 	ldbu	r2,11(r2)
   28c60:	10803fcc 	andi	r2,r2,255
   28c64:	10001226 	beq	r2,zero,28cb0 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
   28c68:	e0bfff17 	ldw	r2,-4(fp)
   28c6c:	10c00303 	ldbu	r3,12(r2)
   28c70:	e0bffd17 	ldw	r2,-12(fp)
   28c74:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
   28c78:	010000f4 	movhi	r4,3
   28c7c:	21056104 	addi	r4,r4,5508
   28c80:	00265480 	call	26548 <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
   28c84:	e0bffd17 	ldw	r2,-12(fp)
   28c88:	10800003 	ldbu	r2,0(r2)
   28c8c:	10803fcc 	andi	r2,r2,255
   28c90:	010000f4 	movhi	r4,3
   28c94:	21056c04 	addi	r4,r4,5552
   28c98:	100b883a 	mov	r5,r2
   28c9c:	00265480 	call	26548 <no_printf>
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
   28ca0:	010000f4 	movhi	r4,3
   28ca4:	21057704 	addi	r4,r4,5596
   28ca8:	00265480 	call	26548 <no_printf>
   28cac:	00001f06 	br	28d2c <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
   28cb0:	e0bfff17 	ldw	r2,-4(fp)
   28cb4:	10800343 	ldbu	r2,13(r2)
   28cb8:	10803fcc 	andi	r2,r2,255
   28cbc:	10001226 	beq	r2,zero,28d08 <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
   28cc0:	e0bfff17 	ldw	r2,-4(fp)
   28cc4:	10c00383 	ldbu	r3,14(r2)
   28cc8:	e0bffd17 	ldw	r2,-12(fp)
   28ccc:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
   28cd0:	010000f4 	movhi	r4,3
   28cd4:	21058204 	addi	r4,r4,5640
   28cd8:	00265480 	call	26548 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
   28cdc:	010000f4 	movhi	r4,3
   28ce0:	21057704 	addi	r4,r4,5596
   28ce4:	00265480 	call	26548 <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
   28ce8:	e0bffd17 	ldw	r2,-12(fp)
   28cec:	10800003 	ldbu	r2,0(r2)
   28cf0:	10803fcc 	andi	r2,r2,255
   28cf4:	010000f4 	movhi	r4,3
   28cf8:	21058d04 	addi	r4,r4,5684
   28cfc:	100b883a 	mov	r5,r2
   28d00:	00265480 	call	26548 <no_printf>
   28d04:	00000906 	br	28d2c <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
   28d08:	e0bffd17 	ldw	r2,-12(fp)
   28d0c:	00c00044 	movi	r3,1
   28d10:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
   28d14:	010000f4 	movhi	r4,3
   28d18:	21058204 	addi	r4,r4,5640
   28d1c:	00265480 	call	26548 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
   28d20:	010000f4 	movhi	r4,3
   28d24:	21059804 	addi	r4,r4,5728
   28d28:	00265480 	call	26548 <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
   28d2c:	e03ffc45 	stb	zero,-15(fp)
   28d30:	00012006 	br	291b4 <alt_tse_mac_group_init+0x60c>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
   28d34:	01000404 	movi	r4,16
   28d38:	002d6b80 	call	2d6b8 <malloc>
   28d3c:	e0bffe15 	stw	r2,-8(fp)
                if(!pmac_info) {
   28d40:	e0bffe17 	ldw	r2,-8(fp)
   28d44:	10000a1e 	bne	r2,zero,28d70 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
   28d48:	d0a8d843 	ldbu	r2,-23711(gp)
   28d4c:	10c03fcc 	andi	r3,r2,255
   28d50:	e0bffc47 	ldb	r2,-15(fp)
   28d54:	010000f4 	movhi	r4,3
   28d58:	2105a304 	addi	r4,r4,5772
   28d5c:	180b883a 	mov	r5,r3
   28d60:	100d883a 	mov	r6,r2
   28d64:	0017c440 	call	17c44 <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
   28d68:	00bfffc4 	movi	r2,-1
   28d6c:	00013006 	br	29230 <alt_tse_mac_group_init+0x688>
                }
                
                pmac_info->pmac_group = pmac_group;
   28d70:	e0bffe17 	ldw	r2,-8(fp)
   28d74:	e0fffd17 	ldw	r3,-12(fp)
   28d78:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
   28d7c:	e0bffe17 	ldw	r2,-8(fp)
   28d80:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
   28d84:	e0fffc07 	ldb	r3,-16(fp)
   28d88:	e0bffc47 	ldb	r2,-15(fp)
   28d8c:	1885883a 	add	r2,r3,r2
   28d90:	10c01224 	muli	r3,r2,72
   28d94:	008000f4 	movhi	r2,3
   28d98:	108ac104 	addi	r2,r2,11012
   28d9c:	1887883a 	add	r3,r3,r2
   28da0:	e0bffe17 	ldw	r2,-8(fp)
   28da4:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
   28da8:	e0bffe17 	ldw	r2,-8(fp)
   28dac:	10800217 	ldw	r2,8(r2)
   28db0:	10800517 	ldw	r2,20(r2)
   28db4:	10000426 	beq	r2,zero,28dc8 <alt_tse_mac_group_init+0x220>
   28db8:	e0bffe17 	ldw	r2,-8(fp)
   28dbc:	10800217 	ldw	r2,8(r2)
   28dc0:	10800617 	ldw	r2,24(r2)
   28dc4:	1000091e 	bne	r2,zero,28dec <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
   28dc8:	e0fffc07 	ldb	r3,-16(fp)
   28dcc:	e0bffc47 	ldb	r2,-15(fp)
   28dd0:	1885883a 	add	r2,r3,r2
   28dd4:	010000f4 	movhi	r4,3
   28dd8:	2105b504 	addi	r4,r4,5844
   28ddc:	100b883a 	mov	r5,r2
   28de0:	0017c440 	call	17c44 <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
   28de4:	00bfffc4 	movi	r2,-1
   28de8:	00011106 	br	29230 <alt_tse_mac_group_init+0x688>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
   28dec:	e0bffe17 	ldw	r2,-8(fp)
   28df0:	10800217 	ldw	r2,8(r2)
   28df4:	10800243 	ldbu	r2,9(r2)
   28df8:	10803fcc 	andi	r2,r2,255
   28dfc:	10000d26 	beq	r2,zero,28e34 <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
   28e00:	e0bffe17 	ldw	r2,-8(fp)
   28e04:	10800217 	ldw	r2,8(r2)
   28e08:	10800283 	ldbu	r2,10(r2)
   28e0c:	10803fcc 	andi	r2,r2,255
   28e10:	10000426 	beq	r2,zero,28e24 <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
   28e14:	e0bffe17 	ldw	r2,-8(fp)
   28e18:	00c00084 	movi	r3,2
   28e1c:	10c00005 	stb	r3,0(r2)
   28e20:	00000606 	br	28e3c <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
   28e24:	e0bffe17 	ldw	r2,-8(fp)
   28e28:	00c00044 	movi	r3,1
   28e2c:	10c00005 	stb	r3,0(r2)
   28e30:	00000206 	br	28e3c <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
   28e34:	e0bffe17 	ldw	r2,-8(fp)
   28e38:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
   28e3c:	e0bffe17 	ldw	r2,-8(fp)
   28e40:	10800217 	ldw	r2,8(r2)
   28e44:	10800343 	ldbu	r2,13(r2)
   28e48:	10803fcc 	andi	r2,r2,255
   28e4c:	10006526 	beq	r2,zero,28fe4 <alt_tse_mac_group_init+0x43c>
   28e50:	e0bffe17 	ldw	r2,-8(fp)
   28e54:	10800217 	ldw	r2,8(r2)
   28e58:	108002c3 	ldbu	r2,11(r2)
   28e5c:	10803fcc 	andi	r2,r2,255
   28e60:	1000601e 	bne	r2,zero,28fe4 <alt_tse_mac_group_init+0x43c>
                	tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
   28e64:	e0fffc47 	ldb	r3,-15(fp)
   28e68:	e0bffe17 	ldw	r2,-8(fp)
   28e6c:	10800217 	ldw	r2,8(r2)
   28e70:	10800017 	ldw	r2,0(r2)
   28e74:	010000f4 	movhi	r4,3
   28e78:	2105c404 	addi	r4,r4,5904
   28e7c:	180b883a 	mov	r5,r3
   28e80:	100d883a 	mov	r6,r2
   28e84:	00265480 	call	26548 <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
   28e88:	e0fffc47 	ldb	r3,-15(fp)
   28e8c:	e13ffc07 	ldb	r4,-16(fp)
   28e90:	e0bffc47 	ldb	r2,-15(fp)
   28e94:	2085883a 	add	r2,r4,r2
   28e98:	010000f4 	movhi	r4,3
   28e9c:	2105d004 	addi	r4,r4,5952
   28ea0:	180b883a 	mov	r5,r3
   28ea4:	100d883a 	mov	r6,r2
   28ea8:	00265480 	call	26548 <no_printf>
                    
                	switch(pmac_info->mac_type) {
   28eac:	e0bffe17 	ldw	r2,-8(fp)
   28eb0:	10800003 	ldbu	r2,0(r2)
   28eb4:	10803fcc 	andi	r2,r2,255
   28eb8:	10c00060 	cmpeqi	r3,r2,1
   28ebc:	18000c1e 	bne	r3,zero,28ef0 <alt_tse_mac_group_init+0x348>
   28ec0:	10c000a0 	cmpeqi	r3,r2,2
   28ec4:	1800021e 	bne	r3,zero,28ed0 <alt_tse_mac_group_init+0x328>
   28ec8:	10001126 	beq	r2,zero,28f10 <alt_tse_mac_group_init+0x368>
   28ecc:	00001806 	br	28f30 <alt_tse_mac_group_init+0x388>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
   28ed0:	e0bffc47 	ldb	r2,-15(fp)
   28ed4:	010000f4 	movhi	r4,3
   28ed8:	2105df04 	addi	r4,r4,6012
   28edc:	100b883a 	mov	r5,r2
   28ee0:	018000f4 	movhi	r6,3
   28ee4:	3185ea04 	addi	r6,r6,6056
   28ee8:	00265480 	call	26548 <no_printf>
                            break;
   28eec:	00001706 	br	28f4c <alt_tse_mac_group_init+0x3a4>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
   28ef0:	e0bffc47 	ldb	r2,-15(fp)
   28ef4:	010000f4 	movhi	r4,3
   28ef8:	2105df04 	addi	r4,r4,6012
   28efc:	100b883a 	mov	r5,r2
   28f00:	018000f4 	movhi	r6,3
   28f04:	3185ef04 	addi	r6,r6,6076
   28f08:	00265480 	call	26548 <no_printf>
                            break;
   28f0c:	00000f06 	br	28f4c <alt_tse_mac_group_init+0x3a4>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
   28f10:	e0bffc47 	ldb	r2,-15(fp)
   28f14:	010000f4 	movhi	r4,3
   28f18:	2105df04 	addi	r4,r4,6012
   28f1c:	100b883a 	mov	r5,r2
   28f20:	018000f4 	movhi	r6,3
   28f24:	3185f504 	addi	r6,r6,6100
   28f28:	00265480 	call	26548 <no_printf>
                            break;
   28f2c:	00000706 	br	28f4c <alt_tse_mac_group_init+0x3a4>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
   28f30:	e0bffc47 	ldb	r2,-15(fp)
   28f34:	010000f4 	movhi	r4,3
   28f38:	2105df04 	addi	r4,r4,6012
   28f3c:	100b883a 	mov	r5,r2
   28f40:	018000f4 	movhi	r6,3
   28f44:	31842d04 	addi	r6,r6,4276
   28f48:	00265480 	call	26548 <no_printf>
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
   28f4c:	e0bffe17 	ldw	r2,-8(fp)
   28f50:	10800217 	ldw	r2,8(r2)
   28f54:	108003c3 	ldbu	r2,15(r2)
   28f58:	10803fcc 	andi	r2,r2,255
   28f5c:	10008a26 	beq	r2,zero,29188 <alt_tse_mac_group_init+0x5e0>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
   28f60:	e0fffc47 	ldb	r3,-15(fp)
   28f64:	e0bffe17 	ldw	r2,-8(fp)
   28f68:	10800217 	ldw	r2,8(r2)
   28f6c:	108003c3 	ldbu	r2,15(r2)
   28f70:	10803fcc 	andi	r2,r2,255
   28f74:	10000326 	beq	r2,zero,28f84 <alt_tse_mac_group_init+0x3dc>
   28f78:	008000f4 	movhi	r2,3
   28f7c:	1085fc04 	addi	r2,r2,6128
   28f80:	00000206 	br	28f8c <alt_tse_mac_group_init+0x3e4>
   28f84:	008000f4 	movhi	r2,3
   28f88:	1085fd04 	addi	r2,r2,6132
   28f8c:	010000f4 	movhi	r4,3
   28f90:	2105fe04 	addi	r4,r4,6136
   28f94:	180b883a 	mov	r5,r3
   28f98:	100d883a 	mov	r6,r2
   28f9c:	00265480 	call	26548 <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
   28fa0:	e0fffc47 	ldb	r3,-15(fp)
   28fa4:	e0bffe17 	ldw	r2,-8(fp)
   28fa8:	10800217 	ldw	r2,8(r2)
   28fac:	10800403 	ldbu	r2,16(r2)
   28fb0:	10803fcc 	andi	r2,r2,255
   28fb4:	10000326 	beq	r2,zero,28fc4 <alt_tse_mac_group_init+0x41c>
   28fb8:	008000f4 	movhi	r2,3
   28fbc:	1085fc04 	addi	r2,r2,6128
   28fc0:	00000206 	br	28fcc <alt_tse_mac_group_init+0x424>
   28fc4:	008000f4 	movhi	r2,3
   28fc8:	1085fd04 	addi	r2,r2,6132
   28fcc:	010000f4 	movhi	r4,3
   28fd0:	21060904 	addi	r4,r4,6180
   28fd4:	180b883a 	mov	r5,r3
   28fd8:	100d883a 	mov	r6,r2
   28fdc:	00265480 	call	26548 <no_printf>
                            break;
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
   28fe0:	00006906 	br	29188 <alt_tse_mac_group_init+0x5e0>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
                    }
                }
                else {
                	/* display only once for all MAC, except shared MDIO MACs */
	                if(j == 0) {
   28fe4:	e0bffc47 	ldb	r2,-15(fp)
   28fe8:	1000411e 	bne	r2,zero,290f0 <alt_tse_mac_group_init+0x548>
	                    switch(pmac_info->mac_type) {
   28fec:	e0bffe17 	ldw	r2,-8(fp)
   28ff0:	10800003 	ldbu	r2,0(r2)
   28ff4:	10803fcc 	andi	r2,r2,255
   28ff8:	10c00060 	cmpeqi	r3,r2,1
   28ffc:	18000a1e 	bne	r3,zero,29028 <alt_tse_mac_group_init+0x480>
   29000:	10c000a0 	cmpeqi	r3,r2,2
   29004:	1800021e 	bne	r3,zero,29010 <alt_tse_mac_group_init+0x468>
   29008:	10000d26 	beq	r2,zero,29040 <alt_tse_mac_group_init+0x498>
   2900c:	00001206 	br	29058 <alt_tse_mac_group_init+0x4b0>
	                        case ALTERA_TSE_MACLITE_1000:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
   29010:	010000f4 	movhi	r4,3
   29014:	21061404 	addi	r4,r4,6224
   29018:	014000f4 	movhi	r5,3
   2901c:	2945ea04 	addi	r5,r5,6056
   29020:	00265480 	call	26548 <no_printf>
	                            break;
   29024:	00001106 	br	2906c <alt_tse_mac_group_init+0x4c4>
	                        case ALTERA_TSE_MACLITE_10_100:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
   29028:	010000f4 	movhi	r4,3
   2902c:	21061404 	addi	r4,r4,6224
   29030:	014000f4 	movhi	r5,3
   29034:	2945ef04 	addi	r5,r5,6076
   29038:	00265480 	call	26548 <no_printf>
	                            break;
   2903c:	00000b06 	br	2906c <alt_tse_mac_group_init+0x4c4>
	                        case ALTERA_TSE_FULL_MAC:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
   29040:	010000f4 	movhi	r4,3
   29044:	21061404 	addi	r4,r4,6224
   29048:	014000f4 	movhi	r5,3
   2904c:	2945f504 	addi	r5,r5,6100
   29050:	00265480 	call	26548 <no_printf>
	                            break;
   29054:	00000506 	br	2906c <alt_tse_mac_group_init+0x4c4>
	                        default :
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
   29058:	010000f4 	movhi	r4,3
   2905c:	21061404 	addi	r4,r4,6224
   29060:	014000f4 	movhi	r5,3
   29064:	29442d04 	addi	r5,r5,4276
   29068:	00265480 	call	26548 <no_printf>
	                    }
	                    
	                    if(pmac_info->psys_info->tse_pcs_ena) {
   2906c:	e0bffe17 	ldw	r2,-8(fp)
   29070:	10800217 	ldw	r2,8(r2)
   29074:	108003c3 	ldbu	r2,15(r2)
   29078:	10803fcc 	andi	r2,r2,255
   2907c:	10001c26 	beq	r2,zero,290f0 <alt_tse_mac_group_init+0x548>
	                        tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
   29080:	e0bffe17 	ldw	r2,-8(fp)
   29084:	10800217 	ldw	r2,8(r2)
   29088:	108003c3 	ldbu	r2,15(r2)
   2908c:	10803fcc 	andi	r2,r2,255
   29090:	10000326 	beq	r2,zero,290a0 <alt_tse_mac_group_init+0x4f8>
   29094:	008000f4 	movhi	r2,3
   29098:	1085fc04 	addi	r2,r2,6128
   2909c:	00000206 	br	290a8 <alt_tse_mac_group_init+0x500>
   290a0:	008000f4 	movhi	r2,3
   290a4:	1085fd04 	addi	r2,r2,6132
   290a8:	010000f4 	movhi	r4,3
   290ac:	21061f04 	addi	r4,r4,6268
   290b0:	100b883a 	mov	r5,r2
   290b4:	00265480 	call	26548 <no_printf>
	                        tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");	                        
   290b8:	e0bffe17 	ldw	r2,-8(fp)
   290bc:	10800217 	ldw	r2,8(r2)
   290c0:	10800403 	ldbu	r2,16(r2)
   290c4:	10803fcc 	andi	r2,r2,255
   290c8:	10000326 	beq	r2,zero,290d8 <alt_tse_mac_group_init+0x530>
   290cc:	008000f4 	movhi	r2,3
   290d0:	1085fc04 	addi	r2,r2,6128
   290d4:	00000206 	br	290e0 <alt_tse_mac_group_init+0x538>
   290d8:	008000f4 	movhi	r2,3
   290dc:	1085fd04 	addi	r2,r2,6132
   290e0:	010000f4 	movhi	r4,3
   290e4:	21062a04 	addi	r4,r4,6312
   290e8:	100b883a 	mov	r5,r2
   290ec:	00265480 	call	26548 <no_printf>
	                    }
	                }
	                
                	if(pmac_info->psys_info->tse_multichannel_mac) {
   290f0:	e0bffe17 	ldw	r2,-8(fp)
   290f4:	10800217 	ldw	r2,8(r2)
   290f8:	108002c3 	ldbu	r2,11(r2)
   290fc:	10803fcc 	andi	r2,r2,255
   29100:	10001326 	beq	r2,zero,29150 <alt_tse_mac_group_init+0x5a8>
                		tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
   29104:	e0fffc47 	ldb	r3,-15(fp)
   29108:	e0bffe17 	ldw	r2,-8(fp)
   2910c:	10800217 	ldw	r2,8(r2)
   29110:	10800017 	ldw	r2,0(r2)
   29114:	010000f4 	movhi	r4,3
   29118:	21063504 	addi	r4,r4,6356
   2911c:	180b883a 	mov	r5,r3
   29120:	100d883a 	mov	r6,r2
   29124:	00265480 	call	26548 <no_printf>
	                    tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
   29128:	e0fffc47 	ldb	r3,-15(fp)
   2912c:	e13ffc07 	ldb	r4,-16(fp)
   29130:	e0bffc47 	ldb	r2,-15(fp)
   29134:	2085883a 	add	r2,r4,r2
   29138:	010000f4 	movhi	r4,3
   2913c:	21064104 	addi	r4,r4,6404
   29140:	180b883a 	mov	r5,r3
   29144:	100d883a 	mov	r6,r2
   29148:	00265480 	call	26548 <no_printf>
   2914c:	00000e06 	br	29188 <alt_tse_mac_group_init+0x5e0>
	            	}                
	                else {
	                    tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
   29150:	e0bffe17 	ldw	r2,-8(fp)
   29154:	10800217 	ldw	r2,8(r2)
   29158:	10800017 	ldw	r2,0(r2)
   2915c:	010000f4 	movhi	r4,3
   29160:	21065004 	addi	r4,r4,6464
   29164:	100b883a 	mov	r5,r2
   29168:	00265480 	call	26548 <no_printf>
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
   2916c:	e0fffc07 	ldb	r3,-16(fp)
   29170:	e0bffc47 	ldb	r2,-15(fp)
   29174:	1885883a 	add	r2,r3,r2
   29178:	010000f4 	movhi	r4,3
   2917c:	21065c04 	addi	r4,r4,6512
   29180:	100b883a 	mov	r5,r2
   29184:	00265480 	call	26548 <no_printf>
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
   29188:	e0bffc47 	ldb	r2,-15(fp)
   2918c:	e0fffd17 	ldw	r3,-12(fp)
   29190:	10800044 	addi	r2,r2,1
   29194:	1085883a 	add	r2,r2,r2
   29198:	1085883a 	add	r2,r2,r2
   2919c:	1885883a 	add	r2,r3,r2
   291a0:	e0fffe17 	ldw	r3,-8(fp)
   291a4:	10c00015 	stw	r3,0(r2)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
   291a8:	e0bffc43 	ldbu	r2,-15(fp)
   291ac:	10800044 	addi	r2,r2,1
   291b0:	e0bffc45 	stb	r2,-15(fp)
   291b4:	e0fffc47 	ldb	r3,-15(fp)
   291b8:	e0bffd17 	ldw	r2,-12(fp)
   291bc:	10800003 	ldbu	r2,0(r2)
   291c0:	10803fcc 	andi	r2,r2,255
   291c4:	18bedb16 	blt	r3,r2,28d34 <alt_tse_mac_group_init+0x18c>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
   291c8:	d0a8d843 	ldbu	r2,-23711(gp)
   291cc:	10803fcc 	andi	r2,r2,255
   291d0:	00c00134 	movhi	r3,4
   291d4:	18d37804 	addi	r3,r3,19936
   291d8:	1085883a 	add	r2,r2,r2
   291dc:	1085883a 	add	r2,r2,r2
   291e0:	1885883a 	add	r2,r3,r2
   291e4:	e0fffd17 	ldw	r3,-12(fp)
   291e8:	10c00015 	stw	r3,0(r2)
            
            mac_group_count++;
   291ec:	d0a8d843 	ldbu	r2,-23711(gp)
   291f0:	10800044 	addi	r2,r2,1
   291f4:	d0a8d845 	stb	r2,-23711(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
   291f8:	e0bffd17 	ldw	r2,-12(fp)
   291fc:	10c00003 	ldbu	r3,0(r2)
   29200:	e0bffc03 	ldbu	r2,-16(fp)
   29204:	1885883a 	add	r2,r3,r2
   29208:	10bfffc4 	addi	r2,r2,-1
   2920c:	e0bffc05 	stb	r2,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
   29210:	e0bffc03 	ldbu	r2,-16(fp)
   29214:	10800044 	addi	r2,r2,1
   29218:	e0bffc05 	stb	r2,-16(fp)
   2921c:	e0fffc07 	ldb	r3,-16(fp)
   29220:	d0a01c03 	ldbu	r2,-32656(gp)
   29224:	10803fcc 	andi	r2,r2,255
   29228:	18be6916 	blt	r3,r2,28bd0 <alt_tse_mac_group_init+0x28>
            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
   2922c:	0005883a 	mov	r2,zero
}
   29230:	e037883a 	mov	sp,fp
   29234:	dfc00117 	ldw	ra,4(sp)
   29238:	df000017 	ldw	fp,0(sp)
   2923c:	dec00204 	addi	sp,sp,8
   29240:	f800283a 	ret

00029244 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
   29244:	deffed04 	addi	sp,sp,-76
   29248:	dfc01215 	stw	ra,72(sp)
   2924c:	df001115 	stw	fp,68(sp)
   29250:	df001104 	addi	fp,sp,68
   29254:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 phyid; 
	alt_32 phyid2 = 0;
   29258:	e03ff515 	stw	zero,-44(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
   2925c:	e03ff315 	stw	zero,-52(fp)
    
    alt_8 phy_info_count = 0;
   29260:	e03ff405 	stb	zero,-48(fp)
    
    alt_tse_phy_info *pphy = 0;
   29264:	e03ff615 	stw	zero,-40(fp)
    alt_tse_mac_info *pmac_info = 0;
   29268:	e03ff715 	stw	zero,-36(fp)
    alt_tse_system_info *psys = 0;
   2926c:	e03ff815 	stw	zero,-32(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   29270:	e0bfff17 	ldw	r2,-4(fp)
   29274:	10800117 	ldw	r2,4(r2)
   29278:	10800217 	ldw	r2,8(r2)
   2927c:	10800017 	ldw	r2,0(r2)
   29280:	e0bff915 	stw	r2,-28(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
   29284:	e0bff917 	ldw	r2,-28(fp)
   29288:	10801004 	addi	r2,r2,64
   2928c:	10800037 	ldwio	r2,0(r2)
   29290:	e0bffa15 	stw	r2,-24(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   29294:	e13fff17 	ldw	r4,-4(fp)
   29298:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   2929c:	e0bffb05 	stb	r2,-20(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
   292a0:	e03ff005 	stb	zero,-64(fp)
   292a4:	0000ca06 	br	295d0 <alt_tse_mac_get_phy+0x38c>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
   292a8:	e0bff917 	ldw	r2,-28(fp)
   292ac:	10801004 	addi	r2,r2,64
   292b0:	e0fff003 	ldbu	r3,-64(fp)
   292b4:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
   292b8:	e0bff917 	ldw	r2,-28(fp)
   292bc:	1080a204 	addi	r2,r2,648
   292c0:	10800037 	ldwio	r2,0(r2)
   292c4:	e0bffc15 	stw	r2,-16(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
   292c8:	e0bff917 	ldw	r2,-28(fp)
   292cc:	1080a304 	addi	r2,r2,652
   292d0:	10800037 	ldwio	r2,0(r2)
   292d4:	e0bff515 	stw	r2,-44(fp)
        
        /* PHY found */
        if (phyid != phyid2)
   292d8:	e0fffc17 	ldw	r3,-16(fp)
   292dc:	e0bff517 	ldw	r2,-44(fp)
   292e0:	1880b826 	beq	r3,r2,295c4 <alt_tse_mac_get_phy+0x380>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
   292e4:	01000704 	movi	r4,28
   292e8:	002d6b80 	call	2d6b8 <malloc>
   292ec:	e0bff615 	stw	r2,-40(fp)
            if(!pphy) {
   292f0:	e0bff617 	ldw	r2,-40(fp)
   292f4:	1000091e 	bne	r2,zero,2931c <alt_tse_mac_get_phy+0xd8>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
   292f8:	e0fffb07 	ldb	r3,-20(fp)
   292fc:	e0bff407 	ldb	r2,-48(fp)
   29300:	010000f4 	movhi	r4,3
   29304:	21066b04 	addi	r4,r4,6572
   29308:	180b883a 	mov	r5,r3
   2930c:	100d883a 	mov	r6,r2
   29310:	0017c440 	call	17c44 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
   29314:	00bfffc4 	movi	r2,-1
   29318:	0000cc06 	br	2964c <alt_tse_mac_get_phy+0x408>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
   2931c:	e0bff617 	ldw	r2,-40(fp)
   29320:	e0fff003 	ldbu	r3,-64(fp)
   29324:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
   29328:	e0bffc17 	ldw	r2,-16(fp)
   2932c:	100691ba 	slli	r3,r2,6
   29330:	e0bff517 	ldw	r2,-44(fp)
   29334:	1005d2ba 	srai	r2,r2,10
   29338:	10800fcc 	andi	r2,r2,63
   2933c:	1884b03a 	or	r2,r3,r2
   29340:	e0bffd15 	stw	r2,-12(fp)
            model_number = (phyid2 >> 4) & 0x3f;
   29344:	e0bff517 	ldw	r2,-44(fp)
   29348:	1005d13a 	srai	r2,r2,4
   2934c:	10800fcc 	andi	r2,r2,63
   29350:	e0bffe05 	stb	r2,-8(fp)
            revision_number = phyid2 & 0x0f;
   29354:	e0bff517 	ldw	r2,-44(fp)
   29358:	108003cc 	andi	r2,r2,15
   2935c:	e0bffe45 	stb	r2,-7(fp)
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
   29360:	e03ff205 	stb	zero,-56(fp)
            for(i = 0; i < phy_profile_count; i++) {
   29364:	e03ff115 	stw	zero,-60(fp)
   29368:	00003306 	br	29438 <alt_tse_mac_get_phy+0x1f4>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
   2936c:	00c00134 	movhi	r3,4
   29370:	18d38004 	addi	r3,r3,19968
   29374:	e0bff117 	ldw	r2,-60(fp)
   29378:	1085883a 	add	r2,r2,r2
   2937c:	1085883a 	add	r2,r2,r2
   29380:	1885883a 	add	r2,r3,r2
   29384:	10800017 	ldw	r2,0(r2)
   29388:	10c01417 	ldw	r3,80(r2)
   2938c:	e0bffd17 	ldw	r2,-12(fp)
   29390:	1880261e 	bne	r3,r2,2942c <alt_tse_mac_get_phy+0x1e8>
   29394:	00c00134 	movhi	r3,4
   29398:	18d38004 	addi	r3,r3,19968
   2939c:	e0bff117 	ldw	r2,-60(fp)
   293a0:	1085883a 	add	r2,r2,r2
   293a4:	1085883a 	add	r2,r2,r2
   293a8:	1885883a 	add	r2,r3,r2
   293ac:	10800017 	ldw	r2,0(r2)
   293b0:	10801503 	ldbu	r2,84(r2)
   293b4:	10c03fcc 	andi	r3,r2,255
   293b8:	e0bffe03 	ldbu	r2,-8(fp)
   293bc:	18801b1e 	bne	r3,r2,2942c <alt_tse_mac_get_phy+0x1e8>
                {
                    pphy->pphy_profile = pphy_profiles[i];
   293c0:	00c00134 	movhi	r3,4
   293c4:	18d38004 	addi	r3,r3,19968
   293c8:	e0bff117 	ldw	r2,-60(fp)
   293cc:	1085883a 	add	r2,r2,r2
   293d0:	1085883a 	add	r2,r2,r2
   293d4:	1885883a 	add	r2,r3,r2
   293d8:	10c00017 	ldw	r3,0(r2)
   293dc:	e0bff617 	ldw	r2,-40(fp)
   293e0:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
   293e4:	00c00134 	movhi	r3,4
   293e8:	18d38004 	addi	r3,r3,19968
   293ec:	e0bff117 	ldw	r2,-60(fp)
   293f0:	1085883a 	add	r2,r2,r2
   293f4:	1085883a 	add	r2,r2,r2
   293f8:	1885883a 	add	r2,r3,r2
   293fc:	10800017 	ldw	r2,0(r2)
   29400:	100b883a 	mov	r5,r2
   29404:	e0fff003 	ldbu	r3,-64(fp)
   29408:	e0bffb07 	ldb	r2,-20(fp)
   2940c:	010000f4 	movhi	r4,3
   29410:	21067a04 	addi	r4,r4,6632
   29414:	180d883a 	mov	r6,r3
   29418:	100f883a 	mov	r7,r2
   2941c:	0017c440 	call	17c44 <printf>
                    is_phy_in_profile = 1;
   29420:	00800044 	movi	r2,1
   29424:	e0bff205 	stb	r2,-56(fp)
                    break;
   29428:	00000706 	br	29448 <alt_tse_mac_get_phy+0x204>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
   2942c:	e0bff117 	ldw	r2,-60(fp)
   29430:	10800044 	addi	r2,r2,1
   29434:	e0bff115 	stw	r2,-60(fp)
   29438:	d0a8d803 	ldbu	r2,-23712(gp)
   2943c:	10803fcc 	andi	r2,r2,255
   29440:	e0fff117 	ldw	r3,-60(fp)
   29444:	18bfc916 	blt	r3,r2,2936c <alt_tse_mac_get_phy+0x128>
                    is_phy_in_profile = 1;
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
   29448:	e0bff203 	ldbu	r2,-56(fp)
   2944c:	10000f1e 	bne	r2,zero,2948c <alt_tse_mac_get_phy+0x248>
                pphy->pphy_profile = 0;
   29450:	e0bff617 	ldw	r2,-40(fp)
   29454:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
   29458:	e0fff003 	ldbu	r3,-64(fp)
   2945c:	e0bffb07 	ldb	r2,-20(fp)
   29460:	010000f4 	movhi	r4,3
   29464:	21068a04 	addi	r4,r4,6696
   29468:	180b883a 	mov	r5,r3
   2946c:	100d883a 	mov	r6,r2
   29470:	0017c440 	call	17c44 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
   29474:	010000f4 	movhi	r4,3
   29478:	21069b04 	addi	r4,r4,6764
   2947c:	0017eb00 	call	17eb0 <puts>
                return_value++;
   29480:	e0bff317 	ldw	r2,-52(fp)
   29484:	10800044 	addi	r2,r2,1
   29488:	e0bff315 	stw	r2,-52(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
   2948c:	e0bffd17 	ldw	r2,-12(fp)
   29490:	010000f4 	movhi	r4,3
   29494:	2106a804 	addi	r4,r4,6816
   29498:	100b883a 	mov	r5,r2
   2949c:	00265480 	call	26548 <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
   294a0:	e0bffe03 	ldbu	r2,-8(fp)
   294a4:	010000f4 	movhi	r4,3
   294a8:	2106b304 	addi	r4,r4,6860
   294ac:	100b883a 	mov	r5,r2
   294b0:	00265480 	call	26548 <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
   294b4:	e0bffe43 	ldbu	r2,-7(fp)
   294b8:	010000f4 	movhi	r4,3
   294bc:	2106be04 	addi	r4,r4,6904
   294c0:	100b883a 	mov	r5,r2
   294c4:	00265480 	call	26548 <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
   294c8:	e13fff17 	ldw	r4,-4(fp)
   294cc:	e17ff617 	ldw	r5,-40(fp)
   294d0:	00296600 	call	29660 <alt_tse_mac_associate_phy>
   294d4:	1000351e 	bne	r2,zero,295ac <alt_tse_mac_get_phy+0x368>
            	
            	pmac_info = pphy->pmac_info;
   294d8:	e0bff617 	ldw	r2,-40(fp)
   294dc:	10800617 	ldw	r2,24(r2)
   294e0:	e0bff715 	stw	r2,-36(fp)
            	psys = pmac_info->psys_info;
   294e4:	e0bff717 	ldw	r2,-36(fp)
   294e8:	10800217 	ldw	r2,8(r2)
   294ec:	e0bff815 	stw	r2,-32(fp)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
   294f0:	d8000015 	stw	zero,0(sp)
   294f4:	e13ff617 	ldw	r4,-40(fp)
   294f8:	000b883a 	mov	r5,zero
   294fc:	01800384 	movi	r6,14
   29500:	01c00044 	movi	r7,1
   29504:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
   29508:	e13ff617 	ldw	r4,-40(fp)
   2950c:	01400044 	movi	r5,1
   29510:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
   29514:	e13ff617 	ldw	r4,-40(fp)
   29518:	01400044 	movi	r5,1
   2951c:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
   29520:	e13ff617 	ldw	r4,-40(fp)
   29524:	01400044 	movi	r5,1
   29528:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
   2952c:	e13ff617 	ldw	r4,-40(fp)
   29530:	014003f4 	movhi	r5,15
   29534:	29509004 	addi	r5,r5,16960
   29538:	0029ae00 	call	29ae0 <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
   2953c:	e0bff617 	ldw	r2,-40(fp)
   29540:	10800517 	ldw	r2,20(r2)
   29544:	10000f26 	beq	r2,zero,29584 <alt_tse_mac_get_phy+0x340>
		            if(pphy->pphy_profile->phy_cfg) {
   29548:	e0bff617 	ldw	r2,-40(fp)
   2954c:	10800517 	ldw	r2,20(r2)
   29550:	10801717 	ldw	r2,92(r2)
   29554:	10000b26 	beq	r2,zero,29584 <alt_tse_mac_get_phy+0x340>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
   29558:	e0bff617 	ldw	r2,-40(fp)
   2955c:	10800517 	ldw	r2,20(r2)
   29560:	010000f4 	movhi	r4,3
   29564:	2106c904 	addi	r4,r4,6948
   29568:	100b883a 	mov	r5,r2
   2956c:	00265480 	call	26548 <no_printf>
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
   29570:	e0bff617 	ldw	r2,-40(fp)
   29574:	10800517 	ldw	r2,20(r2)
   29578:	10801717 	ldw	r2,92(r2)
   2957c:	e13ff917 	ldw	r4,-28(fp)
   29580:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
   29584:	e0bff817 	ldw	r2,-32(fp)
   29588:	10801117 	ldw	r2,68(r2)
   2958c:	10000726 	beq	r2,zero,295ac <alt_tse_mac_get_phy+0x368>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
   29590:	010000f4 	movhi	r4,3
   29594:	2106d704 	addi	r4,r4,7004
   29598:	00265480 	call	26548 <no_printf>
            		psys->tse_phy_cfg(pmac_group_base);
   2959c:	e0bff817 	ldw	r2,-32(fp)
   295a0:	10801117 	ldw	r2,68(r2)
   295a4:	e13ff917 	ldw	r4,-28(fp)
   295a8:	103ee83a 	callr	r2
            	}
            }
            
            tse_dprintf(6, "\n");
   295ac:	010000f4 	movhi	r4,3
   295b0:	2106e504 	addi	r4,r4,7060
   295b4:	00265480 	call	26548 <no_printf>
	            
            phy_info_count++;
   295b8:	e0bff403 	ldbu	r2,-48(fp)
   295bc:	10800044 	addi	r2,r2,1
   295c0:	e0bff405 	stb	r2,-48(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x00; phyadd < 0x20; phyadd++)
   295c4:	e0bff003 	ldbu	r2,-64(fp)
   295c8:	10800044 	addi	r2,r2,1
   295cc:	e0bff005 	stb	r2,-64(fp)
   295d0:	e0bff003 	ldbu	r2,-64(fp)
   295d4:	10800830 	cmpltui	r2,r2,32
   295d8:	103f331e 	bne	r2,zero,292a8 <alt_tse_mac_get_phy+0x64>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
   295dc:	e0bfff17 	ldw	r2,-4(fp)
   295e0:	10800003 	ldbu	r2,0(r2)
   295e4:	10c03fcc 	andi	r3,r2,255
   295e8:	e0bff407 	ldb	r2,-48(fp)
   295ec:	18801226 	beq	r3,r2,29638 <alt_tse_mac_get_phy+0x3f4>
        if(phy_info_count == 0) {
   295f0:	e0bff407 	ldb	r2,-48(fp)
   295f4:	1000061e 	bne	r2,zero,29610 <alt_tse_mac_get_phy+0x3cc>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
   295f8:	e0bffb07 	ldb	r2,-20(fp)
   295fc:	010000f4 	movhi	r4,3
   29600:	2106e604 	addi	r4,r4,7064
   29604:	100b883a 	mov	r5,r2
   29608:	0017c440 	call	17c44 <printf>
   2960c:	00000a06 	br	29638 <alt_tse_mac_get_phy+0x3f4>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
   29610:	e17ffb07 	ldb	r5,-20(fp)
   29614:	e0fff407 	ldb	r3,-48(fp)
   29618:	e0bfff17 	ldw	r2,-4(fp)
   2961c:	10800003 	ldbu	r2,0(r2)
   29620:	10803fcc 	andi	r2,r2,255
   29624:	010000f4 	movhi	r4,3
   29628:	2106f204 	addi	r4,r4,7112
   2962c:	180d883a 	mov	r6,r3
   29630:	100f883a 	mov	r7,r2
   29634:	0017c440 	call	17c44 <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   29638:	e0bff917 	ldw	r2,-28(fp)
   2963c:	10801004 	addi	r2,r2,64
   29640:	e0fffa17 	ldw	r3,-24(fp)
   29644:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
   29648:	e0bff317 	ldw	r2,-52(fp)
}
   2964c:	e037883a 	mov	sp,fp
   29650:	dfc00117 	ldw	ra,4(sp)
   29654:	df000017 	ldw	fp,0(sp)
   29658:	dec00204 	addi	sp,sp,8
   2965c:	f800283a 	ret

00029660 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
   29660:	defff604 	addi	sp,sp,-40
   29664:	dfc00915 	stw	ra,36(sp)
   29668:	df000815 	stw	fp,32(sp)
   2966c:	df000804 	addi	fp,sp,32
   29670:	e13ffe15 	stw	r4,-8(fp)
   29674:	e17fff15 	stw	r5,-4(fp)
    
	alt_32 i;
	alt_32 return_value = TSE_PHY_MAP_SUCCESS;
   29678:	e03ff915 	stw	zero,-28(fp)
    
	alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
   2967c:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
   29680:	e03ffc15 	stw	zero,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
   29684:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   29688:	e13ffe17 	ldw	r4,-8(fp)
   2968c:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   29690:	e0bffd45 	stb	r2,-11(fp)
    alt_8 sys_info_index = 0;
   29694:	e03ffd85 	stb	zero,-10(fp)
    
    is_mapped = 0;
   29698:	e03ffa05 	stb	zero,-24(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
   2969c:	e03ff815 	stw	zero,-32(fp)
   296a0:	00002b06 	br	29750 <alt_tse_mac_associate_phy+0xf0>
        pmac_info = pmac_group->pmac_info[i];
   296a4:	e0fffe17 	ldw	r3,-8(fp)
   296a8:	e0bff817 	ldw	r2,-32(fp)
   296ac:	10800044 	addi	r2,r2,1
   296b0:	1085883a 	add	r2,r2,r2
   296b4:	1085883a 	add	r2,r2,r2
   296b8:	1885883a 	add	r2,r3,r2
   296bc:	10800017 	ldw	r2,0(r2)
   296c0:	e0bffc15 	stw	r2,-16(fp)
        psys = pmac_info->psys_info;
   296c4:	e0bffc17 	ldw	r2,-16(fp)
   296c8:	10800217 	ldw	r2,8(r2)
   296cc:	e0bffb15 	stw	r2,-20(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
   296d0:	e0bffb17 	ldw	r2,-20(fp)
   296d4:	10c01017 	ldw	r3,64(r2)
   296d8:	e0bfff17 	ldw	r2,-4(fp)
   296dc:	10800003 	ldbu	r2,0(r2)
   296e0:	10803fcc 	andi	r2,r2,255
   296e4:	1880171e 	bne	r3,r2,29744 <alt_tse_mac_associate_phy+0xe4>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   296e8:	e13ffc17 	ldw	r4,-16(fp)
   296ec:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   296f0:	e0bffd05 	stb	r2,-12(fp)
	        sys_info_index = alt_tse_get_system_index(psys);
   296f4:	e13ffb17 	ldw	r4,-20(fp)
   296f8:	00276500 	call	27650 <alt_tse_get_system_index>
   296fc:	e0bffd85 	stb	r2,-10(fp)
	        
            pmac_info->pphy_info = pphy;
   29700:	e0bffc17 	ldw	r2,-16(fp)
   29704:	e0ffff17 	ldw	r3,-4(fp)
   29708:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
   2970c:	e0bfff17 	ldw	r2,-4(fp)
   29710:	e0fffc17 	ldw	r3,-16(fp)
   29714:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
   29718:	e17ffd47 	ldb	r5,-11(fp)
   2971c:	e0fffd07 	ldb	r3,-12(fp)
   29720:	e0bffd87 	ldb	r2,-10(fp)
   29724:	010000f4 	movhi	r4,3
   29728:	21071104 	addi	r4,r4,7236
   2972c:	180d883a 	mov	r6,r3
   29730:	100f883a 	mov	r7,r2
   29734:	0017c440 	call	17c44 <printf>
            is_mapped = 1;
   29738:	00800044 	movi	r2,1
   2973c:	e0bffa05 	stb	r2,-24(fp)
            break;
   29740:	00000806 	br	29764 <alt_tse_mac_associate_phy+0x104>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
   29744:	e0bff817 	ldw	r2,-32(fp)
   29748:	10800044 	addi	r2,r2,1
   2974c:	e0bff815 	stw	r2,-32(fp)
   29750:	e0bffe17 	ldw	r2,-8(fp)
   29754:	10800003 	ldbu	r2,0(r2)
   29758:	10803fcc 	andi	r2,r2,255
   2975c:	e0fff817 	ldw	r3,-32(fp)
   29760:	18bfd016 	blt	r3,r2,296a4 <alt_tse_mac_associate_phy+0x44>
            break;
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
   29764:	e0bffa03 	ldbu	r2,-24(fp)
   29768:	10003c1e 	bne	r2,zero,2985c <alt_tse_mac_associate_phy+0x1fc>
        for(i = 0; i < pmac_group->channel; i++) {
   2976c:	e03ff815 	stw	zero,-32(fp)
   29770:	00003506 	br	29848 <alt_tse_mac_associate_phy+0x1e8>
            pmac_info = pmac_group->pmac_info[i];
   29774:	e0fffe17 	ldw	r3,-8(fp)
   29778:	e0bff817 	ldw	r2,-32(fp)
   2977c:	10800044 	addi	r2,r2,1
   29780:	1085883a 	add	r2,r2,r2
   29784:	1085883a 	add	r2,r2,r2
   29788:	1885883a 	add	r2,r3,r2
   2978c:	10800017 	ldw	r2,0(r2)
   29790:	e0bffc15 	stw	r2,-16(fp)
            psys = pmac_info->psys_info;
   29794:	e0bffc17 	ldw	r2,-16(fp)
   29798:	10800217 	ldw	r2,8(r2)
   2979c:	e0bffb15 	stw	r2,-20(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
   297a0:	e0bffb17 	ldw	r2,-20(fp)
   297a4:	10800517 	ldw	r2,20(r2)
   297a8:	10002326 	beq	r2,zero,29838 <alt_tse_mac_associate_phy+0x1d8>
   297ac:	e0bffb17 	ldw	r2,-20(fp)
   297b0:	10800617 	ldw	r2,24(r2)
   297b4:	10002026 	beq	r2,zero,29838 <alt_tse_mac_associate_phy+0x1d8>
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
   297b8:	e0bffb17 	ldw	r2,-20(fp)
   297bc:	10801017 	ldw	r2,64(r2)
   297c0:	10bfffd8 	cmpnei	r2,r2,-1
   297c4:	10001d1e 	bne	r2,zero,2983c <alt_tse_mac_associate_phy+0x1dc>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   297c8:	e13ffc17 	ldw	r4,-16(fp)
   297cc:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   297d0:	e0bffd05 	stb	r2,-12(fp)
                sys_info_index = alt_tse_get_system_index(psys);
   297d4:	e13ffb17 	ldw	r4,-20(fp)
   297d8:	00276500 	call	27650 <alt_tse_get_system_index>
   297dc:	e0bffd85 	stb	r2,-10(fp)
                
                pmac_info->pphy_info = pphy;
   297e0:	e0bffc17 	ldw	r2,-16(fp)
   297e4:	e0ffff17 	ldw	r3,-4(fp)
   297e8:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
   297ec:	e0bfff17 	ldw	r2,-4(fp)
   297f0:	e0fffc17 	ldw	r3,-16(fp)
   297f4:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
   297f8:	e0bfff17 	ldw	r2,-4(fp)
   297fc:	10800003 	ldbu	r2,0(r2)
   29800:	10c03fcc 	andi	r3,r2,255
   29804:	e0bffb17 	ldw	r2,-20(fp)
   29808:	10c01015 	stw	r3,64(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
   2980c:	e17ffd47 	ldb	r5,-11(fp)
   29810:	e0fffd07 	ldb	r3,-12(fp)
   29814:	e0bffd87 	ldb	r2,-10(fp)
   29818:	010000f4 	movhi	r4,3
   2981c:	21072104 	addi	r4,r4,7300
   29820:	180d883a 	mov	r6,r3
   29824:	100f883a 	mov	r7,r2
   29828:	0017c440 	call	17c44 <printf>
                is_mapped = 1;
   2982c:	00800044 	movi	r2,1
   29830:	e0bffa05 	stb	r2,-24(fp)
                break;
   29834:	00000906 	br	2985c <alt_tse_mac_associate_phy+0x1fc>
            pmac_info = pmac_group->pmac_info[i];
            psys = pmac_info->psys_info;
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
            	continue;
   29838:	0001883a 	nop
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
   2983c:	e0bff817 	ldw	r2,-32(fp)
   29840:	10800044 	addi	r2,r2,1
   29844:	e0bff815 	stw	r2,-32(fp)
   29848:	e0bffe17 	ldw	r2,-8(fp)
   2984c:	10800003 	ldbu	r2,0(r2)
   29850:	10803fcc 	andi	r2,r2,255
   29854:	e0fff817 	ldw	r3,-32(fp)
   29858:	18bfc616 	blt	r3,r2,29774 <alt_tse_mac_associate_phy+0x114>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
   2985c:	e0bffa03 	ldbu	r2,-24(fp)
   29860:	1000091e 	bne	r2,zero,29888 <alt_tse_mac_associate_phy+0x228>
    	pphy->pmac_info = 0;
   29864:	e0bfff17 	ldw	r2,-4(fp)
   29868:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
   2986c:	e0bffd47 	ldb	r2,-11(fp)
   29870:	010000f4 	movhi	r4,3
   29874:	21073204 	addi	r4,r4,7368
   29878:	100b883a 	mov	r5,r2
   2987c:	0017c440 	call	17c44 <printf>
        return_value = TSE_PHY_MAP_ERROR;
   29880:	00bfffc4 	movi	r2,-1
   29884:	e0bff915 	stw	r2,-28(fp)
    }
    
    return return_value;
   29888:	e0bff917 	ldw	r2,-28(fp)
}
   2988c:	e037883a 	mov	sp,fp
   29890:	dfc00117 	ldw	ra,4(sp)
   29894:	df000017 	ldw	fp,0(sp)
   29898:	dec00204 	addi	sp,sp,8
   2989c:	f800283a 	ret

000298a0 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
   298a0:	defff804 	addi	sp,sp,-32
   298a4:	dfc00715 	stw	ra,28(sp)
   298a8:	df000615 	stw	fp,24(sp)
   298ac:	df000604 	addi	fp,sp,24
   298b0:	e13fff15 	stw	r4,-4(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
   298b4:	e0bfff17 	ldw	r2,-4(fp)
   298b8:	10800217 	ldw	r2,8(r2)
   298bc:	e0bffa15 	stw	r2,-24(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
   298c0:	e0bffa17 	ldw	r2,-24(fp)
   298c4:	10800017 	ldw	r2,0(r2)
   298c8:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   298cc:	e0bfff17 	ldw	r2,-4(fp)
   298d0:	10800317 	ldw	r2,12(r2)
   298d4:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   298d8:	e13fff17 	ldw	r4,-4(fp)
   298dc:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   298e0:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   298e4:	e13ffc17 	ldw	r4,-16(fp)
   298e8:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   298ec:	e0bffd45 	stb	r2,-11(fp)

    if(psys->tse_pcs_ena) {
   298f0:	e0bffa17 	ldw	r2,-24(fp)
   298f4:	108003c3 	ldbu	r2,15(r2)
   298f8:	10803fcc 	andi	r2,r2,255
   298fc:	10002c26 	beq	r2,zero,299b0 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
   29900:	e0fffd47 	ldb	r3,-11(fp)
   29904:	e0bffd07 	ldb	r2,-12(fp)
   29908:	010000f4 	movhi	r4,3
   2990c:	21076304 	addi	r4,r4,7564
   29910:	180b883a 	mov	r5,r3
   29914:	100d883a 	mov	r6,r2
   29918:	0017c440 	call	17c44 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
   2991c:	e0bffb17 	ldw	r2,-20(fp)
   29920:	10808004 	addi	r2,r2,512
   29924:	10801404 	addi	r2,r2,80
   29928:	10800037 	ldwio	r2,0(r2)
   2992c:	e0bffe15 	stw	r2,-8(fp)
        
        if(psys->tse_pcs_sgmii) {
   29930:	e0bffa17 	ldw	r2,-24(fp)
   29934:	10800403 	ldbu	r2,16(r2)
   29938:	10803fcc 	andi	r2,r2,255
   2993c:	10000e26 	beq	r2,zero,29978 <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
   29940:	e0fffd47 	ldb	r3,-11(fp)
   29944:	e0bffd07 	ldb	r2,-12(fp)
   29948:	010000f4 	movhi	r4,3
   2994c:	21077104 	addi	r4,r4,7620
   29950:	180b883a 	mov	r5,r3
   29954:	100d883a 	mov	r6,r2
   29958:	0017c440 	call	17c44 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
   2995c:	e0bffb17 	ldw	r2,-20(fp)
   29960:	10808004 	addi	r2,r2,512
   29964:	10801404 	addi	r2,r2,80
   29968:	e0fffe17 	ldw	r3,-8(fp)
   2996c:	18c000d4 	ori	r3,r3,3
   29970:	10c00035 	stwio	r3,0(r2)
   29974:	00000e06 	br	299b0 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
   29978:	e0fffd47 	ldb	r3,-11(fp)
   2997c:	e0bffd07 	ldb	r2,-12(fp)
   29980:	010000f4 	movhi	r4,3
   29984:	21077d04 	addi	r4,r4,7668
   29988:	180b883a 	mov	r5,r3
   2998c:	100d883a 	mov	r6,r2
   29990:	0017c440 	call	17c44 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
   29994:	e0bffb17 	ldw	r2,-20(fp)
   29998:	10808004 	addi	r2,r2,512
   2999c:	10801404 	addi	r2,r2,80
   299a0:	e13ffe17 	ldw	r4,-8(fp)
   299a4:	00ffff04 	movi	r3,-4
   299a8:	20c6703a 	and	r3,r4,r3
   299ac:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
   299b0:	0005883a 	mov	r2,zero
}
   299b4:	e037883a 	mov	sp,fp
   299b8:	dfc00117 	ldw	ra,4(sp)
   299bc:	df000017 	ldw	fp,0(sp)
   299c0:	dec00204 	addi	sp,sp,8
   299c4:	f800283a 	ret

000299c8 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
   299c8:	defffb04 	addi	sp,sp,-20
   299cc:	dfc00415 	stw	ra,16(sp)
   299d0:	df000315 	stw	fp,12(sp)
   299d4:	df000304 	addi	fp,sp,12
	alt_8 i = 0;
   299d8:	e03ffd05 	stb	zero,-12(fp)
	alt_8 j = 0;
   299dc:	e03ffd45 	stb	zero,-11(fp)
    
    alt_tse_mac_group *pmac_group = 0;
   299e0:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
   299e4:	e03fff15 	stw	zero,-4(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
   299e8:	00287000 	call	28700 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
   299ec:	00289980 	call	28998 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
   299f0:	0028ba80 	call	28ba8 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
   299f4:	e03ffd05 	stb	zero,-12(fp)
   299f8:	00002f06 	br	29ab8 <alt_tse_phy_init+0xf0>
        pmac_group = pmac_groups[i];
   299fc:	e0bffd07 	ldb	r2,-12(fp)
   29a00:	00c00134 	movhi	r3,4
   29a04:	18d37804 	addi	r3,r3,19936
   29a08:	1085883a 	add	r2,r2,r2
   29a0c:	1085883a 	add	r2,r2,r2
   29a10:	1885883a 	add	r2,r3,r2
   29a14:	10800017 	ldw	r2,0(r2)
   29a18:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
   29a1c:	e0bffe17 	ldw	r2,-8(fp)
   29a20:	10800117 	ldw	r2,4(r2)
   29a24:	10800217 	ldw	r2,8(r2)
   29a28:	10800203 	ldbu	r2,8(r2)
   29a2c:	10803fcc 	andi	r2,r2,255
   29a30:	10000326 	beq	r2,zero,29a40 <alt_tse_phy_init+0x78>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
   29a34:	e13ffe17 	ldw	r4,-8(fp)
   29a38:	00292440 	call	29244 <alt_tse_mac_get_phy>
   29a3c:	00000706 	br	29a5c <alt_tse_phy_init+0x94>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
   29a40:	e0fffd07 	ldb	r3,-12(fp)
   29a44:	e0bffd47 	ldb	r2,-11(fp)
   29a48:	010000f4 	movhi	r4,3
   29a4c:	21078904 	addi	r4,r4,7716
   29a50:	180b883a 	mov	r5,r3
   29a54:	100d883a 	mov	r6,r2
   29a58:	0017c440 	call	17c44 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
   29a5c:	e03ffd45 	stb	zero,-11(fp)
   29a60:	00000d06 	br	29a98 <alt_tse_phy_init+0xd0>
            pmac_info = pmac_group->pmac_info[j];
   29a64:	e0bffd47 	ldb	r2,-11(fp)
   29a68:	e0fffe17 	ldw	r3,-8(fp)
   29a6c:	10800044 	addi	r2,r2,1
   29a70:	1085883a 	add	r2,r2,r2
   29a74:	1085883a 	add	r2,r2,r2
   29a78:	1885883a 	add	r2,r3,r2
   29a7c:	10800017 	ldw	r2,0(r2)
   29a80:	e0bfff15 	stw	r2,-4(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
   29a84:	e13fff17 	ldw	r4,-4(fp)
   29a88:	00298a00 	call	298a0 <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
   29a8c:	e0bffd43 	ldbu	r2,-11(fp)
   29a90:	10800044 	addi	r2,r2,1
   29a94:	e0bffd45 	stb	r2,-11(fp)
   29a98:	e0fffd47 	ldb	r3,-11(fp)
   29a9c:	e0bffe17 	ldw	r2,-8(fp)
   29aa0:	10800003 	ldbu	r2,0(r2)
   29aa4:	10803fcc 	andi	r2,r2,255
   29aa8:	18bfee16 	blt	r3,r2,29a64 <alt_tse_phy_init+0x9c>
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
   29aac:	e0bffd03 	ldbu	r2,-12(fp)
   29ab0:	10800044 	addi	r2,r2,1
   29ab4:	e0bffd05 	stb	r2,-12(fp)
   29ab8:	e0fffd07 	ldb	r3,-12(fp)
   29abc:	d0a8d843 	ldbu	r2,-23711(gp)
   29ac0:	10803fcc 	andi	r2,r2,255
   29ac4:	18bfcd16 	blt	r3,r2,299fc <alt_tse_phy_init+0x34>
            
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
   29ac8:	0005883a 	mov	r2,zero
}
   29acc:	e037883a 	mov	sp,fp
   29ad0:	dfc00117 	ldw	ra,4(sp)
   29ad4:	df000017 	ldw	fp,0(sp)
   29ad8:	dec00204 	addi	sp,sp,8
   29adc:	f800283a 	ret

00029ae0 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
   29ae0:	defff704 	addi	sp,sp,-36
   29ae4:	dfc00815 	stw	ra,32(sp)
   29ae8:	df000715 	stw	fp,28(sp)
   29aec:	df000704 	addi	fp,sp,28
   29af0:	e13ffe15 	stw	r4,-8(fp)
   29af4:	e17fff15 	stw	r5,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   29af8:	e0bffe17 	ldw	r2,-8(fp)
   29afc:	10800617 	ldw	r2,24(r2)
   29b00:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   29b04:	e0bffb17 	ldw	r2,-20(fp)
   29b08:	10800317 	ldw	r2,12(r2)
   29b0c:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   29b10:	e13ffb17 	ldw	r4,-20(fp)
   29b14:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   29b18:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   29b1c:	e13ffc17 	ldw	r4,-16(fp)
   29b20:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   29b24:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   29b28:	e13ffe17 	ldw	r4,-8(fp)
   29b2c:	00284680 	call	28468 <alt_tse_phy_rd_mdio_addr>
   29b30:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   29b34:	e0bffe17 	ldw	r2,-8(fp)
   29b38:	10800003 	ldbu	r2,0(r2)
   29b3c:	10803fcc 	andi	r2,r2,255
   29b40:	e13ffe17 	ldw	r4,-8(fp)
   29b44:	100b883a 	mov	r5,r2
   29b48:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
   29b4c:	e13ffe17 	ldw	r4,-8(fp)
   29b50:	01400044 	movi	r5,1
   29b54:	018000c4 	movi	r6,3
   29b58:	01c00044 	movi	r7,1
   29b5c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29b60:	10000d1e 	bne	r2,zero,29b98 <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
   29b64:	e0fffd47 	ldb	r3,-11(fp)
   29b68:	e0bffd07 	ldb	r2,-12(fp)
   29b6c:	010000f4 	movhi	r4,3
   29b70:	21079f04 	addi	r4,r4,7804
   29b74:	180b883a 	mov	r5,r3
   29b78:	100d883a 	mov	r6,r2
   29b7c:	0017c440 	call	17c44 <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   29b80:	e0bffd83 	ldbu	r2,-10(fp)
   29b84:	e13ffe17 	ldw	r4,-8(fp)
   29b88:	100b883a 	mov	r5,r2
   29b8c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
		
		return TSE_PHY_AN_NOT_CAPABLE;
   29b90:	00bfff84 	movi	r2,-2
   29b94:	00003e06 	br	29c90 <alt_tse_phy_restart_an+0x1b0>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
   29b98:	00800044 	movi	r2,1
   29b9c:	d8800015 	stw	r2,0(sp)
   29ba0:	e13ffe17 	ldw	r4,-8(fp)
   29ba4:	000b883a 	mov	r5,zero
   29ba8:	01800304 	movi	r6,12
   29bac:	01c00044 	movi	r7,1
   29bb0:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
   29bb4:	00800044 	movi	r2,1
   29bb8:	d8800015 	stw	r2,0(sp)
   29bbc:	e13ffe17 	ldw	r4,-8(fp)
   29bc0:	000b883a 	mov	r5,zero
   29bc4:	01800244 	movi	r6,9
   29bc8:	01c00044 	movi	r7,1
   29bcc:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
   29bd0:	e0fffd47 	ldb	r3,-11(fp)
   29bd4:	e0bffd07 	ldb	r2,-12(fp)
   29bd8:	010000f4 	movhi	r4,3
   29bdc:	2107af04 	addi	r4,r4,7868
   29be0:	180b883a 	mov	r5,r3
   29be4:	100d883a 	mov	r6,r2
   29be8:	0017c440 	call	17c44 <printf>
    
    alt_32 timeout = 0;
   29bec:	e03ffa15 	stw	zero,-24(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
   29bf0:	00001506 	br	29c48 <alt_tse_phy_restart_an+0x168>
        if(timeout++ > timeout_threshold) {
   29bf4:	e0bffa17 	ldw	r2,-24(fp)
   29bf8:	e0ffff17 	ldw	r3,-4(fp)
   29bfc:	1885803a 	cmpltu	r2,r3,r2
   29c00:	e0fffa17 	ldw	r3,-24(fp)
   29c04:	18c00044 	addi	r3,r3,1
   29c08:	e0fffa15 	stw	r3,-24(fp)
   29c0c:	10803fcc 	andi	r2,r2,255
   29c10:	10000d26 	beq	r2,zero,29c48 <alt_tse_phy_restart_an+0x168>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
   29c14:	e0fffd47 	ldb	r3,-11(fp)
   29c18:	e0bffd07 	ldb	r2,-12(fp)
   29c1c:	010000f4 	movhi	r4,3
   29c20:	2107c104 	addi	r4,r4,7940
   29c24:	180b883a 	mov	r5,r3
   29c28:	100d883a 	mov	r6,r2
   29c2c:	0017c440 	call	17c44 <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   29c30:	e0bffd83 	ldbu	r2,-10(fp)
   29c34:	e13ffe17 	ldw	r4,-8(fp)
   29c38:	100b883a 	mov	r5,r2
   29c3c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
           
		   return TSE_PHY_AN_NOT_COMPLETE;
   29c40:	00bfffc4 	movi	r2,-1
   29c44:	00001206 	br	29c90 <alt_tse_phy_restart_an+0x1b0>
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
   29c48:	e13ffe17 	ldw	r4,-8(fp)
   29c4c:	01400044 	movi	r5,1
   29c50:	01800144 	movi	r6,5
   29c54:	01c00044 	movi	r7,1
   29c58:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29c5c:	103fe526 	beq	r2,zero,29bf4 <alt_tse_phy_restart_an+0x114>
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
   29c60:	e0fffd47 	ldb	r3,-11(fp)
   29c64:	e0bffd07 	ldb	r2,-12(fp)
   29c68:	010000f4 	movhi	r4,3
   29c6c:	2107cd04 	addi	r4,r4,7988
   29c70:	180b883a 	mov	r5,r3
   29c74:	100d883a 	mov	r6,r2
   29c78:	0017c440 	call	17c44 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   29c7c:	e0bffd83 	ldbu	r2,-10(fp)
   29c80:	e13ffe17 	ldw	r4,-8(fp)
   29c84:	100b883a 	mov	r5,r2
   29c88:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
   29c8c:	0005883a 	mov	r2,zero
}
   29c90:	e037883a 	mov	sp,fp
   29c94:	dfc00117 	ldw	ra,4(sp)
   29c98:	df000017 	ldw	fp,0(sp)
   29c9c:	dec00204 	addi	sp,sp,8
   29ca0:	f800283a 	ret

00029ca4 <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
   29ca4:	defff904 	addi	sp,sp,-28
   29ca8:	dfc00615 	stw	ra,24(sp)
   29cac:	df000515 	stw	fp,20(sp)
   29cb0:	df000504 	addi	fp,sp,20
   29cb4:	e13ffe15 	stw	r4,-8(fp)
   29cb8:	e17fff15 	stw	r5,-4(fp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   29cbc:	e0bffe17 	ldw	r2,-8(fp)
   29cc0:	10800617 	ldw	r2,24(r2)
   29cc4:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   29cc8:	e0bffb17 	ldw	r2,-20(fp)
   29ccc:	10800317 	ldw	r2,12(r2)
   29cd0:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   29cd4:	e13ffb17 	ldw	r4,-20(fp)
   29cd8:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   29cdc:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
   29ce0:	e13ffc17 	ldw	r4,-16(fp)
   29ce4:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   29ce8:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   29cec:	e13ffe17 	ldw	r4,-8(fp)
   29cf0:	00284680 	call	28468 <alt_tse_phy_rd_mdio_addr>
   29cf4:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   29cf8:	e0bffe17 	ldw	r2,-8(fp)
   29cfc:	10800003 	ldbu	r2,0(r2)
   29d00:	10803fcc 	andi	r2,r2,255
   29d04:	e13ffe17 	ldw	r4,-8(fp)
   29d08:	100b883a 	mov	r5,r2
   29d0c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
   29d10:	e0fffd47 	ldb	r3,-11(fp)
   29d14:	e0bffd07 	ldb	r2,-12(fp)
   29d18:	010000f4 	movhi	r4,3
   29d1c:	2107d904 	addi	r4,r4,8036
   29d20:	180b883a 	mov	r5,r3
   29d24:	100d883a 	mov	r6,r2
   29d28:	0017c440 	call	17c44 <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
   29d2c:	e13ffe17 	ldw	r4,-8(fp)
   29d30:	000b883a 	mov	r5,zero
   29d34:	01800384 	movi	r6,14
   29d38:	01c00044 	movi	r7,1
   29d3c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29d40:	1000061e 	bne	r2,zero,29d5c <alt_tse_phy_check_link+0xb8>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
   29d44:	e13ffe17 	ldw	r4,-8(fp)
   29d48:	01400044 	movi	r5,1
   29d4c:	01800144 	movi	r6,5
   29d50:	01c00044 	movi	r7,1
   29d54:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
   29d58:	1000191e 	bne	r2,zero,29dc0 <alt_tse_phy_check_link+0x11c>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
   29d5c:	e0fffd47 	ldb	r3,-11(fp)
   29d60:	e0bffd07 	ldb	r2,-12(fp)
   29d64:	010000f4 	movhi	r4,3
   29d68:	2107e404 	addi	r4,r4,8080
   29d6c:	180b883a 	mov	r5,r3
   29d70:	100d883a 	mov	r6,r2
   29d74:	0017c440 	call	17c44 <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
   29d78:	e13ffe17 	ldw	r4,-8(fp)
   29d7c:	e17fff17 	ldw	r5,-4(fp)
   29d80:	0029ae00 	call	29ae0 <alt_tse_phy_restart_an>
   29d84:	10bfffd8 	cmpnei	r2,r2,-1
   29d88:	10000d1e 	bne	r2,zero,29dc0 <alt_tse_phy_check_link+0x11c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
   29d8c:	e0fffd47 	ldb	r3,-11(fp)
   29d90:	e0bffd07 	ldb	r2,-12(fp)
   29d94:	010000f4 	movhi	r4,3
   29d98:	2107f804 	addi	r4,r4,8160
   29d9c:	180b883a 	mov	r5,r3
   29da0:	100d883a 	mov	r6,r2
   29da4:	0017c440 	call	17c44 <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   29da8:	e0bffd83 	ldbu	r2,-10(fp)
   29dac:	e13ffe17 	ldw	r4,-8(fp)
   29db0:	100b883a 	mov	r5,r2
   29db4:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
	
            return TSE_PHY_AN_NOT_COMPLETE;
   29db8:	00bfffc4 	movi	r2,-1
   29dbc:	00000c06 	br	29df0 <alt_tse_phy_check_link+0x14c>
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
   29dc0:	e0fffd47 	ldb	r3,-11(fp)
   29dc4:	e0bffd07 	ldb	r2,-12(fp)
   29dc8:	010000f4 	movhi	r4,3
   29dcc:	21080504 	addi	r4,r4,8212
   29dd0:	180b883a 	mov	r5,r3
   29dd4:	100d883a 	mov	r6,r2
   29dd8:	0017c440 	call	17c44 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   29ddc:	e0bffd83 	ldbu	r2,-10(fp)
   29de0:	e13ffe17 	ldw	r4,-8(fp)
   29de4:	100b883a 	mov	r5,r2
   29de8:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
   29dec:	0005883a 	mov	r2,zero
}
   29df0:	e037883a 	mov	sp,fp
   29df4:	dfc00117 	ldw	ra,4(sp)
   29df8:	df000017 	ldw	fp,0(sp)
   29dfc:	dec00204 	addi	sp,sp,8
   29e00:	f800283a 	ret

00029e04 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
   29e04:	defff904 	addi	sp,sp,-28
   29e08:	dfc00615 	stw	ra,24(sp)
   29e0c:	df000515 	stw	fp,20(sp)
   29e10:	df000504 	addi	fp,sp,20
   29e14:	e13fff15 	stw	r4,-4(fp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
   29e18:	e03ffb15 	stw	zero,-20(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   29e1c:	e0bfff17 	ldw	r2,-4(fp)
   29e20:	10800617 	ldw	r2,24(r2)
   29e24:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   29e28:	e0bffc17 	ldw	r2,-16(fp)
   29e2c:	10800317 	ldw	r2,12(r2)
   29e30:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   29e34:	e13ffc17 	ldw	r4,-16(fp)
   29e38:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   29e3c:	e0bffe05 	stb	r2,-8(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
   29e40:	e13ffd17 	ldw	r4,-12(fp)
   29e44:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   29e48:	e0bffe45 	stb	r2,-7(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   29e4c:	e13fff17 	ldw	r4,-4(fp)
   29e50:	00284680 	call	28468 <alt_tse_phy_rd_mdio_addr>
   29e54:	e0bffe85 	stb	r2,-6(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   29e58:	e0bfff17 	ldw	r2,-4(fp)
   29e5c:	10800003 	ldbu	r2,0(r2)
   29e60:	10803fcc 	andi	r2,r2,255
   29e64:	e13fff17 	ldw	r4,-4(fp)
   29e68:	100b883a 	mov	r5,r2
   29e6c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
   29e70:	e13fff17 	ldw	r4,-4(fp)
   29e74:	01400044 	movi	r5,1
   29e78:	018000c4 	movi	r6,3
   29e7c:	01c00044 	movi	r7,1
   29e80:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29e84:	10000d1e 	bne	r2,zero,29ebc <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
   29e88:	e0fffe47 	ldb	r3,-7(fp)
   29e8c:	e0bffe07 	ldb	r2,-8(fp)
   29e90:	010000f4 	movhi	r4,3
   29e94:	21079f04 	addi	r4,r4,7804
   29e98:	180b883a 	mov	r5,r3
   29e9c:	100d883a 	mov	r6,r2
   29ea0:	0017c440 	call	17c44 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   29ea4:	e0bffe83 	ldbu	r2,-6(fp)
   29ea8:	e13fff17 	ldw	r4,-4(fp)
   29eac:	100b883a 	mov	r5,r2
   29eb0:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
   29eb4:	00bfff84 	movi	r2,-2
   29eb8:	00013306 	br	2a388 <alt_tse_phy_get_cap+0x584>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   29ebc:	e13fff17 	ldw	r4,-4(fp)
   29ec0:	01400134 	movhi	r5,4
   29ec4:	29742404 	addi	r5,r5,-12144
   29ec8:	0029ae00 	call	29ae0 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
   29ecc:	e13fff17 	ldw	r4,-4(fp)
   29ed0:	01400044 	movi	r5,1
   29ed4:	01800144 	movi	r6,5
   29ed8:	01c00044 	movi	r7,1
   29edc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29ee0:	1000021e 	bne	r2,zero,29eec <alt_tse_phy_get_cap+0xe8>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
   29ee4:	00bfffc4 	movi	r2,-1
   29ee8:	e0bffb15 	stw	r2,-20(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
   29eec:	e13fff17 	ldw	r4,-4(fp)
   29ef0:	014003c4 	movi	r5,15
   29ef4:	018003c4 	movi	r6,15
   29ef8:	01c00044 	movi	r7,1
   29efc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29f00:	1007883a 	mov	r3,r2
   29f04:	e0bfff17 	ldw	r2,-4(fp)
   29f08:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
   29f0c:	e13fff17 	ldw	r4,-4(fp)
   29f10:	014003c4 	movi	r5,15
   29f14:	01800384 	movi	r6,14
   29f18:	01c00044 	movi	r7,1
   29f1c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29f20:	1007883a 	mov	r3,r2
   29f24:	e0bfff17 	ldw	r2,-4(fp)
   29f28:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
   29f2c:	e13fff17 	ldw	r4,-4(fp)
   29f30:	014003c4 	movi	r5,15
   29f34:	01800344 	movi	r6,13
   29f38:	01c00044 	movi	r7,1
   29f3c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29f40:	1007883a 	mov	r3,r2
   29f44:	e0bfff17 	ldw	r2,-4(fp)
   29f48:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
   29f4c:	e13fff17 	ldw	r4,-4(fp)
   29f50:	014003c4 	movi	r5,15
   29f54:	01800304 	movi	r6,12
   29f58:	01c00044 	movi	r7,1
   29f5c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29f60:	1007883a 	mov	r3,r2
   29f64:	e0bfff17 	ldw	r2,-4(fp)
   29f68:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
   29f6c:	e13fff17 	ldw	r4,-4(fp)
   29f70:	01400044 	movi	r5,1
   29f74:	018003c4 	movi	r6,15
   29f78:	01c00044 	movi	r7,1
   29f7c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29f80:	1007883a 	mov	r3,r2
   29f84:	e0bfff17 	ldw	r2,-4(fp)
   29f88:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
   29f8c:	e13fff17 	ldw	r4,-4(fp)
   29f90:	01400044 	movi	r5,1
   29f94:	01800384 	movi	r6,14
   29f98:	01c00044 	movi	r7,1
   29f9c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29fa0:	1007883a 	mov	r3,r2
   29fa4:	e0bfff17 	ldw	r2,-4(fp)
   29fa8:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
   29fac:	e13fff17 	ldw	r4,-4(fp)
   29fb0:	01400044 	movi	r5,1
   29fb4:	01800344 	movi	r6,13
   29fb8:	01c00044 	movi	r7,1
   29fbc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29fc0:	1007883a 	mov	r3,r2
   29fc4:	e0bfff17 	ldw	r2,-4(fp)
   29fc8:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
   29fcc:	e13fff17 	ldw	r4,-4(fp)
   29fd0:	01400044 	movi	r5,1
   29fd4:	01800284 	movi	r6,10
   29fd8:	01c00044 	movi	r7,1
   29fdc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   29fe0:	1007883a 	mov	r3,r2
   29fe4:	e0bfff17 	ldw	r2,-4(fp)
   29fe8:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
   29fec:	e13fff17 	ldw	r4,-4(fp)
   29ff0:	01400044 	movi	r5,1
   29ff4:	01800244 	movi	r6,9
   29ff8:	01c00044 	movi	r7,1
   29ffc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a000:	1007883a 	mov	r3,r2
   2a004:	e0bfff17 	ldw	r2,-4(fp)
   2a008:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
   2a00c:	e13fff17 	ldw	r4,-4(fp)
   2a010:	01400044 	movi	r5,1
   2a014:	01800304 	movi	r6,12
   2a018:	01c00044 	movi	r7,1
   2a01c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a020:	1007883a 	mov	r3,r2
   2a024:	e0bfff17 	ldw	r2,-4(fp)
   2a028:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
   2a02c:	e13fff17 	ldw	r4,-4(fp)
   2a030:	01400044 	movi	r5,1
   2a034:	018002c4 	movi	r6,11
   2a038:	01c00044 	movi	r7,1
   2a03c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a040:	1007883a 	mov	r3,r2
   2a044:	e0bfff17 	ldw	r2,-4(fp)
   2a048:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
   2a04c:	e13fff17 	ldw	r4,-4(fp)
   2a050:	01400284 	movi	r5,10
   2a054:	018002c4 	movi	r6,11
   2a058:	01c00044 	movi	r7,1
   2a05c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a060:	1007883a 	mov	r3,r2
   2a064:	e0bfff17 	ldw	r2,-4(fp)
   2a068:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
   2a06c:	e13fff17 	ldw	r4,-4(fp)
   2a070:	01400284 	movi	r5,10
   2a074:	01800284 	movi	r6,10
   2a078:	01c00044 	movi	r7,1
   2a07c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a080:	1007883a 	mov	r3,r2
   2a084:	e0bfff17 	ldw	r2,-4(fp)
   2a088:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
   2a08c:	e13fff17 	ldw	r4,-4(fp)
   2a090:	01400144 	movi	r5,5
   2a094:	01800244 	movi	r6,9
   2a098:	01c00044 	movi	r7,1
   2a09c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a0a0:	1007883a 	mov	r3,r2
   2a0a4:	e0bfff17 	ldw	r2,-4(fp)
   2a0a8:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
   2a0ac:	e13fff17 	ldw	r4,-4(fp)
   2a0b0:	01400144 	movi	r5,5
   2a0b4:	01800204 	movi	r6,8
   2a0b8:	01c00044 	movi	r7,1
   2a0bc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a0c0:	1007883a 	mov	r3,r2
   2a0c4:	e0bfff17 	ldw	r2,-4(fp)
   2a0c8:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
   2a0cc:	e13fff17 	ldw	r4,-4(fp)
   2a0d0:	01400144 	movi	r5,5
   2a0d4:	018001c4 	movi	r6,7
   2a0d8:	01c00044 	movi	r7,1
   2a0dc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a0e0:	1007883a 	mov	r3,r2
   2a0e4:	e0bfff17 	ldw	r2,-4(fp)
   2a0e8:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
   2a0ec:	e13fff17 	ldw	r4,-4(fp)
   2a0f0:	01400144 	movi	r5,5
   2a0f4:	01800184 	movi	r6,6
   2a0f8:	01c00044 	movi	r7,1
   2a0fc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a100:	1007883a 	mov	r3,r2
   2a104:	e0bfff17 	ldw	r2,-4(fp)
   2a108:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
   2a10c:	e13fff17 	ldw	r4,-4(fp)
   2a110:	01400144 	movi	r5,5
   2a114:	01800144 	movi	r6,5
   2a118:	01c00044 	movi	r7,1
   2a11c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a120:	1007883a 	mov	r3,r2
   2a124:	e0bfff17 	ldw	r2,-4(fp)
   2a128:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
   2a12c:	e0fffe47 	ldb	r3,-7(fp)
   2a130:	e0bffe07 	ldb	r2,-8(fp)
   2a134:	010000f4 	movhi	r4,3
   2a138:	21081004 	addi	r4,r4,8256
   2a13c:	180b883a 	mov	r5,r3
   2a140:	100d883a 	mov	r6,r2
   2a144:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
   2a148:	e0bfff17 	ldw	r2,-4(fp)
   2a14c:	10800043 	ldbu	r2,1(r2)
   2a150:	10803fcc 	andi	r2,r2,255
   2a154:	010000f4 	movhi	r4,3
   2a158:	21081b04 	addi	r4,r4,8300
   2a15c:	100b883a 	mov	r5,r2
   2a160:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
   2a164:	e0bfff17 	ldw	r2,-4(fp)
   2a168:	10800083 	ldbu	r2,2(r2)
   2a16c:	10803fcc 	andi	r2,r2,255
   2a170:	010000f4 	movhi	r4,3
   2a174:	21082504 	addi	r4,r4,8340
   2a178:	100b883a 	mov	r5,r2
   2a17c:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
   2a180:	e0bfff17 	ldw	r2,-4(fp)
   2a184:	108000c3 	ldbu	r2,3(r2)
   2a188:	10803fcc 	andi	r2,r2,255
   2a18c:	010000f4 	movhi	r4,3
   2a190:	21082f04 	addi	r4,r4,8380
   2a194:	100b883a 	mov	r5,r2
   2a198:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
   2a19c:	e0bfff17 	ldw	r2,-4(fp)
   2a1a0:	10800103 	ldbu	r2,4(r2)
   2a1a4:	10803fcc 	andi	r2,r2,255
   2a1a8:	010000f4 	movhi	r4,3
   2a1ac:	21083904 	addi	r4,r4,8420
   2a1b0:	100b883a 	mov	r5,r2
   2a1b4:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
   2a1b8:	e0bfff17 	ldw	r2,-4(fp)
   2a1bc:	10800143 	ldbu	r2,5(r2)
   2a1c0:	10803fcc 	andi	r2,r2,255
   2a1c4:	010000f4 	movhi	r4,3
   2a1c8:	21084304 	addi	r4,r4,8460
   2a1cc:	100b883a 	mov	r5,r2
   2a1d0:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
   2a1d4:	e0bfff17 	ldw	r2,-4(fp)
   2a1d8:	10800183 	ldbu	r2,6(r2)
   2a1dc:	10803fcc 	andi	r2,r2,255
   2a1e0:	010000f4 	movhi	r4,3
   2a1e4:	21084d04 	addi	r4,r4,8500
   2a1e8:	100b883a 	mov	r5,r2
   2a1ec:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
   2a1f0:	e0bfff17 	ldw	r2,-4(fp)
   2a1f4:	108001c3 	ldbu	r2,7(r2)
   2a1f8:	10803fcc 	andi	r2,r2,255
   2a1fc:	010000f4 	movhi	r4,3
   2a200:	21085704 	addi	r4,r4,8540
   2a204:	100b883a 	mov	r5,r2
   2a208:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
   2a20c:	e0bfff17 	ldw	r2,-4(fp)
   2a210:	10800203 	ldbu	r2,8(r2)
   2a214:	10803fcc 	andi	r2,r2,255
   2a218:	010000f4 	movhi	r4,3
   2a21c:	21086104 	addi	r4,r4,8580
   2a220:	100b883a 	mov	r5,r2
   2a224:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
   2a228:	e0bfff17 	ldw	r2,-4(fp)
   2a22c:	10800243 	ldbu	r2,9(r2)
   2a230:	10803fcc 	andi	r2,r2,255
   2a234:	010000f4 	movhi	r4,3
   2a238:	21086b04 	addi	r4,r4,8620
   2a23c:	100b883a 	mov	r5,r2
   2a240:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
   2a244:	e0bfff17 	ldw	r2,-4(fp)
   2a248:	10800283 	ldbu	r2,10(r2)
   2a24c:	10803fcc 	andi	r2,r2,255
   2a250:	010000f4 	movhi	r4,3
   2a254:	21087504 	addi	r4,r4,8660
   2a258:	100b883a 	mov	r5,r2
   2a25c:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
   2a260:	e0bfff17 	ldw	r2,-4(fp)
   2a264:	108002c3 	ldbu	r2,11(r2)
   2a268:	10803fcc 	andi	r2,r2,255
   2a26c:	010000f4 	movhi	r4,3
   2a270:	21087f04 	addi	r4,r4,8700
   2a274:	100b883a 	mov	r5,r2
   2a278:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "\n");
   2a27c:	010000f4 	movhi	r4,3
   2a280:	2106e504 	addi	r4,r4,7060
   2a284:	00265480 	call	26548 <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
   2a288:	e0fffe47 	ldb	r3,-7(fp)
   2a28c:	e0bffe07 	ldb	r2,-8(fp)
   2a290:	010000f4 	movhi	r4,3
   2a294:	21088904 	addi	r4,r4,8740
   2a298:	180b883a 	mov	r5,r3
   2a29c:	100d883a 	mov	r6,r2
   2a2a0:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
   2a2a4:	e0bfff17 	ldw	r2,-4(fp)
   2a2a8:	10800303 	ldbu	r2,12(r2)
   2a2ac:	10803fcc 	andi	r2,r2,255
   2a2b0:	010000f4 	movhi	r4,3
   2a2b4:	21082f04 	addi	r4,r4,8380
   2a2b8:	100b883a 	mov	r5,r2
   2a2bc:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
   2a2c0:	e0bfff17 	ldw	r2,-4(fp)
   2a2c4:	10800343 	ldbu	r2,13(r2)
   2a2c8:	10803fcc 	andi	r2,r2,255
   2a2cc:	010000f4 	movhi	r4,3
   2a2d0:	21083904 	addi	r4,r4,8420
   2a2d4:	100b883a 	mov	r5,r2
   2a2d8:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
   2a2dc:	e0bfff17 	ldw	r2,-4(fp)
   2a2e0:	10800383 	ldbu	r2,14(r2)
   2a2e4:	10803fcc 	andi	r2,r2,255
   2a2e8:	010000f4 	movhi	r4,3
   2a2ec:	21084304 	addi	r4,r4,8460
   2a2f0:	100b883a 	mov	r5,r2
   2a2f4:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
   2a2f8:	e0bfff17 	ldw	r2,-4(fp)
   2a2fc:	108003c3 	ldbu	r2,15(r2)
   2a300:	10803fcc 	andi	r2,r2,255
   2a304:	010000f4 	movhi	r4,3
   2a308:	21089604 	addi	r4,r4,8792
   2a30c:	100b883a 	mov	r5,r2
   2a310:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
   2a314:	e0bfff17 	ldw	r2,-4(fp)
   2a318:	10800403 	ldbu	r2,16(r2)
   2a31c:	10803fcc 	andi	r2,r2,255
   2a320:	010000f4 	movhi	r4,3
   2a324:	2108a004 	addi	r4,r4,8832
   2a328:	100b883a 	mov	r5,r2
   2a32c:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
   2a330:	e0bfff17 	ldw	r2,-4(fp)
   2a334:	10800443 	ldbu	r2,17(r2)
   2a338:	10803fcc 	andi	r2,r2,255
   2a33c:	010000f4 	movhi	r4,3
   2a340:	2108aa04 	addi	r4,r4,8872
   2a344:	100b883a 	mov	r5,r2
   2a348:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
   2a34c:	e0bfff17 	ldw	r2,-4(fp)
   2a350:	10800483 	ldbu	r2,18(r2)
   2a354:	10803fcc 	andi	r2,r2,255
   2a358:	010000f4 	movhi	r4,3
   2a35c:	2108b404 	addi	r4,r4,8912
   2a360:	100b883a 	mov	r5,r2
   2a364:	00265480 	call	26548 <no_printf>
    tse_dprintf(6, "\n");
   2a368:	010000f4 	movhi	r4,3
   2a36c:	2106e504 	addi	r4,r4,7060
   2a370:	00265480 	call	26548 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2a374:	e0bffe83 	ldbu	r2,-6(fp)
   2a378:	e13fff17 	ldw	r4,-4(fp)
   2a37c:	100b883a 	mov	r5,r2
   2a380:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
   2a384:	e0bffb17 	ldw	r2,-20(fp)
    
}
   2a388:	e037883a 	mov	sp,fp
   2a38c:	dfc00117 	ldw	ra,4(sp)
   2a390:	df000017 	ldw	fp,0(sp)
   2a394:	dec00204 	addi	sp,sp,8
   2a398:	f800283a 	ret

0002a39c <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
   2a39c:	defff804 	addi	sp,sp,-32
   2a3a0:	dfc00715 	stw	ra,28(sp)
   2a3a4:	df000615 	stw	fp,24(sp)
   2a3a8:	df000604 	addi	fp,sp,24
   2a3ac:	e13ffe15 	stw	r4,-8(fp)
   2a3b0:	2805883a 	mov	r2,r5
   2a3b4:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2a3b8:	e0bffe17 	ldw	r2,-8(fp)
   2a3bc:	10800617 	ldw	r2,24(r2)
   2a3c0:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2a3c4:	e0bffb17 	ldw	r2,-20(fp)
   2a3c8:	10800317 	ldw	r2,12(r2)
   2a3cc:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2a3d0:	e13ffb17 	ldw	r4,-20(fp)
   2a3d4:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   2a3d8:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2a3dc:	e13ffc17 	ldw	r4,-16(fp)
   2a3e0:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   2a3e4:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2a3e8:	e13ffe17 	ldw	r4,-8(fp)
   2a3ec:	00284680 	call	28468 <alt_tse_phy_rd_mdio_addr>
   2a3f0:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2a3f4:	e0bffe17 	ldw	r2,-8(fp)
   2a3f8:	10800003 	ldbu	r2,0(r2)
   2a3fc:	10803fcc 	andi	r2,r2,255
   2a400:	e13ffe17 	ldw	r4,-8(fp)
   2a404:	100b883a 	mov	r5,r2
   2a408:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
   2a40c:	e0bfff03 	ldbu	r2,-4(fp)
   2a410:	10002b26 	beq	r2,zero,2a4c0 <alt_tse_phy_set_adv_1000+0x124>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
   2a414:	e13ffe17 	ldw	r4,-8(fp)
   2a418:	014003c4 	movi	r5,15
   2a41c:	01800344 	movi	r6,13
   2a420:	01c00044 	movi	r7,1
   2a424:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a428:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
   2a42c:	e0bffdc3 	ldbu	r2,-9(fp)
   2a430:	d8800015 	stw	r2,0(sp)
   2a434:	e13ffe17 	ldw	r4,-8(fp)
   2a438:	01400244 	movi	r5,9
   2a43c:	01800244 	movi	r6,9
   2a440:	01c00044 	movi	r7,1
   2a444:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2a448:	e17ffd47 	ldb	r5,-11(fp)
   2a44c:	e0fffd07 	ldb	r3,-12(fp)
   2a450:	e0bffdc3 	ldbu	r2,-9(fp)
   2a454:	010000f4 	movhi	r4,3
   2a458:	2108be04 	addi	r4,r4,8952
   2a45c:	180d883a 	mov	r6,r3
   2a460:	100f883a 	mov	r7,r2
   2a464:	00265480 	call	26548 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
   2a468:	e13ffe17 	ldw	r4,-8(fp)
   2a46c:	014003c4 	movi	r5,15
   2a470:	01800304 	movi	r6,12
   2a474:	01c00044 	movi	r7,1
   2a478:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a47c:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
   2a480:	e0bffdc3 	ldbu	r2,-9(fp)
   2a484:	d8800015 	stw	r2,0(sp)
   2a488:	e13ffe17 	ldw	r4,-8(fp)
   2a48c:	01400244 	movi	r5,9
   2a490:	01800204 	movi	r6,8
   2a494:	01c00044 	movi	r7,1
   2a498:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2a49c:	e17ffd47 	ldb	r5,-11(fp)
   2a4a0:	e0fffd07 	ldb	r3,-12(fp)
   2a4a4:	e0bffdc3 	ldbu	r2,-9(fp)
   2a4a8:	010000f4 	movhi	r4,3
   2a4ac:	2108d104 	addi	r4,r4,9028
   2a4b0:	180d883a 	mov	r6,r3
   2a4b4:	100f883a 	mov	r7,r2
   2a4b8:	00265480 	call	26548 <no_printf>
   2a4bc:	00001c06 	br	2a530 <alt_tse_phy_set_adv_1000+0x194>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
   2a4c0:	d8000015 	stw	zero,0(sp)
   2a4c4:	e13ffe17 	ldw	r4,-8(fp)
   2a4c8:	01400244 	movi	r5,9
   2a4cc:	01800244 	movi	r6,9
   2a4d0:	01c00044 	movi	r7,1
   2a4d4:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2a4d8:	e0fffd47 	ldb	r3,-11(fp)
   2a4dc:	e0bffd07 	ldb	r2,-12(fp)
   2a4e0:	010000f4 	movhi	r4,3
   2a4e4:	2108be04 	addi	r4,r4,8952
   2a4e8:	180b883a 	mov	r5,r3
   2a4ec:	100d883a 	mov	r6,r2
   2a4f0:	000f883a 	mov	r7,zero
   2a4f4:	00265480 	call	26548 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
   2a4f8:	d8000015 	stw	zero,0(sp)
   2a4fc:	e13ffe17 	ldw	r4,-8(fp)
   2a500:	01400244 	movi	r5,9
   2a504:	01800204 	movi	r6,8
   2a508:	01c00044 	movi	r7,1
   2a50c:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2a510:	e0fffd47 	ldb	r3,-11(fp)
   2a514:	e0bffd07 	ldb	r2,-12(fp)
   2a518:	010000f4 	movhi	r4,3
   2a51c:	2108e404 	addi	r4,r4,9104
   2a520:	180b883a 	mov	r5,r3
   2a524:	100d883a 	mov	r6,r2
   2a528:	000f883a 	mov	r7,zero
   2a52c:	00265480 	call	26548 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
   2a530:	e0bffd83 	ldbu	r2,-10(fp)
   2a534:	e13ffe17 	ldw	r4,-8(fp)
   2a538:	100b883a 	mov	r5,r2
   2a53c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
   2a540:	0005883a 	mov	r2,zero
}
   2a544:	e037883a 	mov	sp,fp
   2a548:	dfc00117 	ldw	ra,4(sp)
   2a54c:	df000017 	ldw	fp,0(sp)
   2a550:	dec00204 	addi	sp,sp,8
   2a554:	f800283a 	ret

0002a558 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
   2a558:	defff804 	addi	sp,sp,-32
   2a55c:	dfc00715 	stw	ra,28(sp)
   2a560:	df000615 	stw	fp,24(sp)
   2a564:	df000604 	addi	fp,sp,24
   2a568:	e13ffe15 	stw	r4,-8(fp)
   2a56c:	2805883a 	mov	r2,r5
   2a570:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2a574:	e0bffe17 	ldw	r2,-8(fp)
   2a578:	10800617 	ldw	r2,24(r2)
   2a57c:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2a580:	e0bffb17 	ldw	r2,-20(fp)
   2a584:	10800317 	ldw	r2,12(r2)
   2a588:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2a58c:	e13ffb17 	ldw	r4,-20(fp)
   2a590:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   2a594:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2a598:	e13ffc17 	ldw	r4,-16(fp)
   2a59c:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   2a5a0:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2a5a4:	e13ffe17 	ldw	r4,-8(fp)
   2a5a8:	00284680 	call	28468 <alt_tse_phy_rd_mdio_addr>
   2a5ac:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2a5b0:	e0bffe17 	ldw	r2,-8(fp)
   2a5b4:	10800003 	ldbu	r2,0(r2)
   2a5b8:	10803fcc 	andi	r2,r2,255
   2a5bc:	e13ffe17 	ldw	r4,-8(fp)
   2a5c0:	100b883a 	mov	r5,r2
   2a5c4:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
   2a5c8:	e0bfff03 	ldbu	r2,-4(fp)
   2a5cc:	10004026 	beq	r2,zero,2a6d0 <alt_tse_phy_set_adv_100+0x178>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
   2a5d0:	e13ffe17 	ldw	r4,-8(fp)
   2a5d4:	01400044 	movi	r5,1
   2a5d8:	018003c4 	movi	r6,15
   2a5dc:	01c00044 	movi	r7,1
   2a5e0:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a5e4:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
   2a5e8:	e0bffdc3 	ldbu	r2,-9(fp)
   2a5ec:	d8800015 	stw	r2,0(sp)
   2a5f0:	e13ffe17 	ldw	r4,-8(fp)
   2a5f4:	01400104 	movi	r5,4
   2a5f8:	01800244 	movi	r6,9
   2a5fc:	01c00044 	movi	r7,1
   2a600:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
   2a604:	e17ffd47 	ldb	r5,-11(fp)
   2a608:	e0fffd07 	ldb	r3,-12(fp)
   2a60c:	e0bffdc3 	ldbu	r2,-9(fp)
   2a610:	010000f4 	movhi	r4,3
   2a614:	2108f604 	addi	r4,r4,9176
   2a618:	180d883a 	mov	r6,r3
   2a61c:	100f883a 	mov	r7,r2
   2a620:	00265480 	call	26548 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
   2a624:	e13ffe17 	ldw	r4,-8(fp)
   2a628:	01400044 	movi	r5,1
   2a62c:	01800384 	movi	r6,14
   2a630:	01c00044 	movi	r7,1
   2a634:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a638:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
   2a63c:	e0bffdc3 	ldbu	r2,-9(fp)
   2a640:	d8800015 	stw	r2,0(sp)
   2a644:	e13ffe17 	ldw	r4,-8(fp)
   2a648:	01400104 	movi	r5,4
   2a64c:	01800204 	movi	r6,8
   2a650:	01c00044 	movi	r7,1
   2a654:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2a658:	e17ffd47 	ldb	r5,-11(fp)
   2a65c:	e0fffd07 	ldb	r3,-12(fp)
   2a660:	e0bffdc3 	ldbu	r2,-9(fp)
   2a664:	010000f4 	movhi	r4,3
   2a668:	21090604 	addi	r4,r4,9240
   2a66c:	180d883a 	mov	r6,r3
   2a670:	100f883a 	mov	r7,r2
   2a674:	00265480 	call	26548 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
   2a678:	e13ffe17 	ldw	r4,-8(fp)
   2a67c:	01400044 	movi	r5,1
   2a680:	01800344 	movi	r6,13
   2a684:	01c00044 	movi	r7,1
   2a688:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a68c:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
   2a690:	e0bffdc3 	ldbu	r2,-9(fp)
   2a694:	d8800015 	stw	r2,0(sp)
   2a698:	e13ffe17 	ldw	r4,-8(fp)
   2a69c:	01400104 	movi	r5,4
   2a6a0:	018001c4 	movi	r6,7
   2a6a4:	01c00044 	movi	r7,1
   2a6a8:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2a6ac:	e17ffd47 	ldb	r5,-11(fp)
   2a6b0:	e0fffd07 	ldb	r3,-12(fp)
   2a6b4:	e0bffdc3 	ldbu	r2,-9(fp)
   2a6b8:	010000f4 	movhi	r4,3
   2a6bc:	21091904 	addi	r4,r4,9316
   2a6c0:	180d883a 	mov	r6,r3
   2a6c4:	100f883a 	mov	r7,r2
   2a6c8:	00265480 	call	26548 <no_printf>
   2a6cc:	00002a06 	br	2a778 <alt_tse_phy_set_adv_100+0x220>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
   2a6d0:	d8000015 	stw	zero,0(sp)
   2a6d4:	e13ffe17 	ldw	r4,-8(fp)
   2a6d8:	01400104 	movi	r5,4
   2a6dc:	01800244 	movi	r6,9
   2a6e0:	01c00044 	movi	r7,1
   2a6e4:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
   2a6e8:	e0fffd47 	ldb	r3,-11(fp)
   2a6ec:	e0bffd07 	ldb	r2,-12(fp)
   2a6f0:	010000f4 	movhi	r4,3
   2a6f4:	2108f604 	addi	r4,r4,9176
   2a6f8:	180b883a 	mov	r5,r3
   2a6fc:	100d883a 	mov	r6,r2
   2a700:	000f883a 	mov	r7,zero
   2a704:	00265480 	call	26548 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
   2a708:	d8000015 	stw	zero,0(sp)
   2a70c:	e13ffe17 	ldw	r4,-8(fp)
   2a710:	01400104 	movi	r5,4
   2a714:	01800204 	movi	r6,8
   2a718:	01c00044 	movi	r7,1
   2a71c:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2a720:	e0fffd47 	ldb	r3,-11(fp)
   2a724:	e0bffd07 	ldb	r2,-12(fp)
   2a728:	010000f4 	movhi	r4,3
   2a72c:	21090604 	addi	r4,r4,9240
   2a730:	180b883a 	mov	r5,r3
   2a734:	100d883a 	mov	r6,r2
   2a738:	000f883a 	mov	r7,zero
   2a73c:	00265480 	call	26548 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
   2a740:	d8000015 	stw	zero,0(sp)
   2a744:	e13ffe17 	ldw	r4,-8(fp)
   2a748:	01400104 	movi	r5,4
   2a74c:	018001c4 	movi	r6,7
   2a750:	01c00044 	movi	r7,1
   2a754:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2a758:	e0fffd47 	ldb	r3,-11(fp)
   2a75c:	e0bffd07 	ldb	r2,-12(fp)
   2a760:	010000f4 	movhi	r4,3
   2a764:	21091904 	addi	r4,r4,9316
   2a768:	180b883a 	mov	r5,r3
   2a76c:	100d883a 	mov	r6,r2
   2a770:	000f883a 	mov	r7,zero
   2a774:	00265480 	call	26548 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
   2a778:	e0bffd83 	ldbu	r2,-10(fp)
   2a77c:	e13ffe17 	ldw	r4,-8(fp)
   2a780:	100b883a 	mov	r5,r2
   2a784:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
   2a788:	0005883a 	mov	r2,zero
}
   2a78c:	e037883a 	mov	sp,fp
   2a790:	dfc00117 	ldw	ra,4(sp)
   2a794:	df000017 	ldw	fp,0(sp)
   2a798:	dec00204 	addi	sp,sp,8
   2a79c:	f800283a 	ret

0002a7a0 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
   2a7a0:	defff504 	addi	sp,sp,-44
   2a7a4:	dfc00a15 	stw	ra,40(sp)
   2a7a8:	df000915 	stw	fp,36(sp)
   2a7ac:	df000904 	addi	fp,sp,36
   2a7b0:	e13ffe15 	stw	r4,-8(fp)
   2a7b4:	2805883a 	mov	r2,r5
   2a7b8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
   2a7bc:	e0bffe17 	ldw	r2,-8(fp)
   2a7c0:	10800617 	ldw	r2,24(r2)
   2a7c4:	e0bff815 	stw	r2,-32(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
   2a7c8:	e0bff817 	ldw	r2,-32(fp)
   2a7cc:	10800317 	ldw	r2,12(r2)
   2a7d0:	e0bff915 	stw	r2,-28(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2a7d4:	e13ff817 	ldw	r4,-32(fp)
   2a7d8:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   2a7dc:	e0bffa15 	stw	r2,-24(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2a7e0:	e13ff917 	ldw	r4,-28(fp)
   2a7e4:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   2a7e8:	e0bffb15 	stw	r2,-20(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
   2a7ec:	e13ffe17 	ldw	r4,-8(fp)
   2a7f0:	00284680 	call	28468 <alt_tse_phy_rd_mdio_addr>
   2a7f4:	e0bffc15 	stw	r2,-16(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2a7f8:	e0bffe17 	ldw	r2,-8(fp)
   2a7fc:	10800003 	ldbu	r2,0(r2)
   2a800:	10803fcc 	andi	r2,r2,255
   2a804:	e13ffe17 	ldw	r4,-8(fp)
   2a808:	100b883a 	mov	r5,r2
   2a80c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
   2a810:	e0bfff03 	ldbu	r2,-4(fp)
   2a814:	10002926 	beq	r2,zero,2a8bc <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
   2a818:	e13ffe17 	ldw	r4,-8(fp)
   2a81c:	01400044 	movi	r5,1
   2a820:	01800304 	movi	r6,12
   2a824:	01c00044 	movi	r7,1
   2a828:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a82c:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
   2a830:	e0bffd03 	ldbu	r2,-12(fp)
   2a834:	d8800015 	stw	r2,0(sp)
   2a838:	e13ffe17 	ldw	r4,-8(fp)
   2a83c:	01400104 	movi	r5,4
   2a840:	01800184 	movi	r6,6
   2a844:	01c00044 	movi	r7,1
   2a848:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2a84c:	e0bffd03 	ldbu	r2,-12(fp)
   2a850:	010000f4 	movhi	r4,3
   2a854:	21092c04 	addi	r4,r4,9392
   2a858:	e17ffb17 	ldw	r5,-20(fp)
   2a85c:	e1bffa17 	ldw	r6,-24(fp)
   2a860:	100f883a 	mov	r7,r2
   2a864:	00265480 	call	26548 <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
   2a868:	e13ffe17 	ldw	r4,-8(fp)
   2a86c:	01400044 	movi	r5,1
   2a870:	018002c4 	movi	r6,11
   2a874:	01c00044 	movi	r7,1
   2a878:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2a87c:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
   2a880:	e0bffd03 	ldbu	r2,-12(fp)
   2a884:	d8800015 	stw	r2,0(sp)
   2a888:	e13ffe17 	ldw	r4,-8(fp)
   2a88c:	01400104 	movi	r5,4
   2a890:	01800144 	movi	r6,5
   2a894:	01c00044 	movi	r7,1
   2a898:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
   2a89c:	e0bffd03 	ldbu	r2,-12(fp)
   2a8a0:	010000f4 	movhi	r4,3
   2a8a4:	21093f04 	addi	r4,r4,9468
   2a8a8:	e17ffb17 	ldw	r5,-20(fp)
   2a8ac:	e1bffa17 	ldw	r6,-24(fp)
   2a8b0:	100f883a 	mov	r7,r2
   2a8b4:	00265480 	call	26548 <no_printf>
   2a8b8:	00001806 	br	2a91c <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
   2a8bc:	d8000015 	stw	zero,0(sp)
   2a8c0:	e13ffe17 	ldw	r4,-8(fp)
   2a8c4:	01400104 	movi	r5,4
   2a8c8:	01800184 	movi	r6,6
   2a8cc:	01c00044 	movi	r7,1
   2a8d0:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2a8d4:	010000f4 	movhi	r4,3
   2a8d8:	21092c04 	addi	r4,r4,9392
   2a8dc:	e17ffb17 	ldw	r5,-20(fp)
   2a8e0:	e1bffa17 	ldw	r6,-24(fp)
   2a8e4:	000f883a 	mov	r7,zero
   2a8e8:	00265480 	call	26548 <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
   2a8ec:	d8000015 	stw	zero,0(sp)
   2a8f0:	e13ffe17 	ldw	r4,-8(fp)
   2a8f4:	01400104 	movi	r5,4
   2a8f8:	01800144 	movi	r6,5
   2a8fc:	01c00044 	movi	r7,1
   2a900:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
   2a904:	010000f4 	movhi	r4,3
   2a908:	21093f04 	addi	r4,r4,9468
   2a90c:	e17ffb17 	ldw	r5,-20(fp)
   2a910:	e1bffa17 	ldw	r6,-24(fp)
   2a914:	000f883a 	mov	r7,zero
   2a918:	00265480 	call	26548 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
   2a91c:	e0bffc17 	ldw	r2,-16(fp)
   2a920:	10803fcc 	andi	r2,r2,255
   2a924:	e13ffe17 	ldw	r4,-8(fp)
   2a928:	100b883a 	mov	r5,r2
   2a92c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
   2a930:	0005883a 	mov	r2,zero
}
   2a934:	e037883a 	mov	sp,fp
   2a938:	dfc00117 	ldw	ra,4(sp)
   2a93c:	df000017 	ldw	fp,0(sp)
   2a940:	dec00204 	addi	sp,sp,8
   2a944:	f800283a 	ret

0002a948 <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
   2a948:	defff604 	addi	sp,sp,-40
   2a94c:	dfc00915 	stw	ra,36(sp)
   2a950:	df000815 	stw	fp,32(sp)
   2a954:	df000804 	addi	fp,sp,32
   2a958:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 i;
	alt_u8 common_1000 = 1;
   2a95c:	00800044 	movi	r2,1
   2a960:	e0bff905 	stb	r2,-28(fp)
	alt_u8 common_100 = 1;
   2a964:	00800044 	movi	r2,1
   2a968:	e0bff945 	stb	r2,-27(fp)
	alt_u8 common_10 = 1;
   2a96c:	00800044 	movi	r2,1
   2a970:	e0bff985 	stb	r2,-26(fp)
    
	alt_32 common_speed;
    
	alt_u8 none_an_complete = 1;
   2a974:	00800044 	movi	r2,1
   2a978:	e0bffb05 	stb	r2,-20(fp)
    
    alt_tse_mac_info *pmac_info = 0;
   2a97c:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_phy_info *pphy = 0;
   2a980:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2a984:	e13fff17 	ldw	r4,-4(fp)
   2a988:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   2a98c:	e0bffe05 	stb	r2,-8(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
   2a990:	e03ff815 	stw	zero,-32(fp)
   2a994:	00001c06 	br	2aa08 <alt_tse_phy_get_common_speed+0xc0>
        pmac_info = pmac_group->pmac_info[i];
   2a998:	e0ffff17 	ldw	r3,-4(fp)
   2a99c:	e0bff817 	ldw	r2,-32(fp)
   2a9a0:	10800044 	addi	r2,r2,1
   2a9a4:	1085883a 	add	r2,r2,r2
   2a9a8:	1085883a 	add	r2,r2,r2
   2a9ac:	1885883a 	add	r2,r3,r2
   2a9b0:	10800017 	ldw	r2,0(r2)
   2a9b4:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
   2a9b8:	e0bffc17 	ldw	r2,-16(fp)
   2a9bc:	10800117 	ldw	r2,4(r2)
   2a9c0:	e0bffd15 	stw	r2,-12(fp)
        
        /* run only if PHY connected */
        if(pphy) {
   2a9c4:	e0bffd17 	ldw	r2,-12(fp)
   2a9c8:	10000926 	beq	r2,zero,2a9f0 <alt_tse_phy_get_common_speed+0xa8>
            alt_tse_phy_set_adv_1000(pphy, 1);
   2a9cc:	e13ffd17 	ldw	r4,-12(fp)
   2a9d0:	01400044 	movi	r5,1
   2a9d4:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
   2a9d8:	e13ffd17 	ldw	r4,-12(fp)
   2a9dc:	01400044 	movi	r5,1
   2a9e0:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2a9e4:	e13ffd17 	ldw	r4,-12(fp)
   2a9e8:	01400044 	movi	r5,1
   2a9ec:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
   2a9f0:	010000f4 	movhi	r4,3
   2a9f4:	2106e504 	addi	r4,r4,7060
   2a9f8:	00265480 	call	26548 <no_printf>
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
   2a9fc:	e0bff817 	ldw	r2,-32(fp)
   2aa00:	10800044 	addi	r2,r2,1
   2aa04:	e0bff815 	stw	r2,-32(fp)
   2aa08:	e0bfff17 	ldw	r2,-4(fp)
   2aa0c:	10800003 	ldbu	r2,0(r2)
   2aa10:	10803fcc 	andi	r2,r2,255
   2aa14:	e0fff817 	ldw	r3,-32(fp)
   2aa18:	18bfdf16 	blt	r3,r2,2a998 <alt_tse_phy_get_common_speed+0x50>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
   2aa1c:	e03ff815 	stw	zero,-32(fp)
   2aa20:	00005606 	br	2ab7c <alt_tse_phy_get_common_speed+0x234>

        pmac_info = pmac_group->pmac_info[i];
   2aa24:	e0ffff17 	ldw	r3,-4(fp)
   2aa28:	e0bff817 	ldw	r2,-32(fp)
   2aa2c:	10800044 	addi	r2,r2,1
   2aa30:	1085883a 	add	r2,r2,r2
   2aa34:	1085883a 	add	r2,r2,r2
   2aa38:	1885883a 	add	r2,r3,r2
   2aa3c:	10800017 	ldw	r2,0(r2)
   2aa40:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
   2aa44:	e0bffc17 	ldw	r2,-16(fp)
   2aa48:	10800117 	ldw	r2,4(r2)
   2aa4c:	e0bffd15 	stw	r2,-12(fp)
        
        /* if no PHY connected */
        if(!pphy) {
   2aa50:	e0bffd17 	ldw	r2,-12(fp)
   2aa54:	10004326 	beq	r2,zero,2ab64 <alt_tse_phy_get_common_speed+0x21c>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
   2aa58:	e13ffd17 	ldw	r4,-12(fp)
   2aa5c:	0029e040 	call	29e04 <alt_tse_phy_get_cap>
   2aa60:	1000421e 	bne	r2,zero,2ab6c <alt_tse_phy_get_common_speed+0x224>
            continue;
        }
        
        none_an_complete = 0;
   2aa64:	e03ffb05 	stb	zero,-20(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
   2aa68:	e0bffc17 	ldw	r2,-16(fp)
   2aa6c:	10800003 	ldbu	r2,0(r2)
   2aa70:	10803fcc 	andi	r2,r2,255
   2aa74:	10800058 	cmpnei	r2,r2,1
   2aa78:	1000021e 	bne	r2,zero,2aa84 <alt_tse_phy_get_common_speed+0x13c>
            common_1000 = 0;
   2aa7c:	e03ff905 	stb	zero,-28(fp)
   2aa80:	00000706 	br	2aaa0 <alt_tse_phy_get_common_speed+0x158>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
   2aa84:	e0bffc17 	ldw	r2,-16(fp)
   2aa88:	10800003 	ldbu	r2,0(r2)
   2aa8c:	10803fcc 	andi	r2,r2,255
   2aa90:	10800098 	cmpnei	r2,r2,2
   2aa94:	1000021e 	bne	r2,zero,2aaa0 <alt_tse_phy_get_common_speed+0x158>
            common_100 = 0;
   2aa98:	e03ff945 	stb	zero,-27(fp)
            common_10 = 0;            
   2aa9c:	e03ff985 	stb	zero,-26(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
   2aaa0:	e0bffd17 	ldw	r2,-12(fp)
   2aaa4:	10c000c3 	ldbu	r3,3(r2)
   2aaa8:	e0bffd17 	ldw	r2,-12(fp)
   2aaac:	10800303 	ldbu	r2,12(r2)
   2aab0:	1884703a 	and	r2,r3,r2
   2aab4:	1007883a 	mov	r3,r2
   2aab8:	e0bff903 	ldbu	r2,-28(fp)
   2aabc:	1884703a 	and	r2,r3,r2
   2aac0:	e0bff905 	stb	r2,-28(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
   2aac4:	e0bffd17 	ldw	r2,-12(fp)
   2aac8:	10c00183 	ldbu	r3,6(r2)
   2aacc:	e0bffd17 	ldw	r2,-12(fp)
   2aad0:	108003c3 	ldbu	r2,15(r2)
   2aad4:	1884703a 	and	r2,r3,r2
   2aad8:	1007883a 	mov	r3,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
   2aadc:	e0bffd17 	ldw	r2,-12(fp)
   2aae0:	110001c3 	ldbu	r4,7(r2)
   2aae4:	e0bffd17 	ldw	r2,-12(fp)
   2aae8:	10800403 	ldbu	r2,16(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
   2aaec:	2084703a 	and	r2,r4,r2
   2aaf0:	1884b03a 	or	r2,r3,r2
   2aaf4:	1007883a 	mov	r3,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
   2aaf8:	e0bffd17 	ldw	r2,-12(fp)
   2aafc:	11000143 	ldbu	r4,5(r2)
   2ab00:	e0bffd17 	ldw	r2,-12(fp)
   2ab04:	10800383 	ldbu	r2,14(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
   2ab08:	2084703a 	and	r2,r4,r2
   2ab0c:	1884b03a 	or	r2,r3,r2
   2ab10:	1007883a 	mov	r3,r2
   2ab14:	e0bff943 	ldbu	r2,-27(fp)
   2ab18:	1884703a 	and	r2,r3,r2
   2ab1c:	e0bff945 	stb	r2,-27(fp)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
   2ab20:	e0bffd17 	ldw	r2,-12(fp)
   2ab24:	10c00283 	ldbu	r3,10(r2)
   2ab28:	e0bffd17 	ldw	r2,-12(fp)
   2ab2c:	10800443 	ldbu	r2,17(r2)
   2ab30:	1884703a 	and	r2,r3,r2
   2ab34:	1007883a 	mov	r3,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
   2ab38:	e0bffd17 	ldw	r2,-12(fp)
   2ab3c:	110002c3 	ldbu	r4,11(r2)
   2ab40:	e0bffd17 	ldw	r2,-12(fp)
   2ab44:	10800483 	ldbu	r2,18(r2)
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
   2ab48:	2084703a 	and	r2,r4,r2
   2ab4c:	1884b03a 	or	r2,r3,r2
   2ab50:	1007883a 	mov	r3,r2
   2ab54:	e0bff983 	ldbu	r2,-26(fp)
   2ab58:	1884703a 	and	r2,r3,r2
   2ab5c:	e0bff985 	stb	r2,-26(fp)
   2ab60:	00000306 	br	2ab70 <alt_tse_phy_get_common_speed+0x228>
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
   2ab64:	0001883a 	nop
   2ab68:	00000106 	br	2ab70 <alt_tse_phy_get_common_speed+0x228>
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
            continue;
   2ab6c:	0001883a 	nop
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
   2ab70:	e0bff817 	ldw	r2,-32(fp)
   2ab74:	10800044 	addi	r2,r2,1
   2ab78:	e0bff815 	stw	r2,-32(fp)
   2ab7c:	e0bfff17 	ldw	r2,-4(fp)
   2ab80:	10800003 	ldbu	r2,0(r2)
   2ab84:	10803fcc 	andi	r2,r2,255
   2ab88:	e0fff817 	ldw	r3,-32(fp)
   2ab8c:	18bfa516 	blt	r3,r2,2aa24 <alt_tse_phy_get_common_speed+0xdc>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
   2ab90:	e0bffb03 	ldbu	r2,-20(fp)
   2ab94:	10800058 	cmpnei	r2,r2,1
   2ab98:	1000081e 	bne	r2,zero,2abbc <alt_tse_phy_get_common_speed+0x274>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
   2ab9c:	00bfffc4 	movi	r2,-1
   2aba0:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
   2aba4:	e0bffe07 	ldb	r2,-8(fp)
   2aba8:	010000f4 	movhi	r4,3
   2abac:	21095204 	addi	r4,r4,9544
   2abb0:	100b883a 	mov	r5,r2
   2abb4:	0017c440 	call	17c44 <printf>
   2abb8:	00002706 	br	2ac58 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_1000) {
   2abbc:	e0bff903 	ldbu	r2,-28(fp)
   2abc0:	10000926 	beq	r2,zero,2abe8 <alt_tse_phy_get_common_speed+0x2a0>
        common_speed = TSE_PHY_SPEED_1000;
   2abc4:	00800084 	movi	r2,2
   2abc8:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
   2abcc:	e0bffe07 	ldb	r2,-8(fp)
   2abd0:	010000f4 	movhi	r4,3
   2abd4:	21096404 	addi	r4,r4,9616
   2abd8:	100b883a 	mov	r5,r2
   2abdc:	0180fa04 	movi	r6,1000
   2abe0:	0017c440 	call	17c44 <printf>
   2abe4:	00001c06 	br	2ac58 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_100) {
   2abe8:	e0bff943 	ldbu	r2,-27(fp)
   2abec:	10000926 	beq	r2,zero,2ac14 <alt_tse_phy_get_common_speed+0x2cc>
        common_speed = TSE_PHY_SPEED_100;
   2abf0:	00800044 	movi	r2,1
   2abf4:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
   2abf8:	e0bffe07 	ldb	r2,-8(fp)
   2abfc:	010000f4 	movhi	r4,3
   2ac00:	21096404 	addi	r4,r4,9616
   2ac04:	100b883a 	mov	r5,r2
   2ac08:	01801904 	movi	r6,100
   2ac0c:	0017c440 	call	17c44 <printf>
   2ac10:	00001106 	br	2ac58 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_10) {
   2ac14:	e0bff983 	ldbu	r2,-26(fp)
   2ac18:	10000826 	beq	r2,zero,2ac3c <alt_tse_phy_get_common_speed+0x2f4>
        common_speed = TSE_PHY_SPEED_10;
   2ac1c:	e03ffa15 	stw	zero,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
   2ac20:	e0bffe07 	ldb	r2,-8(fp)
   2ac24:	010000f4 	movhi	r4,3
   2ac28:	21096404 	addi	r4,r4,9616
   2ac2c:	100b883a 	mov	r5,r2
   2ac30:	01800284 	movi	r6,10
   2ac34:	0017c440 	call	17c44 <printf>
   2ac38:	00000706 	br	2ac58 <alt_tse_phy_get_common_speed+0x310>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
   2ac3c:	00bfffc4 	movi	r2,-1
   2ac40:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
   2ac44:	e0bffe07 	ldb	r2,-8(fp)
   2ac48:	010000f4 	movhi	r4,3
   2ac4c:	21097104 	addi	r4,r4,9668
   2ac50:	100b883a 	mov	r5,r2
   2ac54:	0017c440 	call	17c44 <printf>

    return common_speed;
   2ac58:	e0bffa17 	ldw	r2,-24(fp)
}
   2ac5c:	e037883a 	mov	sp,fp
   2ac60:	dfc00117 	ldw	ra,4(sp)
   2ac64:	df000017 	ldw	fp,0(sp)
   2ac68:	dec00204 	addi	sp,sp,8
   2ac6c:	f800283a 	ret

0002ac70 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
   2ac70:	defff004 	addi	sp,sp,-64
   2ac74:	dfc00f15 	stw	ra,60(sp)
   2ac78:	df000e15 	stw	fp,56(sp)
   2ac7c:	dc400d15 	stw	r17,52(sp)
   2ac80:	dc000c15 	stw	r16,48(sp)
   2ac84:	df000c04 	addi	fp,sp,48
   2ac88:	e13ffe15 	stw	r4,-8(fp)
   2ac8c:	e17fff15 	stw	r5,-4(fp)
	alt_u8 speed;
	alt_u8 duplex;
    
	alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
   2ac90:	e03ff715 	stw	zero,-36(fp)
    alt_tse_mac_info *pmac_info = 0;
   2ac94:	e03ff815 	stw	zero,-32(fp)
    alt_tse_system_info *psys = 0;
   2ac98:	e03ff915 	stw	zero,-28(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
   2ac9c:	e03ffa05 	stb	zero,-24(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
   2aca0:	e13ffe17 	ldw	r4,-8(fp)
   2aca4:	00276bc0 	call	276bc <alt_tse_get_mac_group_index>
   2aca8:	e0bffa45 	stb	r2,-23(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
   2acac:	e0bffe17 	ldw	r2,-8(fp)
   2acb0:	10800117 	ldw	r2,4(r2)
   2acb4:	10800217 	ldw	r2,8(r2)
   2acb8:	10800017 	ldw	r2,0(r2)
   2acbc:	e0bffb15 	stw	r2,-20(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
   2acc0:	e0bffb17 	ldw	r2,-20(fp)
   2acc4:	10801004 	addi	r2,r2,64
   2acc8:	10800037 	ldwio	r2,0(r2)
   2accc:	e0bffc15 	stw	r2,-16(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
   2acd0:	e0bfff17 	ldw	r2,-4(fp)
   2acd4:	10000316 	blt	r2,zero,2ace4 <alt_tse_phy_set_common_speed+0x74>
   2acd8:	e0bfff17 	ldw	r2,-4(fp)
   2acdc:	108000d0 	cmplti	r2,r2,3
   2ace0:	10000c1e 	bne	r2,zero,2ad14 <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
   2ace4:	e0bffa47 	ldb	r2,-23(fp)
   2ace8:	010000f4 	movhi	r4,3
   2acec:	21097e04 	addi	r4,r4,9720
   2acf0:	100b883a 	mov	r5,r2
   2acf4:	e1bfff17 	ldw	r6,-4(fp)
   2acf8:	0017c440 	call	17c44 <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2acfc:	e0bffb17 	ldw	r2,-20(fp)
   2ad00:	10801004 	addi	r2,r2,64
   2ad04:	e0fffc17 	ldw	r3,-16(fp)
   2ad08:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
   2ad0c:	00bfffc4 	movi	r2,-1
   2ad10:	0000fe06 	br	2b10c <alt_tse_phy_set_common_speed+0x49c>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
   2ad14:	e03ff515 	stw	zero,-44(fp)
   2ad18:	0000dc06 	br	2b08c <alt_tse_phy_set_common_speed+0x41c>
        pmac_info = pmac_group->pmac_info[i];
   2ad1c:	e0fffe17 	ldw	r3,-8(fp)
   2ad20:	e0bff517 	ldw	r2,-44(fp)
   2ad24:	10800044 	addi	r2,r2,1
   2ad28:	1085883a 	add	r2,r2,r2
   2ad2c:	1085883a 	add	r2,r2,r2
   2ad30:	1885883a 	add	r2,r3,r2
   2ad34:	10800017 	ldw	r2,0(r2)
   2ad38:	e0bff815 	stw	r2,-32(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
   2ad3c:	e13ff817 	ldw	r4,-32(fp)
   2ad40:	00277300 	call	27730 <alt_tse_get_mac_info_index>
   2ad44:	e0bffa05 	stb	r2,-24(fp)

        pphy = pmac_info->pphy_info;
   2ad48:	e0bff817 	ldw	r2,-32(fp)
   2ad4c:	10800117 	ldw	r2,4(r2)
   2ad50:	e0bff715 	stw	r2,-36(fp)
        
        /* if no PHY connected */
        if(!pphy) {
   2ad54:	e0bff717 	ldw	r2,-36(fp)
   2ad58:	1000c826 	beq	r2,zero,2b07c <alt_tse_phy_set_common_speed+0x40c>
            continue;
        }
        
        psys = pmac_info->psys_info; 
   2ad5c:	e0bff817 	ldw	r2,-32(fp)
   2ad60:	10800217 	ldw	r2,8(r2)
   2ad64:	e0bff915 	stw	r2,-28(fp)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
   2ad68:	e0bff717 	ldw	r2,-36(fp)
   2ad6c:	10800003 	ldbu	r2,0(r2)
   2ad70:	10803fcc 	andi	r2,r2,255
   2ad74:	e13ff717 	ldw	r4,-36(fp)
   2ad78:	100b883a 	mov	r5,r2
   2ad7c:	00284b00 	call	284b0 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2ad80:	e0bff717 	ldw	r2,-36(fp)
   2ad84:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
   2ad88:	10803fcc 	andi	r2,r2,255
   2ad8c:	10000c1e 	bne	r2,zero,2adc0 <alt_tse_phy_set_common_speed+0x150>
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2ad90:	e0bff717 	ldw	r2,-36(fp)
   2ad94:	10800103 	ldbu	r2,4(r2)
   2ad98:	10803fcc 	andi	r2,r2,255
   2ad9c:	1000081e 	bne	r2,zero,2adc0 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
   2ada0:	e0bff717 	ldw	r2,-36(fp)
   2ada4:	10800043 	ldbu	r2,1(r2)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2ada8:	10803fcc 	andi	r2,r2,255
   2adac:	1000041e 	bne	r2,zero,2adc0 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
   2adb0:	e0bff717 	ldw	r2,-36(fp)
   2adb4:	10800083 	ldbu	r2,2(r2)
   2adb8:	10803fcc 	andi	r2,r2,255
   2adbc:	10000226 	beq	r2,zero,2adc8 <alt_tse_phy_set_common_speed+0x158>
   2adc0:	00800044 	movi	r2,1
   2adc4:	00000106 	br	2adcc <alt_tse_phy_set_common_speed+0x15c>
   2adc8:	0005883a 	mov	r2,zero
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
   2adcc:	e0bffd05 	stb	r2,-12(fp)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
   2add0:	e0bffd03 	ldbu	r2,-12(fp)
   2add4:	1000101e 	bne	r2,zero,2ae18 <alt_tse_phy_set_common_speed+0x1a8>
   2add8:	e0bfff17 	ldw	r2,-4(fp)
   2addc:	10800098 	cmpnei	r2,r2,2
   2ade0:	10000d1e 	bne	r2,zero,2ae18 <alt_tse_phy_set_common_speed+0x1a8>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
   2ade4:	e0fffa47 	ldb	r3,-23(fp)
   2ade8:	e0bffa07 	ldb	r2,-24(fp)
   2adec:	010000f4 	movhi	r4,3
   2adf0:	21099204 	addi	r4,r4,9800
   2adf4:	180b883a 	mov	r5,r3
   2adf8:	100d883a 	mov	r6,r2
   2adfc:	0017c440 	call	17c44 <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2ae00:	e0bffb17 	ldw	r2,-20(fp)
   2ae04:	10801004 	addi	r2,r2,64
   2ae08:	e0fffc17 	ldw	r3,-16(fp)
   2ae0c:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
   2ae10:	00bfffc4 	movi	r2,-1
   2ae14:	0000bd06 	br	2b10c <alt_tse_phy_set_common_speed+0x49c>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
   2ae18:	e13ff717 	ldw	r4,-36(fp)
   2ae1c:	01400044 	movi	r5,1
   2ae20:	018000c4 	movi	r6,3
   2ae24:	01c00044 	movi	r7,1
   2ae28:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2ae2c:	1000141e 	bne	r2,zero,2ae80 <alt_tse_phy_set_common_speed+0x210>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
   2ae30:	e0bffd03 	ldbu	r2,-12(fp)
   2ae34:	10000926 	beq	r2,zero,2ae5c <alt_tse_phy_set_common_speed+0x1ec>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
   2ae38:	e0bfff17 	ldw	r2,-4(fp)
   2ae3c:	1005d07a 	srai	r2,r2,1
   2ae40:	10bfffcc 	andi	r2,r2,65535
   2ae44:	d8800015 	stw	r2,0(sp)
   2ae48:	e13ff717 	ldw	r4,-36(fp)
   2ae4c:	000b883a 	mov	r5,zero
   2ae50:	01800184 	movi	r6,6
   2ae54:	01c00044 	movi	r7,1
   2ae58:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
   2ae5c:	e0bfff17 	ldw	r2,-4(fp)
   2ae60:	10bfffcc 	andi	r2,r2,65535
   2ae64:	d8800015 	stw	r2,0(sp)
   2ae68:	e13ff717 	ldw	r4,-36(fp)
   2ae6c:	000b883a 	mov	r5,zero
   2ae70:	01800344 	movi	r6,13
   2ae74:	01c00044 	movi	r7,1
   2ae78:	00285080 	call	28508 <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
   2ae7c:	00008006 	br	2b080 <alt_tse_phy_set_common_speed+0x410>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
   2ae80:	e0bfff17 	ldw	r2,-4(fp)
   2ae84:	10800098 	cmpnei	r2,r2,2
   2ae88:	10000a1e 	bne	r2,zero,2aeb4 <alt_tse_phy_set_common_speed+0x244>
            alt_tse_phy_set_adv_1000(pphy, 1);
   2ae8c:	e13ff717 	ldw	r4,-36(fp)
   2ae90:	01400044 	movi	r5,1
   2ae94:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
   2ae98:	e13ff717 	ldw	r4,-36(fp)
   2ae9c:	01400044 	movi	r5,1
   2aea0:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2aea4:	e13ff717 	ldw	r4,-36(fp)
   2aea8:	01400044 	movi	r5,1
   2aeac:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
   2aeb0:	00002206 	br	2af3c <alt_tse_phy_set_common_speed+0x2cc>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
   2aeb4:	e0bfff17 	ldw	r2,-4(fp)
   2aeb8:	10800058 	cmpnei	r2,r2,1
   2aebc:	10000a1e 	bne	r2,zero,2aee8 <alt_tse_phy_set_common_speed+0x278>
            alt_tse_phy_set_adv_1000(pphy, 0);
   2aec0:	e13ff717 	ldw	r4,-36(fp)
   2aec4:	000b883a 	mov	r5,zero
   2aec8:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
   2aecc:	e13ff717 	ldw	r4,-36(fp)
   2aed0:	01400044 	movi	r5,1
   2aed4:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2aed8:	e13ff717 	ldw	r4,-36(fp)
   2aedc:	01400044 	movi	r5,1
   2aee0:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
   2aee4:	00001506 	br	2af3c <alt_tse_phy_set_common_speed+0x2cc>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
   2aee8:	e0bfff17 	ldw	r2,-4(fp)
   2aeec:	10000a1e 	bne	r2,zero,2af18 <alt_tse_phy_set_common_speed+0x2a8>
            alt_tse_phy_set_adv_1000(pphy, 0);
   2aef0:	e13ff717 	ldw	r4,-36(fp)
   2aef4:	000b883a 	mov	r5,zero
   2aef8:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
   2aefc:	e13ff717 	ldw	r4,-36(fp)
   2af00:	000b883a 	mov	r5,zero
   2af04:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
   2af08:	e13ff717 	ldw	r4,-36(fp)
   2af0c:	01400044 	movi	r5,1
   2af10:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
   2af14:	00000906 	br	2af3c <alt_tse_phy_set_common_speed+0x2cc>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
   2af18:	e13ff717 	ldw	r4,-36(fp)
   2af1c:	000b883a 	mov	r5,zero
   2af20:	002a39c0 	call	2a39c <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
   2af24:	e13ff717 	ldw	r4,-36(fp)
   2af28:	000b883a 	mov	r5,zero
   2af2c:	002a5580 	call	2a558 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
   2af30:	e13ff717 	ldw	r4,-36(fp)
   2af34:	000b883a 	mov	r5,zero
   2af38:	002a7a00 	call	2a7a0 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
   2af3c:	e13ff717 	ldw	r4,-36(fp)
   2af40:	01400044 	movi	r5,1
   2af44:	01800144 	movi	r6,5
   2af48:	01c00044 	movi	r7,1
   2af4c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2af50:	10800058 	cmpnei	r2,r2,1
   2af54:	10003b1e 	bne	r2,zero,2b044 <alt_tse_phy_set_common_speed+0x3d4>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
   2af58:	e0bffd03 	ldbu	r2,-12(fp)
   2af5c:	10000f26 	beq	r2,zero,2af9c <alt_tse_phy_set_common_speed+0x32c>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
   2af60:	e0bff717 	ldw	r2,-36(fp)
   2af64:	10800517 	ldw	r2,20(r2)
   2af68:	10801583 	ldbu	r2,86(r2)
   2af6c:	10c03fcc 	andi	r3,r2,255
   2af70:	e0bff717 	ldw	r2,-36(fp)
   2af74:	10800517 	ldw	r2,20(r2)
   2af78:	108015c3 	ldbu	r2,87(r2)
   2af7c:	10803fcc 	andi	r2,r2,255
   2af80:	e13ff717 	ldw	r4,-36(fp)
   2af84:	180b883a 	mov	r5,r3
   2af88:	100d883a 	mov	r6,r2
   2af8c:	01c00084 	movi	r7,2
   2af90:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2af94:	e0bff605 	stb	r2,-40(fp)
   2af98:	00000e06 	br	2afd4 <alt_tse_phy_set_common_speed+0x364>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
   2af9c:	e0bff717 	ldw	r2,-36(fp)
   2afa0:	10800517 	ldw	r2,20(r2)
   2afa4:	10801583 	ldbu	r2,86(r2)
   2afa8:	10c03fcc 	andi	r3,r2,255
   2afac:	e0bff717 	ldw	r2,-36(fp)
   2afb0:	10800517 	ldw	r2,20(r2)
   2afb4:	108015c3 	ldbu	r2,87(r2)
   2afb8:	10803fcc 	andi	r2,r2,255
   2afbc:	e13ff717 	ldw	r4,-36(fp)
   2afc0:	180b883a 	mov	r5,r3
   2afc4:	100d883a 	mov	r6,r2
   2afc8:	01c00044 	movi	r7,1
   2afcc:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2afd0:	e0bff605 	stb	r2,-40(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
   2afd4:	e0fff603 	ldbu	r3,-40(fp)
   2afd8:	e0bfff17 	ldw	r2,-4(fp)
   2afdc:	18800426 	beq	r3,r2,2aff0 <alt_tse_phy_set_common_speed+0x380>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
   2afe0:	e13ff717 	ldw	r4,-36(fp)
   2afe4:	01400134 	movhi	r5,4
   2afe8:	29742404 	addi	r5,r5,-12144
   2afec:	0029ae00 	call	29ae0 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
   2aff0:	e0bff717 	ldw	r2,-36(fp)
   2aff4:	10800517 	ldw	r2,20(r2)
   2aff8:	10801583 	ldbu	r2,86(r2)
   2affc:	10c03fcc 	andi	r3,r2,255
   2b000:	e0bff717 	ldw	r2,-36(fp)
   2b004:	10800517 	ldw	r2,20(r2)
   2b008:	10801603 	ldbu	r2,88(r2)
   2b00c:	10803fcc 	andi	r2,r2,255
   2b010:	e13ff717 	ldw	r4,-36(fp)
   2b014:	180b883a 	mov	r5,r3
   2b018:	100d883a 	mov	r6,r2
   2b01c:	01c00044 	movi	r7,1
   2b020:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2b024:	e0bffd45 	stb	r2,-11(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
   2b028:	e0bff917 	ldw	r2,-28(fp)
   2b02c:	10800017 	ldw	r2,0(r2)
   2b030:	1007883a 	mov	r3,r2
   2b034:	e0bffd43 	ldbu	r2,-11(fp)
   2b038:	1809883a 	mov	r4,r3
   2b03c:	100b883a 	mov	r5,r2
   2b040:	00279680 	call	27968 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
   2b044:	e47ffa47 	ldb	r17,-23(fp)
   2b048:	e43ffa07 	ldb	r16,-24(fp)
   2b04c:	e13ff717 	ldw	r4,-36(fp)
   2b050:	01400044 	movi	r5,1
   2b054:	000d883a 	mov	r6,zero
   2b058:	01c00404 	movi	r7,16
   2b05c:	00286340 	call	28634 <alt_tse_phy_rd_mdio_reg>
   2b060:	010000f4 	movhi	r4,3
   2b064:	2109a904 	addi	r4,r4,9892
   2b068:	880b883a 	mov	r5,r17
   2b06c:	800d883a 	mov	r6,r16
   2b070:	100f883a 	mov	r7,r2
   2b074:	0017c440 	call	17c44 <printf>
   2b078:	00000106 	br	2b080 <alt_tse_phy_set_common_speed+0x410>

        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
   2b07c:	0001883a 	nop
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
   2b080:	e0bff517 	ldw	r2,-44(fp)
   2b084:	10800044 	addi	r2,r2,1
   2b088:	e0bff515 	stw	r2,-44(fp)
   2b08c:	e0bffe17 	ldw	r2,-8(fp)
   2b090:	10800003 	ldbu	r2,0(r2)
   2b094:	10803fcc 	andi	r2,r2,255
   2b098:	e0fff517 	ldw	r3,-44(fp)
   2b09c:	18bf1f16 	blt	r3,r2,2ad1c <alt_tse_phy_set_common_speed+0xac>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
   2b0a0:	e0fffa47 	ldb	r3,-23(fp)
   2b0a4:	e0bfff17 	ldw	r2,-4(fp)
   2b0a8:	108000a0 	cmpeqi	r2,r2,2
   2b0ac:	1000071e 	bne	r2,zero,2b0cc <alt_tse_phy_set_common_speed+0x45c>
   2b0b0:	e0bfff17 	ldw	r2,-4(fp)
   2b0b4:	10800058 	cmpnei	r2,r2,1
   2b0b8:	1000021e 	bne	r2,zero,2b0c4 <alt_tse_phy_set_common_speed+0x454>
   2b0bc:	00801904 	movi	r2,100
   2b0c0:	00000106 	br	2b0c8 <alt_tse_phy_set_common_speed+0x458>
   2b0c4:	00800284 	movi	r2,10
   2b0c8:	00000106 	br	2b0d0 <alt_tse_phy_set_common_speed+0x460>
   2b0cc:	0080fa04 	movi	r2,1000
   2b0d0:	010000f4 	movhi	r4,3
   2b0d4:	2109b504 	addi	r4,r4,9940
   2b0d8:	180b883a 	mov	r5,r3
   2b0dc:	100d883a 	mov	r6,r2
   2b0e0:	0017c440 	call	17c44 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
   2b0e4:	e0bfff17 	ldw	r2,-4(fp)
   2b0e8:	10803fcc 	andi	r2,r2,255
   2b0ec:	e13ffb17 	ldw	r4,-20(fp)
   2b0f0:	100b883a 	mov	r5,r2
   2b0f4:	00278880 	call	27888 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
   2b0f8:	e0bffb17 	ldw	r2,-20(fp)
   2b0fc:	10801004 	addi	r2,r2,64
   2b100:	e0fffc17 	ldw	r3,-16(fp)
   2b104:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
   2b108:	e0bfff17 	ldw	r2,-4(fp)
}
   2b10c:	e037883a 	mov	sp,fp
   2b110:	dfc00317 	ldw	ra,12(sp)
   2b114:	df000217 	ldw	fp,8(sp)
   2b118:	dc400117 	ldw	r17,4(sp)
   2b11c:	dc000017 	ldw	r16,0(sp)
   2b120:	dec00404 	addi	sp,sp,16
   2b124:	f800283a 	ret

0002b128 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
   2b128:	defffc04 	addi	sp,sp,-16
   2b12c:	dfc00315 	stw	ra,12(sp)
   2b130:	df000215 	stw	fp,8(sp)
   2b134:	df000204 	addi	fp,sp,8
   2b138:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & PCS_ST_an_done) == 0) {
   2b13c:	e0bfff17 	ldw	r2,-4(fp)
   2b140:	1080a104 	addi	r2,r2,644
   2b144:	10800037 	ldwio	r2,0(r2)
   2b148:	1080080c 	andi	r2,r2,32
   2b14c:	1000161e 	bne	r2,zero,2b1a8 <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
   2b150:	010000f4 	movhi	r4,3
   2b154:	2109c604 	addi	r4,r4,10008
   2b158:	0017eb00 	call	17eb0 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
   2b15c:	e0bfff17 	ldw	r2,-4(fp)
   2b160:	1080a004 	addi	r2,r2,640
   2b164:	10801004 	addi	r2,r2,64
   2b168:	00c01e04 	movi	r3,120
   2b16c:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
   2b170:	010000f4 	movhi	r4,3
   2b174:	2109cf04 	addi	r4,r4,10044
   2b178:	0017eb00 	call	17eb0 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2b17c:	e0bfff17 	ldw	r2,-4(fp)
   2b180:	1080a004 	addi	r2,r2,640
   2b184:	10800037 	ldwio	r2,0(r2)
   2b188:	e0bffe0d 	sth	r2,-8(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);        
   2b18c:	e0bfff17 	ldw	r2,-4(fp)
   2b190:	1080a004 	addi	r2,r2,640
   2b194:	e13ffe0b 	ldhu	r4,-8(fp)
   2b198:	00e00004 	movi	r3,-32768
   2b19c:	20c6b03a 	or	r3,r4,r3
   2b1a0:	18ffffcc 	andi	r3,r3,65535
   2b1a4:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
   2b1a8:	0005883a 	mov	r2,zero
}
   2b1ac:	e037883a 	mov	sp,fp
   2b1b0:	dfc00117 	ldw	ra,4(sp)
   2b1b4:	df000017 	ldw	fp,0(sp)
   2b1b8:	dec00204 	addi	sp,sp,8
   2b1bc:	f800283a 	ret

0002b1c0 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
   2b1c0:	defffc04 	addi	sp,sp,-16
   2b1c4:	dfc00315 	stw	ra,12(sp)
   2b1c8:	df000215 	stw	fp,8(sp)
   2b1cc:	df000204 	addi	fp,sp,8
   2b1d0:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
   2b1d4:	e0bfff17 	ldw	r2,-4(fp)
   2b1d8:	1080bb04 	addi	r2,r2,748
   2b1dc:	10800037 	ldwio	r2,0(r2)
   2b1e0:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
   2b1e4:	e0fffe0b 	ldhu	r3,-8(fp)
   2b1e8:	00bffc04 	movi	r2,-16
   2b1ec:	1884703a 	and	r2,r3,r2
   2b1f0:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
   2b1f4:	010000f4 	movhi	r4,3
   2b1f8:	2109d404 	addi	r4,r4,10064
   2b1fc:	0017eb00 	call	17eb0 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
   2b200:	e0bfff17 	ldw	r2,-4(fp)
   2b204:	1080bb04 	addi	r2,r2,748
   2b208:	e0fffe0b 	ldhu	r3,-8(fp)
   2b20c:	18c003d4 	ori	r3,r3,15
   2b210:	18ffffcc 	andi	r3,r3,65535
   2b214:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
   2b218:	010000f4 	movhi	r4,3
   2b21c:	2109e004 	addi	r4,r4,10112
   2b220:	0017eb00 	call	17eb0 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
   2b224:	e0bfff17 	ldw	r2,-4(fp)
   2b228:	1080b404 	addi	r2,r2,720
   2b22c:	10800037 	ldwio	r2,0(r2)
   2b230:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
   2b234:	e0fffe0b 	ldhu	r3,-8(fp)
   2b238:	00bfdf44 	movi	r2,-131
   2b23c:	1884703a 	and	r2,r3,r2
   2b240:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
   2b244:	e0bfff17 	ldw	r2,-4(fp)
   2b248:	1080b404 	addi	r2,r2,720
   2b24c:	e0fffe0b 	ldhu	r3,-8(fp)
   2b250:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
   2b254:	010000f4 	movhi	r4,3
   2b258:	2109cf04 	addi	r4,r4,10044
   2b25c:	0017eb00 	call	17eb0 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2b260:	e0bfff17 	ldw	r2,-4(fp)
   2b264:	1080a004 	addi	r2,r2,640
   2b268:	10800037 	ldwio	r2,0(r2)
   2b26c:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
   2b270:	e0bfff17 	ldw	r2,-4(fp)
   2b274:	1080a004 	addi	r2,r2,640
   2b278:	e13ffe0b 	ldhu	r4,-8(fp)
   2b27c:	00e00004 	movi	r3,-32768
   2b280:	20c6b03a 	or	r3,r4,r3
   2b284:	18ffffcc 	andi	r3,r3,65535
   2b288:	10c00035 	stwio	r3,0(r2)
    
    return 1;
   2b28c:	00800044 	movi	r2,1
}
   2b290:	e037883a 	mov	sp,fp
   2b294:	dfc00117 	ldw	ra,4(sp)
   2b298:	df000017 	ldw	fp,0(sp)
   2b29c:	dec00204 	addi	sp,sp,8
   2b2a0:	f800283a 	ret

0002b2a4 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
   2b2a4:	defffc04 	addi	sp,sp,-16
   2b2a8:	dfc00315 	stw	ra,12(sp)
   2b2ac:	df000215 	stw	fp,8(sp)
   2b2b0:	df000204 	addi	fp,sp,8
   2b2b4:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
   2b2b8:	e0bfff17 	ldw	r2,-4(fp)
   2b2bc:	1080bb04 	addi	r2,r2,748
   2b2c0:	10800037 	ldwio	r2,0(r2)
   2b2c4:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
   2b2c8:	e0fffe0b 	ldhu	r3,-8(fp)
   2b2cc:	00bffc04 	movi	r2,-16
   2b2d0:	1884703a 	and	r2,r3,r2
   2b2d4:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
   2b2d8:	010000f4 	movhi	r4,3
   2b2dc:	2109ea04 	addi	r4,r4,10152
   2b2e0:	0017eb00 	call	17eb0 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
   2b2e4:	e0bfff17 	ldw	r2,-4(fp)
   2b2e8:	1080bb04 	addi	r2,r2,748
   2b2ec:	e0fffe0b 	ldhu	r3,-8(fp)
   2b2f0:	18c00114 	ori	r3,r3,4
   2b2f4:	18ffffcc 	andi	r3,r3,65535
   2b2f8:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
   2b2fc:	010000f4 	movhi	r4,3
   2b300:	2109e004 	addi	r4,r4,10112
   2b304:	0017eb00 	call	17eb0 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
   2b308:	e0bfff17 	ldw	r2,-4(fp)
   2b30c:	1080b404 	addi	r2,r2,720
   2b310:	10800037 	ldwio	r2,0(r2)
   2b314:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
   2b318:	e0fffe0b 	ldhu	r3,-8(fp)
   2b31c:	00bfdf44 	movi	r2,-131
   2b320:	1884703a 	and	r2,r3,r2
   2b324:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
   2b328:	e0bfff17 	ldw	r2,-4(fp)
   2b32c:	1080b404 	addi	r2,r2,720
   2b330:	e0fffe0b 	ldhu	r3,-8(fp)
   2b334:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
   2b338:	010000f4 	movhi	r4,3
   2b33c:	2109cf04 	addi	r4,r4,10044
   2b340:	0017eb00 	call	17eb0 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2b344:	e0bfff17 	ldw	r2,-4(fp)
   2b348:	1080a004 	addi	r2,r2,640
   2b34c:	10800037 	ldwio	r2,0(r2)
   2b350:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
   2b354:	e0bfff17 	ldw	r2,-4(fp)
   2b358:	1080a004 	addi	r2,r2,640
   2b35c:	e13ffe0b 	ldhu	r4,-8(fp)
   2b360:	00e00004 	movi	r3,-32768
   2b364:	20c6b03a 	or	r3,r4,r3
   2b368:	18ffffcc 	andi	r3,r3,65535
   2b36c:	10c00035 	stwio	r3,0(r2)
    
    return 1;
   2b370:	00800044 	movi	r2,1
}
   2b374:	e037883a 	mov	sp,fp
   2b378:	dfc00117 	ldw	ra,4(sp)
   2b37c:	df000017 	ldw	fp,0(sp)
   2b380:	dec00204 	addi	sp,sp,8
   2b384:	f800283a 	ret

0002b388 <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
   2b388:	defffc04 	addi	sp,sp,-16
   2b38c:	dfc00315 	stw	ra,12(sp)
   2b390:	df000215 	stw	fp,8(sp)
   2b394:	df000204 	addi	fp,sp,8
   2b398:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
   2b39c:	e0bfff17 	ldw	r2,-4(fp)
   2b3a0:	1080bb04 	addi	r2,r2,748
   2b3a4:	10800037 	ldwio	r2,0(r2)
   2b3a8:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
   2b3ac:	e0fffe0b 	ldhu	r3,-8(fp)
   2b3b0:	00bffc04 	movi	r2,-16
   2b3b4:	1884703a 	and	r2,r3,r2
   2b3b8:	e0bffe0d 	sth	r2,-8(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
   2b3bc:	010000f4 	movhi	r4,3
   2b3c0:	2109ff04 	addi	r4,r4,10236
   2b3c4:	0017eb00 	call	17eb0 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
   2b3c8:	e0bfff17 	ldw	r2,-4(fp)
   2b3cc:	1080bb04 	addi	r2,r2,748
   2b3d0:	e0fffe0b 	ldhu	r3,-8(fp)
   2b3d4:	18c002d4 	ori	r3,r3,11
   2b3d8:	18ffffcc 	andi	r3,r3,65535
   2b3dc:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
   2b3e0:	010000f4 	movhi	r4,3
   2b3e4:	210a0e04 	addi	r4,r4,10296
   2b3e8:	0017eb00 	call	17eb0 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
   2b3ec:	e0bfff17 	ldw	r2,-4(fp)
   2b3f0:	1080b404 	addi	r2,r2,720
   2b3f4:	10800037 	ldwio	r2,0(r2)
   2b3f8:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
   2b3fc:	e0fffe0b 	ldhu	r3,-8(fp)
   2b400:	00bfdf44 	movi	r2,-131
   2b404:	1884703a 	and	r2,r3,r2
   2b408:	e0bffe0d 	sth	r2,-8(fp)
    dat |= 0x82;
   2b40c:	e0bffe0b 	ldhu	r2,-8(fp)
   2b410:	10802094 	ori	r2,r2,130
   2b414:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
   2b418:	e0bfff17 	ldw	r2,-4(fp)
   2b41c:	1080b404 	addi	r2,r2,720
   2b420:	e0fffe0b 	ldhu	r3,-8(fp)
   2b424:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
   2b428:	010000f4 	movhi	r4,3
   2b42c:	2109cf04 	addi	r4,r4,10044
   2b430:	0017eb00 	call	17eb0 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
   2b434:	e0bfff17 	ldw	r2,-4(fp)
   2b438:	1080a004 	addi	r2,r2,640
   2b43c:	10800037 	ldwio	r2,0(r2)
   2b440:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | PCS_CTL_sw_reset);
   2b444:	e0bfff17 	ldw	r2,-4(fp)
   2b448:	1080a004 	addi	r2,r2,640
   2b44c:	e13ffe0b 	ldhu	r4,-8(fp)
   2b450:	00e00004 	movi	r3,-32768
   2b454:	20c6b03a 	or	r3,r4,r3
   2b458:	18ffffcc 	andi	r3,r3,65535
   2b45c:	10c00035 	stwio	r3,0(r2)
    
    return 1;
   2b460:	00800044 	movi	r2,1
    
}
   2b464:	e037883a 	mov	sp,fp
   2b468:	dfc00117 	ldw	ra,4(sp)
   2b46c:	df000017 	ldw	fp,0(sp)
   2b470:	dec00204 	addi	sp,sp,8
   2b474:	f800283a 	ret

0002b478 <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
   2b478:	defffc04 	addi	sp,sp,-16
   2b47c:	df000315 	stw	fp,12(sp)
   2b480:	df000304 	addi	fp,sp,12
   2b484:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
   2b488:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
   2b48c:	e0bfff17 	ldw	r2,-4(fp)
   2b490:	1080b004 	addi	r2,r2,704
   2b494:	10800037 	ldwio	r2,0(r2)
   2b498:	e0bffe15 	stw	r2,-8(fp)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
   2b49c:	e0bffe17 	ldw	r2,-8(fp)
   2b4a0:	1080008c 	andi	r2,r2,2
   2b4a4:	10000426 	beq	r2,zero,2b4b8 <DP83848C_link_status_read+0x40>
		link_status |= 0x8;
   2b4a8:	e0bffd17 	ldw	r2,-12(fp)
   2b4ac:	10800214 	ori	r2,r2,8
   2b4b0:	e0bffd15 	stw	r2,-12(fp)
   2b4b4:	00000306 	br	2b4c4 <DP83848C_link_status_read+0x4c>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
   2b4b8:	e0bffd17 	ldw	r2,-12(fp)
   2b4bc:	10800114 	ori	r2,r2,4
   2b4c0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
   2b4c4:	e0bffe17 	ldw	r2,-8(fp)
   2b4c8:	1080010c 	andi	r2,r2,4
   2b4cc:	10000326 	beq	r2,zero,2b4dc <DP83848C_link_status_read+0x64>
		link_status |= 0x1;
   2b4d0:	e0bffd17 	ldw	r2,-12(fp)
   2b4d4:	10800054 	ori	r2,r2,1
   2b4d8:	e0bffd15 	stw	r2,-12(fp)
	}
	
	return link_status;
   2b4dc:	e0bffd17 	ldw	r2,-12(fp)
}
   2b4e0:	e037883a 	mov	sp,fp
   2b4e4:	df000017 	ldw	fp,0(sp)
   2b4e8:	dec00104 	addi	sp,sp,4
   2b4ec:	f800283a 	ret

0002b4f0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2b4f0:	defffa04 	addi	sp,sp,-24
   2b4f4:	dfc00515 	stw	ra,20(sp)
   2b4f8:	df000415 	stw	fp,16(sp)
   2b4fc:	df000404 	addi	fp,sp,16
   2b500:	e13ffd15 	stw	r4,-12(fp)
   2b504:	e17ffe15 	stw	r5,-8(fp)
   2b508:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2b50c:	e0bffd17 	ldw	r2,-12(fp)
   2b510:	10800017 	ldw	r2,0(r2)
   2b514:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2b518:	e0bffc17 	ldw	r2,-16(fp)
   2b51c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2b520:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
   2b524:	10800217 	ldw	r2,8(r2)
   2b528:	1809883a 	mov	r4,r3
   2b52c:	e17ffe17 	ldw	r5,-8(fp)
   2b530:	e1bfff17 	ldw	r6,-4(fp)
   2b534:	100f883a 	mov	r7,r2
   2b538:	002b9f80 	call	2b9f8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   2b53c:	e037883a 	mov	sp,fp
   2b540:	dfc00117 	ldw	ra,4(sp)
   2b544:	df000017 	ldw	fp,0(sp)
   2b548:	dec00204 	addi	sp,sp,8
   2b54c:	f800283a 	ret

0002b550 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2b550:	defffa04 	addi	sp,sp,-24
   2b554:	dfc00515 	stw	ra,20(sp)
   2b558:	df000415 	stw	fp,16(sp)
   2b55c:	df000404 	addi	fp,sp,16
   2b560:	e13ffd15 	stw	r4,-12(fp)
   2b564:	e17ffe15 	stw	r5,-8(fp)
   2b568:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2b56c:	e0bffd17 	ldw	r2,-12(fp)
   2b570:	10800017 	ldw	r2,0(r2)
   2b574:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2b578:	e0bffc17 	ldw	r2,-16(fp)
   2b57c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   2b580:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2b584:	10800217 	ldw	r2,8(r2)
   2b588:	1809883a 	mov	r4,r3
   2b58c:	e17ffe17 	ldw	r5,-8(fp)
   2b590:	e1bfff17 	ldw	r6,-4(fp)
   2b594:	100f883a 	mov	r7,r2
   2b598:	002bca40 	call	2bca4 <altera_avalon_uart_write>
      fd->fd_flags);
}
   2b59c:	e037883a 	mov	sp,fp
   2b5a0:	dfc00117 	ldw	ra,4(sp)
   2b5a4:	df000017 	ldw	fp,0(sp)
   2b5a8:	dec00204 	addi	sp,sp,8
   2b5ac:	f800283a 	ret

0002b5b0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2b5b0:	defffc04 	addi	sp,sp,-16
   2b5b4:	dfc00315 	stw	ra,12(sp)
   2b5b8:	df000215 	stw	fp,8(sp)
   2b5bc:	df000204 	addi	fp,sp,8
   2b5c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   2b5c4:	e0bfff17 	ldw	r2,-4(fp)
   2b5c8:	10800017 	ldw	r2,0(r2)
   2b5cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2b5d0:	e0bffe17 	ldw	r2,-8(fp)
   2b5d4:	10c00a04 	addi	r3,r2,40
   2b5d8:	e0bfff17 	ldw	r2,-4(fp)
   2b5dc:	10800217 	ldw	r2,8(r2)
   2b5e0:	1809883a 	mov	r4,r3
   2b5e4:	100b883a 	mov	r5,r2
   2b5e8:	002b9540 	call	2b954 <altera_avalon_uart_close>
}
   2b5ec:	e037883a 	mov	sp,fp
   2b5f0:	dfc00117 	ldw	ra,4(sp)
   2b5f4:	df000017 	ldw	fp,0(sp)
   2b5f8:	dec00204 	addi	sp,sp,8
   2b5fc:	f800283a 	ret

0002b600 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2b600:	defff804 	addi	sp,sp,-32
   2b604:	dfc00715 	stw	ra,28(sp)
   2b608:	df000615 	stw	fp,24(sp)
   2b60c:	df000604 	addi	fp,sp,24
   2b610:	e13ffd15 	stw	r4,-12(fp)
   2b614:	e17ffe15 	stw	r5,-8(fp)
   2b618:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   2b61c:	e0bffd17 	ldw	r2,-12(fp)
   2b620:	10800017 	ldw	r2,0(r2)
   2b624:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2b628:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2b62c:	1000041e 	bne	r2,zero,2b640 <altera_avalon_uart_init+0x40>
   2b630:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2b634:	1000021e 	bne	r2,zero,2b640 <altera_avalon_uart_init+0x40>
   2b638:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   2b63c:	10000226 	beq	r2,zero,2b648 <altera_avalon_uart_init+0x48>
   2b640:	00800044 	movi	r2,1
   2b644:	00000106 	br	2b64c <altera_avalon_uart_init+0x4c>
   2b648:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   2b64c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   2b650:	e0bffc17 	ldw	r2,-16(fp)
   2b654:	10000f1e 	bne	r2,zero,2b694 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   2b658:	e0bffd17 	ldw	r2,-12(fp)
   2b65c:	00c32004 	movi	r3,3200
   2b660:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   2b664:	e0bffb17 	ldw	r2,-20(fp)
   2b668:	10800304 	addi	r2,r2,12
   2b66c:	e0fffd17 	ldw	r3,-12(fp)
   2b670:	18c00117 	ldw	r3,4(r3)
   2b674:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   2b678:	d8000015 	stw	zero,0(sp)
   2b67c:	e13ffe17 	ldw	r4,-8(fp)
   2b680:	e17fff17 	ldw	r5,-4(fp)
   2b684:	018000f4 	movhi	r6,3
   2b688:	31adaa04 	addi	r6,r6,-18776
   2b68c:	e1fffd17 	ldw	r7,-12(fp)
   2b690:	002c1f80 	call	2c1f8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   2b694:	e037883a 	mov	sp,fp
   2b698:	dfc00117 	ldw	ra,4(sp)
   2b69c:	df000017 	ldw	fp,0(sp)
   2b6a0:	dec00204 	addi	sp,sp,8
   2b6a4:	f800283a 	ret

0002b6a8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   2b6a8:	defffa04 	addi	sp,sp,-24
   2b6ac:	dfc00515 	stw	ra,20(sp)
   2b6b0:	df000415 	stw	fp,16(sp)
   2b6b4:	df000404 	addi	fp,sp,16
   2b6b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2b6bc:	e0bfff17 	ldw	r2,-4(fp)
   2b6c0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   2b6c4:	e0bffc17 	ldw	r2,-16(fp)
   2b6c8:	10800017 	ldw	r2,0(r2)
   2b6cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   2b6d0:	e0bffd17 	ldw	r2,-12(fp)
   2b6d4:	10800204 	addi	r2,r2,8
   2b6d8:	10800037 	ldwio	r2,0(r2)
   2b6dc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   2b6e0:	e0bffd17 	ldw	r2,-12(fp)
   2b6e4:	10800204 	addi	r2,r2,8
   2b6e8:	0007883a 	mov	r3,zero
   2b6ec:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   2b6f0:	e0bffd17 	ldw	r2,-12(fp)
   2b6f4:	10800204 	addi	r2,r2,8
   2b6f8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2b6fc:	e0bffe17 	ldw	r2,-8(fp)
   2b700:	1080200c 	andi	r2,r2,128
   2b704:	10000326 	beq	r2,zero,2b714 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   2b708:	e13ffc17 	ldw	r4,-16(fp)
   2b70c:	e17ffe17 	ldw	r5,-8(fp)
   2b710:	002b7400 	call	2b740 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   2b714:	e0bffe17 	ldw	r2,-8(fp)
   2b718:	1081100c 	andi	r2,r2,1088
   2b71c:	10000326 	beq	r2,zero,2b72c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   2b720:	e13ffc17 	ldw	r4,-16(fp)
   2b724:	e17ffe17 	ldw	r5,-8(fp)
   2b728:	002b8180 	call	2b818 <altera_avalon_uart_txirq>
  }
  

}
   2b72c:	e037883a 	mov	sp,fp
   2b730:	dfc00117 	ldw	ra,4(sp)
   2b734:	df000017 	ldw	fp,0(sp)
   2b738:	dec00204 	addi	sp,sp,8
   2b73c:	f800283a 	ret

0002b740 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2b740:	defffc04 	addi	sp,sp,-16
   2b744:	df000315 	stw	fp,12(sp)
   2b748:	df000304 	addi	fp,sp,12
   2b74c:	e13ffe15 	stw	r4,-8(fp)
   2b750:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   2b754:	e0bfff17 	ldw	r2,-4(fp)
   2b758:	108000cc 	andi	r2,r2,3
   2b75c:	1000291e 	bne	r2,zero,2b804 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   2b760:	e0bffe17 	ldw	r2,-8(fp)
   2b764:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2b768:	e0bffe17 	ldw	r2,-8(fp)
   2b76c:	10800317 	ldw	r2,12(r2)
   2b770:	10800044 	addi	r2,r2,1
   2b774:	10800fcc 	andi	r2,r2,63
   2b778:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2b77c:	e0bffe17 	ldw	r2,-8(fp)
   2b780:	10800317 	ldw	r2,12(r2)
   2b784:	e0fffe17 	ldw	r3,-8(fp)
   2b788:	18c00017 	ldw	r3,0(r3)
   2b78c:	18c00037 	ldwio	r3,0(r3)
   2b790:	e13ffe17 	ldw	r4,-8(fp)
   2b794:	2085883a 	add	r2,r4,r2
   2b798:	10800704 	addi	r2,r2,28
   2b79c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
   2b7a0:	e0bffe17 	ldw	r2,-8(fp)
   2b7a4:	e0fffd17 	ldw	r3,-12(fp)
   2b7a8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2b7ac:	e0bffe17 	ldw	r2,-8(fp)
   2b7b0:	10800317 	ldw	r2,12(r2)
   2b7b4:	10800044 	addi	r2,r2,1
   2b7b8:	10800fcc 	andi	r2,r2,63
   2b7bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   2b7c0:	e0bffe17 	ldw	r2,-8(fp)
   2b7c4:	10c00217 	ldw	r3,8(r2)
   2b7c8:	e0bffd17 	ldw	r2,-12(fp)
   2b7cc:	18800e1e 	bne	r3,r2,2b808 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2b7d0:	e0bffe17 	ldw	r2,-8(fp)
   2b7d4:	10c00117 	ldw	r3,4(r2)
   2b7d8:	00bfdfc4 	movi	r2,-129
   2b7dc:	1886703a 	and	r3,r3,r2
   2b7e0:	e0bffe17 	ldw	r2,-8(fp)
   2b7e4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   2b7e8:	e0bffe17 	ldw	r2,-8(fp)
   2b7ec:	10800017 	ldw	r2,0(r2)
   2b7f0:	10800304 	addi	r2,r2,12
   2b7f4:	e0fffe17 	ldw	r3,-8(fp)
   2b7f8:	18c00117 	ldw	r3,4(r3)
   2b7fc:	10c00035 	stwio	r3,0(r2)
   2b800:	00000106 	br	2b808 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   2b804:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   2b808:	e037883a 	mov	sp,fp
   2b80c:	df000017 	ldw	fp,0(sp)
   2b810:	dec00104 	addi	sp,sp,4
   2b814:	f800283a 	ret

0002b818 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   2b818:	defffd04 	addi	sp,sp,-12
   2b81c:	df000215 	stw	fp,8(sp)
   2b820:	df000204 	addi	fp,sp,8
   2b824:	e13ffe15 	stw	r4,-8(fp)
   2b828:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   2b82c:	e0bffe17 	ldw	r2,-8(fp)
   2b830:	10c00417 	ldw	r3,16(r2)
   2b834:	e0bffe17 	ldw	r2,-8(fp)
   2b838:	10800517 	ldw	r2,20(r2)
   2b83c:	18803026 	beq	r3,r2,2b900 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2b840:	e0bffe17 	ldw	r2,-8(fp)
   2b844:	10800617 	ldw	r2,24(r2)
   2b848:	1080008c 	andi	r2,r2,2
   2b84c:	10000326 	beq	r2,zero,2b85c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2b850:	e0bfff17 	ldw	r2,-4(fp)
   2b854:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   2b858:	10001b26 	beq	r2,zero,2b8c8 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   2b85c:	e0bffe17 	ldw	r2,-8(fp)
   2b860:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   2b864:	e0bffe17 	ldw	r2,-8(fp)
   2b868:	10800017 	ldw	r2,0(r2)
   2b86c:	10800104 	addi	r2,r2,4
   2b870:	e0fffe17 	ldw	r3,-8(fp)
   2b874:	18c00417 	ldw	r3,16(r3)
   2b878:	e13ffe17 	ldw	r4,-8(fp)
   2b87c:	20c7883a 	add	r3,r4,r3
   2b880:	18c01704 	addi	r3,r3,92
   2b884:	18c00003 	ldbu	r3,0(r3)
   2b888:	18c03fcc 	andi	r3,r3,255
   2b88c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   2b890:	e0bffe17 	ldw	r2,-8(fp)
   2b894:	10800417 	ldw	r2,16(r2)
   2b898:	10800044 	addi	r2,r2,1
   2b89c:	e0fffe17 	ldw	r3,-8(fp)
   2b8a0:	18800415 	stw	r2,16(r3)
   2b8a4:	10c00fcc 	andi	r3,r2,63
   2b8a8:	e0bffe17 	ldw	r2,-8(fp)
   2b8ac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2b8b0:	e0bffe17 	ldw	r2,-8(fp)
   2b8b4:	10800117 	ldw	r2,4(r2)
   2b8b8:	10c01014 	ori	r3,r2,64
   2b8bc:	e0bffe17 	ldw	r2,-8(fp)
   2b8c0:	10c00115 	stw	r3,4(r2)
   2b8c4:	00000e06 	br	2b900 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   2b8c8:	e0bffe17 	ldw	r2,-8(fp)
   2b8cc:	10800017 	ldw	r2,0(r2)
   2b8d0:	10800204 	addi	r2,r2,8
   2b8d4:	10800037 	ldwio	r2,0(r2)
   2b8d8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   2b8dc:	e0bfff17 	ldw	r2,-4(fp)
   2b8e0:	1082000c 	andi	r2,r2,2048
   2b8e4:	1000061e 	bne	r2,zero,2b900 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   2b8e8:	e0bffe17 	ldw	r2,-8(fp)
   2b8ec:	10c00117 	ldw	r3,4(r2)
   2b8f0:	00bfefc4 	movi	r2,-65
   2b8f4:	1886703a 	and	r3,r3,r2
   2b8f8:	e0bffe17 	ldw	r2,-8(fp)
   2b8fc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   2b900:	e0bffe17 	ldw	r2,-8(fp)
   2b904:	10c00417 	ldw	r3,16(r2)
   2b908:	e0bffe17 	ldw	r2,-8(fp)
   2b90c:	10800517 	ldw	r2,20(r2)
   2b910:	1880061e 	bne	r3,r2,2b92c <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2b914:	e0bffe17 	ldw	r2,-8(fp)
   2b918:	10c00117 	ldw	r3,4(r2)
   2b91c:	00beefc4 	movi	r2,-1089
   2b920:	1886703a 	and	r3,r3,r2
   2b924:	e0bffe17 	ldw	r2,-8(fp)
   2b928:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2b92c:	e0bffe17 	ldw	r2,-8(fp)
   2b930:	10800017 	ldw	r2,0(r2)
   2b934:	10800304 	addi	r2,r2,12
   2b938:	e0fffe17 	ldw	r3,-8(fp)
   2b93c:	18c00117 	ldw	r3,4(r3)
   2b940:	10c00035 	stwio	r3,0(r2)
}
   2b944:	e037883a 	mov	sp,fp
   2b948:	df000017 	ldw	fp,0(sp)
   2b94c:	dec00104 	addi	sp,sp,4
   2b950:	f800283a 	ret

0002b954 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   2b954:	defffd04 	addi	sp,sp,-12
   2b958:	df000215 	stw	fp,8(sp)
   2b95c:	df000204 	addi	fp,sp,8
   2b960:	e13ffe15 	stw	r4,-8(fp)
   2b964:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2b968:	00000506 	br	2b980 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2b96c:	e0bfff17 	ldw	r2,-4(fp)
   2b970:	1090000c 	andi	r2,r2,16384
   2b974:	10000226 	beq	r2,zero,2b980 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2b978:	00bffd44 	movi	r2,-11
   2b97c:	00000606 	br	2b998 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   2b980:	e0bffe17 	ldw	r2,-8(fp)
   2b984:	10c00417 	ldw	r3,16(r2)
   2b988:	e0bffe17 	ldw	r2,-8(fp)
   2b98c:	10800517 	ldw	r2,20(r2)
   2b990:	18bff61e 	bne	r3,r2,2b96c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2b994:	0005883a 	mov	r2,zero
}
   2b998:	e037883a 	mov	sp,fp
   2b99c:	df000017 	ldw	fp,0(sp)
   2b9a0:	dec00104 	addi	sp,sp,4
   2b9a4:	f800283a 	ret

0002b9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b9a8:	defffe04 	addi	sp,sp,-8
   2b9ac:	dfc00115 	stw	ra,4(sp)
   2b9b0:	df000015 	stw	fp,0(sp)
   2b9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2b9b8:	008000f4 	movhi	r2,3
   2b9bc:	10933d04 	addi	r2,r2,19700
   2b9c0:	10800017 	ldw	r2,0(r2)
   2b9c4:	10000526 	beq	r2,zero,2b9dc <alt_get_errno+0x34>
   2b9c8:	008000f4 	movhi	r2,3
   2b9cc:	10933d04 	addi	r2,r2,19700
   2b9d0:	10800017 	ldw	r2,0(r2)
   2b9d4:	103ee83a 	callr	r2
   2b9d8:	00000206 	br	2b9e4 <alt_get_errno+0x3c>
   2b9dc:	008000f4 	movhi	r2,3
   2b9e0:	109bfa04 	addi	r2,r2,28648
}
   2b9e4:	e037883a 	mov	sp,fp
   2b9e8:	dfc00117 	ldw	ra,4(sp)
   2b9ec:	df000017 	ldw	fp,0(sp)
   2b9f0:	dec00204 	addi	sp,sp,8
   2b9f4:	f800283a 	ret

0002b9f8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   2b9f8:	deffef04 	addi	sp,sp,-68
   2b9fc:	dfc01015 	stw	ra,64(sp)
   2ba00:	df000f15 	stw	fp,60(sp)
   2ba04:	df000f04 	addi	fp,sp,60
   2ba08:	e13ffc15 	stw	r4,-16(fp)
   2ba0c:	e17ffd15 	stw	r5,-12(fp)
   2ba10:	e1bffe15 	stw	r6,-8(fp)
   2ba14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
   2ba18:	e03ff105 	stb	zero,-60(fp)
  int             count = 0;
   2ba1c:	e03ff215 	stw	zero,-56(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   2ba20:	e0bfff17 	ldw	r2,-4(fp)
   2ba24:	1090000c 	andi	r2,r2,16384
   2ba28:	1005003a 	cmpeq	r2,r2,zero
   2ba2c:	10803fcc 	andi	r2,r2,255
   2ba30:	e0bff315 	stw	r2,-52(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
   2ba34:	e0bffc17 	ldw	r2,-16(fp)
   2ba38:	10800217 	ldw	r2,8(r2)
   2ba3c:	10800044 	addi	r2,r2,1
   2ba40:	10800fcc 	andi	r2,r2,63
   2ba44:	e0bff415 	stw	r2,-48(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2ba48:	00001906 	br	2bab0 <altera_avalon_uart_read+0xb8>
    {
      count++;
   2ba4c:	e0bff217 	ldw	r2,-56(fp)
   2ba50:	10800044 	addi	r2,r2,1
   2ba54:	e0bff215 	stw	r2,-56(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   2ba58:	e0bffc17 	ldw	r2,-16(fp)
   2ba5c:	10800217 	ldw	r2,8(r2)
   2ba60:	e0fffc17 	ldw	r3,-16(fp)
   2ba64:	1885883a 	add	r2,r3,r2
   2ba68:	10800704 	addi	r2,r2,28
   2ba6c:	10800003 	ldbu	r2,0(r2)
   2ba70:	1007883a 	mov	r3,r2
   2ba74:	e0bffd17 	ldw	r2,-12(fp)
   2ba78:	10c00005 	stb	r3,0(r2)
   2ba7c:	e0bffd17 	ldw	r2,-12(fp)
   2ba80:	10800044 	addi	r2,r2,1
   2ba84:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
   2ba88:	e0bffc17 	ldw	r2,-16(fp)
   2ba8c:	10800217 	ldw	r2,8(r2)
   2ba90:	10c00044 	addi	r3,r2,1
   2ba94:	e0bffc17 	ldw	r2,-16(fp)
   2ba98:	10c00215 	stw	r3,8(r2)
   2ba9c:	e0bffc17 	ldw	r2,-16(fp)
   2baa0:	10800217 	ldw	r2,8(r2)
   2baa4:	10c00fcc 	andi	r3,r2,63
   2baa8:	e0bffc17 	ldw	r2,-16(fp)
   2baac:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   2bab0:	e0fff217 	ldw	r3,-56(fp)
   2bab4:	e0bffe17 	ldw	r2,-8(fp)
   2bab8:	1880050e 	bge	r3,r2,2bad0 <altera_avalon_uart_read+0xd8>
   2babc:	e0bffc17 	ldw	r2,-16(fp)
   2bac0:	10c00217 	ldw	r3,8(r2)
   2bac4:	e0bffc17 	ldw	r2,-16(fp)
   2bac8:	10800317 	ldw	r2,12(r2)
   2bacc:	18bfdf1e 	bne	r3,r2,2ba4c <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   2bad0:	e0bff217 	ldw	r2,-56(fp)
   2bad4:	10002f1e 	bne	r2,zero,2bb94 <altera_avalon_uart_read+0x19c>
   2bad8:	e0bffc17 	ldw	r2,-16(fp)
   2badc:	10c00217 	ldw	r3,8(r2)
   2bae0:	e0bffc17 	ldw	r2,-16(fp)
   2bae4:	10800317 	ldw	r2,12(r2)
   2bae8:	18802a1e 	bne	r3,r2,2bb94 <altera_avalon_uart_read+0x19c>
    {
      if (!block)
   2baec:	e0bff317 	ldw	r2,-52(fp)
   2baf0:	1000061e 	bne	r2,zero,2bb0c <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   2baf4:	002b9a80 	call	2b9a8 <alt_get_errno>
   2baf8:	00c002c4 	movi	r3,11
   2bafc:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
   2bb00:	00800044 	movi	r2,1
   2bb04:	e0bff105 	stb	r2,-60(fp)
        break;
   2bb08:	00002606 	br	2bba4 <altera_avalon_uart_read+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bb0c:	0005303a 	rdctl	r2,status
   2bb10:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bb14:	e0fff617 	ldw	r3,-40(fp)
   2bb18:	00bfff84 	movi	r2,-2
   2bb1c:	1884703a 	and	r2,r3,r2
   2bb20:	1001703a 	wrctl	status,r2
  
  return context;
   2bb24:	e0bff617 	ldw	r2,-40(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   2bb28:	e0bff515 	stw	r2,-44(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2bb2c:	e0bffc17 	ldw	r2,-16(fp)
   2bb30:	10800117 	ldw	r2,4(r2)
   2bb34:	10c02014 	ori	r3,r2,128
   2bb38:	e0bffc17 	ldw	r2,-16(fp)
   2bb3c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2bb40:	e0bffc17 	ldw	r2,-16(fp)
   2bb44:	10800017 	ldw	r2,0(r2)
   2bb48:	10800304 	addi	r2,r2,12
   2bb4c:	e0fffc17 	ldw	r3,-16(fp)
   2bb50:	18c00117 	ldw	r3,4(r3)
   2bb54:	10c00035 	stwio	r3,0(r2)
   2bb58:	e0bff517 	ldw	r2,-44(fp)
   2bb5c:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   2bb60:	0005303a 	rdctl	r2,status
   2bb64:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2bb68:	e0fff817 	ldw	r3,-32(fp)
   2bb6c:	00bfff84 	movi	r2,-2
   2bb70:	1884703a 	and	r2,r3,r2
   2bb74:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2bb78:	e0bff717 	ldw	r2,-36(fp)
   2bb7c:	1080004c 	andi	r2,r2,1
   2bb80:	e0fff817 	ldw	r3,-32(fp)
   2bb84:	1884b03a 	or	r2,r3,r2
   2bb88:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
   2bb8c:	e0bff817 	ldw	r2,-32(fp)
   2bb90:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   2bb94:	e0bff217 	ldw	r2,-56(fp)
   2bb98:	1000021e 	bne	r2,zero,2bba4 <altera_avalon_uart_read+0x1ac>
   2bb9c:	e0bffe17 	ldw	r2,-8(fp)
   2bba0:	103fc31e 	bne	r2,zero,2bab0 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bba4:	0005303a 	rdctl	r2,status
   2bba8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bbac:	e0fff917 	ldw	r3,-28(fp)
   2bbb0:	00bfff84 	movi	r2,-2
   2bbb4:	1884703a 	and	r2,r3,r2
   2bbb8:	1001703a 	wrctl	status,r2
  
  return context;
   2bbbc:	e0bff917 	ldw	r2,-28(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   2bbc0:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   2bbc4:	e0bffc17 	ldw	r2,-16(fp)
   2bbc8:	10800117 	ldw	r2,4(r2)
   2bbcc:	10c02014 	ori	r3,r2,128
   2bbd0:	e0bffc17 	ldw	r2,-16(fp)
   2bbd4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2bbd8:	e0bffc17 	ldw	r2,-16(fp)
   2bbdc:	10800017 	ldw	r2,0(r2)
   2bbe0:	10800304 	addi	r2,r2,12
   2bbe4:	e0fffc17 	ldw	r3,-16(fp)
   2bbe8:	18c00117 	ldw	r3,4(r3)
   2bbec:	10c00035 	stwio	r3,0(r2)
   2bbf0:	e0bff517 	ldw	r2,-44(fp)
   2bbf4:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   2bbf8:	0005303a 	rdctl	r2,status
   2bbfc:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2bc00:	e0fffb17 	ldw	r3,-20(fp)
   2bc04:	00bfff84 	movi	r2,-2
   2bc08:	1884703a 	and	r2,r3,r2
   2bc0c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2bc10:	e0bffa17 	ldw	r2,-24(fp)
   2bc14:	1080004c 	andi	r2,r2,1
   2bc18:	e0fffb17 	ldw	r3,-20(fp)
   2bc1c:	1884b03a 	or	r2,r3,r2
   2bc20:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
   2bc24:	e0bffb17 	ldw	r2,-20(fp)
   2bc28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   2bc2c:	e0bff103 	ldbu	r2,-60(fp)
   2bc30:	10000226 	beq	r2,zero,2bc3c <altera_avalon_uart_read+0x244>
    return -EWOULDBLOCK;
   2bc34:	00bffd44 	movi	r2,-11
   2bc38:	00000106 	br	2bc40 <altera_avalon_uart_read+0x248>
  }
  else {
    return count;
   2bc3c:	e0bff217 	ldw	r2,-56(fp)
  }
}
   2bc40:	e037883a 	mov	sp,fp
   2bc44:	dfc00117 	ldw	ra,4(sp)
   2bc48:	df000017 	ldw	fp,0(sp)
   2bc4c:	dec00204 	addi	sp,sp,8
   2bc50:	f800283a 	ret

0002bc54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bc54:	defffe04 	addi	sp,sp,-8
   2bc58:	dfc00115 	stw	ra,4(sp)
   2bc5c:	df000015 	stw	fp,0(sp)
   2bc60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2bc64:	008000f4 	movhi	r2,3
   2bc68:	10933d04 	addi	r2,r2,19700
   2bc6c:	10800017 	ldw	r2,0(r2)
   2bc70:	10000526 	beq	r2,zero,2bc88 <alt_get_errno+0x34>
   2bc74:	008000f4 	movhi	r2,3
   2bc78:	10933d04 	addi	r2,r2,19700
   2bc7c:	10800017 	ldw	r2,0(r2)
   2bc80:	103ee83a 	callr	r2
   2bc84:	00000206 	br	2bc90 <alt_get_errno+0x3c>
   2bc88:	008000f4 	movhi	r2,3
   2bc8c:	109bfa04 	addi	r2,r2,28648
}
   2bc90:	e037883a 	mov	sp,fp
   2bc94:	dfc00117 	ldw	ra,4(sp)
   2bc98:	df000017 	ldw	fp,0(sp)
   2bc9c:	dec00204 	addi	sp,sp,8
   2bca0:	f800283a 	ret

0002bca4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   2bca4:	defff004 	addi	sp,sp,-64
   2bca8:	dfc00f15 	stw	ra,60(sp)
   2bcac:	df000e15 	stw	fp,56(sp)
   2bcb0:	df000e04 	addi	fp,sp,56
   2bcb4:	e13ffc15 	stw	r4,-16(fp)
   2bcb8:	e17ffd15 	stw	r5,-12(fp)
   2bcbc:	e1bffe15 	stw	r6,-8(fp)
   2bcc0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   2bcc4:	e0bffe17 	ldw	r2,-8(fp)
   2bcc8:	e0bff215 	stw	r2,-56(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   2bccc:	e0bfff17 	ldw	r2,-4(fp)
   2bcd0:	1090000c 	andi	r2,r2,16384
   2bcd4:	e0bff315 	stw	r2,-52(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2bcd8:	00004606 	br	2bdf4 <altera_avalon_uart_write+0x150>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   2bcdc:	e0bffc17 	ldw	r2,-16(fp)
   2bce0:	10800517 	ldw	r2,20(r2)
   2bce4:	10800044 	addi	r2,r2,1
   2bce8:	10800fcc 	andi	r2,r2,63
   2bcec:	e0bff415 	stw	r2,-48(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   2bcf0:	e0bffc17 	ldw	r2,-16(fp)
   2bcf4:	10c00417 	ldw	r3,16(r2)
   2bcf8:	e0bff417 	ldw	r2,-48(fp)
   2bcfc:	18802c1e 	bne	r3,r2,2bdb0 <altera_avalon_uart_write+0x10c>
    {
      if (no_block)
   2bd00:	e0bff317 	ldw	r2,-52(fp)
   2bd04:	10000426 	beq	r2,zero,2bd18 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   2bd08:	002bc540 	call	2bc54 <alt_get_errno>
   2bd0c:	00c002c4 	movi	r3,11
   2bd10:	10c00015 	stw	r3,0(r2)
        break;
   2bd14:	00003906 	br	2bdfc <altera_avalon_uart_write+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bd18:	0005303a 	rdctl	r2,status
   2bd1c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bd20:	e0fff617 	ldw	r3,-40(fp)
   2bd24:	00bfff84 	movi	r2,-2
   2bd28:	1884703a 	and	r2,r3,r2
   2bd2c:	1001703a 	wrctl	status,r2
  
  return context;
   2bd30:	e0bff617 	ldw	r2,-40(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   2bd34:	e0bff515 	stw	r2,-44(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2bd38:	e0bffc17 	ldw	r2,-16(fp)
   2bd3c:	10800117 	ldw	r2,4(r2)
   2bd40:	10c11014 	ori	r3,r2,1088
   2bd44:	e0bffc17 	ldw	r2,-16(fp)
   2bd48:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2bd4c:	e0bffc17 	ldw	r2,-16(fp)
   2bd50:	10800017 	ldw	r2,0(r2)
   2bd54:	10800304 	addi	r2,r2,12
   2bd58:	e0fffc17 	ldw	r3,-16(fp)
   2bd5c:	18c00117 	ldw	r3,4(r3)
   2bd60:	10c00035 	stwio	r3,0(r2)
   2bd64:	e0bff517 	ldw	r2,-44(fp)
   2bd68:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   2bd6c:	0005303a 	rdctl	r2,status
   2bd70:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2bd74:	e0fff817 	ldw	r3,-32(fp)
   2bd78:	00bfff84 	movi	r2,-2
   2bd7c:	1884703a 	and	r2,r3,r2
   2bd80:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2bd84:	e0bff717 	ldw	r2,-36(fp)
   2bd88:	1080004c 	andi	r2,r2,1
   2bd8c:	e0fff817 	ldw	r3,-32(fp)
   2bd90:	1884b03a 	or	r2,r3,r2
   2bd94:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
   2bd98:	e0bff817 	ldw	r2,-32(fp)
   2bd9c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   2bda0:	e0bffc17 	ldw	r2,-16(fp)
   2bda4:	10c00417 	ldw	r3,16(r2)
   2bda8:	e0bff417 	ldw	r2,-48(fp)
   2bdac:	18bffc26 	beq	r3,r2,2bda0 <altera_avalon_uart_write+0xfc>
      }
    }

    count--;
   2bdb0:	e0bff217 	ldw	r2,-56(fp)
   2bdb4:	10bfffc4 	addi	r2,r2,-1
   2bdb8:	e0bff215 	stw	r2,-56(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   2bdbc:	e0bffc17 	ldw	r2,-16(fp)
   2bdc0:	10800517 	ldw	r2,20(r2)
   2bdc4:	e0fffd17 	ldw	r3,-12(fp)
   2bdc8:	18c00003 	ldbu	r3,0(r3)
   2bdcc:	e13ffc17 	ldw	r4,-16(fp)
   2bdd0:	2085883a 	add	r2,r4,r2
   2bdd4:	10801704 	addi	r2,r2,92
   2bdd8:	10c00005 	stb	r3,0(r2)
   2bddc:	e0bffd17 	ldw	r2,-12(fp)
   2bde0:	10800044 	addi	r2,r2,1
   2bde4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
   2bde8:	e0bffc17 	ldw	r2,-16(fp)
   2bdec:	e0fff417 	ldw	r3,-48(fp)
   2bdf0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   2bdf4:	e0bff217 	ldw	r2,-56(fp)
   2bdf8:	103fb81e 	bne	r2,zero,2bcdc <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bdfc:	0005303a 	rdctl	r2,status
   2be00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2be04:	e0fff917 	ldw	r3,-28(fp)
   2be08:	00bfff84 	movi	r2,-2
   2be0c:	1884703a 	and	r2,r3,r2
   2be10:	1001703a 	wrctl	status,r2
  
  return context;
   2be14:	e0bff917 	ldw	r2,-28(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   2be18:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   2be1c:	e0bffc17 	ldw	r2,-16(fp)
   2be20:	10800117 	ldw	r2,4(r2)
   2be24:	10c11014 	ori	r3,r2,1088
   2be28:	e0bffc17 	ldw	r2,-16(fp)
   2be2c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2be30:	e0bffc17 	ldw	r2,-16(fp)
   2be34:	10800017 	ldw	r2,0(r2)
   2be38:	10800304 	addi	r2,r2,12
   2be3c:	e0fffc17 	ldw	r3,-16(fp)
   2be40:	18c00117 	ldw	r3,4(r3)
   2be44:	10c00035 	stwio	r3,0(r2)
   2be48:	e0bff517 	ldw	r2,-44(fp)
   2be4c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   2be50:	0005303a 	rdctl	r2,status
   2be54:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2be58:	e0fffb17 	ldw	r3,-20(fp)
   2be5c:	00bfff84 	movi	r2,-2
   2be60:	1884703a 	and	r2,r3,r2
   2be64:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2be68:	e0bffa17 	ldw	r2,-24(fp)
   2be6c:	1080004c 	andi	r2,r2,1
   2be70:	e0fffb17 	ldw	r3,-20(fp)
   2be74:	1884b03a 	or	r2,r3,r2
   2be78:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
   2be7c:	e0bffb17 	ldw	r2,-20(fp)
   2be80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   2be84:	e0fffe17 	ldw	r3,-8(fp)
   2be88:	e0bff217 	ldw	r2,-56(fp)
   2be8c:	1885c83a 	sub	r2,r3,r2
}
   2be90:	e037883a 	mov	sp,fp
   2be94:	dfc00117 	ldw	ra,4(sp)
   2be98:	df000017 	ldw	fp,0(sp)
   2be9c:	dec00204 	addi	sp,sp,8
   2bea0:	f800283a 	ret

0002bea4 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bea4:	0030e03a 	nextpc	et
   2bea8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2beb4:	0030e03a 	nextpc	et
   2beb8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bec4:	0030e03a 	nextpc	et
   2bec8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bed4:	0030e03a 	nextpc	et
   2bed8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bee4:	0030e03a 	nextpc	et
   2bee8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bef4:	0030e03a 	nextpc	et
   2bef8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf04:	0030e03a 	nextpc	et
   2bf08:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf14:	0030e03a 	nextpc	et
   2bf18:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf24:	0030e03a 	nextpc	et
   2bf28:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf34:	0030e03a 	nextpc	et
   2bf38:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf44:	0030e03a 	nextpc	et
   2bf48:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf54:	0030e03a 	nextpc	et
   2bf58:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf64:	0030e03a 	nextpc	et
   2bf68:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf74:	0030e03a 	nextpc	et
   2bf78:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf84:	0030e03a 	nextpc	et
   2bf88:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bf94:	0030e03a 	nextpc	et
   2bf98:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bfa4:	0030e03a 	nextpc	et
   2bfa8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bfb4:	0030e03a 	nextpc	et
   2bfb8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bfc4:	0030e03a 	nextpc	et
   2bfc8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bfd4:	0030e03a 	nextpc	et
   2bfd8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bfe4:	0030e03a 	nextpc	et
   2bfe8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2bff4:	0030e03a 	nextpc	et
   2bff8:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c004:	0030e03a 	nextpc	et
   2c008:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c014:	0030e03a 	nextpc	et
   2c018:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c024:	0030e03a 	nextpc	et
   2c028:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c034:	0030e03a 	nextpc	et
   2c038:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c044:	0030e03a 	nextpc	et
   2c048:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c054:	0030e03a 	nextpc	et
   2c058:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c064:	0030e03a 	nextpc	et
   2c068:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c074:	0030e03a 	nextpc	et
   2c078:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c084:	0030e03a 	nextpc	et
   2c088:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   2c094:	0030e03a 	nextpc	et
   2c098:	002c0a41 	jmpi	2c0a4 <alt_shadow_non_preemptive_interrupt>
	...

0002c0a4 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
   2c0a4:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
   2c0a8:	dec00038 	rdprs	sp,sp,0
  /*
   * Notify the operating system that we are at interrupt level.
   */
    ALT_OS_INT_ENTER_ASM

    ldw r4, 8(et)               /* load isr_context */
   2c0ac:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
   2c0b0:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
   2c0b4:	ef7fff04 	addi	ea,ea,-4
    eret
   2c0b8:	ef80083a 	eret

0002c0bc <alt_vic_irq_init>:
  * @API Type:              Internal
  * @param pdev             pointer of type alt_vic_dev, main Device Structure.
  * @return                 None
  */
void alt_vic_irq_init (alt_vic_dev* pdev)
{
   2c0bc:	defffd04 	addi	sp,sp,-12
   2c0c0:	df000215 	stw	fp,8(sp)
   2c0c4:	df000204 	addi	fp,sp,8
   2c0c8:	e13fff15 	stw	r4,-4(fp)
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
   2c0cc:	e0bfff17 	ldw	r2,-4(fp)
   2c0d0:	10800117 	ldw	r2,4(r2)
   2c0d4:	1085883a 	add	r2,r2,r2
   2c0d8:	1087883a 	add	r3,r2,r2
   2c0dc:	d0a8d904 	addi	r2,gp,-23708
   2c0e0:	1885883a 	add	r2,r3,r2
   2c0e4:	e0ffff17 	ldw	r3,-4(fp)
   2c0e8:	10c00015 	stw	r3,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
   2c0ec:	e0bfff17 	ldw	r2,-4(fp)
   2c0f0:	10800017 	ldw	r2,0(r2)
   2c0f4:	10802204 	addi	r2,r2,136
   2c0f8:	00ffffc4 	movi	r3,-1
   2c0fc:	10c00035 	stwio	r3,0(r2)

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   2c100:	e03ffe15 	stw	zero,-8(fp)
   2c104:	00001106 	br	2c14c <alt_vic_irq_init+0x90>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
   2c108:	e0bfff17 	ldw	r2,-4(fp)
   2c10c:	10c00017 	ldw	r3,0(r2)
   2c110:	e0bffe17 	ldw	r2,-8(fp)
   2c114:	1085883a 	add	r2,r2,r2
   2c118:	1085883a 	add	r2,r2,r2
   2c11c:	1887883a 	add	r3,r3,r2
   2c120:	e13fff17 	ldw	r4,-4(fp)
   2c124:	e0bffe17 	ldw	r2,-8(fp)
   2c128:	108001c4 	addi	r2,r2,7
   2c12c:	1085883a 	add	r2,r2,r2
   2c130:	1085883a 	add	r2,r2,r2
   2c134:	2085883a 	add	r2,r4,r2
   2c138:	10800017 	ldw	r2,0(r2)
   2c13c:	18800035 	stwio	r2,0(r3)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   2c140:	e0bffe17 	ldw	r2,-8(fp)
   2c144:	10800044 	addi	r2,r2,1
   2c148:	e0bffe15 	stw	r2,-8(fp)
   2c14c:	e0bfff17 	ldw	r2,-4(fp)
   2c150:	10800217 	ldw	r2,8(r2)
   2c154:	e0fffe17 	ldw	r3,-8(fp)
   2c158:	18bfeb36 	bltu	r3,r2,2c108 <alt_vic_irq_init+0x4c>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   2c15c:	e03ffe15 	stw	zero,-8(fp)
   2c160:	00001806 	br	2c1c4 <alt_vic_irq_init+0x108>
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   2c164:	00c000f4 	movhi	r3,3
   2c168:	18ca1804 	addi	r3,r3,10336
   2c16c:	e0bffe17 	ldw	r2,-8(fp)
   2c170:	1085883a 	add	r2,r2,r2
   2c174:	1085883a 	add	r2,r2,r2
   2c178:	1885883a 	add	r2,r3,r2
   2c17c:	10800017 	ldw	r2,0(r2)
   2c180:	1007883a 	mov	r3,r2
   2c184:	e0bfff17 	ldw	r2,-4(fp)
   2c188:	10800517 	ldw	r2,20(r2)
   2c18c:	18800a1e 	bne	r3,r2,2c1b8 <alt_vic_irq_init+0xfc>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
   2c190:	e0bfff17 	ldw	r2,-4(fp)
   2c194:	10800017 	ldw	r2,0(r2)
   2c198:	10802804 	addi	r2,r2,160
   2c19c:	e0ffff17 	ldw	r3,-4(fp)
   2c1a0:	18c00417 	ldw	r3,16(r3)
   2c1a4:	180890fa 	slli	r4,r3,3
   2c1a8:	e0fffe17 	ldw	r3,-8(fp)
   2c1ac:	20c6b03a 	or	r3,r4,r3
   2c1b0:	10c00035 	stwio	r3,0(r2)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
   2c1b4:	00000606 	br	2c1d0 <alt_vic_irq_init+0x114>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   2c1b8:	e0bffe17 	ldw	r2,-8(fp)
   2c1bc:	10800044 	addi	r2,r2,1
   2c1c0:	e0bffe15 	stw	r2,-8(fp)
   2c1c4:	e0bffe17 	ldw	r2,-8(fp)
   2c1c8:	10800230 	cmpltui	r2,r2,8
   2c1cc:	103fe51e 	bne	r2,zero,2c164 <alt_vic_irq_init+0xa8>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
   2c1d0:	e0bfff17 	ldw	r2,-4(fp)
   2c1d4:	10800017 	ldw	r2,0(r2)
   2c1d8:	10802a04 	addi	r2,r2,168
   2c1dc:	e0ffff17 	ldw	r3,-4(fp)
   2c1e0:	18c00617 	ldw	r3,24(r3)
   2c1e4:	10c00035 	stwio	r3,0(r2)
}
   2c1e8:	e037883a 	mov	sp,fp
   2c1ec:	df000017 	ldw	fp,0(sp)
   2c1f0:	dec00104 	addi	sp,sp,4
   2c1f4:	f800283a 	ret

0002c1f8 <alt_ic_isr_register>:
int alt_ic_isr_register(alt_u32 ic_id,
                        alt_u32 irq,
                        alt_isr_func isr,
                        void *isr_context,
                        void* flags)
{
   2c1f8:	defff504 	addi	sp,sp,-44
   2c1fc:	df000a15 	stw	fp,40(sp)
   2c200:	df000a04 	addi	fp,sp,40
   2c204:	e13ffc15 	stw	r4,-16(fp)
   2c208:	e17ffd15 	stw	r5,-12(fp)
   2c20c:	e1bffe15 	stw	r6,-8(fp)
   2c210:	e1ffff15 	stw	r7,-4(fp)
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
   2c214:	e0bffc17 	ldw	r2,-16(fp)
   2c218:	10000226 	beq	r2,zero,2c224 <alt_ic_isr_register+0x2c>
        return -1;
   2c21c:	00bfffc4 	movi	r2,-1
   2c220:	00004706 	br	2c340 <alt_ic_isr_register+0x148>

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
   2c224:	00c000f4 	movhi	r3,3
   2c228:	18dc0104 	addi	r3,r3,28676
   2c22c:	e0bffc17 	ldw	r2,-16(fp)
   2c230:	1085883a 	add	r2,r2,r2
   2c234:	1085883a 	add	r2,r2,r2
   2c238:	1885883a 	add	r2,r3,r2
   2c23c:	10800017 	ldw	r2,0(r2)
   2c240:	e0bff615 	stw	r2,-40(fp)

    if(irq < pdev->num_of_intr_ports)
   2c244:	e0bff617 	ldw	r2,-40(fp)
   2c248:	10800217 	ldw	r2,8(r2)
   2c24c:	e0fffd17 	ldw	r3,-12(fp)
   2c250:	18803a2e 	bgeu	r3,r2,2c33c <alt_ic_isr_register+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c254:	0005303a 	rdctl	r2,status
   2c258:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c25c:	e0fff917 	ldw	r3,-28(fp)
   2c260:	00bfff84 	movi	r2,-2
   2c264:	1884703a 	and	r2,r3,r2
   2c268:	1001703a 	wrctl	status,r2
  
  return context;
   2c26c:	e0bff917 	ldw	r2,-28(fp)
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();
   2c270:	e0bff715 	stw	r2,-36(fp)

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
   2c274:	e0bff617 	ldw	r2,-40(fp)
   2c278:	10c00617 	ldw	r3,24(r2)
   2c27c:	e0bff617 	ldw	r2,-40(fp)
   2c280:	11000517 	ldw	r4,20(r2)
   2c284:	e0bffd17 	ldw	r2,-12(fp)
   2c288:	2085383a 	mul	r2,r4,r2
   2c28c:	1885883a 	add	r2,r3,r2
   2c290:	e0bff815 	stw	r2,-32(fp)

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
   2c294:	e0bff817 	ldw	r2,-32(fp)
   2c298:	10800204 	addi	r2,r2,8
   2c29c:	e0fffe17 	ldw	r3,-8(fp)
   2c2a0:	10c00015 	stw	r3,0(r2)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
   2c2a4:	e0bff817 	ldw	r2,-32(fp)
   2c2a8:	10800304 	addi	r2,r2,12
   2c2ac:	e0ffff17 	ldw	r3,-4(fp)
   2c2b0:	10c00015 	stw	r3,0(r2)

        if(isr)
   2c2b4:	e0bffe17 	ldw	r2,-8(fp)
   2c2b8:	10000826 	beq	r2,zero,2c2dc <alt_ic_isr_register+0xe4>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   2c2bc:	e0bff617 	ldw	r2,-40(fp)
   2c2c0:	10800017 	ldw	r2,0(r2)
   2c2c4:	10802104 	addi	r2,r2,132
   2c2c8:	e0fffd17 	ldw	r3,-12(fp)
   2c2cc:	01000044 	movi	r4,1
   2c2d0:	20c6983a 	sll	r3,r4,r3
   2c2d4:	10c00035 	stwio	r3,0(r2)
   2c2d8:	00000706 	br	2c2f8 <alt_ic_isr_register+0x100>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
   2c2dc:	e0bff617 	ldw	r2,-40(fp)
   2c2e0:	10800017 	ldw	r2,0(r2)
   2c2e4:	10802204 	addi	r2,r2,136
   2c2e8:	e0fffd17 	ldw	r3,-12(fp)
   2c2ec:	01000044 	movi	r4,1
   2c2f0:	20c6983a 	sll	r3,r4,r3
   2c2f4:	10c00035 	stwio	r3,0(r2)
   2c2f8:	e0bff717 	ldw	r2,-36(fp)
   2c2fc:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   2c300:	0005303a 	rdctl	r2,status
   2c304:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   2c308:	e0fffb17 	ldw	r3,-20(fp)
   2c30c:	00bfff84 	movi	r2,-2
   2c310:	1884703a 	and	r2,r3,r2
   2c314:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
   2c318:	e0bffa17 	ldw	r2,-24(fp)
   2c31c:	1080004c 	andi	r2,r2,1
   2c320:	e0fffb17 	ldw	r3,-20(fp)
   2c324:	1884b03a 	or	r2,r3,r2
   2c328:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
   2c32c:	e0bffb17 	ldw	r2,-20(fp)
   2c330:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
   2c334:	0005883a 	mov	r2,zero
   2c338:	00000106 	br	2c340 <alt_ic_isr_register+0x148>
    }

    return -1;
   2c33c:	00bfffc4 	movi	r2,-1
}
   2c340:	e037883a 	mov	sp,fp
   2c344:	df000017 	ldw	fp,0(sp)
   2c348:	dec00104 	addi	sp,sp,4
   2c34c:	f800283a 	ret

0002c350 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   2c350:	defffb04 	addi	sp,sp,-20
   2c354:	df000415 	stw	fp,16(sp)
   2c358:	df000404 	addi	fp,sp,16
   2c35c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   2c360:	008000c4 	movi	r2,3
   2c364:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2c368:	e0fffd17 	ldw	r3,-12(fp)
   2c36c:	008003f4 	movhi	r2,15
   2c370:	10909004 	addi	r2,r2,16960
   2c374:	1885383a 	mul	r2,r3,r2
   2c378:	00c17db4 	movhi	r3,1526
   2c37c:	18f84004 	addi	r3,r3,-7936
   2c380:	1885203a 	divu	r2,r3,r2
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2c384:	00e00034 	movhi	r3,32768
   2c388:	18ffffc4 	addi	r3,r3,-1
   2c38c:	1885203a 	divu	r2,r3,r2
   2c390:	e0ffff17 	ldw	r3,-4(fp)
   2c394:	1885203a 	divu	r2,r3,r2
   2c398:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2c39c:	e0bffe17 	ldw	r2,-8(fp)
   2c3a0:	10002526 	beq	r2,zero,2c438 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
   2c3a4:	e03ffc15 	stw	zero,-16(fp)
   2c3a8:	00001406 	br	2c3fc <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2c3ac:	00a00034 	movhi	r2,32768
   2c3b0:	10bfffc4 	addi	r2,r2,-1
   2c3b4:	10bfffc4 	addi	r2,r2,-1
   2c3b8:	103ffe1e 	bne	r2,zero,2c3b4 <alt_busy_sleep+0x64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2c3bc:	e0fffd17 	ldw	r3,-12(fp)
   2c3c0:	008003f4 	movhi	r2,15
   2c3c4:	10909004 	addi	r2,r2,16960
   2c3c8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2c3cc:	00c17db4 	movhi	r3,1526
   2c3d0:	18f84004 	addi	r3,r3,-7936
   2c3d4:	1885203a 	divu	r2,r3,r2
   2c3d8:	00e00034 	movhi	r3,32768
   2c3dc:	18ffffc4 	addi	r3,r3,-1
   2c3e0:	1885203a 	divu	r2,r3,r2
   2c3e4:	e0ffff17 	ldw	r3,-4(fp)
   2c3e8:	1885c83a 	sub	r2,r3,r2
   2c3ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2c3f0:	e0bffc17 	ldw	r2,-16(fp)
   2c3f4:	10800044 	addi	r2,r2,1
   2c3f8:	e0bffc15 	stw	r2,-16(fp)
   2c3fc:	e0fffc17 	ldw	r3,-16(fp)
   2c400:	e0bffe17 	ldw	r2,-8(fp)
   2c404:	18bfe916 	blt	r3,r2,2c3ac <alt_busy_sleep+0x5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2c408:	e0fffd17 	ldw	r3,-12(fp)
   2c40c:	008003f4 	movhi	r2,15
   2c410:	10909004 	addi	r2,r2,16960
   2c414:	1885383a 	mul	r2,r3,r2
   2c418:	00c17db4 	movhi	r3,1526
   2c41c:	18f84004 	addi	r3,r3,-7936
   2c420:	1887203a 	divu	r3,r3,r2
   2c424:	e0bfff17 	ldw	r2,-4(fp)
   2c428:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2c42c:	10bfffc4 	addi	r2,r2,-1
   2c430:	103ffe1e 	bne	r2,zero,2c42c <alt_busy_sleep+0xdc>
   2c434:	00000b06 	br	2c464 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2c438:	e0fffd17 	ldw	r3,-12(fp)
   2c43c:	008003f4 	movhi	r2,15
   2c440:	10909004 	addi	r2,r2,16960
   2c444:	1885383a 	mul	r2,r3,r2
   2c448:	00c17db4 	movhi	r3,1526
   2c44c:	18f84004 	addi	r3,r3,-7936
   2c450:	1887203a 	divu	r3,r3,r2
   2c454:	e0bfff17 	ldw	r2,-4(fp)
   2c458:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2c45c:	10bfffc4 	addi	r2,r2,-1
   2c460:	00bffe16 	blt	zero,r2,2c45c <alt_busy_sleep+0x10c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2c464:	0005883a 	mov	r2,zero
}
   2c468:	e037883a 	mov	sp,fp
   2c46c:	df000017 	ldw	fp,0(sp)
   2c470:	dec00104 	addi	sp,sp,4
   2c474:	f800283a 	ret

0002c478 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   2c478:	defffd04 	addi	sp,sp,-12
   2c47c:	df000215 	stw	fp,8(sp)
   2c480:	df000204 	addi	fp,sp,8
   2c484:	e13ffe15 	stw	r4,-8(fp)
   2c488:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2c48c:	e037883a 	mov	sp,fp
   2c490:	df000017 	ldw	fp,0(sp)
   2c494:	dec00104 	addi	sp,sp,4
   2c498:	f800283a 	ret

0002c49c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2c49c:	deffff04 	addi	sp,sp,-4
   2c4a0:	df000015 	stw	fp,0(sp)
   2c4a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2c4a8:	e037883a 	mov	sp,fp
   2c4ac:	df000017 	ldw	fp,0(sp)
   2c4b0:	dec00104 	addi	sp,sp,4
   2c4b4:	f800283a 	ret

0002c4b8 <alt_get_errno>:
   2c4b8:	defffe04 	addi	sp,sp,-8
   2c4bc:	dfc00115 	stw	ra,4(sp)
   2c4c0:	df000015 	stw	fp,0(sp)
   2c4c4:	d839883a 	mov	fp,sp
   2c4c8:	008000f4 	movhi	r2,3
   2c4cc:	10933d04 	addi	r2,r2,19700
   2c4d0:	10800017 	ldw	r2,0(r2)
   2c4d4:	10000526 	beq	r2,zero,2c4ec <alt_get_errno+0x34>
   2c4d8:	008000f4 	movhi	r2,3
   2c4dc:	10933d04 	addi	r2,r2,19700
   2c4e0:	10800017 	ldw	r2,0(r2)
   2c4e4:	103ee83a 	callr	r2
   2c4e8:	00000206 	br	2c4f4 <alt_get_errno+0x3c>
   2c4ec:	008000f4 	movhi	r2,3
   2c4f0:	109bfa04 	addi	r2,r2,28648
   2c4f4:	e037883a 	mov	sp,fp
   2c4f8:	dfc00117 	ldw	ra,4(sp)
   2c4fc:	df000017 	ldw	fp,0(sp)
   2c500:	dec00204 	addi	sp,sp,8
   2c504:	f800283a 	ret

0002c508 <alt_dev_llist_insert>:
   2c508:	defffa04 	addi	sp,sp,-24
   2c50c:	dfc00515 	stw	ra,20(sp)
   2c510:	df000415 	stw	fp,16(sp)
   2c514:	df000404 	addi	fp,sp,16
   2c518:	e13ffe15 	stw	r4,-8(fp)
   2c51c:	e17fff15 	stw	r5,-4(fp)
   2c520:	e0bffe17 	ldw	r2,-8(fp)
   2c524:	10000326 	beq	r2,zero,2c534 <alt_dev_llist_insert+0x2c>
   2c528:	e0bffe17 	ldw	r2,-8(fp)
   2c52c:	10800217 	ldw	r2,8(r2)
   2c530:	1000051e 	bne	r2,zero,2c548 <alt_dev_llist_insert+0x40>
   2c534:	002c4b80 	call	2c4b8 <alt_get_errno>
   2c538:	00c00584 	movi	r3,22
   2c53c:	10c00015 	stw	r3,0(r2)
   2c540:	00bffa84 	movi	r2,-22
   2c544:	00001306 	br	2c594 <alt_dev_llist_insert+0x8c>
   2c548:	e0bffe17 	ldw	r2,-8(fp)
   2c54c:	e0ffff17 	ldw	r3,-4(fp)
   2c550:	e0fffc15 	stw	r3,-16(fp)
   2c554:	e0bffd15 	stw	r2,-12(fp)
   2c558:	e0bffd17 	ldw	r2,-12(fp)
   2c55c:	e0fffc17 	ldw	r3,-16(fp)
   2c560:	10c00115 	stw	r3,4(r2)
   2c564:	e0bffc17 	ldw	r2,-16(fp)
   2c568:	10c00017 	ldw	r3,0(r2)
   2c56c:	e0bffd17 	ldw	r2,-12(fp)
   2c570:	10c00015 	stw	r3,0(r2)
   2c574:	e0bffc17 	ldw	r2,-16(fp)
   2c578:	10800017 	ldw	r2,0(r2)
   2c57c:	e0fffd17 	ldw	r3,-12(fp)
   2c580:	10c00115 	stw	r3,4(r2)
   2c584:	e0bffc17 	ldw	r2,-16(fp)
   2c588:	e0fffd17 	ldw	r3,-12(fp)
   2c58c:	10c00015 	stw	r3,0(r2)
   2c590:	0005883a 	mov	r2,zero
   2c594:	e037883a 	mov	sp,fp
   2c598:	dfc00117 	ldw	ra,4(sp)
   2c59c:	df000017 	ldw	fp,0(sp)
   2c5a0:	dec00204 	addi	sp,sp,8
   2c5a4:	f800283a 	ret

0002c5a8 <_do_ctors>:
   2c5a8:	defffd04 	addi	sp,sp,-12
   2c5ac:	dfc00215 	stw	ra,8(sp)
   2c5b0:	df000115 	stw	fp,4(sp)
   2c5b4:	df000104 	addi	fp,sp,4
   2c5b8:	008000f4 	movhi	r2,3
   2c5bc:	10b69f04 	addi	r2,r2,-9604
   2c5c0:	e0bfff15 	stw	r2,-4(fp)
   2c5c4:	00000606 	br	2c5e0 <_do_ctors+0x38>
   2c5c8:	e0bfff17 	ldw	r2,-4(fp)
   2c5cc:	10800017 	ldw	r2,0(r2)
   2c5d0:	103ee83a 	callr	r2
   2c5d4:	e0bfff17 	ldw	r2,-4(fp)
   2c5d8:	10bfff04 	addi	r2,r2,-4
   2c5dc:	e0bfff15 	stw	r2,-4(fp)
   2c5e0:	e0ffff17 	ldw	r3,-4(fp)
   2c5e4:	008000f4 	movhi	r2,3
   2c5e8:	10b6a004 	addi	r2,r2,-9600
   2c5ec:	18bff62e 	bgeu	r3,r2,2c5c8 <_do_ctors+0x20>
   2c5f0:	e037883a 	mov	sp,fp
   2c5f4:	dfc00117 	ldw	ra,4(sp)
   2c5f8:	df000017 	ldw	fp,0(sp)
   2c5fc:	dec00204 	addi	sp,sp,8
   2c600:	f800283a 	ret

0002c604 <_do_dtors>:
   2c604:	defffd04 	addi	sp,sp,-12
   2c608:	dfc00215 	stw	ra,8(sp)
   2c60c:	df000115 	stw	fp,4(sp)
   2c610:	df000104 	addi	fp,sp,4
   2c614:	008000f4 	movhi	r2,3
   2c618:	10b69f04 	addi	r2,r2,-9604
   2c61c:	e0bfff15 	stw	r2,-4(fp)
   2c620:	00000606 	br	2c63c <_do_dtors+0x38>
   2c624:	e0bfff17 	ldw	r2,-4(fp)
   2c628:	10800017 	ldw	r2,0(r2)
   2c62c:	103ee83a 	callr	r2
   2c630:	e0bfff17 	ldw	r2,-4(fp)
   2c634:	10bfff04 	addi	r2,r2,-4
   2c638:	e0bfff15 	stw	r2,-4(fp)
   2c63c:	e0ffff17 	ldw	r3,-4(fp)
   2c640:	008000f4 	movhi	r2,3
   2c644:	10b6a004 	addi	r2,r2,-9600
   2c648:	18bff62e 	bgeu	r3,r2,2c624 <_do_dtors+0x20>
   2c64c:	e037883a 	mov	sp,fp
   2c650:	dfc00117 	ldw	ra,4(sp)
   2c654:	df000017 	ldw	fp,0(sp)
   2c658:	dec00204 	addi	sp,sp,8
   2c65c:	f800283a 	ret

0002c660 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2c660:	defffa04 	addi	sp,sp,-24
   2c664:	dfc00515 	stw	ra,20(sp)
   2c668:	df000415 	stw	fp,16(sp)
   2c66c:	df000404 	addi	fp,sp,16
   2c670:	e13ffe15 	stw	r4,-8(fp)
   2c674:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2c678:	e0bfff17 	ldw	r2,-4(fp)
   2c67c:	10800017 	ldw	r2,0(r2)
   2c680:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2c684:	e13ffe17 	ldw	r4,-8(fp)
   2c688:	0017f680 	call	17f68 <strlen>
   2c68c:	10800044 	addi	r2,r2,1
   2c690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c694:	00000d06 	br	2c6cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2c698:	e0bffc17 	ldw	r2,-16(fp)
   2c69c:	10c00217 	ldw	r3,8(r2)
   2c6a0:	e0bffd17 	ldw	r2,-12(fp)
   2c6a4:	1809883a 	mov	r4,r3
   2c6a8:	e17ffe17 	ldw	r5,-8(fp)
   2c6ac:	100d883a 	mov	r6,r2
   2c6b0:	00179c80 	call	179c8 <memcmp>
   2c6b4:	1000021e 	bne	r2,zero,2c6c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2c6b8:	e0bffc17 	ldw	r2,-16(fp)
   2c6bc:	00000706 	br	2c6dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2c6c0:	e0bffc17 	ldw	r2,-16(fp)
   2c6c4:	10800017 	ldw	r2,0(r2)
   2c6c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c6cc:	e0fffc17 	ldw	r3,-16(fp)
   2c6d0:	e0bfff17 	ldw	r2,-4(fp)
   2c6d4:	18bff01e 	bne	r3,r2,2c698 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2c6d8:	0005883a 	mov	r2,zero
}
   2c6dc:	e037883a 	mov	sp,fp
   2c6e0:	dfc00117 	ldw	ra,4(sp)
   2c6e4:	df000017 	ldw	fp,0(sp)
   2c6e8:	dec00204 	addi	sp,sp,8
   2c6ec:	f800283a 	ret

0002c6f0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   2c6f0:	defffc04 	addi	sp,sp,-16
   2c6f4:	dfc00315 	stw	ra,12(sp)
   2c6f8:	df000215 	stw	fp,8(sp)
   2c6fc:	df000204 	addi	fp,sp,8
   2c700:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   2c704:	e13fff17 	ldw	r4,-4(fp)
   2c708:	d1601d04 	addi	r5,gp,-32652
   2c70c:	002c6600 	call	2c660 <alt_find_dev>
   2c710:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   2c714:	e0bffe17 	ldw	r2,-8(fp)
   2c718:	10000926 	beq	r2,zero,2c740 <alt_flash_open_dev+0x50>
   2c71c:	e0bffe17 	ldw	r2,-8(fp)
   2c720:	10800317 	ldw	r2,12(r2)
   2c724:	10000626 	beq	r2,zero,2c740 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   2c728:	e0bffe17 	ldw	r2,-8(fp)
   2c72c:	10800317 	ldw	r2,12(r2)
   2c730:	e13ffe17 	ldw	r4,-8(fp)
   2c734:	e17fff17 	ldw	r5,-4(fp)
   2c738:	103ee83a 	callr	r2
   2c73c:	00000106 	br	2c744 <alt_flash_open_dev+0x54>
  }

  return dev;
   2c740:	e0bffe17 	ldw	r2,-8(fp)
}
   2c744:	e037883a 	mov	sp,fp
   2c748:	dfc00117 	ldw	ra,4(sp)
   2c74c:	df000017 	ldw	fp,0(sp)
   2c750:	dec00204 	addi	sp,sp,8
   2c754:	f800283a 	ret

0002c758 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   2c758:	defffd04 	addi	sp,sp,-12
   2c75c:	dfc00215 	stw	ra,8(sp)
   2c760:	df000115 	stw	fp,4(sp)
   2c764:	df000104 	addi	fp,sp,4
   2c768:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   2c76c:	e0bfff17 	ldw	r2,-4(fp)
   2c770:	10000726 	beq	r2,zero,2c790 <alt_flash_close_dev+0x38>
   2c774:	e0bfff17 	ldw	r2,-4(fp)
   2c778:	10800417 	ldw	r2,16(r2)
   2c77c:	10000426 	beq	r2,zero,2c790 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
   2c780:	e0bfff17 	ldw	r2,-4(fp)
   2c784:	10800417 	ldw	r2,16(r2)
   2c788:	e13fff17 	ldw	r4,-4(fp)
   2c78c:	103ee83a 	callr	r2
  }
  return;
   2c790:	0001883a 	nop
}
   2c794:	e037883a 	mov	sp,fp
   2c798:	dfc00117 	ldw	ra,4(sp)
   2c79c:	df000017 	ldw	fp,0(sp)
   2c7a0:	dec00204 	addi	sp,sp,8
   2c7a4:	f800283a 	ret

0002c7a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2c7a8:	defffe04 	addi	sp,sp,-8
   2c7ac:	dfc00115 	stw	ra,4(sp)
   2c7b0:	df000015 	stw	fp,0(sp)
   2c7b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2c7b8:	0009883a 	mov	r4,zero
   2c7bc:	01440004 	movi	r5,4096
   2c7c0:	002d5e00 	call	2d5e0 <alt_icache_flush>
#endif
}
   2c7c4:	e037883a 	mov	sp,fp
   2c7c8:	dfc00117 	ldw	ra,4(sp)
   2c7cc:	df000017 	ldw	fp,0(sp)
   2c7d0:	dec00204 	addi	sp,sp,8
   2c7d4:	f800283a 	ret

0002c7d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2c7d8:	defff904 	addi	sp,sp,-28
   2c7dc:	dfc00615 	stw	ra,24(sp)
   2c7e0:	df000515 	stw	fp,20(sp)
   2c7e4:	df000504 	addi	fp,sp,20
   2c7e8:	e13ffc15 	stw	r4,-16(fp)
   2c7ec:	e17ffd15 	stw	r5,-12(fp)
   2c7f0:	e1bffe15 	stw	r6,-8(fp)
   2c7f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2c7f8:	e13ffd17 	ldw	r4,-12(fp)
   2c7fc:	e17ffe17 	ldw	r5,-8(fp)
   2c800:	e1bfff17 	ldw	r6,-4(fp)
   2c804:	002ca2c0 	call	2ca2c <open>
   2c808:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2c80c:	e0bffb17 	ldw	r2,-20(fp)
   2c810:	10001c16 	blt	r2,zero,2c884 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2c814:	00c000f4 	movhi	r3,3
   2c818:	18cd6004 	addi	r3,r3,13696
   2c81c:	e0bffb17 	ldw	r2,-20(fp)
   2c820:	10800324 	muli	r2,r2,12
   2c824:	1885883a 	add	r2,r3,r2
   2c828:	10c00017 	ldw	r3,0(r2)
   2c82c:	e0bffc17 	ldw	r2,-16(fp)
   2c830:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2c834:	00c000f4 	movhi	r3,3
   2c838:	18cd6004 	addi	r3,r3,13696
   2c83c:	e0bffb17 	ldw	r2,-20(fp)
   2c840:	10800324 	muli	r2,r2,12
   2c844:	1885883a 	add	r2,r3,r2
   2c848:	10800104 	addi	r2,r2,4
   2c84c:	10c00017 	ldw	r3,0(r2)
   2c850:	e0bffc17 	ldw	r2,-16(fp)
   2c854:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2c858:	00c000f4 	movhi	r3,3
   2c85c:	18cd6004 	addi	r3,r3,13696
   2c860:	e0bffb17 	ldw	r2,-20(fp)
   2c864:	10800324 	muli	r2,r2,12
   2c868:	1885883a 	add	r2,r3,r2
   2c86c:	10800204 	addi	r2,r2,8
   2c870:	10c00017 	ldw	r3,0(r2)
   2c874:	e0bffc17 	ldw	r2,-16(fp)
   2c878:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2c87c:	e13ffb17 	ldw	r4,-20(fp)
   2c880:	00219b40 	call	219b4 <alt_release_fd>
  }
} 
   2c884:	e037883a 	mov	sp,fp
   2c888:	dfc00117 	ldw	ra,4(sp)
   2c88c:	df000017 	ldw	fp,0(sp)
   2c890:	dec00204 	addi	sp,sp,8
   2c894:	f800283a 	ret

0002c898 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2c898:	defffb04 	addi	sp,sp,-20
   2c89c:	dfc00415 	stw	ra,16(sp)
   2c8a0:	df000315 	stw	fp,12(sp)
   2c8a4:	df000304 	addi	fp,sp,12
   2c8a8:	e13ffd15 	stw	r4,-12(fp)
   2c8ac:	e17ffe15 	stw	r5,-8(fp)
   2c8b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2c8b4:	010000f4 	movhi	r4,3
   2c8b8:	210d6304 	addi	r4,r4,13708
   2c8bc:	e17ffd17 	ldw	r5,-12(fp)
   2c8c0:	01800044 	movi	r6,1
   2c8c4:	01c07fc4 	movi	r7,511
   2c8c8:	002c7d80 	call	2c7d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2c8cc:	010000f4 	movhi	r4,3
   2c8d0:	210d6004 	addi	r4,r4,13696
   2c8d4:	e17ffe17 	ldw	r5,-8(fp)
   2c8d8:	000d883a 	mov	r6,zero
   2c8dc:	01c07fc4 	movi	r7,511
   2c8e0:	002c7d80 	call	2c7d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2c8e4:	010000f4 	movhi	r4,3
   2c8e8:	210d6604 	addi	r4,r4,13720
   2c8ec:	e17fff17 	ldw	r5,-4(fp)
   2c8f0:	01800044 	movi	r6,1
   2c8f4:	01c07fc4 	movi	r7,511
   2c8f8:	002c7d80 	call	2c7d8 <alt_open_fd>
}  
   2c8fc:	e037883a 	mov	sp,fp
   2c900:	dfc00117 	ldw	ra,4(sp)
   2c904:	df000017 	ldw	fp,0(sp)
   2c908:	dec00204 	addi	sp,sp,8
   2c90c:	f800283a 	ret

0002c910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c910:	defffe04 	addi	sp,sp,-8
   2c914:	dfc00115 	stw	ra,4(sp)
   2c918:	df000015 	stw	fp,0(sp)
   2c91c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2c920:	008000f4 	movhi	r2,3
   2c924:	10933d04 	addi	r2,r2,19700
   2c928:	10800017 	ldw	r2,0(r2)
   2c92c:	10000526 	beq	r2,zero,2c944 <alt_get_errno+0x34>
   2c930:	008000f4 	movhi	r2,3
   2c934:	10933d04 	addi	r2,r2,19700
   2c938:	10800017 	ldw	r2,0(r2)
   2c93c:	103ee83a 	callr	r2
   2c940:	00000206 	br	2c94c <alt_get_errno+0x3c>
   2c944:	008000f4 	movhi	r2,3
   2c948:	109bfa04 	addi	r2,r2,28648
}
   2c94c:	e037883a 	mov	sp,fp
   2c950:	dfc00117 	ldw	ra,4(sp)
   2c954:	df000017 	ldw	fp,0(sp)
   2c958:	dec00204 	addi	sp,sp,8
   2c95c:	f800283a 	ret

0002c960 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2c960:	defffd04 	addi	sp,sp,-12
   2c964:	df000215 	stw	fp,8(sp)
   2c968:	df000204 	addi	fp,sp,8
   2c96c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2c970:	e0bfff17 	ldw	r2,-4(fp)
   2c974:	10800217 	ldw	r2,8(r2)
   2c978:	10d00034 	orhi	r3,r2,16384
   2c97c:	e0bfff17 	ldw	r2,-4(fp)
   2c980:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c984:	e03ffe15 	stw	zero,-8(fp)
   2c988:	00001d06 	br	2ca00 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2c98c:	00c000f4 	movhi	r3,3
   2c990:	18cd6004 	addi	r3,r3,13696
   2c994:	e0bffe17 	ldw	r2,-8(fp)
   2c998:	10800324 	muli	r2,r2,12
   2c99c:	1885883a 	add	r2,r3,r2
   2c9a0:	10c00017 	ldw	r3,0(r2)
   2c9a4:	e0bfff17 	ldw	r2,-4(fp)
   2c9a8:	10800017 	ldw	r2,0(r2)
   2c9ac:	1880111e 	bne	r3,r2,2c9f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2c9b0:	00c000f4 	movhi	r3,3
   2c9b4:	18cd6004 	addi	r3,r3,13696
   2c9b8:	e0bffe17 	ldw	r2,-8(fp)
   2c9bc:	10800324 	muli	r2,r2,12
   2c9c0:	1885883a 	add	r2,r3,r2
   2c9c4:	10800204 	addi	r2,r2,8
   2c9c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2c9cc:	1000090e 	bge	r2,zero,2c9f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2c9d0:	e0bffe17 	ldw	r2,-8(fp)
   2c9d4:	10c00324 	muli	r3,r2,12
   2c9d8:	008000f4 	movhi	r2,3
   2c9dc:	108d6004 	addi	r2,r2,13696
   2c9e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2c9e4:	e0bfff17 	ldw	r2,-4(fp)
   2c9e8:	18800226 	beq	r3,r2,2c9f4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2c9ec:	00bffcc4 	movi	r2,-13
   2c9f0:	00000a06 	br	2ca1c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c9f4:	e0bffe17 	ldw	r2,-8(fp)
   2c9f8:	10800044 	addi	r2,r2,1
   2c9fc:	e0bffe15 	stw	r2,-8(fp)
   2ca00:	008000f4 	movhi	r2,3
   2ca04:	10933c04 	addi	r2,r2,19696
   2ca08:	10800017 	ldw	r2,0(r2)
   2ca0c:	1007883a 	mov	r3,r2
   2ca10:	e0bffe17 	ldw	r2,-8(fp)
   2ca14:	18bfdd2e 	bgeu	r3,r2,2c98c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2ca18:	0005883a 	mov	r2,zero
}
   2ca1c:	e037883a 	mov	sp,fp
   2ca20:	df000017 	ldw	fp,0(sp)
   2ca24:	dec00104 	addi	sp,sp,4
   2ca28:	f800283a 	ret

0002ca2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2ca2c:	defff604 	addi	sp,sp,-40
   2ca30:	dfc00915 	stw	ra,36(sp)
   2ca34:	df000815 	stw	fp,32(sp)
   2ca38:	df000804 	addi	fp,sp,32
   2ca3c:	e13ffd15 	stw	r4,-12(fp)
   2ca40:	e17ffe15 	stw	r5,-8(fp)
   2ca44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2ca48:	00bfffc4 	movi	r2,-1
   2ca4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2ca50:	00bffb44 	movi	r2,-19
   2ca54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2ca58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2ca5c:	e13ffd17 	ldw	r4,-12(fp)
   2ca60:	014000f4 	movhi	r5,3
   2ca64:	29533a04 	addi	r5,r5,19688
   2ca68:	002c6600 	call	2c660 <alt_find_dev>
   2ca6c:	e0bff815 	stw	r2,-32(fp)
   2ca70:	e0bff817 	ldw	r2,-32(fp)
   2ca74:	1000051e 	bne	r2,zero,2ca8c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2ca78:	e13ffd17 	ldw	r4,-12(fp)
   2ca7c:	002d4180 	call	2d418 <alt_find_file>
   2ca80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2ca84:	00800044 	movi	r2,1
   2ca88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2ca8c:	e0bff817 	ldw	r2,-32(fp)
   2ca90:	10002926 	beq	r2,zero,2cb38 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2ca94:	e13ff817 	ldw	r4,-32(fp)
   2ca98:	002d52c0 	call	2d52c <alt_get_fd>
   2ca9c:	e0bff915 	stw	r2,-28(fp)
   2caa0:	e0bff917 	ldw	r2,-28(fp)
   2caa4:	1000030e 	bge	r2,zero,2cab4 <open+0x88>
    {
      status = index;
   2caa8:	e0bff917 	ldw	r2,-28(fp)
   2caac:	e0bffa15 	stw	r2,-24(fp)
   2cab0:	00002306 	br	2cb40 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   2cab4:	e0bff917 	ldw	r2,-28(fp)
   2cab8:	10c00324 	muli	r3,r2,12
   2cabc:	008000f4 	movhi	r2,3
   2cac0:	108d6004 	addi	r2,r2,13696
   2cac4:	1885883a 	add	r2,r3,r2
   2cac8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2cacc:	e0fffe17 	ldw	r3,-8(fp)
   2cad0:	00900034 	movhi	r2,16384
   2cad4:	10bfffc4 	addi	r2,r2,-1
   2cad8:	1886703a 	and	r3,r3,r2
   2cadc:	e0bffc17 	ldw	r2,-16(fp)
   2cae0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2cae4:	e0bffb17 	ldw	r2,-20(fp)
   2cae8:	1000051e 	bne	r2,zero,2cb00 <open+0xd4>
   2caec:	e13ffc17 	ldw	r4,-16(fp)
   2caf0:	002c9600 	call	2c960 <alt_file_locked>
   2caf4:	e0bffa15 	stw	r2,-24(fp)
   2caf8:	e0bffa17 	ldw	r2,-24(fp)
   2cafc:	10001016 	blt	r2,zero,2cb40 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2cb00:	e0bff817 	ldw	r2,-32(fp)
   2cb04:	10800317 	ldw	r2,12(r2)
   2cb08:	10000826 	beq	r2,zero,2cb2c <open+0x100>
   2cb0c:	e0bff817 	ldw	r2,-32(fp)
   2cb10:	10800317 	ldw	r2,12(r2)
   2cb14:	e13ffc17 	ldw	r4,-16(fp)
   2cb18:	e17ffd17 	ldw	r5,-12(fp)
   2cb1c:	e1bffe17 	ldw	r6,-8(fp)
   2cb20:	e1ffff17 	ldw	r7,-4(fp)
   2cb24:	103ee83a 	callr	r2
   2cb28:	00000106 	br	2cb30 <open+0x104>
   2cb2c:	0005883a 	mov	r2,zero
   2cb30:	e0bffa15 	stw	r2,-24(fp)
   2cb34:	00000206 	br	2cb40 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2cb38:	00bffb44 	movi	r2,-19
   2cb3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2cb40:	e0bffa17 	ldw	r2,-24(fp)
   2cb44:	1000080e 	bge	r2,zero,2cb68 <open+0x13c>
  {
    alt_release_fd (index);  
   2cb48:	e13ff917 	ldw	r4,-28(fp)
   2cb4c:	00219b40 	call	219b4 <alt_release_fd>
    ALT_ERRNO = -status;
   2cb50:	002c9100 	call	2c910 <alt_get_errno>
   2cb54:	e0fffa17 	ldw	r3,-24(fp)
   2cb58:	00c7c83a 	sub	r3,zero,r3
   2cb5c:	10c00015 	stw	r3,0(r2)
    return -1;
   2cb60:	00bfffc4 	movi	r2,-1
   2cb64:	00000106 	br	2cb6c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2cb68:	e0bff917 	ldw	r2,-28(fp)
}
   2cb6c:	e037883a 	mov	sp,fp
   2cb70:	dfc00117 	ldw	ra,4(sp)
   2cb74:	df000017 	ldw	fp,0(sp)
   2cb78:	dec00204 	addi	sp,sp,8
   2cb7c:	f800283a 	ret

0002cb80 <alt_program_amd>:
   2cb80:	defff704 	addi	sp,sp,-36
   2cb84:	dfc00815 	stw	ra,32(sp)
   2cb88:	df000715 	stw	fp,28(sp)
   2cb8c:	df000704 	addi	fp,sp,28
   2cb90:	e13ffc15 	stw	r4,-16(fp)
   2cb94:	e17ffd15 	stw	r5,-12(fp)
   2cb98:	e1bffe15 	stw	r6,-8(fp)
   2cb9c:	e1ffff15 	stw	r7,-4(fp)
   2cba0:	e03ffa15 	stw	zero,-24(fp)
   2cba4:	e0bffc17 	ldw	r2,-16(fp)
   2cba8:	e0bffb15 	stw	r2,-20(fp)
   2cbac:	008000f4 	movhi	r2,3
   2cbb0:	10b3c504 	addi	r2,r2,-12524
   2cbb4:	d8800015 	stw	r2,0(sp)
   2cbb8:	e13ffb17 	ldw	r4,-20(fp)
   2cbbc:	e17ffe17 	ldw	r5,-8(fp)
   2cbc0:	e1bfff17 	ldw	r6,-4(fp)
   2cbc4:	e1c00217 	ldw	r7,8(fp)
   2cbc8:	002262c0 	call	2262c <alt_flash_program_block>
   2cbcc:	e0bffa15 	stw	r2,-24(fp)
   2cbd0:	e0bffa17 	ldw	r2,-24(fp)
   2cbd4:	e037883a 	mov	sp,fp
   2cbd8:	dfc00117 	ldw	ra,4(sp)
   2cbdc:	df000017 	ldw	fp,0(sp)
   2cbe0:	dec00204 	addi	sp,sp,8
   2cbe4:	f800283a 	ret

0002cbe8 <alt_erase_block_amd>:
   2cbe8:	defff804 	addi	sp,sp,-32
   2cbec:	dfc00715 	stw	ra,28(sp)
   2cbf0:	df000615 	stw	fp,24(sp)
   2cbf4:	df000604 	addi	fp,sp,24
   2cbf8:	e13ffe15 	stw	r4,-8(fp)
   2cbfc:	e17fff15 	stw	r5,-4(fp)
   2cc00:	e03ffa15 	stw	zero,-24(fp)
   2cc04:	e0bffe17 	ldw	r2,-8(fp)
   2cc08:	e0bffc15 	stw	r2,-16(fp)
   2cc0c:	e0bffc17 	ldw	r2,-16(fp)
   2cc10:	10c03317 	ldw	r3,204(r2)
   2cc14:	e0bffc17 	ldw	r2,-16(fp)
   2cc18:	10800a17 	ldw	r2,40(r2)
   2cc1c:	1009883a 	mov	r4,r2
   2cc20:	01415544 	movi	r5,1365
   2cc24:	01802a84 	movi	r6,170
   2cc28:	183ee83a 	callr	r3
   2cc2c:	e0bffc17 	ldw	r2,-16(fp)
   2cc30:	10c03317 	ldw	r3,204(r2)
   2cc34:	e0bffc17 	ldw	r2,-16(fp)
   2cc38:	10800a17 	ldw	r2,40(r2)
   2cc3c:	1009883a 	mov	r4,r2
   2cc40:	0140aa84 	movi	r5,682
   2cc44:	01801544 	movi	r6,85
   2cc48:	183ee83a 	callr	r3
   2cc4c:	e0bffc17 	ldw	r2,-16(fp)
   2cc50:	10c03317 	ldw	r3,204(r2)
   2cc54:	e0bffc17 	ldw	r2,-16(fp)
   2cc58:	10800a17 	ldw	r2,40(r2)
   2cc5c:	1009883a 	mov	r4,r2
   2cc60:	01415544 	movi	r5,1365
   2cc64:	01802004 	movi	r6,128
   2cc68:	183ee83a 	callr	r3
   2cc6c:	e0bffc17 	ldw	r2,-16(fp)
   2cc70:	10c03317 	ldw	r3,204(r2)
   2cc74:	e0bffc17 	ldw	r2,-16(fp)
   2cc78:	10800a17 	ldw	r2,40(r2)
   2cc7c:	1009883a 	mov	r4,r2
   2cc80:	01415544 	movi	r5,1365
   2cc84:	01802a84 	movi	r6,170
   2cc88:	183ee83a 	callr	r3
   2cc8c:	e0bffc17 	ldw	r2,-16(fp)
   2cc90:	10c03317 	ldw	r3,204(r2)
   2cc94:	e0bffc17 	ldw	r2,-16(fp)
   2cc98:	10800a17 	ldw	r2,40(r2)
   2cc9c:	1009883a 	mov	r4,r2
   2cca0:	0140aa84 	movi	r5,682
   2cca4:	01801544 	movi	r6,85
   2cca8:	183ee83a 	callr	r3
   2ccac:	e0bffc17 	ldw	r2,-16(fp)
   2ccb0:	10c03517 	ldw	r3,212(r2)
   2ccb4:	e0bffc17 	ldw	r2,-16(fp)
   2ccb8:	11000a17 	ldw	r4,40(r2)
   2ccbc:	e0bfff17 	ldw	r2,-4(fp)
   2ccc0:	2085883a 	add	r2,r4,r2
   2ccc4:	1009883a 	mov	r4,r2
   2ccc8:	01400c04 	movi	r5,48
   2cccc:	183ee83a 	callr	r3
   2ccd0:	0109c404 	movi	r4,10000
   2ccd4:	0021d7c0 	call	21d7c <usleep>
   2ccd8:	00800c84 	movi	r2,50
   2ccdc:	e0bffb15 	stw	r2,-20(fp)
   2cce0:	e0bffc17 	ldw	r2,-16(fp)
   2cce4:	10c00a17 	ldw	r3,40(r2)
   2cce8:	e0bfff17 	ldw	r2,-4(fp)
   2ccec:	1885883a 	add	r2,r3,r2
   2ccf0:	10800023 	ldbuio	r2,0(r2)
   2ccf4:	10803fcc 	andi	r2,r2,255
   2ccf8:	e0bffd05 	stb	r2,-12(fp)
   2ccfc:	0100fa04 	movi	r4,1000
   2cd00:	0021d7c0 	call	21d7c <usleep>
   2cd04:	e0bffb17 	ldw	r2,-20(fp)
   2cd08:	10bfffc4 	addi	r2,r2,-1
   2cd0c:	e0bffb15 	stw	r2,-20(fp)
   2cd10:	e0bffd03 	ldbu	r2,-12(fp)
   2cd14:	10803fcc 	andi	r2,r2,255
   2cd18:	1080020c 	andi	r2,r2,8
   2cd1c:	1000021e 	bne	r2,zero,2cd28 <alt_erase_block_amd+0x140>
   2cd20:	e0bffb17 	ldw	r2,-20(fp)
   2cd24:	00bfee16 	blt	zero,r2,2cce0 <alt_erase_block_amd+0xf8>
   2cd28:	e0bffc17 	ldw	r2,-16(fp)
   2cd2c:	10803117 	ldw	r2,196(r2)
   2cd30:	e0bffb15 	stw	r2,-20(fp)
   2cd34:	00001506 	br	2cd8c <alt_erase_block_amd+0x1a4>
   2cd38:	e0bffc17 	ldw	r2,-16(fp)
   2cd3c:	10c00a17 	ldw	r3,40(r2)
   2cd40:	e0bfff17 	ldw	r2,-4(fp)
   2cd44:	1885883a 	add	r2,r3,r2
   2cd48:	10800023 	ldbuio	r2,0(r2)
   2cd4c:	10803fcc 	andi	r2,r2,255
   2cd50:	e0bffd05 	stb	r2,-12(fp)
   2cd54:	e0bffd03 	ldbu	r2,-12(fp)
   2cd58:	10803fcc 	andi	r2,r2,255
   2cd5c:	1080201c 	xori	r2,r2,128
   2cd60:	10bfe004 	addi	r2,r2,-128
   2cd64:	10000b16 	blt	r2,zero,2cd94 <alt_erase_block_amd+0x1ac>
   2cd68:	e0bffd03 	ldbu	r2,-12(fp)
   2cd6c:	10803fcc 	andi	r2,r2,255
   2cd70:	1080080c 	andi	r2,r2,32
   2cd74:	1000071e 	bne	r2,zero,2cd94 <alt_erase_block_amd+0x1ac>
   2cd78:	0100fa04 	movi	r4,1000
   2cd7c:	0021d7c0 	call	21d7c <usleep>
   2cd80:	e0bffb17 	ldw	r2,-20(fp)
   2cd84:	10bf0604 	addi	r2,r2,-1000
   2cd88:	e0bffb15 	stw	r2,-20(fp)
   2cd8c:	e0bffb17 	ldw	r2,-20(fp)
   2cd90:	00bfe916 	blt	zero,r2,2cd38 <alt_erase_block_amd+0x150>
   2cd94:	e0bffb17 	ldw	r2,-20(fp)
   2cd98:	00800316 	blt	zero,r2,2cda8 <alt_erase_block_amd+0x1c0>
   2cd9c:	00bfe304 	movi	r2,-116
   2cda0:	e0bffa15 	stw	r2,-24(fp)
   2cda4:	00000e06 	br	2cde0 <alt_erase_block_amd+0x1f8>
   2cda8:	e0bffc17 	ldw	r2,-16(fp)
   2cdac:	10c00a17 	ldw	r3,40(r2)
   2cdb0:	e0bfff17 	ldw	r2,-4(fp)
   2cdb4:	1885883a 	add	r2,r3,r2
   2cdb8:	10800023 	ldbuio	r2,0(r2)
   2cdbc:	10803fcc 	andi	r2,r2,255
   2cdc0:	e0bffd05 	stb	r2,-12(fp)
   2cdc4:	e0bffd03 	ldbu	r2,-12(fp)
   2cdc8:	10803fcc 	andi	r2,r2,255
   2cdcc:	1080201c 	xori	r2,r2,128
   2cdd0:	10bfe004 	addi	r2,r2,-128
   2cdd4:	10000216 	blt	r2,zero,2cde0 <alt_erase_block_amd+0x1f8>
   2cdd8:	00bffec4 	movi	r2,-5
   2cddc:	e0bffa15 	stw	r2,-24(fp)
   2cde0:	e0bffa17 	ldw	r2,-24(fp)
   2cde4:	e037883a 	mov	sp,fp
   2cde8:	dfc00117 	ldw	ra,4(sp)
   2cdec:	df000017 	ldw	fp,0(sp)
   2cdf0:	dec00204 	addi	sp,sp,8
   2cdf4:	f800283a 	ret

0002cdf8 <alt_wait_for_command_to_complete_amd>:
   2cdf8:	defff804 	addi	sp,sp,-32
   2cdfc:	dfc00715 	stw	ra,28(sp)
   2ce00:	df000615 	stw	fp,24(sp)
   2ce04:	df000604 	addi	fp,sp,24
   2ce08:	e13ffd15 	stw	r4,-12(fp)
   2ce0c:	e17ffe15 	stw	r5,-8(fp)
   2ce10:	3005883a 	mov	r2,r6
   2ce14:	e0bfff05 	stb	r2,-4(fp)
   2ce18:	e0bffd17 	ldw	r2,-12(fp)
   2ce1c:	10803017 	ldw	r2,192(r2)
   2ce20:	10801924 	muli	r2,r2,100
   2ce24:	e0bffa15 	stw	r2,-24(fp)
   2ce28:	e03ffb15 	stw	zero,-20(fp)
   2ce2c:	e0bffd17 	ldw	r2,-12(fp)
   2ce30:	10c00a17 	ldw	r3,40(r2)
   2ce34:	e0bffe17 	ldw	r2,-8(fp)
   2ce38:	1885883a 	add	r2,r3,r2
   2ce3c:	10800023 	ldbuio	r2,0(r2)
   2ce40:	10803fcc 	andi	r2,r2,255
   2ce44:	e0bffc05 	stb	r2,-16(fp)
   2ce48:	00001606 	br	2cea4 <alt_wait_for_command_to_complete_amd+0xac>
   2ce4c:	e0bffc03 	ldbu	r2,-16(fp)
   2ce50:	10c03fcc 	andi	r3,r2,255
   2ce54:	e0bfff03 	ldbu	r2,-4(fp)
   2ce58:	1884f03a 	xor	r2,r3,r2
   2ce5c:	1080200c 	andi	r2,r2,128
   2ce60:	10001226 	beq	r2,zero,2ceac <alt_wait_for_command_to_complete_amd+0xb4>
   2ce64:	e0bffc03 	ldbu	r2,-16(fp)
   2ce68:	10803fcc 	andi	r2,r2,255
   2ce6c:	1080080c 	andi	r2,r2,32
   2ce70:	10000e1e 	bne	r2,zero,2ceac <alt_wait_for_command_to_complete_amd+0xb4>
   2ce74:	01000044 	movi	r4,1
   2ce78:	0021d7c0 	call	21d7c <usleep>
   2ce7c:	e0bffa17 	ldw	r2,-24(fp)
   2ce80:	10bfffc4 	addi	r2,r2,-1
   2ce84:	e0bffa15 	stw	r2,-24(fp)
   2ce88:	e0bffd17 	ldw	r2,-12(fp)
   2ce8c:	10c00a17 	ldw	r3,40(r2)
   2ce90:	e0bffe17 	ldw	r2,-8(fp)
   2ce94:	1885883a 	add	r2,r3,r2
   2ce98:	10800023 	ldbuio	r2,0(r2)
   2ce9c:	10803fcc 	andi	r2,r2,255
   2cea0:	e0bffc05 	stb	r2,-16(fp)
   2cea4:	e0bffa17 	ldw	r2,-24(fp)
   2cea8:	00bfe816 	blt	zero,r2,2ce4c <alt_wait_for_command_to_complete_amd+0x54>
   2ceac:	e0bffa17 	ldw	r2,-24(fp)
   2ceb0:	1000031e 	bne	r2,zero,2cec0 <alt_wait_for_command_to_complete_amd+0xc8>
   2ceb4:	00bfe304 	movi	r2,-116
   2ceb8:	e0bffb15 	stw	r2,-20(fp)
   2cebc:	00000f06 	br	2cefc <alt_wait_for_command_to_complete_amd+0x104>
   2cec0:	e0bffd17 	ldw	r2,-12(fp)
   2cec4:	10c00a17 	ldw	r3,40(r2)
   2cec8:	e0bffe17 	ldw	r2,-8(fp)
   2cecc:	1885883a 	add	r2,r3,r2
   2ced0:	10800023 	ldbuio	r2,0(r2)
   2ced4:	10803fcc 	andi	r2,r2,255
   2ced8:	e0bffc05 	stb	r2,-16(fp)
   2cedc:	e0bffc03 	ldbu	r2,-16(fp)
   2cee0:	10c03fcc 	andi	r3,r2,255
   2cee4:	e0bfff03 	ldbu	r2,-4(fp)
   2cee8:	1884f03a 	xor	r2,r3,r2
   2ceec:	1080200c 	andi	r2,r2,128
   2cef0:	10000226 	beq	r2,zero,2cefc <alt_wait_for_command_to_complete_amd+0x104>
   2cef4:	00bffec4 	movi	r2,-5
   2cef8:	e0bffb15 	stw	r2,-20(fp)
   2cefc:	e0bffb17 	ldw	r2,-20(fp)
   2cf00:	e037883a 	mov	sp,fp
   2cf04:	dfc00117 	ldw	ra,4(sp)
   2cf08:	df000017 	ldw	fp,0(sp)
   2cf0c:	dec00204 	addi	sp,sp,8
   2cf10:	f800283a 	ret

0002cf14 <alt_write_word_amd>:
   2cf14:	defff904 	addi	sp,sp,-28
   2cf18:	dfc00615 	stw	ra,24(sp)
   2cf1c:	df000515 	stw	fp,20(sp)
   2cf20:	df000504 	addi	fp,sp,20
   2cf24:	e13ffd15 	stw	r4,-12(fp)
   2cf28:	e17ffe15 	stw	r5,-8(fp)
   2cf2c:	e1bfff15 	stw	r6,-4(fp)
   2cf30:	e03ffb15 	stw	zero,-20(fp)
   2cf34:	e0bffd17 	ldw	r2,-12(fp)
   2cf38:	10c03317 	ldw	r3,204(r2)
   2cf3c:	e0bffd17 	ldw	r2,-12(fp)
   2cf40:	10800a17 	ldw	r2,40(r2)
   2cf44:	1009883a 	mov	r4,r2
   2cf48:	01415544 	movi	r5,1365
   2cf4c:	01802a84 	movi	r6,170
   2cf50:	183ee83a 	callr	r3
   2cf54:	e0bffd17 	ldw	r2,-12(fp)
   2cf58:	10c03317 	ldw	r3,204(r2)
   2cf5c:	e0bffd17 	ldw	r2,-12(fp)
   2cf60:	10800a17 	ldw	r2,40(r2)
   2cf64:	1009883a 	mov	r4,r2
   2cf68:	0140aa84 	movi	r5,682
   2cf6c:	01801544 	movi	r6,85
   2cf70:	183ee83a 	callr	r3
   2cf74:	e0bffd17 	ldw	r2,-12(fp)
   2cf78:	10c03317 	ldw	r3,204(r2)
   2cf7c:	e0bffd17 	ldw	r2,-12(fp)
   2cf80:	10800a17 	ldw	r2,40(r2)
   2cf84:	1009883a 	mov	r4,r2
   2cf88:	01415544 	movi	r5,1365
   2cf8c:	01802804 	movi	r6,160
   2cf90:	183ee83a 	callr	r3
   2cf94:	e0bfff17 	ldw	r2,-4(fp)
   2cf98:	10800003 	ldbu	r2,0(r2)
   2cf9c:	e0bffc05 	stb	r2,-16(fp)
   2cfa0:	e13ffd17 	ldw	r4,-12(fp)
   2cfa4:	e17ffe17 	ldw	r5,-8(fp)
   2cfa8:	e1bfff17 	ldw	r6,-4(fp)
   2cfac:	00224d40 	call	224d4 <alt_write_value_to_flash>
   2cfb0:	e0bffc03 	ldbu	r2,-16(fp)
   2cfb4:	e13ffd17 	ldw	r4,-12(fp)
   2cfb8:	e17ffe17 	ldw	r5,-8(fp)
   2cfbc:	100d883a 	mov	r6,r2
   2cfc0:	002cdf80 	call	2cdf8 <alt_wait_for_command_to_complete_amd>
   2cfc4:	e0bffb15 	stw	r2,-20(fp)
   2cfc8:	e0bffb17 	ldw	r2,-20(fp)
   2cfcc:	e037883a 	mov	sp,fp
   2cfd0:	dfc00117 	ldw	ra,4(sp)
   2cfd4:	df000017 	ldw	fp,0(sp)
   2cfd8:	dec00204 	addi	sp,sp,8
   2cfdc:	f800283a 	ret

0002cfe0 <alt_program_intel>:
   2cfe0:	defff704 	addi	sp,sp,-36
   2cfe4:	dfc00815 	stw	ra,32(sp)
   2cfe8:	df000715 	stw	fp,28(sp)
   2cfec:	df000704 	addi	fp,sp,28
   2cff0:	e13ffc15 	stw	r4,-16(fp)
   2cff4:	e17ffd15 	stw	r5,-12(fp)
   2cff8:	e1bffe15 	stw	r6,-8(fp)
   2cffc:	e1ffff15 	stw	r7,-4(fp)
   2d000:	e03ffa15 	stw	zero,-24(fp)
   2d004:	e0bffc17 	ldw	r2,-16(fp)
   2d008:	e0bffb15 	stw	r2,-20(fp)
   2d00c:	e13ffb17 	ldw	r4,-20(fp)
   2d010:	e17ffd17 	ldw	r5,-12(fp)
   2d014:	002d1c80 	call	2d1c8 <alt_unlock_block_intel>
   2d018:	e0bffa15 	stw	r2,-24(fp)
   2d01c:	e0bffa17 	ldw	r2,-24(fp)
   2d020:	1000091e 	bne	r2,zero,2d048 <alt_program_intel+0x68>
   2d024:	008000f4 	movhi	r2,3
   2d028:	10b4d104 	addi	r2,r2,-11452
   2d02c:	d8800015 	stw	r2,0(sp)
   2d030:	e13ffb17 	ldw	r4,-20(fp)
   2d034:	e17ffe17 	ldw	r5,-8(fp)
   2d038:	e1bfff17 	ldw	r6,-4(fp)
   2d03c:	e1c00217 	ldw	r7,8(fp)
   2d040:	002262c0 	call	2262c <alt_flash_program_block>
   2d044:	e0bffa15 	stw	r2,-24(fp)
   2d048:	e0bffa17 	ldw	r2,-24(fp)
   2d04c:	e037883a 	mov	sp,fp
   2d050:	dfc00117 	ldw	ra,4(sp)
   2d054:	df000017 	ldw	fp,0(sp)
   2d058:	dec00204 	addi	sp,sp,8
   2d05c:	f800283a 	ret

0002d060 <alt_erase_block_intel>:
   2d060:	defff804 	addi	sp,sp,-32
   2d064:	dfc00715 	stw	ra,28(sp)
   2d068:	df000615 	stw	fp,24(sp)
   2d06c:	df000604 	addi	fp,sp,24
   2d070:	e13ffe15 	stw	r4,-8(fp)
   2d074:	e17fff15 	stw	r5,-4(fp)
   2d078:	e03ffa15 	stw	zero,-24(fp)
   2d07c:	e0bffe17 	ldw	r2,-8(fp)
   2d080:	e0bffc15 	stw	r2,-16(fp)
   2d084:	e0bffc17 	ldw	r2,-16(fp)
   2d088:	10803117 	ldw	r2,196(r2)
   2d08c:	e0bffb15 	stw	r2,-20(fp)
   2d090:	e13ffc17 	ldw	r4,-16(fp)
   2d094:	e17fff17 	ldw	r5,-4(fp)
   2d098:	002d1c80 	call	2d1c8 <alt_unlock_block_intel>
   2d09c:	e0bffa15 	stw	r2,-24(fp)
   2d0a0:	e0bffa17 	ldw	r2,-24(fp)
   2d0a4:	1000421e 	bne	r2,zero,2d1b0 <alt_erase_block_intel+0x150>
   2d0a8:	e0bffc17 	ldw	r2,-16(fp)
   2d0ac:	10c03517 	ldw	r3,212(r2)
   2d0b0:	e0bffc17 	ldw	r2,-16(fp)
   2d0b4:	11000a17 	ldw	r4,40(r2)
   2d0b8:	e0bfff17 	ldw	r2,-4(fp)
   2d0bc:	2085883a 	add	r2,r4,r2
   2d0c0:	1009883a 	mov	r4,r2
   2d0c4:	01400804 	movi	r5,32
   2d0c8:	183ee83a 	callr	r3
   2d0cc:	e0bffc17 	ldw	r2,-16(fp)
   2d0d0:	10c03517 	ldw	r3,212(r2)
   2d0d4:	e0bffc17 	ldw	r2,-16(fp)
   2d0d8:	11000a17 	ldw	r4,40(r2)
   2d0dc:	e0bfff17 	ldw	r2,-4(fp)
   2d0e0:	2085883a 	add	r2,r4,r2
   2d0e4:	1009883a 	mov	r4,r2
   2d0e8:	01403404 	movi	r5,208
   2d0ec:	183ee83a 	callr	r3
   2d0f0:	e0bffc17 	ldw	r2,-16(fp)
   2d0f4:	10c00a17 	ldw	r3,40(r2)
   2d0f8:	e0bfff17 	ldw	r2,-4(fp)
   2d0fc:	1885883a 	add	r2,r3,r2
   2d100:	10800023 	ldbuio	r2,0(r2)
   2d104:	10803fcc 	andi	r2,r2,255
   2d108:	e0bffd05 	stb	r2,-12(fp)
   2d10c:	e0bffd03 	ldbu	r2,-12(fp)
   2d110:	10803fcc 	andi	r2,r2,255
   2d114:	1080201c 	xori	r2,r2,128
   2d118:	10bfe004 	addi	r2,r2,-128
   2d11c:	10000816 	blt	r2,zero,2d140 <alt_erase_block_intel+0xe0>
   2d120:	0100fa04 	movi	r4,1000
   2d124:	0021d7c0 	call	21d7c <usleep>
   2d128:	e0bffb17 	ldw	r2,-20(fp)
   2d12c:	10bf0604 	addi	r2,r2,-1000
   2d130:	e0bffb15 	stw	r2,-20(fp)
   2d134:	e0bffb17 	ldw	r2,-20(fp)
   2d138:	00bfed16 	blt	zero,r2,2d0f0 <alt_erase_block_intel+0x90>
   2d13c:	00000106 	br	2d144 <alt_erase_block_intel+0xe4>
   2d140:	0001883a 	nop
   2d144:	e0bffb17 	ldw	r2,-20(fp)
   2d148:	00800316 	blt	zero,r2,2d158 <alt_erase_block_intel+0xf8>
   2d14c:	00bfe304 	movi	r2,-116
   2d150:	e0bffa15 	stw	r2,-24(fp)
   2d154:	00000d06 	br	2d18c <alt_erase_block_intel+0x12c>
   2d158:	e0bffd03 	ldbu	r2,-12(fp)
   2d15c:	10803fcc 	andi	r2,r2,255
   2d160:	10801fcc 	andi	r2,r2,127
   2d164:	10000926 	beq	r2,zero,2d18c <alt_erase_block_intel+0x12c>
   2d168:	00bffec4 	movi	r2,-5
   2d16c:	e0bffa15 	stw	r2,-24(fp)
   2d170:	e0bffc17 	ldw	r2,-16(fp)
   2d174:	10c00a17 	ldw	r3,40(r2)
   2d178:	e0bfff17 	ldw	r2,-4(fp)
   2d17c:	1885883a 	add	r2,r3,r2
   2d180:	10800023 	ldbuio	r2,0(r2)
   2d184:	10803fcc 	andi	r2,r2,255
   2d188:	e0bffd05 	stb	r2,-12(fp)
   2d18c:	e0bffc17 	ldw	r2,-16(fp)
   2d190:	10c03517 	ldw	r3,212(r2)
   2d194:	e0bffc17 	ldw	r2,-16(fp)
   2d198:	11000a17 	ldw	r4,40(r2)
   2d19c:	e0bfff17 	ldw	r2,-4(fp)
   2d1a0:	2085883a 	add	r2,r4,r2
   2d1a4:	1009883a 	mov	r4,r2
   2d1a8:	01403fc4 	movi	r5,255
   2d1ac:	183ee83a 	callr	r3
   2d1b0:	e0bffa17 	ldw	r2,-24(fp)
   2d1b4:	e037883a 	mov	sp,fp
   2d1b8:	dfc00117 	ldw	ra,4(sp)
   2d1bc:	df000017 	ldw	fp,0(sp)
   2d1c0:	dec00204 	addi	sp,sp,8
   2d1c4:	f800283a 	ret

0002d1c8 <alt_unlock_block_intel>:
   2d1c8:	defff904 	addi	sp,sp,-28
   2d1cc:	dfc00615 	stw	ra,24(sp)
   2d1d0:	df000515 	stw	fp,20(sp)
   2d1d4:	df000504 	addi	fp,sp,20
   2d1d8:	e13ffe15 	stw	r4,-8(fp)
   2d1dc:	e17fff15 	stw	r5,-4(fp)
   2d1e0:	e03ffb15 	stw	zero,-20(fp)
   2d1e4:	e0bffe17 	ldw	r2,-8(fp)
   2d1e8:	10803017 	ldw	r2,192(r2)
   2d1ec:	10801924 	muli	r2,r2,100
   2d1f0:	e0bffc15 	stw	r2,-16(fp)
   2d1f4:	e0bffe17 	ldw	r2,-8(fp)
   2d1f8:	10c03517 	ldw	r3,212(r2)
   2d1fc:	e0bffe17 	ldw	r2,-8(fp)
   2d200:	11000a17 	ldw	r4,40(r2)
   2d204:	e0bfff17 	ldw	r2,-4(fp)
   2d208:	2085883a 	add	r2,r4,r2
   2d20c:	1009883a 	mov	r4,r2
   2d210:	01402404 	movi	r5,144
   2d214:	183ee83a 	callr	r3
   2d218:	e0bffe17 	ldw	r2,-8(fp)
   2d21c:	10c00a17 	ldw	r3,40(r2)
   2d220:	e0bfff17 	ldw	r2,-4(fp)
   2d224:	10800104 	addi	r2,r2,4
   2d228:	1885883a 	add	r2,r3,r2
   2d22c:	10800023 	ldbuio	r2,0(r2)
   2d230:	10803fcc 	andi	r2,r2,255
   2d234:	e0bffd05 	stb	r2,-12(fp)
   2d238:	e0bffd03 	ldbu	r2,-12(fp)
   2d23c:	1080004c 	andi	r2,r2,1
   2d240:	10003126 	beq	r2,zero,2d308 <alt_unlock_block_intel+0x140>
   2d244:	e0bffe17 	ldw	r2,-8(fp)
   2d248:	10c03517 	ldw	r3,212(r2)
   2d24c:	e0bffe17 	ldw	r2,-8(fp)
   2d250:	11000a17 	ldw	r4,40(r2)
   2d254:	e0bfff17 	ldw	r2,-4(fp)
   2d258:	2085883a 	add	r2,r4,r2
   2d25c:	1009883a 	mov	r4,r2
   2d260:	01401804 	movi	r5,96
   2d264:	183ee83a 	callr	r3
   2d268:	e0bffe17 	ldw	r2,-8(fp)
   2d26c:	10c03517 	ldw	r3,212(r2)
   2d270:	e0bffe17 	ldw	r2,-8(fp)
   2d274:	11000a17 	ldw	r4,40(r2)
   2d278:	e0bfff17 	ldw	r2,-4(fp)
   2d27c:	2085883a 	add	r2,r4,r2
   2d280:	1009883a 	mov	r4,r2
   2d284:	01403404 	movi	r5,208
   2d288:	183ee83a 	callr	r3
   2d28c:	e0bffe17 	ldw	r2,-8(fp)
   2d290:	10c00a17 	ldw	r3,40(r2)
   2d294:	e0bfff17 	ldw	r2,-4(fp)
   2d298:	1885883a 	add	r2,r3,r2
   2d29c:	10800023 	ldbuio	r2,0(r2)
   2d2a0:	10803fcc 	andi	r2,r2,255
   2d2a4:	e0bffd45 	stb	r2,-11(fp)
   2d2a8:	e0bffd43 	ldbu	r2,-11(fp)
   2d2ac:	10803fcc 	andi	r2,r2,255
   2d2b0:	1080201c 	xori	r2,r2,128
   2d2b4:	10bfe004 	addi	r2,r2,-128
   2d2b8:	10000816 	blt	r2,zero,2d2dc <alt_unlock_block_intel+0x114>
   2d2bc:	e0bffc17 	ldw	r2,-16(fp)
   2d2c0:	10bfffc4 	addi	r2,r2,-1
   2d2c4:	e0bffc15 	stw	r2,-16(fp)
   2d2c8:	01000044 	movi	r4,1
   2d2cc:	0021d7c0 	call	21d7c <usleep>
   2d2d0:	e0bffc17 	ldw	r2,-16(fp)
   2d2d4:	00bfed16 	blt	zero,r2,2d28c <alt_unlock_block_intel+0xc4>
   2d2d8:	00000106 	br	2d2e0 <alt_unlock_block_intel+0x118>
   2d2dc:	0001883a 	nop
   2d2e0:	e0bffc17 	ldw	r2,-16(fp)
   2d2e4:	1000031e 	bne	r2,zero,2d2f4 <alt_unlock_block_intel+0x12c>
   2d2e8:	00bfe304 	movi	r2,-116
   2d2ec:	e0bffb15 	stw	r2,-20(fp)
   2d2f0:	00000506 	br	2d308 <alt_unlock_block_intel+0x140>
   2d2f4:	e0bffd43 	ldbu	r2,-11(fp)
   2d2f8:	10801fcc 	andi	r2,r2,127
   2d2fc:	10000226 	beq	r2,zero,2d308 <alt_unlock_block_intel+0x140>
   2d300:	00bffec4 	movi	r2,-5
   2d304:	e0bffb15 	stw	r2,-20(fp)
   2d308:	e0bffe17 	ldw	r2,-8(fp)
   2d30c:	10c03517 	ldw	r3,212(r2)
   2d310:	e0bffe17 	ldw	r2,-8(fp)
   2d314:	11000a17 	ldw	r4,40(r2)
   2d318:	e0bfff17 	ldw	r2,-4(fp)
   2d31c:	2085883a 	add	r2,r4,r2
   2d320:	1009883a 	mov	r4,r2
   2d324:	01403fc4 	movi	r5,255
   2d328:	183ee83a 	callr	r3
   2d32c:	e0bffb17 	ldw	r2,-20(fp)
   2d330:	e037883a 	mov	sp,fp
   2d334:	dfc00117 	ldw	ra,4(sp)
   2d338:	df000017 	ldw	fp,0(sp)
   2d33c:	dec00204 	addi	sp,sp,8
   2d340:	f800283a 	ret

0002d344 <alt_write_word_intel>:
   2d344:	defff904 	addi	sp,sp,-28
   2d348:	dfc00615 	stw	ra,24(sp)
   2d34c:	df000515 	stw	fp,20(sp)
   2d350:	df000504 	addi	fp,sp,20
   2d354:	e13ffd15 	stw	r4,-12(fp)
   2d358:	e17ffe15 	stw	r5,-8(fp)
   2d35c:	e1bfff15 	stw	r6,-4(fp)
   2d360:	e03ffb15 	stw	zero,-20(fp)
   2d364:	e0bffd17 	ldw	r2,-12(fp)
   2d368:	10c03517 	ldw	r3,212(r2)
   2d36c:	e0bffd17 	ldw	r2,-12(fp)
   2d370:	11000a17 	ldw	r4,40(r2)
   2d374:	e0bffe17 	ldw	r2,-8(fp)
   2d378:	2085883a 	add	r2,r4,r2
   2d37c:	1009883a 	mov	r4,r2
   2d380:	01401004 	movi	r5,64
   2d384:	183ee83a 	callr	r3
   2d388:	e13ffd17 	ldw	r4,-12(fp)
   2d38c:	e17ffe17 	ldw	r5,-8(fp)
   2d390:	e1bfff17 	ldw	r6,-4(fp)
   2d394:	00224d40 	call	224d4 <alt_write_value_to_flash>
   2d398:	e0bffd17 	ldw	r2,-12(fp)
   2d39c:	10c00a17 	ldw	r3,40(r2)
   2d3a0:	e0bffe17 	ldw	r2,-8(fp)
   2d3a4:	1885883a 	add	r2,r3,r2
   2d3a8:	10800023 	ldbuio	r2,0(r2)
   2d3ac:	10803fcc 	andi	r2,r2,255
   2d3b0:	e0bffc05 	stb	r2,-16(fp)
   2d3b4:	e0bffc03 	ldbu	r2,-16(fp)
   2d3b8:	10803fcc 	andi	r2,r2,255
   2d3bc:	1080201c 	xori	r2,r2,128
   2d3c0:	10bfe004 	addi	r2,r2,-128
   2d3c4:	103ff40e 	bge	r2,zero,2d398 <alt_write_word_intel+0x54>
   2d3c8:	e0bffc03 	ldbu	r2,-16(fp)
   2d3cc:	10801fcc 	andi	r2,r2,127
   2d3d0:	10000226 	beq	r2,zero,2d3dc <alt_write_word_intel+0x98>
   2d3d4:	00bffec4 	movi	r2,-5
   2d3d8:	e0bffb15 	stw	r2,-20(fp)
   2d3dc:	e0bffd17 	ldw	r2,-12(fp)
   2d3e0:	10c03517 	ldw	r3,212(r2)
   2d3e4:	e0bffd17 	ldw	r2,-12(fp)
   2d3e8:	11000a17 	ldw	r4,40(r2)
   2d3ec:	e0bffe17 	ldw	r2,-8(fp)
   2d3f0:	2085883a 	add	r2,r4,r2
   2d3f4:	1009883a 	mov	r4,r2
   2d3f8:	01403fc4 	movi	r5,255
   2d3fc:	183ee83a 	callr	r3
   2d400:	e0bffb17 	ldw	r2,-20(fp)
   2d404:	e037883a 	mov	sp,fp
   2d408:	dfc00117 	ldw	ra,4(sp)
   2d40c:	df000017 	ldw	fp,0(sp)
   2d410:	dec00204 	addi	sp,sp,8
   2d414:	f800283a 	ret

0002d418 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2d418:	defffb04 	addi	sp,sp,-20
   2d41c:	dfc00415 	stw	ra,16(sp)
   2d420:	df000315 	stw	fp,12(sp)
   2d424:	df000304 	addi	fp,sp,12
   2d428:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2d42c:	008000f4 	movhi	r2,3
   2d430:	10933804 	addi	r2,r2,19680
   2d434:	10800017 	ldw	r2,0(r2)
   2d438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2d43c:	00003106 	br	2d504 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2d440:	e0bffd17 	ldw	r2,-12(fp)
   2d444:	10800217 	ldw	r2,8(r2)
   2d448:	1009883a 	mov	r4,r2
   2d44c:	0017f680 	call	17f68 <strlen>
   2d450:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2d454:	e0bffd17 	ldw	r2,-12(fp)
   2d458:	10c00217 	ldw	r3,8(r2)
   2d45c:	e0bffe17 	ldw	r2,-8(fp)
   2d460:	10bfffc4 	addi	r2,r2,-1
   2d464:	1885883a 	add	r2,r3,r2
   2d468:	10800003 	ldbu	r2,0(r2)
   2d46c:	10803fcc 	andi	r2,r2,255
   2d470:	1080201c 	xori	r2,r2,128
   2d474:	10bfe004 	addi	r2,r2,-128
   2d478:	10800bd8 	cmpnei	r2,r2,47
   2d47c:	1000031e 	bne	r2,zero,2d48c <alt_find_file+0x74>
    {
      len -= 1;
   2d480:	e0bffe17 	ldw	r2,-8(fp)
   2d484:	10bfffc4 	addi	r2,r2,-1
   2d488:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2d48c:	e0bffe17 	ldw	r2,-8(fp)
   2d490:	e0ffff17 	ldw	r3,-4(fp)
   2d494:	1885883a 	add	r2,r3,r2
   2d498:	10800003 	ldbu	r2,0(r2)
   2d49c:	10803fcc 	andi	r2,r2,255
   2d4a0:	1080201c 	xori	r2,r2,128
   2d4a4:	10bfe004 	addi	r2,r2,-128
   2d4a8:	10800be0 	cmpeqi	r2,r2,47
   2d4ac:	1000081e 	bne	r2,zero,2d4d0 <alt_find_file+0xb8>
   2d4b0:	e0bffe17 	ldw	r2,-8(fp)
   2d4b4:	e0ffff17 	ldw	r3,-4(fp)
   2d4b8:	1885883a 	add	r2,r3,r2
   2d4bc:	10800003 	ldbu	r2,0(r2)
   2d4c0:	10803fcc 	andi	r2,r2,255
   2d4c4:	1080201c 	xori	r2,r2,128
   2d4c8:	10bfe004 	addi	r2,r2,-128
   2d4cc:	10000a1e 	bne	r2,zero,2d4f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   2d4d0:	e0bffd17 	ldw	r2,-12(fp)
   2d4d4:	10c00217 	ldw	r3,8(r2)
   2d4d8:	e0bffe17 	ldw	r2,-8(fp)
   2d4dc:	1809883a 	mov	r4,r3
   2d4e0:	e17fff17 	ldw	r5,-4(fp)
   2d4e4:	100d883a 	mov	r6,r2
   2d4e8:	00179c80 	call	179c8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2d4ec:	1000021e 	bne	r2,zero,2d4f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2d4f0:	e0bffd17 	ldw	r2,-12(fp)
   2d4f4:	00000806 	br	2d518 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   2d4f8:	e0bffd17 	ldw	r2,-12(fp)
   2d4fc:	10800017 	ldw	r2,0(r2)
   2d500:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2d504:	e0fffd17 	ldw	r3,-12(fp)
   2d508:	008000f4 	movhi	r2,3
   2d50c:	10933804 	addi	r2,r2,19680
   2d510:	18bfcb1e 	bne	r3,r2,2d440 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2d514:	0005883a 	mov	r2,zero
}
   2d518:	e037883a 	mov	sp,fp
   2d51c:	dfc00117 	ldw	ra,4(sp)
   2d520:	df000017 	ldw	fp,0(sp)
   2d524:	dec00204 	addi	sp,sp,8
   2d528:	f800283a 	ret

0002d52c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2d52c:	defffc04 	addi	sp,sp,-16
   2d530:	df000315 	stw	fp,12(sp)
   2d534:	df000304 	addi	fp,sp,12
   2d538:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2d53c:	00bffa04 	movi	r2,-24
   2d540:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2d544:	e03ffd15 	stw	zero,-12(fp)
   2d548:	00001d06 	br	2d5c0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   2d54c:	00c000f4 	movhi	r3,3
   2d550:	18cd6004 	addi	r3,r3,13696
   2d554:	e0bffd17 	ldw	r2,-12(fp)
   2d558:	10800324 	muli	r2,r2,12
   2d55c:	1885883a 	add	r2,r3,r2
   2d560:	10800017 	ldw	r2,0(r2)
   2d564:	1000131e 	bne	r2,zero,2d5b4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   2d568:	00c000f4 	movhi	r3,3
   2d56c:	18cd6004 	addi	r3,r3,13696
   2d570:	e0bffd17 	ldw	r2,-12(fp)
   2d574:	10800324 	muli	r2,r2,12
   2d578:	1885883a 	add	r2,r3,r2
   2d57c:	e0ffff17 	ldw	r3,-4(fp)
   2d580:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2d584:	008000f4 	movhi	r2,3
   2d588:	10933c04 	addi	r2,r2,19696
   2d58c:	10c00017 	ldw	r3,0(r2)
   2d590:	e0bffd17 	ldw	r2,-12(fp)
   2d594:	1880040e 	bge	r3,r2,2d5a8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   2d598:	008000f4 	movhi	r2,3
   2d59c:	10933c04 	addi	r2,r2,19696
   2d5a0:	e0fffd17 	ldw	r3,-12(fp)
   2d5a4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2d5a8:	e0bffd17 	ldw	r2,-12(fp)
   2d5ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2d5b0:	00000606 	br	2d5cc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2d5b4:	e0bffd17 	ldw	r2,-12(fp)
   2d5b8:	10800044 	addi	r2,r2,1
   2d5bc:	e0bffd15 	stw	r2,-12(fp)
   2d5c0:	e0bffd17 	ldw	r2,-12(fp)
   2d5c4:	10800810 	cmplti	r2,r2,32
   2d5c8:	103fe01e 	bne	r2,zero,2d54c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2d5cc:	e0bffe17 	ldw	r2,-8(fp)
}
   2d5d0:	e037883a 	mov	sp,fp
   2d5d4:	df000017 	ldw	fp,0(sp)
   2d5d8:	dec00104 	addi	sp,sp,4
   2d5dc:	f800283a 	ret

0002d5e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2d5e0:	defffb04 	addi	sp,sp,-20
   2d5e4:	df000415 	stw	fp,16(sp)
   2d5e8:	df000404 	addi	fp,sp,16
   2d5ec:	e13ffe15 	stw	r4,-8(fp)
   2d5f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2d5f4:	e0bfff17 	ldw	r2,-4(fp)
   2d5f8:	10840070 	cmpltui	r2,r2,4097
   2d5fc:	1000021e 	bne	r2,zero,2d608 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2d600:	00840004 	movi	r2,4096
   2d604:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2d608:	e0fffe17 	ldw	r3,-8(fp)
   2d60c:	e0bfff17 	ldw	r2,-4(fp)
   2d610:	1885883a 	add	r2,r3,r2
   2d614:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2d618:	e0bffe17 	ldw	r2,-8(fp)
   2d61c:	e0bffc15 	stw	r2,-16(fp)
   2d620:	00000506 	br	2d638 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2d624:	e0bffc17 	ldw	r2,-16(fp)
   2d628:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2d62c:	e0bffc17 	ldw	r2,-16(fp)
   2d630:	10800804 	addi	r2,r2,32
   2d634:	e0bffc15 	stw	r2,-16(fp)
   2d638:	e0fffc17 	ldw	r3,-16(fp)
   2d63c:	e0bffd17 	ldw	r2,-12(fp)
   2d640:	18bff836 	bltu	r3,r2,2d624 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2d644:	e0bffe17 	ldw	r2,-8(fp)
   2d648:	108007cc 	andi	r2,r2,31
   2d64c:	10000226 	beq	r2,zero,2d658 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2d650:	e0bffc17 	ldw	r2,-16(fp)
   2d654:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2d658:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2d65c:	e037883a 	mov	sp,fp
   2d660:	df000017 	ldw	fp,0(sp)
   2d664:	dec00104 	addi	sp,sp,4
   2d668:	f800283a 	ret

0002d66c <atexit>:
   2d66c:	200b883a 	mov	r5,r4
   2d670:	000d883a 	mov	r6,zero
   2d674:	0009883a 	mov	r4,zero
   2d678:	000f883a 	mov	r7,zero
   2d67c:	002d7741 	jmpi	2d774 <__register_exitproc>

0002d680 <exit>:
   2d680:	defffe04 	addi	sp,sp,-8
   2d684:	000b883a 	mov	r5,zero
   2d688:	dc000015 	stw	r16,0(sp)
   2d68c:	dfc00115 	stw	ra,4(sp)
   2d690:	2021883a 	mov	r16,r4
   2d694:	002d8a40 	call	2d8a4 <__call_exitprocs>
   2d698:	008000f4 	movhi	r2,3
   2d69c:	10933304 	addi	r2,r2,19660
   2d6a0:	11000017 	ldw	r4,0(r2)
   2d6a4:	20800f17 	ldw	r2,60(r4)
   2d6a8:	10000126 	beq	r2,zero,2d6b0 <exit+0x30>
   2d6ac:	103ee83a 	callr	r2
   2d6b0:	8009883a 	mov	r4,r16
   2d6b4:	002da440 	call	2da44 <_exit>

0002d6b8 <malloc>:
   2d6b8:	008000f4 	movhi	r2,3
   2d6bc:	10933404 	addi	r2,r2,19664
   2d6c0:	200b883a 	mov	r5,r4
   2d6c4:	11000017 	ldw	r4,0(r2)
   2d6c8:	001cbf41 	jmpi	1cbf4 <_malloc_r>

0002d6cc <free>:
   2d6cc:	008000f4 	movhi	r2,3
   2d6d0:	10933404 	addi	r2,r2,19664
   2d6d4:	200b883a 	mov	r5,r4
   2d6d8:	11000017 	ldw	r4,0(r2)
   2d6dc:	001c05c1 	jmpi	1c05c <_free_r>

0002d6e0 <strcpy>:
   2d6e0:	2906b03a 	or	r3,r5,r4
   2d6e4:	18c000cc 	andi	r3,r3,3
   2d6e8:	2005883a 	mov	r2,r4
   2d6ec:	18001a1e 	bne	r3,zero,2d758 <strcpy+0x78>
   2d6f0:	29800017 	ldw	r6,0(r5)
   2d6f4:	02bfbff4 	movhi	r10,65279
   2d6f8:	52bfbfc4 	addi	r10,r10,-257
   2d6fc:	02602074 	movhi	r9,32897
   2d700:	4a602004 	addi	r9,r9,-32640
   2d704:	0188303a 	nor	r4,zero,r6
   2d708:	3287883a 	add	r3,r6,r10
   2d70c:	20c6703a 	and	r3,r4,r3
   2d710:	1a46703a 	and	r3,r3,r9
   2d714:	1800101e 	bne	r3,zero,2d758 <strcpy+0x78>
   2d718:	1007883a 	mov	r3,r2
   2d71c:	19800015 	stw	r6,0(r3)
   2d720:	29400104 	addi	r5,r5,4
   2d724:	29800017 	ldw	r6,0(r5)
   2d728:	18c00104 	addi	r3,r3,4
   2d72c:	0190303a 	nor	r8,zero,r6
   2d730:	328f883a 	add	r7,r6,r10
   2d734:	41ce703a 	and	r7,r8,r7
   2d738:	3a4e703a 	and	r7,r7,r9
   2d73c:	383ff726 	beq	r7,zero,2d71c <strcpy+0x3c>
   2d740:	29800007 	ldb	r6,0(r5)
   2d744:	18c00044 	addi	r3,r3,1
   2d748:	29400044 	addi	r5,r5,1
   2d74c:	19bfffc5 	stb	r6,-1(r3)
   2d750:	3000021e 	bne	r6,zero,2d75c <strcpy+0x7c>
   2d754:	f800283a 	ret
   2d758:	1007883a 	mov	r3,r2
   2d75c:	29800007 	ldb	r6,0(r5)
   2d760:	18c00044 	addi	r3,r3,1
   2d764:	29400044 	addi	r5,r5,1
   2d768:	19bfffc5 	stb	r6,-1(r3)
   2d76c:	303ffb1e 	bne	r6,zero,2d75c <strcpy+0x7c>
   2d770:	f800283a 	ret

0002d774 <__register_exitproc>:
   2d774:	defffa04 	addi	sp,sp,-24
   2d778:	008000f4 	movhi	r2,3
   2d77c:	10933304 	addi	r2,r2,19660
   2d780:	dc000315 	stw	r16,12(sp)
   2d784:	14000017 	ldw	r16,0(r2)
   2d788:	dc400415 	stw	r17,16(sp)
   2d78c:	dfc00515 	stw	ra,20(sp)
   2d790:	80805217 	ldw	r2,328(r16)
   2d794:	2023883a 	mov	r17,r4
   2d798:	10003e26 	beq	r2,zero,2d894 <__register_exitproc+0x120>
   2d79c:	10c00117 	ldw	r3,4(r2)
   2d7a0:	020007c4 	movi	r8,31
   2d7a4:	40c0180e 	bge	r8,r3,2d808 <__register_exitproc+0x94>
   2d7a8:	008000f4 	movhi	r2,3
   2d7ac:	10b5ae04 	addi	r2,r2,-10568
   2d7b0:	1000061e 	bne	r2,zero,2d7cc <__register_exitproc+0x58>
   2d7b4:	00bfffc4 	movi	r2,-1
   2d7b8:	dfc00517 	ldw	ra,20(sp)
   2d7bc:	dc400417 	ldw	r17,16(sp)
   2d7c0:	dc000317 	ldw	r16,12(sp)
   2d7c4:	dec00604 	addi	sp,sp,24
   2d7c8:	f800283a 	ret
   2d7cc:	01006404 	movi	r4,400
   2d7d0:	d9400015 	stw	r5,0(sp)
   2d7d4:	d9800115 	stw	r6,4(sp)
   2d7d8:	d9c00215 	stw	r7,8(sp)
   2d7dc:	002d6b80 	call	2d6b8 <malloc>
   2d7e0:	d9400017 	ldw	r5,0(sp)
   2d7e4:	d9800117 	ldw	r6,4(sp)
   2d7e8:	d9c00217 	ldw	r7,8(sp)
   2d7ec:	103ff126 	beq	r2,zero,2d7b4 <__register_exitproc+0x40>
   2d7f0:	80c05217 	ldw	r3,328(r16)
   2d7f4:	10000115 	stw	zero,4(r2)
   2d7f8:	10c00015 	stw	r3,0(r2)
   2d7fc:	80805215 	stw	r2,328(r16)
   2d800:	10006215 	stw	zero,392(r2)
   2d804:	10006315 	stw	zero,396(r2)
   2d808:	10c00117 	ldw	r3,4(r2)
   2d80c:	88000d1e 	bne	r17,zero,2d844 <__register_exitproc+0xd0>
   2d810:	19000084 	addi	r4,r3,2
   2d814:	2109883a 	add	r4,r4,r4
   2d818:	18c00044 	addi	r3,r3,1
   2d81c:	2109883a 	add	r4,r4,r4
   2d820:	1109883a 	add	r4,r2,r4
   2d824:	10c00115 	stw	r3,4(r2)
   2d828:	0005883a 	mov	r2,zero
   2d82c:	21400015 	stw	r5,0(r4)
   2d830:	dfc00517 	ldw	ra,20(sp)
   2d834:	dc400417 	ldw	r17,16(sp)
   2d838:	dc000317 	ldw	r16,12(sp)
   2d83c:	dec00604 	addi	sp,sp,24
   2d840:	f800283a 	ret
   2d844:	02400044 	movi	r9,1
   2d848:	12806217 	ldw	r10,392(r2)
   2d84c:	48d2983a 	sll	r9,r9,r3
   2d850:	19000804 	addi	r4,r3,32
   2d854:	18d1883a 	add	r8,r3,r3
   2d858:	2109883a 	add	r4,r4,r4
   2d85c:	4211883a 	add	r8,r8,r8
   2d860:	2109883a 	add	r4,r4,r4
   2d864:	1109883a 	add	r4,r2,r4
   2d868:	1211883a 	add	r8,r2,r8
   2d86c:	5254b03a 	or	r10,r10,r9
   2d870:	21c02215 	stw	r7,136(r4)
   2d874:	41802215 	stw	r6,136(r8)
   2d878:	12806215 	stw	r10,392(r2)
   2d87c:	01000084 	movi	r4,2
   2d880:	893fe31e 	bne	r17,r4,2d810 <__register_exitproc+0x9c>
   2d884:	11006317 	ldw	r4,396(r2)
   2d888:	2252b03a 	or	r9,r4,r9
   2d88c:	12406315 	stw	r9,396(r2)
   2d890:	003fdf06 	br	2d810 <__register_exitproc+0x9c>
   2d894:	00800134 	movhi	r2,4
   2d898:	10938804 	addi	r2,r2,20000
   2d89c:	80805215 	stw	r2,328(r16)
   2d8a0:	003fbe06 	br	2d79c <__register_exitproc+0x28>

0002d8a4 <__call_exitprocs>:
   2d8a4:	008000f4 	movhi	r2,3
   2d8a8:	10933304 	addi	r2,r2,19660
   2d8ac:	10800017 	ldw	r2,0(r2)
   2d8b0:	defff304 	addi	sp,sp,-52
   2d8b4:	df000b15 	stw	fp,44(sp)
   2d8b8:	d8800015 	stw	r2,0(sp)
   2d8bc:	10805204 	addi	r2,r2,328
   2d8c0:	dd400815 	stw	r21,32(sp)
   2d8c4:	dfc00c15 	stw	ra,48(sp)
   2d8c8:	ddc00a15 	stw	r23,40(sp)
   2d8cc:	dd800915 	stw	r22,36(sp)
   2d8d0:	dd000715 	stw	r20,28(sp)
   2d8d4:	dcc00615 	stw	r19,24(sp)
   2d8d8:	dc800515 	stw	r18,20(sp)
   2d8dc:	dc400415 	stw	r17,16(sp)
   2d8e0:	dc000315 	stw	r16,12(sp)
   2d8e4:	d9000115 	stw	r4,4(sp)
   2d8e8:	2839883a 	mov	fp,r5
   2d8ec:	d8800215 	stw	r2,8(sp)
   2d8f0:	057fffc4 	movi	r21,-1
   2d8f4:	d8800017 	ldw	r2,0(sp)
   2d8f8:	ddc00217 	ldw	r23,8(sp)
   2d8fc:	14805217 	ldw	r18,328(r2)
   2d900:	90001726 	beq	r18,zero,2d960 <__call_exitprocs+0xbc>
   2d904:	94400117 	ldw	r17,4(r18)
   2d908:	8c3fffc4 	addi	r16,r17,-1
   2d90c:	80001116 	blt	r16,zero,2d954 <__call_exitprocs+0xb0>
   2d910:	8c400044 	addi	r17,r17,1
   2d914:	8427883a 	add	r19,r16,r16
   2d918:	8c63883a 	add	r17,r17,r17
   2d91c:	95802204 	addi	r22,r18,136
   2d920:	9ce7883a 	add	r19,r19,r19
   2d924:	8c63883a 	add	r17,r17,r17
   2d928:	b4e7883a 	add	r19,r22,r19
   2d92c:	9463883a 	add	r17,r18,r17
   2d930:	e0001726 	beq	fp,zero,2d990 <__call_exitprocs+0xec>
   2d934:	8c87c83a 	sub	r3,r17,r18
   2d938:	b0c7883a 	add	r3,r22,r3
   2d93c:	18c01e17 	ldw	r3,120(r3)
   2d940:	1f001326 	beq	r3,fp,2d990 <__call_exitprocs+0xec>
   2d944:	843fffc4 	addi	r16,r16,-1
   2d948:	9cffff04 	addi	r19,r19,-4
   2d94c:	8c7fff04 	addi	r17,r17,-4
   2d950:	857ff71e 	bne	r16,r21,2d930 <__call_exitprocs+0x8c>
   2d954:	008000f4 	movhi	r2,3
   2d958:	10b5b304 	addi	r2,r2,-10548
   2d95c:	10002a1e 	bne	r2,zero,2da08 <__call_exitprocs+0x164>
   2d960:	dfc00c17 	ldw	ra,48(sp)
   2d964:	df000b17 	ldw	fp,44(sp)
   2d968:	ddc00a17 	ldw	r23,40(sp)
   2d96c:	dd800917 	ldw	r22,36(sp)
   2d970:	dd400817 	ldw	r21,32(sp)
   2d974:	dd000717 	ldw	r20,28(sp)
   2d978:	dcc00617 	ldw	r19,24(sp)
   2d97c:	dc800517 	ldw	r18,20(sp)
   2d980:	dc400417 	ldw	r17,16(sp)
   2d984:	dc000317 	ldw	r16,12(sp)
   2d988:	dec00d04 	addi	sp,sp,52
   2d98c:	f800283a 	ret
   2d990:	91000117 	ldw	r4,4(r18)
   2d994:	88c00017 	ldw	r3,0(r17)
   2d998:	213fffc4 	addi	r4,r4,-1
   2d99c:	24001526 	beq	r4,r16,2d9f4 <__call_exitprocs+0x150>
   2d9a0:	88000015 	stw	zero,0(r17)
   2d9a4:	183fe726 	beq	r3,zero,2d944 <__call_exitprocs+0xa0>
   2d9a8:	00800044 	movi	r2,1
   2d9ac:	1408983a 	sll	r4,r2,r16
   2d9b0:	91406217 	ldw	r5,392(r18)
   2d9b4:	95000117 	ldw	r20,4(r18)
   2d9b8:	214a703a 	and	r5,r4,r5
   2d9bc:	28000b26 	beq	r5,zero,2d9ec <__call_exitprocs+0x148>
   2d9c0:	91406317 	ldw	r5,396(r18)
   2d9c4:	2148703a 	and	r4,r4,r5
   2d9c8:	20000c1e 	bne	r4,zero,2d9fc <__call_exitprocs+0x158>
   2d9cc:	99400017 	ldw	r5,0(r19)
   2d9d0:	d9000117 	ldw	r4,4(sp)
   2d9d4:	183ee83a 	callr	r3
   2d9d8:	90c00117 	ldw	r3,4(r18)
   2d9dc:	1d3fc51e 	bne	r3,r20,2d8f4 <__call_exitprocs+0x50>
   2d9e0:	b8c00017 	ldw	r3,0(r23)
   2d9e4:	1cbfd726 	beq	r3,r18,2d944 <__call_exitprocs+0xa0>
   2d9e8:	003fc206 	br	2d8f4 <__call_exitprocs+0x50>
   2d9ec:	183ee83a 	callr	r3
   2d9f0:	003ff906 	br	2d9d8 <__call_exitprocs+0x134>
   2d9f4:	94000115 	stw	r16,4(r18)
   2d9f8:	003fea06 	br	2d9a4 <__call_exitprocs+0x100>
   2d9fc:	99000017 	ldw	r4,0(r19)
   2da00:	183ee83a 	callr	r3
   2da04:	003ff406 	br	2d9d8 <__call_exitprocs+0x134>
   2da08:	90c00117 	ldw	r3,4(r18)
   2da0c:	1800071e 	bne	r3,zero,2da2c <__call_exitprocs+0x188>
   2da10:	90c00017 	ldw	r3,0(r18)
   2da14:	18000926 	beq	r3,zero,2da3c <__call_exitprocs+0x198>
   2da18:	9009883a 	mov	r4,r18
   2da1c:	b8c00015 	stw	r3,0(r23)
   2da20:	002d6cc0 	call	2d6cc <free>
   2da24:	bc800017 	ldw	r18,0(r23)
   2da28:	003fb506 	br	2d900 <__call_exitprocs+0x5c>
   2da2c:	90c00017 	ldw	r3,0(r18)
   2da30:	902f883a 	mov	r23,r18
   2da34:	1825883a 	mov	r18,r3
   2da38:	003fb106 	br	2d900 <__call_exitprocs+0x5c>
   2da3c:	0007883a 	mov	r3,zero
   2da40:	003ffb06 	br	2da30 <__call_exitprocs+0x18c>

0002da44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2da44:	defffc04 	addi	sp,sp,-16
   2da48:	df000315 	stw	fp,12(sp)
   2da4c:	df000304 	addi	fp,sp,12
   2da50:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2da54:	0001883a 	nop
   2da58:	e0bfff17 	ldw	r2,-4(fp)
   2da5c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   2da60:	e0bffd17 	ldw	r2,-12(fp)
   2da64:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2da68:	e0bffe17 	ldw	r2,-8(fp)
   2da6c:	10000226 	beq	r2,zero,2da78 <_exit+0x34>
    ALT_SIM_FAIL();
   2da70:	002af070 	cmpltui	zero,zero,43969
   2da74:	00000106 	br	2da7c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   2da78:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2da7c:	003fff06 	br	2da7c <_exit+0x38>
